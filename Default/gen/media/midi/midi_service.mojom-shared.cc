// media/midi/midi_service.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "media/midi/midi_service.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "media/midi/midi_service.mojom-params-data.h"
namespace midi {
namespace mojom {

static NOINLINE const char* ResultToStringHelper(Result value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case Result::NOT_INITIALIZED:
      return "NOT_INITIALIZED";
    case Result::OK:
      return "OK";
    case Result::NOT_SUPPORTED:
      return "NOT_SUPPORTED";
    case Result::INITIALIZATION_ERROR:
      return "INITIALIZATION_ERROR";
    default:
      return nullptr;
  }
}

std::string ResultToString(Result value) {
  const char *str = ResultToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown Result value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, Result value) {
  return os << ResultToString(value);
}

static NOINLINE const char* PortStateToStringHelper(PortState value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case PortState::DISCONNECTED:
      return "DISCONNECTED";
    case PortState::CONNECTED:
      return "CONNECTED";
    case PortState::OPENED:
      return "OPENED";
    default:
      return nullptr;
  }
}

std::string PortStateToString(PortState value) {
  const char *str = PortStateToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown PortState value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, PortState value) {
  return os << PortStateToString(value);
}

namespace internal {


// static
bool PortInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 48, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const PortInfo_Data* object =
      static_cast<const PortInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->id, validation_context,
                                         &id_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->manufacturer, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams manufacturer_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->manufacturer, validation_context,
                                         &manufacturer_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->name, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->name, validation_context,
                                         &name_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->version, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams version_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->version, validation_context,
                                         &version_validate_params)) {
    return false;
  }


  if (!::midi::mojom::internal::PortState_Data
        ::Validate(object->state, validation_context))
    return false;

  return true;
}

PortInfo_Data::PortInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MidiSessionClient_AddInputPort_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MidiSessionClient_AddInputPort_Params_Data* object =
      static_cast<const MidiSessionClient_AddInputPort_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->info, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->info, validation_context))
    return false;

  return true;
}

MidiSessionClient_AddInputPort_Params_Data::MidiSessionClient_AddInputPort_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MidiSessionClient_AddOutputPort_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MidiSessionClient_AddOutputPort_Params_Data* object =
      static_cast<const MidiSessionClient_AddOutputPort_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->info, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->info, validation_context))
    return false;

  return true;
}

MidiSessionClient_AddOutputPort_Params_Data::MidiSessionClient_AddOutputPort_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MidiSessionClient_SetInputPortState_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MidiSessionClient_SetInputPortState_Params_Data* object =
      static_cast<const MidiSessionClient_SetInputPortState_Params_Data*>(data);


  if (!::midi::mojom::internal::PortState_Data
        ::Validate(object->state, validation_context))
    return false;

  return true;
}

MidiSessionClient_SetInputPortState_Params_Data::MidiSessionClient_SetInputPortState_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MidiSessionClient_SetOutputPortState_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MidiSessionClient_SetOutputPortState_Params_Data* object =
      static_cast<const MidiSessionClient_SetOutputPortState_Params_Data*>(data);


  if (!::midi::mojom::internal::PortState_Data
        ::Validate(object->state, validation_context))
    return false;

  return true;
}

MidiSessionClient_SetOutputPortState_Params_Data::MidiSessionClient_SetOutputPortState_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MidiSessionClient_SessionStarted_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MidiSessionClient_SessionStarted_Params_Data* object =
      static_cast<const MidiSessionClient_SessionStarted_Params_Data*>(data);


  if (!::midi::mojom::internal::Result_Data
        ::Validate(object->result, validation_context))
    return false;

  return true;
}

MidiSessionClient_SessionStarted_Params_Data::MidiSessionClient_SessionStarted_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MidiSessionClient_AcknowledgeSentData_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MidiSessionClient_AcknowledgeSentData_Params_Data* object =
      static_cast<const MidiSessionClient_AcknowledgeSentData_Params_Data*>(data);

  return true;
}

MidiSessionClient_AcknowledgeSentData_Params_Data::MidiSessionClient_AcknowledgeSentData_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MidiSessionClient_DataReceived_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MidiSessionClient_DataReceived_Params_Data* object =
      static_cast<const MidiSessionClient_DataReceived_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->data, validation_context,
                                         &data_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->timestamp, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->timestamp, validation_context))
    return false;

  return true;
}

MidiSessionClient_DataReceived_Params_Data::MidiSessionClient_DataReceived_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MidiSessionProvider_StartSession_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MidiSessionProvider_StartSession_Params_Data* object =
      static_cast<const MidiSessionProvider_StartSession_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->client, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->client,
                                                 validation_context)) {
    return false;
  }

  return true;
}

MidiSessionProvider_StartSession_Params_Data::MidiSessionProvider_StartSession_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MidiSession_SendData_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MidiSession_SendData_Params_Data* object =
      static_cast<const MidiSession_SendData_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->data, validation_context,
                                         &data_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->timestamp, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->timestamp, validation_context))
    return false;

  return true;
}

MidiSession_SendData_Params_Data::MidiSession_SendData_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace midi

namespace perfetto {

// static
void TraceFormatTraits<::midi::mojom::Result>::WriteIntoTrace(
   perfetto::TracedValue context, ::midi::mojom::Result value) {
  return std::move(context).WriteString(::midi::mojom::ResultToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::midi::mojom::PortState>::WriteIntoTrace(
   perfetto::TracedValue context, ::midi::mojom::PortState value) {
  return std::move(context).WriteString(::midi::mojom::PortStateToString(value));
}

} // namespace perfetto