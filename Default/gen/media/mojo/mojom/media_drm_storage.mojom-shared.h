// media/mojo/mojom/media_drm_storage.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_MEDIA_DRM_STORAGE_MOJOM_SHARED_H_
#define MEDIA_MOJO_MOJOM_MEDIA_DRM_STORAGE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "media/mojo/mojom/media_drm_storage.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "mojo/public/cpp/bindings/native_enum.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"




namespace media {
namespace mojom {
class SessionDataDataView;



}  // namespace mojom
}  // namespace media

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::media::mojom::SessionDataDataView> {
  using Data = ::media::mojom::internal::SessionData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace media {
namespace mojom {
using SessionData_KeyType = mojo::NativeEnum;
// Interface base classes. They are used for type safety check.
class MediaDrmStorageInterfaceBase {};

using MediaDrmStoragePtrDataView =
    mojo::InterfacePtrDataView<MediaDrmStorageInterfaceBase>;
using MediaDrmStorageRequestDataView =
    mojo::InterfaceRequestDataView<MediaDrmStorageInterfaceBase>;
using MediaDrmStorageAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<MediaDrmStorageInterfaceBase>;
using MediaDrmStorageAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<MediaDrmStorageInterfaceBase>;


class SessionDataDataView {
 public:
  SessionDataDataView() = default;

  SessionDataDataView(
      internal::SessionData_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeySetIdDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeySetId(UserType* output) {
    
    auto* pointer = data_->key_set_id.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
  inline void GetMimeTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMimeType(UserType* output) {
    
    auto* pointer = data_->mime_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadKeyType(UserType* output) const {
    auto data_value = data_->key_type;
    return mojo::internal::Deserialize<::media::mojom::SessionData_KeyType>(
        data_value, output);
  }
  SessionData_KeyType key_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media::mojom::SessionData_KeyType>(data_->key_type));
  }
 private:
  internal::SessionData_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace media

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media::mojom::SessionDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media::mojom::SessionDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::media::mojom::internal::SessionData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::key_set_id(input)) in_key_set_id = Traits::key_set_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->key_set_id)::BaseType>
        key_set_id_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams key_set_id_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_key_set_id, key_set_id_fragment, &key_set_id_validate_params);
    fragment->key_set_id.Set(
        key_set_id_fragment.is_null() ? nullptr : key_set_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->key_set_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null key_set_id in SessionData struct");
    decltype(Traits::mime_type(input)) in_mime_type = Traits::mime_type(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->mime_type)::BaseType> mime_type_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_mime_type, mime_type_fragment);
    fragment->mime_type.Set(
        mime_type_fragment.is_null() ? nullptr : mime_type_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->mime_type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null mime_type in SessionData struct");
    mojo::internal::Serialize<::media::mojom::SessionData_KeyType>(
        Traits::key_type(input), &fragment->key_type);
  }

  static bool Deserialize(::media::mojom::internal::SessionData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media::mojom::SessionDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace media {
namespace mojom {

inline void SessionDataDataView::GetKeySetIdDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->key_set_id.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}
inline void SessionDataDataView::GetMimeTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->mime_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace media

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // MEDIA_MOJO_MOJOM_MEDIA_DRM_STORAGE_MOJOM_SHARED_H_