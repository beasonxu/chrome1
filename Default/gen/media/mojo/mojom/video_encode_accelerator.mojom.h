// media/mojo/mojom/video_encode_accelerator.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_VIDEO_ENCODE_ACCELERATOR_MOJOM_H_
#define MEDIA_MOJO_MOJOM_VIDEO_ENCODE_ACCELERATOR_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "media/mojo/mojom/video_encode_accelerator.mojom-shared.h"
#include "media/mojo/mojom/video_encode_accelerator.mojom-forward.h"
#include "media/mojo/mojom/media_log.mojom-forward.h"
#include "media/mojo/mojom/media_types.mojom.h"
#include "mojo/public/mojom/base/shared_memory.mojom.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"
#include "media/mojo/mojom/video_encoder_info.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "mojo/public/cpp/bindings/lib/native_enum_serialization.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"
#include "media/mojo/mojom/video_encode_accelerator_mojom_traits.h"




namespace media {
namespace mojom {

class VideoEncodeAcceleratorProviderProxy;

template <typename ImplRefTraits>
class VideoEncodeAcceleratorProviderStub;

class VideoEncodeAcceleratorProviderRequestValidator;
class VideoEncodeAcceleratorProviderResponseValidator;


class  VideoEncodeAcceleratorProvider
    : public VideoEncodeAcceleratorProviderInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = VideoEncodeAcceleratorProviderInterfaceBase;
  using Proxy_ = VideoEncodeAcceleratorProviderProxy;

  template <typename ImplRefTraits>
  using Stub_ = VideoEncodeAcceleratorProviderStub<ImplRefTraits>;

  using RequestValidator_ = VideoEncodeAcceleratorProviderRequestValidator;
  using ResponseValidator_ = VideoEncodeAcceleratorProviderResponseValidator;
  enum MethodMinVersions : uint32_t {
    kCreateVideoEncodeAcceleratorMinVersion = 0,
    kGetVideoEncodeAcceleratorSupportedProfilesMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct CreateVideoEncodeAccelerator_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetVideoEncodeAcceleratorSupportedProfiles_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~VideoEncodeAcceleratorProvider() = default;

  
  virtual void CreateVideoEncodeAccelerator(::mojo::PendingReceiver<VideoEncodeAccelerator> receiver) = 0;


  using GetVideoEncodeAcceleratorSupportedProfilesCallback = base::OnceCallback<void(const std::vector<::media::VideoEncodeAccelerator::SupportedProfile>&)>;
  
  virtual void GetVideoEncodeAcceleratorSupportedProfiles(GetVideoEncodeAcceleratorSupportedProfilesCallback callback) = 0;
};

class VideoEncodeAcceleratorProxy;

template <typename ImplRefTraits>
class VideoEncodeAcceleratorStub;

class VideoEncodeAcceleratorRequestValidator;
class VideoEncodeAcceleratorResponseValidator;


class  VideoEncodeAccelerator
    : public VideoEncodeAcceleratorInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = true;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = VideoEncodeAcceleratorInterfaceBase;
  using Proxy_ = VideoEncodeAcceleratorProxy;

  template <typename ImplRefTraits>
  using Stub_ = VideoEncodeAcceleratorStub<ImplRefTraits>;

  using RequestValidator_ = VideoEncodeAcceleratorRequestValidator;
  using ResponseValidator_ = VideoEncodeAcceleratorResponseValidator;
  enum MethodMinVersions : uint32_t {
    kInitializeMinVersion = 0,
    kEncodeMinVersion = 0,
    kUseOutputBitstreamBufferMinVersion = 0,
    kRequestEncodingParametersChangeWithLayersMinVersion = 0,
    kRequestEncodingParametersChangeWithBitrateMinVersion = 0,
    kIsFlushSupportedMinVersion = 0,
    kFlushMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Initialize_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Encode_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct UseOutputBitstreamBuffer_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct RequestEncodingParametersChangeWithLayers_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct RequestEncodingParametersChangeWithBitrate_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct IsFlushSupported_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Flush_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  
  using Error = VideoEncodeAccelerator_Error;
  virtual ~VideoEncodeAccelerator() = default;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
  virtual bool Initialize(const ::media::VideoEncodeAccelerator::Config& config, ::mojo::PendingAssociatedRemote<VideoEncodeAcceleratorClient> client, ::mojo::PendingRemote<::media::mojom::MediaLog> media_log, bool* out_result);

  using InitializeCallback = base::OnceCallback<void(bool)>;
  
  virtual void Initialize(const ::media::VideoEncodeAccelerator::Config& config, ::mojo::PendingAssociatedRemote<VideoEncodeAcceleratorClient> client, ::mojo::PendingRemote<::media::mojom::MediaLog> media_log, InitializeCallback callback) = 0;


  using EncodeCallback = base::OnceCallback<void()>;
  
  virtual void Encode(const ::scoped_refptr<::media::VideoFrame>& frame, bool force_keyframe, EncodeCallback callback) = 0;

  
  virtual void UseOutputBitstreamBuffer(int32_t bitstream_buffer_id, ::base::UnsafeSharedMemoryRegion region) = 0;

  
  virtual void RequestEncodingParametersChangeWithLayers(const ::media::VideoBitrateAllocation& bitrate_allocation, uint32_t framerate) = 0;

  
  virtual void RequestEncodingParametersChangeWithBitrate(const ::media::Bitrate& bitrate, uint32_t framerate) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
  virtual bool IsFlushSupported(bool* out_result);

  using IsFlushSupportedCallback = base::OnceCallback<void(bool)>;
  
  virtual void IsFlushSupported(IsFlushSupportedCallback callback) = 0;


  using FlushCallback = base::OnceCallback<void(bool)>;
  
  virtual void Flush(FlushCallback callback) = 0;
};

class VideoEncodeAcceleratorClientProxy;

template <typename ImplRefTraits>
class VideoEncodeAcceleratorClientStub;

class VideoEncodeAcceleratorClientRequestValidator;


class  VideoEncodeAcceleratorClient
    : public VideoEncodeAcceleratorClientInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = VideoEncodeAcceleratorClientInterfaceBase;
  using Proxy_ = VideoEncodeAcceleratorClientProxy;

  template <typename ImplRefTraits>
  using Stub_ = VideoEncodeAcceleratorClientStub<ImplRefTraits>;

  using RequestValidator_ = VideoEncodeAcceleratorClientRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kRequireBitstreamBuffersMinVersion = 0,
    kBitstreamBufferReadyMinVersion = 0,
    kNotifyErrorMinVersion = 0,
    kNotifyEncoderInfoChangeMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct RequireBitstreamBuffers_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct BitstreamBufferReady_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct NotifyError_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct NotifyEncoderInfoChange_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~VideoEncodeAcceleratorClient() = default;

  
  virtual void RequireBitstreamBuffers(uint32_t input_count, const ::gfx::Size& input_coded_size, uint32_t output_buffer_size) = 0;

  
  virtual void BitstreamBufferReady(int32_t bitstream_buffer_id, const ::media::BitstreamBufferMetadata& metadata) = 0;

  
  virtual void NotifyError(::media::VideoEncodeAccelerator::Error error) = 0;

  
  virtual void NotifyEncoderInfoChange(const ::media::VideoEncoderInfo& info) = 0;
};



class  VideoEncodeAcceleratorProviderProxy
    : public VideoEncodeAcceleratorProvider {
 public:
  using InterfaceType = VideoEncodeAcceleratorProvider;

  explicit VideoEncodeAcceleratorProviderProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void CreateVideoEncodeAccelerator(::mojo::PendingReceiver<VideoEncodeAccelerator> receiver) final;
  
  void GetVideoEncodeAcceleratorSupportedProfiles(GetVideoEncodeAcceleratorSupportedProfilesCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  VideoEncodeAcceleratorProxy
    : public VideoEncodeAccelerator {
 public:
  using InterfaceType = VideoEncodeAccelerator;

  explicit VideoEncodeAcceleratorProxy(mojo::MessageReceiverWithResponder* receiver);
  
  bool Initialize(const ::media::VideoEncodeAccelerator::Config& config, ::mojo::PendingAssociatedRemote<VideoEncodeAcceleratorClient> client, ::mojo::PendingRemote<::media::mojom::MediaLog> media_log, bool* out_result) final;
  
  void Initialize(const ::media::VideoEncodeAccelerator::Config& config, ::mojo::PendingAssociatedRemote<VideoEncodeAcceleratorClient> client, ::mojo::PendingRemote<::media::mojom::MediaLog> media_log, InitializeCallback callback) final;
  
  void Encode(const ::scoped_refptr<::media::VideoFrame>& frame, bool force_keyframe, EncodeCallback callback) final;
  
  void UseOutputBitstreamBuffer(int32_t bitstream_buffer_id, ::base::UnsafeSharedMemoryRegion region) final;
  
  void RequestEncodingParametersChangeWithLayers(const ::media::VideoBitrateAllocation& bitrate_allocation, uint32_t framerate) final;
  
  void RequestEncodingParametersChangeWithBitrate(const ::media::Bitrate& bitrate, uint32_t framerate) final;
  
  bool IsFlushSupported(bool* out_result) final;
  
  void IsFlushSupported(IsFlushSupportedCallback callback) final;
  
  void Flush(FlushCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  VideoEncodeAcceleratorClientProxy
    : public VideoEncodeAcceleratorClient {
 public:
  using InterfaceType = VideoEncodeAcceleratorClient;

  explicit VideoEncodeAcceleratorClientProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void RequireBitstreamBuffers(uint32_t input_count, const ::gfx::Size& input_coded_size, uint32_t output_buffer_size) final;
  
  void BitstreamBufferReady(int32_t bitstream_buffer_id, const ::media::BitstreamBufferMetadata& metadata) final;
  
  void NotifyError(::media::VideoEncodeAccelerator::Error error) final;
  
  void NotifyEncoderInfoChange(const ::media::VideoEncoderInfo& info) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  VideoEncodeAcceleratorProviderStubDispatch {
 public:
  static bool Accept(VideoEncodeAcceleratorProvider* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      VideoEncodeAcceleratorProvider* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<VideoEncodeAcceleratorProvider>>
class VideoEncodeAcceleratorProviderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  VideoEncodeAcceleratorProviderStub() = default;
  ~VideoEncodeAcceleratorProviderStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return VideoEncodeAcceleratorProviderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return VideoEncodeAcceleratorProviderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  VideoEncodeAcceleratorStubDispatch {
 public:
  static bool Accept(VideoEncodeAccelerator* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      VideoEncodeAccelerator* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<VideoEncodeAccelerator>>
class VideoEncodeAcceleratorStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  VideoEncodeAcceleratorStub() = default;
  ~VideoEncodeAcceleratorStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return VideoEncodeAcceleratorStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return VideoEncodeAcceleratorStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  VideoEncodeAcceleratorClientStubDispatch {
 public:
  static bool Accept(VideoEncodeAcceleratorClient* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      VideoEncodeAcceleratorClient* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<VideoEncodeAcceleratorClient>>
class VideoEncodeAcceleratorClientStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  VideoEncodeAcceleratorClientStub() = default;
  ~VideoEncodeAcceleratorClientStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return VideoEncodeAcceleratorClientStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return VideoEncodeAcceleratorClientStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  VideoEncodeAcceleratorProviderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  VideoEncodeAcceleratorRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  VideoEncodeAcceleratorClientRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  VideoEncodeAcceleratorProviderResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  VideoEncodeAcceleratorResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};






class  VariableBitratePeak {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<VariableBitratePeak, T>::value>;
  using DataView = VariableBitratePeakDataView;
  using Data_ = internal::VariableBitratePeak_Data;

  template <typename... Args>
  static VariableBitratePeakPtr New(Args&&... args) {
    return VariableBitratePeakPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static VariableBitratePeakPtr From(const U& u) {
    return mojo::TypeConverter<VariableBitratePeakPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, VariableBitratePeak>::Convert(*this);
  }


  VariableBitratePeak();

  explicit VariableBitratePeak(
      uint32_t bps);


  ~VariableBitratePeak();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = VariableBitratePeakPtr>
  VariableBitratePeakPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, VariableBitratePeak::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, VariableBitratePeak::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        VariableBitratePeak::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        VariableBitratePeak::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::VariableBitratePeak_UnserializedMessageContext<
            UserType, VariableBitratePeak::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<VariableBitratePeak::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return VariableBitratePeak::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::VariableBitratePeak_UnserializedMessageContext<
            UserType, VariableBitratePeak::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<VariableBitratePeak::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint32_t bps;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, VariableBitratePeak::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, VariableBitratePeak::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, VariableBitratePeak::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, VariableBitratePeak::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







class  ConstantBitrate {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ConstantBitrate, T>::value>;
  using DataView = ConstantBitrateDataView;
  using Data_ = internal::ConstantBitrate_Data;

  template <typename... Args>
  static ConstantBitratePtr New(Args&&... args) {
    return ConstantBitratePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ConstantBitratePtr From(const U& u) {
    return mojo::TypeConverter<ConstantBitratePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ConstantBitrate>::Convert(*this);
  }


  ConstantBitrate();

  explicit ConstantBitrate(
      uint32_t target_bps);


  ~ConstantBitrate();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ConstantBitratePtr>
  ConstantBitratePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ConstantBitrate::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ConstantBitrate::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ConstantBitrate::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ConstantBitrate::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ConstantBitrate_UnserializedMessageContext<
            UserType, ConstantBitrate::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ConstantBitrate::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ConstantBitrate::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ConstantBitrate_UnserializedMessageContext<
            UserType, ConstantBitrate::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ConstantBitrate::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint32_t target_bps;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ConstantBitrate::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ConstantBitrate::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ConstantBitrate::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ConstantBitrate::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  VariableBitrate {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<VariableBitrate, T>::value>;
  using DataView = VariableBitrateDataView;
  using Data_ = internal::VariableBitrate_Data;

  template <typename... Args>
  static VariableBitratePtr New(Args&&... args) {
    return VariableBitratePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static VariableBitratePtr From(const U& u) {
    return mojo::TypeConverter<VariableBitratePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, VariableBitrate>::Convert(*this);
  }


  VariableBitrate();

  VariableBitrate(
      uint32_t target_bps,
      uint32_t peak_bps);


  ~VariableBitrate();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = VariableBitratePtr>
  VariableBitratePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, VariableBitrate::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, VariableBitrate::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        VariableBitrate::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        VariableBitrate::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::VariableBitrate_UnserializedMessageContext<
            UserType, VariableBitrate::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<VariableBitrate::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return VariableBitrate::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::VariableBitrate_UnserializedMessageContext<
            UserType, VariableBitrate::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<VariableBitrate::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint32_t target_bps;
  
  uint32_t peak_bps;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, VariableBitrate::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, VariableBitrate::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, VariableBitrate::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, VariableBitrate::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class  H264Metadata {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<H264Metadata, T>::value>;
  using DataView = H264MetadataDataView;
  using Data_ = internal::H264Metadata_Data;

  template <typename... Args>
  static H264MetadataPtr New(Args&&... args) {
    return H264MetadataPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static H264MetadataPtr From(const U& u) {
    return mojo::TypeConverter<H264MetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, H264Metadata>::Convert(*this);
  }


  H264Metadata();

  H264Metadata(
      uint8_t temporal_idx,
      bool layer_sync);


  ~H264Metadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = H264MetadataPtr>
  H264MetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, H264Metadata::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, H264Metadata::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        H264Metadata::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        H264Metadata::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::H264Metadata_UnserializedMessageContext<
            UserType, H264Metadata::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<H264Metadata::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return H264Metadata::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::H264Metadata_UnserializedMessageContext<
            UserType, H264Metadata::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<H264Metadata::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint8_t temporal_idx;
  
  bool layer_sync;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, H264Metadata::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, H264Metadata::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, H264Metadata::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, H264Metadata::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  Vp8Metadata {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Vp8Metadata, T>::value>;
  using DataView = Vp8MetadataDataView;
  using Data_ = internal::Vp8Metadata_Data;

  template <typename... Args>
  static Vp8MetadataPtr New(Args&&... args) {
    return Vp8MetadataPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static Vp8MetadataPtr From(const U& u) {
    return mojo::TypeConverter<Vp8MetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Vp8Metadata>::Convert(*this);
  }


  Vp8Metadata();

  Vp8Metadata(
      bool non_reference,
      uint8_t temporal_idx,
      bool layer_sync);


  ~Vp8Metadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = Vp8MetadataPtr>
  Vp8MetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Vp8Metadata::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Vp8Metadata::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Vp8Metadata::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Vp8Metadata::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Vp8Metadata_UnserializedMessageContext<
            UserType, Vp8Metadata::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Vp8Metadata::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Vp8Metadata::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Vp8Metadata_UnserializedMessageContext<
            UserType, Vp8Metadata::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Vp8Metadata::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  bool non_reference;
  
  uint8_t temporal_idx;
  
  bool layer_sync;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Vp8Metadata::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Vp8Metadata::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Vp8Metadata::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Vp8Metadata::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}








class  Bitrate {
 public:
  using DataView = BitrateDataView;
  using Data_ = internal::Bitrate_Data;
  using Tag = Data_::Bitrate_Tag;

  template <typename... Args>
  static BitratePtr New(Args&&... args) {
    static_assert(
        sizeof...(args) < 0,
        "Do not use Union::New(); to create a union of a given subtype, use "
        "New<SubType>(), not New() followed by set_<sub_type>(). To represent "
        "an empty union, mark the field or parameter as nullable in the mojom "
        "definition.");
  }
  // Construct an instance holding |constant|.
  static BitratePtr
  NewConstant(
      const ::media::Bitrate& constant) {
    auto result = BitratePtr(absl::in_place);
    result->set_constant(std::move(constant));
    return result;
  }
  // Construct an instance holding |variable|.
  static BitratePtr
  NewVariable(
      const ::media::Bitrate& variable) {
    auto result = BitratePtr(absl::in_place);
    result->set_variable(std::move(variable));
    return result;
  }

  template <typename U>
  static BitratePtr From(const U& u) {
    return mojo::TypeConverter<BitratePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Bitrate>::Convert(*this);
  }

  Bitrate();
  ~Bitrate();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = BitratePtr>
  BitratePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, Bitrate>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, Bitrate>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
  bool is_constant() const { return tag_ == Tag::kConstant; }

  
  ::media::Bitrate& get_constant() const {
    CHECK(tag_ == Tag::kConstant);
    return *(data_.constant);
  }

  
  void set_constant(
      const ::media::Bitrate& constant);
  
  bool is_variable() const { return tag_ == Tag::kVariable; }

  
  ::media::Bitrate& get_variable() const {
    CHECK(tag_ == Tag::kVariable);
    return *(data_.variable);
  }

  
  void set_variable(
      const ::media::Bitrate& variable);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Bitrate::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<Bitrate::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() = default;
    ~Union_() = default;
    ::media::Bitrate* constant;
    ::media::Bitrate* variable;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};



class  CodecMetadata {
 public:
  using DataView = CodecMetadataDataView;
  using Data_ = internal::CodecMetadata_Data;
  using Tag = Data_::CodecMetadata_Tag;

  template <typename... Args>
  static CodecMetadataPtr New(Args&&... args) {
    static_assert(
        sizeof...(args) < 0,
        "Do not use Union::New(); to create a union of a given subtype, use "
        "New<SubType>(), not New() followed by set_<sub_type>(). To represent "
        "an empty union, mark the field or parameter as nullable in the mojom "
        "definition.");
  }
  // Construct an instance holding |h264|.
  static CodecMetadataPtr
  NewH264(
      H264MetadataPtr h264) {
    auto result = CodecMetadataPtr(absl::in_place);
    result->set_h264(std::move(h264));
    return result;
  }
  // Construct an instance holding |vp8|.
  static CodecMetadataPtr
  NewVp8(
      const ::media::Vp8Metadata& vp8) {
    auto result = CodecMetadataPtr(absl::in_place);
    result->set_vp8(std::move(vp8));
    return result;
  }
  // Construct an instance holding |vp9|.
  static CodecMetadataPtr
  NewVp9(
      const ::media::Vp9Metadata& vp9) {
    auto result = CodecMetadataPtr(absl::in_place);
    result->set_vp9(std::move(vp9));
    return result;
  }
  // Construct an instance holding |av1|.
  static CodecMetadataPtr
  NewAv1(
      Av1MetadataPtr av1) {
    auto result = CodecMetadataPtr(absl::in_place);
    result->set_av1(std::move(av1));
    return result;
  }

  template <typename U>
  static CodecMetadataPtr From(const U& u) {
    return mojo::TypeConverter<CodecMetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CodecMetadata>::Convert(*this);
  }

  CodecMetadata();
  ~CodecMetadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = CodecMetadataPtr>
  CodecMetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, CodecMetadata>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, CodecMetadata>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
  bool is_h264() const { return tag_ == Tag::kH264; }

  
  H264MetadataPtr& get_h264() const {
    CHECK(tag_ == Tag::kH264);
    return *(data_.h264);
  }

  
  void set_h264(
      H264MetadataPtr h264);
  
  bool is_vp8() const { return tag_ == Tag::kVp8; }

  
  ::media::Vp8Metadata& get_vp8() const {
    CHECK(tag_ == Tag::kVp8);
    return *(data_.vp8);
  }

  
  void set_vp8(
      const ::media::Vp8Metadata& vp8);
  
  bool is_vp9() const { return tag_ == Tag::kVp9; }

  
  ::media::Vp9Metadata& get_vp9() const {
    CHECK(tag_ == Tag::kVp9);
    return *(data_.vp9);
  }

  
  void set_vp9(
      const ::media::Vp9Metadata& vp9);
  
  bool is_av1() const { return tag_ == Tag::kAv1; }

  
  Av1MetadataPtr& get_av1() const {
    CHECK(tag_ == Tag::kAv1);
    return *(data_.av1);
  }

  
  void set_av1(
      Av1MetadataPtr av1);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CodecMetadata::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<CodecMetadata::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() = default;
    ~Union_() = default;
    H264MetadataPtr* h264;
    ::media::Vp8Metadata* vp8;
    ::media::Vp9Metadata* vp9;
    Av1MetadataPtr* av1;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





class  VideoEncodeAcceleratorSupportedProfile {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<VideoEncodeAcceleratorSupportedProfile, T>::value>;
  using DataView = VideoEncodeAcceleratorSupportedProfileDataView;
  using Data_ = internal::VideoEncodeAcceleratorSupportedProfile_Data;

  template <typename... Args>
  static VideoEncodeAcceleratorSupportedProfilePtr New(Args&&... args) {
    return VideoEncodeAcceleratorSupportedProfilePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static VideoEncodeAcceleratorSupportedProfilePtr From(const U& u) {
    return mojo::TypeConverter<VideoEncodeAcceleratorSupportedProfilePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, VideoEncodeAcceleratorSupportedProfile>::Convert(*this);
  }


  VideoEncodeAcceleratorSupportedProfile();

  VideoEncodeAcceleratorSupportedProfile(
      ::media::VideoCodecProfile profile,
      const ::gfx::Size& min_resolution,
      const ::gfx::Size& max_resolution,
      uint32_t max_framerate_numerator,
      uint32_t max_framerate_denominator,
      std::vector<VideoEncodeAcceleratorSupportedRateControlMode> rate_control_modes,
      std::vector<::media::SVCScalabilityMode> scalability_modes);


  ~VideoEncodeAcceleratorSupportedProfile();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = VideoEncodeAcceleratorSupportedProfilePtr>
  VideoEncodeAcceleratorSupportedProfilePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, VideoEncodeAcceleratorSupportedProfile::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, VideoEncodeAcceleratorSupportedProfile::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        VideoEncodeAcceleratorSupportedProfile::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        VideoEncodeAcceleratorSupportedProfile::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::VideoEncodeAcceleratorSupportedProfile_UnserializedMessageContext<
            UserType, VideoEncodeAcceleratorSupportedProfile::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<VideoEncodeAcceleratorSupportedProfile::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return VideoEncodeAcceleratorSupportedProfile::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::VideoEncodeAcceleratorSupportedProfile_UnserializedMessageContext<
            UserType, VideoEncodeAcceleratorSupportedProfile::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<VideoEncodeAcceleratorSupportedProfile::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::media::VideoCodecProfile profile;
  
  ::gfx::Size min_resolution;
  
  ::gfx::Size max_resolution;
  
  uint32_t max_framerate_numerator;
  
  uint32_t max_framerate_denominator;
  
  std::vector<VideoEncodeAcceleratorSupportedRateControlMode> rate_control_modes;
  
  std::vector<::media::SVCScalabilityMode> scalability_modes;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, VideoEncodeAcceleratorSupportedProfile::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, VideoEncodeAcceleratorSupportedProfile::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, VideoEncodeAcceleratorSupportedProfile::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, VideoEncodeAcceleratorSupportedProfile::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class  VideoBitrateAllocation {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<VideoBitrateAllocation, T>::value>;
  using DataView = VideoBitrateAllocationDataView;
  using Data_ = internal::VideoBitrateAllocation_Data;

  template <typename... Args>
  static VideoBitrateAllocationPtr New(Args&&... args) {
    return VideoBitrateAllocationPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static VideoBitrateAllocationPtr From(const U& u) {
    return mojo::TypeConverter<VideoBitrateAllocationPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, VideoBitrateAllocation>::Convert(*this);
  }


  VideoBitrateAllocation();

  VideoBitrateAllocation(
      std::vector<uint32_t> bitrates,
      VariableBitratePeakPtr variable_bitrate_peak);

VideoBitrateAllocation(const VideoBitrateAllocation&) = delete;
VideoBitrateAllocation& operator=(const VideoBitrateAllocation&) = delete;

  ~VideoBitrateAllocation();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = VideoBitrateAllocationPtr>
  VideoBitrateAllocationPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, VideoBitrateAllocation::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, VideoBitrateAllocation::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        VideoBitrateAllocation::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        VideoBitrateAllocation::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::VideoBitrateAllocation_UnserializedMessageContext<
            UserType, VideoBitrateAllocation::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<VideoBitrateAllocation::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return VideoBitrateAllocation::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::VideoBitrateAllocation_UnserializedMessageContext<
            UserType, VideoBitrateAllocation::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<VideoBitrateAllocation::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::vector<uint32_t> bitrates;
  
  VariableBitratePeakPtr variable_bitrate_peak;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, VideoBitrateAllocation::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, VideoBitrateAllocation::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, VideoBitrateAllocation::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, VideoBitrateAllocation::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  SpatialLayer {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SpatialLayer, T>::value>;
  using DataView = SpatialLayerDataView;
  using Data_ = internal::SpatialLayer_Data;

  template <typename... Args>
  static SpatialLayerPtr New(Args&&... args) {
    return SpatialLayerPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SpatialLayerPtr From(const U& u) {
    return mojo::TypeConverter<SpatialLayerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SpatialLayer>::Convert(*this);
  }


  SpatialLayer();

  SpatialLayer(
      int32_t width,
      int32_t height,
      uint32_t bitrate_bps,
      uint32_t framerate,
      uint8_t max_qp,
      uint8_t num_of_temporal_layers);


  ~SpatialLayer();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SpatialLayerPtr>
  SpatialLayerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SpatialLayer::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, SpatialLayer::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SpatialLayer::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SpatialLayer::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SpatialLayer_UnserializedMessageContext<
            UserType, SpatialLayer::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<SpatialLayer::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SpatialLayer::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SpatialLayer_UnserializedMessageContext<
            UserType, SpatialLayer::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SpatialLayer::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t width;
  
  int32_t height;
  
  uint32_t bitrate_bps;
  
  uint32_t framerate;
  
  uint8_t max_qp;
  
  uint8_t num_of_temporal_layers;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SpatialLayer::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SpatialLayer::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SpatialLayer::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SpatialLayer::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







class  VideoEncodeAcceleratorConfig {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<VideoEncodeAcceleratorConfig, T>::value>;
  using DataView = VideoEncodeAcceleratorConfigDataView;
  using Data_ = internal::VideoEncodeAcceleratorConfig_Data;
  using ContentType = VideoEncodeAcceleratorConfig_ContentType;
  using InterLayerPredMode = VideoEncodeAcceleratorConfig_InterLayerPredMode;
  using StorageType = VideoEncodeAcceleratorConfig_StorageType;

  template <typename... Args>
  static VideoEncodeAcceleratorConfigPtr New(Args&&... args) {
    return VideoEncodeAcceleratorConfigPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static VideoEncodeAcceleratorConfigPtr From(const U& u) {
    return mojo::TypeConverter<VideoEncodeAcceleratorConfigPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, VideoEncodeAcceleratorConfig>::Convert(*this);
  }


  VideoEncodeAcceleratorConfig();

  VideoEncodeAcceleratorConfig(
      ::media::VideoPixelFormat input_format,
      const ::gfx::Size& input_visible_size,
      ::media::VideoCodecProfile output_profile,
      const ::media::Bitrate& bitrate,
      uint32_t initial_framerate,
      bool has_initial_framerate,
      uint32_t gop_length,
      bool has_gop_length,
      uint8_t h264_output_level,
      bool has_h264_output_level,
      bool is_constrained_h264,
      VideoEncodeAcceleratorConfig::StorageType storage_type,
      bool has_storage_type,
      VideoEncodeAcceleratorConfig::ContentType content_type,
      std::vector<::media::VideoEncodeAccelerator::Config::SpatialLayer> spatial_layers,
      VideoEncodeAcceleratorConfig::InterLayerPredMode inter_layer_pred,
      bool require_low_delay);


  ~VideoEncodeAcceleratorConfig();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = VideoEncodeAcceleratorConfigPtr>
  VideoEncodeAcceleratorConfigPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, VideoEncodeAcceleratorConfig::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, VideoEncodeAcceleratorConfig::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        VideoEncodeAcceleratorConfig::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        VideoEncodeAcceleratorConfig::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::VideoEncodeAcceleratorConfig_UnserializedMessageContext<
            UserType, VideoEncodeAcceleratorConfig::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<VideoEncodeAcceleratorConfig::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return VideoEncodeAcceleratorConfig::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::VideoEncodeAcceleratorConfig_UnserializedMessageContext<
            UserType, VideoEncodeAcceleratorConfig::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<VideoEncodeAcceleratorConfig::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::media::VideoPixelFormat input_format;
  
  ::gfx::Size input_visible_size;
  
  ::media::VideoCodecProfile output_profile;
  
  ::media::Bitrate bitrate;
  
  uint32_t initial_framerate;
  
  bool has_initial_framerate;
  
  uint32_t gop_length;
  
  bool has_gop_length;
  
  uint8_t h264_output_level;
  
  bool has_h264_output_level;
  
  bool is_constrained_h264;
  
  VideoEncodeAcceleratorConfig::StorageType storage_type;
  
  bool has_storage_type;
  
  VideoEncodeAcceleratorConfig::ContentType content_type;
  
  std::vector<::media::VideoEncodeAccelerator::Config::SpatialLayer> spatial_layers;
  
  VideoEncodeAcceleratorConfig::InterLayerPredMode inter_layer_pred;
  
  bool require_low_delay;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, VideoEncodeAcceleratorConfig::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, VideoEncodeAcceleratorConfig::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, VideoEncodeAcceleratorConfig::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, VideoEncodeAcceleratorConfig::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







class  Vp9Metadata {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Vp9Metadata, T>::value>;
  using DataView = Vp9MetadataDataView;
  using Data_ = internal::Vp9Metadata_Data;

  template <typename... Args>
  static Vp9MetadataPtr New(Args&&... args) {
    return Vp9MetadataPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static Vp9MetadataPtr From(const U& u) {
    return mojo::TypeConverter<Vp9MetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Vp9Metadata>::Convert(*this);
  }


  Vp9Metadata();

  Vp9Metadata(
      bool inter_pic_predicted,
      bool temporal_up_switch,
      bool referenced_by_upper_spatial_layers,
      bool reference_lower_spatial_layers,
      bool end_of_picture,
      uint8_t temporal_idx,
      uint8_t spatial_idx,
      std::vector<::gfx::Size> spatial_layer_resolutions,
      std::vector<uint8_t> p_diffs);


  ~Vp9Metadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = Vp9MetadataPtr>
  Vp9MetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Vp9Metadata::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Vp9Metadata::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Vp9Metadata::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Vp9Metadata::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Vp9Metadata_UnserializedMessageContext<
            UserType, Vp9Metadata::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Vp9Metadata::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Vp9Metadata::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Vp9Metadata_UnserializedMessageContext<
            UserType, Vp9Metadata::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Vp9Metadata::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  bool inter_pic_predicted;
  
  bool temporal_up_switch;
  
  bool referenced_by_upper_spatial_layers;
  
  bool reference_lower_spatial_layers;
  
  bool end_of_picture;
  
  uint8_t temporal_idx;
  
  uint8_t spatial_idx;
  
  std::vector<::gfx::Size> spatial_layer_resolutions;
  
  std::vector<uint8_t> p_diffs;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Vp9Metadata::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Vp9Metadata::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Vp9Metadata::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Vp9Metadata::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  Av1Metadata {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Av1Metadata, T>::value>;
  using DataView = Av1MetadataDataView;
  using Data_ = internal::Av1Metadata_Data;

  template <typename... Args>
  static Av1MetadataPtr New(Args&&... args) {
    return Av1MetadataPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static Av1MetadataPtr From(const U& u) {
    return mojo::TypeConverter<Av1MetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Av1Metadata>::Convert(*this);
  }


  Av1Metadata();

  Av1Metadata(
      bool inter_pic_predicted,
      bool switch_frame,
      bool end_of_picture,
      uint8_t temporal_idx,
      uint8_t spatial_idx,
      std::vector<::gfx::Size> spatial_layer_resolutions,
      std::vector<uint8_t> f_diffs);


  ~Av1Metadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = Av1MetadataPtr>
  Av1MetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Av1Metadata::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Av1Metadata::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Av1Metadata::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Av1Metadata::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Av1Metadata_UnserializedMessageContext<
            UserType, Av1Metadata::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Av1Metadata::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Av1Metadata::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Av1Metadata_UnserializedMessageContext<
            UserType, Av1Metadata::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Av1Metadata::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  bool inter_pic_predicted;
  
  bool switch_frame;
  
  bool end_of_picture;
  
  uint8_t temporal_idx;
  
  uint8_t spatial_idx;
  
  std::vector<::gfx::Size> spatial_layer_resolutions;
  
  std::vector<uint8_t> f_diffs;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Av1Metadata::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Av1Metadata::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Av1Metadata::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Av1Metadata::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  BitstreamBufferMetadata {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<BitstreamBufferMetadata, T>::value>;
  using DataView = BitstreamBufferMetadataDataView;
  using Data_ = internal::BitstreamBufferMetadata_Data;

  template <typename... Args>
  static BitstreamBufferMetadataPtr New(Args&&... args) {
    return BitstreamBufferMetadataPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static BitstreamBufferMetadataPtr From(const U& u) {
    return mojo::TypeConverter<BitstreamBufferMetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, BitstreamBufferMetadata>::Convert(*this);
  }


  BitstreamBufferMetadata();

  BitstreamBufferMetadata(
      uint32_t payload_size_bytes,
      bool key_frame,
      ::base::TimeDelta timestamp,
      int32_t qp,
      CodecMetadataPtr codec_metadata);

BitstreamBufferMetadata(const BitstreamBufferMetadata&) = delete;
BitstreamBufferMetadata& operator=(const BitstreamBufferMetadata&) = delete;

  ~BitstreamBufferMetadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = BitstreamBufferMetadataPtr>
  BitstreamBufferMetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, BitstreamBufferMetadata::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, BitstreamBufferMetadata::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        BitstreamBufferMetadata::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        BitstreamBufferMetadata::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::BitstreamBufferMetadata_UnserializedMessageContext<
            UserType, BitstreamBufferMetadata::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<BitstreamBufferMetadata::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return BitstreamBufferMetadata::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::BitstreamBufferMetadata_UnserializedMessageContext<
            UserType, BitstreamBufferMetadata::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<BitstreamBufferMetadata::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint32_t payload_size_bytes;
  
  bool key_frame;
  
  ::base::TimeDelta timestamp;
  
  int32_t qp;
  
  CodecMetadataPtr codec_metadata;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, BitstreamBufferMetadata::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, BitstreamBufferMetadata::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, BitstreamBufferMetadata::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, BitstreamBufferMetadata::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename UnionPtrType>
BitratePtr Bitrate::Clone() const {
  switch (tag_) {
    case Tag::kConstant:
      return NewConstant(
          mojo::Clone(*data_.constant));
    case Tag::kVariable:
      return NewVariable(
          mojo::Clone(*data_.variable));
  }
  return nullptr;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, Bitrate>::value>::type*>
bool Bitrate::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::kConstant:
      return mojo::Equals(*(data_.constant), *(other.data_.constant));
    case Tag::kVariable:
      return mojo::Equals(*(data_.variable), *(other.data_.variable));
  }

  return false;
}
template <typename UnionPtrType>
CodecMetadataPtr CodecMetadata::Clone() const {
  switch (tag_) {
    case Tag::kH264:
      return NewH264(
          mojo::Clone(*data_.h264));
    case Tag::kVp8:
      return NewVp8(
          mojo::Clone(*data_.vp8));
    case Tag::kVp9:
      return NewVp9(
          mojo::Clone(*data_.vp9));
    case Tag::kAv1:
      return NewAv1(
          mojo::Clone(*data_.av1));
  }
  return nullptr;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, CodecMetadata>::value>::type*>
bool CodecMetadata::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::kH264:
      return mojo::Equals(*(data_.h264), *(other.data_.h264));
    case Tag::kVp8:
      return mojo::Equals(*(data_.vp8), *(other.data_.vp8));
    case Tag::kVp9:
      return mojo::Equals(*(data_.vp9), *(other.data_.vp9));
    case Tag::kAv1:
      return mojo::Equals(*(data_.av1), *(other.data_.av1));
  }

  return false;
}
template <typename StructPtrType>
VideoEncodeAcceleratorSupportedProfilePtr VideoEncodeAcceleratorSupportedProfile::Clone() const {
  return New(
      mojo::Clone(profile),
      mojo::Clone(min_resolution),
      mojo::Clone(max_resolution),
      mojo::Clone(max_framerate_numerator),
      mojo::Clone(max_framerate_denominator),
      mojo::Clone(rate_control_modes),
      mojo::Clone(scalability_modes)
  );
}

template <typename T, VideoEncodeAcceleratorSupportedProfile::EnableIfSame<T>*>
bool VideoEncodeAcceleratorSupportedProfile::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->profile, other_struct.profile))
    return false;
  if (!mojo::Equals(this->min_resolution, other_struct.min_resolution))
    return false;
  if (!mojo::Equals(this->max_resolution, other_struct.max_resolution))
    return false;
  if (!mojo::Equals(this->max_framerate_numerator, other_struct.max_framerate_numerator))
    return false;
  if (!mojo::Equals(this->max_framerate_denominator, other_struct.max_framerate_denominator))
    return false;
  if (!mojo::Equals(this->rate_control_modes, other_struct.rate_control_modes))
    return false;
  if (!mojo::Equals(this->scalability_modes, other_struct.scalability_modes))
    return false;
  return true;
}

template <typename T, VideoEncodeAcceleratorSupportedProfile::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.profile < rhs.profile)
    return true;
  if (rhs.profile < lhs.profile)
    return false;
  if (lhs.min_resolution < rhs.min_resolution)
    return true;
  if (rhs.min_resolution < lhs.min_resolution)
    return false;
  if (lhs.max_resolution < rhs.max_resolution)
    return true;
  if (rhs.max_resolution < lhs.max_resolution)
    return false;
  if (lhs.max_framerate_numerator < rhs.max_framerate_numerator)
    return true;
  if (rhs.max_framerate_numerator < lhs.max_framerate_numerator)
    return false;
  if (lhs.max_framerate_denominator < rhs.max_framerate_denominator)
    return true;
  if (rhs.max_framerate_denominator < lhs.max_framerate_denominator)
    return false;
  if (lhs.rate_control_modes < rhs.rate_control_modes)
    return true;
  if (rhs.rate_control_modes < lhs.rate_control_modes)
    return false;
  if (lhs.scalability_modes < rhs.scalability_modes)
    return true;
  if (rhs.scalability_modes < lhs.scalability_modes)
    return false;
  return false;
}
template <typename StructPtrType>
VariableBitratePeakPtr VariableBitratePeak::Clone() const {
  return New(
      mojo::Clone(bps)
  );
}

template <typename T, VariableBitratePeak::EnableIfSame<T>*>
bool VariableBitratePeak::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->bps, other_struct.bps))
    return false;
  return true;
}

template <typename T, VariableBitratePeak::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.bps < rhs.bps)
    return true;
  if (rhs.bps < lhs.bps)
    return false;
  return false;
}
template <typename StructPtrType>
VideoBitrateAllocationPtr VideoBitrateAllocation::Clone() const {
  return New(
      mojo::Clone(bitrates),
      mojo::Clone(variable_bitrate_peak)
  );
}

template <typename T, VideoBitrateAllocation::EnableIfSame<T>*>
bool VideoBitrateAllocation::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->bitrates, other_struct.bitrates))
    return false;
  if (!mojo::Equals(this->variable_bitrate_peak, other_struct.variable_bitrate_peak))
    return false;
  return true;
}

template <typename T, VideoBitrateAllocation::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.bitrates < rhs.bitrates)
    return true;
  if (rhs.bitrates < lhs.bitrates)
    return false;
  if (lhs.variable_bitrate_peak < rhs.variable_bitrate_peak)
    return true;
  if (rhs.variable_bitrate_peak < lhs.variable_bitrate_peak)
    return false;
  return false;
}
template <typename StructPtrType>
SpatialLayerPtr SpatialLayer::Clone() const {
  return New(
      mojo::Clone(width),
      mojo::Clone(height),
      mojo::Clone(bitrate_bps),
      mojo::Clone(framerate),
      mojo::Clone(max_qp),
      mojo::Clone(num_of_temporal_layers)
  );
}

template <typename T, SpatialLayer::EnableIfSame<T>*>
bool SpatialLayer::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->width, other_struct.width))
    return false;
  if (!mojo::Equals(this->height, other_struct.height))
    return false;
  if (!mojo::Equals(this->bitrate_bps, other_struct.bitrate_bps))
    return false;
  if (!mojo::Equals(this->framerate, other_struct.framerate))
    return false;
  if (!mojo::Equals(this->max_qp, other_struct.max_qp))
    return false;
  if (!mojo::Equals(this->num_of_temporal_layers, other_struct.num_of_temporal_layers))
    return false;
  return true;
}

template <typename T, SpatialLayer::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.width < rhs.width)
    return true;
  if (rhs.width < lhs.width)
    return false;
  if (lhs.height < rhs.height)
    return true;
  if (rhs.height < lhs.height)
    return false;
  if (lhs.bitrate_bps < rhs.bitrate_bps)
    return true;
  if (rhs.bitrate_bps < lhs.bitrate_bps)
    return false;
  if (lhs.framerate < rhs.framerate)
    return true;
  if (rhs.framerate < lhs.framerate)
    return false;
  if (lhs.max_qp < rhs.max_qp)
    return true;
  if (rhs.max_qp < lhs.max_qp)
    return false;
  if (lhs.num_of_temporal_layers < rhs.num_of_temporal_layers)
    return true;
  if (rhs.num_of_temporal_layers < lhs.num_of_temporal_layers)
    return false;
  return false;
}
template <typename StructPtrType>
ConstantBitratePtr ConstantBitrate::Clone() const {
  return New(
      mojo::Clone(target_bps)
  );
}

template <typename T, ConstantBitrate::EnableIfSame<T>*>
bool ConstantBitrate::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->target_bps, other_struct.target_bps))
    return false;
  return true;
}

template <typename T, ConstantBitrate::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.target_bps < rhs.target_bps)
    return true;
  if (rhs.target_bps < lhs.target_bps)
    return false;
  return false;
}
template <typename StructPtrType>
VariableBitratePtr VariableBitrate::Clone() const {
  return New(
      mojo::Clone(target_bps),
      mojo::Clone(peak_bps)
  );
}

template <typename T, VariableBitrate::EnableIfSame<T>*>
bool VariableBitrate::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->target_bps, other_struct.target_bps))
    return false;
  if (!mojo::Equals(this->peak_bps, other_struct.peak_bps))
    return false;
  return true;
}

template <typename T, VariableBitrate::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.target_bps < rhs.target_bps)
    return true;
  if (rhs.target_bps < lhs.target_bps)
    return false;
  if (lhs.peak_bps < rhs.peak_bps)
    return true;
  if (rhs.peak_bps < lhs.peak_bps)
    return false;
  return false;
}
template <typename StructPtrType>
VideoEncodeAcceleratorConfigPtr VideoEncodeAcceleratorConfig::Clone() const {
  return New(
      mojo::Clone(input_format),
      mojo::Clone(input_visible_size),
      mojo::Clone(output_profile),
      mojo::Clone(bitrate),
      mojo::Clone(initial_framerate),
      mojo::Clone(has_initial_framerate),
      mojo::Clone(gop_length),
      mojo::Clone(has_gop_length),
      mojo::Clone(h264_output_level),
      mojo::Clone(has_h264_output_level),
      mojo::Clone(is_constrained_h264),
      mojo::Clone(storage_type),
      mojo::Clone(has_storage_type),
      mojo::Clone(content_type),
      mojo::Clone(spatial_layers),
      mojo::Clone(inter_layer_pred),
      mojo::Clone(require_low_delay)
  );
}

template <typename T, VideoEncodeAcceleratorConfig::EnableIfSame<T>*>
bool VideoEncodeAcceleratorConfig::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->input_format, other_struct.input_format))
    return false;
  if (!mojo::Equals(this->input_visible_size, other_struct.input_visible_size))
    return false;
  if (!mojo::Equals(this->output_profile, other_struct.output_profile))
    return false;
  if (!mojo::Equals(this->bitrate, other_struct.bitrate))
    return false;
  if (!mojo::Equals(this->initial_framerate, other_struct.initial_framerate))
    return false;
  if (!mojo::Equals(this->has_initial_framerate, other_struct.has_initial_framerate))
    return false;
  if (!mojo::Equals(this->gop_length, other_struct.gop_length))
    return false;
  if (!mojo::Equals(this->has_gop_length, other_struct.has_gop_length))
    return false;
  if (!mojo::Equals(this->h264_output_level, other_struct.h264_output_level))
    return false;
  if (!mojo::Equals(this->has_h264_output_level, other_struct.has_h264_output_level))
    return false;
  if (!mojo::Equals(this->is_constrained_h264, other_struct.is_constrained_h264))
    return false;
  if (!mojo::Equals(this->storage_type, other_struct.storage_type))
    return false;
  if (!mojo::Equals(this->has_storage_type, other_struct.has_storage_type))
    return false;
  if (!mojo::Equals(this->content_type, other_struct.content_type))
    return false;
  if (!mojo::Equals(this->spatial_layers, other_struct.spatial_layers))
    return false;
  if (!mojo::Equals(this->inter_layer_pred, other_struct.inter_layer_pred))
    return false;
  if (!mojo::Equals(this->require_low_delay, other_struct.require_low_delay))
    return false;
  return true;
}

template <typename T, VideoEncodeAcceleratorConfig::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.input_format < rhs.input_format)
    return true;
  if (rhs.input_format < lhs.input_format)
    return false;
  if (lhs.input_visible_size < rhs.input_visible_size)
    return true;
  if (rhs.input_visible_size < lhs.input_visible_size)
    return false;
  if (lhs.output_profile < rhs.output_profile)
    return true;
  if (rhs.output_profile < lhs.output_profile)
    return false;
  if (lhs.bitrate < rhs.bitrate)
    return true;
  if (rhs.bitrate < lhs.bitrate)
    return false;
  if (lhs.initial_framerate < rhs.initial_framerate)
    return true;
  if (rhs.initial_framerate < lhs.initial_framerate)
    return false;
  if (lhs.has_initial_framerate < rhs.has_initial_framerate)
    return true;
  if (rhs.has_initial_framerate < lhs.has_initial_framerate)
    return false;
  if (lhs.gop_length < rhs.gop_length)
    return true;
  if (rhs.gop_length < lhs.gop_length)
    return false;
  if (lhs.has_gop_length < rhs.has_gop_length)
    return true;
  if (rhs.has_gop_length < lhs.has_gop_length)
    return false;
  if (lhs.h264_output_level < rhs.h264_output_level)
    return true;
  if (rhs.h264_output_level < lhs.h264_output_level)
    return false;
  if (lhs.has_h264_output_level < rhs.has_h264_output_level)
    return true;
  if (rhs.has_h264_output_level < lhs.has_h264_output_level)
    return false;
  if (lhs.is_constrained_h264 < rhs.is_constrained_h264)
    return true;
  if (rhs.is_constrained_h264 < lhs.is_constrained_h264)
    return false;
  if (lhs.storage_type < rhs.storage_type)
    return true;
  if (rhs.storage_type < lhs.storage_type)
    return false;
  if (lhs.has_storage_type < rhs.has_storage_type)
    return true;
  if (rhs.has_storage_type < lhs.has_storage_type)
    return false;
  if (lhs.content_type < rhs.content_type)
    return true;
  if (rhs.content_type < lhs.content_type)
    return false;
  if (lhs.spatial_layers < rhs.spatial_layers)
    return true;
  if (rhs.spatial_layers < lhs.spatial_layers)
    return false;
  if (lhs.inter_layer_pred < rhs.inter_layer_pred)
    return true;
  if (rhs.inter_layer_pred < lhs.inter_layer_pred)
    return false;
  if (lhs.require_low_delay < rhs.require_low_delay)
    return true;
  if (rhs.require_low_delay < lhs.require_low_delay)
    return false;
  return false;
}
template <typename StructPtrType>
H264MetadataPtr H264Metadata::Clone() const {
  return New(
      mojo::Clone(temporal_idx),
      mojo::Clone(layer_sync)
  );
}

template <typename T, H264Metadata::EnableIfSame<T>*>
bool H264Metadata::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->temporal_idx, other_struct.temporal_idx))
    return false;
  if (!mojo::Equals(this->layer_sync, other_struct.layer_sync))
    return false;
  return true;
}

template <typename T, H264Metadata::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.temporal_idx < rhs.temporal_idx)
    return true;
  if (rhs.temporal_idx < lhs.temporal_idx)
    return false;
  if (lhs.layer_sync < rhs.layer_sync)
    return true;
  if (rhs.layer_sync < lhs.layer_sync)
    return false;
  return false;
}
template <typename StructPtrType>
Vp8MetadataPtr Vp8Metadata::Clone() const {
  return New(
      mojo::Clone(non_reference),
      mojo::Clone(temporal_idx),
      mojo::Clone(layer_sync)
  );
}

template <typename T, Vp8Metadata::EnableIfSame<T>*>
bool Vp8Metadata::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->non_reference, other_struct.non_reference))
    return false;
  if (!mojo::Equals(this->temporal_idx, other_struct.temporal_idx))
    return false;
  if (!mojo::Equals(this->layer_sync, other_struct.layer_sync))
    return false;
  return true;
}

template <typename T, Vp8Metadata::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.non_reference < rhs.non_reference)
    return true;
  if (rhs.non_reference < lhs.non_reference)
    return false;
  if (lhs.temporal_idx < rhs.temporal_idx)
    return true;
  if (rhs.temporal_idx < lhs.temporal_idx)
    return false;
  if (lhs.layer_sync < rhs.layer_sync)
    return true;
  if (rhs.layer_sync < lhs.layer_sync)
    return false;
  return false;
}
template <typename StructPtrType>
Vp9MetadataPtr Vp9Metadata::Clone() const {
  return New(
      mojo::Clone(inter_pic_predicted),
      mojo::Clone(temporal_up_switch),
      mojo::Clone(referenced_by_upper_spatial_layers),
      mojo::Clone(reference_lower_spatial_layers),
      mojo::Clone(end_of_picture),
      mojo::Clone(temporal_idx),
      mojo::Clone(spatial_idx),
      mojo::Clone(spatial_layer_resolutions),
      mojo::Clone(p_diffs)
  );
}

template <typename T, Vp9Metadata::EnableIfSame<T>*>
bool Vp9Metadata::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->inter_pic_predicted, other_struct.inter_pic_predicted))
    return false;
  if (!mojo::Equals(this->temporal_up_switch, other_struct.temporal_up_switch))
    return false;
  if (!mojo::Equals(this->referenced_by_upper_spatial_layers, other_struct.referenced_by_upper_spatial_layers))
    return false;
  if (!mojo::Equals(this->reference_lower_spatial_layers, other_struct.reference_lower_spatial_layers))
    return false;
  if (!mojo::Equals(this->end_of_picture, other_struct.end_of_picture))
    return false;
  if (!mojo::Equals(this->temporal_idx, other_struct.temporal_idx))
    return false;
  if (!mojo::Equals(this->spatial_idx, other_struct.spatial_idx))
    return false;
  if (!mojo::Equals(this->spatial_layer_resolutions, other_struct.spatial_layer_resolutions))
    return false;
  if (!mojo::Equals(this->p_diffs, other_struct.p_diffs))
    return false;
  return true;
}

template <typename T, Vp9Metadata::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.inter_pic_predicted < rhs.inter_pic_predicted)
    return true;
  if (rhs.inter_pic_predicted < lhs.inter_pic_predicted)
    return false;
  if (lhs.temporal_up_switch < rhs.temporal_up_switch)
    return true;
  if (rhs.temporal_up_switch < lhs.temporal_up_switch)
    return false;
  if (lhs.referenced_by_upper_spatial_layers < rhs.referenced_by_upper_spatial_layers)
    return true;
  if (rhs.referenced_by_upper_spatial_layers < lhs.referenced_by_upper_spatial_layers)
    return false;
  if (lhs.reference_lower_spatial_layers < rhs.reference_lower_spatial_layers)
    return true;
  if (rhs.reference_lower_spatial_layers < lhs.reference_lower_spatial_layers)
    return false;
  if (lhs.end_of_picture < rhs.end_of_picture)
    return true;
  if (rhs.end_of_picture < lhs.end_of_picture)
    return false;
  if (lhs.temporal_idx < rhs.temporal_idx)
    return true;
  if (rhs.temporal_idx < lhs.temporal_idx)
    return false;
  if (lhs.spatial_idx < rhs.spatial_idx)
    return true;
  if (rhs.spatial_idx < lhs.spatial_idx)
    return false;
  if (lhs.spatial_layer_resolutions < rhs.spatial_layer_resolutions)
    return true;
  if (rhs.spatial_layer_resolutions < lhs.spatial_layer_resolutions)
    return false;
  if (lhs.p_diffs < rhs.p_diffs)
    return true;
  if (rhs.p_diffs < lhs.p_diffs)
    return false;
  return false;
}
template <typename StructPtrType>
Av1MetadataPtr Av1Metadata::Clone() const {
  return New(
      mojo::Clone(inter_pic_predicted),
      mojo::Clone(switch_frame),
      mojo::Clone(end_of_picture),
      mojo::Clone(temporal_idx),
      mojo::Clone(spatial_idx),
      mojo::Clone(spatial_layer_resolutions),
      mojo::Clone(f_diffs)
  );
}

template <typename T, Av1Metadata::EnableIfSame<T>*>
bool Av1Metadata::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->inter_pic_predicted, other_struct.inter_pic_predicted))
    return false;
  if (!mojo::Equals(this->switch_frame, other_struct.switch_frame))
    return false;
  if (!mojo::Equals(this->end_of_picture, other_struct.end_of_picture))
    return false;
  if (!mojo::Equals(this->temporal_idx, other_struct.temporal_idx))
    return false;
  if (!mojo::Equals(this->spatial_idx, other_struct.spatial_idx))
    return false;
  if (!mojo::Equals(this->spatial_layer_resolutions, other_struct.spatial_layer_resolutions))
    return false;
  if (!mojo::Equals(this->f_diffs, other_struct.f_diffs))
    return false;
  return true;
}

template <typename T, Av1Metadata::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.inter_pic_predicted < rhs.inter_pic_predicted)
    return true;
  if (rhs.inter_pic_predicted < lhs.inter_pic_predicted)
    return false;
  if (lhs.switch_frame < rhs.switch_frame)
    return true;
  if (rhs.switch_frame < lhs.switch_frame)
    return false;
  if (lhs.end_of_picture < rhs.end_of_picture)
    return true;
  if (rhs.end_of_picture < lhs.end_of_picture)
    return false;
  if (lhs.temporal_idx < rhs.temporal_idx)
    return true;
  if (rhs.temporal_idx < lhs.temporal_idx)
    return false;
  if (lhs.spatial_idx < rhs.spatial_idx)
    return true;
  if (rhs.spatial_idx < lhs.spatial_idx)
    return false;
  if (lhs.spatial_layer_resolutions < rhs.spatial_layer_resolutions)
    return true;
  if (rhs.spatial_layer_resolutions < lhs.spatial_layer_resolutions)
    return false;
  if (lhs.f_diffs < rhs.f_diffs)
    return true;
  if (rhs.f_diffs < lhs.f_diffs)
    return false;
  return false;
}
template <typename StructPtrType>
BitstreamBufferMetadataPtr BitstreamBufferMetadata::Clone() const {
  return New(
      mojo::Clone(payload_size_bytes),
      mojo::Clone(key_frame),
      mojo::Clone(timestamp),
      mojo::Clone(qp),
      mojo::Clone(codec_metadata)
  );
}

template <typename T, BitstreamBufferMetadata::EnableIfSame<T>*>
bool BitstreamBufferMetadata::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->payload_size_bytes, other_struct.payload_size_bytes))
    return false;
  if (!mojo::Equals(this->key_frame, other_struct.key_frame))
    return false;
  if (!mojo::Equals(this->timestamp, other_struct.timestamp))
    return false;
  if (!mojo::Equals(this->qp, other_struct.qp))
    return false;
  if (!mojo::Equals(this->codec_metadata, other_struct.codec_metadata))
    return false;
  return true;
}

template <typename T, BitstreamBufferMetadata::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.payload_size_bytes < rhs.payload_size_bytes)
    return true;
  if (rhs.payload_size_bytes < lhs.payload_size_bytes)
    return false;
  if (lhs.key_frame < rhs.key_frame)
    return true;
  if (rhs.key_frame < lhs.key_frame)
    return false;
  if (lhs.timestamp < rhs.timestamp)
    return true;
  if (rhs.timestamp < lhs.timestamp)
    return false;
  if (lhs.qp < rhs.qp)
    return true;
  if (rhs.qp < lhs.qp)
    return false;
  if (lhs.codec_metadata < rhs.codec_metadata)
    return true;
  if (rhs.codec_metadata < lhs.codec_metadata)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace media

namespace mojo {


template <>
struct  StructTraits<::media::mojom::VideoEncodeAcceleratorSupportedProfile::DataView,
                                         ::media::mojom::VideoEncodeAcceleratorSupportedProfilePtr> {
  static bool IsNull(const ::media::mojom::VideoEncodeAcceleratorSupportedProfilePtr& input) { return !input; }
  static void SetToNull(::media::mojom::VideoEncodeAcceleratorSupportedProfilePtr* output) { output->reset(); }

  static decltype(::media::mojom::VideoEncodeAcceleratorSupportedProfile::profile) profile(
      const ::media::mojom::VideoEncodeAcceleratorSupportedProfilePtr& input) {
    return input->profile;
  }

  static const decltype(::media::mojom::VideoEncodeAcceleratorSupportedProfile::min_resolution)& min_resolution(
      const ::media::mojom::VideoEncodeAcceleratorSupportedProfilePtr& input) {
    return input->min_resolution;
  }

  static const decltype(::media::mojom::VideoEncodeAcceleratorSupportedProfile::max_resolution)& max_resolution(
      const ::media::mojom::VideoEncodeAcceleratorSupportedProfilePtr& input) {
    return input->max_resolution;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorSupportedProfile::max_framerate_numerator) max_framerate_numerator(
      const ::media::mojom::VideoEncodeAcceleratorSupportedProfilePtr& input) {
    return input->max_framerate_numerator;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorSupportedProfile::max_framerate_denominator) max_framerate_denominator(
      const ::media::mojom::VideoEncodeAcceleratorSupportedProfilePtr& input) {
    return input->max_framerate_denominator;
  }

  static const decltype(::media::mojom::VideoEncodeAcceleratorSupportedProfile::rate_control_modes)& rate_control_modes(
      const ::media::mojom::VideoEncodeAcceleratorSupportedProfilePtr& input) {
    return input->rate_control_modes;
  }

  static const decltype(::media::mojom::VideoEncodeAcceleratorSupportedProfile::scalability_modes)& scalability_modes(
      const ::media::mojom::VideoEncodeAcceleratorSupportedProfilePtr& input) {
    return input->scalability_modes;
  }

  static bool Read(::media::mojom::VideoEncodeAcceleratorSupportedProfile::DataView input, ::media::mojom::VideoEncodeAcceleratorSupportedProfilePtr* output);
};


template <>
struct  StructTraits<::media::mojom::VariableBitratePeak::DataView,
                                         ::media::mojom::VariableBitratePeakPtr> {
  static bool IsNull(const ::media::mojom::VariableBitratePeakPtr& input) { return !input; }
  static void SetToNull(::media::mojom::VariableBitratePeakPtr* output) { output->reset(); }

  static decltype(::media::mojom::VariableBitratePeak::bps) bps(
      const ::media::mojom::VariableBitratePeakPtr& input) {
    return input->bps;
  }

  static bool Read(::media::mojom::VariableBitratePeak::DataView input, ::media::mojom::VariableBitratePeakPtr* output);
};


template <>
struct  StructTraits<::media::mojom::VideoBitrateAllocation::DataView,
                                         ::media::mojom::VideoBitrateAllocationPtr> {
  static bool IsNull(const ::media::mojom::VideoBitrateAllocationPtr& input) { return !input; }
  static void SetToNull(::media::mojom::VideoBitrateAllocationPtr* output) { output->reset(); }

  static const decltype(::media::mojom::VideoBitrateAllocation::bitrates)& bitrates(
      const ::media::mojom::VideoBitrateAllocationPtr& input) {
    return input->bitrates;
  }

  static const decltype(::media::mojom::VideoBitrateAllocation::variable_bitrate_peak)& variable_bitrate_peak(
      const ::media::mojom::VideoBitrateAllocationPtr& input) {
    return input->variable_bitrate_peak;
  }

  static bool Read(::media::mojom::VideoBitrateAllocation::DataView input, ::media::mojom::VideoBitrateAllocationPtr* output);
};


template <>
struct  StructTraits<::media::mojom::SpatialLayer::DataView,
                                         ::media::mojom::SpatialLayerPtr> {
  static bool IsNull(const ::media::mojom::SpatialLayerPtr& input) { return !input; }
  static void SetToNull(::media::mojom::SpatialLayerPtr* output) { output->reset(); }

  static decltype(::media::mojom::SpatialLayer::width) width(
      const ::media::mojom::SpatialLayerPtr& input) {
    return input->width;
  }

  static decltype(::media::mojom::SpatialLayer::height) height(
      const ::media::mojom::SpatialLayerPtr& input) {
    return input->height;
  }

  static decltype(::media::mojom::SpatialLayer::bitrate_bps) bitrate_bps(
      const ::media::mojom::SpatialLayerPtr& input) {
    return input->bitrate_bps;
  }

  static decltype(::media::mojom::SpatialLayer::framerate) framerate(
      const ::media::mojom::SpatialLayerPtr& input) {
    return input->framerate;
  }

  static decltype(::media::mojom::SpatialLayer::max_qp) max_qp(
      const ::media::mojom::SpatialLayerPtr& input) {
    return input->max_qp;
  }

  static decltype(::media::mojom::SpatialLayer::num_of_temporal_layers) num_of_temporal_layers(
      const ::media::mojom::SpatialLayerPtr& input) {
    return input->num_of_temporal_layers;
  }

  static bool Read(::media::mojom::SpatialLayer::DataView input, ::media::mojom::SpatialLayerPtr* output);
};


template <>
struct  StructTraits<::media::mojom::ConstantBitrate::DataView,
                                         ::media::mojom::ConstantBitratePtr> {
  static bool IsNull(const ::media::mojom::ConstantBitratePtr& input) { return !input; }
  static void SetToNull(::media::mojom::ConstantBitratePtr* output) { output->reset(); }

  static decltype(::media::mojom::ConstantBitrate::target_bps) target_bps(
      const ::media::mojom::ConstantBitratePtr& input) {
    return input->target_bps;
  }

  static bool Read(::media::mojom::ConstantBitrate::DataView input, ::media::mojom::ConstantBitratePtr* output);
};


template <>
struct  StructTraits<::media::mojom::VariableBitrate::DataView,
                                         ::media::mojom::VariableBitratePtr> {
  static bool IsNull(const ::media::mojom::VariableBitratePtr& input) { return !input; }
  static void SetToNull(::media::mojom::VariableBitratePtr* output) { output->reset(); }

  static decltype(::media::mojom::VariableBitrate::target_bps) target_bps(
      const ::media::mojom::VariableBitratePtr& input) {
    return input->target_bps;
  }

  static decltype(::media::mojom::VariableBitrate::peak_bps) peak_bps(
      const ::media::mojom::VariableBitratePtr& input) {
    return input->peak_bps;
  }

  static bool Read(::media::mojom::VariableBitrate::DataView input, ::media::mojom::VariableBitratePtr* output);
};


template <>
struct  StructTraits<::media::mojom::VideoEncodeAcceleratorConfig::DataView,
                                         ::media::mojom::VideoEncodeAcceleratorConfigPtr> {
  static bool IsNull(const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) { return !input; }
  static void SetToNull(::media::mojom::VideoEncodeAcceleratorConfigPtr* output) { output->reset(); }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::input_format) input_format(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->input_format;
  }

  static const decltype(::media::mojom::VideoEncodeAcceleratorConfig::input_visible_size)& input_visible_size(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->input_visible_size;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::output_profile) output_profile(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->output_profile;
  }

  static const decltype(::media::mojom::VideoEncodeAcceleratorConfig::bitrate)& bitrate(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->bitrate;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::initial_framerate) initial_framerate(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->initial_framerate;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::has_initial_framerate) has_initial_framerate(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->has_initial_framerate;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::gop_length) gop_length(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->gop_length;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::has_gop_length) has_gop_length(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->has_gop_length;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::h264_output_level) h264_output_level(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->h264_output_level;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::has_h264_output_level) has_h264_output_level(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->has_h264_output_level;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::is_constrained_h264) is_constrained_h264(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->is_constrained_h264;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::storage_type) storage_type(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->storage_type;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::has_storage_type) has_storage_type(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->has_storage_type;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::content_type) content_type(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->content_type;
  }

  static const decltype(::media::mojom::VideoEncodeAcceleratorConfig::spatial_layers)& spatial_layers(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->spatial_layers;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::inter_layer_pred) inter_layer_pred(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->inter_layer_pred;
  }

  static decltype(::media::mojom::VideoEncodeAcceleratorConfig::require_low_delay) require_low_delay(
      const ::media::mojom::VideoEncodeAcceleratorConfigPtr& input) {
    return input->require_low_delay;
  }

  static bool Read(::media::mojom::VideoEncodeAcceleratorConfig::DataView input, ::media::mojom::VideoEncodeAcceleratorConfigPtr* output);
};


template <>
struct  StructTraits<::media::mojom::H264Metadata::DataView,
                                         ::media::mojom::H264MetadataPtr> {
  static bool IsNull(const ::media::mojom::H264MetadataPtr& input) { return !input; }
  static void SetToNull(::media::mojom::H264MetadataPtr* output) { output->reset(); }

  static decltype(::media::mojom::H264Metadata::temporal_idx) temporal_idx(
      const ::media::mojom::H264MetadataPtr& input) {
    return input->temporal_idx;
  }

  static decltype(::media::mojom::H264Metadata::layer_sync) layer_sync(
      const ::media::mojom::H264MetadataPtr& input) {
    return input->layer_sync;
  }

  static bool Read(::media::mojom::H264Metadata::DataView input, ::media::mojom::H264MetadataPtr* output);
};


template <>
struct  StructTraits<::media::mojom::Vp8Metadata::DataView,
                                         ::media::mojom::Vp8MetadataPtr> {
  static bool IsNull(const ::media::mojom::Vp8MetadataPtr& input) { return !input; }
  static void SetToNull(::media::mojom::Vp8MetadataPtr* output) { output->reset(); }

  static decltype(::media::mojom::Vp8Metadata::non_reference) non_reference(
      const ::media::mojom::Vp8MetadataPtr& input) {
    return input->non_reference;
  }

  static decltype(::media::mojom::Vp8Metadata::temporal_idx) temporal_idx(
      const ::media::mojom::Vp8MetadataPtr& input) {
    return input->temporal_idx;
  }

  static decltype(::media::mojom::Vp8Metadata::layer_sync) layer_sync(
      const ::media::mojom::Vp8MetadataPtr& input) {
    return input->layer_sync;
  }

  static bool Read(::media::mojom::Vp8Metadata::DataView input, ::media::mojom::Vp8MetadataPtr* output);
};


template <>
struct  StructTraits<::media::mojom::Vp9Metadata::DataView,
                                         ::media::mojom::Vp9MetadataPtr> {
  static bool IsNull(const ::media::mojom::Vp9MetadataPtr& input) { return !input; }
  static void SetToNull(::media::mojom::Vp9MetadataPtr* output) { output->reset(); }

  static decltype(::media::mojom::Vp9Metadata::inter_pic_predicted) inter_pic_predicted(
      const ::media::mojom::Vp9MetadataPtr& input) {
    return input->inter_pic_predicted;
  }

  static decltype(::media::mojom::Vp9Metadata::temporal_up_switch) temporal_up_switch(
      const ::media::mojom::Vp9MetadataPtr& input) {
    return input->temporal_up_switch;
  }

  static decltype(::media::mojom::Vp9Metadata::referenced_by_upper_spatial_layers) referenced_by_upper_spatial_layers(
      const ::media::mojom::Vp9MetadataPtr& input) {
    return input->referenced_by_upper_spatial_layers;
  }

  static decltype(::media::mojom::Vp9Metadata::reference_lower_spatial_layers) reference_lower_spatial_layers(
      const ::media::mojom::Vp9MetadataPtr& input) {
    return input->reference_lower_spatial_layers;
  }

  static decltype(::media::mojom::Vp9Metadata::end_of_picture) end_of_picture(
      const ::media::mojom::Vp9MetadataPtr& input) {
    return input->end_of_picture;
  }

  static decltype(::media::mojom::Vp9Metadata::temporal_idx) temporal_idx(
      const ::media::mojom::Vp9MetadataPtr& input) {
    return input->temporal_idx;
  }

  static decltype(::media::mojom::Vp9Metadata::spatial_idx) spatial_idx(
      const ::media::mojom::Vp9MetadataPtr& input) {
    return input->spatial_idx;
  }

  static const decltype(::media::mojom::Vp9Metadata::spatial_layer_resolutions)& spatial_layer_resolutions(
      const ::media::mojom::Vp9MetadataPtr& input) {
    return input->spatial_layer_resolutions;
  }

  static const decltype(::media::mojom::Vp9Metadata::p_diffs)& p_diffs(
      const ::media::mojom::Vp9MetadataPtr& input) {
    return input->p_diffs;
  }

  static bool Read(::media::mojom::Vp9Metadata::DataView input, ::media::mojom::Vp9MetadataPtr* output);
};


template <>
struct  StructTraits<::media::mojom::Av1Metadata::DataView,
                                         ::media::mojom::Av1MetadataPtr> {
  static bool IsNull(const ::media::mojom::Av1MetadataPtr& input) { return !input; }
  static void SetToNull(::media::mojom::Av1MetadataPtr* output) { output->reset(); }

  static decltype(::media::mojom::Av1Metadata::inter_pic_predicted) inter_pic_predicted(
      const ::media::mojom::Av1MetadataPtr& input) {
    return input->inter_pic_predicted;
  }

  static decltype(::media::mojom::Av1Metadata::switch_frame) switch_frame(
      const ::media::mojom::Av1MetadataPtr& input) {
    return input->switch_frame;
  }

  static decltype(::media::mojom::Av1Metadata::end_of_picture) end_of_picture(
      const ::media::mojom::Av1MetadataPtr& input) {
    return input->end_of_picture;
  }

  static decltype(::media::mojom::Av1Metadata::temporal_idx) temporal_idx(
      const ::media::mojom::Av1MetadataPtr& input) {
    return input->temporal_idx;
  }

  static decltype(::media::mojom::Av1Metadata::spatial_idx) spatial_idx(
      const ::media::mojom::Av1MetadataPtr& input) {
    return input->spatial_idx;
  }

  static const decltype(::media::mojom::Av1Metadata::spatial_layer_resolutions)& spatial_layer_resolutions(
      const ::media::mojom::Av1MetadataPtr& input) {
    return input->spatial_layer_resolutions;
  }

  static const decltype(::media::mojom::Av1Metadata::f_diffs)& f_diffs(
      const ::media::mojom::Av1MetadataPtr& input) {
    return input->f_diffs;
  }

  static bool Read(::media::mojom::Av1Metadata::DataView input, ::media::mojom::Av1MetadataPtr* output);
};


template <>
struct  StructTraits<::media::mojom::BitstreamBufferMetadata::DataView,
                                         ::media::mojom::BitstreamBufferMetadataPtr> {
  static bool IsNull(const ::media::mojom::BitstreamBufferMetadataPtr& input) { return !input; }
  static void SetToNull(::media::mojom::BitstreamBufferMetadataPtr* output) { output->reset(); }

  static decltype(::media::mojom::BitstreamBufferMetadata::payload_size_bytes) payload_size_bytes(
      const ::media::mojom::BitstreamBufferMetadataPtr& input) {
    return input->payload_size_bytes;
  }

  static decltype(::media::mojom::BitstreamBufferMetadata::key_frame) key_frame(
      const ::media::mojom::BitstreamBufferMetadataPtr& input) {
    return input->key_frame;
  }

  static const decltype(::media::mojom::BitstreamBufferMetadata::timestamp)& timestamp(
      const ::media::mojom::BitstreamBufferMetadataPtr& input) {
    return input->timestamp;
  }

  static decltype(::media::mojom::BitstreamBufferMetadata::qp) qp(
      const ::media::mojom::BitstreamBufferMetadataPtr& input) {
    return input->qp;
  }

  static const decltype(::media::mojom::BitstreamBufferMetadata::codec_metadata)& codec_metadata(
      const ::media::mojom::BitstreamBufferMetadataPtr& input) {
    return input->codec_metadata;
  }

  static bool Read(::media::mojom::BitstreamBufferMetadata::DataView input, ::media::mojom::BitstreamBufferMetadataPtr* output);
};


template <>
struct  UnionTraits<::media::mojom::Bitrate::DataView,
                                        ::media::mojom::BitratePtr> {
  static bool IsNull(const ::media::mojom::BitratePtr& input) { return !input; }
  static void SetToNull(::media::mojom::BitratePtr* output) { output->reset(); }

  static ::media::mojom::Bitrate::Tag GetTag(const ::media::mojom::BitratePtr& input) {
    return input->which();
  }

  static const ::media::Bitrate& constant(const ::media::mojom::BitratePtr& input) {
    return input->get_constant();
  }

  static const ::media::Bitrate& variable(const ::media::mojom::BitratePtr& input) {
    return input->get_variable();
  }

  static bool Read(::media::mojom::Bitrate::DataView input, ::media::mojom::BitratePtr* output);
};


template <>
struct  UnionTraits<::media::mojom::CodecMetadata::DataView,
                                        ::media::mojom::CodecMetadataPtr> {
  static bool IsNull(const ::media::mojom::CodecMetadataPtr& input) { return !input; }
  static void SetToNull(::media::mojom::CodecMetadataPtr* output) { output->reset(); }

  static ::media::mojom::CodecMetadata::Tag GetTag(const ::media::mojom::CodecMetadataPtr& input) {
    return input->which();
  }

  static const ::media::mojom::H264MetadataPtr& h264(const ::media::mojom::CodecMetadataPtr& input) {
    return input->get_h264();
  }

  static const ::media::Vp8Metadata& vp8(const ::media::mojom::CodecMetadataPtr& input) {
    return input->get_vp8();
  }

  static const ::media::Vp9Metadata& vp9(const ::media::mojom::CodecMetadataPtr& input) {
    return input->get_vp9();
  }

  static const ::media::mojom::Av1MetadataPtr& av1(const ::media::mojom::CodecMetadataPtr& input) {
    return input->get_av1();
  }

  static bool Read(::media::mojom::CodecMetadata::DataView input, ::media::mojom::CodecMetadataPtr* output);
};

}  // namespace mojo

#endif  // MEDIA_MOJO_MOJOM_VIDEO_ENCODE_ACCELERATOR_MOJOM_H_