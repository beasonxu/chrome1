// media/mojo/mojom/android_overlay.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "media/mojo/mojom/android_overlay.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "media/mojo/mojom/android_overlay.mojom-params-data.h"
#include "media/mojo/mojom/android_overlay.mojom-shared-message-ids.h"

#include "media/mojo/mojom/android_overlay.mojom-import-headers.h"
#include "media/mojo/mojom/android_overlay.mojom-test-utils.h"


#ifndef MEDIA_MOJO_MOJOM_ANDROID_OVERLAY_MOJOM_JUMBO_H_
#define MEDIA_MOJO_MOJOM_ANDROID_OVERLAY_MOJOM_JUMBO_H_
#endif



namespace media {
namespace mojom {
AndroidOverlayConfig::AndroidOverlayConfig()
    : routing_token(),
      rect(),
      secure(),
      power_efficient() {}

AndroidOverlayConfig::AndroidOverlayConfig(
    const ::base::UnguessableToken& routing_token_in,
    const ::gfx::Rect& rect_in,
    bool secure_in,
    bool power_efficient_in)
    : routing_token(std::move(routing_token_in)),
      rect(std::move(rect_in)),
      secure(std::move(secure_in)),
      power_efficient(std::move(power_efficient_in)) {}

AndroidOverlayConfig::~AndroidOverlayConfig() = default;

void AndroidOverlayConfig::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "routing_token"), this->routing_token,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::base::UnguessableToken&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "rect"), this->rect,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Rect&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "secure"), this->secure,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "power_efficient"), this->power_efficient,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AndroidOverlayConfig::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char AndroidOverlayProvider::Name_[] = "media.mojom.AndroidOverlayProvider";

AndroidOverlayProvider::IPCStableHashFunction AndroidOverlayProvider::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAndroidOverlayProvider_CreateOverlay_Name: {
      return &AndroidOverlayProvider::CreateOverlay_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AndroidOverlayProvider::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAndroidOverlayProvider_CreateOverlay_Name:
            return "Receive media::mojom::AndroidOverlayProvider::CreateOverlay";
    }
  } else {
    switch (message.name()) {
      case internal::kAndroidOverlayProvider_CreateOverlay_Name:
            return "Receive reply media::mojom::AndroidOverlayProvider::CreateOverlay";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AndroidOverlayProvider::CreateOverlay_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::AndroidOverlayProvider::CreateOverlay");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

AndroidOverlayProviderProxy::AndroidOverlayProviderProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AndroidOverlayProviderProxy::CreateOverlay(
    ::mojo::PendingReceiver<AndroidOverlay> in_overlay, ::mojo::PendingRemote<AndroidOverlayClient> in_client, AndroidOverlayConfigPtr in_config) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::AndroidOverlayProvider::CreateOverlay", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("overlay"), in_overlay,
                        "<value of type ::mojo::PendingReceiver<AndroidOverlay>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client"), in_client,
                        "<value of type ::mojo::PendingRemote<AndroidOverlayClient>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("config"), in_config,
                        "<value of type AndroidOverlayConfigPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAndroidOverlayProvider_CreateOverlay_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AndroidOverlayProvider_CreateOverlay_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::media::mojom::AndroidOverlayInterfaceBase>>(
      in_overlay, &params->overlay, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->overlay),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid overlay in AndroidOverlayProvider.CreateOverlay request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::media::mojom::AndroidOverlayClientInterfaceBase>>(
      in_client, &params->client, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in AndroidOverlayProvider.CreateOverlay request");
  mojo::internal::MessageFragment<
      typename decltype(params->config)::BaseType> config_fragment(
          params.message());
  mojo::internal::Serialize<::media::mojom::AndroidOverlayConfigDataView>(
      in_config, config_fragment);
  params->config.Set(
      config_fragment.is_null() ? nullptr : config_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->config.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null config in AndroidOverlayProvider.CreateOverlay request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AndroidOverlayProvider::Name_);
  message.set_method_name("CreateOverlay");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool AndroidOverlayProviderStubDispatch::Accept(
    AndroidOverlayProvider* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAndroidOverlayProvider_CreateOverlay_Name: {

      DCHECK(message->is_serialized());
      internal::AndroidOverlayProvider_CreateOverlay_Params_Data* params =
          reinterpret_cast<internal::AndroidOverlayProvider_CreateOverlay_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<AndroidOverlay> p_overlay{};
      ::mojo::PendingRemote<AndroidOverlayClient> p_client{};
      AndroidOverlayConfigPtr p_config{};
      AndroidOverlayProvider_CreateOverlay_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_overlay =
            input_data_view.TakeOverlay<decltype(p_overlay)>();
      }
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (success && !input_data_view.ReadConfig(&p_config))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AndroidOverlayProvider::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateOverlay(
std::move(p_overlay), 
std::move(p_client), 
std::move(p_config));
      return true;
    }
  }
  return false;
}

// static
bool AndroidOverlayProviderStubDispatch::AcceptWithResponder(
    AndroidOverlayProvider* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAndroidOverlayProvider_CreateOverlay_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAndroidOverlayProviderValidationInfo[] = {
    {&internal::AndroidOverlayProvider_CreateOverlay_Params_Data::Validate,
     nullptr /* no response */},
};

bool AndroidOverlayProviderRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::AndroidOverlayProvider::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAndroidOverlayProviderValidationInfo);
}

const char AndroidOverlay::Name_[] = "media.mojom.AndroidOverlay";

AndroidOverlay::IPCStableHashFunction AndroidOverlay::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAndroidOverlay_ScheduleLayout_Name: {
      return &AndroidOverlay::ScheduleLayout_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AndroidOverlay::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAndroidOverlay_ScheduleLayout_Name:
            return "Receive media::mojom::AndroidOverlay::ScheduleLayout";
    }
  } else {
    switch (message.name()) {
      case internal::kAndroidOverlay_ScheduleLayout_Name:
            return "Receive reply media::mojom::AndroidOverlay::ScheduleLayout";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AndroidOverlay::ScheduleLayout_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::AndroidOverlay::ScheduleLayout");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

AndroidOverlayProxy::AndroidOverlayProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AndroidOverlayProxy::ScheduleLayout(
    const ::gfx::Rect& in_rect) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::AndroidOverlay::ScheduleLayout", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("rect"), in_rect,
                        "<value of type const ::gfx::Rect&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAndroidOverlay_ScheduleLayout_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AndroidOverlay_ScheduleLayout_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->rect)::BaseType> rect_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::RectDataView>(
      in_rect, rect_fragment);
  params->rect.Set(
      rect_fragment.is_null() ? nullptr : rect_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->rect.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null rect in AndroidOverlay.ScheduleLayout request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AndroidOverlay::Name_);
  message.set_method_name("ScheduleLayout");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool AndroidOverlayStubDispatch::Accept(
    AndroidOverlay* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAndroidOverlay_ScheduleLayout_Name: {

      DCHECK(message->is_serialized());
      internal::AndroidOverlay_ScheduleLayout_Params_Data* params =
          reinterpret_cast<internal::AndroidOverlay_ScheduleLayout_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::gfx::Rect p_rect{};
      AndroidOverlay_ScheduleLayout_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadRect(&p_rect))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AndroidOverlay::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ScheduleLayout(
std::move(p_rect));
      return true;
    }
  }
  return false;
}

// static
bool AndroidOverlayStubDispatch::AcceptWithResponder(
    AndroidOverlay* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAndroidOverlay_ScheduleLayout_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAndroidOverlayValidationInfo[] = {
    {&internal::AndroidOverlay_ScheduleLayout_Params_Data::Validate,
     nullptr /* no response */},
};

bool AndroidOverlayRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::AndroidOverlay::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAndroidOverlayValidationInfo);
}

const char AndroidOverlayClient::Name_[] = "media.mojom.AndroidOverlayClient";

AndroidOverlayClient::IPCStableHashFunction AndroidOverlayClient::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAndroidOverlayClient_OnSurfaceReady_Name: {
      return &AndroidOverlayClient::OnSurfaceReady_Sym::IPCStableHash;
    }
    case internal::kAndroidOverlayClient_OnDestroyed_Name: {
      return &AndroidOverlayClient::OnDestroyed_Sym::IPCStableHash;
    }
    case internal::kAndroidOverlayClient_OnSynchronouslyDestroyed_Name: {
      return &AndroidOverlayClient::OnSynchronouslyDestroyed_Sym::IPCStableHash;
    }
    case internal::kAndroidOverlayClient_OnPowerEfficientState_Name: {
      return &AndroidOverlayClient::OnPowerEfficientState_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AndroidOverlayClient::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAndroidOverlayClient_OnSurfaceReady_Name:
            return "Receive media::mojom::AndroidOverlayClient::OnSurfaceReady";
      case internal::kAndroidOverlayClient_OnDestroyed_Name:
            return "Receive media::mojom::AndroidOverlayClient::OnDestroyed";
      case internal::kAndroidOverlayClient_OnSynchronouslyDestroyed_Name:
            return "Receive media::mojom::AndroidOverlayClient::OnSynchronouslyDestroyed";
      case internal::kAndroidOverlayClient_OnPowerEfficientState_Name:
            return "Receive media::mojom::AndroidOverlayClient::OnPowerEfficientState";
    }
  } else {
    switch (message.name()) {
      case internal::kAndroidOverlayClient_OnSurfaceReady_Name:
            return "Receive reply media::mojom::AndroidOverlayClient::OnSurfaceReady";
      case internal::kAndroidOverlayClient_OnDestroyed_Name:
            return "Receive reply media::mojom::AndroidOverlayClient::OnDestroyed";
      case internal::kAndroidOverlayClient_OnSynchronouslyDestroyed_Name:
            return "Receive reply media::mojom::AndroidOverlayClient::OnSynchronouslyDestroyed";
      case internal::kAndroidOverlayClient_OnPowerEfficientState_Name:
            return "Receive reply media::mojom::AndroidOverlayClient::OnPowerEfficientState";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AndroidOverlayClient::OnSurfaceReady_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::AndroidOverlayClient::OnSurfaceReady");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AndroidOverlayClient::OnDestroyed_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::AndroidOverlayClient::OnDestroyed");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AndroidOverlayClient::OnSynchronouslyDestroyed_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::AndroidOverlayClient::OnSynchronouslyDestroyed");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AndroidOverlayClient::OnPowerEfficientState_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::AndroidOverlayClient::OnPowerEfficientState");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)
bool AndroidOverlayClient::OnSynchronouslyDestroyed() {
  NOTREACHED();
  return false;
}
class AndroidOverlayClient_OnSynchronouslyDestroyed_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  AndroidOverlayClient_OnSynchronouslyDestroyed_HandleSyncResponse(
      bool* result)
      : result_(result) {
    DCHECK(!*result_);
  }

  AndroidOverlayClient_OnSynchronouslyDestroyed_HandleSyncResponse(const AndroidOverlayClient_OnSynchronouslyDestroyed_HandleSyncResponse&) = delete;
  AndroidOverlayClient_OnSynchronouslyDestroyed_HandleSyncResponse& operator=(const AndroidOverlayClient_OnSynchronouslyDestroyed_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;};

class AndroidOverlayClient_OnSynchronouslyDestroyed_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AndroidOverlayClient_OnSynchronouslyDestroyed_ForwardToCallback(
      AndroidOverlayClient::OnSynchronouslyDestroyedCallback callback
      ) : callback_(std::move(callback)) {
  }

  AndroidOverlayClient_OnSynchronouslyDestroyed_ForwardToCallback(const AndroidOverlayClient_OnSynchronouslyDestroyed_ForwardToCallback&) = delete;
  AndroidOverlayClient_OnSynchronouslyDestroyed_ForwardToCallback& operator=(const AndroidOverlayClient_OnSynchronouslyDestroyed_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AndroidOverlayClient::OnSynchronouslyDestroyedCallback callback_;
};

AndroidOverlayClientProxy::AndroidOverlayClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AndroidOverlayClientProxy::OnSurfaceReady(
    uint64_t in_surface_key) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::AndroidOverlayClient::OnSurfaceReady", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("surface_key"), in_surface_key,
                        "<value of type uint64_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAndroidOverlayClient_OnSurfaceReady_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AndroidOverlayClient_OnSurfaceReady_Params_Data> params(
          message);
  params.Allocate();
  params->surface_key = in_surface_key;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AndroidOverlayClient::Name_);
  message.set_method_name("OnSurfaceReady");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AndroidOverlayClientProxy::OnDestroyed(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send media::mojom::AndroidOverlayClient::OnDestroyed");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAndroidOverlayClient_OnDestroyed_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AndroidOverlayClient_OnDestroyed_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AndroidOverlayClient::Name_);
  message.set_method_name("OnDestroyed");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
bool AndroidOverlayClientProxy::OnSynchronouslyDestroyed(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "Call media::mojom::AndroidOverlayClient::OnSynchronouslyDestroyed (sync)");
#else
  TRACE_EVENT0("mojom", "AndroidOverlayClient::OnSynchronouslyDestroyed");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAndroidOverlayClient_OnSynchronouslyDestroyed_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AndroidOverlayClient::Name_);
  message.set_method_name("OnSynchronouslyDestroyed");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AndroidOverlayClient_OnSynchronouslyDestroyed_HandleSyncResponse(
          &result));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END0("mojom", "AndroidOverlayClient::OnSynchronouslyDestroyed");
#endif
  return result;
}

void AndroidOverlayClientProxy::OnSynchronouslyDestroyed(
    OnSynchronouslyDestroyedCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send media::mojom::AndroidOverlayClient::OnSynchronouslyDestroyed");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAndroidOverlayClient_OnSynchronouslyDestroyed_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AndroidOverlayClient::Name_);
  message.set_method_name("OnSynchronouslyDestroyed");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AndroidOverlayClient_OnSynchronouslyDestroyed_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AndroidOverlayClientProxy::OnPowerEfficientState(
    bool in_is_power_efficient) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::AndroidOverlayClient::OnPowerEfficientState", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_power_efficient"), in_is_power_efficient,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAndroidOverlayClient_OnPowerEfficientState_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AndroidOverlayClient_OnPowerEfficientState_Params_Data> params(
          message);
  params.Allocate();
  params->is_power_efficient = in_is_power_efficient;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AndroidOverlayClient::Name_);
  message.set_method_name("OnPowerEfficientState");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class AndroidOverlayClient_OnSynchronouslyDestroyed_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AndroidOverlayClient::OnSynchronouslyDestroyedCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AndroidOverlayClient_OnSynchronouslyDestroyed_ProxyToResponder> proxy(
        new AndroidOverlayClient_OnSynchronouslyDestroyed_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AndroidOverlayClient_OnSynchronouslyDestroyed_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AndroidOverlayClient_OnSynchronouslyDestroyed_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AndroidOverlayClient_OnSynchronouslyDestroyed_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AndroidOverlayClient::OnSynchronouslyDestroyedCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool AndroidOverlayClient_OnSynchronouslyDestroyed_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AndroidOverlayClient::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void AndroidOverlayClient_OnSynchronouslyDestroyed_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply media::mojom::AndroidOverlayClient::OnSynchronouslyDestroyed");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAndroidOverlayClient_OnSynchronouslyDestroyed_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AndroidOverlayClient::Name_);
  message.set_method_name("OnSynchronouslyDestroyed");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool AndroidOverlayClient_OnSynchronouslyDestroyed_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data* params =
      reinterpret_cast<internal::AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AndroidOverlayClient::Name_, 2, true);
    return false;
  }
  *result_ = true;
  return true;
}

// static
bool AndroidOverlayClientStubDispatch::Accept(
    AndroidOverlayClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAndroidOverlayClient_OnSurfaceReady_Name: {

      DCHECK(message->is_serialized());
      internal::AndroidOverlayClient_OnSurfaceReady_Params_Data* params =
          reinterpret_cast<internal::AndroidOverlayClient_OnSurfaceReady_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      uint64_t p_surface_key{};
      AndroidOverlayClient_OnSurfaceReady_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_surface_key = input_data_view.surface_key();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AndroidOverlayClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnSurfaceReady(
std::move(p_surface_key));
      return true;
    }
    case internal::kAndroidOverlayClient_OnDestroyed_Name: {

      DCHECK(message->is_serialized());
      internal::AndroidOverlayClient_OnDestroyed_Params_Data* params =
          reinterpret_cast<internal::AndroidOverlayClient_OnDestroyed_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      AndroidOverlayClient_OnDestroyed_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AndroidOverlayClient::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnDestroyed();
      return true;
    }
    case internal::kAndroidOverlayClient_OnSynchronouslyDestroyed_Name: {
      break;
    }
    case internal::kAndroidOverlayClient_OnPowerEfficientState_Name: {

      DCHECK(message->is_serialized());
      internal::AndroidOverlayClient_OnPowerEfficientState_Params_Data* params =
          reinterpret_cast<internal::AndroidOverlayClient_OnPowerEfficientState_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_is_power_efficient{};
      AndroidOverlayClient_OnPowerEfficientState_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_is_power_efficient = input_data_view.is_power_efficient();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AndroidOverlayClient::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnPowerEfficientState(
std::move(p_is_power_efficient));
      return true;
    }
  }
  return false;
}

// static
bool AndroidOverlayClientStubDispatch::AcceptWithResponder(
    AndroidOverlayClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAndroidOverlayClient_OnSurfaceReady_Name: {
      break;
    }
    case internal::kAndroidOverlayClient_OnDestroyed_Name: {
      break;
    }
    case internal::kAndroidOverlayClient_OnSynchronouslyDestroyed_Name: {

      internal::AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data* params =
          reinterpret_cast<
              internal::AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      AndroidOverlayClient_OnSynchronouslyDestroyed_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AndroidOverlayClient::Name_, 2, false);
        return false;
      }
      AndroidOverlayClient::OnSynchronouslyDestroyedCallback callback =
          AndroidOverlayClient_OnSynchronouslyDestroyed_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnSynchronouslyDestroyed(std::move(callback));
      return true;
    }
    case internal::kAndroidOverlayClient_OnPowerEfficientState_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAndroidOverlayClientValidationInfo[] = {
    {&internal::AndroidOverlayClient_OnSurfaceReady_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AndroidOverlayClient_OnDestroyed_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data::Validate,
     &internal::AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data::Validate},
    {&internal::AndroidOverlayClient_OnPowerEfficientState_Params_Data::Validate,
     nullptr /* no response */},
};

bool AndroidOverlayClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::AndroidOverlayClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAndroidOverlayClientValidationInfo);
}

bool AndroidOverlayClientResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::AndroidOverlayClient::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kAndroidOverlayClientValidationInfo);
}


}  // namespace mojom
}  // namespace media


namespace mojo {


// static
bool StructTraits<::media::mojom::AndroidOverlayConfig::DataView, ::media::mojom::AndroidOverlayConfigPtr>::Read(
    ::media::mojom::AndroidOverlayConfig::DataView input,
    ::media::mojom::AndroidOverlayConfigPtr* output) {
  bool success = true;
  ::media::mojom::AndroidOverlayConfigPtr result(::media::mojom::AndroidOverlayConfig::New());
  
      if (success && !input.ReadRoutingToken(&result->routing_token))
        success = false;
      if (success && !input.ReadRect(&result->rect))
        success = false;
      if (success)
        result->secure = input.secure();
      if (success)
        result->power_efficient = input.power_efficient();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace media {
namespace mojom {


void AndroidOverlayProviderInterceptorForTesting::CreateOverlay(::mojo::PendingReceiver<AndroidOverlay> overlay, ::mojo::PendingRemote<AndroidOverlayClient> client, AndroidOverlayConfigPtr config) {
  GetForwardingInterface()->CreateOverlay(std::move(overlay), std::move(client), std::move(config));
}
AndroidOverlayProviderAsyncWaiter::AndroidOverlayProviderAsyncWaiter(
    AndroidOverlayProvider* proxy) : proxy_(proxy) {}

AndroidOverlayProviderAsyncWaiter::~AndroidOverlayProviderAsyncWaiter() = default;




void AndroidOverlayInterceptorForTesting::ScheduleLayout(const ::gfx::Rect& rect) {
  GetForwardingInterface()->ScheduleLayout(std::move(rect));
}
AndroidOverlayAsyncWaiter::AndroidOverlayAsyncWaiter(
    AndroidOverlay* proxy) : proxy_(proxy) {}

AndroidOverlayAsyncWaiter::~AndroidOverlayAsyncWaiter() = default;




void AndroidOverlayClientInterceptorForTesting::OnSurfaceReady(uint64_t surface_key) {
  GetForwardingInterface()->OnSurfaceReady(std::move(surface_key));
}
void AndroidOverlayClientInterceptorForTesting::OnDestroyed() {
  GetForwardingInterface()->OnDestroyed();
}
void AndroidOverlayClientInterceptorForTesting::OnSynchronouslyDestroyed(OnSynchronouslyDestroyedCallback callback) {
  GetForwardingInterface()->OnSynchronouslyDestroyed(std::move(callback));
}
void AndroidOverlayClientInterceptorForTesting::OnPowerEfficientState(bool is_power_efficient) {
  GetForwardingInterface()->OnPowerEfficientState(std::move(is_power_efficient));
}
AndroidOverlayClientAsyncWaiter::AndroidOverlayClientAsyncWaiter(
    AndroidOverlayClient* proxy) : proxy_(proxy) {}

AndroidOverlayClientAsyncWaiter::~AndroidOverlayClientAsyncWaiter() = default;

void AndroidOverlayClientAsyncWaiter::OnSynchronouslyDestroyed(
    ) {
  base::RunLoop loop;
  proxy_->OnSynchronouslyDestroyed(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}





}  // namespace mojom
}  // namespace media


#if defined(__clang__)
#pragma clang diagnostic pop
#endif