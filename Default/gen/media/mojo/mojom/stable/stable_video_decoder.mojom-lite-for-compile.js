// media/mojo/mojom/stable/stable_video_decoder.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('media.stable.mojom.CdmContextEvent');
goog.require('media.stable.mojom.DecryptStatus');
goog.require('sandbox.mojom.Sandbox');
goog.require('media.stable.mojom.VideoDecoderType');
goog.require('media.stable.mojom.WaitingReason');
goog.require('media.stable.mojom.ColorSpace');
goog.require('media.stable.mojom.DecoderBuffer');
goog.require('media.stable.mojom.DecryptConfig');
goog.require('media.stable.mojom.MediaLogRecord');
goog.require('gfx.mojom.Size');
goog.require('media.stable.mojom.Status');
goog.require('media.stable.mojom.SupportedVideoDecoderConfig');
goog.require('mojoBase.mojom.UnguessableToken');
goog.require('media.stable.mojom.VideoDecoderConfig');
goog.require('media.stable.mojom.VideoFrame');



goog.provide('media.stable.mojom.STABLE_VIDEO_DECODER_FACTORY_SERVICE_SANDBOX');
/**
 * @const { !sandbox.mojom.Sandbox }
 * @export
 */
media.stable.mojom.STABLE_VIDEO_DECODER_FACTORY_SERVICE_SANDBOX = sandbox.mojom.Sandbox.kNoSandbox;



goog.provide('media.stable.mojom.MediaLog');
goog.provide('media.stable.mojom.MediaLogReceiver');
goog.provide('media.stable.mojom.MediaLogCallbackRouter');
goog.provide('media.stable.mojom.MediaLogInterface');
goog.provide('media.stable.mojom.MediaLogRemote');
goog.provide('media.stable.mojom.MediaLogPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.stable.mojom.MediaLogPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.stable.mojom.MediaLog.$interfaceName,
        scope);
  }
};

/** @interface */
media.stable.mojom.MediaLogInterface = class {
  
  /**
   * @param { !media.stable.mojom.MediaLogRecord } event
   */

  addLogRecord(event) {}
};

/**
 * @export
 * @implements { media.stable.mojom.MediaLogInterface }
 */
media.stable.mojom.MediaLogRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.stable.mojom.MediaLogPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.stable.mojom.MediaLogPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.stable.mojom.MediaLogPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.stable.mojom.MediaLogRecord } event
   */

  addLogRecord(
      event) {
    this.proxy.sendMessage(
        0,
        media.stable.mojom.MediaLog_AddLogRecord_ParamsSpec.$,
        null,
        [
          event
        ]);
  }
};

/**
 * An object which receives request messages for the MediaLog
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.stable.mojom.MediaLogReceiver = class {
  /**
   * @param {!media.stable.mojom.MediaLogInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.stable.mojom.MediaLogRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.stable.mojom.MediaLogRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.MediaLogRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.MediaLog_AddLogRecord_ParamsSpec.$,
        null,
        impl.addLogRecord.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.stable.mojom.MediaLog = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.MediaLog";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.stable.mojom.MediaLogRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.stable.mojom.MediaLogRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaLog
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.stable.mojom.MediaLogCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.stable.mojom.MediaLogRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.MediaLogRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addLogRecord =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.MediaLog_AddLogRecord_ParamsSpec.$,
        null,
        this.addLogRecord.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.stable.mojom.VideoFrameHandleReleaser');
goog.provide('media.stable.mojom.VideoFrameHandleReleaserReceiver');
goog.provide('media.stable.mojom.VideoFrameHandleReleaserCallbackRouter');
goog.provide('media.stable.mojom.VideoFrameHandleReleaserInterface');
goog.provide('media.stable.mojom.VideoFrameHandleReleaserRemote');
goog.provide('media.stable.mojom.VideoFrameHandleReleaserPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.stable.mojom.VideoFrameHandleReleaserPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.stable.mojom.VideoFrameHandleReleaser.$interfaceName,
        scope);
  }
};

/** @interface */
media.stable.mojom.VideoFrameHandleReleaserInterface = class {
  
  /**
   * @param { !mojoBase.mojom.UnguessableToken } releaseToken
   */

  releaseVideoFrame(releaseToken) {}
};

/**
 * @export
 * @implements { media.stable.mojom.VideoFrameHandleReleaserInterface }
 */
media.stable.mojom.VideoFrameHandleReleaserRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.stable.mojom.VideoFrameHandleReleaserPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.stable.mojom.VideoFrameHandleReleaserPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.stable.mojom.VideoFrameHandleReleaserPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mojoBase.mojom.UnguessableToken } releaseToken
   */

  releaseVideoFrame(
      releaseToken) {
    this.proxy.sendMessage(
        0,
        media.stable.mojom.VideoFrameHandleReleaser_ReleaseVideoFrame_ParamsSpec.$,
        null,
        [
          releaseToken
        ]);
  }
};

/**
 * An object which receives request messages for the VideoFrameHandleReleaser
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.stable.mojom.VideoFrameHandleReleaserReceiver = class {
  /**
   * @param {!media.stable.mojom.VideoFrameHandleReleaserInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.stable.mojom.VideoFrameHandleReleaserRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.stable.mojom.VideoFrameHandleReleaserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.VideoFrameHandleReleaserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.VideoFrameHandleReleaser_ReleaseVideoFrame_ParamsSpec.$,
        null,
        impl.releaseVideoFrame.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.stable.mojom.VideoFrameHandleReleaser = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.VideoFrameHandleReleaser";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.stable.mojom.VideoFrameHandleReleaserRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.stable.mojom.VideoFrameHandleReleaserRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the VideoFrameHandleReleaser
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.stable.mojom.VideoFrameHandleReleaserCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.stable.mojom.VideoFrameHandleReleaserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.VideoFrameHandleReleaserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.releaseVideoFrame =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.VideoFrameHandleReleaser_ReleaseVideoFrame_ParamsSpec.$,
        null,
        this.releaseVideoFrame.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.stable.mojom.VideoDecoderClient');
goog.provide('media.stable.mojom.VideoDecoderClientReceiver');
goog.provide('media.stable.mojom.VideoDecoderClientCallbackRouter');
goog.provide('media.stable.mojom.VideoDecoderClientInterface');
goog.provide('media.stable.mojom.VideoDecoderClientRemote');
goog.provide('media.stable.mojom.VideoDecoderClientPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.stable.mojom.VideoDecoderClientPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.stable.mojom.VideoDecoderClient.$interfaceName,
        scope);
  }
};

/** @interface */
media.stable.mojom.VideoDecoderClientInterface = class {
  
  /**
   * @param { !media.stable.mojom.VideoFrame } frame
   * @param { !boolean } canReadWithoutStalling
   * @param { !mojoBase.mojom.UnguessableToken } releaseToken
   */

  onVideoFrameDecoded(frame, canReadWithoutStalling, releaseToken) {}
  
  /**
   * @param { !media.stable.mojom.WaitingReason } reason
   */

  onWaiting(reason) {}
};

/**
 * @export
 * @implements { media.stable.mojom.VideoDecoderClientInterface }
 */
media.stable.mojom.VideoDecoderClientRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.stable.mojom.VideoDecoderClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.stable.mojom.VideoDecoderClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.stable.mojom.VideoDecoderClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.stable.mojom.VideoFrame } frame
   * @param { !boolean } canReadWithoutStalling
   * @param { !mojoBase.mojom.UnguessableToken } releaseToken
   */

  onVideoFrameDecoded(
      frame,
      canReadWithoutStalling,
      releaseToken) {
    this.proxy.sendMessage(
        0,
        media.stable.mojom.VideoDecoderClient_OnVideoFrameDecoded_ParamsSpec.$,
        null,
        [
          frame,
          canReadWithoutStalling,
          releaseToken
        ]);
  }

  
  /**
   * @param { !media.stable.mojom.WaitingReason } reason
   */

  onWaiting(
      reason) {
    this.proxy.sendMessage(
        1,
        media.stable.mojom.VideoDecoderClient_OnWaiting_ParamsSpec.$,
        null,
        [
          reason
        ]);
  }
};

/**
 * An object which receives request messages for the VideoDecoderClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.stable.mojom.VideoDecoderClientReceiver = class {
  /**
   * @param {!media.stable.mojom.VideoDecoderClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.stable.mojom.VideoDecoderClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.stable.mojom.VideoDecoderClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.VideoDecoderClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.VideoDecoderClient_OnVideoFrameDecoded_ParamsSpec.$,
        null,
        impl.onVideoFrameDecoded.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.stable.mojom.VideoDecoderClient_OnWaiting_ParamsSpec.$,
        null,
        impl.onWaiting.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.stable.mojom.VideoDecoderClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.VideoDecoderClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.stable.mojom.VideoDecoderClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.stable.mojom.VideoDecoderClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the VideoDecoderClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.stable.mojom.VideoDecoderClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.stable.mojom.VideoDecoderClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.VideoDecoderClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onVideoFrameDecoded =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.VideoDecoderClient_OnVideoFrameDecoded_ParamsSpec.$,
        null,
        this.onVideoFrameDecoded.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onWaiting =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.stable.mojom.VideoDecoderClient_OnWaiting_ParamsSpec.$,
        null,
        this.onWaiting.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.stable.mojom.CdmContextEventCallback');
goog.provide('media.stable.mojom.CdmContextEventCallbackReceiver');
goog.provide('media.stable.mojom.CdmContextEventCallbackCallbackRouter');
goog.provide('media.stable.mojom.CdmContextEventCallbackInterface');
goog.provide('media.stable.mojom.CdmContextEventCallbackRemote');
goog.provide('media.stable.mojom.CdmContextEventCallbackPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.stable.mojom.CdmContextEventCallbackPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.stable.mojom.CdmContextEventCallback.$interfaceName,
        scope);
  }
};

/** @interface */
media.stable.mojom.CdmContextEventCallbackInterface = class {
  
  /**
   * @param { !media.stable.mojom.CdmContextEvent } event
   */

  eventCallback(event) {}
};

/**
 * @export
 * @implements { media.stable.mojom.CdmContextEventCallbackInterface }
 */
media.stable.mojom.CdmContextEventCallbackRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.stable.mojom.CdmContextEventCallbackPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.stable.mojom.CdmContextEventCallbackPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.stable.mojom.CdmContextEventCallbackPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.stable.mojom.CdmContextEvent } event
   */

  eventCallback(
      event) {
    this.proxy.sendMessage(
        0,
        media.stable.mojom.CdmContextEventCallback_EventCallback_ParamsSpec.$,
        null,
        [
          event
        ]);
  }
};

/**
 * An object which receives request messages for the CdmContextEventCallback
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.stable.mojom.CdmContextEventCallbackReceiver = class {
  /**
   * @param {!media.stable.mojom.CdmContextEventCallbackInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.stable.mojom.CdmContextEventCallbackRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.stable.mojom.CdmContextEventCallbackRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.CdmContextEventCallbackRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.CdmContextEventCallback_EventCallback_ParamsSpec.$,
        null,
        impl.eventCallback.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.stable.mojom.CdmContextEventCallback = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.CdmContextEventCallback";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.stable.mojom.CdmContextEventCallbackRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.stable.mojom.CdmContextEventCallbackRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the CdmContextEventCallback
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.stable.mojom.CdmContextEventCallbackCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.stable.mojom.CdmContextEventCallbackRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.CdmContextEventCallbackRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.eventCallback =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.CdmContextEventCallback_EventCallback_ParamsSpec.$,
        null,
        this.eventCallback.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.stable.mojom.StableCdmContext');
goog.provide('media.stable.mojom.StableCdmContextReceiver');
goog.provide('media.stable.mojom.StableCdmContextCallbackRouter');
goog.provide('media.stable.mojom.StableCdmContextInterface');
goog.provide('media.stable.mojom.StableCdmContextRemote');
goog.provide('media.stable.mojom.StableCdmContextPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.stable.mojom.StableCdmContextPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.stable.mojom.StableCdmContext.$interfaceName,
        scope);
  }
};

/** @interface */
media.stable.mojom.StableCdmContextInterface = class {
  
  /**
   * @param { !media.stable.mojom.DecryptConfig } decryptConfig
   * @param { !Array<!number> } hwIdentifier
   * @return {!Promise<{
        status: !media.stable.mojom.DecryptStatus,
        keyData: !Array<!number>,
   *  }>}
   */

  getHwKeyData(decryptConfig, hwIdentifier) {}
  
  /**
   * @param { !media.stable.mojom.CdmContextEventCallbackRemote } callback
   */

  registerEventCallback(callback) {}
  
  /**
   * @return {!Promise<{
        success: !boolean,
        configData: !Array<!number>,
   *  }>}
   */

  getHwConfigData() {}
  
  /**
   * @return {!Promise<{
        resolutions: !Array<!gfx.mojom.Size>,
   *  }>}
   */

  getScreenResolutions() {}
};

/**
 * @export
 * @implements { media.stable.mojom.StableCdmContextInterface }
 */
media.stable.mojom.StableCdmContextRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.stable.mojom.StableCdmContextPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.stable.mojom.StableCdmContextPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.stable.mojom.StableCdmContextPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.stable.mojom.DecryptConfig } decryptConfig
   * @param { !Array<!number> } hwIdentifier
   * @return {!Promise<{
        status: !media.stable.mojom.DecryptStatus,
        keyData: !Array<!number>,
   *  }>}
   */

  getHwKeyData(
      decryptConfig,
      hwIdentifier) {
    return this.proxy.sendMessage(
        0,
        media.stable.mojom.StableCdmContext_GetHwKeyData_ParamsSpec.$,
        media.stable.mojom.StableCdmContext_GetHwKeyData_ResponseParamsSpec.$,
        [
          decryptConfig,
          hwIdentifier
        ]);
  }

  
  /**
   * @param { !media.stable.mojom.CdmContextEventCallbackRemote } callback
   */

  registerEventCallback(
      callback) {
    this.proxy.sendMessage(
        1,
        media.stable.mojom.StableCdmContext_RegisterEventCallback_ParamsSpec.$,
        null,
        [
          callback
        ]);
  }

  
  /**
   * @return {!Promise<{
        success: !boolean,
        configData: !Array<!number>,
   *  }>}
   */

  getHwConfigData() {
    return this.proxy.sendMessage(
        2,
        media.stable.mojom.StableCdmContext_GetHwConfigData_ParamsSpec.$,
        media.stable.mojom.StableCdmContext_GetHwConfigData_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @return {!Promise<{
        resolutions: !Array<!gfx.mojom.Size>,
   *  }>}
   */

  getScreenResolutions() {
    return this.proxy.sendMessage(
        3,
        media.stable.mojom.StableCdmContext_GetScreenResolutions_ParamsSpec.$,
        media.stable.mojom.StableCdmContext_GetScreenResolutions_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the StableCdmContext
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.stable.mojom.StableCdmContextReceiver = class {
  /**
   * @param {!media.stable.mojom.StableCdmContextInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.stable.mojom.StableCdmContextRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.stable.mojom.StableCdmContextRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.StableCdmContextRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.StableCdmContext_GetHwKeyData_ParamsSpec.$,
        media.stable.mojom.StableCdmContext_GetHwKeyData_ResponseParamsSpec.$,
        impl.getHwKeyData.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.stable.mojom.StableCdmContext_RegisterEventCallback_ParamsSpec.$,
        null,
        impl.registerEventCallback.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.stable.mojom.StableCdmContext_GetHwConfigData_ParamsSpec.$,
        media.stable.mojom.StableCdmContext_GetHwConfigData_ResponseParamsSpec.$,
        impl.getHwConfigData.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        media.stable.mojom.StableCdmContext_GetScreenResolutions_ParamsSpec.$,
        media.stable.mojom.StableCdmContext_GetScreenResolutions_ResponseParamsSpec.$,
        impl.getScreenResolutions.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.stable.mojom.StableCdmContext = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.StableCdmContext";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.stable.mojom.StableCdmContextRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.stable.mojom.StableCdmContextRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the StableCdmContext
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.stable.mojom.StableCdmContextCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.stable.mojom.StableCdmContextRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.StableCdmContextRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getHwKeyData =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.StableCdmContext_GetHwKeyData_ParamsSpec.$,
        media.stable.mojom.StableCdmContext_GetHwKeyData_ResponseParamsSpec.$,
        this.getHwKeyData.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.registerEventCallback =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.stable.mojom.StableCdmContext_RegisterEventCallback_ParamsSpec.$,
        null,
        this.registerEventCallback.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getHwConfigData =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.stable.mojom.StableCdmContext_GetHwConfigData_ParamsSpec.$,
        media.stable.mojom.StableCdmContext_GetHwConfigData_ResponseParamsSpec.$,
        this.getHwConfigData.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getScreenResolutions =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        media.stable.mojom.StableCdmContext_GetScreenResolutions_ParamsSpec.$,
        media.stable.mojom.StableCdmContext_GetScreenResolutions_ResponseParamsSpec.$,
        this.getScreenResolutions.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.stable.mojom.StableVideoDecoder');
goog.provide('media.stable.mojom.StableVideoDecoderReceiver');
goog.provide('media.stable.mojom.StableVideoDecoderCallbackRouter');
goog.provide('media.stable.mojom.StableVideoDecoderInterface');
goog.provide('media.stable.mojom.StableVideoDecoderRemote');
goog.provide('media.stable.mojom.StableVideoDecoderPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.stable.mojom.StableVideoDecoderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.stable.mojom.StableVideoDecoder.$interfaceName,
        scope);
  }
};

/** @interface */
media.stable.mojom.StableVideoDecoderInterface = class {
  
  /**
   * @return {!Promise<{
        supportedConfigs: !Array<!media.stable.mojom.SupportedVideoDecoderConfig>,
        decoderType: !media.stable.mojom.VideoDecoderType,
   *  }>}
   */

  getSupportedConfigs() {}
  
  /**
   * @param { !Object } client
   * @param { !media.stable.mojom.MediaLogRemote } mediaLog
   * @param { !media.stable.mojom.VideoFrameHandleReleaserPendingReceiver } videoFrameHandleReleaser
   * @param { !MojoHandle } decoderBufferPipe
   * @param { !media.stable.mojom.ColorSpace } targetColorSpace
   */

  construct(client, mediaLog, videoFrameHandleReleaser, decoderBufferPipe, targetColorSpace) {}
  
  /**
   * @param { !media.stable.mojom.VideoDecoderConfig } config
   * @param { !boolean } lowDelay
   * @param { ?media.stable.mojom.StableCdmContextRemote } cdmContext
   * @return {!Promise<{
        status: !media.stable.mojom.Status,
        needsBitstreamConversion: !boolean,
        maxDecodeRequests: !number,
        decoderType: !media.stable.mojom.VideoDecoderType,
   *  }>}
   */

  initialize(config, lowDelay, cdmContext) {}
  
  /**
   * @param { !media.stable.mojom.DecoderBuffer } buffer
   * @return {!Promise<{
        status: !media.stable.mojom.Status,
   *  }>}
   */

  decode(buffer) {}
  
  /**
   * @return {!Promise}
   */

  reset() {}
};

/**
 * @export
 * @implements { media.stable.mojom.StableVideoDecoderInterface }
 */
media.stable.mojom.StableVideoDecoderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.stable.mojom.StableVideoDecoderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.stable.mojom.StableVideoDecoderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.stable.mojom.StableVideoDecoderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        supportedConfigs: !Array<!media.stable.mojom.SupportedVideoDecoderConfig>,
        decoderType: !media.stable.mojom.VideoDecoderType,
   *  }>}
   */

  getSupportedConfigs() {
    return this.proxy.sendMessage(
        0,
        media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !Object } client
   * @param { !media.stable.mojom.MediaLogRemote } mediaLog
   * @param { !media.stable.mojom.VideoFrameHandleReleaserPendingReceiver } videoFrameHandleReleaser
   * @param { !MojoHandle } decoderBufferPipe
   * @param { !media.stable.mojom.ColorSpace } targetColorSpace
   */

  construct(
      client,
      mediaLog,
      videoFrameHandleReleaser,
      decoderBufferPipe,
      targetColorSpace) {
    this.proxy.sendMessage(
        1,
        media.stable.mojom.StableVideoDecoder_Construct_ParamsSpec.$,
        null,
        [
          client,
          mediaLog,
          videoFrameHandleReleaser,
          decoderBufferPipe,
          targetColorSpace
        ]);
  }

  
  /**
   * @param { !media.stable.mojom.VideoDecoderConfig } config
   * @param { !boolean } lowDelay
   * @param { ?media.stable.mojom.StableCdmContextRemote } cdmContext
   * @return {!Promise<{
        status: !media.stable.mojom.Status,
        needsBitstreamConversion: !boolean,
        maxDecodeRequests: !number,
        decoderType: !media.stable.mojom.VideoDecoderType,
   *  }>}
   */

  initialize(
      config,
      lowDelay,
      cdmContext) {
    return this.proxy.sendMessage(
        2,
        media.stable.mojom.StableVideoDecoder_Initialize_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_Initialize_ResponseParamsSpec.$,
        [
          config,
          lowDelay,
          cdmContext
        ]);
  }

  
  /**
   * @param { !media.stable.mojom.DecoderBuffer } buffer
   * @return {!Promise<{
        status: !media.stable.mojom.Status,
   *  }>}
   */

  decode(
      buffer) {
    return this.proxy.sendMessage(
        3,
        media.stable.mojom.StableVideoDecoder_Decode_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_Decode_ResponseParamsSpec.$,
        [
          buffer
        ]);
  }

  
  /**
   * @return {!Promise}
   */

  reset() {
    return this.proxy.sendMessage(
        4,
        media.stable.mojom.StableVideoDecoder_Reset_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_Reset_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the StableVideoDecoder
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.stable.mojom.StableVideoDecoderReceiver = class {
  /**
   * @param {!media.stable.mojom.StableVideoDecoderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.stable.mojom.StableVideoDecoderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.stable.mojom.StableVideoDecoderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.StableVideoDecoderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ResponseParamsSpec.$,
        impl.getSupportedConfigs.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.stable.mojom.StableVideoDecoder_Construct_ParamsSpec.$,
        null,
        impl.construct.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.stable.mojom.StableVideoDecoder_Initialize_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_Initialize_ResponseParamsSpec.$,
        impl.initialize.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        media.stable.mojom.StableVideoDecoder_Decode_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_Decode_ResponseParamsSpec.$,
        impl.decode.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        media.stable.mojom.StableVideoDecoder_Reset_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_Reset_ResponseParamsSpec.$,
        impl.reset.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.stable.mojom.StableVideoDecoder = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.StableVideoDecoder";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.stable.mojom.StableVideoDecoderRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.stable.mojom.StableVideoDecoderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the StableVideoDecoder
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.stable.mojom.StableVideoDecoderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.stable.mojom.StableVideoDecoderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.StableVideoDecoderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getSupportedConfigs =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ResponseParamsSpec.$,
        this.getSupportedConfigs.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.construct =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.stable.mojom.StableVideoDecoder_Construct_ParamsSpec.$,
        null,
        this.construct.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.initialize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.stable.mojom.StableVideoDecoder_Initialize_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_Initialize_ResponseParamsSpec.$,
        this.initialize.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.decode =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        media.stable.mojom.StableVideoDecoder_Decode_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_Decode_ResponseParamsSpec.$,
        this.decode.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.reset =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        media.stable.mojom.StableVideoDecoder_Reset_ParamsSpec.$,
        media.stable.mojom.StableVideoDecoder_Reset_ResponseParamsSpec.$,
        this.reset.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.stable.mojom.StableVideoDecoderFactory');
goog.provide('media.stable.mojom.StableVideoDecoderFactoryReceiver');
goog.provide('media.stable.mojom.StableVideoDecoderFactoryCallbackRouter');
goog.provide('media.stable.mojom.StableVideoDecoderFactoryInterface');
goog.provide('media.stable.mojom.StableVideoDecoderFactoryRemote');
goog.provide('media.stable.mojom.StableVideoDecoderFactoryPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.stable.mojom.StableVideoDecoderFactoryPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.stable.mojom.StableVideoDecoderFactory.$interfaceName,
        scope);
  }
};

/** @interface */
media.stable.mojom.StableVideoDecoderFactoryInterface = class {
  
  /**
   * @param { !media.stable.mojom.StableVideoDecoderPendingReceiver } receiver
   */

  createStableVideoDecoder(receiver) {}
};

/**
 * @export
 * @implements { media.stable.mojom.StableVideoDecoderFactoryInterface }
 */
media.stable.mojom.StableVideoDecoderFactoryRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.stable.mojom.StableVideoDecoderFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.stable.mojom.StableVideoDecoderFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.stable.mojom.StableVideoDecoderFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.stable.mojom.StableVideoDecoderPendingReceiver } receiver
   */

  createStableVideoDecoder(
      receiver) {
    this.proxy.sendMessage(
        0,
        media.stable.mojom.StableVideoDecoderFactory_CreateStableVideoDecoder_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the StableVideoDecoderFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.stable.mojom.StableVideoDecoderFactoryReceiver = class {
  /**
   * @param {!media.stable.mojom.StableVideoDecoderFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.stable.mojom.StableVideoDecoderFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.stable.mojom.StableVideoDecoderFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.StableVideoDecoderFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.StableVideoDecoderFactory_CreateStableVideoDecoder_ParamsSpec.$,
        null,
        impl.createStableVideoDecoder.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.stable.mojom.StableVideoDecoderFactory = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.StableVideoDecoderFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.stable.mojom.StableVideoDecoderFactoryRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.stable.mojom.StableVideoDecoderFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the StableVideoDecoderFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.stable.mojom.StableVideoDecoderFactoryCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.stable.mojom.StableVideoDecoderFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.stable.mojom.StableVideoDecoderFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createStableVideoDecoder =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.stable.mojom.StableVideoDecoderFactory_CreateStableVideoDecoder_ParamsSpec.$,
        null,
        this.createStableVideoDecoder.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.stable.mojom.MediaLog_AddLogRecord_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.MediaLog_AddLogRecord_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.VideoFrameHandleReleaser_ReleaseVideoFrame_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.VideoFrameHandleReleaser_ReleaseVideoFrame_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.VideoDecoderClient_OnVideoFrameDecoded_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.VideoDecoderClient_OnVideoFrameDecoded_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.VideoDecoderClient_OnWaiting_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.VideoDecoderClient_OnWaiting_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.CdmContextEventCallback_EventCallback_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.CdmContextEventCallback_EventCallback_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableCdmContext_GetHwKeyData_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableCdmContext_GetHwKeyData_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableCdmContext_GetHwKeyData_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableCdmContext_GetHwKeyData_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableCdmContext_RegisterEventCallback_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableCdmContext_RegisterEventCallback_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableCdmContext_GetHwConfigData_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableCdmContext_GetHwConfigData_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableCdmContext_GetHwConfigData_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableCdmContext_GetHwConfigData_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableCdmContext_GetScreenResolutions_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableCdmContext_GetScreenResolutions_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableCdmContext_GetScreenResolutions_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableCdmContext_GetScreenResolutions_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableVideoDecoder_Construct_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableVideoDecoder_Construct_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableVideoDecoder_Initialize_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableVideoDecoder_Initialize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableVideoDecoder_Initialize_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableVideoDecoder_Initialize_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableVideoDecoder_Decode_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableVideoDecoder_Decode_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableVideoDecoder_Decode_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableVideoDecoder_Decode_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableVideoDecoder_Reset_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableVideoDecoder_Reset_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableVideoDecoder_Reset_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableVideoDecoder_Reset_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.stable.mojom.StableVideoDecoderFactory_CreateStableVideoDecoder_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.stable.mojom.StableVideoDecoderFactory_CreateStableVideoDecoder_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    media.stable.mojom.MediaLog_AddLogRecord_ParamsSpec.$,
    'MediaLog_AddLogRecord_Params',
    [
      mojo.internal.StructField(
        'event', 0,
        0,
        media.stable.mojom.MediaLogRecordSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.stable.mojom.MediaLog_AddLogRecord_Params');

/** @record */
media.stable.mojom.MediaLog_AddLogRecord_Params = class {
  constructor() {
    /** @export { !media.stable.mojom.MediaLogRecord } */
    this.event;
  }
};




mojo.internal.Struct(
    media.stable.mojom.VideoFrameHandleReleaser_ReleaseVideoFrame_ParamsSpec.$,
    'VideoFrameHandleReleaser_ReleaseVideoFrame_Params',
    [
      mojo.internal.StructField(
        'releaseToken', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.stable.mojom.VideoFrameHandleReleaser_ReleaseVideoFrame_Params');

/** @record */
media.stable.mojom.VideoFrameHandleReleaser_ReleaseVideoFrame_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.releaseToken;
  }
};




mojo.internal.Struct(
    media.stable.mojom.VideoDecoderClient_OnVideoFrameDecoded_ParamsSpec.$,
    'VideoDecoderClient_OnVideoFrameDecoded_Params',
    [
      mojo.internal.StructField(
        'frame', 0,
        0,
        media.stable.mojom.VideoFrameSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'canReadWithoutStalling', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'releaseToken', 16,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 32],]);



goog.provide('media.stable.mojom.VideoDecoderClient_OnVideoFrameDecoded_Params');

/** @record */
media.stable.mojom.VideoDecoderClient_OnVideoFrameDecoded_Params = class {
  constructor() {
    /** @export { !media.stable.mojom.VideoFrame } */
    this.frame;
    /** @export { !boolean } */
    this.canReadWithoutStalling;
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.releaseToken;
  }
};




mojo.internal.Struct(
    media.stable.mojom.VideoDecoderClient_OnWaiting_ParamsSpec.$,
    'VideoDecoderClient_OnWaiting_Params',
    [
      mojo.internal.StructField(
        'reason', 0,
        0,
        media.stable.mojom.WaitingReasonSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.stable.mojom.VideoDecoderClient_OnWaiting_Params');

/** @record */
media.stable.mojom.VideoDecoderClient_OnWaiting_Params = class {
  constructor() {
    /** @export { !media.stable.mojom.WaitingReason } */
    this.reason;
  }
};




mojo.internal.Struct(
    media.stable.mojom.CdmContextEventCallback_EventCallback_ParamsSpec.$,
    'CdmContextEventCallback_EventCallback_Params',
    [
      mojo.internal.StructField(
        'event', 0,
        0,
        media.stable.mojom.CdmContextEventSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.stable.mojom.CdmContextEventCallback_EventCallback_Params');

/** @record */
media.stable.mojom.CdmContextEventCallback_EventCallback_Params = class {
  constructor() {
    /** @export { !media.stable.mojom.CdmContextEvent } */
    this.event;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableCdmContext_GetHwKeyData_ParamsSpec.$,
    'StableCdmContext_GetHwKeyData_Params',
    [
      mojo.internal.StructField(
        'decryptConfig', 0,
        0,
        media.stable.mojom.DecryptConfigSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'hwIdentifier', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('media.stable.mojom.StableCdmContext_GetHwKeyData_Params');

/** @record */
media.stable.mojom.StableCdmContext_GetHwKeyData_Params = class {
  constructor() {
    /** @export { !media.stable.mojom.DecryptConfig } */
    this.decryptConfig;
    /** @export { !Array<!number> } */
    this.hwIdentifier;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableCdmContext_GetHwKeyData_ResponseParamsSpec.$,
    'StableCdmContext_GetHwKeyData_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        media.stable.mojom.DecryptStatusSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'keyData', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('media.stable.mojom.StableCdmContext_GetHwKeyData_ResponseParams');

/** @record */
media.stable.mojom.StableCdmContext_GetHwKeyData_ResponseParams = class {
  constructor() {
    /** @export { !media.stable.mojom.DecryptStatus } */
    this.status;
    /** @export { !Array<!number> } */
    this.keyData;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableCdmContext_RegisterEventCallback_ParamsSpec.$,
    'StableCdmContext_RegisterEventCallback_Params',
    [
      mojo.internal.StructField(
        'callback', 0,
        0,
        mojo.internal.InterfaceProxy(media.stable.mojom.CdmContextEventCallbackRemote),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.stable.mojom.StableCdmContext_RegisterEventCallback_Params');

/** @record */
media.stable.mojom.StableCdmContext_RegisterEventCallback_Params = class {
  constructor() {
    /** @export { !media.stable.mojom.CdmContextEventCallbackRemote } */
    this.callback;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableCdmContext_GetHwConfigData_ParamsSpec.$,
    'StableCdmContext_GetHwConfigData_Params',
    [
    ],
    [[0, 8],]);



goog.provide('media.stable.mojom.StableCdmContext_GetHwConfigData_Params');

/** @record */
media.stable.mojom.StableCdmContext_GetHwConfigData_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableCdmContext_GetHwConfigData_ResponseParamsSpec.$,
    'StableCdmContext_GetHwConfigData_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'configData', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('media.stable.mojom.StableCdmContext_GetHwConfigData_ResponseParams');

/** @record */
media.stable.mojom.StableCdmContext_GetHwConfigData_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.success;
    /** @export { !Array<!number> } */
    this.configData;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableCdmContext_GetScreenResolutions_ParamsSpec.$,
    'StableCdmContext_GetScreenResolutions_Params',
    [
    ],
    [[0, 8],]);



goog.provide('media.stable.mojom.StableCdmContext_GetScreenResolutions_Params');

/** @record */
media.stable.mojom.StableCdmContext_GetScreenResolutions_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableCdmContext_GetScreenResolutions_ResponseParamsSpec.$,
    'StableCdmContext_GetScreenResolutions_ResponseParams',
    [
      mojo.internal.StructField(
        'resolutions', 0,
        0,
        mojo.internal.Array(gfx.mojom.SizeSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.stable.mojom.StableCdmContext_GetScreenResolutions_ResponseParams');

/** @record */
media.stable.mojom.StableCdmContext_GetScreenResolutions_ResponseParams = class {
  constructor() {
    /** @export { !Array<!gfx.mojom.Size> } */
    this.resolutions;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ParamsSpec.$,
    'StableVideoDecoder_GetSupportedConfigs_Params',
    [
    ],
    [[0, 8],]);



goog.provide('media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_Params');

/** @record */
media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ResponseParamsSpec.$,
    'StableVideoDecoder_GetSupportedConfigs_ResponseParams',
    [
      mojo.internal.StructField(
        'supportedConfigs', 0,
        0,
        mojo.internal.Array(media.stable.mojom.SupportedVideoDecoderConfigSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'decoderType', 8,
        0,
        media.stable.mojom.VideoDecoderTypeSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ResponseParams');

/** @record */
media.stable.mojom.StableVideoDecoder_GetSupportedConfigs_ResponseParams = class {
  constructor() {
    /** @export { !Array<!media.stable.mojom.SupportedVideoDecoderConfig> } */
    this.supportedConfigs;
    /** @export { !media.stable.mojom.VideoDecoderType } */
    this.decoderType;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableVideoDecoder_Construct_ParamsSpec.$,
    'StableVideoDecoder_Construct_Params',
    [
      mojo.internal.StructField(
        'client', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(media.stable.mojom.VideoDecoderClientRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'mediaLog', 8,
        0,
        mojo.internal.InterfaceProxy(media.stable.mojom.MediaLogRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'videoFrameHandleReleaser', 16,
        0,
        mojo.internal.InterfaceRequest(media.stable.mojom.VideoFrameHandleReleaserPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'decoderBufferPipe', 20,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'targetColorSpace', 24,
        0,
        media.stable.mojom.ColorSpaceSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 40],]);



goog.provide('media.stable.mojom.StableVideoDecoder_Construct_Params');

/** @record */
media.stable.mojom.StableVideoDecoder_Construct_Params = class {
  constructor() {
    /** @export { !Object } */
    this.client;
    /** @export { !media.stable.mojom.MediaLogRemote } */
    this.mediaLog;
    /** @export { !media.stable.mojom.VideoFrameHandleReleaserPendingReceiver } */
    this.videoFrameHandleReleaser;
    /** @export { !MojoHandle } */
    this.decoderBufferPipe;
    /** @export { !media.stable.mojom.ColorSpace } */
    this.targetColorSpace;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableVideoDecoder_Initialize_ParamsSpec.$,
    'StableVideoDecoder_Initialize_Params',
    [
      mojo.internal.StructField(
        'config', 0,
        0,
        media.stable.mojom.VideoDecoderConfigSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'lowDelay', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'cdmContext', 12,
        0,
        mojo.internal.InterfaceProxy(media.stable.mojom.StableCdmContextRemote),
        null,
        true /* nullable */),
    ],
    [[0, 32],]);



goog.provide('media.stable.mojom.StableVideoDecoder_Initialize_Params');

/** @record */
media.stable.mojom.StableVideoDecoder_Initialize_Params = class {
  constructor() {
    /** @export { !media.stable.mojom.VideoDecoderConfig } */
    this.config;
    /** @export { !boolean } */
    this.lowDelay;
    /** @export { (media.stable.mojom.StableCdmContextRemote|undefined) } */
    this.cdmContext;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableVideoDecoder_Initialize_ResponseParamsSpec.$,
    'StableVideoDecoder_Initialize_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        media.stable.mojom.StatusSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'needsBitstreamConversion', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'maxDecodeRequests', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'decoderType', 16,
        0,
        media.stable.mojom.VideoDecoderTypeSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 32],]);



goog.provide('media.stable.mojom.StableVideoDecoder_Initialize_ResponseParams');

/** @record */
media.stable.mojom.StableVideoDecoder_Initialize_ResponseParams = class {
  constructor() {
    /** @export { !media.stable.mojom.Status } */
    this.status;
    /** @export { !boolean } */
    this.needsBitstreamConversion;
    /** @export { !number } */
    this.maxDecodeRequests;
    /** @export { !media.stable.mojom.VideoDecoderType } */
    this.decoderType;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableVideoDecoder_Decode_ParamsSpec.$,
    'StableVideoDecoder_Decode_Params',
    [
      mojo.internal.StructField(
        'buffer', 0,
        0,
        media.stable.mojom.DecoderBufferSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.stable.mojom.StableVideoDecoder_Decode_Params');

/** @record */
media.stable.mojom.StableVideoDecoder_Decode_Params = class {
  constructor() {
    /** @export { !media.stable.mojom.DecoderBuffer } */
    this.buffer;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableVideoDecoder_Decode_ResponseParamsSpec.$,
    'StableVideoDecoder_Decode_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        media.stable.mojom.StatusSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.stable.mojom.StableVideoDecoder_Decode_ResponseParams');

/** @record */
media.stable.mojom.StableVideoDecoder_Decode_ResponseParams = class {
  constructor() {
    /** @export { !media.stable.mojom.Status } */
    this.status;
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableVideoDecoder_Reset_ParamsSpec.$,
    'StableVideoDecoder_Reset_Params',
    [
    ],
    [[0, 8],]);



goog.provide('media.stable.mojom.StableVideoDecoder_Reset_Params');

/** @record */
media.stable.mojom.StableVideoDecoder_Reset_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableVideoDecoder_Reset_ResponseParamsSpec.$,
    'StableVideoDecoder_Reset_ResponseParams',
    [
    ],
    [[0, 8],]);



goog.provide('media.stable.mojom.StableVideoDecoder_Reset_ResponseParams');

/** @record */
media.stable.mojom.StableVideoDecoder_Reset_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.stable.mojom.StableVideoDecoderFactory_CreateStableVideoDecoder_ParamsSpec.$,
    'StableVideoDecoderFactory_CreateStableVideoDecoder_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.InterfaceRequest(media.stable.mojom.StableVideoDecoderPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.stable.mojom.StableVideoDecoderFactory_CreateStableVideoDecoder_Params');

/** @record */
media.stable.mojom.StableVideoDecoderFactory_CreateStableVideoDecoder_Params = class {
  constructor() {
    /** @export { !media.stable.mojom.StableVideoDecoderPendingReceiver } */
    this.receiver;
  }
};


