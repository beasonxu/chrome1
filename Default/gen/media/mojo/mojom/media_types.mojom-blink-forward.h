// media/mojo/mojom/media_types.mojom-blink-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_MEDIA_TYPES_MOJOM_BLINK_FORWARD_H_
#define MEDIA_MOJO_MOJOM_MEDIA_TYPES_MOJOM_BLINK_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"




#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"



namespace mojo {
enum class NativeEnum;
}  // namespace mojo
namespace media {
namespace mojom {
using AudioCodec = mojo::NativeEnum;
using AudioCodecProfile = mojo::NativeEnum;
using BufferingState = mojo::NativeEnum;
using BufferingStateChangeReason = mojo::NativeEnum;
using ChannelLayout = mojo::NativeEnum;
using MediaContentType = mojo::NativeEnum;
using OutputDeviceStatus = mojo::NativeEnum;
using SampleFormat = mojo::NativeEnum;
using VideoCodec = mojo::NativeEnum;
using VideoCodecProfile = mojo::NativeEnum;
using VideoPixelFormat = mojo::NativeEnum;
using VideoDecoderType = mojo::NativeEnum;
using AudioDecoderType = mojo::NativeEnum;

enum class VideoRotation : int32_t;
using FullscreenVideoStatus = mojo::NativeEnum;
using WaitingReason = mojo::NativeEnum;
using WatchTimeKey = mojo::NativeEnum;
using MediaContainerName = mojo::NativeEnum;
using MediaStatusState = mojo::NativeEnum;
using EncryptionScheme = mojo::NativeEnum;

enum class EncryptionType : int32_t;

enum class SVCScalabilityMode : int32_t;

enum class CdmSessionClosedReason : int32_t;

enum class MediaStreamType : int32_t;

enum class InputStreamErrorCode : int32_t;

enum class RendererType : int32_t;
using VideoColorSpace_PrimaryID = mojo::NativeEnum;
using VideoColorSpace_TransferID = mojo::NativeEnum;
using VideoColorSpace_MatrixID = mojo::NativeEnum;
using VideoColorSpace_RangeID = mojo::NativeEnum;
}  // namespace media
}  // namespace mojom


namespace media {
namespace mojom {
namespace blink {
using AudioCodec = AudioCodec;
using AudioCodecProfile = AudioCodecProfile;
using BufferingState = BufferingState;
using BufferingStateChangeReason = BufferingStateChangeReason;
using ChannelLayout = ChannelLayout;
using MediaContentType = MediaContentType;
using OutputDeviceStatus = OutputDeviceStatus;
using SampleFormat = SampleFormat;
using VideoCodec = VideoCodec;
using VideoCodecProfile = VideoCodecProfile;
using VideoPixelFormat = VideoPixelFormat;
using VideoDecoderType = VideoDecoderType;
using AudioDecoderType = AudioDecoderType;
using VideoRotation = VideoRotation;
using FullscreenVideoStatus = FullscreenVideoStatus;
using WaitingReason = WaitingReason;
using WatchTimeKey = WatchTimeKey;
using MediaContainerName = MediaContainerName;
using MediaStatusState = MediaStatusState;
using EncryptionScheme = EncryptionScheme;
using EncryptionType = EncryptionType;
using SVCScalabilityMode = SVCScalabilityMode;
using CdmSessionClosedReason = CdmSessionClosedReason;
using MediaStreamType = MediaStreamType;
using InputStreamErrorCode = InputStreamErrorCode;
using RendererType = RendererType;
using MediaLogRecord = mojo::native::NativeStruct;
using MediaLogRecordPtr = mojo::native::NativeStructPtr;

class VideoTransformation;
using VideoTransformationPtr = mojo::InlinedStructPtr<VideoTransformation>;

class VideoColorSpace;
using VideoColorSpacePtr = mojo::InlinedStructPtr<VideoColorSpace>;

class AudioDecoderConfig;
using AudioDecoderConfigPtr = mojo::StructPtr<AudioDecoderConfig>;

class VideoDecoderConfig;
using VideoDecoderConfigPtr = mojo::StructPtr<VideoDecoderConfig>;

using SubsampleEntry = mojo::native::NativeStruct;
using SubsampleEntryPtr = mojo::native::NativeStructPtr;

class DecryptConfig;
using DecryptConfigPtr = mojo::StructPtr<DecryptConfig>;

class DecoderBuffer;
using DecoderBufferPtr = mojo::StructPtr<DecoderBuffer>;

class AudioBuffer;
using AudioBufferPtr = mojo::StructPtr<AudioBuffer>;

class VideoFrameMetadata;
using VideoFrameMetadataPtr = mojo::StructPtr<VideoFrameMetadata>;

class VideoFrame;
using VideoFramePtr = mojo::StructPtr<VideoFrame>;

class EosVideoFrameData;
using EosVideoFrameDataPtr = mojo::InlinedStructPtr<EosVideoFrameData>;

class SharedBufferVideoFrameData;
using SharedBufferVideoFrameDataPtr = mojo::StructPtr<SharedBufferVideoFrameData>;

class GpuMemoryBufferVideoFrameData;
using GpuMemoryBufferVideoFrameDataPtr = mojo::StructPtr<GpuMemoryBufferVideoFrameData>;

class MailboxVideoFrameData;
using MailboxVideoFrameDataPtr = mojo::StructPtr<MailboxVideoFrameData>;

class PipelineStatistics;
using PipelineStatisticsPtr = mojo::StructPtr<PipelineStatistics>;

class PredictionFeatures;
using PredictionFeaturesPtr = mojo::StructPtr<PredictionFeatures>;

class PredictionTargets;
using PredictionTargetsPtr = mojo::InlinedStructPtr<PredictionTargets>;

class AudioPipelineInfo;
using AudioPipelineInfoPtr = mojo::InlinedStructPtr<AudioPipelineInfo>;

class VideoPipelineInfo;
using VideoPipelineInfoPtr = mojo::InlinedStructPtr<VideoPipelineInfo>;

class StatusData;
using StatusDataPtr = mojo::StructPtr<StatusData>;

class EncoderStatus;
using EncoderStatusPtr = mojo::StructPtr<EncoderStatus>;

class DecoderStatus;
using DecoderStatusPtr = mojo::StructPtr<DecoderStatus>;

class PipelineStatus;
using PipelineStatusPtr = mojo::StructPtr<PipelineStatus>;

class VideoFrameData;

using VideoFrameDataPtr = mojo::StructPtr<VideoFrameData>;




}  // namespace blink
}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_MEDIA_TYPES_MOJOM_BLINK_FORWARD_H_