// media/mojo/mojom/renderer_extensions.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_RENDERER_EXTENSIONS_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_RENDERER_EXTENSIONS_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {

class ValidationContext;
class  MediaPlayerRendererClientExtension_OnVideoSizeChange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> size;

 private:
  friend class mojo::internal::MessageFragment<MediaPlayerRendererClientExtension_OnVideoSizeChange_Params_Data>;

  MediaPlayerRendererClientExtension_OnVideoSizeChange_Params_Data();
  ~MediaPlayerRendererClientExtension_OnVideoSizeChange_Params_Data() = delete;
};
static_assert(sizeof(MediaPlayerRendererClientExtension_OnVideoSizeChange_Params_Data) == 16,
              "Bad sizeof(MediaPlayerRendererClientExtension_OnVideoSizeChange_Params_Data)");
class  MediaPlayerRendererClientExtension_OnDurationChange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> duration;

 private:
  friend class mojo::internal::MessageFragment<MediaPlayerRendererClientExtension_OnDurationChange_Params_Data>;

  MediaPlayerRendererClientExtension_OnDurationChange_Params_Data();
  ~MediaPlayerRendererClientExtension_OnDurationChange_Params_Data() = delete;
};
static_assert(sizeof(MediaPlayerRendererClientExtension_OnDurationChange_Params_Data) == 16,
              "Bad sizeof(MediaPlayerRendererClientExtension_OnDurationChange_Params_Data)");
class  MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params_Data>;

  MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params_Data();
  ~MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params_Data() = delete;
};
static_assert(sizeof(MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params_Data) == 8,
              "Bad sizeof(MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params_Data)");
class  MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> request_token;

 private:
  friend class mojo::internal::MessageFragment<MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams_Data>;

  MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams_Data();
  ~MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams_Data) == 16,
              "Bad sizeof(MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams_Data)");
class  FlingingRendererClientExtension_OnRemotePlayStateChange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t state;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FlingingRendererClientExtension_OnRemotePlayStateChange_Params_Data>;

  FlingingRendererClientExtension_OnRemotePlayStateChange_Params_Data();
  ~FlingingRendererClientExtension_OnRemotePlayStateChange_Params_Data() = delete;
};
static_assert(sizeof(FlingingRendererClientExtension_OnRemotePlayStateChange_Params_Data) == 16,
              "Bad sizeof(FlingingRendererClientExtension_OnRemotePlayStateChange_Params_Data)");
class  MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data observer;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params_Data>;

  MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params_Data();
  ~MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params_Data() = delete;
};
static_assert(sizeof(MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params_Data) == 16,
              "Bad sizeof(MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params_Data)");

}  // namespace internal


class MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsDataView {
 public:
  MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsDataView() = default;

  MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsDataView(
      internal::MediaPlayerRendererClientExtension_OnVideoSizeChange_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSize(UserType* output) {
    
    auto* pointer = data_->size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
 private:
  internal::MediaPlayerRendererClientExtension_OnVideoSizeChange_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class MediaPlayerRendererClientExtension_OnDurationChange_ParamsDataView {
 public:
  MediaPlayerRendererClientExtension_OnDurationChange_ParamsDataView() = default;

  MediaPlayerRendererClientExtension_OnDurationChange_ParamsDataView(
      internal::MediaPlayerRendererClientExtension_OnDurationChange_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDuration(UserType* output) {
    
    auto* pointer = data_->duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::MediaPlayerRendererClientExtension_OnDurationChange_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsDataView {
 public:
  MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsDataView() = default;

  MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsDataView(
      internal::MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params_Data* data_ = nullptr;
};



class MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsDataView {
 public:
  MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsDataView() = default;

  MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsDataView(
      internal::MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequestToken(UserType* output) {
    
    auto* pointer = data_->request_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsDataView {
 public:
  FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsDataView() = default;

  FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsDataView(
      internal::FlingingRendererClientExtension_OnRemotePlayStateChange_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::media::mojom::MediaStatusState>(
        data_value, output);
  }
  ::media::mojom::MediaStatusState state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media::mojom::MediaStatusState>(data_->state));
  }
 private:
  internal::FlingingRendererClientExtension_OnRemotePlayStateChange_Params_Data* data_ = nullptr;
};



class MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsDataView {
 public:
  MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsDataView() = default;

  MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsDataView(
      internal::MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::MediaFoundationRendererObserverInterfaceBase>>(
            &data_->observer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsDataView::GetSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}


inline void MediaPlayerRendererClientExtension_OnDurationChange_ParamsDataView::GetDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}




inline void MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsDataView::GetRequestTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->request_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_MOJO_MOJOM_RENDERER_EXTENSIONS_MOJOM_PARAMS_DATA_H_