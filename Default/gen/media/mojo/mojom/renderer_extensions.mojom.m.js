// media/mojo/mojom/renderer_extensions.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../mojo/public/js/bindings.js';

import {
  TimeDelta as mojoBase_mojom_TimeDelta,
  TimeDeltaSpec as mojoBase_mojom_TimeDeltaSpec
} from '../../../mojo/public/mojom/base/time.mojom.m.js';

import {
  UnguessableToken as mojoBase_mojom_UnguessableToken,
  UnguessableTokenSpec as mojoBase_mojom_UnguessableTokenSpec
} from '../../../mojo/public/mojom/base/unguessable_token.mojom.m.js';

import {
  Size as gfx_mojom_Size,
  SizeSpec as gfx_mojom_SizeSpec
} from '../../../ui/gfx/geometry/mojom/geometry.mojom.m.js';

import {
  MediaStatusState as media_mojom_MediaStatusState,
  MediaStatusStateSpec as media_mojom_MediaStatusStateSpec
} from './media_types.mojom.m.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const MediaFoundationRenderingModeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const MediaFoundationRenderingMode = {
  
  DirectComposition: 0,
  FrameServer: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MediaPlayerRendererClientExtensionPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.MediaPlayerRendererClientExtension', scope);
  }
}

/** @interface */
export class MediaPlayerRendererClientExtensionInterface {
  
  /**
   * @param { !gfx_mojom_Size } size
   */

  onVideoSizeChange(size) {}
  
  /**
   * @param { !mojoBase_mojom_TimeDelta } duration
   */

  onDurationChange(duration) {}
}

/**
 * @implements { MediaPlayerRendererClientExtensionInterface }
 */
export class MediaPlayerRendererClientExtensionRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MediaPlayerRendererClientExtensionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MediaPlayerRendererClientExtensionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MediaPlayerRendererClientExtensionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !gfx_mojom_Size } size
   */

  onVideoSizeChange(
      size) {
    this.proxy.sendMessage(
        0,
        MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsSpec.$,
        null,
        [
          size
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_TimeDelta } duration
   */

  onDurationChange(
      duration) {
    this.proxy.sendMessage(
        1,
        MediaPlayerRendererClientExtension_OnDurationChange_ParamsSpec.$,
        null,
        [
          duration
        ]);
  }
}

/**
 * An object which receives request messages for the MediaPlayerRendererClientExtension
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MediaPlayerRendererClientExtensionReceiver {
  /**
   * @param {!MediaPlayerRendererClientExtensionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MediaPlayerRendererClientExtensionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MediaPlayerRendererClientExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaPlayerRendererClientExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsSpec.$,
        null,
        impl.onVideoSizeChange.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        MediaPlayerRendererClientExtension_OnDurationChange_ParamsSpec.$,
        null,
        impl.onDurationChange.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MediaPlayerRendererClientExtension {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaPlayerRendererClientExtension";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!MediaPlayerRendererClientExtensionRemote}
   */
  static getRemote() {
    let remote = new MediaPlayerRendererClientExtensionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the MediaPlayerRendererClientExtension
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MediaPlayerRendererClientExtensionCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MediaPlayerRendererClientExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaPlayerRendererClientExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onVideoSizeChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsSpec.$,
        null,
        this.onVideoSizeChange.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onDurationChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        MediaPlayerRendererClientExtension_OnDurationChange_ParamsSpec.$,
        null,
        this.onDurationChange.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MediaPlayerRendererExtensionPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.MediaPlayerRendererExtension', scope);
  }
}

/** @interface */
export class MediaPlayerRendererExtensionInterface {
  
  /**
   * @return {!Promise<{
        requestToken: !mojoBase_mojom_UnguessableToken,
   *  }>}
   */

  initiateScopedSurfaceRequest() {}
}

/**
 * @implements { MediaPlayerRendererExtensionInterface }
 */
export class MediaPlayerRendererExtensionRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MediaPlayerRendererExtensionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MediaPlayerRendererExtensionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MediaPlayerRendererExtensionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        requestToken: !mojoBase_mojom_UnguessableToken,
   *  }>}
   */

  initiateScopedSurfaceRequest() {
    return this.proxy.sendMessage(
        0,
        MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsSpec.$,
        MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsSpec.$,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the MediaPlayerRendererExtension
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MediaPlayerRendererExtensionReceiver {
  /**
   * @param {!MediaPlayerRendererExtensionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MediaPlayerRendererExtensionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MediaPlayerRendererExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaPlayerRendererExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsSpec.$,
        MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsSpec.$,
        impl.initiateScopedSurfaceRequest.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MediaPlayerRendererExtension {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaPlayerRendererExtension";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!MediaPlayerRendererExtensionRemote}
   */
  static getRemote() {
    let remote = new MediaPlayerRendererExtensionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the MediaPlayerRendererExtension
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MediaPlayerRendererExtensionCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MediaPlayerRendererExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaPlayerRendererExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.initiateScopedSurfaceRequest =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsSpec.$,
        MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsSpec.$,
        this.initiateScopedSurfaceRequest.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class FlingingRendererClientExtensionPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.FlingingRendererClientExtension', scope);
  }
}

/** @interface */
export class FlingingRendererClientExtensionInterface {
  
  /**
   * @param { !media_mojom_MediaStatusState } state
   */

  onRemotePlayStateChange(state) {}
}

/**
 * @implements { FlingingRendererClientExtensionInterface }
 */
export class FlingingRendererClientExtensionRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!FlingingRendererClientExtensionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          FlingingRendererClientExtensionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!FlingingRendererClientExtensionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media_mojom_MediaStatusState } state
   */

  onRemotePlayStateChange(
      state) {
    this.proxy.sendMessage(
        0,
        FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsSpec.$,
        null,
        [
          state
        ]);
  }
}

/**
 * An object which receives request messages for the FlingingRendererClientExtension
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class FlingingRendererClientExtensionReceiver {
  /**
   * @param {!FlingingRendererClientExtensionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!FlingingRendererClientExtensionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        FlingingRendererClientExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!FlingingRendererClientExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsSpec.$,
        null,
        impl.onRemotePlayStateChange.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class FlingingRendererClientExtension {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.FlingingRendererClientExtension";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!FlingingRendererClientExtensionRemote}
   */
  static getRemote() {
    let remote = new FlingingRendererClientExtensionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the FlingingRendererClientExtension
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class FlingingRendererClientExtensionCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      FlingingRendererClientExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!FlingingRendererClientExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onRemotePlayStateChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsSpec.$,
        null,
        this.onRemotePlayStateChange.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MediaFoundationRendererObserverPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.MediaFoundationRendererObserver', scope);
  }
}

/** @interface */
export class MediaFoundationRendererObserverInterface {
}

/**
 * @implements { MediaFoundationRendererObserverInterface }
 */
export class MediaFoundationRendererObserverRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MediaFoundationRendererObserverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MediaFoundationRendererObserverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MediaFoundationRendererObserverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }
}

/**
 * An object which receives request messages for the MediaFoundationRendererObserver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MediaFoundationRendererObserverReceiver {
  /**
   * @param {!MediaFoundationRendererObserverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MediaFoundationRendererObserverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MediaFoundationRendererObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaFoundationRendererObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MediaFoundationRendererObserver {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaFoundationRendererObserver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!MediaFoundationRendererObserverRemote}
   */
  static getRemote() {
    let remote = new MediaFoundationRendererObserverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the MediaFoundationRendererObserver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MediaFoundationRendererObserverCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MediaFoundationRendererObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaFoundationRendererObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MediaFoundationRendererNotifierPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.MediaFoundationRendererNotifier', scope);
  }
}

/** @interface */
export class MediaFoundationRendererNotifierInterface {
  
  /**
   * @param { !MediaFoundationRendererObserverPendingReceiver } observer
   */

  mediaFoundationRendererCreated(observer) {}
}

/**
 * @implements { MediaFoundationRendererNotifierInterface }
 */
export class MediaFoundationRendererNotifierRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MediaFoundationRendererNotifierPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MediaFoundationRendererNotifierPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MediaFoundationRendererNotifierPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !MediaFoundationRendererObserverPendingReceiver } observer
   */

  mediaFoundationRendererCreated(
      observer) {
    this.proxy.sendMessage(
        0,
        MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsSpec.$,
        null,
        [
          observer
        ]);
  }
}

/**
 * An object which receives request messages for the MediaFoundationRendererNotifier
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MediaFoundationRendererNotifierReceiver {
  /**
   * @param {!MediaFoundationRendererNotifierInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MediaFoundationRendererNotifierRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MediaFoundationRendererNotifierRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaFoundationRendererNotifierRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsSpec.$,
        null,
        impl.mediaFoundationRendererCreated.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MediaFoundationRendererNotifier {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaFoundationRendererNotifier";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!MediaFoundationRendererNotifierRemote}
   */
  static getRemote() {
    let remote = new MediaFoundationRendererNotifierRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the MediaFoundationRendererNotifier
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MediaFoundationRendererNotifierCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MediaFoundationRendererNotifierRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaFoundationRendererNotifierRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.mediaFoundationRendererCreated =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsSpec.$,
        null,
        this.mediaFoundationRendererCreated.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaPlayerRendererClientExtension_OnDurationChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsSpec.$,
    'MediaPlayerRendererClientExtension_OnVideoSizeChange_Params',
    [
      mojo.internal.StructField(
        'size', 0,
        0,
        gfx_mojom_SizeSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaPlayerRendererClientExtension_OnVideoSizeChange_Params {
  constructor() {
    /** @type { !gfx_mojom_Size } */
    this.size;
  }
}



mojo.internal.Struct(
    MediaPlayerRendererClientExtension_OnDurationChange_ParamsSpec.$,
    'MediaPlayerRendererClientExtension_OnDurationChange_Params',
    [
      mojo.internal.StructField(
        'duration', 0,
        0,
        mojoBase_mojom_TimeDeltaSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaPlayerRendererClientExtension_OnDurationChange_Params {
  constructor() {
    /** @type { !mojoBase_mojom_TimeDelta } */
    this.duration;
  }
}



mojo.internal.Struct(
    MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsSpec.$,
    'MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsSpec.$,
    'MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams',
    [
      mojo.internal.StructField(
        'requestToken', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.requestToken;
  }
}



mojo.internal.Struct(
    FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsSpec.$,
    'FlingingRendererClientExtension_OnRemotePlayStateChange_Params',
    [
      mojo.internal.StructField(
        'state', 0,
        0,
        media_mojom_MediaStatusStateSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class FlingingRendererClientExtension_OnRemotePlayStateChange_Params {
  constructor() {
    /** @type { !media_mojom_MediaStatusState } */
    this.state;
  }
}



mojo.internal.Struct(
    MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsSpec.$,
    'MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params',
    [
      mojo.internal.StructField(
        'observer', 0,
        0,
        mojo.internal.InterfaceRequest(MediaFoundationRendererObserverPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params {
  constructor() {
    /** @type { !MediaFoundationRendererObserverPendingReceiver } */
    this.observer;
  }
}

