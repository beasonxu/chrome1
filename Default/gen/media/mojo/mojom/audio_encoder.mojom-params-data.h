// media/mojo/mojom/audio_encoder.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_AUDIO_ENCODER_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_AUDIO_ENCODER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {

class ValidationContext;
class  AudioEncoder_Initialize_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data client;
  mojo::internal::Pointer<internal::AudioEncoderConfig_Data> config;

 private:
  friend class mojo::internal::MessageFragment<AudioEncoder_Initialize_Params_Data>;

  AudioEncoder_Initialize_Params_Data();
  ~AudioEncoder_Initialize_Params_Data() = delete;
};
static_assert(sizeof(AudioEncoder_Initialize_Params_Data) == 24,
              "Bad sizeof(AudioEncoder_Initialize_Params_Data)");
class  AudioEncoder_Initialize_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::EncoderStatus_Data> status;

 private:
  friend class mojo::internal::MessageFragment<AudioEncoder_Initialize_ResponseParams_Data>;

  AudioEncoder_Initialize_ResponseParams_Data();
  ~AudioEncoder_Initialize_ResponseParams_Data() = delete;
};
static_assert(sizeof(AudioEncoder_Initialize_ResponseParams_Data) == 16,
              "Bad sizeof(AudioEncoder_Initialize_ResponseParams_Data)");
class  AudioEncoder_Encode_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::AudioBuffer_Data> buffer;

 private:
  friend class mojo::internal::MessageFragment<AudioEncoder_Encode_Params_Data>;

  AudioEncoder_Encode_Params_Data();
  ~AudioEncoder_Encode_Params_Data() = delete;
};
static_assert(sizeof(AudioEncoder_Encode_Params_Data) == 16,
              "Bad sizeof(AudioEncoder_Encode_Params_Data)");
class  AudioEncoder_Encode_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::EncoderStatus_Data> status;

 private:
  friend class mojo::internal::MessageFragment<AudioEncoder_Encode_ResponseParams_Data>;

  AudioEncoder_Encode_ResponseParams_Data();
  ~AudioEncoder_Encode_ResponseParams_Data() = delete;
};
static_assert(sizeof(AudioEncoder_Encode_ResponseParams_Data) == 16,
              "Bad sizeof(AudioEncoder_Encode_ResponseParams_Data)");
class  AudioEncoder_Flush_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<AudioEncoder_Flush_Params_Data>;

  AudioEncoder_Flush_Params_Data();
  ~AudioEncoder_Flush_Params_Data() = delete;
};
static_assert(sizeof(AudioEncoder_Flush_Params_Data) == 8,
              "Bad sizeof(AudioEncoder_Flush_Params_Data)");
class  AudioEncoder_Flush_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::EncoderStatus_Data> status;

 private:
  friend class mojo::internal::MessageFragment<AudioEncoder_Flush_ResponseParams_Data>;

  AudioEncoder_Flush_ResponseParams_Data();
  ~AudioEncoder_Flush_ResponseParams_Data() = delete;
};
static_assert(sizeof(AudioEncoder_Flush_ResponseParams_Data) == 16,
              "Bad sizeof(AudioEncoder_Flush_ResponseParams_Data)");
class  AudioEncoderClient_OnEncodedBufferReady_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::EncodedAudioBuffer_Data> buffer;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> description;

 private:
  friend class mojo::internal::MessageFragment<AudioEncoderClient_OnEncodedBufferReady_Params_Data>;

  AudioEncoderClient_OnEncodedBufferReady_Params_Data();
  ~AudioEncoderClient_OnEncodedBufferReady_Params_Data() = delete;
};
static_assert(sizeof(AudioEncoderClient_OnEncodedBufferReady_Params_Data) == 24,
              "Bad sizeof(AudioEncoderClient_OnEncodedBufferReady_Params_Data)");

}  // namespace internal


class AudioEncoder_Initialize_ParamsDataView {
 public:
  AudioEncoder_Initialize_ParamsDataView() = default;

  AudioEncoder_Initialize_ParamsDataView(
      internal::AudioEncoder_Initialize_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::media::mojom::AudioEncoderClientAssociatedPtrInfoDataView>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetConfigDataView(
      AudioEncoderConfigDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConfig(UserType* output) {
    
    auto* pointer = data_->config.Get();
    return mojo::internal::Deserialize<::media::mojom::AudioEncoderConfigDataView>(
        pointer, output, message_);
  }
 private:
  internal::AudioEncoder_Initialize_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioEncoder_Initialize_ResponseParamsDataView {
 public:
  AudioEncoder_Initialize_ResponseParamsDataView() = default;

  AudioEncoder_Initialize_ResponseParamsDataView(
      internal::AudioEncoder_Initialize_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStatusDataView(
      ::media::mojom::EncoderStatusDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) {
    
    auto* pointer = data_->status.Get();
    return mojo::internal::Deserialize<::media::mojom::EncoderStatusDataView>(
        pointer, output, message_);
  }
 private:
  internal::AudioEncoder_Initialize_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioEncoder_Encode_ParamsDataView {
 public:
  AudioEncoder_Encode_ParamsDataView() = default;

  AudioEncoder_Encode_ParamsDataView(
      internal::AudioEncoder_Encode_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBufferDataView(
      ::media::mojom::AudioBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBuffer(UserType* output) {
    
    auto* pointer = data_->buffer.Get();
    return mojo::internal::Deserialize<::media::mojom::AudioBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::AudioEncoder_Encode_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioEncoder_Encode_ResponseParamsDataView {
 public:
  AudioEncoder_Encode_ResponseParamsDataView() = default;

  AudioEncoder_Encode_ResponseParamsDataView(
      internal::AudioEncoder_Encode_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStatusDataView(
      ::media::mojom::EncoderStatusDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) {
    
    auto* pointer = data_->status.Get();
    return mojo::internal::Deserialize<::media::mojom::EncoderStatusDataView>(
        pointer, output, message_);
  }
 private:
  internal::AudioEncoder_Encode_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioEncoder_Flush_ParamsDataView {
 public:
  AudioEncoder_Flush_ParamsDataView() = default;

  AudioEncoder_Flush_ParamsDataView(
      internal::AudioEncoder_Flush_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AudioEncoder_Flush_Params_Data* data_ = nullptr;
};



class AudioEncoder_Flush_ResponseParamsDataView {
 public:
  AudioEncoder_Flush_ResponseParamsDataView() = default;

  AudioEncoder_Flush_ResponseParamsDataView(
      internal::AudioEncoder_Flush_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStatusDataView(
      ::media::mojom::EncoderStatusDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) {
    
    auto* pointer = data_->status.Get();
    return mojo::internal::Deserialize<::media::mojom::EncoderStatusDataView>(
        pointer, output, message_);
  }
 private:
  internal::AudioEncoder_Flush_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioEncoderClient_OnEncodedBufferReady_ParamsDataView {
 public:
  AudioEncoderClient_OnEncodedBufferReady_ParamsDataView() = default;

  AudioEncoderClient_OnEncodedBufferReady_ParamsDataView(
      internal::AudioEncoderClient_OnEncodedBufferReady_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBufferDataView(
      EncodedAudioBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBuffer(UserType* output) {
    
    auto* pointer = data_->buffer.Get();
    return mojo::internal::Deserialize<::media::mojom::EncodedAudioBufferDataView>(
        pointer, output, message_);
  }
  inline void GetDescriptionDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDescription(UserType* output) {
    
    auto* pointer = data_->description.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
 private:
  internal::AudioEncoderClient_OnEncodedBufferReady_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void AudioEncoder_Initialize_ParamsDataView::GetConfigDataView(
    AudioEncoderConfigDataView* output) {
  auto pointer = data_->config.Get();
  *output = AudioEncoderConfigDataView(pointer, message_);
}


inline void AudioEncoder_Initialize_ResponseParamsDataView::GetStatusDataView(
    ::media::mojom::EncoderStatusDataView* output) {
  auto pointer = data_->status.Get();
  *output = ::media::mojom::EncoderStatusDataView(pointer, message_);
}


inline void AudioEncoder_Encode_ParamsDataView::GetBufferDataView(
    ::media::mojom::AudioBufferDataView* output) {
  auto pointer = data_->buffer.Get();
  *output = ::media::mojom::AudioBufferDataView(pointer, message_);
}


inline void AudioEncoder_Encode_ResponseParamsDataView::GetStatusDataView(
    ::media::mojom::EncoderStatusDataView* output) {
  auto pointer = data_->status.Get();
  *output = ::media::mojom::EncoderStatusDataView(pointer, message_);
}




inline void AudioEncoder_Flush_ResponseParamsDataView::GetStatusDataView(
    ::media::mojom::EncoderStatusDataView* output) {
  auto pointer = data_->status.Get();
  *output = ::media::mojom::EncoderStatusDataView(pointer, message_);
}


inline void AudioEncoderClient_OnEncodedBufferReady_ParamsDataView::GetBufferDataView(
    EncodedAudioBufferDataView* output) {
  auto pointer = data_->buffer.Get();
  *output = EncodedAudioBufferDataView(pointer, message_);
}
inline void AudioEncoderClient_OnEncodedBufferReady_ParamsDataView::GetDescriptionDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->description.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}

}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_MOJO_MOJOM_AUDIO_ENCODER_MOJOM_PARAMS_DATA_H_