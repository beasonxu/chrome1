// media/mojo/mojom/android_overlay.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_ANDROID_OVERLAY_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_ANDROID_OVERLAY_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {

class ValidationContext;
class  AndroidOverlayProvider_CreateOverlay_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data overlay;
  mojo::internal::Interface_Data client;
  uint8_t pad1_[4];
  mojo::internal::Pointer<internal::AndroidOverlayConfig_Data> config;

 private:
  friend class mojo::internal::MessageFragment<AndroidOverlayProvider_CreateOverlay_Params_Data>;

  AndroidOverlayProvider_CreateOverlay_Params_Data();
  ~AndroidOverlayProvider_CreateOverlay_Params_Data() = delete;
};
static_assert(sizeof(AndroidOverlayProvider_CreateOverlay_Params_Data) == 32,
              "Bad sizeof(AndroidOverlayProvider_CreateOverlay_Params_Data)");
class  AndroidOverlay_ScheduleLayout_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect;

 private:
  friend class mojo::internal::MessageFragment<AndroidOverlay_ScheduleLayout_Params_Data>;

  AndroidOverlay_ScheduleLayout_Params_Data();
  ~AndroidOverlay_ScheduleLayout_Params_Data() = delete;
};
static_assert(sizeof(AndroidOverlay_ScheduleLayout_Params_Data) == 16,
              "Bad sizeof(AndroidOverlay_ScheduleLayout_Params_Data)");
class  AndroidOverlayClient_OnSurfaceReady_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t surface_key;

 private:
  friend class mojo::internal::MessageFragment<AndroidOverlayClient_OnSurfaceReady_Params_Data>;

  AndroidOverlayClient_OnSurfaceReady_Params_Data();
  ~AndroidOverlayClient_OnSurfaceReady_Params_Data() = delete;
};
static_assert(sizeof(AndroidOverlayClient_OnSurfaceReady_Params_Data) == 16,
              "Bad sizeof(AndroidOverlayClient_OnSurfaceReady_Params_Data)");
class  AndroidOverlayClient_OnDestroyed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<AndroidOverlayClient_OnDestroyed_Params_Data>;

  AndroidOverlayClient_OnDestroyed_Params_Data();
  ~AndroidOverlayClient_OnDestroyed_Params_Data() = delete;
};
static_assert(sizeof(AndroidOverlayClient_OnDestroyed_Params_Data) == 8,
              "Bad sizeof(AndroidOverlayClient_OnDestroyed_Params_Data)");
class  AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data>;

  AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data();
  ~AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data() = delete;
};
static_assert(sizeof(AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data) == 8,
              "Bad sizeof(AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data)");
class  AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data>;

  AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data();
  ~AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data() = delete;
};
static_assert(sizeof(AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data) == 8,
              "Bad sizeof(AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data)");
class  AndroidOverlayClient_OnPowerEfficientState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_power_efficient : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<AndroidOverlayClient_OnPowerEfficientState_Params_Data>;

  AndroidOverlayClient_OnPowerEfficientState_Params_Data();
  ~AndroidOverlayClient_OnPowerEfficientState_Params_Data() = delete;
};
static_assert(sizeof(AndroidOverlayClient_OnPowerEfficientState_Params_Data) == 16,
              "Bad sizeof(AndroidOverlayClient_OnPowerEfficientState_Params_Data)");

}  // namespace internal


class AndroidOverlayProvider_CreateOverlay_ParamsDataView {
 public:
  AndroidOverlayProvider_CreateOverlay_ParamsDataView() = default;

  AndroidOverlayProvider_CreateOverlay_ParamsDataView(
      internal::AndroidOverlayProvider_CreateOverlay_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeOverlay() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::AndroidOverlayInterfaceBase>>(
            &data_->overlay, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::media::mojom::AndroidOverlayClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetConfigDataView(
      AndroidOverlayConfigDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConfig(UserType* output) {
    
    auto* pointer = data_->config.Get();
    return mojo::internal::Deserialize<::media::mojom::AndroidOverlayConfigDataView>(
        pointer, output, message_);
  }
 private:
  internal::AndroidOverlayProvider_CreateOverlay_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AndroidOverlay_ScheduleLayout_ParamsDataView {
 public:
  AndroidOverlay_ScheduleLayout_ParamsDataView() = default;

  AndroidOverlay_ScheduleLayout_ParamsDataView(
      internal::AndroidOverlay_ScheduleLayout_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRect(UserType* output) {
    
    auto* pointer = data_->rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::AndroidOverlay_ScheduleLayout_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AndroidOverlayClient_OnSurfaceReady_ParamsDataView {
 public:
  AndroidOverlayClient_OnSurfaceReady_ParamsDataView() = default;

  AndroidOverlayClient_OnSurfaceReady_ParamsDataView(
      internal::AndroidOverlayClient_OnSurfaceReady_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t surface_key() const {
    return data_->surface_key;
  }
 private:
  internal::AndroidOverlayClient_OnSurfaceReady_Params_Data* data_ = nullptr;
};



class AndroidOverlayClient_OnDestroyed_ParamsDataView {
 public:
  AndroidOverlayClient_OnDestroyed_ParamsDataView() = default;

  AndroidOverlayClient_OnDestroyed_ParamsDataView(
      internal::AndroidOverlayClient_OnDestroyed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AndroidOverlayClient_OnDestroyed_Params_Data* data_ = nullptr;
};



class AndroidOverlayClient_OnSynchronouslyDestroyed_ParamsDataView {
 public:
  AndroidOverlayClient_OnSynchronouslyDestroyed_ParamsDataView() = default;

  AndroidOverlayClient_OnSynchronouslyDestroyed_ParamsDataView(
      internal::AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AndroidOverlayClient_OnSynchronouslyDestroyed_Params_Data* data_ = nullptr;
};



class AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParamsDataView {
 public:
  AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParamsDataView() = default;

  AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParamsDataView(
      internal::AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams_Data* data_ = nullptr;
};



class AndroidOverlayClient_OnPowerEfficientState_ParamsDataView {
 public:
  AndroidOverlayClient_OnPowerEfficientState_ParamsDataView() = default;

  AndroidOverlayClient_OnPowerEfficientState_ParamsDataView(
      internal::AndroidOverlayClient_OnPowerEfficientState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_power_efficient() const {
    return data_->is_power_efficient;
  }
 private:
  internal::AndroidOverlayClient_OnPowerEfficientState_Params_Data* data_ = nullptr;
};


inline void AndroidOverlayProvider_CreateOverlay_ParamsDataView::GetConfigDataView(
    AndroidOverlayConfigDataView* output) {
  auto pointer = data_->config.Get();
  *output = AndroidOverlayConfigDataView(pointer, message_);
}


inline void AndroidOverlay_ScheduleLayout_ParamsDataView::GetRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}











}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_MOJO_MOJOM_ANDROID_OVERLAY_MOJOM_PARAMS_DATA_H_