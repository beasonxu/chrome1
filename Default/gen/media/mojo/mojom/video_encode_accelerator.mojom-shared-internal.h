// media/mojo/mojom/video_encode_accelerator.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_VIDEO_ENCODE_ACCELERATOR_MOJOM_SHARED_INTERNAL_H_
#define MEDIA_MOJO_MOJOM_VIDEO_ENCODE_ACCELERATOR_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "media/mojo/mojom/media_log.mojom-shared-internal.h"
#include "media/mojo/mojom/media_types.mojom-shared-internal.h"
#include "mojo/public/mojom/base/shared_memory.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "media/mojo/mojom/video_encoder_info.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace media {
namespace mojom {
namespace internal {
class VideoEncodeAcceleratorSupportedProfile_Data;
class VariableBitratePeak_Data;
class VideoBitrateAllocation_Data;
class SpatialLayer_Data;
class ConstantBitrate_Data;
class VariableBitrate_Data;
class VideoEncodeAcceleratorConfig_Data;
class H264Metadata_Data;
class Vp8Metadata_Data;
class Vp9Metadata_Data;
class Av1Metadata_Data;
class BitstreamBufferMetadata_Data;
class Bitrate_Data;
class CodecMetadata_Data;

struct VideoEncodeAcceleratorSupportedRateControlMode_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct VideoEncodeAcceleratorConfig_ContentType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct VideoEncodeAcceleratorConfig_InterLayerPredMode_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct VideoEncodeAcceleratorConfig_StorageType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct VideoEncodeAccelerator_Error_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)


class  Bitrate_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  Bitrate_Data() = default;
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~Bitrate_Data() = default;

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<Bitrate_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class Bitrate_Tag : uint32_t {

    
    kConstant,
    
    kVariable,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Pointer<internal::ConstantBitrate_Data> f_constant;
    mojo::internal::Pointer<internal::VariableBitrate_Data> f_variable;
    uint64_t unknown;
  };

  uint32_t size;
  Bitrate_Tag tag;
  Union_ data;
};
static_assert(sizeof(Bitrate_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(Bitrate_Data)");


class  CodecMetadata_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  CodecMetadata_Data() = default;
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~CodecMetadata_Data() = default;

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<CodecMetadata_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class CodecMetadata_Tag : uint32_t {

    
    kH264,
    
    kVp8,
    
    kVp9,
    
    kAv1,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Pointer<internal::H264Metadata_Data> f_h264;
    mojo::internal::Pointer<internal::Vp8Metadata_Data> f_vp8;
    mojo::internal::Pointer<internal::Vp9Metadata_Data> f_vp9;
    mojo::internal::Pointer<internal::Av1Metadata_Data> f_av1;
    uint64_t unknown;
  };

  uint32_t size;
  CodecMetadata_Tag tag;
  Union_ data;
};
static_assert(sizeof(CodecMetadata_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(CodecMetadata_Data)");
class  VideoEncodeAcceleratorSupportedProfile_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t profile;
  uint32_t max_framerate_numerator;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> min_resolution;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> max_resolution;
  uint32_t max_framerate_denominator;
  uint8_t pad4_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> rate_control_modes;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> scalability_modes;

 private:
  friend class mojo::internal::MessageFragment<VideoEncodeAcceleratorSupportedProfile_Data>;

  VideoEncodeAcceleratorSupportedProfile_Data();
  ~VideoEncodeAcceleratorSupportedProfile_Data() = delete;
};
static_assert(sizeof(VideoEncodeAcceleratorSupportedProfile_Data) == 56,
              "Bad sizeof(VideoEncodeAcceleratorSupportedProfile_Data)");
// Used by VideoEncodeAcceleratorSupportedProfile::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct VideoEncodeAcceleratorSupportedProfile_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  VideoEncodeAcceleratorSupportedProfile_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~VideoEncodeAcceleratorSupportedProfile_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<VideoEncodeAcceleratorSupportedProfile_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    VideoEncodeAcceleratorSupportedProfile_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  VariableBitratePeak_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t bps;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VariableBitratePeak_Data>;

  VariableBitratePeak_Data();
  ~VariableBitratePeak_Data() = delete;
};
static_assert(sizeof(VariableBitratePeak_Data) == 16,
              "Bad sizeof(VariableBitratePeak_Data)");
// Used by VariableBitratePeak::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct VariableBitratePeak_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  VariableBitratePeak_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~VariableBitratePeak_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<VariableBitratePeak_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    VariableBitratePeak_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  VideoBitrateAllocation_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint32_t>> bitrates;
  mojo::internal::Pointer<internal::VariableBitratePeak_Data> variable_bitrate_peak;

 private:
  friend class mojo::internal::MessageFragment<VideoBitrateAllocation_Data>;

  VideoBitrateAllocation_Data();
  ~VideoBitrateAllocation_Data() = delete;
};
static_assert(sizeof(VideoBitrateAllocation_Data) == 24,
              "Bad sizeof(VideoBitrateAllocation_Data)");
// Used by VideoBitrateAllocation::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct VideoBitrateAllocation_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  VideoBitrateAllocation_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~VideoBitrateAllocation_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<VideoBitrateAllocation_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    VideoBitrateAllocation_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SpatialLayer_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t width;
  int32_t height;
  uint32_t bitrate_bps;
  uint32_t framerate;
  uint8_t max_qp;
  uint8_t num_of_temporal_layers;
  uint8_t padfinal_[6];

 private:
  friend class mojo::internal::MessageFragment<SpatialLayer_Data>;

  SpatialLayer_Data();
  ~SpatialLayer_Data() = delete;
};
static_assert(sizeof(SpatialLayer_Data) == 32,
              "Bad sizeof(SpatialLayer_Data)");
// Used by SpatialLayer::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SpatialLayer_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SpatialLayer_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SpatialLayer_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SpatialLayer_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SpatialLayer_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ConstantBitrate_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t target_bps;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ConstantBitrate_Data>;

  ConstantBitrate_Data();
  ~ConstantBitrate_Data() = delete;
};
static_assert(sizeof(ConstantBitrate_Data) == 16,
              "Bad sizeof(ConstantBitrate_Data)");
// Used by ConstantBitrate::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ConstantBitrate_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ConstantBitrate_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ConstantBitrate_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<ConstantBitrate_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ConstantBitrate_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  VariableBitrate_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t target_bps;
  uint32_t peak_bps;

 private:
  friend class mojo::internal::MessageFragment<VariableBitrate_Data>;

  VariableBitrate_Data();
  ~VariableBitrate_Data() = delete;
};
static_assert(sizeof(VariableBitrate_Data) == 16,
              "Bad sizeof(VariableBitrate_Data)");
// Used by VariableBitrate::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct VariableBitrate_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  VariableBitrate_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~VariableBitrate_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<VariableBitrate_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    VariableBitrate_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  VideoEncodeAcceleratorConfig_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t input_format;
  int32_t output_profile;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> input_visible_size;
  internal::Bitrate_Data bitrate;
  uint32_t initial_framerate;
  uint8_t has_initial_framerate : 1;
  uint8_t has_gop_length : 1;
  uint8_t has_h264_output_level : 1;
  uint8_t is_constrained_h264 : 1;
  uint8_t has_storage_type : 1;
  uint8_t require_low_delay : 1;
  uint8_t h264_output_level;
  uint8_t pad11_[2];
  uint32_t gop_length;
  int32_t storage_type;
  int32_t content_type;
  int32_t inter_layer_pred;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::SpatialLayer_Data>>> spatial_layers;

 private:
  friend class mojo::internal::MessageFragment<VideoEncodeAcceleratorConfig_Data>;

  VideoEncodeAcceleratorConfig_Data();
  ~VideoEncodeAcceleratorConfig_Data() = delete;
};
static_assert(sizeof(VideoEncodeAcceleratorConfig_Data) == 72,
              "Bad sizeof(VideoEncodeAcceleratorConfig_Data)");
// Used by VideoEncodeAcceleratorConfig::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct VideoEncodeAcceleratorConfig_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  VideoEncodeAcceleratorConfig_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~VideoEncodeAcceleratorConfig_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<VideoEncodeAcceleratorConfig_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    VideoEncodeAcceleratorConfig_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  H264Metadata_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t temporal_idx;
  uint8_t layer_sync : 1;
  uint8_t padfinal_[6];

 private:
  friend class mojo::internal::MessageFragment<H264Metadata_Data>;

  H264Metadata_Data();
  ~H264Metadata_Data() = delete;
};
static_assert(sizeof(H264Metadata_Data) == 16,
              "Bad sizeof(H264Metadata_Data)");
// Used by H264Metadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct H264Metadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  H264Metadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~H264Metadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<H264Metadata_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    H264Metadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  Vp8Metadata_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t non_reference : 1;
  uint8_t layer_sync : 1;
  uint8_t temporal_idx;
  uint8_t padfinal_[6];

 private:
  friend class mojo::internal::MessageFragment<Vp8Metadata_Data>;

  Vp8Metadata_Data();
  ~Vp8Metadata_Data() = delete;
};
static_assert(sizeof(Vp8Metadata_Data) == 16,
              "Bad sizeof(Vp8Metadata_Data)");
// Used by Vp8Metadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct Vp8Metadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  Vp8Metadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~Vp8Metadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<Vp8Metadata_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    Vp8Metadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  Vp9Metadata_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t inter_pic_predicted : 1;
  uint8_t temporal_up_switch : 1;
  uint8_t referenced_by_upper_spatial_layers : 1;
  uint8_t reference_lower_spatial_layers : 1;
  uint8_t end_of_picture : 1;
  uint8_t temporal_idx;
  uint8_t spatial_idx;
  uint8_t pad6_[5];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::gfx::mojom::internal::Size_Data>>> spatial_layer_resolutions;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> p_diffs;

 private:
  friend class mojo::internal::MessageFragment<Vp9Metadata_Data>;

  Vp9Metadata_Data();
  ~Vp9Metadata_Data() = delete;
};
static_assert(sizeof(Vp9Metadata_Data) == 32,
              "Bad sizeof(Vp9Metadata_Data)");
// Used by Vp9Metadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct Vp9Metadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  Vp9Metadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~Vp9Metadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<Vp9Metadata_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    Vp9Metadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  Av1Metadata_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t inter_pic_predicted : 1;
  uint8_t switch_frame : 1;
  uint8_t end_of_picture : 1;
  uint8_t temporal_idx;
  uint8_t spatial_idx;
  uint8_t pad4_[5];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::gfx::mojom::internal::Size_Data>>> spatial_layer_resolutions;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> f_diffs;

 private:
  friend class mojo::internal::MessageFragment<Av1Metadata_Data>;

  Av1Metadata_Data();
  ~Av1Metadata_Data() = delete;
};
static_assert(sizeof(Av1Metadata_Data) == 32,
              "Bad sizeof(Av1Metadata_Data)");
// Used by Av1Metadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct Av1Metadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  Av1Metadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~Av1Metadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<Av1Metadata_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    Av1Metadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  BitstreamBufferMetadata_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t payload_size_bytes;
  uint8_t key_frame : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> timestamp;
  int32_t qp;
  uint8_t pad3_[4];
  internal::CodecMetadata_Data codec_metadata;

 private:
  friend class mojo::internal::MessageFragment<BitstreamBufferMetadata_Data>;

  BitstreamBufferMetadata_Data();
  ~BitstreamBufferMetadata_Data() = delete;
};
static_assert(sizeof(BitstreamBufferMetadata_Data) == 48,
              "Bad sizeof(BitstreamBufferMetadata_Data)");
// Used by BitstreamBufferMetadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BitstreamBufferMetadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BitstreamBufferMetadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BitstreamBufferMetadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<BitstreamBufferMetadata_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BitstreamBufferMetadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_VIDEO_ENCODE_ACCELERATOR_MOJOM_SHARED_INTERNAL_H_