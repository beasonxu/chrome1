// media/mojo/mojom/playback_events_recorder.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_PLAYBACK_EVENTS_RECORDER_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_PLAYBACK_EVENTS_RECORDER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {

class ValidationContext;
class  PlaybackEventsRecorder_OnPlaying_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PlaybackEventsRecorder_OnPlaying_Params_Data>;

  PlaybackEventsRecorder_OnPlaying_Params_Data();
  ~PlaybackEventsRecorder_OnPlaying_Params_Data() = delete;
};
static_assert(sizeof(PlaybackEventsRecorder_OnPlaying_Params_Data) == 8,
              "Bad sizeof(PlaybackEventsRecorder_OnPlaying_Params_Data)");
class  PlaybackEventsRecorder_OnPaused_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PlaybackEventsRecorder_OnPaused_Params_Data>;

  PlaybackEventsRecorder_OnPaused_Params_Data();
  ~PlaybackEventsRecorder_OnPaused_Params_Data() = delete;
};
static_assert(sizeof(PlaybackEventsRecorder_OnPaused_Params_Data) == 8,
              "Bad sizeof(PlaybackEventsRecorder_OnPaused_Params_Data)");
class  PlaybackEventsRecorder_OnSeeking_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PlaybackEventsRecorder_OnSeeking_Params_Data>;

  PlaybackEventsRecorder_OnSeeking_Params_Data();
  ~PlaybackEventsRecorder_OnSeeking_Params_Data() = delete;
};
static_assert(sizeof(PlaybackEventsRecorder_OnSeeking_Params_Data) == 8,
              "Bad sizeof(PlaybackEventsRecorder_OnSeeking_Params_Data)");
class  PlaybackEventsRecorder_OnEnded_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PlaybackEventsRecorder_OnEnded_Params_Data>;

  PlaybackEventsRecorder_OnEnded_Params_Data();
  ~PlaybackEventsRecorder_OnEnded_Params_Data() = delete;
};
static_assert(sizeof(PlaybackEventsRecorder_OnEnded_Params_Data) == 8,
              "Bad sizeof(PlaybackEventsRecorder_OnEnded_Params_Data)");
class  PlaybackEventsRecorder_OnError_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::PipelineStatus_Data> status;

 private:
  friend class mojo::internal::MessageFragment<PlaybackEventsRecorder_OnError_Params_Data>;

  PlaybackEventsRecorder_OnError_Params_Data();
  ~PlaybackEventsRecorder_OnError_Params_Data() = delete;
};
static_assert(sizeof(PlaybackEventsRecorder_OnError_Params_Data) == 16,
              "Bad sizeof(PlaybackEventsRecorder_OnError_Params_Data)");
class  PlaybackEventsRecorder_OnBuffering_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PlaybackEventsRecorder_OnBuffering_Params_Data>;

  PlaybackEventsRecorder_OnBuffering_Params_Data();
  ~PlaybackEventsRecorder_OnBuffering_Params_Data() = delete;
};
static_assert(sizeof(PlaybackEventsRecorder_OnBuffering_Params_Data) == 8,
              "Bad sizeof(PlaybackEventsRecorder_OnBuffering_Params_Data)");
class  PlaybackEventsRecorder_OnBufferingComplete_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PlaybackEventsRecorder_OnBufferingComplete_Params_Data>;

  PlaybackEventsRecorder_OnBufferingComplete_Params_Data();
  ~PlaybackEventsRecorder_OnBufferingComplete_Params_Data() = delete;
};
static_assert(sizeof(PlaybackEventsRecorder_OnBufferingComplete_Params_Data) == 8,
              "Bad sizeof(PlaybackEventsRecorder_OnBufferingComplete_Params_Data)");
class  PlaybackEventsRecorder_OnNaturalSizeChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> size;

 private:
  friend class mojo::internal::MessageFragment<PlaybackEventsRecorder_OnNaturalSizeChanged_Params_Data>;

  PlaybackEventsRecorder_OnNaturalSizeChanged_Params_Data();
  ~PlaybackEventsRecorder_OnNaturalSizeChanged_Params_Data() = delete;
};
static_assert(sizeof(PlaybackEventsRecorder_OnNaturalSizeChanged_Params_Data) == 16,
              "Bad sizeof(PlaybackEventsRecorder_OnNaturalSizeChanged_Params_Data)");
class  PlaybackEventsRecorder_OnPipelineStatistics_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::PipelineStatistics_Data> stats;

 private:
  friend class mojo::internal::MessageFragment<PlaybackEventsRecorder_OnPipelineStatistics_Params_Data>;

  PlaybackEventsRecorder_OnPipelineStatistics_Params_Data();
  ~PlaybackEventsRecorder_OnPipelineStatistics_Params_Data() = delete;
};
static_assert(sizeof(PlaybackEventsRecorder_OnPipelineStatistics_Params_Data) == 16,
              "Bad sizeof(PlaybackEventsRecorder_OnPipelineStatistics_Params_Data)");

}  // namespace internal


class PlaybackEventsRecorder_OnPlaying_ParamsDataView {
 public:
  PlaybackEventsRecorder_OnPlaying_ParamsDataView() = default;

  PlaybackEventsRecorder_OnPlaying_ParamsDataView(
      internal::PlaybackEventsRecorder_OnPlaying_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PlaybackEventsRecorder_OnPlaying_Params_Data* data_ = nullptr;
};



class PlaybackEventsRecorder_OnPaused_ParamsDataView {
 public:
  PlaybackEventsRecorder_OnPaused_ParamsDataView() = default;

  PlaybackEventsRecorder_OnPaused_ParamsDataView(
      internal::PlaybackEventsRecorder_OnPaused_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PlaybackEventsRecorder_OnPaused_Params_Data* data_ = nullptr;
};



class PlaybackEventsRecorder_OnSeeking_ParamsDataView {
 public:
  PlaybackEventsRecorder_OnSeeking_ParamsDataView() = default;

  PlaybackEventsRecorder_OnSeeking_ParamsDataView(
      internal::PlaybackEventsRecorder_OnSeeking_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PlaybackEventsRecorder_OnSeeking_Params_Data* data_ = nullptr;
};



class PlaybackEventsRecorder_OnEnded_ParamsDataView {
 public:
  PlaybackEventsRecorder_OnEnded_ParamsDataView() = default;

  PlaybackEventsRecorder_OnEnded_ParamsDataView(
      internal::PlaybackEventsRecorder_OnEnded_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PlaybackEventsRecorder_OnEnded_Params_Data* data_ = nullptr;
};



class PlaybackEventsRecorder_OnError_ParamsDataView {
 public:
  PlaybackEventsRecorder_OnError_ParamsDataView() = default;

  PlaybackEventsRecorder_OnError_ParamsDataView(
      internal::PlaybackEventsRecorder_OnError_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStatusDataView(
      ::media::mojom::PipelineStatusDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) {
    
    auto* pointer = data_->status.Get();
    return mojo::internal::Deserialize<::media::mojom::PipelineStatusDataView>(
        pointer, output, message_);
  }
 private:
  internal::PlaybackEventsRecorder_OnError_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PlaybackEventsRecorder_OnBuffering_ParamsDataView {
 public:
  PlaybackEventsRecorder_OnBuffering_ParamsDataView() = default;

  PlaybackEventsRecorder_OnBuffering_ParamsDataView(
      internal::PlaybackEventsRecorder_OnBuffering_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PlaybackEventsRecorder_OnBuffering_Params_Data* data_ = nullptr;
};



class PlaybackEventsRecorder_OnBufferingComplete_ParamsDataView {
 public:
  PlaybackEventsRecorder_OnBufferingComplete_ParamsDataView() = default;

  PlaybackEventsRecorder_OnBufferingComplete_ParamsDataView(
      internal::PlaybackEventsRecorder_OnBufferingComplete_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PlaybackEventsRecorder_OnBufferingComplete_Params_Data* data_ = nullptr;
};



class PlaybackEventsRecorder_OnNaturalSizeChanged_ParamsDataView {
 public:
  PlaybackEventsRecorder_OnNaturalSizeChanged_ParamsDataView() = default;

  PlaybackEventsRecorder_OnNaturalSizeChanged_ParamsDataView(
      internal::PlaybackEventsRecorder_OnNaturalSizeChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSize(UserType* output) {
    
    auto* pointer = data_->size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
 private:
  internal::PlaybackEventsRecorder_OnNaturalSizeChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PlaybackEventsRecorder_OnPipelineStatistics_ParamsDataView {
 public:
  PlaybackEventsRecorder_OnPipelineStatistics_ParamsDataView() = default;

  PlaybackEventsRecorder_OnPipelineStatistics_ParamsDataView(
      internal::PlaybackEventsRecorder_OnPipelineStatistics_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStatsDataView(
      ::media::mojom::PipelineStatisticsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStats(UserType* output) {
    
    auto* pointer = data_->stats.Get();
    return mojo::internal::Deserialize<::media::mojom::PipelineStatisticsDataView>(
        pointer, output, message_);
  }
 private:
  internal::PlaybackEventsRecorder_OnPipelineStatistics_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};










inline void PlaybackEventsRecorder_OnError_ParamsDataView::GetStatusDataView(
    ::media::mojom::PipelineStatusDataView* output) {
  auto pointer = data_->status.Get();
  *output = ::media::mojom::PipelineStatusDataView(pointer, message_);
}






inline void PlaybackEventsRecorder_OnNaturalSizeChanged_ParamsDataView::GetSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}


inline void PlaybackEventsRecorder_OnPipelineStatistics_ParamsDataView::GetStatsDataView(
    ::media::mojom::PipelineStatisticsDataView* output) {
  auto pointer = data_->stats.Get();
  *output = ::media::mojom::PipelineStatisticsDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_MOJO_MOJOM_PLAYBACK_EVENTS_RECORDER_MOJOM_PARAMS_DATA_H_