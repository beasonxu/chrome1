// media/mojo/mojom/media_drm_storage.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "media/mojo/mojom/media_drm_storage.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "media/mojo/mojom/media_drm_storage.mojom-params-data.h"
#include "media/mojo/mojom/media_drm_storage.mojom-shared-message-ids.h"

#include "media/mojo/mojom/media_drm_storage.mojom-blink-import-headers.h"
#include "media/mojo/mojom/media_drm_storage.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MEDIA_MOJO_MOJOM_MEDIA_DRM_STORAGE_MOJOM_BLINK_JUMBO_H_
#define MEDIA_MOJO_MOJOM_MEDIA_DRM_STORAGE_MOJOM_BLINK_JUMBO_H_
#endif



namespace media {
namespace mojom {
namespace blink {
SessionData::SessionData()
    : key_set_id(),
      mime_type(),
      key_type() {}

SessionData::SessionData(
    WTF::Vector<uint8_t> key_set_id_in,
    const WTF::String& mime_type_in,
    SessionData::KeyType key_type_in)
    : key_set_id(std::move(key_set_id_in)),
      mime_type(std::move(mime_type_in)),
      key_type(std::move(key_type_in)) {}

SessionData::~SessionData() = default;

void SessionData::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "key_set_id"), this->key_set_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::Vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "mime_type"), this->mime_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "key_type"), this->key_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type SessionData::KeyType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SessionData::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char MediaDrmStorage::Name_[] = "media.mojom.MediaDrmStorage";

MediaDrmStorage::IPCStableHashFunction MediaDrmStorage::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kMediaDrmStorage_Initialize_Name: {
      return &MediaDrmStorage::Initialize_Sym::IPCStableHash;
    }
    case internal::kMediaDrmStorage_OnProvisioned_Name: {
      return &MediaDrmStorage::OnProvisioned_Sym::IPCStableHash;
    }
    case internal::kMediaDrmStorage_SavePersistentSession_Name: {
      return &MediaDrmStorage::SavePersistentSession_Sym::IPCStableHash;
    }
    case internal::kMediaDrmStorage_LoadPersistentSession_Name: {
      return &MediaDrmStorage::LoadPersistentSession_Sym::IPCStableHash;
    }
    case internal::kMediaDrmStorage_RemovePersistentSession_Name: {
      return &MediaDrmStorage::RemovePersistentSession_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* MediaDrmStorage::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kMediaDrmStorage_Initialize_Name:
            return "Receive media::mojom::MediaDrmStorage::Initialize";
      case internal::kMediaDrmStorage_OnProvisioned_Name:
            return "Receive media::mojom::MediaDrmStorage::OnProvisioned";
      case internal::kMediaDrmStorage_SavePersistentSession_Name:
            return "Receive media::mojom::MediaDrmStorage::SavePersistentSession";
      case internal::kMediaDrmStorage_LoadPersistentSession_Name:
            return "Receive media::mojom::MediaDrmStorage::LoadPersistentSession";
      case internal::kMediaDrmStorage_RemovePersistentSession_Name:
            return "Receive media::mojom::MediaDrmStorage::RemovePersistentSession";
    }
  } else {
    switch (message.name()) {
      case internal::kMediaDrmStorage_Initialize_Name:
            return "Receive reply media::mojom::MediaDrmStorage::Initialize";
      case internal::kMediaDrmStorage_OnProvisioned_Name:
            return "Receive reply media::mojom::MediaDrmStorage::OnProvisioned";
      case internal::kMediaDrmStorage_SavePersistentSession_Name:
            return "Receive reply media::mojom::MediaDrmStorage::SavePersistentSession";
      case internal::kMediaDrmStorage_LoadPersistentSession_Name:
            return "Receive reply media::mojom::MediaDrmStorage::LoadPersistentSession";
      case internal::kMediaDrmStorage_RemovePersistentSession_Name:
            return "Receive reply media::mojom::MediaDrmStorage::RemovePersistentSession";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t MediaDrmStorage::Initialize_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::MediaDrmStorage::Initialize");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaDrmStorage::OnProvisioned_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::MediaDrmStorage::OnProvisioned");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaDrmStorage::SavePersistentSession_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::MediaDrmStorage::SavePersistentSession");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaDrmStorage::LoadPersistentSession_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::MediaDrmStorage::LoadPersistentSession");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaDrmStorage::RemovePersistentSession_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::MediaDrmStorage::RemovePersistentSession");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class MediaDrmStorage_Initialize_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaDrmStorage_Initialize_ForwardToCallback(
      MediaDrmStorage::InitializeCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaDrmStorage_Initialize_ForwardToCallback(const MediaDrmStorage_Initialize_ForwardToCallback&) = delete;
  MediaDrmStorage_Initialize_ForwardToCallback& operator=(const MediaDrmStorage_Initialize_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaDrmStorage::InitializeCallback callback_;
};

class MediaDrmStorage_OnProvisioned_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaDrmStorage_OnProvisioned_ForwardToCallback(
      MediaDrmStorage::OnProvisionedCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaDrmStorage_OnProvisioned_ForwardToCallback(const MediaDrmStorage_OnProvisioned_ForwardToCallback&) = delete;
  MediaDrmStorage_OnProvisioned_ForwardToCallback& operator=(const MediaDrmStorage_OnProvisioned_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaDrmStorage::OnProvisionedCallback callback_;
};

class MediaDrmStorage_SavePersistentSession_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaDrmStorage_SavePersistentSession_ForwardToCallback(
      MediaDrmStorage::SavePersistentSessionCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaDrmStorage_SavePersistentSession_ForwardToCallback(const MediaDrmStorage_SavePersistentSession_ForwardToCallback&) = delete;
  MediaDrmStorage_SavePersistentSession_ForwardToCallback& operator=(const MediaDrmStorage_SavePersistentSession_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaDrmStorage::SavePersistentSessionCallback callback_;
};

class MediaDrmStorage_LoadPersistentSession_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaDrmStorage_LoadPersistentSession_ForwardToCallback(
      MediaDrmStorage::LoadPersistentSessionCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaDrmStorage_LoadPersistentSession_ForwardToCallback(const MediaDrmStorage_LoadPersistentSession_ForwardToCallback&) = delete;
  MediaDrmStorage_LoadPersistentSession_ForwardToCallback& operator=(const MediaDrmStorage_LoadPersistentSession_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaDrmStorage::LoadPersistentSessionCallback callback_;
};

class MediaDrmStorage_RemovePersistentSession_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaDrmStorage_RemovePersistentSession_ForwardToCallback(
      MediaDrmStorage::RemovePersistentSessionCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaDrmStorage_RemovePersistentSession_ForwardToCallback(const MediaDrmStorage_RemovePersistentSession_ForwardToCallback&) = delete;
  MediaDrmStorage_RemovePersistentSession_ForwardToCallback& operator=(const MediaDrmStorage_RemovePersistentSession_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaDrmStorage::RemovePersistentSessionCallback callback_;
};

MediaDrmStorageProxy::MediaDrmStorageProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void MediaDrmStorageProxy::Initialize(
    InitializeCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send media::mojom::MediaDrmStorage::Initialize");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaDrmStorage_Initialize_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::MediaDrmStorage_Initialize_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaDrmStorage::Name_);
  message.set_method_name("Initialize");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaDrmStorage_Initialize_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void MediaDrmStorageProxy::OnProvisioned(
    OnProvisionedCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send media::mojom::MediaDrmStorage::OnProvisioned");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaDrmStorage_OnProvisioned_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::MediaDrmStorage_OnProvisioned_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaDrmStorage::Name_);
  message.set_method_name("OnProvisioned");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaDrmStorage_OnProvisioned_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void MediaDrmStorageProxy::SavePersistentSession(
    const WTF::String& in_session_id, SessionDataPtr in_session_data, SavePersistentSessionCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::MediaDrmStorage::SavePersistentSession", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("session_id"), in_session_id,
                        "<value of type const WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("session_data"), in_session_data,
                        "<value of type SessionDataPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaDrmStorage_SavePersistentSession_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::MediaDrmStorage_SavePersistentSession_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->session_id)::BaseType> session_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_session_id, session_id_fragment);
  params->session_id.Set(
      session_id_fragment.is_null() ? nullptr : session_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->session_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null session_id in MediaDrmStorage.SavePersistentSession request");
  mojo::internal::MessageFragment<
      typename decltype(params->session_data)::BaseType> session_data_fragment(
          params.message());
  mojo::internal::Serialize<::media::mojom::SessionDataDataView>(
      in_session_data, session_data_fragment);
  params->session_data.Set(
      session_data_fragment.is_null() ? nullptr : session_data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->session_data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null session_data in MediaDrmStorage.SavePersistentSession request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaDrmStorage::Name_);
  message.set_method_name("SavePersistentSession");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaDrmStorage_SavePersistentSession_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void MediaDrmStorageProxy::LoadPersistentSession(
    const WTF::String& in_session_id, LoadPersistentSessionCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::MediaDrmStorage::LoadPersistentSession", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("session_id"), in_session_id,
                        "<value of type const WTF::String&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaDrmStorage_LoadPersistentSession_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::MediaDrmStorage_LoadPersistentSession_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->session_id)::BaseType> session_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_session_id, session_id_fragment);
  params->session_id.Set(
      session_id_fragment.is_null() ? nullptr : session_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->session_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null session_id in MediaDrmStorage.LoadPersistentSession request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaDrmStorage::Name_);
  message.set_method_name("LoadPersistentSession");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaDrmStorage_LoadPersistentSession_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void MediaDrmStorageProxy::RemovePersistentSession(
    const WTF::String& in_session_id, RemovePersistentSessionCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::MediaDrmStorage::RemovePersistentSession", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("session_id"), in_session_id,
                        "<value of type const WTF::String&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaDrmStorage_RemovePersistentSession_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::MediaDrmStorage_RemovePersistentSession_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->session_id)::BaseType> session_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_session_id, session_id_fragment);
  params->session_id.Set(
      session_id_fragment.is_null() ? nullptr : session_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->session_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null session_id in MediaDrmStorage.RemovePersistentSession request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaDrmStorage::Name_);
  message.set_method_name("RemovePersistentSession");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaDrmStorage_RemovePersistentSession_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class MediaDrmStorage_Initialize_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaDrmStorage::InitializeCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaDrmStorage_Initialize_ProxyToResponder> proxy(
        new MediaDrmStorage_Initialize_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaDrmStorage_Initialize_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaDrmStorage_Initialize_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaDrmStorage_Initialize_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaDrmStorage::InitializeCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, const absl::optional<::base::UnguessableToken>& in_origin_id);
};

bool MediaDrmStorage_Initialize_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaDrmStorage_Initialize_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaDrmStorage_Initialize_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  absl::optional<::base::UnguessableToken> p_origin_id{};
  MediaDrmStorage_Initialize_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success && !input_data_view.ReadOriginId(&p_origin_id))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaDrmStorage::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_origin_id));
  return true;
}

void MediaDrmStorage_Initialize_ProxyToResponder::Run(
    bool in_success, const absl::optional<::base::UnguessableToken>& in_origin_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply media::mojom::MediaDrmStorage::Initialize", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("origin_id"), in_origin_id,
                        "<value of type const absl::optional<::base::UnguessableToken>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaDrmStorage_Initialize_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::MediaDrmStorage_Initialize_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->origin_id)::BaseType> origin_id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_origin_id, origin_id_fragment);
  params->origin_id.Set(
      origin_id_fragment.is_null() ? nullptr : origin_id_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaDrmStorage::Name_);
  message.set_method_name("Initialize");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class MediaDrmStorage_OnProvisioned_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaDrmStorage::OnProvisionedCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaDrmStorage_OnProvisioned_ProxyToResponder> proxy(
        new MediaDrmStorage_OnProvisioned_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaDrmStorage_OnProvisioned_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaDrmStorage_OnProvisioned_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaDrmStorage_OnProvisioned_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaDrmStorage::OnProvisionedCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool MediaDrmStorage_OnProvisioned_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaDrmStorage_OnProvisioned_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaDrmStorage_OnProvisioned_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  MediaDrmStorage_OnProvisioned_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaDrmStorage::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void MediaDrmStorage_OnProvisioned_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply media::mojom::MediaDrmStorage::OnProvisioned", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaDrmStorage_OnProvisioned_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::MediaDrmStorage_OnProvisioned_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaDrmStorage::Name_);
  message.set_method_name("OnProvisioned");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class MediaDrmStorage_SavePersistentSession_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaDrmStorage::SavePersistentSessionCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaDrmStorage_SavePersistentSession_ProxyToResponder> proxy(
        new MediaDrmStorage_SavePersistentSession_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaDrmStorage_SavePersistentSession_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaDrmStorage_SavePersistentSession_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaDrmStorage_SavePersistentSession_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaDrmStorage::SavePersistentSessionCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool MediaDrmStorage_SavePersistentSession_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaDrmStorage_SavePersistentSession_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaDrmStorage_SavePersistentSession_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  MediaDrmStorage_SavePersistentSession_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaDrmStorage::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void MediaDrmStorage_SavePersistentSession_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply media::mojom::MediaDrmStorage::SavePersistentSession", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaDrmStorage_SavePersistentSession_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::MediaDrmStorage_SavePersistentSession_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaDrmStorage::Name_);
  message.set_method_name("SavePersistentSession");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class MediaDrmStorage_LoadPersistentSession_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaDrmStorage::LoadPersistentSessionCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaDrmStorage_LoadPersistentSession_ProxyToResponder> proxy(
        new MediaDrmStorage_LoadPersistentSession_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaDrmStorage_LoadPersistentSession_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaDrmStorage_LoadPersistentSession_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaDrmStorage_LoadPersistentSession_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaDrmStorage::LoadPersistentSessionCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      SessionDataPtr in_session_data);
};

bool MediaDrmStorage_LoadPersistentSession_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaDrmStorage_LoadPersistentSession_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaDrmStorage_LoadPersistentSession_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  SessionDataPtr p_session_data{};
  MediaDrmStorage_LoadPersistentSession_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadSessionData(&p_session_data))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaDrmStorage::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_session_data));
  return true;
}

void MediaDrmStorage_LoadPersistentSession_ProxyToResponder::Run(
    SessionDataPtr in_session_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply media::mojom::MediaDrmStorage::LoadPersistentSession", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("session_data"), in_session_data,
                        "<value of type SessionDataPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaDrmStorage_LoadPersistentSession_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::MediaDrmStorage_LoadPersistentSession_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->session_data)::BaseType> session_data_fragment(
          params.message());
  mojo::internal::Serialize<::media::mojom::SessionDataDataView>(
      in_session_data, session_data_fragment);
  params->session_data.Set(
      session_data_fragment.is_null() ? nullptr : session_data_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaDrmStorage::Name_);
  message.set_method_name("LoadPersistentSession");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class MediaDrmStorage_RemovePersistentSession_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaDrmStorage::RemovePersistentSessionCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaDrmStorage_RemovePersistentSession_ProxyToResponder> proxy(
        new MediaDrmStorage_RemovePersistentSession_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaDrmStorage_RemovePersistentSession_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaDrmStorage_RemovePersistentSession_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaDrmStorage_RemovePersistentSession_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaDrmStorage::RemovePersistentSessionCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool MediaDrmStorage_RemovePersistentSession_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaDrmStorage_RemovePersistentSession_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaDrmStorage_RemovePersistentSession_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  MediaDrmStorage_RemovePersistentSession_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaDrmStorage::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void MediaDrmStorage_RemovePersistentSession_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply media::mojom::MediaDrmStorage::RemovePersistentSession", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaDrmStorage_RemovePersistentSession_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::MediaDrmStorage_RemovePersistentSession_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaDrmStorage::Name_);
  message.set_method_name("RemovePersistentSession");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool MediaDrmStorageStubDispatch::Accept(
    MediaDrmStorage* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kMediaDrmStorage_Initialize_Name: {
      break;
    }
    case internal::kMediaDrmStorage_OnProvisioned_Name: {
      break;
    }
    case internal::kMediaDrmStorage_SavePersistentSession_Name: {
      break;
    }
    case internal::kMediaDrmStorage_LoadPersistentSession_Name: {
      break;
    }
    case internal::kMediaDrmStorage_RemovePersistentSession_Name: {
      break;
    }
  }
  return false;
}

// static
bool MediaDrmStorageStubDispatch::AcceptWithResponder(
    MediaDrmStorage* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kMediaDrmStorage_Initialize_Name: {

      internal::MediaDrmStorage_Initialize_Params_Data* params =
          reinterpret_cast<
              internal::MediaDrmStorage_Initialize_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      MediaDrmStorage_Initialize_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaDrmStorage::Name_, 0, false);
        return false;
      }
      MediaDrmStorage::InitializeCallback callback =
          MediaDrmStorage_Initialize_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Initialize(std::move(callback));
      return true;
    }
    case internal::kMediaDrmStorage_OnProvisioned_Name: {

      internal::MediaDrmStorage_OnProvisioned_Params_Data* params =
          reinterpret_cast<
              internal::MediaDrmStorage_OnProvisioned_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      MediaDrmStorage_OnProvisioned_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaDrmStorage::Name_, 1, false);
        return false;
      }
      MediaDrmStorage::OnProvisionedCallback callback =
          MediaDrmStorage_OnProvisioned_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnProvisioned(std::move(callback));
      return true;
    }
    case internal::kMediaDrmStorage_SavePersistentSession_Name: {

      internal::MediaDrmStorage_SavePersistentSession_Params_Data* params =
          reinterpret_cast<
              internal::MediaDrmStorage_SavePersistentSession_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WTF::String p_session_id{};
      SessionDataPtr p_session_data{};
      MediaDrmStorage_SavePersistentSession_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadSessionId(&p_session_id))
        success = false;
      if (success && !input_data_view.ReadSessionData(&p_session_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaDrmStorage::Name_, 2, false);
        return false;
      }
      MediaDrmStorage::SavePersistentSessionCallback callback =
          MediaDrmStorage_SavePersistentSession_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SavePersistentSession(
std::move(p_session_id), 
std::move(p_session_data), std::move(callback));
      return true;
    }
    case internal::kMediaDrmStorage_LoadPersistentSession_Name: {

      internal::MediaDrmStorage_LoadPersistentSession_Params_Data* params =
          reinterpret_cast<
              internal::MediaDrmStorage_LoadPersistentSession_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WTF::String p_session_id{};
      MediaDrmStorage_LoadPersistentSession_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadSessionId(&p_session_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaDrmStorage::Name_, 3, false);
        return false;
      }
      MediaDrmStorage::LoadPersistentSessionCallback callback =
          MediaDrmStorage_LoadPersistentSession_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LoadPersistentSession(
std::move(p_session_id), std::move(callback));
      return true;
    }
    case internal::kMediaDrmStorage_RemovePersistentSession_Name: {

      internal::MediaDrmStorage_RemovePersistentSession_Params_Data* params =
          reinterpret_cast<
              internal::MediaDrmStorage_RemovePersistentSession_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WTF::String p_session_id{};
      MediaDrmStorage_RemovePersistentSession_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadSessionId(&p_session_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaDrmStorage::Name_, 4, false);
        return false;
      }
      MediaDrmStorage::RemovePersistentSessionCallback callback =
          MediaDrmStorage_RemovePersistentSession_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RemovePersistentSession(
std::move(p_session_id), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kMediaDrmStorageValidationInfo[] = {
    {&internal::MediaDrmStorage_Initialize_Params_Data::Validate,
     &internal::MediaDrmStorage_Initialize_ResponseParams_Data::Validate},
    {&internal::MediaDrmStorage_OnProvisioned_Params_Data::Validate,
     &internal::MediaDrmStorage_OnProvisioned_ResponseParams_Data::Validate},
    {&internal::MediaDrmStorage_SavePersistentSession_Params_Data::Validate,
     &internal::MediaDrmStorage_SavePersistentSession_ResponseParams_Data::Validate},
    {&internal::MediaDrmStorage_LoadPersistentSession_Params_Data::Validate,
     &internal::MediaDrmStorage_LoadPersistentSession_ResponseParams_Data::Validate},
    {&internal::MediaDrmStorage_RemovePersistentSession_Params_Data::Validate,
     &internal::MediaDrmStorage_RemovePersistentSession_ResponseParams_Data::Validate},
};

bool MediaDrmStorageRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::blink::MediaDrmStorage::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kMediaDrmStorageValidationInfo);
}

bool MediaDrmStorageResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::blink::MediaDrmStorage::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kMediaDrmStorageValidationInfo);
}


}  // namespace blink
}  // namespace mojom
}  // namespace media


namespace mojo {


// static
bool StructTraits<::media::mojom::blink::SessionData::DataView, ::media::mojom::blink::SessionDataPtr>::Read(
    ::media::mojom::blink::SessionData::DataView input,
    ::media::mojom::blink::SessionDataPtr* output) {
  bool success = true;
  ::media::mojom::blink::SessionDataPtr result(::media::mojom::blink::SessionData::New());
  
      if (success && !input.ReadKeySetId(&result->key_set_id))
        success = false;
      if (success && !input.ReadMimeType(&result->mime_type))
        success = false;
      if (success && !input.ReadKeyType(&result->key_type))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace media {
namespace mojom {
namespace blink {


void MediaDrmStorageInterceptorForTesting::Initialize(InitializeCallback callback) {
  GetForwardingInterface()->Initialize(std::move(callback));
}
void MediaDrmStorageInterceptorForTesting::OnProvisioned(OnProvisionedCallback callback) {
  GetForwardingInterface()->OnProvisioned(std::move(callback));
}
void MediaDrmStorageInterceptorForTesting::SavePersistentSession(const WTF::String& session_id, SessionDataPtr session_data, SavePersistentSessionCallback callback) {
  GetForwardingInterface()->SavePersistentSession(std::move(session_id), std::move(session_data), std::move(callback));
}
void MediaDrmStorageInterceptorForTesting::LoadPersistentSession(const WTF::String& session_id, LoadPersistentSessionCallback callback) {
  GetForwardingInterface()->LoadPersistentSession(std::move(session_id), std::move(callback));
}
void MediaDrmStorageInterceptorForTesting::RemovePersistentSession(const WTF::String& session_id, RemovePersistentSessionCallback callback) {
  GetForwardingInterface()->RemovePersistentSession(std::move(session_id), std::move(callback));
}
MediaDrmStorageAsyncWaiter::MediaDrmStorageAsyncWaiter(
    MediaDrmStorage* proxy) : proxy_(proxy) {}

MediaDrmStorageAsyncWaiter::~MediaDrmStorageAsyncWaiter() = default;

void MediaDrmStorageAsyncWaiter::Initialize(
    bool* out_success, absl::optional<::base::UnguessableToken>* out_origin_id) {
  base::RunLoop loop;
  proxy_->Initialize(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             absl::optional<::base::UnguessableToken>* out_origin_id
,
             bool success,
             const absl::optional<::base::UnguessableToken>& origin_id) {*out_success = std::move(success);*out_origin_id = std::move(origin_id);
            loop->Quit();
          },
          &loop,
          out_success,
          out_origin_id));
  loop.Run();
}
void MediaDrmStorageAsyncWaiter::OnProvisioned(
    bool* out_success) {
  base::RunLoop loop;
  proxy_->OnProvisioned(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void MediaDrmStorageAsyncWaiter::SavePersistentSession(
    const WTF::String& session_id, SessionDataPtr session_data, bool* out_success) {
  base::RunLoop loop;
  proxy_->SavePersistentSession(std::move(session_id),std::move(session_data),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void MediaDrmStorageAsyncWaiter::LoadPersistentSession(
    const WTF::String& session_id, SessionDataPtr* out_session_data) {
  base::RunLoop loop;
  proxy_->LoadPersistentSession(std::move(session_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             SessionDataPtr* out_session_data
,
             SessionDataPtr session_data) {*out_session_data = std::move(session_data);
            loop->Quit();
          },
          &loop,
          out_session_data));
  loop.Run();
}
void MediaDrmStorageAsyncWaiter::RemovePersistentSession(
    const WTF::String& session_id, bool* out_success) {
  base::RunLoop loop;
  proxy_->RemovePersistentSession(std::move(session_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace media


#if defined(__clang__)
#pragma clang diagnostic pop
#endif