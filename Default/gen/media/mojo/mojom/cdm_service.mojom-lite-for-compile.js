// media/mojo/mojom/cdm_service.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('media.mojom.CdmFactory');
goog.require('media.mojom.FrameInterfaceFactory');
goog.require('mojoBase.mojom.FilePath');






goog.provide('media.mojom.CdmService');
goog.provide('media.mojom.CdmServiceReceiver');
goog.provide('media.mojom.CdmServiceCallbackRouter');
goog.provide('media.mojom.CdmServiceInterface');
goog.provide('media.mojom.CdmServiceRemote');
goog.provide('media.mojom.CdmServicePendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.CdmServicePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.CdmService.$interfaceName,
        scope);
  }
};

/** @interface */
media.mojom.CdmServiceInterface = class {
  
  /**
   * @param { !media.mojom.CdmFactoryPendingReceiver } factory
   * @param { !media.mojom.FrameInterfaceFactoryRemote } frameInterfaces
   */

  createCdmFactory(factory, frameInterfaces) {}
};

/**
 * @export
 * @implements { media.mojom.CdmServiceInterface }
 */
media.mojom.CdmServiceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.CdmServicePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.CdmServicePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.CdmServicePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.mojom.CdmFactoryPendingReceiver } factory
   * @param { !media.mojom.FrameInterfaceFactoryRemote } frameInterfaces
   */

  createCdmFactory(
      factory,
      frameInterfaces) {
    this.proxy.sendMessage(
        0,
        media.mojom.CdmService_CreateCdmFactory_ParamsSpec.$,
        null,
        [
          factory,
          frameInterfaces
        ]);
  }
};

/**
 * An object which receives request messages for the CdmService
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.CdmServiceReceiver = class {
  /**
   * @param {!media.mojom.CdmServiceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.CdmServiceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.CdmServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.CdmServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.CdmService_CreateCdmFactory_ParamsSpec.$,
        null,
        impl.createCdmFactory.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.CdmService = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.CdmService";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.CdmServiceRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.CdmServiceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the CdmService
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.CdmServiceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.CdmServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.CdmServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createCdmFactory =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.CdmService_CreateCdmFactory_ParamsSpec.$,
        null,
        this.createCdmFactory.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.mojom.CdmServiceBroker');
goog.provide('media.mojom.CdmServiceBrokerReceiver');
goog.provide('media.mojom.CdmServiceBrokerCallbackRouter');
goog.provide('media.mojom.CdmServiceBrokerInterface');
goog.provide('media.mojom.CdmServiceBrokerRemote');
goog.provide('media.mojom.CdmServiceBrokerPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.CdmServiceBrokerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.CdmServiceBroker.$interfaceName,
        scope);
  }
};

/** @interface */
media.mojom.CdmServiceBrokerInterface = class {
  
  /**
   * @param { !mojoBase.mojom.FilePath } cdmPath
   * @param { !media.mojom.CdmServicePendingReceiver } receiver
   */

  getService(cdmPath, receiver) {}
};

/**
 * @export
 * @implements { media.mojom.CdmServiceBrokerInterface }
 */
media.mojom.CdmServiceBrokerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.CdmServiceBrokerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.CdmServiceBrokerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.CdmServiceBrokerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mojoBase.mojom.FilePath } cdmPath
   * @param { !media.mojom.CdmServicePendingReceiver } receiver
   */

  getService(
      cdmPath,
      receiver) {
    this.proxy.sendMessage(
        0,
        media.mojom.CdmServiceBroker_GetService_ParamsSpec.$,
        null,
        [
          cdmPath,
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the CdmServiceBroker
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.CdmServiceBrokerReceiver = class {
  /**
   * @param {!media.mojom.CdmServiceBrokerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.CdmServiceBrokerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.CdmServiceBrokerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.CdmServiceBrokerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.CdmServiceBroker_GetService_ParamsSpec.$,
        null,
        impl.getService.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.CdmServiceBroker = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.CdmServiceBroker";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.CdmServiceBrokerRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.CdmServiceBrokerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the CdmServiceBroker
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.CdmServiceBrokerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.CdmServiceBrokerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.CdmServiceBrokerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getService =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.CdmServiceBroker_GetService_ParamsSpec.$,
        null,
        this.getService.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.mojom.CdmService_CreateCdmFactory_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.CdmService_CreateCdmFactory_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.mojom.CdmServiceBroker_GetService_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.CdmServiceBroker_GetService_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    media.mojom.CdmService_CreateCdmFactory_ParamsSpec.$,
    'CdmService_CreateCdmFactory_Params',
    [
      mojo.internal.StructField(
        'factory', 0,
        0,
        mojo.internal.InterfaceRequest(media.mojom.CdmFactoryPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'frameInterfaces', 4,
        0,
        mojo.internal.InterfaceProxy(media.mojom.FrameInterfaceFactoryRemote),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('media.mojom.CdmService_CreateCdmFactory_Params');

/** @record */
media.mojom.CdmService_CreateCdmFactory_Params = class {
  constructor() {
    /** @export { !media.mojom.CdmFactoryPendingReceiver } */
    this.factory;
    /** @export { !media.mojom.FrameInterfaceFactoryRemote } */
    this.frameInterfaces;
  }
};




mojo.internal.Struct(
    media.mojom.CdmServiceBroker_GetService_ParamsSpec.$,
    'CdmServiceBroker_GetService_Params',
    [
      mojo.internal.StructField(
        'cdmPath', 0,
        0,
        mojoBase.mojom.FilePathSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'receiver', 8,
        0,
        mojo.internal.InterfaceRequest(media.mojom.CdmServicePendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('media.mojom.CdmServiceBroker_GetService_Params');

/** @record */
media.mojom.CdmServiceBroker_GetService_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.FilePath } */
    this.cdmPath;
    /** @export { !media.mojom.CdmServicePendingReceiver } */
    this.receiver;
  }
};


