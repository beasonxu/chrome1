// media/mojo/mojom/audio_encoder.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_AUDIO_ENCODER_MOJOM_TEST_UTILS_H_
#define MEDIA_MOJO_MOJOM_AUDIO_ENCODER_MOJOM_TEST_UTILS_H_

#include "media/mojo/mojom/audio_encoder.mojom.h"


namespace media {
namespace mojom {


class  AudioEncoderInterceptorForTesting : public AudioEncoder {
  virtual AudioEncoder* GetForwardingInterface() = 0;
  void Initialize(::mojo::PendingAssociatedRemote<AudioEncoderClient> client, const ::media::AudioEncoder::Options& config, InitializeCallback callback) override;
  void Encode(::media::mojom::AudioBufferPtr buffer, EncodeCallback callback) override;
  void Flush(FlushCallback callback) override;
};
class  AudioEncoderAsyncWaiter {
 public:
  explicit AudioEncoderAsyncWaiter(AudioEncoder* proxy);

  AudioEncoderAsyncWaiter(const AudioEncoderAsyncWaiter&) = delete;
  AudioEncoderAsyncWaiter& operator=(const AudioEncoderAsyncWaiter&) = delete;

  ~AudioEncoderAsyncWaiter();
  void Initialize(
      ::mojo::PendingAssociatedRemote<AudioEncoderClient> client, const ::media::AudioEncoder::Options& config, ::media::EncoderStatus* out_status);
  void Encode(
      ::media::mojom::AudioBufferPtr buffer, ::media::EncoderStatus* out_status);
  void Flush(
      ::media::EncoderStatus* out_status);

 private:
  AudioEncoder* const proxy_;
};


class  AudioEncoderClientInterceptorForTesting : public AudioEncoderClient {
  virtual AudioEncoderClient* GetForwardingInterface() = 0;
  void OnEncodedBufferReady(::media::EncodedAudioBuffer buffer, const std::vector<uint8_t>& description) override;
};
class  AudioEncoderClientAsyncWaiter {
 public:
  explicit AudioEncoderClientAsyncWaiter(AudioEncoderClient* proxy);

  AudioEncoderClientAsyncWaiter(const AudioEncoderClientAsyncWaiter&) = delete;
  AudioEncoderClientAsyncWaiter& operator=(const AudioEncoderClientAsyncWaiter&) = delete;

  ~AudioEncoderClientAsyncWaiter();

 private:
  AudioEncoderClient* const proxy_;
};




}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_AUDIO_ENCODER_MOJOM_TEST_UTILS_H_