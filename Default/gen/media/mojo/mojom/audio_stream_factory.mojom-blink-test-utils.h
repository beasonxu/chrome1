// media/mojo/mojom/audio_stream_factory.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_AUDIO_STREAM_FACTORY_MOJOM_BLINK_TEST_UTILS_H_
#define MEDIA_MOJO_MOJOM_AUDIO_STREAM_FACTORY_MOJOM_BLINK_TEST_UTILS_H_

#include "media/mojo/mojom/audio_stream_factory.mojom-blink.h"
#include "third_party/blink/public/platform/web_common.h"


namespace media {
namespace mojom {
namespace blink {


class BLINK_PLATFORM_EXPORT LocalMuterInterceptorForTesting : public LocalMuter {
  virtual LocalMuter* GetForwardingInterface() = 0;
};
class BLINK_PLATFORM_EXPORT LocalMuterAsyncWaiter {
 public:
  explicit LocalMuterAsyncWaiter(LocalMuter* proxy);

  LocalMuterAsyncWaiter(const LocalMuterAsyncWaiter&) = delete;
  LocalMuterAsyncWaiter& operator=(const LocalMuterAsyncWaiter&) = delete;

  ~LocalMuterAsyncWaiter();

 private:
  LocalMuter* const proxy_;
};


class BLINK_PLATFORM_EXPORT AudioStreamFactoryInterceptorForTesting : public AudioStreamFactory {
  virtual AudioStreamFactory* GetForwardingInterface() = 0;
  void CreateInputStream(::mojo::PendingReceiver<::media::mojom::blink::AudioInputStream> stream, ::mojo::PendingRemote<::media::mojom::blink::AudioInputStreamClient> client, ::mojo::PendingRemote<::media::mojom::blink::AudioInputStreamObserver> observer, ::mojo::PendingRemote<::media::mojom::blink::AudioLog> log, const WTF::String& device_id, const ::media::AudioParameters& params, uint32_t shared_memory_count, bool enable_agc, ::base::ReadOnlySharedMemoryRegion key_press_count_buffer, ::media::mojom::blink::AudioProcessingConfigPtr processing_config, CreateInputStreamCallback callback) override;
  void AssociateInputAndOutputForAec(const ::base::UnguessableToken& input_stream_id, const WTF::String& output_device_id) override;
  void CreateOutputStream(::mojo::PendingReceiver<::media::mojom::blink::AudioOutputStream> stream, ::mojo::PendingAssociatedRemote<::media::mojom::blink::AudioOutputStreamObserver> observer, ::mojo::PendingRemote<::media::mojom::blink::AudioLog> log, const WTF::String& device_id, const ::media::AudioParameters& params, const ::base::UnguessableToken& group_id, CreateOutputStreamCallback callback) override;
  void BindMuter(::mojo::PendingAssociatedReceiver<LocalMuter> receiver, const ::base::UnguessableToken& group_id) override;
  void CreateLoopbackStream(::mojo::PendingReceiver<::media::mojom::blink::AudioInputStream> receiver, ::mojo::PendingRemote<::media::mojom::blink::AudioInputStreamClient> client, ::mojo::PendingRemote<::media::mojom::blink::AudioInputStreamObserver> observer, const ::media::AudioParameters& params, uint32_t shared_memory_count, const ::base::UnguessableToken& group_id, CreateLoopbackStreamCallback callback) override;
};
class BLINK_PLATFORM_EXPORT AudioStreamFactoryAsyncWaiter {
 public:
  explicit AudioStreamFactoryAsyncWaiter(AudioStreamFactory* proxy);

  AudioStreamFactoryAsyncWaiter(const AudioStreamFactoryAsyncWaiter&) = delete;
  AudioStreamFactoryAsyncWaiter& operator=(const AudioStreamFactoryAsyncWaiter&) = delete;

  ~AudioStreamFactoryAsyncWaiter();
  void CreateInputStream(
      ::mojo::PendingReceiver<::media::mojom::blink::AudioInputStream> stream, ::mojo::PendingRemote<::media::mojom::blink::AudioInputStreamClient> client, ::mojo::PendingRemote<::media::mojom::blink::AudioInputStreamObserver> observer, ::mojo::PendingRemote<::media::mojom::blink::AudioLog> log, const WTF::String& device_id, const ::media::AudioParameters& params, uint32_t shared_memory_count, bool enable_agc, ::base::ReadOnlySharedMemoryRegion key_press_count_buffer, ::media::mojom::blink::AudioProcessingConfigPtr processing_config, ::media::mojom::blink::ReadOnlyAudioDataPipePtr* out_data_pipe, bool* out_initially_muted, absl::optional<::base::UnguessableToken>* out_stream_id);
  void CreateOutputStream(
      ::mojo::PendingReceiver<::media::mojom::blink::AudioOutputStream> stream, ::mojo::PendingAssociatedRemote<::media::mojom::blink::AudioOutputStreamObserver> observer, ::mojo::PendingRemote<::media::mojom::blink::AudioLog> log, const WTF::String& device_id, const ::media::AudioParameters& params, const ::base::UnguessableToken& group_id, ::media::mojom::blink::ReadWriteAudioDataPipePtr* out_data_pipe);
  void CreateLoopbackStream(
      ::mojo::PendingReceiver<::media::mojom::blink::AudioInputStream> receiver, ::mojo::PendingRemote<::media::mojom::blink::AudioInputStreamClient> client, ::mojo::PendingRemote<::media::mojom::blink::AudioInputStreamObserver> observer, const ::media::AudioParameters& params, uint32_t shared_memory_count, const ::base::UnguessableToken& group_id, ::media::mojom::blink::ReadOnlyAudioDataPipePtr* out_data_pipe);

 private:
  AudioStreamFactory* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_AUDIO_STREAM_FACTORY_MOJOM_BLINK_TEST_UTILS_H_