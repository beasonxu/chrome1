// media/mojo/mojom/renderer_extensions.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_RENDERER_EXTENSIONS_MOJOM_BLINK_TEST_UTILS_H_
#define MEDIA_MOJO_MOJOM_RENDERER_EXTENSIONS_MOJOM_BLINK_TEST_UTILS_H_

#include "media/mojo/mojom/renderer_extensions.mojom-blink.h"
#include "third_party/blink/public/platform/web_common.h"


namespace media {
namespace mojom {
namespace blink {


class BLINK_PLATFORM_EXPORT MediaPlayerRendererClientExtensionInterceptorForTesting : public MediaPlayerRendererClientExtension {
  virtual MediaPlayerRendererClientExtension* GetForwardingInterface() = 0;
  void OnVideoSizeChange(const ::gfx::Size& size) override;
  void OnDurationChange(::base::TimeDelta duration) override;
};
class BLINK_PLATFORM_EXPORT MediaPlayerRendererClientExtensionAsyncWaiter {
 public:
  explicit MediaPlayerRendererClientExtensionAsyncWaiter(MediaPlayerRendererClientExtension* proxy);

  MediaPlayerRendererClientExtensionAsyncWaiter(const MediaPlayerRendererClientExtensionAsyncWaiter&) = delete;
  MediaPlayerRendererClientExtensionAsyncWaiter& operator=(const MediaPlayerRendererClientExtensionAsyncWaiter&) = delete;

  ~MediaPlayerRendererClientExtensionAsyncWaiter();

 private:
  MediaPlayerRendererClientExtension* const proxy_;
};


class BLINK_PLATFORM_EXPORT MediaPlayerRendererExtensionInterceptorForTesting : public MediaPlayerRendererExtension {
  virtual MediaPlayerRendererExtension* GetForwardingInterface() = 0;
  void InitiateScopedSurfaceRequest(InitiateScopedSurfaceRequestCallback callback) override;
};
class BLINK_PLATFORM_EXPORT MediaPlayerRendererExtensionAsyncWaiter {
 public:
  explicit MediaPlayerRendererExtensionAsyncWaiter(MediaPlayerRendererExtension* proxy);

  MediaPlayerRendererExtensionAsyncWaiter(const MediaPlayerRendererExtensionAsyncWaiter&) = delete;
  MediaPlayerRendererExtensionAsyncWaiter& operator=(const MediaPlayerRendererExtensionAsyncWaiter&) = delete;

  ~MediaPlayerRendererExtensionAsyncWaiter();
  void InitiateScopedSurfaceRequest(
      ::base::UnguessableToken* out_request_token);

 private:
  MediaPlayerRendererExtension* const proxy_;
};


class BLINK_PLATFORM_EXPORT FlingingRendererClientExtensionInterceptorForTesting : public FlingingRendererClientExtension {
  virtual FlingingRendererClientExtension* GetForwardingInterface() = 0;
  void OnRemotePlayStateChange(::media::mojom::blink::MediaStatusState state) override;
};
class BLINK_PLATFORM_EXPORT FlingingRendererClientExtensionAsyncWaiter {
 public:
  explicit FlingingRendererClientExtensionAsyncWaiter(FlingingRendererClientExtension* proxy);

  FlingingRendererClientExtensionAsyncWaiter(const FlingingRendererClientExtensionAsyncWaiter&) = delete;
  FlingingRendererClientExtensionAsyncWaiter& operator=(const FlingingRendererClientExtensionAsyncWaiter&) = delete;

  ~FlingingRendererClientExtensionAsyncWaiter();

 private:
  FlingingRendererClientExtension* const proxy_;
};


class BLINK_PLATFORM_EXPORT MediaFoundationRendererObserverInterceptorForTesting : public MediaFoundationRendererObserver {
  virtual MediaFoundationRendererObserver* GetForwardingInterface() = 0;
};
class BLINK_PLATFORM_EXPORT MediaFoundationRendererObserverAsyncWaiter {
 public:
  explicit MediaFoundationRendererObserverAsyncWaiter(MediaFoundationRendererObserver* proxy);

  MediaFoundationRendererObserverAsyncWaiter(const MediaFoundationRendererObserverAsyncWaiter&) = delete;
  MediaFoundationRendererObserverAsyncWaiter& operator=(const MediaFoundationRendererObserverAsyncWaiter&) = delete;

  ~MediaFoundationRendererObserverAsyncWaiter();

 private:
  MediaFoundationRendererObserver* const proxy_;
};


class BLINK_PLATFORM_EXPORT MediaFoundationRendererNotifierInterceptorForTesting : public MediaFoundationRendererNotifier {
  virtual MediaFoundationRendererNotifier* GetForwardingInterface() = 0;
  void MediaFoundationRendererCreated(::mojo::PendingReceiver<MediaFoundationRendererObserver> observer) override;
};
class BLINK_PLATFORM_EXPORT MediaFoundationRendererNotifierAsyncWaiter {
 public:
  explicit MediaFoundationRendererNotifierAsyncWaiter(MediaFoundationRendererNotifier* proxy);

  MediaFoundationRendererNotifierAsyncWaiter(const MediaFoundationRendererNotifierAsyncWaiter&) = delete;
  MediaFoundationRendererNotifierAsyncWaiter& operator=(const MediaFoundationRendererNotifierAsyncWaiter&) = delete;

  ~MediaFoundationRendererNotifierAsyncWaiter();

 private:
  MediaFoundationRendererNotifier* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_RENDERER_EXTENSIONS_MOJOM_BLINK_TEST_UTILS_H_