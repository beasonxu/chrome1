// media/mojo/mojom/key_system_support.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "media/mojo/mojom/key_system_support.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "media/mojo/mojom/key_system_support.mojom-params-data.h"
#include "media/mojo/mojom/key_system_support.mojom-shared-message-ids.h"

#include "media/mojo/mojom/key_system_support.mojom-import-headers.h"
#include "media/mojo/mojom/key_system_support.mojom-test-utils.h"


#ifndef MEDIA_MOJO_MOJOM_KEY_SYSTEM_SUPPORT_MOJOM_JUMBO_H_
#define MEDIA_MOJO_MOJOM_KEY_SYSTEM_SUPPORT_MOJOM_JUMBO_H_
#endif



namespace media {
namespace mojom {
VideoCodecInfo::VideoCodecInfo()
    : supported_profiles(),
      supports_clear_lead(true) {}

VideoCodecInfo::VideoCodecInfo(
    std::vector<::media::VideoCodecProfile> supported_profiles_in,
    bool supports_clear_lead_in)
    : supported_profiles(std::move(supported_profiles_in)),
      supports_clear_lead(std::move(supports_clear_lead_in)) {}

VideoCodecInfo::~VideoCodecInfo() = default;

void VideoCodecInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "supported_profiles"), this->supported_profiles,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::media::VideoCodecProfile>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "supports_clear_lead"), this->supports_clear_lead,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool VideoCodecInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CdmCapability::CdmCapability()
    : audio_codecs(),
      video_codecs(),
      encryption_schemes(),
      session_types() {}

CdmCapability::CdmCapability(
    std::vector<::media::AudioCodec> audio_codecs_in,
    base::flat_map<::media::VideoCodec, VideoCodecInfoPtr> video_codecs_in,
    std::vector<::media::EncryptionScheme> encryption_schemes_in,
    std::vector<::media::CdmSessionType> session_types_in)
    : audio_codecs(std::move(audio_codecs_in)),
      video_codecs(std::move(video_codecs_in)),
      encryption_schemes(std::move(encryption_schemes_in)),
      session_types(std::move(session_types_in)) {}

CdmCapability::~CdmCapability() = default;

void CdmCapability::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "audio_codecs"), this->audio_codecs,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::media::AudioCodec>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "video_codecs"), this->video_codecs,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type base::flat_map<::media::VideoCodec, VideoCodecInfoPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "encryption_schemes"), this->encryption_schemes,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::media::EncryptionScheme>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "session_types"), this->session_types,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::media::CdmSessionType>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool CdmCapability::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
KeySystemCapability::KeySystemCapability()
    : sw_secure_capability(),
      hw_secure_capability() {}

KeySystemCapability::KeySystemCapability(
    const absl::optional<::media::CdmCapability>& sw_secure_capability_in,
    const absl::optional<::media::CdmCapability>& hw_secure_capability_in)
    : sw_secure_capability(std::move(sw_secure_capability_in)),
      hw_secure_capability(std::move(hw_secure_capability_in)) {}

KeySystemCapability::~KeySystemCapability() = default;

void KeySystemCapability::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sw_secure_capability"), this->sw_secure_capability,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::media::CdmCapability>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "hw_secure_capability"), this->hw_secure_capability,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::media::CdmCapability>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool KeySystemCapability::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char KeySystemSupportObserver::Name_[] = "media.mojom.KeySystemSupportObserver";

KeySystemSupportObserver::IPCStableHashFunction KeySystemSupportObserver::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kKeySystemSupportObserver_OnKeySystemSupportUpdated_Name: {
      return &KeySystemSupportObserver::OnKeySystemSupportUpdated_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* KeySystemSupportObserver::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kKeySystemSupportObserver_OnKeySystemSupportUpdated_Name:
            return "Receive media::mojom::KeySystemSupportObserver::OnKeySystemSupportUpdated";
    }
  } else {
    switch (message.name()) {
      case internal::kKeySystemSupportObserver_OnKeySystemSupportUpdated_Name:
            return "Receive reply media::mojom::KeySystemSupportObserver::OnKeySystemSupportUpdated";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t KeySystemSupportObserver::OnKeySystemSupportUpdated_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::KeySystemSupportObserver::OnKeySystemSupportUpdated");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

KeySystemSupportObserverProxy::KeySystemSupportObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void KeySystemSupportObserverProxy::OnKeySystemSupportUpdated(
    base::flat_map<std::string, KeySystemCapabilityPtr> in_key_systems) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::KeySystemSupportObserver::OnKeySystemSupportUpdated", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("key_systems"), in_key_systems,
                        "<value of type base::flat_map<std::string, KeySystemCapabilityPtr>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kKeySystemSupportObserver_OnKeySystemSupportUpdated_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->key_systems)::BaseType>
      key_systems_fragment(params.message());
  const mojo::internal::ContainerValidateParams key_systems_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::MapDataView<mojo::StringDataView, ::media::mojom::KeySystemCapabilityDataView>>(
      in_key_systems, key_systems_fragment, &key_systems_validate_params);
  params->key_systems.Set(
      key_systems_fragment.is_null() ? nullptr : key_systems_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->key_systems.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null key_systems in KeySystemSupportObserver.OnKeySystemSupportUpdated request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(KeySystemSupportObserver::Name_);
  message.set_method_name("OnKeySystemSupportUpdated");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool KeySystemSupportObserverStubDispatch::Accept(
    KeySystemSupportObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kKeySystemSupportObserver_OnKeySystemSupportUpdated_Name: {

      DCHECK(message->is_serialized());
      internal::KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data* params =
          reinterpret_cast<internal::KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      base::flat_map<std::string, KeySystemCapabilityPtr> p_key_systems{};
      KeySystemSupportObserver_OnKeySystemSupportUpdated_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadKeySystems(&p_key_systems))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            KeySystemSupportObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnKeySystemSupportUpdated(
std::move(p_key_systems));
      return true;
    }
  }
  return false;
}

// static
bool KeySystemSupportObserverStubDispatch::AcceptWithResponder(
    KeySystemSupportObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kKeySystemSupportObserver_OnKeySystemSupportUpdated_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kKeySystemSupportObserverValidationInfo[] = {
    {&internal::KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data::Validate,
     nullptr /* no response */},
};

bool KeySystemSupportObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::KeySystemSupportObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kKeySystemSupportObserverValidationInfo);
}

const char KeySystemSupport::Name_[] = "media.mojom.KeySystemSupport";

KeySystemSupport::IPCStableHashFunction KeySystemSupport::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kKeySystemSupport_AddObserver_Name: {
      return &KeySystemSupport::AddObserver_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* KeySystemSupport::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kKeySystemSupport_AddObserver_Name:
            return "Receive media::mojom::KeySystemSupport::AddObserver";
    }
  } else {
    switch (message.name()) {
      case internal::kKeySystemSupport_AddObserver_Name:
            return "Receive reply media::mojom::KeySystemSupport::AddObserver";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t KeySystemSupport::AddObserver_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::KeySystemSupport::AddObserver");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

KeySystemSupportProxy::KeySystemSupportProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void KeySystemSupportProxy::AddObserver(
    ::mojo::PendingRemote<KeySystemSupportObserver> in_observer) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::KeySystemSupport::AddObserver", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("observer"), in_observer,
                        "<value of type ::mojo::PendingRemote<KeySystemSupportObserver>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kKeySystemSupport_AddObserver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::KeySystemSupport_AddObserver_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::media::mojom::KeySystemSupportObserverInterfaceBase>>(
      in_observer, &params->observer, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->observer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid observer in KeySystemSupport.AddObserver request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(KeySystemSupport::Name_);
  message.set_method_name("AddObserver");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool KeySystemSupportStubDispatch::Accept(
    KeySystemSupport* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kKeySystemSupport_AddObserver_Name: {

      DCHECK(message->is_serialized());
      internal::KeySystemSupport_AddObserver_Params_Data* params =
          reinterpret_cast<internal::KeySystemSupport_AddObserver_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<KeySystemSupportObserver> p_observer{};
      KeySystemSupport_AddObserver_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_observer =
            input_data_view.TakeObserver<decltype(p_observer)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            KeySystemSupport::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddObserver(
std::move(p_observer));
      return true;
    }
  }
  return false;
}

// static
bool KeySystemSupportStubDispatch::AcceptWithResponder(
    KeySystemSupport* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kKeySystemSupport_AddObserver_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kKeySystemSupportValidationInfo[] = {
    {&internal::KeySystemSupport_AddObserver_Params_Data::Validate,
     nullptr /* no response */},
};

bool KeySystemSupportRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::KeySystemSupport::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kKeySystemSupportValidationInfo);
}



}  // namespace mojom
}  // namespace media


namespace mojo {


// static
bool StructTraits<::media::mojom::VideoCodecInfo::DataView, ::media::mojom::VideoCodecInfoPtr>::Read(
    ::media::mojom::VideoCodecInfo::DataView input,
    ::media::mojom::VideoCodecInfoPtr* output) {
  bool success = true;
  ::media::mojom::VideoCodecInfoPtr result(::media::mojom::VideoCodecInfo::New());
  
      if (success && !input.ReadSupportedProfiles(&result->supported_profiles))
        success = false;
      if (success)
        result->supports_clear_lead = input.supports_clear_lead();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::media::mojom::CdmCapability::DataView, ::media::mojom::CdmCapabilityPtr>::Read(
    ::media::mojom::CdmCapability::DataView input,
    ::media::mojom::CdmCapabilityPtr* output) {
  bool success = true;
  ::media::mojom::CdmCapabilityPtr result(::media::mojom::CdmCapability::New());
  
      if (success && !input.ReadAudioCodecs(&result->audio_codecs))
        success = false;
      if (success && !input.ReadVideoCodecs(&result->video_codecs))
        success = false;
      if (success && !input.ReadEncryptionSchemes(&result->encryption_schemes))
        success = false;
      if (success && !input.ReadSessionTypes(&result->session_types))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::media::mojom::KeySystemCapability::DataView, ::media::mojom::KeySystemCapabilityPtr>::Read(
    ::media::mojom::KeySystemCapability::DataView input,
    ::media::mojom::KeySystemCapabilityPtr* output) {
  bool success = true;
  ::media::mojom::KeySystemCapabilityPtr result(::media::mojom::KeySystemCapability::New());
  
      if (success && !input.ReadSwSecureCapability(&result->sw_secure_capability))
        success = false;
      if (success && !input.ReadHwSecureCapability(&result->hw_secure_capability))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace media {
namespace mojom {


void KeySystemSupportObserverInterceptorForTesting::OnKeySystemSupportUpdated(base::flat_map<std::string, KeySystemCapabilityPtr> key_systems) {
  GetForwardingInterface()->OnKeySystemSupportUpdated(std::move(key_systems));
}
KeySystemSupportObserverAsyncWaiter::KeySystemSupportObserverAsyncWaiter(
    KeySystemSupportObserver* proxy) : proxy_(proxy) {}

KeySystemSupportObserverAsyncWaiter::~KeySystemSupportObserverAsyncWaiter() = default;




void KeySystemSupportInterceptorForTesting::AddObserver(::mojo::PendingRemote<KeySystemSupportObserver> observer) {
  GetForwardingInterface()->AddObserver(std::move(observer));
}
KeySystemSupportAsyncWaiter::KeySystemSupportAsyncWaiter(
    KeySystemSupport* proxy) : proxy_(proxy) {}

KeySystemSupportAsyncWaiter::~KeySystemSupportAsyncWaiter() = default;






}  // namespace mojom
}  // namespace media


#if defined(__clang__)
#pragma clang diagnostic pop
#endif