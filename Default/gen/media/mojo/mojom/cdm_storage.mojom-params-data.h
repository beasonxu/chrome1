// media/mojo/mojom/cdm_storage.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_CDM_STORAGE_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_CDM_STORAGE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {

class ValidationContext;
class  CdmStorage_Open_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> file_name;

 private:
  friend class mojo::internal::MessageFragment<CdmStorage_Open_Params_Data>;

  CdmStorage_Open_Params_Data();
  ~CdmStorage_Open_Params_Data() = delete;
};
static_assert(sizeof(CdmStorage_Open_Params_Data) == 16,
              "Bad sizeof(CdmStorage_Open_Params_Data)");
class  CdmStorage_Open_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  mojo::internal::AssociatedInterface_Data cdm_file;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CdmStorage_Open_ResponseParams_Data>;

  CdmStorage_Open_ResponseParams_Data();
  ~CdmStorage_Open_ResponseParams_Data() = delete;
};
static_assert(sizeof(CdmStorage_Open_ResponseParams_Data) == 24,
              "Bad sizeof(CdmStorage_Open_ResponseParams_Data)");
class  CdmFile_Read_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CdmFile_Read_Params_Data>;

  CdmFile_Read_Params_Data();
  ~CdmFile_Read_Params_Data() = delete;
};
static_assert(sizeof(CdmFile_Read_Params_Data) == 8,
              "Bad sizeof(CdmFile_Read_Params_Data)");
class  CdmFile_Read_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> data;

 private:
  friend class mojo::internal::MessageFragment<CdmFile_Read_ResponseParams_Data>;

  CdmFile_Read_ResponseParams_Data();
  ~CdmFile_Read_ResponseParams_Data() = delete;
};
static_assert(sizeof(CdmFile_Read_ResponseParams_Data) == 24,
              "Bad sizeof(CdmFile_Read_ResponseParams_Data)");
class  CdmFile_Write_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> data;

 private:
  friend class mojo::internal::MessageFragment<CdmFile_Write_Params_Data>;

  CdmFile_Write_Params_Data();
  ~CdmFile_Write_Params_Data() = delete;
};
static_assert(sizeof(CdmFile_Write_Params_Data) == 16,
              "Bad sizeof(CdmFile_Write_Params_Data)");
class  CdmFile_Write_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CdmFile_Write_ResponseParams_Data>;

  CdmFile_Write_ResponseParams_Data();
  ~CdmFile_Write_ResponseParams_Data() = delete;
};
static_assert(sizeof(CdmFile_Write_ResponseParams_Data) == 16,
              "Bad sizeof(CdmFile_Write_ResponseParams_Data)");

}  // namespace internal


class CdmStorage_Open_ParamsDataView {
 public:
  CdmStorage_Open_ParamsDataView() = default;

  CdmStorage_Open_ParamsDataView(
      internal::CdmStorage_Open_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFileNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFileName(UserType* output) {
    
    auto* pointer = data_->file_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::CdmStorage_Open_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CdmStorage_Open_ResponseParamsDataView {
 public:
  CdmStorage_Open_ResponseParamsDataView() = default;

  CdmStorage_Open_ResponseParamsDataView(
      internal::CdmStorage_Open_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::media::mojom::CdmStorage_Status>(
        data_value, output);
  }
  CdmStorage_Status status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media::mojom::CdmStorage_Status>(data_->status));
  }
  template <typename UserType>
  UserType TakeCdmFile() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::media::mojom::CdmFileAssociatedPtrInfoDataView>(
            &data_->cdm_file, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CdmStorage_Open_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CdmFile_Read_ParamsDataView {
 public:
  CdmFile_Read_ParamsDataView() = default;

  CdmFile_Read_ParamsDataView(
      internal::CdmFile_Read_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CdmFile_Read_Params_Data* data_ = nullptr;
};



class CdmFile_Read_ResponseParamsDataView {
 public:
  CdmFile_Read_ResponseParamsDataView() = default;

  CdmFile_Read_ResponseParamsDataView(
      internal::CdmFile_Read_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::media::mojom::CdmFile_Status>(
        data_value, output);
  }
  CdmFile_Status status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media::mojom::CdmFile_Status>(data_->status));
  }
  inline void GetDataDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
 private:
  internal::CdmFile_Read_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CdmFile_Write_ParamsDataView {
 public:
  CdmFile_Write_ParamsDataView() = default;

  CdmFile_Write_ParamsDataView(
      internal::CdmFile_Write_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
 private:
  internal::CdmFile_Write_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CdmFile_Write_ResponseParamsDataView {
 public:
  CdmFile_Write_ResponseParamsDataView() = default;

  CdmFile_Write_ResponseParamsDataView(
      internal::CdmFile_Write_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::media::mojom::CdmFile_Status>(
        data_value, output);
  }
  CdmFile_Status status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media::mojom::CdmFile_Status>(data_->status));
  }
 private:
  internal::CdmFile_Write_ResponseParams_Data* data_ = nullptr;
};


inline void CdmStorage_Open_ParamsDataView::GetFileNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->file_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}






inline void CdmFile_Read_ResponseParamsDataView::GetDataDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->data.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}


inline void CdmFile_Write_ParamsDataView::GetDataDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->data.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}



}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_MOJO_MOJOM_CDM_STORAGE_MOJOM_PARAMS_DATA_H_