// media/mojo/mojom/renderer_extensions.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_RENDERER_EXTENSIONS_MOJOM_SHARED_H_
#define MEDIA_MOJO_MOJOM_RENDERER_EXTENSIONS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "media/mojo/mojom/renderer_extensions.mojom-shared-internal.h"
#include "media/mojo/mojom/media_types.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace media {
namespace mojom {


}  // namespace mojom
}  // namespace media

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace media {
namespace mojom {


enum class MediaFoundationRenderingMode : int32_t {
  
  DirectComposition = 0,
  
  FrameServer = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, MediaFoundationRenderingMode value);
inline bool IsKnownEnumValue(MediaFoundationRenderingMode value) {
  return internal::MediaFoundationRenderingMode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class MediaPlayerRendererClientExtensionInterfaceBase {};

using MediaPlayerRendererClientExtensionPtrDataView =
    mojo::InterfacePtrDataView<MediaPlayerRendererClientExtensionInterfaceBase>;
using MediaPlayerRendererClientExtensionRequestDataView =
    mojo::InterfaceRequestDataView<MediaPlayerRendererClientExtensionInterfaceBase>;
using MediaPlayerRendererClientExtensionAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<MediaPlayerRendererClientExtensionInterfaceBase>;
using MediaPlayerRendererClientExtensionAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<MediaPlayerRendererClientExtensionInterfaceBase>;
class MediaPlayerRendererExtensionInterfaceBase {};

using MediaPlayerRendererExtensionPtrDataView =
    mojo::InterfacePtrDataView<MediaPlayerRendererExtensionInterfaceBase>;
using MediaPlayerRendererExtensionRequestDataView =
    mojo::InterfaceRequestDataView<MediaPlayerRendererExtensionInterfaceBase>;
using MediaPlayerRendererExtensionAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<MediaPlayerRendererExtensionInterfaceBase>;
using MediaPlayerRendererExtensionAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<MediaPlayerRendererExtensionInterfaceBase>;
class FlingingRendererClientExtensionInterfaceBase {};

using FlingingRendererClientExtensionPtrDataView =
    mojo::InterfacePtrDataView<FlingingRendererClientExtensionInterfaceBase>;
using FlingingRendererClientExtensionRequestDataView =
    mojo::InterfaceRequestDataView<FlingingRendererClientExtensionInterfaceBase>;
using FlingingRendererClientExtensionAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<FlingingRendererClientExtensionInterfaceBase>;
using FlingingRendererClientExtensionAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<FlingingRendererClientExtensionInterfaceBase>;
class MediaFoundationRendererObserverInterfaceBase {};

using MediaFoundationRendererObserverPtrDataView =
    mojo::InterfacePtrDataView<MediaFoundationRendererObserverInterfaceBase>;
using MediaFoundationRendererObserverRequestDataView =
    mojo::InterfaceRequestDataView<MediaFoundationRendererObserverInterfaceBase>;
using MediaFoundationRendererObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<MediaFoundationRendererObserverInterfaceBase>;
using MediaFoundationRendererObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<MediaFoundationRendererObserverInterfaceBase>;
class MediaFoundationRendererNotifierInterfaceBase {};

using MediaFoundationRendererNotifierPtrDataView =
    mojo::InterfacePtrDataView<MediaFoundationRendererNotifierInterfaceBase>;
using MediaFoundationRendererNotifierRequestDataView =
    mojo::InterfaceRequestDataView<MediaFoundationRendererNotifierInterfaceBase>;
using MediaFoundationRendererNotifierAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<MediaFoundationRendererNotifierInterfaceBase>;
using MediaFoundationRendererNotifierAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<MediaFoundationRendererNotifierInterfaceBase>;


}  // namespace mojom
}  // namespace media

namespace std {

template <>
struct hash<::media::mojom::MediaFoundationRenderingMode>
    : public mojo::internal::EnumHashImpl<::media::mojom::MediaFoundationRenderingMode> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media::mojom::MediaFoundationRenderingMode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media::mojom::MediaFoundationRenderingMode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::media::mojom::MediaFoundationRenderingMode>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace media {
namespace mojom {


}  // namespace mojom
}  // namespace media

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::media::mojom::MediaFoundationRenderingMode> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::media::mojom::MediaFoundationRenderingMode value);
};

} // namespace perfetto

#endif  // MEDIA_MOJO_MOJOM_RENDERER_EXTENSIONS_MOJOM_SHARED_H_