// media/mojo/mojom/remoting.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('media.mojom');








/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.RemoterFactoryPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.RemoterFactory.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.RemoterFactoryInterface }
 */
media.mojom.RemoterFactoryRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.RemoterFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.RemoterFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.RemoterFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.mojom.RemotingSourceRemote } source
   * @param { !media.mojom.RemoterPendingReceiver } remoter
   */

  create(
      source,
      remoter) {
    this.proxy.sendMessage(
        0,
        media.mojom.RemoterFactory_Create_ParamsSpec.$,
        null,
        [
          source,
          remoter
        ]);
  }
};

/**
 * An object which receives request messages for the RemoterFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.RemoterFactoryReceiver = class {
  /**
   * @param {!media.mojom.RemoterFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.RemoterFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.RemoterFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemoterFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.RemoterFactory_Create_ParamsSpec.$,
        null,
        impl.create.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.RemoterFactory = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.RemoterFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.RemoterFactoryRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.RemoterFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the RemoterFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.RemoterFactoryCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.RemoterFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemoterFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.create =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.RemoterFactory_Create_ParamsSpec.$,
        null,
        this.create.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.RemotingDataStreamSenderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.RemotingDataStreamSender.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.RemotingDataStreamSenderInterface }
 */
media.mojom.RemotingDataStreamSenderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.RemotingDataStreamSenderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.RemotingDataStreamSenderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.RemotingDataStreamSenderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } frameSize
   */

  sendFrame(
      frameSize) {
    this.proxy.sendMessage(
        0,
        media.mojom.RemotingDataStreamSender_SendFrame_ParamsSpec.$,
        null,
        [
          frameSize
        ]);
  }

  
  /**
   */

  cancelInFlightData() {
    this.proxy.sendMessage(
        1,
        media.mojom.RemotingDataStreamSender_CancelInFlightData_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the RemotingDataStreamSender
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.RemotingDataStreamSenderReceiver = class {
  /**
   * @param {!media.mojom.RemotingDataStreamSenderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.RemotingDataStreamSenderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.RemotingDataStreamSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemotingDataStreamSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.RemotingDataStreamSender_SendFrame_ParamsSpec.$,
        null,
        impl.sendFrame.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.RemotingDataStreamSender_CancelInFlightData_ParamsSpec.$,
        null,
        impl.cancelInFlightData.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.RemotingDataStreamSender = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.RemotingDataStreamSender";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.RemotingDataStreamSenderRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.RemotingDataStreamSenderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the RemotingDataStreamSender
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.RemotingDataStreamSenderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.RemotingDataStreamSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemotingDataStreamSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.sendFrame =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.RemotingDataStreamSender_SendFrame_ParamsSpec.$,
        null,
        this.sendFrame.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.cancelInFlightData =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.RemotingDataStreamSender_CancelInFlightData_ParamsSpec.$,
        null,
        this.cancelInFlightData.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.RemoterPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.Remoter.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.RemoterInterface }
 */
media.mojom.RemoterRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.RemoterPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.RemoterPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.RemoterPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  start() {
    this.proxy.sendMessage(
        0,
        media.mojom.Remoter_Start_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { ?MojoHandle } audioPipe
   * @param { ?MojoHandle } videoPipe
   * @param { ?media.mojom.RemotingDataStreamSenderPendingReceiver } audioSender
   * @param { ?media.mojom.RemotingDataStreamSenderPendingReceiver } videoSender
   */

  startDataStreams(
      audioPipe,
      videoPipe,
      audioSender,
      videoSender) {
    this.proxy.sendMessage(
        1,
        media.mojom.Remoter_StartDataStreams_ParamsSpec.$,
        null,
        [
          audioPipe,
          videoPipe,
          audioSender,
          videoSender
        ]);
  }

  
  /**
   * @param { !media.mojom.RemotingStopReason } reason
   */

  stop(
      reason) {
    this.proxy.sendMessage(
        2,
        media.mojom.Remoter_Stop_ParamsSpec.$,
        null,
        [
          reason
        ]);
  }

  
  /**
   * @param { !Array<!number> } message
   */

  sendMessageToSink(
      message) {
    this.proxy.sendMessage(
        3,
        media.mojom.Remoter_SendMessageToSink_ParamsSpec.$,
        null,
        [
          message
        ]);
  }

  
  /**
   * @return {!Promise<{
        rate: !number,
   *  }>}
   */

  estimateTransmissionCapacity() {
    return this.proxy.sendMessage(
        4,
        media.mojom.Remoter_EstimateTransmissionCapacity_ParamsSpec.$,
        media.mojom.Remoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the Remoter
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.RemoterReceiver = class {
  /**
   * @param {!media.mojom.RemoterInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.RemoterRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.RemoterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemoterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.Remoter_Start_ParamsSpec.$,
        null,
        impl.start.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.Remoter_StartDataStreams_ParamsSpec.$,
        null,
        impl.startDataStreams.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.mojom.Remoter_Stop_ParamsSpec.$,
        null,
        impl.stop.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        media.mojom.Remoter_SendMessageToSink_ParamsSpec.$,
        null,
        impl.sendMessageToSink.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        media.mojom.Remoter_EstimateTransmissionCapacity_ParamsSpec.$,
        media.mojom.Remoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
        impl.estimateTransmissionCapacity.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.Remoter = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.Remoter";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.RemoterRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.RemoterRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the Remoter
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.RemoterCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.RemoterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemoterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.start =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.Remoter_Start_ParamsSpec.$,
        null,
        this.start.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.startDataStreams =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.Remoter_StartDataStreams_ParamsSpec.$,
        null,
        this.startDataStreams.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.stop =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.mojom.Remoter_Stop_ParamsSpec.$,
        null,
        this.stop.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.sendMessageToSink =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        media.mojom.Remoter_SendMessageToSink_ParamsSpec.$,
        null,
        this.sendMessageToSink.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.estimateTransmissionCapacity =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        media.mojom.Remoter_EstimateTransmissionCapacity_ParamsSpec.$,
        media.mojom.Remoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
        this.estimateTransmissionCapacity.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.RemotingSourcePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.RemotingSource.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.RemotingSourceInterface }
 */
media.mojom.RemotingSourceRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.RemotingSourcePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.RemotingSourcePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.RemotingSourcePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.mojom.RemotingSinkMetadata } metadata
   */

  onSinkAvailable(
      metadata) {
    this.proxy.sendMessage(
        0,
        media.mojom.RemotingSource_OnSinkAvailable_ParamsSpec.$,
        null,
        [
          metadata
        ]);
  }

  
  /**
   */

  onSinkGone() {
    this.proxy.sendMessage(
        1,
        media.mojom.RemotingSource_OnSinkGone_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  onStarted() {
    this.proxy.sendMessage(
        2,
        media.mojom.RemotingSource_OnStarted_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !media.mojom.RemotingStartFailReason } reason
   */

  onStartFailed(
      reason) {
    this.proxy.sendMessage(
        3,
        media.mojom.RemotingSource_OnStartFailed_ParamsSpec.$,
        null,
        [
          reason
        ]);
  }

  
  /**
   * @param { !Array<!number> } message
   */

  onMessageFromSink(
      message) {
    this.proxy.sendMessage(
        4,
        media.mojom.RemotingSource_OnMessageFromSink_ParamsSpec.$,
        null,
        [
          message
        ]);
  }

  
  /**
   * @param { !media.mojom.RemotingStopReason } reason
   */

  onStopped(
      reason) {
    this.proxy.sendMessage(
        5,
        media.mojom.RemotingSource_OnStopped_ParamsSpec.$,
        null,
        [
          reason
        ]);
  }
};

/**
 * An object which receives request messages for the RemotingSource
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.RemotingSourceReceiver = class {
  /**
   * @param {!media.mojom.RemotingSourceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.RemotingSourceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.RemotingSourceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemotingSourceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.RemotingSource_OnSinkAvailable_ParamsSpec.$,
        null,
        impl.onSinkAvailable.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.RemotingSource_OnSinkGone_ParamsSpec.$,
        null,
        impl.onSinkGone.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.mojom.RemotingSource_OnStarted_ParamsSpec.$,
        null,
        impl.onStarted.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        media.mojom.RemotingSource_OnStartFailed_ParamsSpec.$,
        null,
        impl.onStartFailed.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        media.mojom.RemotingSource_OnMessageFromSink_ParamsSpec.$,
        null,
        impl.onMessageFromSink.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        media.mojom.RemotingSource_OnStopped_ParamsSpec.$,
        null,
        impl.onStopped.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.RemotingSource = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.RemotingSource";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.RemotingSourceRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.RemotingSourceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the RemotingSource
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.RemotingSourceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.RemotingSourceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemotingSourceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onSinkAvailable =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.RemotingSource_OnSinkAvailable_ParamsSpec.$,
        null,
        this.onSinkAvailable.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onSinkGone =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.RemotingSource_OnSinkGone_ParamsSpec.$,
        null,
        this.onSinkGone.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onStarted =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.mojom.RemotingSource_OnStarted_ParamsSpec.$,
        null,
        this.onStarted.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onStartFailed =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        media.mojom.RemotingSource_OnStartFailed_ParamsSpec.$,
        null,
        this.onStartFailed.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMessageFromSink =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        media.mojom.RemotingSource_OnMessageFromSink_ParamsSpec.$,
        null,
        this.onMessageFromSink.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onStopped =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        media.mojom.RemotingSource_OnStopped_ParamsSpec.$,
        null,
        this.onStopped.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.RemoteePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.Remotee.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.RemoteeInterface }
 */
media.mojom.RemoteeRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.RemoteePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.RemoteePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.RemoteePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.mojom.RemotingSinkRemote } sink
   */

  onRemotingSinkReady(
      sink) {
    this.proxy.sendMessage(
        0,
        media.mojom.Remotee_OnRemotingSinkReady_ParamsSpec.$,
        null,
        [
          sink
        ]);
  }

  
  /**
   * @param { !Array<!number> } message
   */

  sendMessageToSource(
      message) {
    this.proxy.sendMessage(
        1,
        media.mojom.Remotee_SendMessageToSource_ParamsSpec.$,
        null,
        [
          message
        ]);
  }

  
  /**
   * @param { ?media.mojom.RemotingDataStreamReceiverRemote } audioStream
   * @param { ?media.mojom.RemotingDataStreamReceiverRemote } videoStream
   */

  startDataStreams(
      audioStream,
      videoStream) {
    this.proxy.sendMessage(
        2,
        media.mojom.Remotee_StartDataStreams_ParamsSpec.$,
        null,
        [
          audioStream,
          videoStream
        ]);
  }

  
  /**
   * @param { !number } audioFrameCount
   * @param { !number } videoFrameCount
   */

  onFlushUntil(
      audioFrameCount,
      videoFrameCount) {
    this.proxy.sendMessage(
        3,
        media.mojom.Remotee_OnFlushUntil_ParamsSpec.$,
        null,
        [
          audioFrameCount,
          videoFrameCount
        ]);
  }

  
  /**
   * @param { !gfx.mojom.Size } size
   */

  onVideoNaturalSizeChange(
      size) {
    this.proxy.sendMessage(
        4,
        media.mojom.Remotee_OnVideoNaturalSizeChange_ParamsSpec.$,
        null,
        [
          size
        ]);
  }
};

/**
 * An object which receives request messages for the Remotee
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.RemoteeReceiver = class {
  /**
   * @param {!media.mojom.RemoteeInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.RemoteeRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.RemoteeRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemoteeRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.Remotee_OnRemotingSinkReady_ParamsSpec.$,
        null,
        impl.onRemotingSinkReady.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.Remotee_SendMessageToSource_ParamsSpec.$,
        null,
        impl.sendMessageToSource.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.mojom.Remotee_StartDataStreams_ParamsSpec.$,
        null,
        impl.startDataStreams.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        media.mojom.Remotee_OnFlushUntil_ParamsSpec.$,
        null,
        impl.onFlushUntil.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        media.mojom.Remotee_OnVideoNaturalSizeChange_ParamsSpec.$,
        null,
        impl.onVideoNaturalSizeChange.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.Remotee = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.Remotee";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.RemoteeRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.RemoteeRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the Remotee
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.RemoteeCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.RemoteeRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemoteeRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onRemotingSinkReady =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.Remotee_OnRemotingSinkReady_ParamsSpec.$,
        null,
        this.onRemotingSinkReady.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.sendMessageToSource =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.Remotee_SendMessageToSource_ParamsSpec.$,
        null,
        this.sendMessageToSource.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.startDataStreams =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.mojom.Remotee_StartDataStreams_ParamsSpec.$,
        null,
        this.startDataStreams.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onFlushUntil =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        media.mojom.Remotee_OnFlushUntil_ParamsSpec.$,
        null,
        this.onFlushUntil.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onVideoNaturalSizeChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        media.mojom.Remotee_OnVideoNaturalSizeChange_ParamsSpec.$,
        null,
        this.onVideoNaturalSizeChange.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.RemotingSinkPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.RemotingSink.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.RemotingSinkInterface }
 */
media.mojom.RemotingSinkRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.RemotingSinkPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.RemotingSinkPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.RemotingSinkPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Array<!number> } message
   */

  onMessageFromSource(
      message) {
    this.proxy.sendMessage(
        0,
        media.mojom.RemotingSink_OnMessageFromSource_ParamsSpec.$,
        null,
        [
          message
        ]);
  }
};

/**
 * An object which receives request messages for the RemotingSink
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.RemotingSinkReceiver = class {
  /**
   * @param {!media.mojom.RemotingSinkInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.RemotingSinkRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.RemotingSinkRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemotingSinkRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.RemotingSink_OnMessageFromSource_ParamsSpec.$,
        null,
        impl.onMessageFromSource.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.RemotingSink = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.RemotingSink";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.RemotingSinkRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.RemotingSinkRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the RemotingSink
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.RemotingSinkCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.RemotingSinkRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemotingSinkRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMessageFromSource =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.RemotingSink_OnMessageFromSource_ParamsSpec.$,
        null,
        this.onMessageFromSource.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.RemotingDataStreamReceiverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.RemotingDataStreamReceiver.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.RemotingDataStreamReceiverInterface }
 */
media.mojom.RemotingDataStreamReceiverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.RemotingDataStreamReceiverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.RemotingDataStreamReceiverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.RemotingDataStreamReceiverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !MojoHandle } dataPipe
   */

  initializeDataPipe(
      dataPipe) {
    this.proxy.sendMessage(
        0,
        media.mojom.RemotingDataStreamReceiver_InitializeDataPipe_ParamsSpec.$,
        null,
        [
          dataPipe
        ]);
  }

  
  /**
   * @param { !number } frameCount
   * @param { !media.mojom.DecoderBuffer } buffer
   */

  receiveFrame(
      frameCount,
      buffer) {
    this.proxy.sendMessage(
        1,
        media.mojom.RemotingDataStreamReceiver_ReceiveFrame_ParamsSpec.$,
        null,
        [
          frameCount,
          buffer
        ]);
  }

  
  /**
   * @param { !number } frameCount
   */

  flushUntil(
      frameCount) {
    this.proxy.sendMessage(
        2,
        media.mojom.RemotingDataStreamReceiver_FlushUntil_ParamsSpec.$,
        null,
        [
          frameCount
        ]);
  }
};

/**
 * An object which receives request messages for the RemotingDataStreamReceiver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.RemotingDataStreamReceiverReceiver = class {
  /**
   * @param {!media.mojom.RemotingDataStreamReceiverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.RemotingDataStreamReceiverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.RemotingDataStreamReceiverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemotingDataStreamReceiverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.RemotingDataStreamReceiver_InitializeDataPipe_ParamsSpec.$,
        null,
        impl.initializeDataPipe.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.RemotingDataStreamReceiver_ReceiveFrame_ParamsSpec.$,
        null,
        impl.receiveFrame.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.mojom.RemotingDataStreamReceiver_FlushUntil_ParamsSpec.$,
        null,
        impl.flushUntil.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.RemotingDataStreamReceiver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.RemotingDataStreamReceiver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.RemotingDataStreamReceiverRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.RemotingDataStreamReceiverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the RemotingDataStreamReceiver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.RemotingDataStreamReceiverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.RemotingDataStreamReceiverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.RemotingDataStreamReceiverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.initializeDataPipe =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.RemotingDataStreamReceiver_InitializeDataPipe_ParamsSpec.$,
        null,
        this.initializeDataPipe.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.receiveFrame =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.RemotingDataStreamReceiver_ReceiveFrame_ParamsSpec.$,
        null,
        this.receiveFrame.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.flushUntil =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.mojom.RemotingDataStreamReceiver_FlushUntil_ParamsSpec.$,
        null,
        this.flushUntil.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemoterFactory_Create_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingDataStreamSender_SendFrame_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingDataStreamSender_CancelInFlightData_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Remoter_Start_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Remoter_StartDataStreams_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Remoter_Stop_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Remoter_SendMessageToSink_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Remoter_EstimateTransmissionCapacity_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Remoter_EstimateTransmissionCapacity_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingSource_OnSinkAvailable_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingSource_OnSinkGone_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingSource_OnStarted_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingSource_OnStartFailed_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingSource_OnMessageFromSink_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingSource_OnStopped_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Remotee_OnRemotingSinkReady_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Remotee_SendMessageToSource_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Remotee_StartDataStreams_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Remotee_OnFlushUntil_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Remotee_OnVideoNaturalSizeChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingSink_OnMessageFromSource_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingDataStreamReceiver_InitializeDataPipe_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingDataStreamReceiver_ReceiveFrame_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.RemotingDataStreamReceiver_FlushUntil_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    media.mojom.RemoterFactory_Create_ParamsSpec.$,
    'RemoterFactory_Create_Params',
    [
      mojo.internal.StructField(
        'source', 0,
        0,
        mojo.internal.InterfaceProxy(media.mojom.RemotingSourceRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'remoter', 8,
        0,
        mojo.internal.InterfaceRequest(media.mojom.RemoterPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.RemoterFactory_Create_Params = class {
  constructor() {
    /** @export { !media.mojom.RemotingSourceRemote } */
    this.source;
    /** @export { !media.mojom.RemoterPendingReceiver } */
    this.remoter;
  }
};




mojo.internal.Struct(
    media.mojom.RemotingDataStreamSender_SendFrame_ParamsSpec.$,
    'RemotingDataStreamSender_SendFrame_Params',
    [
      mojo.internal.StructField(
        'frameSize', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.RemotingDataStreamSender_SendFrame_Params = class {
  constructor() {
    /** @export { !number } */
    this.frameSize;
  }
};




mojo.internal.Struct(
    media.mojom.RemotingDataStreamSender_CancelInFlightData_ParamsSpec.$,
    'RemotingDataStreamSender_CancelInFlightData_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.RemotingDataStreamSender_CancelInFlightData_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.Remoter_Start_ParamsSpec.$,
    'Remoter_Start_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.Remoter_Start_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.Remoter_StartDataStreams_ParamsSpec.$,
    'Remoter_StartDataStreams_Params',
    [
      mojo.internal.StructField(
        'audioPipe', 0,
        0,
        mojo.internal.Handle,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'videoPipe', 4,
        0,
        mojo.internal.Handle,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'audioSender', 8,
        0,
        mojo.internal.InterfaceRequest(media.mojom.RemotingDataStreamSenderPendingReceiver),
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'videoSender', 12,
        0,
        mojo.internal.InterfaceRequest(media.mojom.RemotingDataStreamSenderPendingReceiver),
        null,
        true /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.Remoter_StartDataStreams_Params = class {
  constructor() {
    /** @export { (MojoHandle|undefined) } */
    this.audioPipe;
    /** @export { (MojoHandle|undefined) } */
    this.videoPipe;
    /** @export { (media.mojom.RemotingDataStreamSenderPendingReceiver|undefined) } */
    this.audioSender;
    /** @export { (media.mojom.RemotingDataStreamSenderPendingReceiver|undefined) } */
    this.videoSender;
  }
};




mojo.internal.Struct(
    media.mojom.Remoter_Stop_ParamsSpec.$,
    'Remoter_Stop_Params',
    [
      mojo.internal.StructField(
        'reason', 0,
        0,
        media.mojom.RemotingStopReasonSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.Remoter_Stop_Params = class {
  constructor() {
    /** @export { !media.mojom.RemotingStopReason } */
    this.reason;
  }
};




mojo.internal.Struct(
    media.mojom.Remoter_SendMessageToSink_ParamsSpec.$,
    'Remoter_SendMessageToSink_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.Remoter_SendMessageToSink_Params = class {
  constructor() {
    /** @export { !Array<!number> } */
    this.message;
  }
};




mojo.internal.Struct(
    media.mojom.Remoter_EstimateTransmissionCapacity_ParamsSpec.$,
    'Remoter_EstimateTransmissionCapacity_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.Remoter_EstimateTransmissionCapacity_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.Remoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
    'Remoter_EstimateTransmissionCapacity_ResponseParams',
    [
      mojo.internal.StructField(
        'rate', 0,
        0,
        mojo.internal.Double,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.Remoter_EstimateTransmissionCapacity_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.rate;
  }
};




mojo.internal.Struct(
    media.mojom.RemotingSource_OnSinkAvailable_ParamsSpec.$,
    'RemotingSource_OnSinkAvailable_Params',
    [
      mojo.internal.StructField(
        'metadata', 0,
        0,
        media.mojom.RemotingSinkMetadataSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.RemotingSource_OnSinkAvailable_Params = class {
  constructor() {
    /** @export { !media.mojom.RemotingSinkMetadata } */
    this.metadata;
  }
};




mojo.internal.Struct(
    media.mojom.RemotingSource_OnSinkGone_ParamsSpec.$,
    'RemotingSource_OnSinkGone_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.RemotingSource_OnSinkGone_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.RemotingSource_OnStarted_ParamsSpec.$,
    'RemotingSource_OnStarted_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.RemotingSource_OnStarted_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.RemotingSource_OnStartFailed_ParamsSpec.$,
    'RemotingSource_OnStartFailed_Params',
    [
      mojo.internal.StructField(
        'reason', 0,
        0,
        media.mojom.RemotingStartFailReasonSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.RemotingSource_OnStartFailed_Params = class {
  constructor() {
    /** @export { !media.mojom.RemotingStartFailReason } */
    this.reason;
  }
};




mojo.internal.Struct(
    media.mojom.RemotingSource_OnMessageFromSink_ParamsSpec.$,
    'RemotingSource_OnMessageFromSink_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.RemotingSource_OnMessageFromSink_Params = class {
  constructor() {
    /** @export { !Array<!number> } */
    this.message;
  }
};




mojo.internal.Struct(
    media.mojom.RemotingSource_OnStopped_ParamsSpec.$,
    'RemotingSource_OnStopped_Params',
    [
      mojo.internal.StructField(
        'reason', 0,
        0,
        media.mojom.RemotingStopReasonSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.RemotingSource_OnStopped_Params = class {
  constructor() {
    /** @export { !media.mojom.RemotingStopReason } */
    this.reason;
  }
};




mojo.internal.Struct(
    media.mojom.Remotee_OnRemotingSinkReady_ParamsSpec.$,
    'Remotee_OnRemotingSinkReady_Params',
    [
      mojo.internal.StructField(
        'sink', 0,
        0,
        mojo.internal.InterfaceProxy(media.mojom.RemotingSinkRemote),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.Remotee_OnRemotingSinkReady_Params = class {
  constructor() {
    /** @export { !media.mojom.RemotingSinkRemote } */
    this.sink;
  }
};




mojo.internal.Struct(
    media.mojom.Remotee_SendMessageToSource_ParamsSpec.$,
    'Remotee_SendMessageToSource_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.Remotee_SendMessageToSource_Params = class {
  constructor() {
    /** @export { !Array<!number> } */
    this.message;
  }
};




mojo.internal.Struct(
    media.mojom.Remotee_StartDataStreams_ParamsSpec.$,
    'Remotee_StartDataStreams_Params',
    [
      mojo.internal.StructField(
        'audioStream', 0,
        0,
        mojo.internal.InterfaceProxy(media.mojom.RemotingDataStreamReceiverRemote),
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'videoStream', 8,
        0,
        mojo.internal.InterfaceProxy(media.mojom.RemotingDataStreamReceiverRemote),
        null,
        true /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.Remotee_StartDataStreams_Params = class {
  constructor() {
    /** @export { (media.mojom.RemotingDataStreamReceiverRemote|undefined) } */
    this.audioStream;
    /** @export { (media.mojom.RemotingDataStreamReceiverRemote|undefined) } */
    this.videoStream;
  }
};




mojo.internal.Struct(
    media.mojom.Remotee_OnFlushUntil_ParamsSpec.$,
    'Remotee_OnFlushUntil_Params',
    [
      mojo.internal.StructField(
        'audioFrameCount', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'videoFrameCount', 4,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.Remotee_OnFlushUntil_Params = class {
  constructor() {
    /** @export { !number } */
    this.audioFrameCount;
    /** @export { !number } */
    this.videoFrameCount;
  }
};




mojo.internal.Struct(
    media.mojom.Remotee_OnVideoNaturalSizeChange_ParamsSpec.$,
    'Remotee_OnVideoNaturalSizeChange_Params',
    [
      mojo.internal.StructField(
        'size', 0,
        0,
        gfx.mojom.SizeSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.Remotee_OnVideoNaturalSizeChange_Params = class {
  constructor() {
    /** @export { !gfx.mojom.Size } */
    this.size;
  }
};




mojo.internal.Struct(
    media.mojom.RemotingSink_OnMessageFromSource_ParamsSpec.$,
    'RemotingSink_OnMessageFromSource_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.RemotingSink_OnMessageFromSource_Params = class {
  constructor() {
    /** @export { !Array<!number> } */
    this.message;
  }
};




mojo.internal.Struct(
    media.mojom.RemotingDataStreamReceiver_InitializeDataPipe_ParamsSpec.$,
    'RemotingDataStreamReceiver_InitializeDataPipe_Params',
    [
      mojo.internal.StructField(
        'dataPipe', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.RemotingDataStreamReceiver_InitializeDataPipe_Params = class {
  constructor() {
    /** @export { !MojoHandle } */
    this.dataPipe;
  }
};




mojo.internal.Struct(
    media.mojom.RemotingDataStreamReceiver_ReceiveFrame_ParamsSpec.$,
    'RemotingDataStreamReceiver_ReceiveFrame_Params',
    [
      mojo.internal.StructField(
        'frameCount', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'buffer', 8,
        0,
        media.mojom.DecoderBufferSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.RemotingDataStreamReceiver_ReceiveFrame_Params = class {
  constructor() {
    /** @export { !number } */
    this.frameCount;
    /** @export { !media.mojom.DecoderBuffer } */
    this.buffer;
  }
};




mojo.internal.Struct(
    media.mojom.RemotingDataStreamReceiver_FlushUntil_ParamsSpec.$,
    'RemotingDataStreamReceiver_FlushUntil_Params',
    [
      mojo.internal.StructField(
        'frameCount', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.RemotingDataStreamReceiver_FlushUntil_Params = class {
  constructor() {
    /** @export { !number } */
    this.frameCount;
  }
};


