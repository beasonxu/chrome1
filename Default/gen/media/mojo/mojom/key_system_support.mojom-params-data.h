// media/mojo/mojom/key_system_support.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_KEY_SYSTEM_SUPPORT_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_KEY_SYSTEM_SUPPORT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {

class ValidationContext;
class  KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, mojo::internal::Pointer<internal::KeySystemCapability_Data>>> key_systems;

 private:
  friend class mojo::internal::MessageFragment<KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data>;

  KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data();
  ~KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data() = delete;
};
static_assert(sizeof(KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data) == 16,
              "Bad sizeof(KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data)");
class  KeySystemSupport_AddObserver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;

 private:
  friend class mojo::internal::MessageFragment<KeySystemSupport_AddObserver_Params_Data>;

  KeySystemSupport_AddObserver_Params_Data();
  ~KeySystemSupport_AddObserver_Params_Data() = delete;
};
static_assert(sizeof(KeySystemSupport_AddObserver_Params_Data) == 16,
              "Bad sizeof(KeySystemSupport_AddObserver_Params_Data)");

}  // namespace internal


class KeySystemSupportObserver_OnKeySystemSupportUpdated_ParamsDataView {
 public:
  KeySystemSupportObserver_OnKeySystemSupportUpdated_ParamsDataView() = default;

  KeySystemSupportObserver_OnKeySystemSupportUpdated_ParamsDataView(
      internal::KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeySystemsDataView(
      mojo::MapDataView<mojo::StringDataView, KeySystemCapabilityDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeySystems(UserType* output) {
    
    auto* pointer = data_->key_systems.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, ::media::mojom::KeySystemCapabilityDataView>>(
        pointer, output, message_);
  }
 private:
  internal::KeySystemSupportObserver_OnKeySystemSupportUpdated_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class KeySystemSupport_AddObserver_ParamsDataView {
 public:
  KeySystemSupport_AddObserver_ParamsDataView() = default;

  KeySystemSupport_AddObserver_ParamsDataView(
      internal::KeySystemSupport_AddObserver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::media::mojom::KeySystemSupportObserverInterfaceBase>>(
            &data_->observer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::KeySystemSupport_AddObserver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void KeySystemSupportObserver_OnKeySystemSupportUpdated_ParamsDataView::GetKeySystemsDataView(
    mojo::MapDataView<mojo::StringDataView, KeySystemCapabilityDataView>* output) {
  auto pointer = data_->key_systems.Get();
  *output = mojo::MapDataView<mojo::StringDataView, KeySystemCapabilityDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_MOJO_MOJOM_KEY_SYSTEM_SUPPORT_MOJOM_PARAMS_DATA_H_