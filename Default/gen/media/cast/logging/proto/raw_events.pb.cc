// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raw_events.proto

#include "raw_events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace media {
namespace cast {
namespace proto {
PROTOBUF_CONSTEXPR GeneralDescription::GeneralDescription(
    ::_pbi::ConstantInitialized)
  : product_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , product_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , os_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GeneralDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeneralDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeneralDescriptionDefaultTypeInternal() {}
  union {
    GeneralDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeneralDescriptionDefaultTypeInternal _GeneralDescription_default_instance_;
PROTOBUF_CONSTEXPR LogMetadata::LogMetadata(
    ::_pbi::ConstantInitialized)
  : extra_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , general_description_(nullptr)
  , is_audio_(false)
  , first_rtp_timestamp_(0u)
  , num_frame_events_(0)
  , num_packet_events_(0)
  , reference_timestamp_ms_at_unix_epoch_(int64_t{0}){}
struct LogMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogMetadataDefaultTypeInternal() {}
  union {
    LogMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogMetadataDefaultTypeInternal _LogMetadata_default_instance_;
PROTOBUF_CONSTEXPR AggregatedFrameEvent::AggregatedFrameEvent(
    ::_pbi::ConstantInitialized)
  : event_type_()
  , _event_type_cached_byte_size_(0)
  , event_timestamp_ms_()
  , _event_timestamp_ms_cached_byte_size_(0)
  , relative_rtp_timestamp_(0u)
  , encoded_frame_size_(0)
  , delay_millis_(int64_t{0})
  , key_frame_(false)
  , target_bitrate_(0)
  , width_(0)
  , height_(0)
  , encoder_cpu_percent_utilized_(0)
  , idealized_bitrate_percent_utilized_(0){}
struct AggregatedFrameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregatedFrameEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregatedFrameEventDefaultTypeInternal() {}
  union {
    AggregatedFrameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregatedFrameEventDefaultTypeInternal _AggregatedFrameEvent_default_instance_;
PROTOBUF_CONSTEXPR BasePacketEvent::BasePacketEvent(
    ::_pbi::ConstantInitialized)
  : event_type_()
  , _event_type_cached_byte_size_(0)
  , event_timestamp_ms_()
  , _event_timestamp_ms_cached_byte_size_(0)
  , packet_id_(0)
  , size_(0){}
struct BasePacketEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BasePacketEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BasePacketEventDefaultTypeInternal() {}
  union {
    BasePacketEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BasePacketEventDefaultTypeInternal _BasePacketEvent_default_instance_;
PROTOBUF_CONSTEXPR AggregatedPacketEvent::AggregatedPacketEvent(
    ::_pbi::ConstantInitialized)
  : base_packet_event_()
  , relative_rtp_timestamp_(0u){}
struct AggregatedPacketEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregatedPacketEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregatedPacketEventDefaultTypeInternal() {}
  union {
    AggregatedPacketEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregatedPacketEventDefaultTypeInternal _AggregatedPacketEvent_default_instance_;
}  // namespace proto
}  // namespace cast
}  // namespace media
namespace media {
namespace cast {
namespace proto {
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EventType_strings[38] = {};

static const char EventType_names[] =
  "AUDIO_ACK_SENT"
  "AUDIO_FRAME_CAPTURE_BEGIN"
  "AUDIO_FRAME_CAPTURE_END"
  "AUDIO_FRAME_DECODED"
  "AUDIO_FRAME_ENCODED"
  "AUDIO_PACKET_RECEIVED"
  "AUDIO_PACKET_RETRANSMITTED"
  "AUDIO_PACKET_SENT_TO_NETWORK"
  "AUDIO_PLAYOUT_DELAY"
  "DUPLICATE_AUDIO_PACKET_RECEIVED"
  "DUPLICATE_VIDEO_PACKET_RECEIVED"
  "FRAME_ACK_RECEIVED"
  "FRAME_ACK_SENT"
  "FRAME_CAPTURE_BEGIN"
  "FRAME_CAPTURE_END"
  "FRAME_DECODED"
  "FRAME_ENCODED"
  "FRAME_PLAYOUT"
  "JITTER_MS"
  "PACKET_LOSS"
  "PACKET_RECEIVED"
  "PACKET_RETRANSMITTED"
  "PACKET_RTX_REJECTED"
  "PACKET_SENT_TO_NETWORK"
  "REMB_BITRATE"
  "RTT_MS"
  "UNKNOWN"
  "VIDEO_ACK_RECEIVED"
  "VIDEO_ACK_SENT"
  "VIDEO_FRAME_CAPTURE_BEGIN"
  "VIDEO_FRAME_CAPTURE_END"
  "VIDEO_FRAME_DECODED"
  "VIDEO_FRAME_ENCODED"
  "VIDEO_FRAME_SENT_TO_ENCODER"
  "VIDEO_PACKET_RECEIVED"
  "VIDEO_PACKET_RETRANSMITTED"
  "VIDEO_PACKET_SENT_TO_NETWORK"
  "VIDEO_RENDER_DELAY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EventType_entries[] = {
  { {EventType_names + 0, 14}, 6 },
  { {EventType_names + 14, 25}, 9 },
  { {EventType_names + 39, 23}, 8 },
  { {EventType_names + 62, 19}, 12 },
  { {EventType_names + 81, 19}, 10 },
  { {EventType_names + 100, 21}, 25 },
  { {EventType_names + 121, 26}, 23 },
  { {EventType_names + 147, 28}, 21 },
  { {EventType_names + 175, 19}, 11 },
  { {EventType_names + 194, 31}, 27 },
  { {EventType_names + 225, 31}, 28 },
  { {EventType_names + 256, 18}, 32 },
  { {EventType_names + 274, 14}, 33 },
  { {EventType_names + 288, 19}, 29 },
  { {EventType_names + 307, 17}, 30 },
  { {EventType_names + 324, 13}, 34 },
  { {EventType_names + 337, 13}, 31 },
  { {EventType_names + 350, 13}, 35 },
  { {EventType_names + 363, 9}, 3 },
  { {EventType_names + 372, 11}, 2 },
  { {EventType_names + 383, 15}, 38 },
  { {EventType_names + 398, 20}, 37 },
  { {EventType_names + 418, 19}, 39 },
  { {EventType_names + 437, 22}, 36 },
  { {EventType_names + 459, 12}, 5 },
  { {EventType_names + 471, 6}, 1 },
  { {EventType_names + 477, 7}, 0 },
  { {EventType_names + 484, 18}, 4 },
  { {EventType_names + 502, 14}, 7 },
  { {EventType_names + 516, 25}, 13 },
  { {EventType_names + 541, 23}, 14 },
  { {EventType_names + 564, 19}, 17 },
  { {EventType_names + 583, 19}, 16 },
  { {EventType_names + 602, 27}, 15 },
  { {EventType_names + 629, 21}, 26 },
  { {EventType_names + 650, 26}, 24 },
  { {EventType_names + 676, 28}, 22 },
  { {EventType_names + 704, 18}, 18 },
};

static const int EventType_entries_by_number[] = {
  26, // 0 -> UNKNOWN
  25, // 1 -> RTT_MS
  19, // 2 -> PACKET_LOSS
  18, // 3 -> JITTER_MS
  27, // 4 -> VIDEO_ACK_RECEIVED
  24, // 5 -> REMB_BITRATE
  0, // 6 -> AUDIO_ACK_SENT
  28, // 7 -> VIDEO_ACK_SENT
  2, // 8 -> AUDIO_FRAME_CAPTURE_END
  1, // 9 -> AUDIO_FRAME_CAPTURE_BEGIN
  4, // 10 -> AUDIO_FRAME_ENCODED
  8, // 11 -> AUDIO_PLAYOUT_DELAY
  3, // 12 -> AUDIO_FRAME_DECODED
  29, // 13 -> VIDEO_FRAME_CAPTURE_BEGIN
  30, // 14 -> VIDEO_FRAME_CAPTURE_END
  33, // 15 -> VIDEO_FRAME_SENT_TO_ENCODER
  32, // 16 -> VIDEO_FRAME_ENCODED
  31, // 17 -> VIDEO_FRAME_DECODED
  37, // 18 -> VIDEO_RENDER_DELAY
  7, // 21 -> AUDIO_PACKET_SENT_TO_NETWORK
  36, // 22 -> VIDEO_PACKET_SENT_TO_NETWORK
  6, // 23 -> AUDIO_PACKET_RETRANSMITTED
  35, // 24 -> VIDEO_PACKET_RETRANSMITTED
  5, // 25 -> AUDIO_PACKET_RECEIVED
  34, // 26 -> VIDEO_PACKET_RECEIVED
  9, // 27 -> DUPLICATE_AUDIO_PACKET_RECEIVED
  10, // 28 -> DUPLICATE_VIDEO_PACKET_RECEIVED
  13, // 29 -> FRAME_CAPTURE_BEGIN
  14, // 30 -> FRAME_CAPTURE_END
  16, // 31 -> FRAME_ENCODED
  11, // 32 -> FRAME_ACK_RECEIVED
  12, // 33 -> FRAME_ACK_SENT
  15, // 34 -> FRAME_DECODED
  17, // 35 -> FRAME_PLAYOUT
  23, // 36 -> PACKET_SENT_TO_NETWORK
  21, // 37 -> PACKET_RETRANSMITTED
  20, // 38 -> PACKET_RECEIVED
  22, // 39 -> PACKET_RTX_REJECTED
};

const std::string& EventType_Name(
    EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EventType_entries,
          EventType_entries_by_number,
          38, EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EventType_entries,
      EventType_entries_by_number,
      38, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EventType_strings[idx].get();
}
bool EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EventType_entries, 38, name, &int_value);
  if (success) {
    *value = static_cast<EventType>(int_value);
  }
  return success;
}

// ===================================================================

class GeneralDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<GeneralDescription>()._has_bits_);
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_product_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_os(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GeneralDescription::GeneralDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:media.cast.proto.GeneralDescription)
}
GeneralDescription::GeneralDescription(const GeneralDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_product()) {
    product_.Set(from._internal_product(), 
      GetArenaForAllocation());
  }
  product_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    product_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_product_version()) {
    product_version_.Set(from._internal_product_version(), 
      GetArenaForAllocation());
  }
  os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_os()) {
    os_.Set(from._internal_os(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.GeneralDescription)
}

inline void GeneralDescription::SharedCtor() {
product_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  product_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
product_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  product_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
os_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GeneralDescription::~GeneralDescription() {
  // @@protoc_insertion_point(destructor:media.cast.proto.GeneralDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GeneralDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_.Destroy();
  product_version_.Destroy();
  os_.Destroy();
}

void GeneralDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeneralDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.GeneralDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      product_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      product_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      os_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GeneralDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_product();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string product_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_product_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string os = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_os();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeneralDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media.cast.proto.GeneralDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string product = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product(), target);
  }

  // optional string product_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_product_version(), target);
  }

  // optional string os = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_os(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media.cast.proto.GeneralDescription)
  return target;
}

size_t GeneralDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.GeneralDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string product = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product());
    }

    // optional string product_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product_version());
    }

    // optional string os = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_os());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralDescription::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GeneralDescription*>(
      &from));
}

void GeneralDescription::MergeFrom(const GeneralDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.GeneralDescription)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_product(from._internal_product());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_product_version(from._internal_product_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_os(from._internal_os());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GeneralDescription::CopyFrom(const GeneralDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.GeneralDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralDescription::IsInitialized() const {
  return true;
}

void GeneralDescription::InternalSwap(GeneralDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &product_, lhs_arena,
      &other->product_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &product_version_, lhs_arena,
      &other->product_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &os_, lhs_arena,
      &other->os_, rhs_arena
  );
}

std::string GeneralDescription::GetTypeName() const {
  return "media.cast.proto.GeneralDescription";
}


// ===================================================================

class LogMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<LogMetadata>()._has_bits_);
  static void set_has_is_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_first_rtp_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_frame_events(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_packet_events(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reference_timestamp_ms_at_unix_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_extra_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::media::cast::proto::GeneralDescription& general_description(const LogMetadata* msg);
  static void set_has_general_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::media::cast::proto::GeneralDescription&
LogMetadata::_Internal::general_description(const LogMetadata* msg) {
  return *msg->general_description_;
}
LogMetadata::LogMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:media.cast.proto.LogMetadata)
}
LogMetadata::LogMetadata(const LogMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  extra_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extra_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extra_data()) {
    extra_data_.Set(from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_general_description()) {
    general_description_ = new ::media::cast::proto::GeneralDescription(*from.general_description_);
  } else {
    general_description_ = nullptr;
  }
  ::memcpy(&is_audio_, &from.is_audio_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_timestamp_ms_at_unix_epoch_) -
    reinterpret_cast<char*>(&is_audio_)) + sizeof(reference_timestamp_ms_at_unix_epoch_));
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.LogMetadata)
}

inline void LogMetadata::SharedCtor() {
extra_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extra_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&general_description_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reference_timestamp_ms_at_unix_epoch_) -
    reinterpret_cast<char*>(&general_description_)) + sizeof(reference_timestamp_ms_at_unix_epoch_));
}

LogMetadata::~LogMetadata() {
  // @@protoc_insertion_point(destructor:media.cast.proto.LogMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extra_data_.Destroy();
  if (this != internal_default_instance()) delete general_description_;
}

void LogMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.LogMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      extra_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(general_description_ != nullptr);
      general_description_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&is_audio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reference_timestamp_ms_at_unix_epoch_) -
        reinterpret_cast<char*>(&is_audio_)) + sizeof(reference_timestamp_ms_at_unix_epoch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LogMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_audio(&has_bits);
          is_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_rtp_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_first_rtp_timestamp(&has_bits);
          first_rtp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_frame_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_frame_events(&has_bits);
          num_frame_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_packet_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_packet_events(&has_bits);
          num_packet_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_reference_timestamp_ms_at_unix_epoch(&has_bits);
          reference_timestamp_ms_at_unix_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string extra_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .media.cast.proto.GeneralDescription general_description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_general_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media.cast.proto.LogMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_audio = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_audio(), target);
  }

  // optional uint32 first_rtp_timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_first_rtp_timestamp(), target);
  }

  // optional int32 num_frame_events = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_frame_events(), target);
  }

  // optional int32 num_packet_events = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_packet_events(), target);
  }

  // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_reference_timestamp_ms_at_unix_epoch(), target);
  }

  // optional string extra_data = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_extra_data(), target);
  }

  // optional .media.cast.proto.GeneralDescription general_description = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::general_description(this),
        _Internal::general_description(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media.cast.proto.LogMetadata)
  return target;
}

size_t LogMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.LogMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string extra_data = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extra_data());
    }

    // optional .media.cast.proto.GeneralDescription general_description = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *general_description_);
    }

    // optional bool is_audio = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 first_rtp_timestamp = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first_rtp_timestamp());
    }

    // optional int32 num_frame_events = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_frame_events());
    }

    // optional int32 num_packet_events = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_packet_events());
    }

    // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reference_timestamp_ms_at_unix_epoch());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LogMetadata*>(
      &from));
}

void LogMetadata::MergeFrom(const LogMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.LogMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_extra_data(from._internal_extra_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_general_description()->::media::cast::proto::GeneralDescription::MergeFrom(from._internal_general_description());
    }
    if (cached_has_bits & 0x00000004u) {
      is_audio_ = from.is_audio_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_rtp_timestamp_ = from.first_rtp_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_frame_events_ = from.num_frame_events_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_packet_events_ = from.num_packet_events_;
    }
    if (cached_has_bits & 0x00000040u) {
      reference_timestamp_ms_at_unix_epoch_ = from.reference_timestamp_ms_at_unix_epoch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LogMetadata::CopyFrom(const LogMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.LogMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetadata::IsInitialized() const {
  return true;
}

void LogMetadata::InternalSwap(LogMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extra_data_, lhs_arena,
      &other->extra_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogMetadata, reference_timestamp_ms_at_unix_epoch_)
      + sizeof(LogMetadata::reference_timestamp_ms_at_unix_epoch_)
      - PROTOBUF_FIELD_OFFSET(LogMetadata, general_description_)>(
          reinterpret_cast<char*>(&general_description_),
          reinterpret_cast<char*>(&other->general_description_));
}

std::string LogMetadata::GetTypeName() const {
  return "media.cast.proto.LogMetadata";
}


// ===================================================================

class AggregatedFrameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AggregatedFrameEvent>()._has_bits_);
  static void set_has_relative_rtp_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encoded_frame_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delay_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_bitrate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_encoder_cpu_percent_utilized(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_idealized_bitrate_percent_utilized(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

AggregatedFrameEvent::AggregatedFrameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  event_type_(arena),
  event_timestamp_ms_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:media.cast.proto.AggregatedFrameEvent)
}
AggregatedFrameEvent::AggregatedFrameEvent(const AggregatedFrameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      event_type_(from.event_type_),
      event_timestamp_ms_(from.event_timestamp_ms_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&relative_rtp_timestamp_, &from.relative_rtp_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&idealized_bitrate_percent_utilized_) -
    reinterpret_cast<char*>(&relative_rtp_timestamp_)) + sizeof(idealized_bitrate_percent_utilized_));
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.AggregatedFrameEvent)
}

inline void AggregatedFrameEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&relative_rtp_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&idealized_bitrate_percent_utilized_) -
    reinterpret_cast<char*>(&relative_rtp_timestamp_)) + sizeof(idealized_bitrate_percent_utilized_));
}

AggregatedFrameEvent::~AggregatedFrameEvent() {
  // @@protoc_insertion_point(destructor:media.cast.proto.AggregatedFrameEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregatedFrameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggregatedFrameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregatedFrameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.AggregatedFrameEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_type_.Clear();
  event_timestamp_ms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&relative_rtp_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encoder_cpu_percent_utilized_) -
        reinterpret_cast<char*>(&relative_rtp_timestamp_)) + sizeof(encoder_cpu_percent_utilized_));
  }
  idealized_bitrate_percent_utilized_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AggregatedFrameEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 relative_rtp_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_relative_rtp_timestamp(&has_bits);
          relative_rtp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_event_type(), ptr, ctx, ::media::cast::proto::EventType_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::cast::proto::EventType_IsValid(val))) {
            _internal_add_event_type(static_cast<::media::cast::proto::EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int64 event_timestamp_ms = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_event_timestamp_ms(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_event_timestamp_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 encoded_frame_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_encoded_frame_size(&has_bits);
          encoded_frame_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 delay_millis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_delay_millis(&has_bits);
          delay_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool key_frame = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_key_frame(&has_bits);
          key_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_bitrate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_target_bitrate(&has_bits);
          target_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 encoder_cpu_percent_utilized = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_encoder_cpu_percent_utilized(&has_bits);
          encoder_cpu_percent_utilized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 idealized_bitrate_percent_utilized = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_idealized_bitrate_percent_utilized(&has_bits);
          idealized_bitrate_percent_utilized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregatedFrameEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media.cast.proto.AggregatedFrameEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 relative_rtp_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_relative_rtp_timestamp(), target);
  }

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  {
    int byte_size = _event_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, event_type_, byte_size, target);
    }
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  {
    int byte_size = _event_timestamp_ms_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_event_timestamp_ms(), byte_size, target);
    }
  }

  // optional int32 encoded_frame_size = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_encoded_frame_size(), target);
  }

  // optional int64 delay_millis = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_delay_millis(), target);
  }

  // optional bool key_frame = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_key_frame(), target);
  }

  // optional int32 target_bitrate = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_target_bitrate(), target);
  }

  // optional int32 width = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_width(), target);
  }

  // optional int32 height = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_height(), target);
  }

  // optional int32 encoder_cpu_percent_utilized = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_encoder_cpu_percent_utilized(), target);
  }

  // optional int32 idealized_bitrate_percent_utilized = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_idealized_bitrate_percent_utilized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media.cast.proto.AggregatedFrameEvent)
  return target;
}

size_t AggregatedFrameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.AggregatedFrameEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_event_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_event_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _event_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->event_timestamp_ms_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _event_timestamp_ms_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 relative_rtp_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_relative_rtp_timestamp());
    }

    // optional int32 encoded_frame_size = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encoded_frame_size());
    }

    // optional int64 delay_millis = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_delay_millis());
    }

    // optional bool key_frame = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 target_bitrate = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_bitrate());
    }

    // optional int32 width = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 height = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

    // optional int32 encoder_cpu_percent_utilized = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encoder_cpu_percent_utilized());
    }

  }
  // optional int32 idealized_bitrate_percent_utilized = 11;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_idealized_bitrate_percent_utilized());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatedFrameEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AggregatedFrameEvent*>(
      &from));
}

void AggregatedFrameEvent::MergeFrom(const AggregatedFrameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.AggregatedFrameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  event_type_.MergeFrom(from.event_type_);
  event_timestamp_ms_.MergeFrom(from.event_timestamp_ms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      relative_rtp_timestamp_ = from.relative_rtp_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      encoded_frame_size_ = from.encoded_frame_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      delay_millis_ = from.delay_millis_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_frame_ = from.key_frame_;
    }
    if (cached_has_bits & 0x00000010u) {
      target_bitrate_ = from.target_bitrate_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      encoder_cpu_percent_utilized_ = from.encoder_cpu_percent_utilized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_idealized_bitrate_percent_utilized(from._internal_idealized_bitrate_percent_utilized());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AggregatedFrameEvent::CopyFrom(const AggregatedFrameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.AggregatedFrameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatedFrameEvent::IsInitialized() const {
  return true;
}

void AggregatedFrameEvent::InternalSwap(AggregatedFrameEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_type_.InternalSwap(&other->event_type_);
  event_timestamp_ms_.InternalSwap(&other->event_timestamp_ms_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregatedFrameEvent, idealized_bitrate_percent_utilized_)
      + sizeof(AggregatedFrameEvent::idealized_bitrate_percent_utilized_)
      - PROTOBUF_FIELD_OFFSET(AggregatedFrameEvent, relative_rtp_timestamp_)>(
          reinterpret_cast<char*>(&relative_rtp_timestamp_),
          reinterpret_cast<char*>(&other->relative_rtp_timestamp_));
}

std::string AggregatedFrameEvent::GetTypeName() const {
  return "media.cast.proto.AggregatedFrameEvent";
}


// ===================================================================

class BasePacketEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BasePacketEvent>()._has_bits_);
  static void set_has_packet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BasePacketEvent::BasePacketEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  event_type_(arena),
  event_timestamp_ms_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:media.cast.proto.BasePacketEvent)
}
BasePacketEvent::BasePacketEvent(const BasePacketEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      event_type_(from.event_type_),
      event_timestamp_ms_(from.event_timestamp_ms_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&packet_id_, &from.packet_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&packet_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.BasePacketEvent)
}

inline void BasePacketEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packet_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&packet_id_)) + sizeof(size_));
}

BasePacketEvent::~BasePacketEvent() {
  // @@protoc_insertion_point(destructor:media.cast.proto.BasePacketEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BasePacketEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BasePacketEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasePacketEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.BasePacketEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_type_.Clear();
  event_timestamp_ms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&packet_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&packet_id_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BasePacketEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 packet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packet_id(&has_bits);
          packet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_event_type(), ptr, ctx, ::media::cast::proto::EventType_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::cast::proto::EventType_IsValid(val))) {
            _internal_add_event_type(static_cast<::media::cast::proto::EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int64 event_timestamp_ms = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_event_timestamp_ms(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_event_timestamp_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasePacketEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media.cast.proto.BasePacketEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packet_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_packet_id(), target);
  }

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  {
    int byte_size = _event_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, event_type_, byte_size, target);
    }
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  {
    int byte_size = _event_timestamp_ms_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_event_timestamp_ms(), byte_size, target);
    }
  }

  // optional int32 size = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media.cast.proto.BasePacketEvent)
  return target;
}

size_t BasePacketEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.BasePacketEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_event_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_event_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _event_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->event_timestamp_ms_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _event_timestamp_ms_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 packet_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_packet_id());
    }

    // optional int32 size = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasePacketEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BasePacketEvent*>(
      &from));
}

void BasePacketEvent::MergeFrom(const BasePacketEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.BasePacketEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  event_type_.MergeFrom(from.event_type_);
  event_timestamp_ms_.MergeFrom(from.event_timestamp_ms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      packet_id_ = from.packet_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BasePacketEvent::CopyFrom(const BasePacketEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.BasePacketEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasePacketEvent::IsInitialized() const {
  return true;
}

void BasePacketEvent::InternalSwap(BasePacketEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_type_.InternalSwap(&other->event_type_);
  event_timestamp_ms_.InternalSwap(&other->event_timestamp_ms_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BasePacketEvent, size_)
      + sizeof(BasePacketEvent::size_)
      - PROTOBUF_FIELD_OFFSET(BasePacketEvent, packet_id_)>(
          reinterpret_cast<char*>(&packet_id_),
          reinterpret_cast<char*>(&other->packet_id_));
}

std::string BasePacketEvent::GetTypeName() const {
  return "media.cast.proto.BasePacketEvent";
}


// ===================================================================

class AggregatedPacketEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AggregatedPacketEvent>()._has_bits_);
  static void set_has_relative_rtp_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AggregatedPacketEvent::AggregatedPacketEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  base_packet_event_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:media.cast.proto.AggregatedPacketEvent)
}
AggregatedPacketEvent::AggregatedPacketEvent(const AggregatedPacketEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      base_packet_event_(from.base_packet_event_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  relative_rtp_timestamp_ = from.relative_rtp_timestamp_;
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.AggregatedPacketEvent)
}

inline void AggregatedPacketEvent::SharedCtor() {
relative_rtp_timestamp_ = 0u;
}

AggregatedPacketEvent::~AggregatedPacketEvent() {
  // @@protoc_insertion_point(destructor:media.cast.proto.AggregatedPacketEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregatedPacketEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggregatedPacketEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregatedPacketEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.AggregatedPacketEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_packet_event_.Clear();
  relative_rtp_timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AggregatedPacketEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 relative_rtp_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_relative_rtp_timestamp(&has_bits);
          relative_rtp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_packet_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregatedPacketEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media.cast.proto.AggregatedPacketEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 relative_rtp_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_relative_rtp_timestamp(), target);
  }

  // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_base_packet_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_base_packet_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media.cast.proto.AggregatedPacketEvent)
  return target;
}

size_t AggregatedPacketEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.AggregatedPacketEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
  total_size += 1UL * this->_internal_base_packet_event_size();
  for (const auto& msg : this->base_packet_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 relative_rtp_timestamp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_relative_rtp_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatedPacketEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AggregatedPacketEvent*>(
      &from));
}

void AggregatedPacketEvent::MergeFrom(const AggregatedPacketEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.AggregatedPacketEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  base_packet_event_.MergeFrom(from.base_packet_event_);
  if (from._internal_has_relative_rtp_timestamp()) {
    _internal_set_relative_rtp_timestamp(from._internal_relative_rtp_timestamp());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AggregatedPacketEvent::CopyFrom(const AggregatedPacketEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.AggregatedPacketEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatedPacketEvent::IsInitialized() const {
  return true;
}

void AggregatedPacketEvent::InternalSwap(AggregatedPacketEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  base_packet_event_.InternalSwap(&other->base_packet_event_);
  swap(relative_rtp_timestamp_, other->relative_rtp_timestamp_);
}

std::string AggregatedPacketEvent::GetTypeName() const {
  return "media.cast.proto.AggregatedPacketEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cast
}  // namespace media
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::media::cast::proto::GeneralDescription*
Arena::CreateMaybeMessage< ::media::cast::proto::GeneralDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media::cast::proto::GeneralDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::media::cast::proto::LogMetadata*
Arena::CreateMaybeMessage< ::media::cast::proto::LogMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media::cast::proto::LogMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::media::cast::proto::AggregatedFrameEvent*
Arena::CreateMaybeMessage< ::media::cast::proto::AggregatedFrameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media::cast::proto::AggregatedFrameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::media::cast::proto::BasePacketEvent*
Arena::CreateMaybeMessage< ::media::cast::proto::BasePacketEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media::cast::proto::BasePacketEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::media::cast::proto::AggregatedPacketEvent*
Arena::CreateMaybeMessage< ::media::cast::proto::AggregatedPacketEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media::cast::proto::AggregatedPacketEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
