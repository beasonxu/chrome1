// cc/mojom/render_frame_metadata.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CC_MOJOM_RENDER_FRAME_METADATA_MOJOM_BLINK_TEST_UTILS_H_
#define CC_MOJOM_RENDER_FRAME_METADATA_MOJOM_BLINK_TEST_UTILS_H_

#include "cc/mojom/render_frame_metadata.mojom-blink.h"
#include "third_party/blink/public/platform/web_common.h"


namespace cc {
namespace mojom {
namespace blink {


class BLINK_PLATFORM_EXPORT RenderFrameMetadataObserverInterceptorForTesting : public RenderFrameMetadataObserver {
  virtual RenderFrameMetadataObserver* GetForwardingInterface() = 0;
  void ReportAllRootScrolls(bool enabled) override;
  void ReportAllFrameSubmissionsForTesting(bool enabled) override;
};
class BLINK_PLATFORM_EXPORT RenderFrameMetadataObserverAsyncWaiter {
 public:
  explicit RenderFrameMetadataObserverAsyncWaiter(RenderFrameMetadataObserver* proxy);

  RenderFrameMetadataObserverAsyncWaiter(const RenderFrameMetadataObserverAsyncWaiter&) = delete;
  RenderFrameMetadataObserverAsyncWaiter& operator=(const RenderFrameMetadataObserverAsyncWaiter&) = delete;

  ~RenderFrameMetadataObserverAsyncWaiter();

 private:
  RenderFrameMetadataObserver* const proxy_;
};


class BLINK_PLATFORM_EXPORT RenderFrameMetadataObserverClientInterceptorForTesting : public RenderFrameMetadataObserverClient {
  virtual RenderFrameMetadataObserverClient* GetForwardingInterface() = 0;
  void OnRenderFrameMetadataChanged(uint32_t frame_token, const ::cc::RenderFrameMetadata& metadata) override;
  void OnFrameSubmissionForTesting(uint32_t frame_token) override;
  void OnRootScrollOffsetChanged(const ::gfx::PointF& root_scroll_offset) override;
};
class BLINK_PLATFORM_EXPORT RenderFrameMetadataObserverClientAsyncWaiter {
 public:
  explicit RenderFrameMetadataObserverClientAsyncWaiter(RenderFrameMetadataObserverClient* proxy);

  RenderFrameMetadataObserverClientAsyncWaiter(const RenderFrameMetadataObserverClientAsyncWaiter&) = delete;
  RenderFrameMetadataObserverClientAsyncWaiter& operator=(const RenderFrameMetadataObserverClientAsyncWaiter&) = delete;

  ~RenderFrameMetadataObserverClientAsyncWaiter();

 private:
  RenderFrameMetadataObserverClient* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace cc

#endif  // CC_MOJOM_RENDER_FRAME_METADATA_MOJOM_BLINK_TEST_UTILS_H_