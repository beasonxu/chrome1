// skia/public/mojom/bitmap.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SKIA_PUBLIC_MOJOM_BITMAP_MOJOM_SHARED_INTERNAL_H_
#define SKIA_PUBLIC_MOJOM_BITMAP_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/big_buffer.mojom-shared-internal.h"
#include "skia/public/mojom/image_info.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace skia {
namespace mojom {
namespace internal {
class BitmapN32_Data;
class BitmapWithArbitraryBpp_Data;
class BitmapMappedFromTrustedProcess_Data;
class InlineBitmap_Data;

#pragma pack(push, 1)
class  BitmapN32_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::BitmapN32ImageInfo_Data> image_info;
  ::mojo_base::mojom::internal::BigBuffer_Data pixel_data;

 private:
  friend class mojo::internal::MessageFragment<BitmapN32_Data>;

  BitmapN32_Data();
  ~BitmapN32_Data() = delete;
};
static_assert(sizeof(BitmapN32_Data) == 32,
              "Bad sizeof(BitmapN32_Data)");
// Used by BitmapN32::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BitmapN32_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BitmapN32_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BitmapN32_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<BitmapN32_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BitmapN32_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  BitmapWithArbitraryBpp_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::ImageInfo_Data> image_info;
  uint64_t UNUSED_row_bytes;
  ::mojo_base::mojom::internal::BigBuffer_Data pixel_data;

 private:
  friend class mojo::internal::MessageFragment<BitmapWithArbitraryBpp_Data>;

  BitmapWithArbitraryBpp_Data();
  ~BitmapWithArbitraryBpp_Data() = delete;
};
static_assert(sizeof(BitmapWithArbitraryBpp_Data) == 40,
              "Bad sizeof(BitmapWithArbitraryBpp_Data)");
// Used by BitmapWithArbitraryBpp::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BitmapWithArbitraryBpp_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BitmapWithArbitraryBpp_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BitmapWithArbitraryBpp_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<BitmapWithArbitraryBpp_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BitmapWithArbitraryBpp_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  BitmapMappedFromTrustedProcess_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::ImageInfo_Data> image_info;
  uint64_t UNUSED_row_bytes;
  ::mojo_base::mojom::internal::BigBuffer_Data pixel_data;

 private:
  friend class mojo::internal::MessageFragment<BitmapMappedFromTrustedProcess_Data>;

  BitmapMappedFromTrustedProcess_Data();
  ~BitmapMappedFromTrustedProcess_Data() = delete;
};
static_assert(sizeof(BitmapMappedFromTrustedProcess_Data) == 40,
              "Bad sizeof(BitmapMappedFromTrustedProcess_Data)");
// Used by BitmapMappedFromTrustedProcess::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BitmapMappedFromTrustedProcess_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BitmapMappedFromTrustedProcess_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BitmapMappedFromTrustedProcess_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<BitmapMappedFromTrustedProcess_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BitmapMappedFromTrustedProcess_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  InlineBitmap_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::BitmapN32ImageInfo_Data> image_info;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> pixel_data;

 private:
  friend class mojo::internal::MessageFragment<InlineBitmap_Data>;

  InlineBitmap_Data();
  ~InlineBitmap_Data() = delete;
};
static_assert(sizeof(InlineBitmap_Data) == 24,
              "Bad sizeof(InlineBitmap_Data)");
// Used by InlineBitmap::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct InlineBitmap_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  InlineBitmap_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~InlineBitmap_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<InlineBitmap_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    InlineBitmap_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace skia

#endif  // SKIA_PUBLIC_MOJOM_BITMAP_MOJOM_SHARED_INTERNAL_H_