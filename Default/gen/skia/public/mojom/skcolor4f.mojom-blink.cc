// skia/public/mojom/skcolor4f.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "skia/public/mojom/skcolor4f.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "skia/public/mojom/skcolor4f.mojom-params-data.h"
#include "skia/public/mojom/skcolor4f.mojom-shared-message-ids.h"

#include "skia/public/mojom/skcolor4f.mojom-blink-import-headers.h"
#include "skia/public/mojom/skcolor4f.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SKIA_PUBLIC_MOJOM_SKCOLOR4F_MOJOM_BLINK_JUMBO_H_
#define SKIA_PUBLIC_MOJOM_SKCOLOR4F_MOJOM_BLINK_JUMBO_H_
#endif



namespace skia {
namespace mojom {
namespace blink {
SkColor4f::SkColor4f()
    : r(),
      g(),
      b(),
      a() {}

SkColor4f::SkColor4f(
    float r_in,
    float g_in,
    float b_in,
    float a_in)
    : r(std::move(r_in)),
      g(std::move(g_in)),
      b(std::move(b_in)),
      a(std::move(a_in)) {}

SkColor4f::~SkColor4f() = default;

void SkColor4f::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "r"), this->r,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "g"), this->g,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "b"), this->b,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "a"), this->a,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SkColor4f::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace blink
}  // namespace mojom
}  // namespace skia


namespace mojo {


// static
bool StructTraits<::skia::mojom::blink::SkColor4f::DataView, ::skia::mojom::blink::SkColor4fPtr>::Read(
    ::skia::mojom::blink::SkColor4f::DataView input,
    ::skia::mojom::blink::SkColor4fPtr* output) {
  bool success = true;
  ::skia::mojom::blink::SkColor4fPtr result(::skia::mojom::blink::SkColor4f::New());
  
      if (success)
        result->r = input.r();
      if (success)
        result->g = input.g();
      if (success)
        result->b = input.b();
      if (success)
        result->a = input.a();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace skia {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace skia


#if defined(__clang__)
#pragma clang diagnostic pop
#endif