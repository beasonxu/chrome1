// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_channel.proto

#include "cast_channel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cast {
namespace channel {
PROTOBUF_CONSTEXPR CastMessage::CastMessage(
    ::_pbi::ConstantInitialized)
  : source_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , destination_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , namespace__(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , payload_utf8_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , payload_binary_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , protocol_version_(0)

  , payload_type_(0)

  , continued_(false)
  , remaining_length_(0u){}
struct CastMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastMessageDefaultTypeInternal() {}
  union {
    CastMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastMessageDefaultTypeInternal _CastMessage_default_instance_;
PROTOBUF_CONSTEXPR AuthChallenge::AuthChallenge(
    ::_pbi::ConstantInitialized)
  : sender_nonce_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hash_algorithm_(0)

  , signature_algorithm_(1)
{}
struct AuthChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthChallengeDefaultTypeInternal() {}
  union {
    AuthChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthChallengeDefaultTypeInternal _AuthChallenge_default_instance_;
PROTOBUF_CONSTEXPR AuthResponse::AuthResponse(
    ::_pbi::ConstantInitialized)
  : intermediate_certificate_()
  , signature_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_auth_certificate_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sender_nonce_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , crl_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hash_algorithm_(0)

  , signature_algorithm_(1)
{}
struct AuthResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthResponseDefaultTypeInternal() {}
  union {
    AuthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthResponseDefaultTypeInternal _AuthResponse_default_instance_;
PROTOBUF_CONSTEXPR AuthError::AuthError(
    ::_pbi::ConstantInitialized)
  : error_type_(0)
{}
struct AuthErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthErrorDefaultTypeInternal() {}
  union {
    AuthError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthErrorDefaultTypeInternal _AuthError_default_instance_;
PROTOBUF_CONSTEXPR DeviceAuthMessage::DeviceAuthMessage(
    ::_pbi::ConstantInitialized)
  : challenge_(nullptr)
  , response_(nullptr)
  , error_(nullptr){}
struct DeviceAuthMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceAuthMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceAuthMessageDefaultTypeInternal() {}
  union {
    DeviceAuthMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceAuthMessageDefaultTypeInternal _DeviceAuthMessage_default_instance_;
}  // namespace channel
}  // namespace cast
namespace cast {
namespace channel {
bool CastMessage_ProtocolVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CastMessage_ProtocolVersion_strings[4] = {};

static const char CastMessage_ProtocolVersion_names[] =
  "CASTV2_1_0"
  "CASTV2_1_1"
  "CASTV2_1_2"
  "CASTV2_1_3";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CastMessage_ProtocolVersion_entries[] = {
  { {CastMessage_ProtocolVersion_names + 0, 10}, 0 },
  { {CastMessage_ProtocolVersion_names + 10, 10}, 1 },
  { {CastMessage_ProtocolVersion_names + 20, 10}, 2 },
  { {CastMessage_ProtocolVersion_names + 30, 10}, 3 },
};

static const int CastMessage_ProtocolVersion_entries_by_number[] = {
  0, // 0 -> CASTV2_1_0
  1, // 1 -> CASTV2_1_1
  2, // 2 -> CASTV2_1_2
  3, // 3 -> CASTV2_1_3
};

const std::string& CastMessage_ProtocolVersion_Name(
    CastMessage_ProtocolVersion value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CastMessage_ProtocolVersion_entries,
          CastMessage_ProtocolVersion_entries_by_number,
          4, CastMessage_ProtocolVersion_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CastMessage_ProtocolVersion_entries,
      CastMessage_ProtocolVersion_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CastMessage_ProtocolVersion_strings[idx].get();
}
bool CastMessage_ProtocolVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CastMessage_ProtocolVersion* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CastMessage_ProtocolVersion_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<CastMessage_ProtocolVersion>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CastMessage_ProtocolVersion CastMessage::CASTV2_1_0;
constexpr CastMessage_ProtocolVersion CastMessage::CASTV2_1_1;
constexpr CastMessage_ProtocolVersion CastMessage::CASTV2_1_2;
constexpr CastMessage_ProtocolVersion CastMessage::CASTV2_1_3;
constexpr CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MIN;
constexpr CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MAX;
constexpr int CastMessage::ProtocolVersion_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CastMessage_PayloadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CastMessage_PayloadType_strings[2] = {};

static const char CastMessage_PayloadType_names[] =
  "BINARY"
  "STRING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CastMessage_PayloadType_entries[] = {
  { {CastMessage_PayloadType_names + 0, 6}, 1 },
  { {CastMessage_PayloadType_names + 6, 6}, 0 },
};

static const int CastMessage_PayloadType_entries_by_number[] = {
  1, // 0 -> STRING
  0, // 1 -> BINARY
};

const std::string& CastMessage_PayloadType_Name(
    CastMessage_PayloadType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CastMessage_PayloadType_entries,
          CastMessage_PayloadType_entries_by_number,
          2, CastMessage_PayloadType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CastMessage_PayloadType_entries,
      CastMessage_PayloadType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CastMessage_PayloadType_strings[idx].get();
}
bool CastMessage_PayloadType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CastMessage_PayloadType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CastMessage_PayloadType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CastMessage_PayloadType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CastMessage_PayloadType CastMessage::STRING;
constexpr CastMessage_PayloadType CastMessage::BINARY;
constexpr CastMessage_PayloadType CastMessage::PayloadType_MIN;
constexpr CastMessage_PayloadType CastMessage::PayloadType_MAX;
constexpr int CastMessage::PayloadType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool AuthError_ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AuthError_ErrorType_strings[3] = {};

static const char AuthError_ErrorType_names[] =
  "INTERNAL_ERROR"
  "NO_TLS"
  "SIGNATURE_ALGORITHM_UNAVAILABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AuthError_ErrorType_entries[] = {
  { {AuthError_ErrorType_names + 0, 14}, 0 },
  { {AuthError_ErrorType_names + 14, 6}, 1 },
  { {AuthError_ErrorType_names + 20, 31}, 2 },
};

static const int AuthError_ErrorType_entries_by_number[] = {
  0, // 0 -> INTERNAL_ERROR
  1, // 1 -> NO_TLS
  2, // 2 -> SIGNATURE_ALGORITHM_UNAVAILABLE
};

const std::string& AuthError_ErrorType_Name(
    AuthError_ErrorType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AuthError_ErrorType_entries,
          AuthError_ErrorType_entries_by_number,
          3, AuthError_ErrorType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AuthError_ErrorType_entries,
      AuthError_ErrorType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AuthError_ErrorType_strings[idx].get();
}
bool AuthError_ErrorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthError_ErrorType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AuthError_ErrorType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<AuthError_ErrorType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AuthError_ErrorType AuthError::INTERNAL_ERROR;
constexpr AuthError_ErrorType AuthError::NO_TLS;
constexpr AuthError_ErrorType AuthError::SIGNATURE_ALGORITHM_UNAVAILABLE;
constexpr AuthError_ErrorType AuthError::ErrorType_MIN;
constexpr AuthError_ErrorType AuthError::ErrorType_MAX;
constexpr int AuthError::ErrorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool SignatureAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SignatureAlgorithm_strings[3] = {};

static const char SignatureAlgorithm_names[] =
  "RSASSA_PKCS1v15"
  "RSASSA_PSS"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SignatureAlgorithm_entries[] = {
  { {SignatureAlgorithm_names + 0, 15}, 1 },
  { {SignatureAlgorithm_names + 15, 10}, 2 },
  { {SignatureAlgorithm_names + 25, 11}, 0 },
};

static const int SignatureAlgorithm_entries_by_number[] = {
  2, // 0 -> UNSPECIFIED
  0, // 1 -> RSASSA_PKCS1v15
  1, // 2 -> RSASSA_PSS
};

const std::string& SignatureAlgorithm_Name(
    SignatureAlgorithm value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SignatureAlgorithm_entries,
          SignatureAlgorithm_entries_by_number,
          3, SignatureAlgorithm_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SignatureAlgorithm_entries,
      SignatureAlgorithm_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SignatureAlgorithm_strings[idx].get();
}
bool SignatureAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SignatureAlgorithm* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SignatureAlgorithm_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SignatureAlgorithm>(int_value);
  }
  return success;
}
bool HashAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HashAlgorithm_strings[2] = {};

static const char HashAlgorithm_names[] =
  "SHA1"
  "SHA256";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HashAlgorithm_entries[] = {
  { {HashAlgorithm_names + 0, 4}, 0 },
  { {HashAlgorithm_names + 4, 6}, 1 },
};

static const int HashAlgorithm_entries_by_number[] = {
  0, // 0 -> SHA1
  1, // 1 -> SHA256
};

const std::string& HashAlgorithm_Name(
    HashAlgorithm value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HashAlgorithm_entries,
          HashAlgorithm_entries_by_number,
          2, HashAlgorithm_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HashAlgorithm_entries,
      HashAlgorithm_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HashAlgorithm_strings[idx].get();
}
bool HashAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HashAlgorithm* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HashAlgorithm_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<HashAlgorithm>(int_value);
  }
  return success;
}

// ===================================================================

class CastMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CastMessage>()._has_bits_);
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destination_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_payload_utf8(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_payload_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_continued(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_remaining_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000067) ^ 0x00000067) != 0;
  }
};

CastMessage::CastMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cast.channel.CastMessage)
}
CastMessage::CastMessage(const CastMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  source_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_id()) {
    source_id_.Set(from._internal_source_id(), 
      GetArenaForAllocation());
  }
  destination_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    destination_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_destination_id()) {
    destination_id_.Set(from._internal_destination_id(), 
      GetArenaForAllocation());
  }
  namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_namespace_()) {
    namespace__.Set(from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  payload_utf8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_utf8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload_utf8()) {
    payload_utf8_.Set(from._internal_payload_utf8(), 
      GetArenaForAllocation());
  }
  payload_binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload_binary()) {
    payload_binary_.Set(from._internal_payload_binary(), 
      GetArenaForAllocation());
  }
  ::memcpy(&protocol_version_, &from.protocol_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_length_) -
    reinterpret_cast<char*>(&protocol_version_)) + sizeof(remaining_length_));
  // @@protoc_insertion_point(copy_constructor:cast.channel.CastMessage)
}

inline void CastMessage::SharedCtor() {
source_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
destination_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  destination_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
namespace__.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  namespace__.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_utf8_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_utf8_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_binary_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_binary_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&protocol_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remaining_length_) -
    reinterpret_cast<char*>(&protocol_version_)) + sizeof(remaining_length_));
}

CastMessage::~CastMessage() {
  // @@protoc_insertion_point(destructor:cast.channel.CastMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_id_.Destroy();
  destination_id_.Destroy();
  namespace__.Destroy();
  payload_utf8_.Destroy();
  payload_binary_.Destroy();
}

void CastMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CastMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cast.channel.CastMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      source_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      destination_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      payload_utf8_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      payload_binary_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&protocol_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&continued_) -
        reinterpret_cast<char*>(&protocol_version_)) + sizeof(continued_));
  }
  remaining_length_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .cast.channel.CastMessage.ProtocolVersion protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cast::channel::CastMessage_ProtocolVersion_IsValid(val))) {
            _internal_set_protocol_version(static_cast<::cast::channel::CastMessage_ProtocolVersion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string destination_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_destination_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .cast.channel.CastMessage.PayloadType payload_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cast::channel::CastMessage_PayloadType_IsValid(val))) {
            _internal_set_payload_type(static_cast<::cast::channel::CastMessage_PayloadType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string payload_utf8 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_payload_utf8();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload_binary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_payload_binary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool continued = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_continued(&has_bits);
          continued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 remaining_length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_remaining_length(&has_bits);
          remaining_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cast.channel.CastMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cast.channel.CastMessage.ProtocolVersion protocol_version = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol_version(), target);
  }

  // required string source_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_id(), target);
  }

  // required string destination_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_destination_id(), target);
  }

  // required string namespace = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_namespace_(), target);
  }

  // required .cast.channel.CastMessage.PayloadType payload_type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_payload_type(), target);
  }

  // optional string payload_utf8 = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_payload_utf8(), target);
  }

  // optional bytes payload_binary = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_payload_binary(), target);
  }

  // optional bool continued = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_continued(), target);
  }

  // optional uint32 remaining_length = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_remaining_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cast.channel.CastMessage)
  return target;
}

size_t CastMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cast.channel.CastMessage)
  size_t total_size = 0;

  if (_internal_has_source_id()) {
    // required string source_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_id());
  }

  if (_internal_has_destination_id()) {
    // required string destination_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_id());
  }

  if (_internal_has_namespace_()) {
    // required string namespace = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  if (_internal_has_protocol_version()) {
    // required .cast.channel.CastMessage.ProtocolVersion protocol_version = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol_version());
  }

  if (_internal_has_payload_type()) {
    // required .cast.channel.CastMessage.PayloadType payload_type = 5;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_payload_type());
  }

  return total_size;
}
size_t CastMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast.channel.CastMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000067) ^ 0x00000067) == 0) {  // All required fields are present.
    // required string source_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_id());

    // required string destination_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_id());

    // required string namespace = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());

    // required .cast.channel.CastMessage.ProtocolVersion protocol_version = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol_version());

    // required .cast.channel.CastMessage.PayloadType payload_type = 5;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_payload_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional string payload_utf8 = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_payload_utf8());
    }

    // optional bytes payload_binary = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload_binary());
    }

  }
  // optional bool continued = 8;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 1;
  }

  // optional uint32 remaining_length = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remaining_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastMessage*>(
      &from));
}

void CastMessage::MergeFrom(const CastMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast.channel.CastMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_id(from._internal_source_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_destination_id(from._internal_destination_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_payload_utf8(from._internal_payload_utf8());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_payload_binary(from._internal_payload_binary());
    }
    if (cached_has_bits & 0x00000020u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      payload_type_ = from.payload_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      continued_ = from.continued_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_remaining_length(from._internal_remaining_length());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastMessage::CopyFrom(const CastMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast.channel.CastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CastMessage::InternalSwap(CastMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_id_, lhs_arena,
      &other->source_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &destination_id_, lhs_arena,
      &other->destination_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &namespace__, lhs_arena,
      &other->namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &payload_utf8_, lhs_arena,
      &other->payload_utf8_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &payload_binary_, lhs_arena,
      &other->payload_binary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CastMessage, remaining_length_)
      + sizeof(CastMessage::remaining_length_)
      - PROTOBUF_FIELD_OFFSET(CastMessage, protocol_version_)>(
          reinterpret_cast<char*>(&protocol_version_),
          reinterpret_cast<char*>(&other->protocol_version_));
}

std::string CastMessage::GetTypeName() const {
  return "cast.channel.CastMessage";
}


// ===================================================================

class AuthChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthChallenge>()._has_bits_);
  static void set_has_signature_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sender_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hash_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AuthChallenge::AuthChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cast.channel.AuthChallenge)
}
AuthChallenge::AuthChallenge(const AuthChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sender_nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender_nonce()) {
    sender_nonce_.Set(from._internal_sender_nonce(), 
      GetArenaForAllocation());
  }
  ::memcpy(&hash_algorithm_, &from.hash_algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&signature_algorithm_) -
    reinterpret_cast<char*>(&hash_algorithm_)) + sizeof(signature_algorithm_));
  // @@protoc_insertion_point(copy_constructor:cast.channel.AuthChallenge)
}

inline void AuthChallenge::SharedCtor() {
sender_nonce_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_nonce_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hash_algorithm_ = 0;
signature_algorithm_ = 1;
}

AuthChallenge::~AuthChallenge() {
  // @@protoc_insertion_point(destructor:cast.channel.AuthChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sender_nonce_.Destroy();
}

void AuthChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:cast.channel.AuthChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sender_nonce_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    hash_algorithm_ = 0;
    signature_algorithm_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AuthChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .cast.channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cast::channel::SignatureAlgorithm_IsValid(val))) {
            _internal_set_signature_algorithm(static_cast<::cast::channel::SignatureAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes sender_nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cast.channel.HashAlgorithm hash_algorithm = 3 [default = SHA1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cast::channel::HashAlgorithm_IsValid(val))) {
            _internal_set_hash_algorithm(static_cast<::cast::channel::HashAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cast.channel.AuthChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cast.channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_signature_algorithm(), target);
  }

  // optional bytes sender_nonce = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sender_nonce(), target);
  }

  // optional .cast.channel.HashAlgorithm hash_algorithm = 3 [default = SHA1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_hash_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cast.channel.AuthChallenge)
  return target;
}

size_t AuthChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast.channel.AuthChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes sender_nonce = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sender_nonce());
    }

    // optional .cast.channel.HashAlgorithm hash_algorithm = 3 [default = SHA1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_hash_algorithm());
    }

    // optional .cast.channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_signature_algorithm());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthChallenge::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AuthChallenge*>(
      &from));
}

void AuthChallenge::MergeFrom(const AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast.channel.AuthChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sender_nonce(from._internal_sender_nonce());
    }
    if (cached_has_bits & 0x00000002u) {
      hash_algorithm_ = from.hash_algorithm_;
    }
    if (cached_has_bits & 0x00000004u) {
      signature_algorithm_ = from.signature_algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AuthChallenge::CopyFrom(const AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast.channel.AuthChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthChallenge::IsInitialized() const {
  return true;
}

void AuthChallenge::InternalSwap(AuthChallenge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sender_nonce_, lhs_arena,
      &other->sender_nonce_, rhs_arena
  );
  swap(hash_algorithm_, other->hash_algorithm_);
  swap(signature_algorithm_, other->signature_algorithm_);
}

std::string AuthChallenge::GetTypeName() const {
  return "cast.channel.AuthChallenge";
}


// ===================================================================

class AuthResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthResponse>()._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_auth_certificate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signature_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sender_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hash_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AuthResponse::AuthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  intermediate_certificate_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cast.channel.AuthResponse)
}
AuthResponse::AuthResponse(const AuthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      intermediate_certificate_(from.intermediate_certificate_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    signature_.Set(from._internal_signature(), 
      GetArenaForAllocation());
  }
  client_auth_certificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_auth_certificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_auth_certificate()) {
    client_auth_certificate_.Set(from._internal_client_auth_certificate(), 
      GetArenaForAllocation());
  }
  sender_nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender_nonce()) {
    sender_nonce_.Set(from._internal_sender_nonce(), 
      GetArenaForAllocation());
  }
  crl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    crl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_crl()) {
    crl_.Set(from._internal_crl(), 
      GetArenaForAllocation());
  }
  ::memcpy(&hash_algorithm_, &from.hash_algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&signature_algorithm_) -
    reinterpret_cast<char*>(&hash_algorithm_)) + sizeof(signature_algorithm_));
  // @@protoc_insertion_point(copy_constructor:cast.channel.AuthResponse)
}

inline void AuthResponse::SharedCtor() {
signature_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_auth_certificate_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_auth_certificate_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_nonce_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_nonce_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
crl_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  crl_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hash_algorithm_ = 0;
signature_algorithm_ = 1;
}

AuthResponse::~AuthResponse() {
  // @@protoc_insertion_point(destructor:cast.channel.AuthResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.Destroy();
  client_auth_certificate_.Destroy();
  sender_nonce_.Destroy();
  crl_.Destroy();
}

void AuthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cast.channel.AuthResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intermediate_certificate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      client_auth_certificate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sender_nonce_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      crl_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    hash_algorithm_ = 0;
    signature_algorithm_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AuthResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes client_auth_certificate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_auth_certificate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes intermediate_certificate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_intermediate_certificate();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .cast.channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cast::channel::SignatureAlgorithm_IsValid(val))) {
            _internal_set_signature_algorithm(static_cast<::cast::channel::SignatureAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes sender_nonce = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sender_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cast.channel.HashAlgorithm hash_algorithm = 6 [default = SHA1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cast::channel::HashAlgorithm_IsValid(val))) {
            _internal_set_hash_algorithm(static_cast<::cast::channel::HashAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes crl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_crl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cast.channel.AuthResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // required bytes client_auth_certificate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_client_auth_certificate(), target);
  }

  // repeated bytes intermediate_certificate = 3;
  for (int i = 0, n = this->_internal_intermediate_certificate_size(); i < n; i++) {
    const auto& s = this->_internal_intermediate_certificate(i);
    target = stream->WriteBytes(3, s, target);
  }

  // optional .cast.channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_signature_algorithm(), target);
  }

  // optional bytes sender_nonce = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sender_nonce(), target);
  }

  // optional .cast.channel.HashAlgorithm hash_algorithm = 6 [default = SHA1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_hash_algorithm(), target);
  }

  // optional bytes crl = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_crl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cast.channel.AuthResponse)
  return target;
}

size_t AuthResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cast.channel.AuthResponse)
  size_t total_size = 0;

  if (_internal_has_signature()) {
    // required bytes signature = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  if (_internal_has_client_auth_certificate()) {
    // required bytes client_auth_certificate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_client_auth_certificate());
  }

  return total_size;
}
size_t AuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast.channel.AuthResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes signature = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());

    // required bytes client_auth_certificate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_client_auth_certificate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes intermediate_certificate = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(intermediate_certificate_.size());
  for (int i = 0, n = intermediate_certificate_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      intermediate_certificate_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional bytes sender_nonce = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sender_nonce());
    }

    // optional bytes crl = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_crl());
    }

    // optional .cast.channel.HashAlgorithm hash_algorithm = 6 [default = SHA1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_hash_algorithm());
    }

    // optional .cast.channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_signature_algorithm());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AuthResponse*>(
      &from));
}

void AuthResponse::MergeFrom(const AuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast.channel.AuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  intermediate_certificate_.MergeFrom(from.intermediate_certificate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_client_auth_certificate(from._internal_client_auth_certificate());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sender_nonce(from._internal_sender_nonce());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_crl(from._internal_crl());
    }
    if (cached_has_bits & 0x00000010u) {
      hash_algorithm_ = from.hash_algorithm_;
    }
    if (cached_has_bits & 0x00000020u) {
      signature_algorithm_ = from.signature_algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AuthResponse::CopyFrom(const AuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast.channel.AuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AuthResponse::InternalSwap(AuthResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  intermediate_certificate_.InternalSwap(&other->intermediate_certificate_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_auth_certificate_, lhs_arena,
      &other->client_auth_certificate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sender_nonce_, lhs_arena,
      &other->sender_nonce_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &crl_, lhs_arena,
      &other->crl_, rhs_arena
  );
  swap(hash_algorithm_, other->hash_algorithm_);
  swap(signature_algorithm_, other->signature_algorithm_);
}

std::string AuthResponse::GetTypeName() const {
  return "cast.channel.AuthResponse";
}


// ===================================================================

class AuthError::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthError>()._has_bits_);
  static void set_has_error_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AuthError::AuthError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cast.channel.AuthError)
}
AuthError::AuthError(const AuthError& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  error_type_ = from.error_type_;
  // @@protoc_insertion_point(copy_constructor:cast.channel.AuthError)
}

inline void AuthError::SharedCtor() {
error_type_ = 0;
}

AuthError::~AuthError() {
  // @@protoc_insertion_point(destructor:cast.channel.AuthError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AuthError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthError::Clear() {
// @@protoc_insertion_point(message_clear_start:cast.channel.AuthError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AuthError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .cast.channel.AuthError.ErrorType error_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cast::channel::AuthError_ErrorType_IsValid(val))) {
            _internal_set_error_type(static_cast<::cast::channel::AuthError_ErrorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cast.channel.AuthError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cast.channel.AuthError.ErrorType error_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cast.channel.AuthError)
  return target;
}

size_t AuthError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast.channel.AuthError)
  size_t total_size = 0;

  // required .cast.channel.AuthError.ErrorType error_type = 1;
  if (_internal_has_error_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthError::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AuthError*>(
      &from));
}

void AuthError::MergeFrom(const AuthError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast.channel.AuthError)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error_type()) {
    _internal_set_error_type(from._internal_error_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AuthError::CopyFrom(const AuthError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast.channel.AuthError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthError::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AuthError::InternalSwap(AuthError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_type_, other->error_type_);
}

std::string AuthError::GetTypeName() const {
  return "cast.channel.AuthError";
}


// ===================================================================

class DeviceAuthMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAuthMessage>()._has_bits_);
  static const ::cast::channel::AuthChallenge& challenge(const DeviceAuthMessage* msg);
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cast::channel::AuthResponse& response(const DeviceAuthMessage* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cast::channel::AuthError& error(const DeviceAuthMessage* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cast::channel::AuthChallenge&
DeviceAuthMessage::_Internal::challenge(const DeviceAuthMessage* msg) {
  return *msg->challenge_;
}
const ::cast::channel::AuthResponse&
DeviceAuthMessage::_Internal::response(const DeviceAuthMessage* msg) {
  return *msg->response_;
}
const ::cast::channel::AuthError&
DeviceAuthMessage::_Internal::error(const DeviceAuthMessage* msg) {
  return *msg->error_;
}
DeviceAuthMessage::DeviceAuthMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cast.channel.DeviceAuthMessage)
}
DeviceAuthMessage::DeviceAuthMessage(const DeviceAuthMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_challenge()) {
    challenge_ = new ::cast::channel::AuthChallenge(*from.challenge_);
  } else {
    challenge_ = nullptr;
  }
  if (from._internal_has_response()) {
    response_ = new ::cast::channel::AuthResponse(*from.response_);
  } else {
    response_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::cast::channel::AuthError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cast.channel.DeviceAuthMessage)
}

inline void DeviceAuthMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&challenge_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(error_));
}

DeviceAuthMessage::~DeviceAuthMessage() {
  // @@protoc_insertion_point(destructor:cast.channel.DeviceAuthMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceAuthMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete challenge_;
  if (this != internal_default_instance()) delete response_;
  if (this != internal_default_instance()) delete error_;
}

void DeviceAuthMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceAuthMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cast.channel.DeviceAuthMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(challenge_ != nullptr);
      challenge_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(response_ != nullptr);
      response_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(error_ != nullptr);
      error_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceAuthMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .cast.channel.AuthChallenge challenge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cast.channel.AuthResponse response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cast.channel.AuthError error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceAuthMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cast.channel.DeviceAuthMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cast.channel.AuthChallenge challenge = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::challenge(this),
        _Internal::challenge(this).GetCachedSize(), target, stream);
  }

  // optional .cast.channel.AuthResponse response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // optional .cast.channel.AuthError error = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cast.channel.DeviceAuthMessage)
  return target;
}

size_t DeviceAuthMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast.channel.DeviceAuthMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .cast.channel.AuthChallenge challenge = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *challenge_);
    }

    // optional .cast.channel.AuthResponse response = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_);
    }

    // optional .cast.channel.AuthError error = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *error_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAuthMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeviceAuthMessage*>(
      &from));
}

void DeviceAuthMessage::MergeFrom(const DeviceAuthMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast.channel.DeviceAuthMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_challenge()->::cast::channel::AuthChallenge::MergeFrom(from._internal_challenge());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_response()->::cast::channel::AuthResponse::MergeFrom(from._internal_response());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_error()->::cast::channel::AuthError::MergeFrom(from._internal_error());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeviceAuthMessage::CopyFrom(const DeviceAuthMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast.channel.DeviceAuthMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAuthMessage::IsInitialized() const {
  if (_internal_has_response()) {
    if (!response_->IsInitialized()) return false;
  }
  if (_internal_has_error()) {
    if (!error_->IsInitialized()) return false;
  }
  return true;
}

void DeviceAuthMessage::InternalSwap(DeviceAuthMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceAuthMessage, error_)
      + sizeof(DeviceAuthMessage::error_)
      - PROTOBUF_FIELD_OFFSET(DeviceAuthMessage, challenge_)>(
          reinterpret_cast<char*>(&challenge_),
          reinterpret_cast<char*>(&other->challenge_));
}

std::string DeviceAuthMessage::GetTypeName() const {
  return "cast.channel.DeviceAuthMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace channel
}  // namespace cast
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cast::channel::CastMessage*
Arena::CreateMaybeMessage< ::cast::channel::CastMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cast::channel::CastMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::cast::channel::AuthChallenge*
Arena::CreateMaybeMessage< ::cast::channel::AuthChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cast::channel::AuthChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::cast::channel::AuthResponse*
Arena::CreateMaybeMessage< ::cast::channel::AuthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cast::channel::AuthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cast::channel::AuthError*
Arena::CreateMaybeMessage< ::cast::channel::AuthError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cast::channel::AuthError >(arena);
}
template<> PROTOBUF_NOINLINE ::cast::channel::DeviceAuthMessage*
Arena::CreateMaybeMessage< ::cast::channel::DeviceAuthMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cast::channel::DeviceAuthMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
