// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: revocation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_revocation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_revocation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_revocation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_revocation_2eproto {
  static const uint32_t offsets[];
};
namespace cast {
namespace certificate {
class Crl;
struct CrlDefaultTypeInternal;
extern CrlDefaultTypeInternal _Crl_default_instance_;
class CrlBundle;
struct CrlBundleDefaultTypeInternal;
extern CrlBundleDefaultTypeInternal _CrlBundle_default_instance_;
class SerialNumberRange;
struct SerialNumberRangeDefaultTypeInternal;
extern SerialNumberRangeDefaultTypeInternal _SerialNumberRange_default_instance_;
class TbsCrl;
struct TbsCrlDefaultTypeInternal;
extern TbsCrlDefaultTypeInternal _TbsCrl_default_instance_;
}  // namespace certificate
}  // namespace cast
PROTOBUF_NAMESPACE_OPEN
template<> ::cast::certificate::Crl* Arena::CreateMaybeMessage<::cast::certificate::Crl>(Arena*);
template<> ::cast::certificate::CrlBundle* Arena::CreateMaybeMessage<::cast::certificate::CrlBundle>(Arena*);
template<> ::cast::certificate::SerialNumberRange* Arena::CreateMaybeMessage<::cast::certificate::SerialNumberRange>(Arena*);
template<> ::cast::certificate::TbsCrl* Arena::CreateMaybeMessage<::cast::certificate::TbsCrl>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cast {
namespace certificate {

// ===================================================================

class CrlBundle final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cast.certificate.CrlBundle) */ {
 public:
  inline CrlBundle() : CrlBundle(nullptr) {}
  ~CrlBundle() override;
  explicit PROTOBUF_CONSTEXPR CrlBundle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrlBundle(const CrlBundle& from);
  CrlBundle(CrlBundle&& from) noexcept
    : CrlBundle() {
    *this = ::std::move(from);
  }

  inline CrlBundle& operator=(const CrlBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrlBundle& operator=(CrlBundle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CrlBundle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrlBundle* internal_default_instance() {
    return reinterpret_cast<const CrlBundle*>(
               &_CrlBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CrlBundle& a, CrlBundle& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CrlBundle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrlBundle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrlBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CrlBundle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CrlBundle& from);
  void MergeFrom(const CrlBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CrlBundle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cast.certificate.CrlBundle";
  }
  protected:
  explicit CrlBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrlsFieldNumber = 1,
  };
  // repeated .cast.certificate.Crl crls = 1;
  int crls_size() const;
  private:
  int _internal_crls_size() const;
  public:
  void clear_crls();
  ::cast::certificate::Crl* mutable_crls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::certificate::Crl >*
      mutable_crls();
  private:
  const ::cast::certificate::Crl& _internal_crls(int index) const;
  ::cast::certificate::Crl* _internal_add_crls();
  public:
  const ::cast::certificate::Crl& crls(int index) const;
  ::cast::certificate::Crl* add_crls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::certificate::Crl >&
      crls() const;

  // @@protoc_insertion_point(class_scope:cast.certificate.CrlBundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::certificate::Crl > crls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_revocation_2eproto;
};
// -------------------------------------------------------------------

class Crl final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cast.certificate.Crl) */ {
 public:
  inline Crl() : Crl(nullptr) {}
  ~Crl() override;
  explicit PROTOBUF_CONSTEXPR Crl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Crl(const Crl& from);
  Crl(Crl&& from) noexcept
    : Crl() {
    *this = ::std::move(from);
  }

  inline Crl& operator=(const Crl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crl& operator=(Crl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Crl& default_instance() {
    return *internal_default_instance();
  }
  static inline const Crl* internal_default_instance() {
    return reinterpret_cast<const Crl*>(
               &_Crl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Crl& a, Crl& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Crl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Crl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Crl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Crl>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Crl& from);
  void MergeFrom(const Crl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Crl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cast.certificate.Crl";
  }
  protected:
  explicit Crl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTbsCrlFieldNumber = 1,
    kSignerCertFieldNumber = 2,
    kSignatureFieldNumber = 3,
  };
  // optional bytes tbs_crl = 1;
  bool has_tbs_crl() const;
  private:
  bool _internal_has_tbs_crl() const;
  public:
  void clear_tbs_crl();
  const std::string& tbs_crl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tbs_crl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tbs_crl();
  PROTOBUF_NODISCARD std::string* release_tbs_crl();
  void set_allocated_tbs_crl(std::string* tbs_crl);
  private:
  const std::string& _internal_tbs_crl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tbs_crl(const std::string& value);
  std::string* _internal_mutable_tbs_crl();
  public:

  // optional bytes signer_cert = 2;
  bool has_signer_cert() const;
  private:
  bool _internal_has_signer_cert() const;
  public:
  void clear_signer_cert();
  const std::string& signer_cert() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signer_cert(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signer_cert();
  PROTOBUF_NODISCARD std::string* release_signer_cert();
  void set_allocated_signer_cert(std::string* signer_cert);
  private:
  const std::string& _internal_signer_cert() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signer_cert(const std::string& value);
  std::string* _internal_mutable_signer_cert();
  public:

  // optional bytes signature = 3;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:cast.certificate.Crl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tbs_crl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_cert_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  friend struct ::TableStruct_revocation_2eproto;
};
// -------------------------------------------------------------------

class TbsCrl final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cast.certificate.TbsCrl) */ {
 public:
  inline TbsCrl() : TbsCrl(nullptr) {}
  ~TbsCrl() override;
  explicit PROTOBUF_CONSTEXPR TbsCrl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TbsCrl(const TbsCrl& from);
  TbsCrl(TbsCrl&& from) noexcept
    : TbsCrl() {
    *this = ::std::move(from);
  }

  inline TbsCrl& operator=(const TbsCrl& from) {
    CopyFrom(from);
    return *this;
  }
  inline TbsCrl& operator=(TbsCrl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TbsCrl& default_instance() {
    return *internal_default_instance();
  }
  static inline const TbsCrl* internal_default_instance() {
    return reinterpret_cast<const TbsCrl*>(
               &_TbsCrl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TbsCrl& a, TbsCrl& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TbsCrl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TbsCrl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TbsCrl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TbsCrl>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TbsCrl& from);
  void MergeFrom(const TbsCrl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TbsCrl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cast.certificate.TbsCrl";
  }
  protected:
  explicit TbsCrl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRevokedPublicKeyHashesFieldNumber = 4,
    kRevokedSerialNumberRangesFieldNumber = 5,
    kVersionFieldNumber = 1,
    kNotBeforeSecondsFieldNumber = 2,
    kNotAfterSecondsFieldNumber = 3,
  };
  // repeated bytes revoked_public_key_hashes = 4;
  int revoked_public_key_hashes_size() const;
  private:
  int _internal_revoked_public_key_hashes_size() const;
  public:
  void clear_revoked_public_key_hashes();
  const std::string& revoked_public_key_hashes(int index) const;
  std::string* mutable_revoked_public_key_hashes(int index);
  void set_revoked_public_key_hashes(int index, const std::string& value);
  void set_revoked_public_key_hashes(int index, std::string&& value);
  void set_revoked_public_key_hashes(int index, const char* value);
  void set_revoked_public_key_hashes(int index, const void* value, size_t size);
  std::string* add_revoked_public_key_hashes();
  void add_revoked_public_key_hashes(const std::string& value);
  void add_revoked_public_key_hashes(std::string&& value);
  void add_revoked_public_key_hashes(const char* value);
  void add_revoked_public_key_hashes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& revoked_public_key_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_revoked_public_key_hashes();
  private:
  const std::string& _internal_revoked_public_key_hashes(int index) const;
  std::string* _internal_add_revoked_public_key_hashes();
  public:

  // repeated .cast.certificate.SerialNumberRange revoked_serial_number_ranges = 5;
  int revoked_serial_number_ranges_size() const;
  private:
  int _internal_revoked_serial_number_ranges_size() const;
  public:
  void clear_revoked_serial_number_ranges();
  ::cast::certificate::SerialNumberRange* mutable_revoked_serial_number_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::certificate::SerialNumberRange >*
      mutable_revoked_serial_number_ranges();
  private:
  const ::cast::certificate::SerialNumberRange& _internal_revoked_serial_number_ranges(int index) const;
  ::cast::certificate::SerialNumberRange* _internal_add_revoked_serial_number_ranges();
  public:
  const ::cast::certificate::SerialNumberRange& revoked_serial_number_ranges(int index) const;
  ::cast::certificate::SerialNumberRange* add_revoked_serial_number_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::certificate::SerialNumberRange >&
      revoked_serial_number_ranges() const;

  // optional uint64 version = 1 [default = 0];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint64_t version() const;
  void set_version(uint64_t value);
  private:
  uint64_t _internal_version() const;
  void _internal_set_version(uint64_t value);
  public:

  // optional uint64 not_before_seconds = 2;
  bool has_not_before_seconds() const;
  private:
  bool _internal_has_not_before_seconds() const;
  public:
  void clear_not_before_seconds();
  uint64_t not_before_seconds() const;
  void set_not_before_seconds(uint64_t value);
  private:
  uint64_t _internal_not_before_seconds() const;
  void _internal_set_not_before_seconds(uint64_t value);
  public:

  // optional uint64 not_after_seconds = 3;
  bool has_not_after_seconds() const;
  private:
  bool _internal_has_not_after_seconds() const;
  public:
  void clear_not_after_seconds();
  uint64_t not_after_seconds() const;
  void set_not_after_seconds(uint64_t value);
  private:
  uint64_t _internal_not_after_seconds() const;
  void _internal_set_not_after_seconds(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cast.certificate.TbsCrl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> revoked_public_key_hashes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::certificate::SerialNumberRange > revoked_serial_number_ranges_;
  uint64_t version_;
  uint64_t not_before_seconds_;
  uint64_t not_after_seconds_;
  friend struct ::TableStruct_revocation_2eproto;
};
// -------------------------------------------------------------------

class SerialNumberRange final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cast.certificate.SerialNumberRange) */ {
 public:
  inline SerialNumberRange() : SerialNumberRange(nullptr) {}
  ~SerialNumberRange() override;
  explicit PROTOBUF_CONSTEXPR SerialNumberRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerialNumberRange(const SerialNumberRange& from);
  SerialNumberRange(SerialNumberRange&& from) noexcept
    : SerialNumberRange() {
    *this = ::std::move(from);
  }

  inline SerialNumberRange& operator=(const SerialNumberRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerialNumberRange& operator=(SerialNumberRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SerialNumberRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerialNumberRange* internal_default_instance() {
    return reinterpret_cast<const SerialNumberRange*>(
               &_SerialNumberRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SerialNumberRange& a, SerialNumberRange& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SerialNumberRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerialNumberRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerialNumberRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerialNumberRange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SerialNumberRange& from);
  void MergeFrom(const SerialNumberRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerialNumberRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cast.certificate.SerialNumberRange";
  }
  protected:
  explicit SerialNumberRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIssuerPublicKeyHashFieldNumber = 1,
    kFirstSerialNumberFieldNumber = 2,
    kLastSerialNumberFieldNumber = 3,
  };
  // optional bytes issuer_public_key_hash = 1;
  bool has_issuer_public_key_hash() const;
  private:
  bool _internal_has_issuer_public_key_hash() const;
  public:
  void clear_issuer_public_key_hash();
  const std::string& issuer_public_key_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_issuer_public_key_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_issuer_public_key_hash();
  PROTOBUF_NODISCARD std::string* release_issuer_public_key_hash();
  void set_allocated_issuer_public_key_hash(std::string* issuer_public_key_hash);
  private:
  const std::string& _internal_issuer_public_key_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issuer_public_key_hash(const std::string& value);
  std::string* _internal_mutable_issuer_public_key_hash();
  public:

  // optional uint64 first_serial_number = 2;
  bool has_first_serial_number() const;
  private:
  bool _internal_has_first_serial_number() const;
  public:
  void clear_first_serial_number();
  uint64_t first_serial_number() const;
  void set_first_serial_number(uint64_t value);
  private:
  uint64_t _internal_first_serial_number() const;
  void _internal_set_first_serial_number(uint64_t value);
  public:

  // optional uint64 last_serial_number = 3;
  bool has_last_serial_number() const;
  private:
  bool _internal_has_last_serial_number() const;
  public:
  void clear_last_serial_number();
  uint64_t last_serial_number() const;
  void set_last_serial_number(uint64_t value);
  private:
  uint64_t _internal_last_serial_number() const;
  void _internal_set_last_serial_number(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cast.certificate.SerialNumberRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_public_key_hash_;
  uint64_t first_serial_number_;
  uint64_t last_serial_number_;
  friend struct ::TableStruct_revocation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CrlBundle

// repeated .cast.certificate.Crl crls = 1;
inline int CrlBundle::_internal_crls_size() const {
  return crls_.size();
}
inline int CrlBundle::crls_size() const {
  return _internal_crls_size();
}
inline void CrlBundle::clear_crls() {
  crls_.Clear();
}
inline ::cast::certificate::Crl* CrlBundle::mutable_crls(int index) {
  // @@protoc_insertion_point(field_mutable:cast.certificate.CrlBundle.crls)
  return crls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::certificate::Crl >*
CrlBundle::mutable_crls() {
  // @@protoc_insertion_point(field_mutable_list:cast.certificate.CrlBundle.crls)
  return &crls_;
}
inline const ::cast::certificate::Crl& CrlBundle::_internal_crls(int index) const {
  return crls_.Get(index);
}
inline const ::cast::certificate::Crl& CrlBundle::crls(int index) const {
  // @@protoc_insertion_point(field_get:cast.certificate.CrlBundle.crls)
  return _internal_crls(index);
}
inline ::cast::certificate::Crl* CrlBundle::_internal_add_crls() {
  return crls_.Add();
}
inline ::cast::certificate::Crl* CrlBundle::add_crls() {
  ::cast::certificate::Crl* _add = _internal_add_crls();
  // @@protoc_insertion_point(field_add:cast.certificate.CrlBundle.crls)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::certificate::Crl >&
CrlBundle::crls() const {
  // @@protoc_insertion_point(field_list:cast.certificate.CrlBundle.crls)
  return crls_;
}

// -------------------------------------------------------------------

// Crl

// optional bytes tbs_crl = 1;
inline bool Crl::_internal_has_tbs_crl() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Crl::has_tbs_crl() const {
  return _internal_has_tbs_crl();
}
inline void Crl::clear_tbs_crl() {
  tbs_crl_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Crl::tbs_crl() const {
  // @@protoc_insertion_point(field_get:cast.certificate.Crl.tbs_crl)
  return _internal_tbs_crl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Crl::set_tbs_crl(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tbs_crl_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cast.certificate.Crl.tbs_crl)
}
inline std::string* Crl::mutable_tbs_crl() {
  std::string* _s = _internal_mutable_tbs_crl();
  // @@protoc_insertion_point(field_mutable:cast.certificate.Crl.tbs_crl)
  return _s;
}
inline const std::string& Crl::_internal_tbs_crl() const {
  return tbs_crl_.Get();
}
inline void Crl::_internal_set_tbs_crl(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tbs_crl_.Set(value, GetArenaForAllocation());
}
inline std::string* Crl::_internal_mutable_tbs_crl() {
  _has_bits_[0] |= 0x00000001u;
  return tbs_crl_.Mutable(GetArenaForAllocation());
}
inline std::string* Crl::release_tbs_crl() {
  // @@protoc_insertion_point(field_release:cast.certificate.Crl.tbs_crl)
  if (!_internal_has_tbs_crl()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tbs_crl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tbs_crl_.IsDefault()) {
    tbs_crl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Crl::set_allocated_tbs_crl(std::string* tbs_crl) {
  if (tbs_crl != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tbs_crl_.SetAllocated(tbs_crl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tbs_crl_.IsDefault()) {
    tbs_crl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cast.certificate.Crl.tbs_crl)
}

// optional bytes signer_cert = 2;
inline bool Crl::_internal_has_signer_cert() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Crl::has_signer_cert() const {
  return _internal_has_signer_cert();
}
inline void Crl::clear_signer_cert() {
  signer_cert_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Crl::signer_cert() const {
  // @@protoc_insertion_point(field_get:cast.certificate.Crl.signer_cert)
  return _internal_signer_cert();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Crl::set_signer_cert(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 signer_cert_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cast.certificate.Crl.signer_cert)
}
inline std::string* Crl::mutable_signer_cert() {
  std::string* _s = _internal_mutable_signer_cert();
  // @@protoc_insertion_point(field_mutable:cast.certificate.Crl.signer_cert)
  return _s;
}
inline const std::string& Crl::_internal_signer_cert() const {
  return signer_cert_.Get();
}
inline void Crl::_internal_set_signer_cert(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signer_cert_.Set(value, GetArenaForAllocation());
}
inline std::string* Crl::_internal_mutable_signer_cert() {
  _has_bits_[0] |= 0x00000002u;
  return signer_cert_.Mutable(GetArenaForAllocation());
}
inline std::string* Crl::release_signer_cert() {
  // @@protoc_insertion_point(field_release:cast.certificate.Crl.signer_cert)
  if (!_internal_has_signer_cert()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = signer_cert_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signer_cert_.IsDefault()) {
    signer_cert_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Crl::set_allocated_signer_cert(std::string* signer_cert) {
  if (signer_cert != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signer_cert_.SetAllocated(signer_cert, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signer_cert_.IsDefault()) {
    signer_cert_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cast.certificate.Crl.signer_cert)
}

// optional bytes signature = 3;
inline bool Crl::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Crl::has_signature() const {
  return _internal_has_signature();
}
inline void Crl::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Crl::signature() const {
  // @@protoc_insertion_point(field_get:cast.certificate.Crl.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Crl::set_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cast.certificate.Crl.signature)
}
inline std::string* Crl::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:cast.certificate.Crl.signature)
  return _s;
}
inline const std::string& Crl::_internal_signature() const {
  return signature_.Get();
}
inline void Crl::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Crl::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000004u;
  return signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Crl::release_signature() {
  // @@protoc_insertion_point(field_release:cast.certificate.Crl.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = signature_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault()) {
    signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Crl::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault()) {
    signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cast.certificate.Crl.signature)
}

// -------------------------------------------------------------------

// TbsCrl

// optional uint64 version = 1 [default = 0];
inline bool TbsCrl::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TbsCrl::has_version() const {
  return _internal_has_version();
}
inline void TbsCrl::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t TbsCrl::_internal_version() const {
  return version_;
}
inline uint64_t TbsCrl::version() const {
  // @@protoc_insertion_point(field_get:cast.certificate.TbsCrl.version)
  return _internal_version();
}
inline void TbsCrl::_internal_set_version(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void TbsCrl::set_version(uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:cast.certificate.TbsCrl.version)
}

// optional uint64 not_before_seconds = 2;
inline bool TbsCrl::_internal_has_not_before_seconds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TbsCrl::has_not_before_seconds() const {
  return _internal_has_not_before_seconds();
}
inline void TbsCrl::clear_not_before_seconds() {
  not_before_seconds_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t TbsCrl::_internal_not_before_seconds() const {
  return not_before_seconds_;
}
inline uint64_t TbsCrl::not_before_seconds() const {
  // @@protoc_insertion_point(field_get:cast.certificate.TbsCrl.not_before_seconds)
  return _internal_not_before_seconds();
}
inline void TbsCrl::_internal_set_not_before_seconds(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  not_before_seconds_ = value;
}
inline void TbsCrl::set_not_before_seconds(uint64_t value) {
  _internal_set_not_before_seconds(value);
  // @@protoc_insertion_point(field_set:cast.certificate.TbsCrl.not_before_seconds)
}

// optional uint64 not_after_seconds = 3;
inline bool TbsCrl::_internal_has_not_after_seconds() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TbsCrl::has_not_after_seconds() const {
  return _internal_has_not_after_seconds();
}
inline void TbsCrl::clear_not_after_seconds() {
  not_after_seconds_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t TbsCrl::_internal_not_after_seconds() const {
  return not_after_seconds_;
}
inline uint64_t TbsCrl::not_after_seconds() const {
  // @@protoc_insertion_point(field_get:cast.certificate.TbsCrl.not_after_seconds)
  return _internal_not_after_seconds();
}
inline void TbsCrl::_internal_set_not_after_seconds(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  not_after_seconds_ = value;
}
inline void TbsCrl::set_not_after_seconds(uint64_t value) {
  _internal_set_not_after_seconds(value);
  // @@protoc_insertion_point(field_set:cast.certificate.TbsCrl.not_after_seconds)
}

// repeated bytes revoked_public_key_hashes = 4;
inline int TbsCrl::_internal_revoked_public_key_hashes_size() const {
  return revoked_public_key_hashes_.size();
}
inline int TbsCrl::revoked_public_key_hashes_size() const {
  return _internal_revoked_public_key_hashes_size();
}
inline void TbsCrl::clear_revoked_public_key_hashes() {
  revoked_public_key_hashes_.Clear();
}
inline std::string* TbsCrl::add_revoked_public_key_hashes() {
  std::string* _s = _internal_add_revoked_public_key_hashes();
  // @@protoc_insertion_point(field_add_mutable:cast.certificate.TbsCrl.revoked_public_key_hashes)
  return _s;
}
inline const std::string& TbsCrl::_internal_revoked_public_key_hashes(int index) const {
  return revoked_public_key_hashes_.Get(index);
}
inline const std::string& TbsCrl::revoked_public_key_hashes(int index) const {
  // @@protoc_insertion_point(field_get:cast.certificate.TbsCrl.revoked_public_key_hashes)
  return _internal_revoked_public_key_hashes(index);
}
inline std::string* TbsCrl::mutable_revoked_public_key_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:cast.certificate.TbsCrl.revoked_public_key_hashes)
  return revoked_public_key_hashes_.Mutable(index);
}
inline void TbsCrl::set_revoked_public_key_hashes(int index, const std::string& value) {
  revoked_public_key_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cast.certificate.TbsCrl.revoked_public_key_hashes)
}
inline void TbsCrl::set_revoked_public_key_hashes(int index, std::string&& value) {
  revoked_public_key_hashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cast.certificate.TbsCrl.revoked_public_key_hashes)
}
inline void TbsCrl::set_revoked_public_key_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  revoked_public_key_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cast.certificate.TbsCrl.revoked_public_key_hashes)
}
inline void TbsCrl::set_revoked_public_key_hashes(int index, const void* value, size_t size) {
  revoked_public_key_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cast.certificate.TbsCrl.revoked_public_key_hashes)
}
inline std::string* TbsCrl::_internal_add_revoked_public_key_hashes() {
  return revoked_public_key_hashes_.Add();
}
inline void TbsCrl::add_revoked_public_key_hashes(const std::string& value) {
  revoked_public_key_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cast.certificate.TbsCrl.revoked_public_key_hashes)
}
inline void TbsCrl::add_revoked_public_key_hashes(std::string&& value) {
  revoked_public_key_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cast.certificate.TbsCrl.revoked_public_key_hashes)
}
inline void TbsCrl::add_revoked_public_key_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  revoked_public_key_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cast.certificate.TbsCrl.revoked_public_key_hashes)
}
inline void TbsCrl::add_revoked_public_key_hashes(const void* value, size_t size) {
  revoked_public_key_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cast.certificate.TbsCrl.revoked_public_key_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TbsCrl::revoked_public_key_hashes() const {
  // @@protoc_insertion_point(field_list:cast.certificate.TbsCrl.revoked_public_key_hashes)
  return revoked_public_key_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TbsCrl::mutable_revoked_public_key_hashes() {
  // @@protoc_insertion_point(field_mutable_list:cast.certificate.TbsCrl.revoked_public_key_hashes)
  return &revoked_public_key_hashes_;
}

// repeated .cast.certificate.SerialNumberRange revoked_serial_number_ranges = 5;
inline int TbsCrl::_internal_revoked_serial_number_ranges_size() const {
  return revoked_serial_number_ranges_.size();
}
inline int TbsCrl::revoked_serial_number_ranges_size() const {
  return _internal_revoked_serial_number_ranges_size();
}
inline void TbsCrl::clear_revoked_serial_number_ranges() {
  revoked_serial_number_ranges_.Clear();
}
inline ::cast::certificate::SerialNumberRange* TbsCrl::mutable_revoked_serial_number_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:cast.certificate.TbsCrl.revoked_serial_number_ranges)
  return revoked_serial_number_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::certificate::SerialNumberRange >*
TbsCrl::mutable_revoked_serial_number_ranges() {
  // @@protoc_insertion_point(field_mutable_list:cast.certificate.TbsCrl.revoked_serial_number_ranges)
  return &revoked_serial_number_ranges_;
}
inline const ::cast::certificate::SerialNumberRange& TbsCrl::_internal_revoked_serial_number_ranges(int index) const {
  return revoked_serial_number_ranges_.Get(index);
}
inline const ::cast::certificate::SerialNumberRange& TbsCrl::revoked_serial_number_ranges(int index) const {
  // @@protoc_insertion_point(field_get:cast.certificate.TbsCrl.revoked_serial_number_ranges)
  return _internal_revoked_serial_number_ranges(index);
}
inline ::cast::certificate::SerialNumberRange* TbsCrl::_internal_add_revoked_serial_number_ranges() {
  return revoked_serial_number_ranges_.Add();
}
inline ::cast::certificate::SerialNumberRange* TbsCrl::add_revoked_serial_number_ranges() {
  ::cast::certificate::SerialNumberRange* _add = _internal_add_revoked_serial_number_ranges();
  // @@protoc_insertion_point(field_add:cast.certificate.TbsCrl.revoked_serial_number_ranges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::certificate::SerialNumberRange >&
TbsCrl::revoked_serial_number_ranges() const {
  // @@protoc_insertion_point(field_list:cast.certificate.TbsCrl.revoked_serial_number_ranges)
  return revoked_serial_number_ranges_;
}

// -------------------------------------------------------------------

// SerialNumberRange

// optional bytes issuer_public_key_hash = 1;
inline bool SerialNumberRange::_internal_has_issuer_public_key_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SerialNumberRange::has_issuer_public_key_hash() const {
  return _internal_has_issuer_public_key_hash();
}
inline void SerialNumberRange::clear_issuer_public_key_hash() {
  issuer_public_key_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SerialNumberRange::issuer_public_key_hash() const {
  // @@protoc_insertion_point(field_get:cast.certificate.SerialNumberRange.issuer_public_key_hash)
  return _internal_issuer_public_key_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerialNumberRange::set_issuer_public_key_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 issuer_public_key_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cast.certificate.SerialNumberRange.issuer_public_key_hash)
}
inline std::string* SerialNumberRange::mutable_issuer_public_key_hash() {
  std::string* _s = _internal_mutable_issuer_public_key_hash();
  // @@protoc_insertion_point(field_mutable:cast.certificate.SerialNumberRange.issuer_public_key_hash)
  return _s;
}
inline const std::string& SerialNumberRange::_internal_issuer_public_key_hash() const {
  return issuer_public_key_hash_.Get();
}
inline void SerialNumberRange::_internal_set_issuer_public_key_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  issuer_public_key_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* SerialNumberRange::_internal_mutable_issuer_public_key_hash() {
  _has_bits_[0] |= 0x00000001u;
  return issuer_public_key_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* SerialNumberRange::release_issuer_public_key_hash() {
  // @@protoc_insertion_point(field_release:cast.certificate.SerialNumberRange.issuer_public_key_hash)
  if (!_internal_has_issuer_public_key_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = issuer_public_key_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (issuer_public_key_hash_.IsDefault()) {
    issuer_public_key_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SerialNumberRange::set_allocated_issuer_public_key_hash(std::string* issuer_public_key_hash) {
  if (issuer_public_key_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  issuer_public_key_hash_.SetAllocated(issuer_public_key_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (issuer_public_key_hash_.IsDefault()) {
    issuer_public_key_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cast.certificate.SerialNumberRange.issuer_public_key_hash)
}

// optional uint64 first_serial_number = 2;
inline bool SerialNumberRange::_internal_has_first_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SerialNumberRange::has_first_serial_number() const {
  return _internal_has_first_serial_number();
}
inline void SerialNumberRange::clear_first_serial_number() {
  first_serial_number_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t SerialNumberRange::_internal_first_serial_number() const {
  return first_serial_number_;
}
inline uint64_t SerialNumberRange::first_serial_number() const {
  // @@protoc_insertion_point(field_get:cast.certificate.SerialNumberRange.first_serial_number)
  return _internal_first_serial_number();
}
inline void SerialNumberRange::_internal_set_first_serial_number(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  first_serial_number_ = value;
}
inline void SerialNumberRange::set_first_serial_number(uint64_t value) {
  _internal_set_first_serial_number(value);
  // @@protoc_insertion_point(field_set:cast.certificate.SerialNumberRange.first_serial_number)
}

// optional uint64 last_serial_number = 3;
inline bool SerialNumberRange::_internal_has_last_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SerialNumberRange::has_last_serial_number() const {
  return _internal_has_last_serial_number();
}
inline void SerialNumberRange::clear_last_serial_number() {
  last_serial_number_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t SerialNumberRange::_internal_last_serial_number() const {
  return last_serial_number_;
}
inline uint64_t SerialNumberRange::last_serial_number() const {
  // @@protoc_insertion_point(field_get:cast.certificate.SerialNumberRange.last_serial_number)
  return _internal_last_serial_number();
}
inline void SerialNumberRange::_internal_set_last_serial_number(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  last_serial_number_ = value;
}
inline void SerialNumberRange::set_last_serial_number(uint64_t value) {
  _internal_set_last_serial_number(value);
  // @@protoc_insertion_point(field_set:cast.certificate.SerialNumberRange.last_serial_number)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace certificate
}  // namespace cast

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_revocation_2eproto
