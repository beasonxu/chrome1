// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: revocation.proto

#include "revocation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cast {
namespace certificate {
PROTOBUF_CONSTEXPR CrlBundle::CrlBundle(
    ::_pbi::ConstantInitialized)
  : crls_(){}
struct CrlBundleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrlBundleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrlBundleDefaultTypeInternal() {}
  union {
    CrlBundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrlBundleDefaultTypeInternal _CrlBundle_default_instance_;
PROTOBUF_CONSTEXPR Crl::Crl(
    ::_pbi::ConstantInitialized)
  : tbs_crl_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , signer_cert_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , signature_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CrlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrlDefaultTypeInternal() {}
  union {
    Crl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrlDefaultTypeInternal _Crl_default_instance_;
PROTOBUF_CONSTEXPR TbsCrl::TbsCrl(
    ::_pbi::ConstantInitialized)
  : revoked_public_key_hashes_()
  , revoked_serial_number_ranges_()
  , version_(uint64_t{0u})
  , not_before_seconds_(uint64_t{0u})
  , not_after_seconds_(uint64_t{0u}){}
struct TbsCrlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TbsCrlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TbsCrlDefaultTypeInternal() {}
  union {
    TbsCrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TbsCrlDefaultTypeInternal _TbsCrl_default_instance_;
PROTOBUF_CONSTEXPR SerialNumberRange::SerialNumberRange(
    ::_pbi::ConstantInitialized)
  : issuer_public_key_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , first_serial_number_(uint64_t{0u})
  , last_serial_number_(uint64_t{0u}){}
struct SerialNumberRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SerialNumberRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SerialNumberRangeDefaultTypeInternal() {}
  union {
    SerialNumberRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SerialNumberRangeDefaultTypeInternal _SerialNumberRange_default_instance_;
}  // namespace certificate
}  // namespace cast
namespace cast {
namespace certificate {

// ===================================================================

class CrlBundle::_Internal {
 public:
};

CrlBundle::CrlBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  crls_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cast.certificate.CrlBundle)
}
CrlBundle::CrlBundle(const CrlBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      crls_(from.crls_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cast.certificate.CrlBundle)
}

inline void CrlBundle::SharedCtor() {
}

CrlBundle::~CrlBundle() {
  // @@protoc_insertion_point(destructor:cast.certificate.CrlBundle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrlBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CrlBundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CrlBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:cast.certificate.CrlBundle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crls_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CrlBundle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cast.certificate.Crl crls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrlBundle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cast.certificate.CrlBundle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cast.certificate.Crl crls = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_crls_size()); i < n; i++) {
    const auto& repfield = this->_internal_crls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cast.certificate.CrlBundle)
  return target;
}

size_t CrlBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast.certificate.CrlBundle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cast.certificate.Crl crls = 1;
  total_size += 1UL * this->_internal_crls_size();
  for (const auto& msg : this->crls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrlBundle::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CrlBundle*>(
      &from));
}

void CrlBundle::MergeFrom(const CrlBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast.certificate.CrlBundle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  crls_.MergeFrom(from.crls_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CrlBundle::CopyFrom(const CrlBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast.certificate.CrlBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrlBundle::IsInitialized() const {
  return true;
}

void CrlBundle::InternalSwap(CrlBundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  crls_.InternalSwap(&other->crls_);
}

std::string CrlBundle::GetTypeName() const {
  return "cast.certificate.CrlBundle";
}


// ===================================================================

class Crl::_Internal {
 public:
  using HasBits = decltype(std::declval<Crl>()._has_bits_);
  static void set_has_tbs_crl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signer_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Crl::Crl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cast.certificate.Crl)
}
Crl::Crl(const Crl& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  tbs_crl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tbs_crl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tbs_crl()) {
    tbs_crl_.Set(from._internal_tbs_crl(), 
      GetArenaForAllocation());
  }
  signer_cert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signer_cert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signer_cert()) {
    signer_cert_.Set(from._internal_signer_cert(), 
      GetArenaForAllocation());
  }
  signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    signature_.Set(from._internal_signature(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cast.certificate.Crl)
}

inline void Crl::SharedCtor() {
tbs_crl_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tbs_crl_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signer_cert_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signer_cert_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Crl::~Crl() {
  // @@protoc_insertion_point(destructor:cast.certificate.Crl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Crl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tbs_crl_.Destroy();
  signer_cert_.Destroy();
  signature_.Destroy();
}

void Crl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Crl::Clear() {
// @@protoc_insertion_point(message_clear_start:cast.certificate.Crl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tbs_crl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signer_cert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      signature_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Crl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes tbs_crl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tbs_crl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signer_cert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signer_cert();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Crl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cast.certificate.Crl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes tbs_crl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tbs_crl(), target);
  }

  // optional bytes signer_cert = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signer_cert(), target);
  }

  // optional bytes signature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cast.certificate.Crl)
  return target;
}

size_t Crl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast.certificate.Crl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes tbs_crl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tbs_crl());
    }

    // optional bytes signer_cert = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signer_cert());
    }

    // optional bytes signature = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Crl::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Crl*>(
      &from));
}

void Crl::MergeFrom(const Crl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast.certificate.Crl)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tbs_crl(from._internal_tbs_crl());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signer_cert(from._internal_signer_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_signature(from._internal_signature());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Crl::CopyFrom(const Crl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast.certificate.Crl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crl::IsInitialized() const {
  return true;
}

void Crl::InternalSwap(Crl* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tbs_crl_, lhs_arena,
      &other->tbs_crl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &signer_cert_, lhs_arena,
      &other->signer_cert_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
}

std::string Crl::GetTypeName() const {
  return "cast.certificate.Crl";
}


// ===================================================================

class TbsCrl::_Internal {
 public:
  using HasBits = decltype(std::declval<TbsCrl>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_not_before_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_not_after_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TbsCrl::TbsCrl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  revoked_public_key_hashes_(arena),
  revoked_serial_number_ranges_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cast.certificate.TbsCrl)
}
TbsCrl::TbsCrl(const TbsCrl& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      revoked_public_key_hashes_(from.revoked_public_key_hashes_),
      revoked_serial_number_ranges_(from.revoked_serial_number_ranges_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&not_after_seconds_) -
    reinterpret_cast<char*>(&version_)) + sizeof(not_after_seconds_));
  // @@protoc_insertion_point(copy_constructor:cast.certificate.TbsCrl)
}

inline void TbsCrl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&not_after_seconds_) -
    reinterpret_cast<char*>(&version_)) + sizeof(not_after_seconds_));
}

TbsCrl::~TbsCrl() {
  // @@protoc_insertion_point(destructor:cast.certificate.TbsCrl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TbsCrl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TbsCrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TbsCrl::Clear() {
// @@protoc_insertion_point(message_clear_start:cast.certificate.TbsCrl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  revoked_public_key_hashes_.Clear();
  revoked_serial_number_ranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&not_after_seconds_) -
        reinterpret_cast<char*>(&version_)) + sizeof(not_after_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TbsCrl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 version = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 not_before_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_not_before_seconds(&has_bits);
          not_before_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 not_after_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_not_after_seconds(&has_bits);
          not_after_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes revoked_public_key_hashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_revoked_public_key_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cast.certificate.SerialNumberRange revoked_serial_number_ranges = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_revoked_serial_number_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TbsCrl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cast.certificate.TbsCrl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 version = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_version(), target);
  }

  // optional uint64 not_before_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_not_before_seconds(), target);
  }

  // optional uint64 not_after_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_not_after_seconds(), target);
  }

  // repeated bytes revoked_public_key_hashes = 4;
  for (int i = 0, n = this->_internal_revoked_public_key_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_revoked_public_key_hashes(i);
    target = stream->WriteBytes(4, s, target);
  }

  // repeated .cast.certificate.SerialNumberRange revoked_serial_number_ranges = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_revoked_serial_number_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_revoked_serial_number_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cast.certificate.TbsCrl)
  return target;
}

size_t TbsCrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast.certificate.TbsCrl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes revoked_public_key_hashes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(revoked_public_key_hashes_.size());
  for (int i = 0, n = revoked_public_key_hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      revoked_public_key_hashes_.Get(i));
  }

  // repeated .cast.certificate.SerialNumberRange revoked_serial_number_ranges = 5;
  total_size += 1UL * this->_internal_revoked_serial_number_ranges_size();
  for (const auto& msg : this->revoked_serial_number_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 version = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_version());
    }

    // optional uint64 not_before_seconds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_not_before_seconds());
    }

    // optional uint64 not_after_seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_not_after_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TbsCrl::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TbsCrl*>(
      &from));
}

void TbsCrl::MergeFrom(const TbsCrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast.certificate.TbsCrl)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  revoked_public_key_hashes_.MergeFrom(from.revoked_public_key_hashes_);
  revoked_serial_number_ranges_.MergeFrom(from.revoked_serial_number_ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      not_before_seconds_ = from.not_before_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      not_after_seconds_ = from.not_after_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TbsCrl::CopyFrom(const TbsCrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast.certificate.TbsCrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TbsCrl::IsInitialized() const {
  return true;
}

void TbsCrl::InternalSwap(TbsCrl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  revoked_public_key_hashes_.InternalSwap(&other->revoked_public_key_hashes_);
  revoked_serial_number_ranges_.InternalSwap(&other->revoked_serial_number_ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TbsCrl, not_after_seconds_)
      + sizeof(TbsCrl::not_after_seconds_)
      - PROTOBUF_FIELD_OFFSET(TbsCrl, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

std::string TbsCrl::GetTypeName() const {
  return "cast.certificate.TbsCrl";
}


// ===================================================================

class SerialNumberRange::_Internal {
 public:
  using HasBits = decltype(std::declval<SerialNumberRange>()._has_bits_);
  static void set_has_issuer_public_key_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SerialNumberRange::SerialNumberRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cast.certificate.SerialNumberRange)
}
SerialNumberRange::SerialNumberRange(const SerialNumberRange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  issuer_public_key_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    issuer_public_key_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_issuer_public_key_hash()) {
    issuer_public_key_hash_.Set(from._internal_issuer_public_key_hash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&first_serial_number_, &from.first_serial_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_serial_number_) -
    reinterpret_cast<char*>(&first_serial_number_)) + sizeof(last_serial_number_));
  // @@protoc_insertion_point(copy_constructor:cast.certificate.SerialNumberRange)
}

inline void SerialNumberRange::SharedCtor() {
issuer_public_key_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  issuer_public_key_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_serial_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_serial_number_) -
    reinterpret_cast<char*>(&first_serial_number_)) + sizeof(last_serial_number_));
}

SerialNumberRange::~SerialNumberRange() {
  // @@protoc_insertion_point(destructor:cast.certificate.SerialNumberRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SerialNumberRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  issuer_public_key_hash_.Destroy();
}

void SerialNumberRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SerialNumberRange::Clear() {
// @@protoc_insertion_point(message_clear_start:cast.certificate.SerialNumberRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    issuer_public_key_hash_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&first_serial_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_serial_number_) -
        reinterpret_cast<char*>(&first_serial_number_)) + sizeof(last_serial_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SerialNumberRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes issuer_public_key_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_issuer_public_key_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 first_serial_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_first_serial_number(&has_bits);
          first_serial_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 last_serial_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_serial_number(&has_bits);
          last_serial_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SerialNumberRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cast.certificate.SerialNumberRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes issuer_public_key_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_issuer_public_key_hash(), target);
  }

  // optional uint64 first_serial_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_first_serial_number(), target);
  }

  // optional uint64 last_serial_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_serial_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cast.certificate.SerialNumberRange)
  return target;
}

size_t SerialNumberRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast.certificate.SerialNumberRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes issuer_public_key_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_issuer_public_key_hash());
    }

    // optional uint64 first_serial_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_first_serial_number());
    }

    // optional uint64 last_serial_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_serial_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerialNumberRange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SerialNumberRange*>(
      &from));
}

void SerialNumberRange::MergeFrom(const SerialNumberRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast.certificate.SerialNumberRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_issuer_public_key_hash(from._internal_issuer_public_key_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      first_serial_number_ = from.first_serial_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_serial_number_ = from.last_serial_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SerialNumberRange::CopyFrom(const SerialNumberRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast.certificate.SerialNumberRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerialNumberRange::IsInitialized() const {
  return true;
}

void SerialNumberRange::InternalSwap(SerialNumberRange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &issuer_public_key_hash_, lhs_arena,
      &other->issuer_public_key_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerialNumberRange, last_serial_number_)
      + sizeof(SerialNumberRange::last_serial_number_)
      - PROTOBUF_FIELD_OFFSET(SerialNumberRange, first_serial_number_)>(
          reinterpret_cast<char*>(&first_serial_number_),
          reinterpret_cast<char*>(&other->first_serial_number_));
}

std::string SerialNumberRange::GetTypeName() const {
  return "cast.certificate.SerialNumberRange";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace certificate
}  // namespace cast
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cast::certificate::CrlBundle*
Arena::CreateMaybeMessage< ::cast::certificate::CrlBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cast::certificate::CrlBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::cast::certificate::Crl*
Arena::CreateMaybeMessage< ::cast::certificate::Crl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cast::certificate::Crl >(arena);
}
template<> PROTOBUF_NOINLINE ::cast::certificate::TbsCrl*
Arena::CreateMaybeMessage< ::cast::certificate::TbsCrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cast::certificate::TbsCrl >(arena);
}
template<> PROTOBUF_NOINLINE ::cast::certificate::SerialNumberRange*
Arena::CreateMaybeMessage< ::cast::certificate::SerialNumberRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cast::certificate::SerialNumberRange >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
