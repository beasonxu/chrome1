// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distributed_point_function.proto

#include "distributed_point_function.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace distributed_point_functions {
PROTOBUF_CONSTEXPR ValueType_Integer::ValueType_Integer(
    ::_pbi::ConstantInitialized)
  : bitsize_(0){}
struct ValueType_IntegerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueType_IntegerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueType_IntegerDefaultTypeInternal() {}
  union {
    ValueType_Integer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueType_IntegerDefaultTypeInternal _ValueType_Integer_default_instance_;
PROTOBUF_CONSTEXPR ValueType_Tuple::ValueType_Tuple(
    ::_pbi::ConstantInitialized)
  : elements_(){}
struct ValueType_TupleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueType_TupleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueType_TupleDefaultTypeInternal() {}
  union {
    ValueType_Tuple _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueType_TupleDefaultTypeInternal _ValueType_Tuple_default_instance_;
PROTOBUF_CONSTEXPR ValueType_IntModN::ValueType_IntModN(
    ::_pbi::ConstantInitialized)
  : base_integer_(nullptr)
  , modulus_(nullptr){}
struct ValueType_IntModNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueType_IntModNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueType_IntModNDefaultTypeInternal() {}
  union {
    ValueType_IntModN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueType_IntModNDefaultTypeInternal _ValueType_IntModN_default_instance_;
PROTOBUF_CONSTEXPR ValueType::ValueType(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ValueTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueTypeDefaultTypeInternal() {}
  union {
    ValueType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueTypeDefaultTypeInternal _ValueType_default_instance_;
PROTOBUF_CONSTEXPR Value_Integer::Value_Integer(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct Value_IntegerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Value_IntegerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Value_IntegerDefaultTypeInternal() {}
  union {
    Value_Integer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Value_IntegerDefaultTypeInternal _Value_Integer_default_instance_;
PROTOBUF_CONSTEXPR Value_Tuple::Value_Tuple(
    ::_pbi::ConstantInitialized)
  : elements_(){}
struct Value_TupleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Value_TupleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Value_TupleDefaultTypeInternal() {}
  union {
    Value_Tuple _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Value_TupleDefaultTypeInternal _Value_Tuple_default_instance_;
PROTOBUF_CONSTEXPR Value::Value(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;
PROTOBUF_CONSTEXPR DpfParameters::DpfParameters(
    ::_pbi::ConstantInitialized)
  : value_type_(nullptr)
  , security_parameter_(0)
  , log_domain_size_(0){}
struct DpfParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DpfParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DpfParametersDefaultTypeInternal() {}
  union {
    DpfParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DpfParametersDefaultTypeInternal _DpfParameters_default_instance_;
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized)
  : high_(uint64_t{0u})
  , low_(uint64_t{0u}){}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
PROTOBUF_CONSTEXPR CorrectionWord::CorrectionWord(
    ::_pbi::ConstantInitialized)
  : value_correction_()
  , seed_(nullptr)
  , control_left_(false)
  , control_right_(false){}
struct CorrectionWordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CorrectionWordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CorrectionWordDefaultTypeInternal() {}
  union {
    CorrectionWord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CorrectionWordDefaultTypeInternal _CorrectionWord_default_instance_;
PROTOBUF_CONSTEXPR DpfKey::DpfKey(
    ::_pbi::ConstantInitialized)
  : correction_words_()
  , last_level_value_correction_()
  , seed_(nullptr)
  , party_(0){}
struct DpfKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DpfKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DpfKeyDefaultTypeInternal() {}
  union {
    DpfKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DpfKeyDefaultTypeInternal _DpfKey_default_instance_;
PROTOBUF_CONSTEXPR PartialEvaluation::PartialEvaluation(
    ::_pbi::ConstantInitialized)
  : prefix_(nullptr)
  , seed_(nullptr)
  , control_bit_(false){}
struct PartialEvaluationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartialEvaluationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartialEvaluationDefaultTypeInternal() {}
  union {
    PartialEvaluation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartialEvaluationDefaultTypeInternal _PartialEvaluation_default_instance_;
PROTOBUF_CONSTEXPR EvaluationContext::EvaluationContext(
    ::_pbi::ConstantInitialized)
  : parameters_()
  , partial_evaluations_()
  , key_(nullptr)
  , previous_hierarchy_level_(0)
  , partial_evaluations_level_(0){}
struct EvaluationContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvaluationContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvaluationContextDefaultTypeInternal() {}
  union {
    EvaluationContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvaluationContextDefaultTypeInternal _EvaluationContext_default_instance_;
}  // namespace distributed_point_functions
namespace distributed_point_functions {

// ===================================================================

class ValueType_Integer::_Internal {
 public:
};

ValueType_Integer::ValueType_Integer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.ValueType.Integer)
}
ValueType_Integer::ValueType_Integer(const ValueType_Integer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bitsize_ = from.bitsize_;
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.ValueType.Integer)
}

inline void ValueType_Integer::SharedCtor() {
bitsize_ = 0;
}

ValueType_Integer::~ValueType_Integer() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.ValueType.Integer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueType_Integer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValueType_Integer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValueType_Integer::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.ValueType.Integer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitsize_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* ValueType_Integer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bitsize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bitsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueType_Integer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.ValueType.Integer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bitsize = 1;
  if (this->_internal_bitsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bitsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.ValueType.Integer)
  return target;
}

size_t ValueType_Integer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.ValueType.Integer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bitsize = 1;
  if (this->_internal_bitsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bitsize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueType_Integer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ValueType_Integer*>(
      &from));
}

void ValueType_Integer::MergeFrom(const ValueType_Integer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.ValueType.Integer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bitsize() != 0) {
    _internal_set_bitsize(from._internal_bitsize());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ValueType_Integer::CopyFrom(const ValueType_Integer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.ValueType.Integer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueType_Integer::IsInitialized() const {
  return true;
}

void ValueType_Integer::InternalSwap(ValueType_Integer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(bitsize_, other->bitsize_);
}

std::string ValueType_Integer::GetTypeName() const {
  return "distributed_point_functions.ValueType.Integer";
}


// ===================================================================

class ValueType_Tuple::_Internal {
 public:
};

ValueType_Tuple::ValueType_Tuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  elements_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.ValueType.Tuple)
}
ValueType_Tuple::ValueType_Tuple(const ValueType_Tuple& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.ValueType.Tuple)
}

inline void ValueType_Tuple::SharedCtor() {
}

ValueType_Tuple::~ValueType_Tuple() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.ValueType.Tuple)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueType_Tuple::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValueType_Tuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValueType_Tuple::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.ValueType.Tuple)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ValueType_Tuple::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .distributed_point_functions.ValueType elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueType_Tuple::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.ValueType.Tuple)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .distributed_point_functions.ValueType elements = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elements_size()); i < n; i++) {
    const auto& repfield = this->_internal_elements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.ValueType.Tuple)
  return target;
}

size_t ValueType_Tuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.ValueType.Tuple)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .distributed_point_functions.ValueType elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueType_Tuple::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ValueType_Tuple*>(
      &from));
}

void ValueType_Tuple::MergeFrom(const ValueType_Tuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.ValueType.Tuple)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ValueType_Tuple::CopyFrom(const ValueType_Tuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.ValueType.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueType_Tuple::IsInitialized() const {
  return true;
}

void ValueType_Tuple::InternalSwap(ValueType_Tuple* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

std::string ValueType_Tuple::GetTypeName() const {
  return "distributed_point_functions.ValueType.Tuple";
}


// ===================================================================

class ValueType_IntModN::_Internal {
 public:
  static const ::distributed_point_functions::ValueType_Integer& base_integer(const ValueType_IntModN* msg);
  static const ::distributed_point_functions::Value_Integer& modulus(const ValueType_IntModN* msg);
};

const ::distributed_point_functions::ValueType_Integer&
ValueType_IntModN::_Internal::base_integer(const ValueType_IntModN* msg) {
  return *msg->base_integer_;
}
const ::distributed_point_functions::Value_Integer&
ValueType_IntModN::_Internal::modulus(const ValueType_IntModN* msg) {
  return *msg->modulus_;
}
ValueType_IntModN::ValueType_IntModN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.ValueType.IntModN)
}
ValueType_IntModN::ValueType_IntModN(const ValueType_IntModN& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_base_integer()) {
    base_integer_ = new ::distributed_point_functions::ValueType_Integer(*from.base_integer_);
  } else {
    base_integer_ = nullptr;
  }
  if (from._internal_has_modulus()) {
    modulus_ = new ::distributed_point_functions::Value_Integer(*from.modulus_);
  } else {
    modulus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.ValueType.IntModN)
}

inline void ValueType_IntModN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_integer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&modulus_) -
    reinterpret_cast<char*>(&base_integer_)) + sizeof(modulus_));
}

ValueType_IntModN::~ValueType_IntModN() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.ValueType.IntModN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueType_IntModN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_integer_;
  if (this != internal_default_instance()) delete modulus_;
}

void ValueType_IntModN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValueType_IntModN::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.ValueType.IntModN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && base_integer_ != nullptr) {
    delete base_integer_;
  }
  base_integer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modulus_ != nullptr) {
    delete modulus_;
  }
  modulus_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* ValueType_IntModN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .distributed_point_functions.ValueType.Integer base_integer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_integer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .distributed_point_functions.Value.Integer modulus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_modulus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueType_IntModN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.ValueType.IntModN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .distributed_point_functions.ValueType.Integer base_integer = 1;
  if (this->_internal_has_base_integer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_integer(this),
        _Internal::base_integer(this).GetCachedSize(), target, stream);
  }

  // .distributed_point_functions.Value.Integer modulus = 2;
  if (this->_internal_has_modulus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::modulus(this),
        _Internal::modulus(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.ValueType.IntModN)
  return target;
}

size_t ValueType_IntModN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.ValueType.IntModN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .distributed_point_functions.ValueType.Integer base_integer = 1;
  if (this->_internal_has_base_integer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_integer_);
  }

  // .distributed_point_functions.Value.Integer modulus = 2;
  if (this->_internal_has_modulus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modulus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueType_IntModN::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ValueType_IntModN*>(
      &from));
}

void ValueType_IntModN::MergeFrom(const ValueType_IntModN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.ValueType.IntModN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base_integer()) {
    _internal_mutable_base_integer()->::distributed_point_functions::ValueType_Integer::MergeFrom(from._internal_base_integer());
  }
  if (from._internal_has_modulus()) {
    _internal_mutable_modulus()->::distributed_point_functions::Value_Integer::MergeFrom(from._internal_modulus());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ValueType_IntModN::CopyFrom(const ValueType_IntModN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.ValueType.IntModN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueType_IntModN::IsInitialized() const {
  return true;
}

void ValueType_IntModN::InternalSwap(ValueType_IntModN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValueType_IntModN, modulus_)
      + sizeof(ValueType_IntModN::modulus_)
      - PROTOBUF_FIELD_OFFSET(ValueType_IntModN, base_integer_)>(
          reinterpret_cast<char*>(&base_integer_),
          reinterpret_cast<char*>(&other->base_integer_));
}

std::string ValueType_IntModN::GetTypeName() const {
  return "distributed_point_functions.ValueType.IntModN";
}


// ===================================================================

class ValueType::_Internal {
 public:
  static const ::distributed_point_functions::ValueType_Integer& integer(const ValueType* msg);
  static const ::distributed_point_functions::ValueType_Tuple& tuple(const ValueType* msg);
  static const ::distributed_point_functions::ValueType_IntModN& int_mod_n(const ValueType* msg);
  static const ::distributed_point_functions::ValueType_Integer& xor_wrapper(const ValueType* msg);
};

const ::distributed_point_functions::ValueType_Integer&
ValueType::_Internal::integer(const ValueType* msg) {
  return *msg->type_.integer_;
}
const ::distributed_point_functions::ValueType_Tuple&
ValueType::_Internal::tuple(const ValueType* msg) {
  return *msg->type_.tuple_;
}
const ::distributed_point_functions::ValueType_IntModN&
ValueType::_Internal::int_mod_n(const ValueType* msg) {
  return *msg->type_.int_mod_n_;
}
const ::distributed_point_functions::ValueType_Integer&
ValueType::_Internal::xor_wrapper(const ValueType* msg) {
  return *msg->type_.xor_wrapper_;
}
void ValueType::set_allocated_integer(::distributed_point_functions::ValueType_Integer* integer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (integer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(integer);
    if (message_arena != submessage_arena) {
      integer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integer, submessage_arena);
    }
    set_has_integer();
    type_.integer_ = integer;
  }
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.ValueType.integer)
}
void ValueType::set_allocated_tuple(::distributed_point_functions::ValueType_Tuple* tuple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (tuple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tuple);
    if (message_arena != submessage_arena) {
      tuple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple, submessage_arena);
    }
    set_has_tuple();
    type_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.ValueType.tuple)
}
void ValueType::set_allocated_int_mod_n(::distributed_point_functions::ValueType_IntModN* int_mod_n) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (int_mod_n) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int_mod_n);
    if (message_arena != submessage_arena) {
      int_mod_n = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_mod_n, submessage_arena);
    }
    set_has_int_mod_n();
    type_.int_mod_n_ = int_mod_n;
  }
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.ValueType.int_mod_n)
}
void ValueType::set_allocated_xor_wrapper(::distributed_point_functions::ValueType_Integer* xor_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (xor_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(xor_wrapper);
    if (message_arena != submessage_arena) {
      xor_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xor_wrapper, submessage_arena);
    }
    set_has_xor_wrapper();
    type_.xor_wrapper_ = xor_wrapper;
  }
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.ValueType.xor_wrapper)
}
ValueType::ValueType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.ValueType)
}
ValueType::ValueType(const ValueType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kInteger: {
      _internal_mutable_integer()->::distributed_point_functions::ValueType_Integer::MergeFrom(from._internal_integer());
      break;
    }
    case kTuple: {
      _internal_mutable_tuple()->::distributed_point_functions::ValueType_Tuple::MergeFrom(from._internal_tuple());
      break;
    }
    case kIntModN: {
      _internal_mutable_int_mod_n()->::distributed_point_functions::ValueType_IntModN::MergeFrom(from._internal_int_mod_n());
      break;
    }
    case kXorWrapper: {
      _internal_mutable_xor_wrapper()->::distributed_point_functions::ValueType_Integer::MergeFrom(from._internal_xor_wrapper());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.ValueType)
}

inline void ValueType::SharedCtor() {
clear_has_type();
}

ValueType::~ValueType() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.ValueType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void ValueType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValueType::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:distributed_point_functions.ValueType)
  switch (type_case()) {
    case kInteger: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.integer_;
      }
      break;
    }
    case kTuple: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.tuple_;
      }
      break;
    }
    case kIntModN: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.int_mod_n_;
      }
      break;
    }
    case kXorWrapper: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.xor_wrapper_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ValueType::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.ValueType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<std::string>();
}

const char* ValueType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .distributed_point_functions.ValueType.Integer integer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_integer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .distributed_point_functions.ValueType.Tuple tuple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .distributed_point_functions.ValueType.IntModN int_mod_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_mod_n(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .distributed_point_functions.ValueType.Integer xor_wrapper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_xor_wrapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.ValueType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .distributed_point_functions.ValueType.Integer integer = 1;
  if (_internal_has_integer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::integer(this),
        _Internal::integer(this).GetCachedSize(), target, stream);
  }

  // .distributed_point_functions.ValueType.Tuple tuple = 2;
  if (_internal_has_tuple()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tuple(this),
        _Internal::tuple(this).GetCachedSize(), target, stream);
  }

  // .distributed_point_functions.ValueType.IntModN int_mod_n = 3;
  if (_internal_has_int_mod_n()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::int_mod_n(this),
        _Internal::int_mod_n(this).GetCachedSize(), target, stream);
  }

  // .distributed_point_functions.ValueType.Integer xor_wrapper = 4;
  if (_internal_has_xor_wrapper()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::xor_wrapper(this),
        _Internal::xor_wrapper(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.ValueType)
  return target;
}

size_t ValueType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.ValueType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .distributed_point_functions.ValueType.Integer integer = 1;
    case kInteger: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.integer_);
      break;
    }
    // .distributed_point_functions.ValueType.Tuple tuple = 2;
    case kTuple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.tuple_);
      break;
    }
    // .distributed_point_functions.ValueType.IntModN int_mod_n = 3;
    case kIntModN: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.int_mod_n_);
      break;
    }
    // .distributed_point_functions.ValueType.Integer xor_wrapper = 4;
    case kXorWrapper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.xor_wrapper_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ValueType*>(
      &from));
}

void ValueType::MergeFrom(const ValueType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.ValueType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kInteger: {
      _internal_mutable_integer()->::distributed_point_functions::ValueType_Integer::MergeFrom(from._internal_integer());
      break;
    }
    case kTuple: {
      _internal_mutable_tuple()->::distributed_point_functions::ValueType_Tuple::MergeFrom(from._internal_tuple());
      break;
    }
    case kIntModN: {
      _internal_mutable_int_mod_n()->::distributed_point_functions::ValueType_IntModN::MergeFrom(from._internal_int_mod_n());
      break;
    }
    case kXorWrapper: {
      _internal_mutable_xor_wrapper()->::distributed_point_functions::ValueType_Integer::MergeFrom(from._internal_xor_wrapper());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ValueType::CopyFrom(const ValueType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.ValueType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueType::IsInitialized() const {
  return true;
}

void ValueType::InternalSwap(ValueType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string ValueType::GetTypeName() const {
  return "distributed_point_functions.ValueType";
}


// ===================================================================

class Value_Integer::_Internal {
 public:
  static const ::distributed_point_functions::Block& value_uint128(const Value_Integer* msg);
};

const ::distributed_point_functions::Block&
Value_Integer::_Internal::value_uint128(const Value_Integer* msg) {
  return *msg->value_.value_uint128_;
}
void Value_Integer::set_allocated_value_uint128(::distributed_point_functions::Block* value_uint128) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_uint128) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_uint128);
    if (message_arena != submessage_arena) {
      value_uint128 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_uint128, submessage_arena);
    }
    set_has_value_uint128();
    value_.value_uint128_ = value_uint128;
  }
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.Value.Integer.value_uint128)
}
Value_Integer::Value_Integer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.Value.Integer)
}
Value_Integer::Value_Integer(const Value_Integer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kValueUint64: {
      _internal_set_value_uint64(from._internal_value_uint64());
      break;
    }
    case kValueUint128: {
      _internal_mutable_value_uint128()->::distributed_point_functions::Block::MergeFrom(from._internal_value_uint128());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.Value.Integer)
}

inline void Value_Integer::SharedCtor() {
clear_has_value();
}

Value_Integer::~Value_Integer() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.Value.Integer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value_Integer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Value_Integer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Value_Integer::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:distributed_point_functions.Value.Integer)
  switch (value_case()) {
    case kValueUint64: {
      // No need to clear
      break;
    }
    case kValueUint128: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.value_uint128_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Value_Integer::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.Value.Integer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<std::string>();
}

const char* Value_Integer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value_uint64 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_value_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .distributed_point_functions.Block value_uint128 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_uint128(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value_Integer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.Value.Integer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value_uint64 = 1;
  if (_internal_has_value_uint64()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value_uint64(), target);
  }

  // .distributed_point_functions.Block value_uint128 = 2;
  if (_internal_has_value_uint128()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value_uint128(this),
        _Internal::value_uint128(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.Value.Integer)
  return target;
}

size_t Value_Integer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.Value.Integer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // uint64 value_uint64 = 1;
    case kValueUint64: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value_uint64());
      break;
    }
    // .distributed_point_functions.Block value_uint128 = 2;
    case kValueUint128: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.value_uint128_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value_Integer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Value_Integer*>(
      &from));
}

void Value_Integer::MergeFrom(const Value_Integer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.Value.Integer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kValueUint64: {
      _internal_set_value_uint64(from._internal_value_uint64());
      break;
    }
    case kValueUint128: {
      _internal_mutable_value_uint128()->::distributed_point_functions::Block::MergeFrom(from._internal_value_uint128());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Value_Integer::CopyFrom(const Value_Integer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.Value.Integer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Integer::IsInitialized() const {
  return true;
}

void Value_Integer::InternalSwap(Value_Integer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Value_Integer::GetTypeName() const {
  return "distributed_point_functions.Value.Integer";
}


// ===================================================================

class Value_Tuple::_Internal {
 public:
};

Value_Tuple::Value_Tuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  elements_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.Value.Tuple)
}
Value_Tuple::Value_Tuple(const Value_Tuple& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.Value.Tuple)
}

inline void Value_Tuple::SharedCtor() {
}

Value_Tuple::~Value_Tuple() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.Value.Tuple)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value_Tuple::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Value_Tuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Value_Tuple::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.Value.Tuple)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Value_Tuple::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .distributed_point_functions.Value elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value_Tuple::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.Value.Tuple)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .distributed_point_functions.Value elements = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elements_size()); i < n; i++) {
    const auto& repfield = this->_internal_elements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.Value.Tuple)
  return target;
}

size_t Value_Tuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.Value.Tuple)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .distributed_point_functions.Value elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value_Tuple::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Value_Tuple*>(
      &from));
}

void Value_Tuple::MergeFrom(const Value_Tuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.Value.Tuple)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Value_Tuple::CopyFrom(const Value_Tuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.Value.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Tuple::IsInitialized() const {
  return true;
}

void Value_Tuple::InternalSwap(Value_Tuple* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

std::string Value_Tuple::GetTypeName() const {
  return "distributed_point_functions.Value.Tuple";
}


// ===================================================================

class Value::_Internal {
 public:
  static const ::distributed_point_functions::Value_Integer& integer(const Value* msg);
  static const ::distributed_point_functions::Value_Tuple& tuple(const Value* msg);
  static const ::distributed_point_functions::Value_Integer& int_mod_n(const Value* msg);
  static const ::distributed_point_functions::Value_Integer& xor_wrapper(const Value* msg);
};

const ::distributed_point_functions::Value_Integer&
Value::_Internal::integer(const Value* msg) {
  return *msg->value_.integer_;
}
const ::distributed_point_functions::Value_Tuple&
Value::_Internal::tuple(const Value* msg) {
  return *msg->value_.tuple_;
}
const ::distributed_point_functions::Value_Integer&
Value::_Internal::int_mod_n(const Value* msg) {
  return *msg->value_.int_mod_n_;
}
const ::distributed_point_functions::Value_Integer&
Value::_Internal::xor_wrapper(const Value* msg) {
  return *msg->value_.xor_wrapper_;
}
void Value::set_allocated_integer(::distributed_point_functions::Value_Integer* integer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (integer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(integer);
    if (message_arena != submessage_arena) {
      integer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integer, submessage_arena);
    }
    set_has_integer();
    value_.integer_ = integer;
  }
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.Value.integer)
}
void Value::set_allocated_tuple(::distributed_point_functions::Value_Tuple* tuple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (tuple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tuple);
    if (message_arena != submessage_arena) {
      tuple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple, submessage_arena);
    }
    set_has_tuple();
    value_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.Value.tuple)
}
void Value::set_allocated_int_mod_n(::distributed_point_functions::Value_Integer* int_mod_n) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (int_mod_n) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int_mod_n);
    if (message_arena != submessage_arena) {
      int_mod_n = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_mod_n, submessage_arena);
    }
    set_has_int_mod_n();
    value_.int_mod_n_ = int_mod_n;
  }
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.Value.int_mod_n)
}
void Value::set_allocated_xor_wrapper(::distributed_point_functions::Value_Integer* xor_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (xor_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(xor_wrapper);
    if (message_arena != submessage_arena) {
      xor_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xor_wrapper, submessage_arena);
    }
    set_has_xor_wrapper();
    value_.xor_wrapper_ = xor_wrapper;
  }
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.Value.xor_wrapper)
}
Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kInteger: {
      _internal_mutable_integer()->::distributed_point_functions::Value_Integer::MergeFrom(from._internal_integer());
      break;
    }
    case kTuple: {
      _internal_mutable_tuple()->::distributed_point_functions::Value_Tuple::MergeFrom(from._internal_tuple());
      break;
    }
    case kIntModN: {
      _internal_mutable_int_mod_n()->::distributed_point_functions::Value_Integer::MergeFrom(from._internal_int_mod_n());
      break;
    }
    case kXorWrapper: {
      _internal_mutable_xor_wrapper()->::distributed_point_functions::Value_Integer::MergeFrom(from._internal_xor_wrapper());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.Value)
}

inline void Value::SharedCtor() {
clear_has_value();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:distributed_point_functions.Value)
  switch (value_case()) {
    case kInteger: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.integer_;
      }
      break;
    }
    case kTuple: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.tuple_;
      }
      break;
    }
    case kIntModN: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.int_mod_n_;
      }
      break;
    }
    case kXorWrapper: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.xor_wrapper_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<std::string>();
}

const char* Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .distributed_point_functions.Value.Integer integer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_integer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .distributed_point_functions.Value.Tuple tuple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .distributed_point_functions.Value.Integer int_mod_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_mod_n(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .distributed_point_functions.Value.Integer xor_wrapper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_xor_wrapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .distributed_point_functions.Value.Integer integer = 1;
  if (_internal_has_integer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::integer(this),
        _Internal::integer(this).GetCachedSize(), target, stream);
  }

  // .distributed_point_functions.Value.Tuple tuple = 2;
  if (_internal_has_tuple()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tuple(this),
        _Internal::tuple(this).GetCachedSize(), target, stream);
  }

  // .distributed_point_functions.Value.Integer int_mod_n = 3;
  if (_internal_has_int_mod_n()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::int_mod_n(this),
        _Internal::int_mod_n(this).GetCachedSize(), target, stream);
  }

  // .distributed_point_functions.Value.Integer xor_wrapper = 4;
  if (_internal_has_xor_wrapper()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::xor_wrapper(this),
        _Internal::xor_wrapper(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .distributed_point_functions.Value.Integer integer = 1;
    case kInteger: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.integer_);
      break;
    }
    // .distributed_point_functions.Value.Tuple tuple = 2;
    case kTuple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.tuple_);
      break;
    }
    // .distributed_point_functions.Value.Integer int_mod_n = 3;
    case kIntModN: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.int_mod_n_);
      break;
    }
    // .distributed_point_functions.Value.Integer xor_wrapper = 4;
    case kXorWrapper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.xor_wrapper_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Value*>(
      &from));
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.Value)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kInteger: {
      _internal_mutable_integer()->::distributed_point_functions::Value_Integer::MergeFrom(from._internal_integer());
      break;
    }
    case kTuple: {
      _internal_mutable_tuple()->::distributed_point_functions::Value_Tuple::MergeFrom(from._internal_tuple());
      break;
    }
    case kIntModN: {
      _internal_mutable_int_mod_n()->::distributed_point_functions::Value_Integer::MergeFrom(from._internal_int_mod_n());
      break;
    }
    case kXorWrapper: {
      _internal_mutable_xor_wrapper()->::distributed_point_functions::Value_Integer::MergeFrom(from._internal_xor_wrapper());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Value::GetTypeName() const {
  return "distributed_point_functions.Value";
}


// ===================================================================

class DpfParameters::_Internal {
 public:
  static const ::distributed_point_functions::ValueType& value_type(const DpfParameters* msg);
};

const ::distributed_point_functions::ValueType&
DpfParameters::_Internal::value_type(const DpfParameters* msg) {
  return *msg->value_type_;
}
DpfParameters::DpfParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.DpfParameters)
}
DpfParameters::DpfParameters(const DpfParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_value_type()) {
    value_type_ = new ::distributed_point_functions::ValueType(*from.value_type_);
  } else {
    value_type_ = nullptr;
  }
  ::memcpy(&security_parameter_, &from.security_parameter_,
    static_cast<size_t>(reinterpret_cast<char*>(&log_domain_size_) -
    reinterpret_cast<char*>(&security_parameter_)) + sizeof(log_domain_size_));
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.DpfParameters)
}

inline void DpfParameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&log_domain_size_) -
    reinterpret_cast<char*>(&value_type_)) + sizeof(log_domain_size_));
}

DpfParameters::~DpfParameters() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.DpfParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DpfParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_type_;
}

void DpfParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DpfParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.DpfParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_type_ != nullptr) {
    delete value_type_;
  }
  value_type_ = nullptr;
  ::memset(&security_parameter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_domain_size_) -
      reinterpret_cast<char*>(&security_parameter_)) + sizeof(log_domain_size_));
  _internal_metadata_.Clear<std::string>();
}

const char* DpfParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 log_domain_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          log_domain_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .distributed_point_functions.ValueType value_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double security_parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          security_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DpfParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.DpfParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 log_domain_size = 1;
  if (this->_internal_log_domain_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_log_domain_size(), target);
  }

  // .distributed_point_functions.ValueType value_type = 3;
  if (this->_internal_has_value_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value_type(this),
        _Internal::value_type(this).GetCachedSize(), target, stream);
  }

  // double security_parameter = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_security_parameter = this->_internal_security_parameter();
  uint64_t raw_security_parameter;
  memcpy(&raw_security_parameter, &tmp_security_parameter, sizeof(tmp_security_parameter));
  if (raw_security_parameter != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_security_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.DpfParameters)
  return target;
}

size_t DpfParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.DpfParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .distributed_point_functions.ValueType value_type = 3;
  if (this->_internal_has_value_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_type_);
  }

  // double security_parameter = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_security_parameter = this->_internal_security_parameter();
  uint64_t raw_security_parameter;
  memcpy(&raw_security_parameter, &tmp_security_parameter, sizeof(tmp_security_parameter));
  if (raw_security_parameter != 0) {
    total_size += 1 + 8;
  }

  // int32 log_domain_size = 1;
  if (this->_internal_log_domain_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_log_domain_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DpfParameters::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DpfParameters*>(
      &from));
}

void DpfParameters::MergeFrom(const DpfParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.DpfParameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value_type()) {
    _internal_mutable_value_type()->::distributed_point_functions::ValueType::MergeFrom(from._internal_value_type());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_security_parameter = from._internal_security_parameter();
  uint64_t raw_security_parameter;
  memcpy(&raw_security_parameter, &tmp_security_parameter, sizeof(tmp_security_parameter));
  if (raw_security_parameter != 0) {
    _internal_set_security_parameter(from._internal_security_parameter());
  }
  if (from._internal_log_domain_size() != 0) {
    _internal_set_log_domain_size(from._internal_log_domain_size());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DpfParameters::CopyFrom(const DpfParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.DpfParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpfParameters::IsInitialized() const {
  return true;
}

void DpfParameters::InternalSwap(DpfParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DpfParameters, log_domain_size_)
      + sizeof(DpfParameters::log_domain_size_)
      - PROTOBUF_FIELD_OFFSET(DpfParameters, value_type_)>(
          reinterpret_cast<char*>(&value_type_),
          reinterpret_cast<char*>(&other->value_type_));
}

std::string DpfParameters::GetTypeName() const {
  return "distributed_point_functions.DpfParameters";
}


// ===================================================================

class Block::_Internal {
 public:
};

Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&high_, &from.high_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.Block)
}

inline void Block::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&high_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_) -
      reinterpret_cast<char*>(&high_)) + sizeof(low_));
  _internal_metadata_.Clear<std::string>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 high = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->_internal_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_high(), target);
  }

  // uint64 low = 2;
  if (this->_internal_low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_low(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->_internal_high() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_high());
  }

  // uint64 low = 2;
  if (this->_internal_low() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_low());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Block*>(
      &from));
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.Block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from._internal_low() != 0) {
    _internal_set_low(from._internal_low());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, low_)
      + sizeof(Block::low_)
      - PROTOBUF_FIELD_OFFSET(Block, high_)>(
          reinterpret_cast<char*>(&high_),
          reinterpret_cast<char*>(&other->high_));
}

std::string Block::GetTypeName() const {
  return "distributed_point_functions.Block";
}


// ===================================================================

class CorrectionWord::_Internal {
 public:
  static const ::distributed_point_functions::Block& seed(const CorrectionWord* msg);
};

const ::distributed_point_functions::Block&
CorrectionWord::_Internal::seed(const CorrectionWord* msg) {
  return *msg->seed_;
}
CorrectionWord::CorrectionWord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  value_correction_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.CorrectionWord)
}
CorrectionWord::CorrectionWord(const CorrectionWord& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_correction_(from.value_correction_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_seed()) {
    seed_ = new ::distributed_point_functions::Block(*from.seed_);
  } else {
    seed_ = nullptr;
  }
  ::memcpy(&control_left_, &from.control_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&control_right_) -
    reinterpret_cast<char*>(&control_left_)) + sizeof(control_right_));
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.CorrectionWord)
}

inline void CorrectionWord::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_right_) -
    reinterpret_cast<char*>(&seed_)) + sizeof(control_right_));
}

CorrectionWord::~CorrectionWord() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.CorrectionWord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CorrectionWord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete seed_;
}

void CorrectionWord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CorrectionWord::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.CorrectionWord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_correction_.Clear();
  if (GetArenaForAllocation() == nullptr && seed_ != nullptr) {
    delete seed_;
  }
  seed_ = nullptr;
  ::memset(&control_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_right_) -
      reinterpret_cast<char*>(&control_left_)) + sizeof(control_right_));
  _internal_metadata_.Clear<std::string>();
}

const char* CorrectionWord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .distributed_point_functions.Block seed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_seed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool control_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          control_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool control_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          control_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .distributed_point_functions.Value value_correction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_correction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CorrectionWord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.CorrectionWord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .distributed_point_functions.Block seed = 1;
  if (this->_internal_has_seed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::seed(this),
        _Internal::seed(this).GetCachedSize(), target, stream);
  }

  // bool control_left = 2;
  if (this->_internal_control_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_control_left(), target);
  }

  // bool control_right = 3;
  if (this->_internal_control_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_control_right(), target);
  }

  // repeated .distributed_point_functions.Value value_correction = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_correction_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_correction(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.CorrectionWord)
  return target;
}

size_t CorrectionWord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.CorrectionWord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .distributed_point_functions.Value value_correction = 5;
  total_size += 1UL * this->_internal_value_correction_size();
  for (const auto& msg : this->value_correction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .distributed_point_functions.Block seed = 1;
  if (this->_internal_has_seed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seed_);
  }

  // bool control_left = 2;
  if (this->_internal_control_left() != 0) {
    total_size += 1 + 1;
  }

  // bool control_right = 3;
  if (this->_internal_control_right() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CorrectionWord::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CorrectionWord*>(
      &from));
}

void CorrectionWord::MergeFrom(const CorrectionWord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.CorrectionWord)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_correction_.MergeFrom(from.value_correction_);
  if (from._internal_has_seed()) {
    _internal_mutable_seed()->::distributed_point_functions::Block::MergeFrom(from._internal_seed());
  }
  if (from._internal_control_left() != 0) {
    _internal_set_control_left(from._internal_control_left());
  }
  if (from._internal_control_right() != 0) {
    _internal_set_control_right(from._internal_control_right());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CorrectionWord::CopyFrom(const CorrectionWord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.CorrectionWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorrectionWord::IsInitialized() const {
  return true;
}

void CorrectionWord::InternalSwap(CorrectionWord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_correction_.InternalSwap(&other->value_correction_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CorrectionWord, control_right_)
      + sizeof(CorrectionWord::control_right_)
      - PROTOBUF_FIELD_OFFSET(CorrectionWord, seed_)>(
          reinterpret_cast<char*>(&seed_),
          reinterpret_cast<char*>(&other->seed_));
}

std::string CorrectionWord::GetTypeName() const {
  return "distributed_point_functions.CorrectionWord";
}


// ===================================================================

class DpfKey::_Internal {
 public:
  static const ::distributed_point_functions::Block& seed(const DpfKey* msg);
};

const ::distributed_point_functions::Block&
DpfKey::_Internal::seed(const DpfKey* msg) {
  return *msg->seed_;
}
DpfKey::DpfKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  correction_words_(arena),
  last_level_value_correction_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.DpfKey)
}
DpfKey::DpfKey(const DpfKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      correction_words_(from.correction_words_),
      last_level_value_correction_(from.last_level_value_correction_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_seed()) {
    seed_ = new ::distributed_point_functions::Block(*from.seed_);
  } else {
    seed_ = nullptr;
  }
  party_ = from.party_;
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.DpfKey)
}

inline void DpfKey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&party_) -
    reinterpret_cast<char*>(&seed_)) + sizeof(party_));
}

DpfKey::~DpfKey() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.DpfKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DpfKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete seed_;
}

void DpfKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DpfKey::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.DpfKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correction_words_.Clear();
  last_level_value_correction_.Clear();
  if (GetArenaForAllocation() == nullptr && seed_ != nullptr) {
    delete seed_;
  }
  seed_ = nullptr;
  party_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* DpfKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .distributed_point_functions.Block seed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_seed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .distributed_point_functions.CorrectionWord correction_words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_correction_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 party = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          party_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .distributed_point_functions.Value last_level_value_correction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_last_level_value_correction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DpfKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.DpfKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .distributed_point_functions.Block seed = 1;
  if (this->_internal_has_seed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::seed(this),
        _Internal::seed(this).GetCachedSize(), target, stream);
  }

  // repeated .distributed_point_functions.CorrectionWord correction_words = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_correction_words_size()); i < n; i++) {
    const auto& repfield = this->_internal_correction_words(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 party = 3;
  if (this->_internal_party() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_party(), target);
  }

  // repeated .distributed_point_functions.Value last_level_value_correction = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_last_level_value_correction_size()); i < n; i++) {
    const auto& repfield = this->_internal_last_level_value_correction(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.DpfKey)
  return target;
}

size_t DpfKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.DpfKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .distributed_point_functions.CorrectionWord correction_words = 2;
  total_size += 1UL * this->_internal_correction_words_size();
  for (const auto& msg : this->correction_words_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .distributed_point_functions.Value last_level_value_correction = 5;
  total_size += 1UL * this->_internal_last_level_value_correction_size();
  for (const auto& msg : this->last_level_value_correction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .distributed_point_functions.Block seed = 1;
  if (this->_internal_has_seed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seed_);
  }

  // int32 party = 3;
  if (this->_internal_party() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_party());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DpfKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DpfKey*>(
      &from));
}

void DpfKey::MergeFrom(const DpfKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.DpfKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  correction_words_.MergeFrom(from.correction_words_);
  last_level_value_correction_.MergeFrom(from.last_level_value_correction_);
  if (from._internal_has_seed()) {
    _internal_mutable_seed()->::distributed_point_functions::Block::MergeFrom(from._internal_seed());
  }
  if (from._internal_party() != 0) {
    _internal_set_party(from._internal_party());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DpfKey::CopyFrom(const DpfKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.DpfKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpfKey::IsInitialized() const {
  return true;
}

void DpfKey::InternalSwap(DpfKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  correction_words_.InternalSwap(&other->correction_words_);
  last_level_value_correction_.InternalSwap(&other->last_level_value_correction_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DpfKey, party_)
      + sizeof(DpfKey::party_)
      - PROTOBUF_FIELD_OFFSET(DpfKey, seed_)>(
          reinterpret_cast<char*>(&seed_),
          reinterpret_cast<char*>(&other->seed_));
}

std::string DpfKey::GetTypeName() const {
  return "distributed_point_functions.DpfKey";
}


// ===================================================================

class PartialEvaluation::_Internal {
 public:
  static const ::distributed_point_functions::Block& prefix(const PartialEvaluation* msg);
  static const ::distributed_point_functions::Block& seed(const PartialEvaluation* msg);
};

const ::distributed_point_functions::Block&
PartialEvaluation::_Internal::prefix(const PartialEvaluation* msg) {
  return *msg->prefix_;
}
const ::distributed_point_functions::Block&
PartialEvaluation::_Internal::seed(const PartialEvaluation* msg) {
  return *msg->seed_;
}
PartialEvaluation::PartialEvaluation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.PartialEvaluation)
}
PartialEvaluation::PartialEvaluation(const PartialEvaluation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::distributed_point_functions::Block(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  if (from._internal_has_seed()) {
    seed_ = new ::distributed_point_functions::Block(*from.seed_);
  } else {
    seed_ = nullptr;
  }
  control_bit_ = from.control_bit_;
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.PartialEvaluation)
}

inline void PartialEvaluation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prefix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_bit_) -
    reinterpret_cast<char*>(&prefix_)) + sizeof(control_bit_));
}

PartialEvaluation::~PartialEvaluation() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.PartialEvaluation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartialEvaluation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
  if (this != internal_default_instance()) delete seed_;
}

void PartialEvaluation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PartialEvaluation::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.PartialEvaluation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && seed_ != nullptr) {
    delete seed_;
  }
  seed_ = nullptr;
  control_bit_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* PartialEvaluation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .distributed_point_functions.Block prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .distributed_point_functions.Block seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_seed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool control_bit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          control_bit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartialEvaluation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.PartialEvaluation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .distributed_point_functions.Block prefix = 1;
  if (this->_internal_has_prefix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::prefix(this),
        _Internal::prefix(this).GetCachedSize(), target, stream);
  }

  // .distributed_point_functions.Block seed = 2;
  if (this->_internal_has_seed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::seed(this),
        _Internal::seed(this).GetCachedSize(), target, stream);
  }

  // bool control_bit = 3;
  if (this->_internal_control_bit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_control_bit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.PartialEvaluation)
  return target;
}

size_t PartialEvaluation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.PartialEvaluation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .distributed_point_functions.Block prefix = 1;
  if (this->_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // .distributed_point_functions.Block seed = 2;
  if (this->_internal_has_seed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seed_);
  }

  // bool control_bit = 3;
  if (this->_internal_control_bit() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartialEvaluation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PartialEvaluation*>(
      &from));
}

void PartialEvaluation::MergeFrom(const PartialEvaluation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.PartialEvaluation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_prefix()) {
    _internal_mutable_prefix()->::distributed_point_functions::Block::MergeFrom(from._internal_prefix());
  }
  if (from._internal_has_seed()) {
    _internal_mutable_seed()->::distributed_point_functions::Block::MergeFrom(from._internal_seed());
  }
  if (from._internal_control_bit() != 0) {
    _internal_set_control_bit(from._internal_control_bit());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PartialEvaluation::CopyFrom(const PartialEvaluation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.PartialEvaluation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialEvaluation::IsInitialized() const {
  return true;
}

void PartialEvaluation::InternalSwap(PartialEvaluation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartialEvaluation, control_bit_)
      + sizeof(PartialEvaluation::control_bit_)
      - PROTOBUF_FIELD_OFFSET(PartialEvaluation, prefix_)>(
          reinterpret_cast<char*>(&prefix_),
          reinterpret_cast<char*>(&other->prefix_));
}

std::string PartialEvaluation::GetTypeName() const {
  return "distributed_point_functions.PartialEvaluation";
}


// ===================================================================

class EvaluationContext::_Internal {
 public:
  static const ::distributed_point_functions::DpfKey& key(const EvaluationContext* msg);
};

const ::distributed_point_functions::DpfKey&
EvaluationContext::_Internal::key(const EvaluationContext* msg) {
  return *msg->key_;
}
EvaluationContext::EvaluationContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  parameters_(arena),
  partial_evaluations_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:distributed_point_functions.EvaluationContext)
}
EvaluationContext::EvaluationContext(const EvaluationContext& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      parameters_(from.parameters_),
      partial_evaluations_(from.partial_evaluations_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::distributed_point_functions::DpfKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  ::memcpy(&previous_hierarchy_level_, &from.previous_hierarchy_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&partial_evaluations_level_) -
    reinterpret_cast<char*>(&previous_hierarchy_level_)) + sizeof(partial_evaluations_level_));
  // @@protoc_insertion_point(copy_constructor:distributed_point_functions.EvaluationContext)
}

inline void EvaluationContext::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&partial_evaluations_level_) -
    reinterpret_cast<char*>(&key_)) + sizeof(partial_evaluations_level_));
}

EvaluationContext::~EvaluationContext() {
  // @@protoc_insertion_point(destructor:distributed_point_functions.EvaluationContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EvaluationContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
}

void EvaluationContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EvaluationContext::Clear() {
// @@protoc_insertion_point(message_clear_start:distributed_point_functions.EvaluationContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  partial_evaluations_.Clear();
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  ::memset(&previous_hierarchy_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partial_evaluations_level_) -
      reinterpret_cast<char*>(&previous_hierarchy_level_)) + sizeof(partial_evaluations_level_));
  _internal_metadata_.Clear<std::string>();
}

const char* EvaluationContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .distributed_point_functions.DpfParameters parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .distributed_point_functions.DpfKey key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 previous_hierarchy_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          previous_hierarchy_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .distributed_point_functions.PartialEvaluation partial_evaluations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partial_evaluations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 partial_evaluations_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          partial_evaluations_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvaluationContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:distributed_point_functions.EvaluationContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .distributed_point_functions.DpfParameters parameters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .distributed_point_functions.DpfKey key = 2;
  if (this->_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // int32 previous_hierarchy_level = 3;
  if (this->_internal_previous_hierarchy_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_previous_hierarchy_level(), target);
  }

  // repeated .distributed_point_functions.PartialEvaluation partial_evaluations = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partial_evaluations_size()); i < n; i++) {
    const auto& repfield = this->_internal_partial_evaluations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 partial_evaluations_level = 5;
  if (this->_internal_partial_evaluations_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_partial_evaluations_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:distributed_point_functions.EvaluationContext)
  return target;
}

size_t EvaluationContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:distributed_point_functions.EvaluationContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .distributed_point_functions.DpfParameters parameters = 1;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .distributed_point_functions.PartialEvaluation partial_evaluations = 4;
  total_size += 1UL * this->_internal_partial_evaluations_size();
  for (const auto& msg : this->partial_evaluations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .distributed_point_functions.DpfKey key = 2;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // int32 previous_hierarchy_level = 3;
  if (this->_internal_previous_hierarchy_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_previous_hierarchy_level());
  }

  // int32 partial_evaluations_level = 5;
  if (this->_internal_partial_evaluations_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partial_evaluations_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvaluationContext::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EvaluationContext*>(
      &from));
}

void EvaluationContext::MergeFrom(const EvaluationContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:distributed_point_functions.EvaluationContext)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  partial_evaluations_.MergeFrom(from.partial_evaluations_);
  if (from._internal_has_key()) {
    _internal_mutable_key()->::distributed_point_functions::DpfKey::MergeFrom(from._internal_key());
  }
  if (from._internal_previous_hierarchy_level() != 0) {
    _internal_set_previous_hierarchy_level(from._internal_previous_hierarchy_level());
  }
  if (from._internal_partial_evaluations_level() != 0) {
    _internal_set_partial_evaluations_level(from._internal_partial_evaluations_level());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EvaluationContext::CopyFrom(const EvaluationContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:distributed_point_functions.EvaluationContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationContext::IsInitialized() const {
  return true;
}

void EvaluationContext::InternalSwap(EvaluationContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  partial_evaluations_.InternalSwap(&other->partial_evaluations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvaluationContext, partial_evaluations_level_)
      + sizeof(EvaluationContext::partial_evaluations_level_)
      - PROTOBUF_FIELD_OFFSET(EvaluationContext, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

std::string EvaluationContext::GetTypeName() const {
  return "distributed_point_functions.EvaluationContext";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace distributed_point_functions
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::distributed_point_functions::ValueType_Integer*
Arena::CreateMaybeMessage< ::distributed_point_functions::ValueType_Integer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::ValueType_Integer >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::ValueType_Tuple*
Arena::CreateMaybeMessage< ::distributed_point_functions::ValueType_Tuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::ValueType_Tuple >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::ValueType_IntModN*
Arena::CreateMaybeMessage< ::distributed_point_functions::ValueType_IntModN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::ValueType_IntModN >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::ValueType*
Arena::CreateMaybeMessage< ::distributed_point_functions::ValueType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::ValueType >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::Value_Integer*
Arena::CreateMaybeMessage< ::distributed_point_functions::Value_Integer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::Value_Integer >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::Value_Tuple*
Arena::CreateMaybeMessage< ::distributed_point_functions::Value_Tuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::Value_Tuple >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::Value*
Arena::CreateMaybeMessage< ::distributed_point_functions::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::DpfParameters*
Arena::CreateMaybeMessage< ::distributed_point_functions::DpfParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::DpfParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::Block*
Arena::CreateMaybeMessage< ::distributed_point_functions::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::CorrectionWord*
Arena::CreateMaybeMessage< ::distributed_point_functions::CorrectionWord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::CorrectionWord >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::DpfKey*
Arena::CreateMaybeMessage< ::distributed_point_functions::DpfKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::DpfKey >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::PartialEvaluation*
Arena::CreateMaybeMessage< ::distributed_point_functions::PartialEvaluation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::PartialEvaluation >(arena);
}
template<> PROTOBUF_NOINLINE ::distributed_point_functions::EvaluationContext*
Arena::CreateMaybeMessage< ::distributed_point_functions::EvaluationContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::distributed_point_functions::EvaluationContext >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
