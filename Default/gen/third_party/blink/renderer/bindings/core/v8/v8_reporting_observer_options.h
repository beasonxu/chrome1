// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_REPORTING_OBSERVER_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_REPORTING_OBSERVER_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/abseil-cpp/absl/types/optional.h"
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;

class CORE_EXPORT ReportingObserverOptions : public bindings::DictionaryBase {
  
  public:
static ReportingObserverOptions* Create() {
  return MakeGarbageCollected<ReportingObserverOptions>();
}
static ReportingObserverOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<ReportingObserverOptions>(isolate);
}
static ReportingObserverOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  ReportingObserverOptions();
explicit  ReportingObserverOptions(v8::Isolate* isolate);

bool hasBuffered() const {
  return true;
}
bool buffered() const {
  return member_buffered_;
}
void setBuffered(bool value) {
  member_buffered_ = value;
}

bool hasTypes() const {
  return has_types_;
}
const absl::optional<Vector<String>>& types() const {
  DCHECK(hasTypes());
return member_types_;
}
absl::optional<Vector<String>> getTypesOr(const absl::optional<Vector<String>>& fallback_value) const;
absl::optional<Vector<String>> getTypesOr(absl::optional<Vector<String>>&& fallback_value) const;
void setTypes(const absl::optional<Vector<String>>& value);
void setTypes(absl::optional<Vector<String>>&& value);
void setTypes(const Vector<String>& value);
void setTypes(Vector<String>&& value);


// Obsolete accessor functions
bool hasTypesNonNull() const {
  return hasTypes() && types().has_value();
}
const Vector<String>& typesNonNull() const {
  DCHECK(hasTypesNonNull());
return types().value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_types_ = false;

bool member_buffered_{false};
absl::optional<Vector<String>> member_types_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_REPORTING_OBSERVER_OPTIONS_H_
