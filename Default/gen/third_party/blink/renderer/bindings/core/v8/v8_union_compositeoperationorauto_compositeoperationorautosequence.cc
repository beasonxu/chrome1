// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_union_compositeoperationorauto_compositeoperationorautosequence.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"

namespace blink {



V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence* V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  if (v8_value->IsArray()) {
  auto&& blink_value = NativeValueTraits<IDLSequence<V8CompositeOperationOrAuto>>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence>(std::move(blink_value));
}
if (v8_value->IsObject()) {
  ScriptIterator script_iterator = ScriptIterator::FromIterable(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
if (!script_iterator.IsNull()) {
  auto&& blink_value = bindings::CreateIDLSequenceFromIterator<V8CompositeOperationOrAuto>(isolate, std::move(script_iterator), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence>(std::move(blink_value));
}
}
{
  auto&& blink_value = NativeValueTraits<V8CompositeOperationOrAuto>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence>(blink_value);
}
}

 V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence::V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence(const Vector<V8CompositeOperationOrAuto>& value) : content_type_(ContentType::kCompositeOperationOrAutoSequence), member_composite_operation_or_auto_sequence_(value) {
  
}

 V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence::V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence(Vector<V8CompositeOperationOrAuto>&& value) : content_type_(ContentType::kCompositeOperationOrAutoSequence), member_composite_operation_or_auto_sequence_(std::move(value)) {
  
}







void V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence::Set(const Vector<V8CompositeOperationOrAuto>& value) {
  Clear();
member_composite_operation_or_auto_sequence_ = value;
content_type_ = ContentType::kCompositeOperationOrAutoSequence;
}

void V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence::Set(Vector<V8CompositeOperationOrAuto>&& value) {
  Clear();
member_composite_operation_or_auto_sequence_ = std::move(value);
content_type_ = ContentType::kCompositeOperationOrAutoSequence;
}


v8::MaybeLocal<v8::Value> V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence::ToV8Value(ScriptState* script_state) const {
  switch (content_type_) {
  case ContentType::kCompositeOperationOrAuto: {
    return ToV8Traits<V8CompositeOperationOrAuto>::ToV8(script_state, member_composite_operation_or_auto_);
  }
  case ContentType::kCompositeOperationOrAutoSequence: {
    return ToV8Traits<IDLSequence<V8CompositeOperationOrAuto>>::ToV8(script_state, member_composite_operation_or_auto_sequence_);
  }
}

NOTREACHED();
return v8::MaybeLocal<v8::Value>();
}

void V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence::Trace(Visitor* visitor) const {
  TraceIfNeeded<V8CompositeOperationOrAuto>::Trace(visitor, member_composite_operation_or_auto_);
TraceIfNeeded<Vector<V8CompositeOperationOrAuto>>::Trace(visitor, member_composite_operation_or_auto_sequence_);
bindings::UnionBase::Trace(visitor);
}

void V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence::Clear() {
  member_composite_operation_or_auto_sequence_.clear();
}



}  // namespace blink
