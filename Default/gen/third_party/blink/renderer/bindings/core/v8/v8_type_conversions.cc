// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_type_conversions.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_set_return_value_for_core.h"
#include "third_party/blink/renderer/core/testing/type_conversions.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/idl_member_installer.h"
#include "third_party/blink/renderer/platform/bindings/runtime_call_stats.h"
#include "third_party/blink/renderer/platform/bindings/v8_binding.h"
#include "third_party/blink/renderer/platform/bindings/wrapper_type_info.h"

namespace blink {



bool V8TypeConversions::IsExposed(ExecutionContext* execution_context) {
  return false;
}

// Construction of WrapperTypeInfo may require non-trivial initialization due
// to cross-component address resolution in order to load the pointer to the
// parent interface's WrapperTypeInfo.  We ignore this issue because the issue
// happens only on component builds and the official release builds
// (statically-linked builds) are never affected by this issue.
#if defined(COMPONENT_BUILD) && defined(WIN32) && defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif

const WrapperTypeInfo V8TypeConversions::wrapper_type_info_{
    gin::kEmbedderBlink,
    V8TypeConversions::InstallInterfaceTemplate,
    nullptr,
    "TypeConversions",
    nullptr,
    WrapperTypeInfo::kWrapperTypeObjectPrototype,
    WrapperTypeInfo::kObjectClassId,
    WrapperTypeInfo::kNotInheritFromActiveScriptWrappable,
    WrapperTypeInfo::kIdlInterface,
};

#if defined(COMPONENT_BUILD) && defined(WIN32) && defined(__clang__)
#pragma clang diagnostic pop
#endif

const WrapperTypeInfo& TypeConversions::wrapper_type_info_ =
    V8TypeConversions::wrapper_type_info_;

// non-[ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, TypeConversions>::value,
    "TypeConversions inherits from ActiveScriptWrappable<> without "
    "[ActiveScriptWrappable] extended attribute.");
static_assert(
    std::is_same<decltype(&TypeConversions::HasPendingActivity),
                 decltype(&ScriptWrappable::HasPendingActivity)>::value,
    "TypeConversions is overriding hasPendingActivity() without "
    "[ActiveScriptWrappable] extended attribute.");

namespace  {

namespace v8_type_conversions {

void TestLongAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testLong_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testLong.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testLong();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
}

void TestLongAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testLong_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testLong.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testLong";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLLong>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestLong(arg1_value);

}

void TestEnforceRangeLongAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeLong_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeLong.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testLong();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
}

void TestEnforceRangeLongAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeLong_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeLong.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testEnforceRangeLong";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLLongEnforceRange>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestLong(arg1_value);

}

void TestUnsignedLongAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testUnsignedLong_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testUnsignedLong.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testUnsignedLong();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}

void TestUnsignedLongAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testUnsignedLong_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testUnsignedLong.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testUnsignedLong";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnsignedLong>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestUnsignedLong(arg1_value);

}

void TestEnforceRangeUnsignedLongAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeUnsignedLong_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeUnsignedLong.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testUnsignedLong();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}

void TestEnforceRangeUnsignedLongAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeUnsignedLong_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeUnsignedLong.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testEnforceRangeUnsignedLong";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnsignedLongEnforceRange>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestUnsignedLong(arg1_value);

}

void TestLongLongAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testLongLong_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testLongLong.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testLongLong();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int64_t>());
}

void TestLongLongAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testLongLong_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testLongLong.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testLongLong";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLLongLong>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestLongLong(arg1_value);

}

void TestEnforceRangeLongLongAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeLongLong_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeLongLong.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testLongLong();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int64_t>());
}

void TestEnforceRangeLongLongAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeLongLong_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeLongLong.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testEnforceRangeLongLong";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLLongLongEnforceRange>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestLongLong(arg1_value);

}

void TestUnsignedLongLongAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testUnsignedLongLong_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testUnsignedLongLong.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testUnsignedLongLong();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint64_t>());
}

void TestUnsignedLongLongAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testUnsignedLongLong_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testUnsignedLongLong.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testUnsignedLongLong";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnsignedLongLong>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestUnsignedLongLong(arg1_value);

}

void TestEnforceRangeUnsignedLongLongAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeUnsignedLongLong_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeUnsignedLongLong.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testUnsignedLongLong();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint64_t>());
}

void TestEnforceRangeUnsignedLongLongAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeUnsignedLongLong_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeUnsignedLongLong.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testEnforceRangeUnsignedLongLong";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnsignedLongLongEnforceRange>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestUnsignedLongLong(arg1_value);

}

void TestByteAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testByte_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testByte.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testByte();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int8_t>());
}

void TestByteAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testByte_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testByte.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testByte";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLByte>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestByte(arg1_value);

}

void TestEnforceRangeByteAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeByte_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeByte.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testByte();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int8_t>());
}

void TestEnforceRangeByteAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeByte_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeByte.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testEnforceRangeByte";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLByteEnforceRange>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestByte(arg1_value);

}

void TestOctetAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testOctet_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testOctet.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testOctet();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint8_t>());
}

void TestOctetAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testOctet_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testOctet.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testOctet";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLOctet>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestOctet(arg1_value);

}

void TestEnforceRangeOctetAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeOctet_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeOctet.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testOctet();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint8_t>());
}

void TestEnforceRangeOctetAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeOctet_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeOctet.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testEnforceRangeOctet";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLOctetEnforceRange>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestOctet(arg1_value);

}

void TestShortAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testShort_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testShort.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testShort();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int16_t>());
}

void TestShortAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testShort_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testShort.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testShort";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLShort>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestShort(arg1_value);

}

void TestEnforceRangeShortAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeShort_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeShort.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testShort();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int16_t>());
}

void TestEnforceRangeShortAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeShort_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeShort.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testEnforceRangeShort";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLShortEnforceRange>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestShort(arg1_value);

}

void TestUnsignedShortAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testUnsignedShort_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testUnsignedShort.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testUnsignedShort();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint16_t>());
}

void TestUnsignedShortAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testUnsignedShort_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testUnsignedShort.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testUnsignedShort";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnsignedShort>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestUnsignedShort(arg1_value);

}

void TestEnforceRangeUnsignedShortAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeUnsignedShort_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeUnsignedShort.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testUnsignedShort();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint16_t>());
}

void TestEnforceRangeUnsignedShortAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testEnforceRangeUnsignedShort_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testEnforceRangeUnsignedShort.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testEnforceRangeUnsignedShort";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnsignedShortEnforceRange>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestUnsignedShort(arg1_value);

}

void TestByteStringAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testByteString_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testByteString.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testByteString();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void TestByteStringAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testByteString_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testByteString.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testByteString";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLByteString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestByteString(arg1_value);

}

void TestUSVStringAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testUSVString_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testUSVString.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testUSVString();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void TestUSVStringAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testUSVString_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testUSVString.set");



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testUSVString";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUSVString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestUSVString(arg1_value);

}

void TestUSVStringOrNullAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testUSVStringOrNull_Getter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testUSVStringOrNull.get");


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->testUSVStringOrNull();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNullable);
}

void TestUSVStringOrNullAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_testUSVStringOrNull_Setter");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.testUSVStringOrNull.set");

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "testUSVStringOrNull";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}


v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
v8::Local<v8::Value> v8_property_value = info[0];
auto&& arg1_value = NativeValueTraits<IDLNullable<IDLUSVString>>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestUSVStringOrNull(arg1_value);

}

void SetTestByteStringOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_setTestByteString");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.setTestByteString");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "setTestByteString";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& arg1_byte_string = NativeValueTraits<IDLByteString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestByteString(arg1_byte_string);

}

void SetTestUSVStringOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_setTestUSVString");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.setTestUSVString");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "setTestUSVString";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& arg1_usv_string = NativeValueTraits<IDLUSVString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestUSVString(arg1_usv_string);

}

void SetTestUSVStringOrNullOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_TypeConversions_setTestUSVStringOrNull");
BLINK_BINDINGS_TRACE_EVENT("TypeConversions.setTestUSVStringOrNull");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "TypeConversions";
const char* const property_name = "setTestUSVStringOrNull";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
TypeConversions* blink_receiver = V8TypeConversions::ToWrappableUnsafe(v8_receiver);
auto&& arg1_usv_string_or_null = NativeValueTraits<IDLNullable<IDLUSVString>>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTestUSVStringOrNull(arg1_usv_string_or_null);

}


}  // namespace v8_type_conversions

using namespace v8_type_conversions;

}  // namespace 

void V8TypeConversions::InstallInterfaceTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> interface_template) {
  const WrapperTypeInfo* const wrapper_type_info = V8TypeConversions::GetWrapperTypeInfo();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::ObjectTemplate> instance_object_template = interface_function_template->InstanceTemplate();
v8::Local<v8::ObjectTemplate> prototype_object_template = interface_function_template->PrototypeTemplate();
v8::Local<v8::FunctionTemplate> parent_interface_template;
bindings::SetupIDLInterfaceTemplate(isolate, wrapper_type_info, instance_object_template, prototype_object_template, interface_function_template, parent_interface_template);








v8::Local<v8::Template> instance_template = instance_object_template;
v8::Local<v8::Template> prototype_template = prototype_object_template;
InstallUnconditionalProperties(isolate, world, instance_template, prototype_template, interface_template);
}

void V8TypeConversions::InstallUnconditionalProperties(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> instance_template, v8::Local<v8::Template> prototype_template, v8::Local<v8::Template> interface_template) {
  using bindings::IDLMemberInstaller;

v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
{
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"testLong", TestLongAttributeGetCallback, TestLongAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testEnforceRangeLong", TestEnforceRangeLongAttributeGetCallback, TestEnforceRangeLongAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testUnsignedLong", TestUnsignedLongAttributeGetCallback, TestUnsignedLongAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testEnforceRangeUnsignedLong", TestEnforceRangeUnsignedLongAttributeGetCallback, TestEnforceRangeUnsignedLongAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testLongLong", TestLongLongAttributeGetCallback, TestLongLongAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testEnforceRangeLongLong", TestEnforceRangeLongLongAttributeGetCallback, TestEnforceRangeLongLongAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testUnsignedLongLong", TestUnsignedLongLongAttributeGetCallback, TestUnsignedLongLongAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testEnforceRangeUnsignedLongLong", TestEnforceRangeUnsignedLongLongAttributeGetCallback, TestEnforceRangeUnsignedLongLongAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testByte", TestByteAttributeGetCallback, TestByteAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testEnforceRangeByte", TestEnforceRangeByteAttributeGetCallback, TestEnforceRangeByteAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testOctet", TestOctetAttributeGetCallback, TestOctetAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testEnforceRangeOctet", TestEnforceRangeOctetAttributeGetCallback, TestEnforceRangeOctetAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testShort", TestShortAttributeGetCallback, TestShortAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testEnforceRangeShort", TestEnforceRangeShortAttributeGetCallback, TestEnforceRangeShortAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testUnsignedShort", TestUnsignedShortAttributeGetCallback, TestUnsignedShortAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testEnforceRangeUnsignedShort", TestEnforceRangeUnsignedShortAttributeGetCallback, TestEnforceRangeUnsignedShortAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testByteString", TestByteStringAttributeGetCallback, TestByteStringAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testUSVString", TestUSVStringAttributeGetCallback, TestUSVStringAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"testUSVStringOrNull", TestUSVStringOrNullAttributeGetCallback, TestUSVStringOrNullAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}





{
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"setTestByteString", SetTestByteStringOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"setTestUSVString", SetTestUSVStringOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"setTestUSVStringOrNull", SetTestUSVStringOrNullOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
IDLMemberInstaller::InstallOperations(isolate, world, instance_template, prototype_template, interface_template, signature, kOperationTable);
}



}




}  // namespace blink
