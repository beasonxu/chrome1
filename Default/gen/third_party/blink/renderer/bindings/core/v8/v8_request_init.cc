// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_request_init.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_trust_token.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_bytestringbytestringrecord_bytestringsequencesequence.h"
#include "third_party/blink/renderer/core/dom/abort_signal.h"
#include "third_party/blink/renderer/core/execution_context/execution_context.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



RequestInit* RequestInit::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  RequestInit* dictionary = MakeGarbageCollected<RequestInit>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "RequestInit";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 RequestInit::RequestInit() {
  
}

 RequestInit::RequestInit(v8::Isolate* isolate) {
  
}






































String RequestInit::getIntegrityOr(const String& fallback_value) const {
  if (!hasIntegrity()) {
  return fallback_value;
}
return member_integrity_;
}

String RequestInit::getIntegrityOr(String&& fallback_value) const {
  if (!hasIntegrity()) {
  return std::move(fallback_value);
}
return member_integrity_;
}

void RequestInit::setIntegrity(const String& value) {
  member_integrity_ = value;
has_integrity_ = true;
}

void RequestInit::setIntegrity(String&& value) {
  member_integrity_ = std::move(value);
has_integrity_ = true;
}











String RequestInit::getMethodOr(const String& fallback_value) const {
  if (!hasMethod()) {
  return fallback_value;
}
return member_method_;
}

String RequestInit::getMethodOr(String&& fallback_value) const {
  if (!hasMethod()) {
  return std::move(fallback_value);
}
return member_method_;
}

void RequestInit::setMethod(const String& value) {
  member_method_ = value;
has_method_ = true;
}

void RequestInit::setMethod(String&& value) {
  member_method_ = std::move(value);
has_method_ = true;
}

























String RequestInit::getReferrerOr(const String& fallback_value) const {
  if (!hasReferrer()) {
  return fallback_value;
}
return member_referrer_;
}

String RequestInit::getReferrerOr(String&& fallback_value) const {
  if (!hasReferrer()) {
  return std::move(fallback_value);
}
return member_referrer_;
}

void RequestInit::setReferrer(const String& value) {
  member_referrer_ = value;
has_referrer_ = true;
}

void RequestInit::setReferrer(String&& value) {
  member_referrer_ = std::move(value);
has_referrer_ = true;
}
































void RequestInit::Trace(Visitor* visitor) const {
  TraceIfNeeded<ScriptValue>::Trace(visitor, member_body_);
TraceIfNeeded<V8RequestCache>::Trace(visitor, member_cache_);
TraceIfNeeded<V8RequestCredentials>::Trace(visitor, member_credentials_);
TraceIfNeeded<V8RequestDuplex>::Trace(visitor, member_duplex_);
TraceIfNeeded<Member<V8UnionByteStringByteStringRecordOrByteStringSequenceSequence>>::Trace(visitor, member_headers_);
TraceIfNeeded<String>::Trace(visitor, member_integrity_);
TraceIfNeeded<bool>::Trace(visitor, member_keepalive_);
TraceIfNeeded<String>::Trace(visitor, member_method_);
TraceIfNeeded<V8RequestMode>::Trace(visitor, member_mode_);
TraceIfNeeded<V8FetchPriority>::Trace(visitor, member_priority_);
TraceIfNeeded<V8RequestRedirect>::Trace(visitor, member_redirect_);
TraceIfNeeded<String>::Trace(visitor, member_referrer_);
TraceIfNeeded<V8ReferrerPolicy>::Trace(visitor, member_referrer_policy_);
TraceIfNeeded<Member<AbortSignal>>::Trace(visitor, member_signal_);
TraceIfNeeded<V8IPAddressSpace>::Trace(visitor, member_target_address_space_);
TraceIfNeeded<Member<TrustToken>>::Trace(visitor, member_trust_token_);
bindings::DictionaryBase::Trace(visitor);
}

bool RequestInit::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasBody()) {
  if (!ToV8Traits<IDLAny>::ToV8(script_state, member_body_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCache()) {
  if (!ToV8Traits<V8RequestCache>::ToV8(script_state, member_cache_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCredentials()) {
  if (!ToV8Traits<V8RequestCredentials>::ToV8(script_state, member_credentials_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::FetchUploadStreamingEnabled()) {
  if (hasDuplex()) {
  if (!ToV8Traits<V8RequestDuplex>::ToV8(script_state, member_duplex_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasHeaders()) {
  if (!ToV8Traits<V8UnionByteStringByteStringRecordOrByteStringSequenceSequence>::ToV8(script_state, member_headers_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIntegrity()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_integrity_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasKeepalive()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_keepalive_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasMethod()) {
  if (!ToV8Traits<IDLByteString>::ToV8(script_state, member_method_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasMode()) {
  if (!ToV8Traits<V8RequestMode>::ToV8(script_state, member_mode_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::PriorityHintsEnabled()) {
  if (hasPriority()) {
  if (!ToV8Traits<V8FetchPriority>::ToV8(script_state, member_priority_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasRedirect()) {
  if (!ToV8Traits<V8RequestRedirect>::ToV8(script_state, member_redirect_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[10].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasReferrer()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_referrer_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[11].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasReferrerPolicy()) {
  if (!ToV8Traits<V8ReferrerPolicy>::ToV8(script_state, member_referrer_policy_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[12].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSignal()) {
  if (!ToV8Traits<IDLNullable<AbortSignal>>::ToV8(script_state, member_signal_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[13].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::PrivateNetworkAccessPermissionPromptEnabled()) {
  if (hasTargetAddressSpace()) {
  if (!ToV8Traits<V8IPAddressSpace>::ToV8(script_state, member_target_address_space_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[14].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
ExecutionContext* execution_context = ExecutionContext::From(current_context);
if (RuntimeEnabledFeatures::TrustTokensEnabled(execution_context)) {
  if (hasTrustToken()) {
  if (!ToV8Traits<TrustToken>::ToV8(script_state, member_trust_token_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[15].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
return true;
}

void RequestInit::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "RequestInit";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("body");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLAny, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_body_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("cache");
if (!bindings::GetDictionaryMemberFromV8Object<V8RequestCache, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_cache_, member_cache_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("credentials");
if (!bindings::GetDictionaryMemberFromV8Object<V8RequestCredentials, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_credentials_, member_credentials_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::FetchUploadStreamingEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("duplex");
if (!bindings::GetDictionaryMemberFromV8Object<V8RequestDuplex, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_duplex_, member_duplex_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("headers");
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionByteStringByteStringRecordOrByteStringSequenceSequence, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_headers_, member_headers_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("integrity");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_integrity_, member_integrity_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("keepalive");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_keepalive_, member_keepalive_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("method");
if (!bindings::GetDictionaryMemberFromV8Object<IDLByteString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_method_, member_method_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("mode");
if (!bindings::GetDictionaryMemberFromV8Object<V8RequestMode, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), has_mode_, member_mode_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::PriorityHintsEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("priority");
if (!bindings::GetDictionaryMemberFromV8Object<V8FetchPriority, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), has_priority_, member_priority_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("redirect");
if (!bindings::GetDictionaryMemberFromV8Object<V8RequestRedirect, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[10].Get(isolate), has_redirect_, member_redirect_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("referrer");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[11].Get(isolate), has_referrer_, member_referrer_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("referrerPolicy");
if (!bindings::GetDictionaryMemberFromV8Object<V8ReferrerPolicy, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[12].Get(isolate), has_referrer_policy_, member_referrer_policy_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("signal");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<AbortSignal>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[13].Get(isolate), has_signal_, member_signal_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::PrivateNetworkAccessPermissionPromptEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("targetAddressSpace");
if (!bindings::GetDictionaryMemberFromV8Object<V8IPAddressSpace, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[14].Get(isolate), has_target_address_space_, member_target_address_space_, try_block, exception_state)) {
  return;
}
}
ExecutionContext* execution_context = ExecutionContext::From(current_context);
if (RuntimeEnabledFeatures::TrustTokensEnabled(execution_context)) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("trustToken");
if (!bindings::GetDictionaryMemberFromV8Object<TrustToken, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[15].Get(isolate), has_trust_token_, member_trust_token_, try_block, exception_state)) {
  return;
}
}
}

const base::span<const v8::Eternal<v8::Name>> RequestInit::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"body",
"cache",
"credentials",
"duplex",
"headers",
"integrity",
"keepalive",
"method",
"mode",
"priority",
"redirect",
"referrer",
"referrerPolicy",
"signal",
"targetAddressSpace",
"trustToken",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
