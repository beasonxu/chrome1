// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_internal_dictionary.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_test_callback.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_double_string.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_internalenum_internalenumsequence.h"
#include "third_party/blink/renderer/core/dom/element.h"
#include "third_party/blink/renderer/core/dom/events/event_target.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



InternalDictionary* InternalDictionary::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  InternalDictionary* dictionary = MakeGarbageCollected<InternalDictionary>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "InternalDictionary";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 InternalDictionary::InternalDictionary(v8::Isolate* isolate) : member_object_or_null_member_with_default_(isolate, v8::Null(isolate)) {
  
}

















String InternalDictionary::getByteStringMemberOr(const String& fallback_value) const {
  if (!hasByteStringMember()) {
  return fallback_value;
}
return member_byte_string_member_;
}

String InternalDictionary::getByteStringMemberOr(String&& fallback_value) const {
  if (!hasByteStringMember()) {
  return std::move(fallback_value);
}
return member_byte_string_member_;
}

void InternalDictionary::setByteStringMember(const String& value) {
  member_byte_string_member_ = value;
has_byte_string_member_ = true;
}

void InternalDictionary::setByteStringMember(String&& value) {
  member_byte_string_member_ = std::move(value);
has_byte_string_member_ = true;
}

























HeapVector<Member<V8UnionDoubleOrString>> InternalDictionary::getDoubleOrStringSequenceMemberOr(const HeapVector<Member<V8UnionDoubleOrString>>& fallback_value) const {
  if (!hasDoubleOrStringSequenceMember()) {
  return fallback_value;
}
return member_double_or_string_sequence_member_;
}

HeapVector<Member<V8UnionDoubleOrString>> InternalDictionary::getDoubleOrStringSequenceMemberOr(HeapVector<Member<V8UnionDoubleOrString>>&& fallback_value) const {
  if (!hasDoubleOrStringSequenceMember()) {
  return std::move(fallback_value);
}
return member_double_or_string_sequence_member_;
}

void InternalDictionary::setDoubleOrStringSequenceMember(const HeapVector<Member<V8UnionDoubleOrString>>& value) {
  member_double_or_string_sequence_member_ = value;
has_double_or_string_sequence_member_ = true;
}

void InternalDictionary::setDoubleOrStringSequenceMember(HeapVector<Member<V8UnionDoubleOrString>>&& value) {
  member_double_or_string_sequence_member_ = std::move(value);
has_double_or_string_sequence_member_ = true;
}



































































































String InternalDictionary::getStringMemberOr(const String& fallback_value) const {
  if (!hasStringMember()) {
  return fallback_value;
}
return member_string_member_;
}

String InternalDictionary::getStringMemberOr(String&& fallback_value) const {
  if (!hasStringMember()) {
  return std::move(fallback_value);
}
return member_string_member_;
}

void InternalDictionary::setStringMember(const String& value) {
  member_string_member_ = value;
has_string_member_ = true;
}

void InternalDictionary::setStringMember(String&& value) {
  member_string_member_ = std::move(value);
has_string_member_ = true;
}




void InternalDictionary::setStringMemberWithDefault(const String& value) {
  member_string_member_with_default_ = value;
}

void InternalDictionary::setStringMemberWithDefault(String&& value) {
  member_string_member_with_default_ = std::move(value);
}




Vector<String> InternalDictionary::getStringSequenceMemberOr(const Vector<String>& fallback_value) const {
  if (!hasStringSequenceMember()) {
  return fallback_value;
}
return member_string_sequence_member_;
}

Vector<String> InternalDictionary::getStringSequenceMemberOr(Vector<String>&& fallback_value) const {
  if (!hasStringSequenceMember()) {
  return std::move(fallback_value);
}
return member_string_sequence_member_;
}

void InternalDictionary::setStringSequenceMember(const Vector<String>& value) {
  member_string_sequence_member_ = value;
has_string_sequence_member_ = true;
}

void InternalDictionary::setStringSequenceMember(Vector<String>&& value) {
  member_string_sequence_member_ = std::move(value);
has_string_sequence_member_ = true;
}




void InternalDictionary::setStringSequenceMemberWithDefault(const Vector<String>& value) {
  member_string_sequence_member_with_default_ = value;
}

void InternalDictionary::setStringSequenceMemberWithDefault(Vector<String>&& value) {
  member_string_sequence_member_with_default_ = std::move(value);
}




absl::optional<Vector<String>> InternalDictionary::getStringSequenceOrNullMemberOr(const absl::optional<Vector<String>>& fallback_value) const {
  if (!hasStringSequenceOrNullMember()) {
  return fallback_value;
}
return member_string_sequence_or_null_member_;
}

absl::optional<Vector<String>> InternalDictionary::getStringSequenceOrNullMemberOr(absl::optional<Vector<String>>&& fallback_value) const {
  if (!hasStringSequenceOrNullMember()) {
  return std::move(fallback_value);
}
return member_string_sequence_or_null_member_;
}

void InternalDictionary::setStringSequenceOrNullMember(const absl::optional<Vector<String>>& value) {
  member_string_sequence_or_null_member_ = value;
has_string_sequence_or_null_member_ = true;
}

void InternalDictionary::setStringSequenceOrNullMember(absl::optional<Vector<String>>&& value) {
  member_string_sequence_or_null_member_ = std::move(value);
has_string_sequence_or_null_member_ = true;
}

void InternalDictionary::setStringSequenceOrNullMember(const Vector<String>& value) {
  member_string_sequence_or_null_member_ = value;
has_string_sequence_or_null_member_ = true;
}

void InternalDictionary::setStringSequenceOrNullMember(Vector<String>&& value) {
  member_string_sequence_or_null_member_ = std::move(value);
has_string_sequence_or_null_member_ = true;
}










String InternalDictionary::getUsvStringMemberOr(const String& fallback_value) const {
  if (!hasUsvStringMember()) {
  return fallback_value;
}
return member_usv_string_member_;
}

String InternalDictionary::getUsvStringMemberOr(String&& fallback_value) const {
  if (!hasUsvStringMember()) {
  return std::move(fallback_value);
}
return member_usv_string_member_;
}

void InternalDictionary::setUsvStringMember(const String& value) {
  member_usv_string_member_ = value;
has_usv_string_member_ = true;
}

void InternalDictionary::setUsvStringMember(String&& value) {
  member_usv_string_member_ = std::move(value);
has_usv_string_member_ = true;
}




void InternalDictionary::Trace(Visitor* visitor) const {
  TraceIfNeeded<ScriptValue>::Trace(visitor, member_any_member_);
TraceIfNeeded<bool>::Trace(visitor, member_boolean_member_);
TraceIfNeeded<String>::Trace(visitor, member_byte_string_member_);
TraceIfNeeded<Member<V8TestCallback>>::Trace(visitor, member_callback_function_member_);
TraceIfNeeded<double>::Trace(visitor, member_double_member_);
TraceIfNeeded<Member<V8UnionDoubleOrString>>::Trace(visitor, member_double_or_string_member_);
TraceIfNeeded<HeapVector<Member<V8UnionDoubleOrString>>>::Trace(visitor, member_double_or_string_sequence_member_);
TraceIfNeeded<Member<Element>>::Trace(visitor, member_element_member_);
TraceIfNeeded<Member<Element>>::Trace(visitor, member_element_or_null_member_);
TraceIfNeeded<V8InternalEnum>::Trace(visitor, member_enum_member_);
TraceIfNeeded<V8InternalEnum>::Trace(visitor, member_enum_member_with_default_);
TraceIfNeeded<absl::optional<V8InternalEnum>>::Trace(visitor, member_enum_or_null_member_);
TraceIfNeeded<Member<EventTarget>>::Trace(visitor, member_event_target_or_null_member_);
TraceIfNeeded<Member<V8UnionInternalEnumOrInternalEnumSequence>>::Trace(visitor, member_internal_enum_or_internal_enum_sequence_member_);
TraceIfNeeded<int32_t>::Trace(visitor, member_long_member_);
TraceIfNeeded<int32_t>::Trace(visitor, member_long_member_with_clamp_);
TraceIfNeeded<int32_t>::Trace(visitor, member_long_member_with_default_);
TraceIfNeeded<int32_t>::Trace(visitor, member_long_member_with_enforce_range_);
TraceIfNeeded<absl::optional<int32_t>>::Trace(visitor, member_long_or_null_member_);
TraceIfNeeded<absl::optional<int32_t>>::Trace(visitor, member_long_or_null_member_with_default_);
TraceIfNeeded<ScriptValue>::Trace(visitor, member_object_member_);
TraceIfNeeded<ScriptValue>::Trace(visitor, member_object_or_null_member_with_default_);
TraceIfNeeded<String>::Trace(visitor, member_string_member_);
TraceIfNeeded<String>::Trace(visitor, member_string_member_with_default_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_string_sequence_member_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_string_sequence_member_with_default_);
TraceIfNeeded<absl::optional<Vector<String>>>::Trace(visitor, member_string_sequence_or_null_member_);
TraceIfNeeded<double>::Trace(visitor, member_unrestricted_double_member_);
TraceIfNeeded<String>::Trace(visitor, member_usv_string_member_);
bindings::DictionaryBase::Trace(visitor);
}

bool InternalDictionary::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAnyMember()) {
  if (!ToV8Traits<IDLAny>::ToV8(script_state, member_any_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasBooleanMember()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_boolean_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasByteStringMember()) {
  if (!ToV8Traits<IDLByteString>::ToV8(script_state, member_byte_string_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCallbackFunctionMember()) {
  if (!ToV8Traits<V8TestCallback>::ToV8(script_state, member_callback_function_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDoubleMember()) {
  if (!ToV8Traits<IDLDouble>::ToV8(script_state, member_double_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDoubleOrStringMember()) {
  if (!ToV8Traits<V8UnionDoubleOrString>::ToV8(script_state, member_double_or_string_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDoubleOrStringSequenceMember()) {
  if (!ToV8Traits<IDLSequence<V8UnionDoubleOrString>>::ToV8(script_state, member_double_or_string_sequence_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasElementMember()) {
  if (!ToV8Traits<Element>::ToV8(script_state, member_element_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasElementOrNullMember()) {
  if (!ToV8Traits<IDLNullable<Element>>::ToV8(script_state, member_element_or_null_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasEnumMember()) {
  if (!ToV8Traits<V8InternalEnum>::ToV8(script_state, member_enum_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasEnumMemberWithDefault()) {
  if (!ToV8Traits<V8InternalEnum>::ToV8(script_state, member_enum_member_with_default_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[10].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasEnumOrNullMember()) {
  if (!ToV8Traits<IDLNullable<V8InternalEnum>>::ToV8(script_state, member_enum_or_null_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[11].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasEventTargetOrNullMember()) {
  if (!ToV8Traits<IDLNullable<EventTarget>>::ToV8(script_state, member_event_target_or_null_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[12].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasInternalEnumOrInternalEnumSequenceMember()) {
  if (!ToV8Traits<V8UnionInternalEnumOrInternalEnumSequence>::ToV8(script_state, member_internal_enum_or_internal_enum_sequence_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[13].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLongMember()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_long_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[14].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLongMemberWithClamp()) {
  if (!ToV8Traits<IDLLongClamp>::ToV8(script_state, member_long_member_with_clamp_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[15].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLongMemberWithDefault()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_long_member_with_default_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[16].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLongMemberWithEnforceRange()) {
  if (!ToV8Traits<IDLLongEnforceRange>::ToV8(script_state, member_long_member_with_enforce_range_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[17].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLongOrNullMember()) {
  if (!ToV8Traits<IDLNullable<IDLLong>>::ToV8(script_state, member_long_or_null_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[18].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLongOrNullMemberWithDefault()) {
  if (!ToV8Traits<IDLNullable<IDLLong>>::ToV8(script_state, member_long_or_null_member_with_default_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[19].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasObjectMember()) {
  if (!ToV8Traits<IDLObject>::ToV8(script_state, member_object_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[20].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasObjectOrNullMemberWithDefault()) {
  if (!ToV8Traits<IDLNullable<IDLObject>>::ToV8(script_state, member_object_or_null_member_with_default_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[21].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStringMember()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_string_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[22].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStringMemberWithDefault()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_string_member_with_default_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[23].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStringSequenceMember()) {
  if (!ToV8Traits<IDLSequence<IDLString>>::ToV8(script_state, member_string_sequence_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[24].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStringSequenceMemberWithDefault()) {
  if (!ToV8Traits<IDLSequence<IDLString>>::ToV8(script_state, member_string_sequence_member_with_default_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[25].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStringSequenceOrNullMember()) {
  if (!ToV8Traits<IDLNullable<IDLSequence<IDLString>>>::ToV8(script_state, member_string_sequence_or_null_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[26].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUnrestrictedDoubleMember()) {
  if (!ToV8Traits<IDLUnrestrictedDouble>::ToV8(script_state, member_unrestricted_double_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[27].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUsvStringMember()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_usv_string_member_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[28].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void InternalDictionary::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "InternalDictionary";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("anyMember");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLAny, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_any_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("booleanMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_boolean_member_, member_boolean_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("byteStringMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLByteString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_byte_string_member_, member_byte_string_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("callbackFunctionMember");
if (!bindings::GetDictionaryMemberFromV8Object<V8TestCallback, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_callback_function_member_, member_callback_function_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("doubleMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_double_member_, member_double_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("doubleOrStringMember");
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionDoubleOrString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_double_or_string_member_, member_double_or_string_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("doubleOrStringSequenceMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<V8UnionDoubleOrString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_double_or_string_sequence_member_, member_double_or_string_sequence_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("elementMember");
if (!bindings::GetDictionaryMemberFromV8Object<Element, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_element_member_, member_element_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("elementOrNullMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<Element>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), has_element_or_null_member_, member_element_or_null_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("enumMember");
if (!bindings::GetDictionaryMemberFromV8Object<V8InternalEnum, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), has_enum_member_, member_enum_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("enumMemberWithDefault");
if (!bindings::GetDictionaryMemberFromV8Object<V8InternalEnum, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[10].Get(isolate), fallback_presence_var, member_enum_member_with_default_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("enumOrNullMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<V8InternalEnum>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[11].Get(isolate), has_enum_or_null_member_, member_enum_or_null_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("eventTargetOrNullMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<EventTarget>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[12].Get(isolate), fallback_presence_var, member_event_target_or_null_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("internalEnumOrInternalEnumSequenceMember");
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionInternalEnumOrInternalEnumSequence, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[13].Get(isolate), has_internal_enum_or_internal_enum_sequence_member_, member_internal_enum_or_internal_enum_sequence_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("longMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[14].Get(isolate), has_long_member_, member_long_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("longMemberWithClamp");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLongClamp, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[15].Get(isolate), has_long_member_with_clamp_, member_long_member_with_clamp_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("longMemberWithDefault");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[16].Get(isolate), fallback_presence_var, member_long_member_with_default_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("longMemberWithEnforceRange");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLongEnforceRange, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[17].Get(isolate), has_long_member_with_enforce_range_, member_long_member_with_enforce_range_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("longOrNullMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<IDLLong>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[18].Get(isolate), has_long_or_null_member_, member_long_or_null_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("longOrNullMemberWithDefault");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<IDLLong>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[19].Get(isolate), fallback_presence_var, member_long_or_null_member_with_default_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("objectMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLObject, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[20].Get(isolate), fallback_presence_var, member_object_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("objectOrNullMemberWithDefault");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<IDLObject>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[21].Get(isolate), fallback_presence_var, member_object_or_null_member_with_default_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stringMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[22].Get(isolate), has_string_member_, member_string_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stringMemberWithDefault");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[23].Get(isolate), fallback_presence_var, member_string_member_with_default_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stringSequenceMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[24].Get(isolate), has_string_sequence_member_, member_string_sequence_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stringSequenceMemberWithDefault");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[25].Get(isolate), fallback_presence_var, member_string_sequence_member_with_default_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stringSequenceOrNullMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<IDLSequence<IDLString>>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[26].Get(isolate), has_string_sequence_or_null_member_, member_string_sequence_or_null_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("unrestrictedDoubleMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnrestrictedDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[27].Get(isolate), has_unrestricted_double_member_, member_unrestricted_double_member_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("usvStringMember");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[28].Get(isolate), has_usv_string_member_, member_usv_string_member_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> InternalDictionary::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"anyMember",
"booleanMember",
"byteStringMember",
"callbackFunctionMember",
"doubleMember",
"doubleOrStringMember",
"doubleOrStringSequenceMember",
"elementMember",
"elementOrNullMember",
"enumMember",
"enumMemberWithDefault",
"enumOrNullMember",
"eventTargetOrNullMember",
"internalEnumOrInternalEnumSequenceMember",
"longMember",
"longMemberWithClamp",
"longMemberWithDefault",
"longMemberWithEnforceRange",
"longOrNullMember",
"longOrNullMemberWithDefault",
"objectMember",
"objectOrNullMemberWithDefault",
"stringMember",
"stringMemberWithDefault",
"stringSequenceMember",
"stringSequenceMemberWithDefault",
"stringSequenceOrNullMember",
"unrestrictedDoubleMember",
"usvStringMember",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
