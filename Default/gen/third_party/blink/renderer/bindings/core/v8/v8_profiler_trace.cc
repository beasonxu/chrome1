// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_profiler_trace.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_profiler_frame.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_profiler_sample.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_profiler_stack.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



ProfilerTrace* ProfilerTrace::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  ProfilerTrace* dictionary = MakeGarbageCollected<ProfilerTrace>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "ProfilerTrace";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 ProfilerTrace::ProfilerTrace() {
  
}

 ProfilerTrace::ProfilerTrace(v8::Isolate* isolate) {
  
}



void ProfilerTrace::setFrames(const HeapVector<Member<ProfilerFrame>>& value) {
  member_frames_ = value;
}

void ProfilerTrace::setFrames(HeapVector<Member<ProfilerFrame>>&& value) {
  member_frames_ = std::move(value);
}




void ProfilerTrace::setResources(const Vector<String>& value) {
  member_resources_ = value;
}

void ProfilerTrace::setResources(Vector<String>&& value) {
  member_resources_ = std::move(value);
}




void ProfilerTrace::setSamples(const HeapVector<Member<ProfilerSample>>& value) {
  member_samples_ = value;
}

void ProfilerTrace::setSamples(HeapVector<Member<ProfilerSample>>&& value) {
  member_samples_ = std::move(value);
}




void ProfilerTrace::setStacks(const HeapVector<Member<ProfilerStack>>& value) {
  member_stacks_ = value;
}

void ProfilerTrace::setStacks(HeapVector<Member<ProfilerStack>>&& value) {
  member_stacks_ = std::move(value);
}




void ProfilerTrace::Trace(Visitor* visitor) const {
  TraceIfNeeded<HeapVector<Member<ProfilerFrame>>>::Trace(visitor, member_frames_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_resources_);
TraceIfNeeded<HeapVector<Member<ProfilerSample>>>::Trace(visitor, member_samples_);
TraceIfNeeded<HeapVector<Member<ProfilerStack>>>::Trace(visitor, member_stacks_);
bindings::DictionaryBase::Trace(visitor);
}

bool ProfilerTrace::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasFrames()) {
  if (!ToV8Traits<IDLSequence<ProfilerFrame>>::ToV8(script_state, member_frames_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasResources()) {
  if (!ToV8Traits<IDLSequence<IDLString>>::ToV8(script_state, member_resources_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSamples()) {
  if (!ToV8Traits<IDLSequence<ProfilerSample>>::ToV8(script_state, member_samples_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStacks()) {
  if (!ToV8Traits<IDLSequence<ProfilerStack>>::ToV8(script_state, member_stacks_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void ProfilerTrace::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "ProfilerTrace";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("frames");
constexpr bool is_required = true;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<ProfilerFrame>, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_frames_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("resources");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLString>, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_resources_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("samples");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<ProfilerSample>, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_samples_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stacks");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<ProfilerStack>, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_stacks_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> ProfilerTrace::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"frames",
"resources",
"samples",
"stacks",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
