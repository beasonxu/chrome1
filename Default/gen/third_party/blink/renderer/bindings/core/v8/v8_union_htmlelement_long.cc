// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_union_htmlelement_long.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_element.h"
#include "third_party/blink/renderer/core/html/html_element.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"

namespace blink {



V8UnionHTMLElementOrLong* V8UnionHTMLElementOrLong::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  if (V8HTMLElement::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8HTMLElement::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionHTMLElementOrLong>(blink_value);
}
if (v8_value->IsNumber()) {
  auto&& blink_value = NativeValueTraits<IDLLong>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionHTMLElementOrLong>(blink_value);
}
{
  auto&& blink_value = NativeValueTraits<IDLLong>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionHTMLElementOrLong>(blink_value);
}
}










v8::MaybeLocal<v8::Value> V8UnionHTMLElementOrLong::ToV8Value(ScriptState* script_state) const {
  switch (content_type_) {
  case ContentType::kHTMLElement: {
    return ToV8Traits<HTMLElement>::ToV8(script_state, member_html_element_);
  }
  case ContentType::kLong: {
    return ToV8Traits<IDLLong>::ToV8(script_state, member_long_);
  }
}

NOTREACHED();
return v8::MaybeLocal<v8::Value>();
}

void V8UnionHTMLElementOrLong::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<HTMLElement>>::Trace(visitor, member_html_element_);
TraceIfNeeded<int32_t>::Trace(visitor, member_long_);
bindings::UnionBase::Trace(visitor);
}

void V8UnionHTMLElementOrLong::Clear() {
  member_html_element_.Clear();
member_long_ = 0;
}



}  // namespace blink
