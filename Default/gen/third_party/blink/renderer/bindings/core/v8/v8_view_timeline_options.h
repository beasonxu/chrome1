// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_VIEW_TIMELINE_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_VIEW_TIMELINE_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_scroll_direction.h"
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class Element;
class ExceptionState;

class CORE_EXPORT ViewTimelineOptions : public bindings::DictionaryBase {
  
  public:
static ViewTimelineOptions* Create() {
  return MakeGarbageCollected<ViewTimelineOptions>();
}
static ViewTimelineOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<ViewTimelineOptions>(isolate);
}
static ViewTimelineOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  ViewTimelineOptions();
explicit  ViewTimelineOptions(v8::Isolate* isolate);

bool hasAxis() const {
  return true;
}
V8ScrollDirection axis() const {
  return member_axis_;
}
void setAxis(V8ScrollDirection value) {
  member_axis_ = value;
}
void setAxis(V8ScrollDirection::Enum value) {
  member_axis_ = V8ScrollDirection(value);
}

bool hasSubject() const {
  return has_subject_;
}
Element* subject() const {
  DCHECK(hasSubject());
return member_subject_;
}
Element* getSubjectOr(Element* fallback_value) const {
  if (!hasSubject()) {
  return fallback_value;
}
return member_subject_;
}
void setSubject(Element* value) {
  member_subject_ = value;
has_subject_ = true;
DCHECK(member_subject_);
}


// Obsolete accessor functions
void setAxis(const String& value) {
  member_axis_ = V8ScrollDirection::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_subject_ = false;

V8ScrollDirection member_axis_{V8ScrollDirection::Enum::kBlock};
Member<Element> member_subject_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_VIEW_TIMELINE_OPTIONS_H_
