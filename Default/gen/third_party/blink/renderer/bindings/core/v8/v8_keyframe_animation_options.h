// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_KEYFRAME_ANIMATION_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_KEYFRAME_ANIMATION_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_keyframe_effect_options.h"
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class AnimationTimeline;
class ExceptionState;

class CORE_EXPORT KeyframeAnimationOptions : public KeyframeEffectOptions {
  
  public:
static KeyframeAnimationOptions* Create() {
  return MakeGarbageCollected<KeyframeAnimationOptions>();
}
static KeyframeAnimationOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<KeyframeAnimationOptions>(isolate);
}
static KeyframeAnimationOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  KeyframeAnimationOptions();
explicit  KeyframeAnimationOptions(v8::Isolate* isolate);

bool hasId() const {
  return true;
}
const String& id() const {
  return member_id_;
}
void setId(const String& value);
void setId(String&& value);

bool hasTimeline() const {
  return has_timeline_;
}
AnimationTimeline* timeline() const {
  DCHECK(hasTimeline());
return member_timeline_;
}
AnimationTimeline* getTimelineOr(AnimationTimeline* fallback_value) const {
  if (!hasTimeline()) {
  return fallback_value;
}
return member_timeline_;
}
void setTimeline(AnimationTimeline* value) {
  member_timeline_ = value;
has_timeline_ = true;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_timeline_ = false;

String member_id_{""};
Member<AnimationTimeline> member_timeline_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_KEYFRAME_ANIMATION_OPTIONS_H_
