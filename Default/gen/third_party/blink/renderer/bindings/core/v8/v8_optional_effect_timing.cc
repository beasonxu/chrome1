// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_optional_effect_timing.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_cssnumericvalue_string_unrestricteddouble.h"
#include "third_party/blink/renderer/core/css/cssom/css_numeric_value.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



OptionalEffectTiming* OptionalEffectTiming::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  OptionalEffectTiming* dictionary = MakeGarbageCollected<OptionalEffectTiming>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "OptionalEffectTiming";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 OptionalEffectTiming::OptionalEffectTiming() {
  
}

 OptionalEffectTiming::OptionalEffectTiming(v8::Isolate* isolate) {
  
}
























String OptionalEffectTiming::getEasingOr(const String& fallback_value) const {
  if (!hasEasing()) {
  return fallback_value;
}
return member_easing_;
}

String OptionalEffectTiming::getEasingOr(String&& fallback_value) const {
  if (!hasEasing()) {
  return std::move(fallback_value);
}
return member_easing_;
}

void OptionalEffectTiming::setEasing(const String& value) {
  member_easing_ = value;
has_easing_ = true;
}

void OptionalEffectTiming::setEasing(String&& value) {
  member_easing_ = std::move(value);
has_easing_ = true;
}
































void OptionalEffectTiming::Trace(Visitor* visitor) const {
  TraceIfNeeded<double>::Trace(visitor, member_delay_);
TraceIfNeeded<V8PlaybackDirection>::Trace(visitor, member_direction_);
TraceIfNeeded<Member<V8UnionCSSNumericValueOrStringOrUnrestrictedDouble>>::Trace(visitor, member_duration_);
TraceIfNeeded<String>::Trace(visitor, member_easing_);
TraceIfNeeded<double>::Trace(visitor, member_end_delay_);
TraceIfNeeded<V8FillMode>::Trace(visitor, member_fill_);
TraceIfNeeded<double>::Trace(visitor, member_iteration_start_);
TraceIfNeeded<double>::Trace(visitor, member_iterations_);
bindings::DictionaryBase::Trace(visitor);
}

bool OptionalEffectTiming::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasDelay()) {
  if (!ToV8Traits<IDLDouble>::ToV8(script_state, member_delay_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDirection()) {
  if (!ToV8Traits<V8PlaybackDirection>::ToV8(script_state, member_direction_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDuration()) {
  if (!ToV8Traits<V8UnionCSSNumericValueOrStringOrUnrestrictedDouble>::ToV8(script_state, member_duration_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasEasing()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_easing_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasEndDelay()) {
  if (!ToV8Traits<IDLDouble>::ToV8(script_state, member_end_delay_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasFill()) {
  if (!ToV8Traits<V8FillMode>::ToV8(script_state, member_fill_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIterationStart()) {
  if (!ToV8Traits<IDLDouble>::ToV8(script_state, member_iteration_start_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIterations()) {
  if (!ToV8Traits<IDLUnrestrictedDouble>::ToV8(script_state, member_iterations_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void OptionalEffectTiming::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "OptionalEffectTiming";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("delay");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_delay_, member_delay_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("direction");
if (!bindings::GetDictionaryMemberFromV8Object<V8PlaybackDirection, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_direction_, member_direction_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("duration");
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionCSSNumericValueOrStringOrUnrestrictedDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_duration_, member_duration_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("easing");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_easing_, member_easing_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("endDelay");
if (!bindings::GetDictionaryMemberFromV8Object<IDLDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_end_delay_, member_end_delay_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("fill");
if (!bindings::GetDictionaryMemberFromV8Object<V8FillMode, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_fill_, member_fill_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("iterationStart");
if (!bindings::GetDictionaryMemberFromV8Object<IDLDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_iteration_start_, member_iteration_start_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("iterations");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnrestrictedDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_iterations_, member_iterations_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> OptionalEffectTiming::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"delay",
"direction",
"duration",
"easing",
"endDelay",
"fill",
"iterationStart",
"iterations",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
