// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_GET_INNER_HTML_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_GET_INNER_HTML_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class ExceptionState;
class ShadowRoot;

class CORE_EXPORT GetInnerHTMLOptions : public bindings::DictionaryBase {
  
  public:
static GetInnerHTMLOptions* Create() {
  return MakeGarbageCollected<GetInnerHTMLOptions>();
}
static GetInnerHTMLOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<GetInnerHTMLOptions>(isolate);
}
static GetInnerHTMLOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  GetInnerHTMLOptions();
explicit  GetInnerHTMLOptions(v8::Isolate* isolate);

bool hasClosedRoots() const {
  return has_closed_roots_;
}
const HeapVector<Member<ShadowRoot>>& closedRoots() const {
  DCHECK(hasClosedRoots());
return member_closed_roots_;
}
HeapVector<Member<ShadowRoot>> getClosedRootsOr(const HeapVector<Member<ShadowRoot>>& fallback_value) const;
HeapVector<Member<ShadowRoot>> getClosedRootsOr(HeapVector<Member<ShadowRoot>>&& fallback_value) const;
void setClosedRoots(const HeapVector<Member<ShadowRoot>>& value);
void setClosedRoots(HeapVector<Member<ShadowRoot>>&& value);

bool hasIncludeShadowRoots() const {
  return true;
}
bool includeShadowRoots() const {
  return member_include_shadow_roots_;
}
void setIncludeShadowRoots(bool value) {
  member_include_shadow_roots_ = value;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_closed_roots_ = false;

HeapVector<Member<ShadowRoot>> member_closed_roots_;
bool member_include_shadow_roots_{true};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_GET_INNER_HTML_OPTIONS_H_
