// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_EDIT_CONTEXT_INIT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_EDIT_CONTEXT_INIT_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_edit_context_enter_key_hint.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_edit_context_input_mode.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_edit_context_input_panel_policy.h"
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;

class CORE_EXPORT EditContextInit : public bindings::DictionaryBase {
  
  public:
static EditContextInit* Create() {
  return MakeGarbageCollected<EditContextInit>();
}
static EditContextInit* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<EditContextInit>(isolate);
}
static EditContextInit* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  EditContextInit();
explicit  EditContextInit(v8::Isolate* isolate);

bool hasEnterKeyHint() const {
  return has_enter_key_hint_;
}
V8EditContextEnterKeyHint enterKeyHint() const {
  DCHECK(hasEnterKeyHint());
return member_enter_key_hint_;
}
V8EditContextEnterKeyHint getEnterKeyHintOr(V8EditContextEnterKeyHint fallback_value) const {
  if (!hasEnterKeyHint()) {
  return fallback_value;
}
return member_enter_key_hint_;
}
void setEnterKeyHint(V8EditContextEnterKeyHint value) {
  member_enter_key_hint_ = value;
has_enter_key_hint_ = true;
}
void setEnterKeyHint(V8EditContextEnterKeyHint::Enum value) {
  member_enter_key_hint_ = V8EditContextEnterKeyHint(value);
has_enter_key_hint_ = true;
}

bool hasInputMode() const {
  return has_input_mode_;
}
V8EditContextInputMode inputMode() const {
  DCHECK(hasInputMode());
return member_input_mode_;
}
V8EditContextInputMode getInputModeOr(V8EditContextInputMode fallback_value) const {
  if (!hasInputMode()) {
  return fallback_value;
}
return member_input_mode_;
}
void setInputMode(V8EditContextInputMode value) {
  member_input_mode_ = value;
has_input_mode_ = true;
}
void setInputMode(V8EditContextInputMode::Enum value) {
  member_input_mode_ = V8EditContextInputMode(value);
has_input_mode_ = true;
}

bool hasInputPanelPolicy() const {
  return has_input_panel_policy_;
}
V8EditContextInputPanelPolicy inputPanelPolicy() const {
  DCHECK(hasInputPanelPolicy());
return member_input_panel_policy_;
}
V8EditContextInputPanelPolicy getInputPanelPolicyOr(V8EditContextInputPanelPolicy fallback_value) const {
  if (!hasInputPanelPolicy()) {
  return fallback_value;
}
return member_input_panel_policy_;
}
void setInputPanelPolicy(V8EditContextInputPanelPolicy value) {
  member_input_panel_policy_ = value;
has_input_panel_policy_ = true;
}
void setInputPanelPolicy(V8EditContextInputPanelPolicy::Enum value) {
  member_input_panel_policy_ = V8EditContextInputPanelPolicy(value);
has_input_panel_policy_ = true;
}

bool hasSelectionEnd() const {
  return has_selection_end_;
}
uint32_t selectionEnd() const {
  DCHECK(hasSelectionEnd());
return member_selection_end_;
}
uint32_t getSelectionEndOr(uint32_t fallback_value) const {
  if (!hasSelectionEnd()) {
  return fallback_value;
}
return member_selection_end_;
}
void setSelectionEnd(uint32_t value) {
  member_selection_end_ = value;
has_selection_end_ = true;
}

bool hasSelectionStart() const {
  return has_selection_start_;
}
uint32_t selectionStart() const {
  DCHECK(hasSelectionStart());
return member_selection_start_;
}
uint32_t getSelectionStartOr(uint32_t fallback_value) const {
  if (!hasSelectionStart()) {
  return fallback_value;
}
return member_selection_start_;
}
void setSelectionStart(uint32_t value) {
  member_selection_start_ = value;
has_selection_start_ = true;
}

bool hasText() const {
  return has_text_;
}
const String& text() const {
  DCHECK(hasText());
return member_text_;
}
String getTextOr(const String& fallback_value) const;
String getTextOr(String&& fallback_value) const;
void setText(const String& value);
void setText(String&& value);


// Obsolete accessor functions
void setEnterKeyHint(const String& value) {
  member_enter_key_hint_ = V8EditContextEnterKeyHint::Create(value).value();
has_enter_key_hint_ = true;
}
void setInputMode(const String& value) {
  member_input_mode_ = V8EditContextInputMode::Create(value).value();
has_input_mode_ = true;
}
void setInputPanelPolicy(const String& value) {
  member_input_panel_policy_ = V8EditContextInputPanelPolicy::Create(value).value();
has_input_panel_policy_ = true;
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_enter_key_hint_ = false;
bool has_input_mode_ = false;
bool has_input_panel_policy_ = false;
bool has_selection_end_ = false;
bool has_selection_start_ = false;
bool has_text_ = false;

V8EditContextEnterKeyHint member_enter_key_hint_{static_cast<V8EditContextEnterKeyHint::Enum>(0)};
V8EditContextInputMode member_input_mode_{static_cast<V8EditContextInputMode::Enum>(0)};
V8EditContextInputPanelPolicy member_input_panel_policy_{static_cast<V8EditContextInputPanelPolicy::Enum>(0)};
uint32_t member_selection_end_;
uint32_t member_selection_start_;
String member_text_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_EDIT_CONTEXT_INIT_H_
