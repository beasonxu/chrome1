// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_computed_effect_timing.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_cssnumericvalue_double.h"
#include "third_party/blink/renderer/core/css/cssom/css_numeric_value.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



ComputedEffectTiming* ComputedEffectTiming::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  ComputedEffectTiming* dictionary = MakeGarbageCollected<ComputedEffectTiming>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "ComputedEffectTiming";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 ComputedEffectTiming::ComputedEffectTiming() {
  
}

 ComputedEffectTiming::ComputedEffectTiming(v8::Isolate* isolate) : EffectTiming(isolate) {
  
}






































void ComputedEffectTiming::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<V8UnionCSSNumericValueOrDouble>>::Trace(visitor, member_active_duration_);
TraceIfNeeded<absl::optional<double>>::Trace(visitor, member_current_iteration_);
TraceIfNeeded<Member<V8UnionCSSNumericValueOrDouble>>::Trace(visitor, member_end_time_);
TraceIfNeeded<Member<V8UnionCSSNumericValueOrDouble>>::Trace(visitor, member_local_time_);
TraceIfNeeded<absl::optional<double>>::Trace(visitor, member_progress_);
EffectTiming::Trace(visitor);
}

bool ComputedEffectTiming::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  if (!EffectTiming::FillV8ObjectWithMembers(script_state, v8_dictionary)) {
  return false;
}

v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasActiveDuration()) {
  if (!ToV8Traits<V8UnionCSSNumericValueOrDouble>::ToV8(script_state, member_active_duration_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCurrentIteration()) {
  if (!ToV8Traits<IDLNullable<IDLUnrestrictedDouble>>::ToV8(script_state, member_current_iteration_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasEndTime()) {
  if (!ToV8Traits<V8UnionCSSNumericValueOrDouble>::ToV8(script_state, member_end_time_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLocalTime()) {
  if (!ToV8Traits<IDLNullable<V8UnionCSSNumericValueOrDouble>>::ToV8(script_state, member_local_time_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasProgress()) {
  if (!ToV8Traits<IDLNullable<IDLDouble>>::ToV8(script_state, member_progress_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void ComputedEffectTiming::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  EffectTiming::FillMembersFromV8Object(isolate, v8_dictionary, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

const char* const class_like_name = "ComputedEffectTiming";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("activeDuration");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionCSSNumericValueOrDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_active_duration_, member_active_duration_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("currentIteration");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<IDLUnrestrictedDouble>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_current_iteration_, member_current_iteration_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("endTime");
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionCSSNumericValueOrDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_end_time_, member_end_time_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("localTime");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<V8UnionCSSNumericValueOrDouble>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_local_time_, member_local_time_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("progress");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<IDLDouble>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_progress_, member_progress_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> ComputedEffectTiming::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"activeDuration",
"currentIteration",
"endTime",
"localTime",
"progress",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
