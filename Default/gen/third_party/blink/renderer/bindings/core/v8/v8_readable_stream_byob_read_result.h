// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_READABLE_STREAM_BYOB_READ_RESULT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_READABLE_STREAM_BYOB_READ_RESULT_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/core/typed_arrays/array_buffer_view_helpers.h"
#include "third_party/blink/renderer/core/typed_arrays/dom_typed_array.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class ExceptionState;

class CORE_EXPORT ReadableStreamBYOBReadResult : public bindings::DictionaryBase {
  
  public:
static ReadableStreamBYOBReadResult* Create() {
  return MakeGarbageCollected<ReadableStreamBYOBReadResult>();
}
static ReadableStreamBYOBReadResult* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<ReadableStreamBYOBReadResult>(isolate);
}
static ReadableStreamBYOBReadResult* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  ReadableStreamBYOBReadResult();
explicit  ReadableStreamBYOBReadResult(v8::Isolate* isolate);

bool hasDone() const {
  return has_done_;
}
bool done() const {
  DCHECK(hasDone());
return member_done_;
}
bool getDoneOr(bool fallback_value) const {
  if (!hasDone()) {
  return fallback_value;
}
return member_done_;
}
void setDone(bool value) {
  member_done_ = value;
has_done_ = true;
}

bool hasValue() const {
  return has_value_;
}
NotShared<DOMArrayBufferView> value() const {
  DCHECK(hasValue());
return member_value_;
}
NotShared<DOMArrayBufferView> getValueOr(NotShared<DOMArrayBufferView> fallback_value) const {
  if (!hasValue()) {
  return fallback_value;
}
return member_value_;
}
void setValue(NotShared<DOMArrayBufferView> value) {
  member_value_ = value;
has_value_ = true;
DCHECK(member_value_);
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_done_ = false;
bool has_value_ = false;

bool member_done_;
NotShared<DOMArrayBufferView> member_value_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_READABLE_STREAM_BYOB_READ_RESULT_H_
