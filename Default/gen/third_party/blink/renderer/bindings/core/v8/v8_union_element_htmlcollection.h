// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_UNION_ELEMENT_HTMLCOLLECTION_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_UNION_ELEMENT_HTMLCOLLECTION_H_

#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/bindings/union_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class Element;
class ExceptionState;
class HTMLCollection;

class CORE_EXPORT V8UnionElementOrHTMLCollection final : public bindings::UnionBase {
  
  public:
// The type of the content value of this IDL union.
enum class ContentType {
kElement, kHTMLCollection
};

static V8UnionElementOrHTMLCollection* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  V8UnionElementOrHTMLCollection(Element* value) : content_type_(ContentType::kElement), member_element_(value) {
  DCHECK(value);
}
explicit  V8UnionElementOrHTMLCollection(HTMLCollection* value) : content_type_(ContentType::kHTMLCollection), member_html_collection_(value) {
  DCHECK(value);
}

// Returns the type of the content value.
ContentType GetContentType() const {
  return content_type_;
}

bool IsElement() const {
  return content_type_ == ContentType::kElement;
}
Element* GetAsElement() const {
  DCHECK_EQ(content_type_, ContentType::kElement);
return member_element_;
}
void Set(Element* value) {
  DCHECK(value);
Clear();
member_element_ = value;
content_type_ = ContentType::kElement;
}

bool IsHTMLCollection() const {
  return content_type_ == ContentType::kHTMLCollection;
}
HTMLCollection* GetAsHTMLCollection() const {
  DCHECK_EQ(content_type_, ContentType::kHTMLCollection);
return member_html_collection_;
}
void Set(HTMLCollection* value) {
  DCHECK(value);
Clear();
member_html_collection_ = value;
content_type_ = ContentType::kHTMLCollection;
}


v8::MaybeLocal<v8::Value> ToV8Value(ScriptState* script_state) const override;

void Trace(Visitor* visitor) const override;


  
  private:
void Clear();

static constexpr const char* UnionNameInIDL() {
  return "(Element or HTMLCollection)";
}

ContentType content_type_;

Member<Element> member_element_;
Member<HTMLCollection> member_html_collection_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_UNION_ELEMENT_HTMLCOLLECTION_H_
