// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_union_htmlcanvaselement_imagebitmap_offscreencanvas.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_canvas_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_image_bitmap.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_offscreen_canvas.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_htmlcanvaselement_offscreencanvas.h"
#include "third_party/blink/renderer/core/html/canvas/html_canvas_element.h"
#include "third_party/blink/renderer/core/imagebitmap/image_bitmap.h"
#include "third_party/blink/renderer/core/offscreencanvas/offscreen_canvas.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"

namespace blink {



V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas* V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  if (V8HTMLCanvasElement::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8HTMLCanvasElement::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas>(blink_value);
}
if (V8OffscreenCanvas::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8OffscreenCanvas::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas>(blink_value);
}
if (V8ImageBitmap::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8ImageBitmap::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas>(blink_value);
}
ThrowTypeErrorNotOfType(exception_state, UnionNameInIDL());
return nullptr;
}













V8UnionHTMLCanvasElementOrOffscreenCanvas* V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas::GetAsV8UnionHTMLCanvasElementOrOffscreenCanvas() const {
  switch (content_type_) {
  case ContentType::kHTMLCanvasElement: {
    return MakeGarbageCollected<V8UnionHTMLCanvasElementOrOffscreenCanvas>(GetAsHTMLCanvasElement());
  }
  case ContentType::kOffscreenCanvas: {
    return MakeGarbageCollected<V8UnionHTMLCanvasElementOrOffscreenCanvas>(GetAsOffscreenCanvas());
  }
  default: {
    NOTREACHED();
return nullptr;
  }
}
}

void V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas::Set(const V8UnionHTMLCanvasElementOrOffscreenCanvas* value) {
  switch (value->GetContentType()) {
  case V8UnionHTMLCanvasElementOrOffscreenCanvas::ContentType::kHTMLCanvasElement: {
    Set(value->GetAsHTMLCanvasElement());
    break;
  }
  case V8UnionHTMLCanvasElementOrOffscreenCanvas::ContentType::kOffscreenCanvas: {
    Set(value->GetAsOffscreenCanvas());
    break;
  }
}
}


v8::MaybeLocal<v8::Value> V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas::ToV8Value(ScriptState* script_state) const {
  switch (content_type_) {
  case ContentType::kHTMLCanvasElement: {
    return ToV8Traits<HTMLCanvasElement>::ToV8(script_state, member_html_canvas_element_);
  }
  case ContentType::kImageBitmap: {
    return ToV8Traits<ImageBitmap>::ToV8(script_state, member_image_bitmap_);
  }
  case ContentType::kOffscreenCanvas: {
    return ToV8Traits<OffscreenCanvas>::ToV8(script_state, member_offscreen_canvas_);
  }
}

NOTREACHED();
return v8::MaybeLocal<v8::Value>();
}

void V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<HTMLCanvasElement>>::Trace(visitor, member_html_canvas_element_);
TraceIfNeeded<Member<ImageBitmap>>::Trace(visitor, member_image_bitmap_);
TraceIfNeeded<Member<OffscreenCanvas>>::Trace(visitor, member_offscreen_canvas_);
bindings::UnionBase::Trace(visitor);
}

void V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas::Clear() {
  member_html_canvas_element_.Clear();
member_image_bitmap_.Clear();
member_offscreen_canvas_.Clear();
}



}  // namespace blink
