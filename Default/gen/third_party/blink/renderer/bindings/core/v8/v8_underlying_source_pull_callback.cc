// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_underlying_source_pull_callback.h"

#include <tuple>

#include "third_party/blink/renderer/bindings/core/v8/callback_invoke_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_readablebytestreamcontroller_readablestreamdefaultcontroller.h"
#include "third_party/blink/renderer/core/streams/readable_byte_stream_controller.h"
#include "third_party/blink/renderer/core/streams/readable_stream_default_controller.h"

namespace blink {





const char* V8UnderlyingSourcePullCallback::NameInHeapSnapshot() const {
  return "V8UnderlyingSourcePullCallback";
}

v8::Maybe<ScriptPromise> V8UnderlyingSourcePullCallback::Invoke(bindings::V8ValueOrScriptWrappableAdapter arg0_receiver, const V8UnionReadableByteStreamControllerOrReadableStreamDefaultController* arg1_controller) {
  const char* const class_like_name = "UnderlyingSourcePullCallback";
const char* const property_name = "invoke";
ScriptState* callback_relevant_script_state =
    CallbackRelevantScriptStateOrThrowException(
        class_like_name, property_name);
if (!callback_relevant_script_state) {
  return v8::Nothing<ScriptPromise>();
}

if (!IsCallbackFunctionRunnable(callback_relevant_script_state, IncumbentScriptState())) {
  v8::Isolate* isolate = GetIsolate();
v8::HandleScope handle_scope(isolate);
v8::Context::Scope context_scope(callback_relevant_script_state->GetContext());
ExceptionState exception_state(isolate, ExceptionContext::Context::kOperationInvoke,class_like_name, property_name);
exception_state.ThrowException(static_cast<ExceptionCode>(ESErrorType::kError), "The provided callback is no longer runnable.");
return v8::Nothing<ScriptPromise>();
}

bindings::CallbackInvokeHelper<CallbackFunctionBase, bindings::CallbackInvokeHelperMode::kDefault, bindings::CallbackReturnTypeIsPromise::kYes> helper(
    this, class_like_name, property_name);
if (UNLIKELY(!helper.PrepareForCall(arg0_receiver))) {
  if (helper.V8Result().IsEmpty()) {
  return v8::Nothing<ScriptPromise>();
}
return helper.Result<IDLPromise, ScriptPromise>();
}
const int argc = 1;
v8::Local<v8::Value> argv[argc];
v8::Local<v8::Value> v8_arg1_controller;
ScriptState* script_state = CallbackRelevantScriptState();
if (!ToV8Traits<V8UnionReadableByteStreamControllerOrReadableStreamDefaultController>::ToV8(script_state, arg1_controller).ToLocal(&v8_arg1_controller)) {
  return v8::Nothing<ScriptPromise>();
}
argv[0] = v8_arg1_controller;
if (!helper.Call(argc, argv)) {
  return v8::Nothing<ScriptPromise>();
}
return helper.Result<IDLPromise, ScriptPromise>();
}

v8::Maybe<ScriptPromise> V8UnderlyingSourcePullCallback::Construct(const V8UnionReadableByteStreamControllerOrReadableStreamDefaultController* arg1_controller) {
  const char* const class_like_name = "UnderlyingSourcePullCallback";
const char* const property_name = "construct";
ScriptState* callback_relevant_script_state =
    CallbackRelevantScriptStateOrThrowException(
        class_like_name, property_name);
if (!callback_relevant_script_state) {
  return v8::Nothing<ScriptPromise>();
}

if (!IsCallbackFunctionRunnable(callback_relevant_script_state, IncumbentScriptState())) {
  v8::Isolate* isolate = GetIsolate();
v8::HandleScope handle_scope(isolate);
v8::Context::Scope context_scope(callback_relevant_script_state->GetContext());
ExceptionState exception_state(isolate, ExceptionContext::Context::kOperationInvoke,class_like_name, property_name);
exception_state.ThrowException(static_cast<ExceptionCode>(ESErrorType::kError), "The provided callback is no longer runnable.");
return v8::Nothing<ScriptPromise>();
}

bindings::CallbackInvokeHelper<CallbackFunctionBase, bindings::CallbackInvokeHelperMode::kConstructorCall, bindings::CallbackReturnTypeIsPromise::kYes> helper(
    this, class_like_name, property_name);
if (UNLIKELY(!helper.PrepareForCall(nullptr))) {
  if (helper.V8Result().IsEmpty()) {
  return v8::Nothing<ScriptPromise>();
}
return helper.Result<IDLPromise, ScriptPromise>();
}
const int argc = 1;
v8::Local<v8::Value> argv[argc];
v8::Local<v8::Value> v8_arg1_controller;
ScriptState* script_state = CallbackRelevantScriptState();
if (!ToV8Traits<V8UnionReadableByteStreamControllerOrReadableStreamDefaultController>::ToV8(script_state, arg1_controller).ToLocal(&v8_arg1_controller)) {
  return v8::Nothing<ScriptPromise>();
}
argv[0] = v8_arg1_controller;
if (!helper.Call(argc, argv)) {
  return v8::Nothing<ScriptPromise>();
}
return helper.Result<IDLPromise, ScriptPromise>();
}




}  // namespace blink
