// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_OBSERVABLE_ARRAY_CSS_STYLE_SHEET_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_OBSERVABLE_ARRAY_CSS_STYLE_SHEET_H_

#include "third_party/blink/renderer/bindings/core/v8/idl_types.h"
#include "third_party/blink/renderer/bindings/core/v8/observable_array.h"
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class CSSStyleSheet;
class ExceptionState;

namespace bindings {

template <typename BackingListWrappable, typename ElementIdlType> class ObservableArrayExoticObjectHandler;

}  // namespace bindings

class CORE_EXPORT V8ObservableArrayCSSStyleSheet final : public bindings::ObservableArrayImplHelper<Member<CSSStyleSheet>> {
  DEFINE_WRAPPERTYPEINFO();
using BaseClass = bindings::ObservableArrayImplHelper<Member<CSSStyleSheet>>;

  public:
using SetAlgorithmCallback = void (ScriptWrappable::*)(ScriptState* script_state, V8ObservableArrayCSSStyleSheet& observable_array, size_type index, value_type& value, ExceptionState& exception_state);
using DeleteAlgorithmCallback = void (ScriptWrappable::*)(ScriptState* script_state, V8ObservableArrayCSSStyleSheet& observable_array, size_type index, ExceptionState& exception_state);

explicit  V8ObservableArrayCSSStyleSheet(ScriptWrappable* platform_object, SetAlgorithmCallback set_algorithm_callback, DeleteAlgorithmCallback delete_algorithm_callback);

void PerformAttributeSet(ScriptState* script_state, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

v8::Local<v8::FunctionTemplate> GetProxyHandlerFunctionTemplate(ScriptState* script_state) override;

void Trace(Visitor* visitor) const override;

static void InstallObservableArrayBackingListTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> backing_list_template);


  
  private:
static const WrapperTypeInfo wrapper_type_info_body_;

class Handler;
friend class bindings::ObservableArrayExoticObjectHandler<V8ObservableArrayCSSStyleSheet, CSSStyleSheet>;

static constexpr const char* ObservableArrayNameInIDL() {
  return "ObservableArray<CSSStyleSheet>";
}

// [[SetAlgorithm]]
SetAlgorithmCallback set_algorithm_callback_ = nullptr;
// [[DeleteAlgorithm]]
DeleteAlgorithmCallback delete_algorithm_callback_ = nullptr;

  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_OBSERVABLE_ARRAY_CSS_STYLE_SHEET_H_
