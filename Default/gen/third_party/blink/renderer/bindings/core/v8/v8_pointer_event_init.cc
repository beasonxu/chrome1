// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_pointer_event_init.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/core/events/pointer_event.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



PointerEventInit* PointerEventInit::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  PointerEventInit* dictionary = MakeGarbageCollected<PointerEventInit>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "PointerEventInit";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 PointerEventInit::PointerEventInit() {
  
}

 PointerEventInit::PointerEventInit(v8::Isolate* isolate) : MouseEventInit(isolate) {
  
}

















void PointerEventInit::setCoalescedEvents(const HeapVector<Member<PointerEvent>>& value) {
  member_coalesced_events_ = value;
}

void PointerEventInit::setCoalescedEvents(HeapVector<Member<PointerEvent>>&& value) {
  member_coalesced_events_ = std::move(value);
}



















void PointerEventInit::setPointerType(const String& value) {
  member_pointer_type_ = value;
}

void PointerEventInit::setPointerType(String&& value) {
  member_pointer_type_ = std::move(value);
}




void PointerEventInit::setPredictedEvents(const HeapVector<Member<PointerEvent>>& value) {
  member_predicted_events_ = value;
}

void PointerEventInit::setPredictedEvents(HeapVector<Member<PointerEvent>>&& value) {
  member_predicted_events_ = std::move(value);
}






































void PointerEventInit::Trace(Visitor* visitor) const {
  TraceIfNeeded<double>::Trace(visitor, member_altitude_angle_);
TraceIfNeeded<double>::Trace(visitor, member_azimuth_angle_);
TraceIfNeeded<HeapVector<Member<PointerEvent>>>::Trace(visitor, member_coalesced_events_);
TraceIfNeeded<double>::Trace(visitor, member_height_);
TraceIfNeeded<bool>::Trace(visitor, member_is_primary_);
TraceIfNeeded<int32_t>::Trace(visitor, member_pointer_id_);
TraceIfNeeded<String>::Trace(visitor, member_pointer_type_);
TraceIfNeeded<HeapVector<Member<PointerEvent>>>::Trace(visitor, member_predicted_events_);
TraceIfNeeded<float>::Trace(visitor, member_pressure_);
TraceIfNeeded<float>::Trace(visitor, member_tangential_pressure_);
TraceIfNeeded<int32_t>::Trace(visitor, member_tilt_x_);
TraceIfNeeded<int32_t>::Trace(visitor, member_tilt_y_);
TraceIfNeeded<int32_t>::Trace(visitor, member_twist_);
TraceIfNeeded<double>::Trace(visitor, member_width_);
MouseEventInit::Trace(visitor);
}

bool PointerEventInit::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  if (!MouseEventInit::FillV8ObjectWithMembers(script_state, v8_dictionary)) {
  return false;
}

v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAltitudeAngle()) {
  if (!ToV8Traits<IDLDouble>::ToV8(script_state, member_altitude_angle_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAzimuthAngle()) {
  if (!ToV8Traits<IDLDouble>::ToV8(script_state, member_azimuth_angle_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCoalescedEvents()) {
  if (!ToV8Traits<IDLSequence<PointerEvent>>::ToV8(script_state, member_coalesced_events_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasHeight()) {
  if (!ToV8Traits<IDLDouble>::ToV8(script_state, member_height_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIsPrimary()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_is_primary_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPointerId()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_pointer_id_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPointerType()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_pointer_type_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPredictedEvents()) {
  if (!ToV8Traits<IDLSequence<PointerEvent>>::ToV8(script_state, member_predicted_events_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPressure()) {
  if (!ToV8Traits<IDLFloat>::ToV8(script_state, member_pressure_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTangentialPressure()) {
  if (!ToV8Traits<IDLFloat>::ToV8(script_state, member_tangential_pressure_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTiltX()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_tilt_x_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[10].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTiltY()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_tilt_y_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[11].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTwist()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_twist_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[12].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasWidth()) {
  if (!ToV8Traits<IDLDouble>::ToV8(script_state, member_width_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[13].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void PointerEventInit::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  MouseEventInit::FillMembersFromV8Object(isolate, v8_dictionary, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

const char* const class_like_name = "PointerEventInit";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("altitudeAngle");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_altitude_angle_, member_altitude_angle_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("azimuthAngle");
if (!bindings::GetDictionaryMemberFromV8Object<IDLDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_azimuth_angle_, member_azimuth_angle_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("coalescedEvents");
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<PointerEvent>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_coalesced_events_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("height");
if (!bindings::GetDictionaryMemberFromV8Object<IDLDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_height_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("isPrimary");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_is_primary_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("pointerId");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_pointer_id_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("pointerType");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_pointer_type_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("predictedEvents");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<PointerEvent>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), fallback_presence_var, member_predicted_events_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("pressure");
if (!bindings::GetDictionaryMemberFromV8Object<IDLFloat, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), fallback_presence_var, member_pressure_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("tangentialPressure");
if (!bindings::GetDictionaryMemberFromV8Object<IDLFloat, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), fallback_presence_var, member_tangential_pressure_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("tiltX");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[10].Get(isolate), has_tilt_x_, member_tilt_x_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("tiltY");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[11].Get(isolate), has_tilt_y_, member_tilt_y_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("twist");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[12].Get(isolate), fallback_presence_var, member_twist_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("width");
if (!bindings::GetDictionaryMemberFromV8Object<IDLDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[13].Get(isolate), fallback_presence_var, member_width_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> PointerEventInit::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"altitudeAngle",
"azimuthAngle",
"coalescedEvents",
"height",
"isPrimary",
"pointerId",
"pointerType",
"predictedEvents",
"pressure",
"tangentialPressure",
"tiltX",
"tiltY",
"twist",
"width",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
