// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_UNION_ARRAYBUFFERALLOWSHARED_ARRAYBUFFERVIEWALLOWSHARED_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_UNION_ARRAYBUFFERALLOWSHARED_ARRAYBUFFERVIEWALLOWSHARED_H_

#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/core/typed_arrays/array_buffer_view_helpers.h"
#include "third_party/blink/renderer/core/typed_arrays/dom_typed_array.h"
#include "third_party/blink/renderer/platform/bindings/union_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class ExceptionState;

class CORE_EXPORT V8UnionArrayBufferAllowSharedOrArrayBufferViewAllowShared final : public bindings::UnionBase {
  
  public:
// The type of the content value of this IDL union.
enum class ContentType {
kArrayBufferAllowShared, kArrayBufferViewAllowShared
};

static V8UnionArrayBufferAllowSharedOrArrayBufferViewAllowShared* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  V8UnionArrayBufferAllowSharedOrArrayBufferViewAllowShared(DOMArrayBufferBase* value) : content_type_(ContentType::kArrayBufferAllowShared), member_array_buffer_allow_shared_(value) {
  DCHECK(value);
}
explicit  V8UnionArrayBufferAllowSharedOrArrayBufferViewAllowShared(MaybeShared<DOMArrayBufferView> value) : content_type_(ContentType::kArrayBufferViewAllowShared), member_array_buffer_view_allow_shared_(value) {
  DCHECK(value);
}

// Returns the type of the content value.
ContentType GetContentType() const {
  return content_type_;
}

bool IsArrayBufferAllowShared() const {
  return content_type_ == ContentType::kArrayBufferAllowShared;
}
DOMArrayBufferBase* GetAsArrayBufferAllowShared() const {
  DCHECK_EQ(content_type_, ContentType::kArrayBufferAllowShared);
return member_array_buffer_allow_shared_;
}
void Set(DOMArrayBufferBase* value) {
  DCHECK(value);
Clear();
member_array_buffer_allow_shared_ = value;
content_type_ = ContentType::kArrayBufferAllowShared;
}

bool IsArrayBufferViewAllowShared() const {
  return content_type_ == ContentType::kArrayBufferViewAllowShared;
}
MaybeShared<DOMArrayBufferView> GetAsArrayBufferViewAllowShared() const {
  DCHECK_EQ(content_type_, ContentType::kArrayBufferViewAllowShared);
return member_array_buffer_view_allow_shared_;
}
void Set(MaybeShared<DOMArrayBufferView> value) {
  DCHECK(value);
Clear();
member_array_buffer_view_allow_shared_ = value;
content_type_ = ContentType::kArrayBufferViewAllowShared;
}


v8::MaybeLocal<v8::Value> ToV8Value(ScriptState* script_state) const override;

void Trace(Visitor* visitor) const override;


  
  private:
void Clear();

static constexpr const char* UnionNameInIDL() {
  return "([AllowShared] ArrayBuffer or [AllowShared] ArrayBufferView)";
}

ContentType content_type_;

Member<DOMArrayBufferBase> member_array_buffer_allow_shared_;
MaybeShared<DOMArrayBufferView> member_array_buffer_view_allow_shared_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_UNION_ARRAYBUFFERALLOWSHARED_ARRAYBUFFERVIEWALLOWSHARED_H_
