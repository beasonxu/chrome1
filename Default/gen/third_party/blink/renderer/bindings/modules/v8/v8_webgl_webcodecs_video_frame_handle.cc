// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_webcodecs_video_frame_handle.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_webcodecs_texture_info.h"
#include "third_party/blink/renderer/modules/webcodecs/video_color_space.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



WebGLWebCodecsVideoFrameHandle* WebGLWebCodecsVideoFrameHandle::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  WebGLWebCodecsVideoFrameHandle* dictionary = MakeGarbageCollected<WebGLWebCodecsVideoFrameHandle>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "WebGLWebCodecsVideoFrameHandle";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 WebGLWebCodecsVideoFrameHandle::WebGLWebCodecsVideoFrameHandle() {
  
}

 WebGLWebCodecsVideoFrameHandle::WebGLWebCodecsVideoFrameHandle(v8::Isolate* isolate) {
  
}



String WebGLWebCodecsVideoFrameHandle::getColorConversionShaderFuncOr(const String& fallback_value) const {
  if (!hasColorConversionShaderFunc()) {
  return fallback_value;
}
return member_color_conversion_shader_func_;
}

String WebGLWebCodecsVideoFrameHandle::getColorConversionShaderFuncOr(String&& fallback_value) const {
  if (!hasColorConversionShaderFunc()) {
  return std::move(fallback_value);
}
return member_color_conversion_shader_func_;
}

void WebGLWebCodecsVideoFrameHandle::setColorConversionShaderFunc(const String& value) {
  member_color_conversion_shader_func_ = value;
has_color_conversion_shader_func_ = true;
}

void WebGLWebCodecsVideoFrameHandle::setColorConversionShaderFunc(String&& value) {
  member_color_conversion_shader_func_ = std::move(value);
has_color_conversion_shader_func_ = true;
}
































String WebGLWebCodecsVideoFrameHandle::getRequiredExtensionOr(const String& fallback_value) const {
  if (!hasRequiredExtension()) {
  return fallback_value;
}
return member_required_extension_;
}

String WebGLWebCodecsVideoFrameHandle::getRequiredExtensionOr(String&& fallback_value) const {
  if (!hasRequiredExtension()) {
  return std::move(fallback_value);
}
return member_required_extension_;
}

void WebGLWebCodecsVideoFrameHandle::setRequiredExtension(const String& value) {
  member_required_extension_ = value;
has_required_extension_ = true;
}

void WebGLWebCodecsVideoFrameHandle::setRequiredExtension(String&& value) {
  member_required_extension_ = std::move(value);
has_required_extension_ = true;
}




void WebGLWebCodecsVideoFrameHandle::setTextureInfoArray(const HeapVector<Member<WebGLWebCodecsTextureInfo>>& value) {
  member_texture_info_array_ = value;
}

void WebGLWebCodecsVideoFrameHandle::setTextureInfoArray(HeapVector<Member<WebGLWebCodecsTextureInfo>>&& value) {
  member_texture_info_array_ = std::move(value);
}




void WebGLWebCodecsVideoFrameHandle::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_color_conversion_shader_func_);
TraceIfNeeded<Member<VideoColorSpace>>::Trace(visitor, member_color_space_);
TraceIfNeeded<bool>::Trace(visitor, member_flip_y_);
TraceIfNeeded<absl::optional<V8VideoPixelFormat>>::Trace(visitor, member_pixel_format_);
TraceIfNeeded<bool>::Trace(visitor, member_premultiplied_alpha_);
TraceIfNeeded<String>::Trace(visitor, member_required_extension_);
TraceIfNeeded<HeapVector<Member<WebGLWebCodecsTextureInfo>>>::Trace(visitor, member_texture_info_array_);
bindings::DictionaryBase::Trace(visitor);
}

bool WebGLWebCodecsVideoFrameHandle::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasColorConversionShaderFunc()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_color_conversion_shader_func_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasColorSpace()) {
  if (!ToV8Traits<VideoColorSpace>::ToV8(script_state, member_color_space_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasFlipY()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_flip_y_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPixelFormat()) {
  if (!ToV8Traits<IDLNullable<V8VideoPixelFormat>>::ToV8(script_state, member_pixel_format_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPremultipliedAlpha()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_premultiplied_alpha_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasRequiredExtension()) {
  if (!ToV8Traits<IDLNullable<IDLString>>::ToV8(script_state, member_required_extension_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTextureInfoArray()) {
  if (!ToV8Traits<IDLArray<WebGLWebCodecsTextureInfo>>::ToV8(script_state, member_texture_info_array_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void WebGLWebCodecsVideoFrameHandle::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "WebGLWebCodecsVideoFrameHandle";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("colorConversionShaderFunc");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_color_conversion_shader_func_, member_color_conversion_shader_func_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("colorSpace");
if (!bindings::GetDictionaryMemberFromV8Object<VideoColorSpace, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_color_space_, member_color_space_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("flipY");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_flip_y_, member_flip_y_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("pixelFormat");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<V8VideoPixelFormat>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_pixel_format_, member_pixel_format_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("premultipliedAlpha");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_premultiplied_alpha_, member_premultiplied_alpha_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("requiredExtension");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_required_extension_, member_required_extension_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("textureInfoArray");
constexpr bool is_required = true;
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<IDLArray<WebGLWebCodecsTextureInfo>, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_texture_info_array_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> WebGLWebCodecsVideoFrameHandle::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"colorConversionShaderFunc",
"colorSpace",
"flipY",
"pixelFormat",
"premultipliedAlpha",
"requiredExtension",
"textureInfoArray",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
