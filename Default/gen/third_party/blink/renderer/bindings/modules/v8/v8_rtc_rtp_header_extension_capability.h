// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_RTP_HEADER_EXTENSION_CAPABILITY_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_RTP_HEADER_EXTENSION_CAPABILITY_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_rtp_transceiver_direction.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT RTCRtpHeaderExtensionCapability : public bindings::DictionaryBase {
  
  public:
static RTCRtpHeaderExtensionCapability* Create() {
  return MakeGarbageCollected<RTCRtpHeaderExtensionCapability>();
}
static RTCRtpHeaderExtensionCapability* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<RTCRtpHeaderExtensionCapability>(isolate);
}
static RTCRtpHeaderExtensionCapability* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  RTCRtpHeaderExtensionCapability();
explicit  RTCRtpHeaderExtensionCapability(v8::Isolate* isolate);

bool hasDirection() const {
  return true;
}
V8RTCRtpTransceiverDirection direction() const {
  return member_direction_;
}
void setDirection(V8RTCRtpTransceiverDirection value) {
  member_direction_ = value;
}
void setDirection(V8RTCRtpTransceiverDirection::Enum value) {
  member_direction_ = V8RTCRtpTransceiverDirection(value);
}

bool hasUri() const {
  return has_uri_;
}
const String& uri() const {
  DCHECK(hasUri());
return member_uri_;
}
String getUriOr(const String& fallback_value) const;
String getUriOr(String&& fallback_value) const;
void setUri(const String& value);
void setUri(String&& value);


// Obsolete accessor functions
void setDirection(const String& value) {
  member_direction_ = V8RTCRtpTransceiverDirection::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_uri_ = false;

V8RTCRtpTransceiverDirection member_direction_{V8RTCRtpTransceiverDirection::Enum::kSendrecv};
String member_uri_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_RTP_HEADER_EXTENSION_CAPABILITY_H_
