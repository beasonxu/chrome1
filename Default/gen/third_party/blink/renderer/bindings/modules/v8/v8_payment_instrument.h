// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PAYMENT_INSTRUMENT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PAYMENT_INSTRUMENT_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/script_value.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;
class ImageObject;

class MODULES_EXPORT PaymentInstrument : public bindings::DictionaryBase {
  
  public:
static PaymentInstrument* Create() {
  return MakeGarbageCollected<PaymentInstrument>();
}
static PaymentInstrument* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<PaymentInstrument>(isolate);
}
static PaymentInstrument* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  PaymentInstrument();
explicit  PaymentInstrument(v8::Isolate* isolate);

bool hasCapabilities() const {
  return !member_capabilities_.IsEmpty();
}
const ScriptValue& capabilities() const {
  DCHECK(hasCapabilities());
return member_capabilities_;
}
ScriptValue getCapabilitiesOr(const ScriptValue& fallback_value) const {
  if (!hasCapabilities()) {
  return fallback_value;
}
return member_capabilities_;
}
void setCapabilities(const ScriptValue& value) {
  member_capabilities_ = value;
DCHECK(member_capabilities_.IsObject());
}

bool hasIcons() const {
  return has_icons_;
}
const HeapVector<Member<ImageObject>>& icons() const {
  DCHECK(hasIcons());
return member_icons_;
}
HeapVector<Member<ImageObject>> getIconsOr(const HeapVector<Member<ImageObject>>& fallback_value) const;
HeapVector<Member<ImageObject>> getIconsOr(HeapVector<Member<ImageObject>>&& fallback_value) const;
void setIcons(const HeapVector<Member<ImageObject>>& value);
void setIcons(HeapVector<Member<ImageObject>>&& value);

bool hasMethod() const {
  return has_method_;
}
const String& method() const {
  DCHECK(hasMethod());
return member_method_;
}
String getMethodOr(const String& fallback_value) const;
String getMethodOr(String&& fallback_value) const;
void setMethod(const String& value);
void setMethod(String&& value);

bool hasName() const {
  return true;
}
const String& name() const {
  return member_name_;
}
void setName(const String& value);
void setName(String&& value);




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_icons_ = false;
bool has_method_ = false;

ScriptValue member_capabilities_;
HeapVector<Member<ImageObject>> member_icons_;
String member_method_;
String member_name_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PAYMENT_INSTRUMENT_H_
