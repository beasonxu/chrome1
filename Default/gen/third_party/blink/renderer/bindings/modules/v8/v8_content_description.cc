// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_content_description.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_content_icon_definition.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



ContentDescription* ContentDescription::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  ContentDescription* dictionary = MakeGarbageCollected<ContentDescription>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "ContentDescription";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 ContentDescription::ContentDescription() {
  
}

 ContentDescription::ContentDescription(v8::Isolate* isolate) {
  
}








void ContentDescription::setDescription(const String& value) {
  member_description_ = value;
}

void ContentDescription::setDescription(String&& value) {
  member_description_ = std::move(value);
}




void ContentDescription::setIcons(const HeapVector<Member<ContentIconDefinition>>& value) {
  member_icons_ = value;
}

void ContentDescription::setIcons(HeapVector<Member<ContentIconDefinition>>&& value) {
  member_icons_ = std::move(value);
}




void ContentDescription::setId(const String& value) {
  member_id_ = value;
}

void ContentDescription::setId(String&& value) {
  member_id_ = std::move(value);
}




void ContentDescription::setTitle(const String& value) {
  member_title_ = value;
}

void ContentDescription::setTitle(String&& value) {
  member_title_ = std::move(value);
}




void ContentDescription::setUrl(const String& value) {
  member_url_ = value;
}

void ContentDescription::setUrl(String&& value) {
  member_url_ = std::move(value);
}




void ContentDescription::Trace(Visitor* visitor) const {
  TraceIfNeeded<V8ContentCategory>::Trace(visitor, member_category_);
TraceIfNeeded<String>::Trace(visitor, member_description_);
TraceIfNeeded<HeapVector<Member<ContentIconDefinition>>>::Trace(visitor, member_icons_);
TraceIfNeeded<String>::Trace(visitor, member_id_);
TraceIfNeeded<String>::Trace(visitor, member_title_);
TraceIfNeeded<String>::Trace(visitor, member_url_);
bindings::DictionaryBase::Trace(visitor);
}

bool ContentDescription::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasCategory()) {
  if (!ToV8Traits<V8ContentCategory>::ToV8(script_state, member_category_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDescription()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_description_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIcons()) {
  if (!ToV8Traits<IDLSequence<ContentIconDefinition>>::ToV8(script_state, member_icons_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasId()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_id_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTitle()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_title_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUrl()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_url_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void ContentDescription::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "ContentDescription";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("category");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<V8ContentCategory, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_category_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("description");
constexpr bool is_required = true;
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_description_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("icons");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<ContentIconDefinition>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_icons_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("id");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_id_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("title");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_title_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("url");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_url_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> ContentDescription::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"category",
"description",
"icons",
"id",
"title",
"url",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
