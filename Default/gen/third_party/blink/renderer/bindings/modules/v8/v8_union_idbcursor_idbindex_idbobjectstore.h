// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_IDBCURSOR_IDBINDEX_IDBOBJECTSTORE_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_IDBCURSOR_IDBINDEX_IDBOBJECTSTORE_H_

#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/union_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class ExceptionState;
class IDBCursor;
class IDBIndex;
class IDBObjectStore;
class V8UnionIDBIndexOrIDBObjectStore;

class MODULES_EXPORT V8UnionIDBCursorOrIDBIndexOrIDBObjectStore final : public bindings::UnionBase {
  
  public:
// The type of the content value of this IDL union.
enum class ContentType {
kIDBCursor, kIDBIndex, kIDBObjectStore
};

static V8UnionIDBCursorOrIDBIndexOrIDBObjectStore* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  V8UnionIDBCursorOrIDBIndexOrIDBObjectStore(IDBCursor* value) : content_type_(ContentType::kIDBCursor), member_idb_cursor_(value) {
  DCHECK(value);
}
explicit  V8UnionIDBCursorOrIDBIndexOrIDBObjectStore(IDBIndex* value) : content_type_(ContentType::kIDBIndex), member_idb_index_(value) {
  DCHECK(value);
}
explicit  V8UnionIDBCursorOrIDBIndexOrIDBObjectStore(IDBObjectStore* value) : content_type_(ContentType::kIDBObjectStore), member_idb_object_store_(value) {
  DCHECK(value);
}

// Returns the type of the content value.
ContentType GetContentType() const {
  return content_type_;
}

bool IsIDBCursor() const {
  return content_type_ == ContentType::kIDBCursor;
}
IDBCursor* GetAsIDBCursor() const {
  DCHECK_EQ(content_type_, ContentType::kIDBCursor);
return member_idb_cursor_;
}
void Set(IDBCursor* value) {
  DCHECK(value);
Clear();
member_idb_cursor_ = value;
content_type_ = ContentType::kIDBCursor;
}

bool IsIDBIndex() const {
  return content_type_ == ContentType::kIDBIndex;
}
IDBIndex* GetAsIDBIndex() const {
  DCHECK_EQ(content_type_, ContentType::kIDBIndex);
return member_idb_index_;
}
void Set(IDBIndex* value) {
  DCHECK(value);
Clear();
member_idb_index_ = value;
content_type_ = ContentType::kIDBIndex;
}

bool IsIDBObjectStore() const {
  return content_type_ == ContentType::kIDBObjectStore;
}
IDBObjectStore* GetAsIDBObjectStore() const {
  DCHECK_EQ(content_type_, ContentType::kIDBObjectStore);
return member_idb_object_store_;
}
void Set(IDBObjectStore* value) {
  DCHECK(value);
Clear();
member_idb_object_store_ = value;
content_type_ = ContentType::kIDBObjectStore;
}

bool IsV8UnionIDBIndexOrIDBObjectStore() const {
  return content_type_ == ContentType::kIDBIndex || content_type_ == ContentType::kIDBObjectStore;
}
V8UnionIDBIndexOrIDBObjectStore* GetAsV8UnionIDBIndexOrIDBObjectStore() const;
void Set(const V8UnionIDBIndexOrIDBObjectStore* value);


v8::MaybeLocal<v8::Value> ToV8Value(ScriptState* script_state) const override;

void Trace(Visitor* visitor) const override;


  
  private:
void Clear();

static constexpr const char* UnionNameInIDL() {
  return "(IDBCursor or IDBIndex or IDBObjectStore)";
}

ContentType content_type_;

Member<IDBCursor> member_idb_cursor_;
Member<IDBIndex> member_idb_index_;
Member<IDBObjectStore> member_idb_object_store_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_IDBCURSOR_IDBINDEX_IDBOBJECTSTORE_H_
