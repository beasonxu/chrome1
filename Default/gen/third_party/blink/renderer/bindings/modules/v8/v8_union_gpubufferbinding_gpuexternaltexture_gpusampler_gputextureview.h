// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_GPUBUFFERBINDING_GPUEXTERNALTEXTURE_GPUSAMPLER_GPUTEXTUREVIEW_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_GPUBUFFERBINDING_GPUEXTERNALTEXTURE_GPUSAMPLER_GPUTEXTUREVIEW_H_

#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/union_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class ExceptionState;
class GPUBufferBinding;
class GPUExternalTexture;
class GPUSampler;
class GPUTextureView;

class MODULES_EXPORT V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView final : public bindings::UnionBase {
  
  public:
// The type of the content value of this IDL union.
enum class ContentType {
kGPUBufferBinding, kGPUExternalTexture, kGPUSampler, kGPUTextureView
};

static V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView(GPUBufferBinding* value) : content_type_(ContentType::kGPUBufferBinding), member_gpu_buffer_binding_(value) {
  DCHECK(value);
}
explicit  V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView(GPUExternalTexture* value) : content_type_(ContentType::kGPUExternalTexture), member_gpu_external_texture_(value) {
  DCHECK(value);
}
explicit  V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView(GPUSampler* value) : content_type_(ContentType::kGPUSampler), member_gpu_sampler_(value) {
  DCHECK(value);
}
explicit  V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView(GPUTextureView* value) : content_type_(ContentType::kGPUTextureView), member_gpu_texture_view_(value) {
  DCHECK(value);
}

// Returns the type of the content value.
ContentType GetContentType() const {
  return content_type_;
}

bool IsGPUBufferBinding() const {
  return content_type_ == ContentType::kGPUBufferBinding;
}
GPUBufferBinding* GetAsGPUBufferBinding() const {
  DCHECK_EQ(content_type_, ContentType::kGPUBufferBinding);
return member_gpu_buffer_binding_;
}
void Set(GPUBufferBinding* value) {
  DCHECK(value);
Clear();
member_gpu_buffer_binding_ = value;
content_type_ = ContentType::kGPUBufferBinding;
}

bool IsGPUExternalTexture() const {
  return content_type_ == ContentType::kGPUExternalTexture;
}
GPUExternalTexture* GetAsGPUExternalTexture() const {
  DCHECK_EQ(content_type_, ContentType::kGPUExternalTexture);
return member_gpu_external_texture_;
}
void Set(GPUExternalTexture* value) {
  DCHECK(value);
Clear();
member_gpu_external_texture_ = value;
content_type_ = ContentType::kGPUExternalTexture;
}

bool IsGPUSampler() const {
  return content_type_ == ContentType::kGPUSampler;
}
GPUSampler* GetAsGPUSampler() const {
  DCHECK_EQ(content_type_, ContentType::kGPUSampler);
return member_gpu_sampler_;
}
void Set(GPUSampler* value) {
  DCHECK(value);
Clear();
member_gpu_sampler_ = value;
content_type_ = ContentType::kGPUSampler;
}

bool IsGPUTextureView() const {
  return content_type_ == ContentType::kGPUTextureView;
}
GPUTextureView* GetAsGPUTextureView() const {
  DCHECK_EQ(content_type_, ContentType::kGPUTextureView);
return member_gpu_texture_view_;
}
void Set(GPUTextureView* value) {
  DCHECK(value);
Clear();
member_gpu_texture_view_ = value;
content_type_ = ContentType::kGPUTextureView;
}


v8::MaybeLocal<v8::Value> ToV8Value(ScriptState* script_state) const override;

void Trace(Visitor* visitor) const override;


  
  private:
void Clear();

static constexpr const char* UnionNameInIDL() {
  return "(GPUBufferBinding or GPUExternalTexture or GPUSampler or GPUTextureView)";
}

ContentType content_type_;

Member<GPUBufferBinding> member_gpu_buffer_binding_;
Member<GPUExternalTexture> member_gpu_external_texture_;
Member<GPUSampler> member_gpu_sampler_;
Member<GPUTextureView> member_gpu_texture_view_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_GPUBUFFERBINDING_GPUEXTERNALTEXTURE_GPUSAMPLER_GPUTEXTUREVIEW_H_
