// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PRESENTATION_SOURCE_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PRESENTATION_SOURCE_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_playback_destination.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_capture_latency.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT PresentationSource : public bindings::DictionaryBase {
  
  public:
static PresentationSource* Create() {
  return MakeGarbageCollected<PresentationSource>();
}
static PresentationSource* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<PresentationSource>(isolate);
}
static PresentationSource* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  PresentationSource();
explicit  PresentationSource(v8::Isolate* isolate);

bool hasAudioPlayback() const {
  return has_audio_playback_;
}
V8AudioPlaybackDestination audioPlayback() const {
  DCHECK(hasAudioPlayback());
return member_audio_playback_;
}
V8AudioPlaybackDestination getAudioPlaybackOr(V8AudioPlaybackDestination fallback_value) const {
  if (!hasAudioPlayback()) {
  return fallback_value;
}
return member_audio_playback_;
}
void setAudioPlayback(V8AudioPlaybackDestination value) {
  member_audio_playback_ = value;
has_audio_playback_ = true;
}
void setAudioPlayback(V8AudioPlaybackDestination::Enum value) {
  member_audio_playback_ = V8AudioPlaybackDestination(value);
has_audio_playback_ = true;
}

bool hasLatencyHint() const {
  return has_latency_hint_;
}
V8CaptureLatency latencyHint() const {
  DCHECK(hasLatencyHint());
return member_latency_hint_;
}
V8CaptureLatency getLatencyHintOr(V8CaptureLatency fallback_value) const {
  if (!hasLatencyHint()) {
  return fallback_value;
}
return member_latency_hint_;
}
void setLatencyHint(V8CaptureLatency value) {
  member_latency_hint_ = value;
has_latency_hint_ = true;
}
void setLatencyHint(V8CaptureLatency::Enum value) {
  member_latency_hint_ = V8CaptureLatency(value);
has_latency_hint_ = true;
}

bool hasUrl() const {
  return true;
}
const String& url() const {
  return member_url_;
}
void setUrl(const String& value);
void setUrl(String&& value);


// Obsolete accessor functions
void setAudioPlayback(const String& value) {
  member_audio_playback_ = V8AudioPlaybackDestination::Create(value).value();
has_audio_playback_ = true;
}
void setLatencyHint(const String& value) {
  member_latency_hint_ = V8CaptureLatency::Create(value).value();
has_latency_hint_ = true;
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_audio_playback_ = false;
bool has_latency_hint_ = false;

V8AudioPlaybackDestination member_audio_playback_{static_cast<V8AudioPlaybackDestination::Enum>(0)};
V8CaptureLatency member_latency_hint_{static_cast<V8CaptureLatency::Enum>(0)};
String member_url_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PRESENTATION_SOURCE_H_
