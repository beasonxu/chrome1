// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUTHENTICATION_EXTENSIONS_CLIENT_OUTPUTS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUTHENTICATION_EXTENSIONS_CLIENT_OUTPUTS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/core/typed_arrays/array_buffer_view_helpers.h"
#include "third_party/blink/renderer/core/typed_arrays/dom_typed_array.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class AuthenticationExtensionsLargeBlobOutputs;
class CredentialPropertiesOutput;
class ExceptionState;

class MODULES_EXPORT AuthenticationExtensionsClientOutputs : public bindings::DictionaryBase {
  
  public:
static AuthenticationExtensionsClientOutputs* Create() {
  return MakeGarbageCollected<AuthenticationExtensionsClientOutputs>();
}
static AuthenticationExtensionsClientOutputs* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<AuthenticationExtensionsClientOutputs>(isolate);
}
static AuthenticationExtensionsClientOutputs* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  AuthenticationExtensionsClientOutputs();
explicit  AuthenticationExtensionsClientOutputs(v8::Isolate* isolate);

bool hasAppid() const {
  return has_appid_;
}
bool appid() const {
  DCHECK(hasAppid());
return member_appid_;
}
bool getAppidOr(bool fallback_value) const {
  if (!hasAppid()) {
  return fallback_value;
}
return member_appid_;
}
void setAppid(bool value) {
  member_appid_ = value;
has_appid_ = true;
}

bool hasCredBlob() const {
  return has_cred_blob_;
}
bool credBlob() const {
  DCHECK(hasCredBlob());
return member_cred_blob_;
}
bool getCredBlobOr(bool fallback_value) const {
  if (!hasCredBlob()) {
  return fallback_value;
}
return member_cred_blob_;
}
void setCredBlob(bool value) {
  member_cred_blob_ = value;
has_cred_blob_ = true;
}

bool hasCredProps() const {
  return has_cred_props_;
}
CredentialPropertiesOutput* credProps() const {
  DCHECK(hasCredProps());
return member_cred_props_;
}
CredentialPropertiesOutput* getCredPropsOr(CredentialPropertiesOutput* fallback_value) const {
  if (!hasCredProps()) {
  return fallback_value;
}
return member_cred_props_;
}
void setCredProps(CredentialPropertiesOutput* value) {
  member_cred_props_ = value;
has_cred_props_ = true;
DCHECK(member_cred_props_);
}

bool hasGetCredBlob() const {
  return has_get_cred_blob_;
}
DOMArrayBuffer* getCredBlob() const {
  DCHECK(hasGetCredBlob());
return member_get_cred_blob_;
}
DOMArrayBuffer* getGetCredBlobOr(DOMArrayBuffer* fallback_value) const {
  if (!hasGetCredBlob()) {
  return fallback_value;
}
return member_get_cred_blob_;
}
void setGetCredBlob(DOMArrayBuffer* value) {
  member_get_cred_blob_ = value;
has_get_cred_blob_ = true;
DCHECK(member_get_cred_blob_);
}

bool hasHmacCreateSecret() const {
  return has_hmac_create_secret_;
}
bool hmacCreateSecret() const {
  DCHECK(hasHmacCreateSecret());
return member_hmac_create_secret_;
}
bool getHmacCreateSecretOr(bool fallback_value) const {
  if (!hasHmacCreateSecret()) {
  return fallback_value;
}
return member_hmac_create_secret_;
}
void setHmacCreateSecret(bool value) {
  member_hmac_create_secret_ = value;
has_hmac_create_secret_ = true;
}

bool hasLargeBlob() const {
  return has_large_blob_;
}
AuthenticationExtensionsLargeBlobOutputs* largeBlob() const {
  DCHECK(hasLargeBlob());
return member_large_blob_;
}
AuthenticationExtensionsLargeBlobOutputs* getLargeBlobOr(AuthenticationExtensionsLargeBlobOutputs* fallback_value) const {
  if (!hasLargeBlob()) {
  return fallback_value;
}
return member_large_blob_;
}
void setLargeBlob(AuthenticationExtensionsLargeBlobOutputs* value) {
  member_large_blob_ = value;
has_large_blob_ = true;
DCHECK(member_large_blob_);
}

bool hasUvm() const {
  return has_uvm_;
}
const Vector<Vector<uint32_t>>& uvm() const {
  DCHECK(hasUvm());
return member_uvm_;
}
Vector<Vector<uint32_t>> getUvmOr(const Vector<Vector<uint32_t>>& fallback_value) const;
Vector<Vector<uint32_t>> getUvmOr(Vector<Vector<uint32_t>>&& fallback_value) const;
void setUvm(const Vector<Vector<uint32_t>>& value);
void setUvm(Vector<Vector<uint32_t>>&& value);




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_appid_ = false;
bool has_cred_blob_ = false;
bool has_cred_props_ = false;
bool has_get_cred_blob_ = false;
bool has_hmac_create_secret_ = false;
bool has_large_blob_ = false;
bool has_uvm_ = false;

bool member_appid_;
bool member_cred_blob_;
Member<CredentialPropertiesOutput> member_cred_props_;
Member<DOMArrayBuffer> member_get_cred_blob_;
bool member_hmac_create_secret_;
Member<AuthenticationExtensionsLargeBlobOutputs> member_large_blob_;
Vector<Vector<uint32_t>> member_uvm_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUTHENTICATION_EXTENSIONS_CLIENT_OUTPUTS_H_
