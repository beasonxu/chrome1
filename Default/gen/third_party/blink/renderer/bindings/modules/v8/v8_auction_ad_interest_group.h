// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUCTION_AD_INTEREST_GROUP_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUCTION_AD_INTEREST_GROUP_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/script_value.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_worklet_execution_mode.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class AuctionAd;
class ExceptionState;

class MODULES_EXPORT AuctionAdInterestGroup : public bindings::DictionaryBase {
  
  public:
static AuctionAdInterestGroup* Create() {
  return MakeGarbageCollected<AuctionAdInterestGroup>();
}
static AuctionAdInterestGroup* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<AuctionAdInterestGroup>(isolate);
}
static AuctionAdInterestGroup* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  AuctionAdInterestGroup();
explicit  AuctionAdInterestGroup(v8::Isolate* isolate);

bool hasAdComponents() const {
  return has_ad_components_;
}
const HeapVector<Member<AuctionAd>>& adComponents() const {
  DCHECK(hasAdComponents());
return member_ad_components_;
}
HeapVector<Member<AuctionAd>> getAdComponentsOr(const HeapVector<Member<AuctionAd>>& fallback_value) const;
HeapVector<Member<AuctionAd>> getAdComponentsOr(HeapVector<Member<AuctionAd>>&& fallback_value) const;
void setAdComponents(const HeapVector<Member<AuctionAd>>& value);
void setAdComponents(HeapVector<Member<AuctionAd>>&& value);

bool hasAds() const {
  return has_ads_;
}
const HeapVector<Member<AuctionAd>>& ads() const {
  DCHECK(hasAds());
return member_ads_;
}
HeapVector<Member<AuctionAd>> getAdsOr(const HeapVector<Member<AuctionAd>>& fallback_value) const;
HeapVector<Member<AuctionAd>> getAdsOr(HeapVector<Member<AuctionAd>>&& fallback_value) const;
void setAds(const HeapVector<Member<AuctionAd>>& value);
void setAds(HeapVector<Member<AuctionAd>>&& value);

bool hasBiddingLogicUrl() const {
  return has_bidding_logic_url_;
}
const String& biddingLogicUrl() const {
  DCHECK(hasBiddingLogicUrl());
return member_bidding_logic_url_;
}
String getBiddingLogicUrlOr(const String& fallback_value) const;
String getBiddingLogicUrlOr(String&& fallback_value) const;
void setBiddingLogicUrl(const String& value);
void setBiddingLogicUrl(String&& value);

bool hasBiddingWasmHelperUrl() const {
  return has_bidding_wasm_helper_url_;
}
const String& biddingWasmHelperUrl() const {
  DCHECK(hasBiddingWasmHelperUrl());
return member_bidding_wasm_helper_url_;
}
String getBiddingWasmHelperUrlOr(const String& fallback_value) const;
String getBiddingWasmHelperUrlOr(String&& fallback_value) const;
void setBiddingWasmHelperUrl(const String& value);
void setBiddingWasmHelperUrl(String&& value);

bool hasDailyUpdateUrl() const {
  return has_daily_update_url_;
}
const String& dailyUpdateUrl() const {
  DCHECK(hasDailyUpdateUrl());
return member_daily_update_url_;
}
String getDailyUpdateUrlOr(const String& fallback_value) const;
String getDailyUpdateUrlOr(String&& fallback_value) const;
void setDailyUpdateUrl(const String& value);
void setDailyUpdateUrl(String&& value);

bool hasExecutionMode() const {
  return has_execution_mode_;
}
V8WorkletExecutionMode executionMode() const {
  DCHECK(hasExecutionMode());
return member_execution_mode_;
}
V8WorkletExecutionMode getExecutionModeOr(V8WorkletExecutionMode fallback_value) const {
  if (!hasExecutionMode()) {
  return fallback_value;
}
return member_execution_mode_;
}
void setExecutionMode(V8WorkletExecutionMode value) {
  member_execution_mode_ = value;
has_execution_mode_ = true;
}
void setExecutionMode(V8WorkletExecutionMode::Enum value) {
  member_execution_mode_ = V8WorkletExecutionMode(value);
has_execution_mode_ = true;
}

bool hasName() const {
  return true;
}
const String& name() const {
  return member_name_;
}
void setName(const String& value);
void setName(String&& value);

bool hasOwner() const {
  return true;
}
const String& owner() const {
  return member_owner_;
}
void setOwner(const String& value);
void setOwner(String&& value);

bool hasPriority() const {
  return has_priority_;
}
double priority() const {
  DCHECK(hasPriority());
return member_priority_;
}
double getPriorityOr(double fallback_value) const {
  if (!hasPriority()) {
  return fallback_value;
}
return member_priority_;
}
void setPriority(double value) {
  member_priority_ = value;
has_priority_ = true;
}

bool hasTrustedBiddingSignalsKeys() const {
  return has_trusted_bidding_signals_keys_;
}
const Vector<String>& trustedBiddingSignalsKeys() const {
  DCHECK(hasTrustedBiddingSignalsKeys());
return member_trusted_bidding_signals_keys_;
}
Vector<String> getTrustedBiddingSignalsKeysOr(const Vector<String>& fallback_value) const;
Vector<String> getTrustedBiddingSignalsKeysOr(Vector<String>&& fallback_value) const;
void setTrustedBiddingSignalsKeys(const Vector<String>& value);
void setTrustedBiddingSignalsKeys(Vector<String>&& value);

bool hasTrustedBiddingSignalsUrl() const {
  return has_trusted_bidding_signals_url_;
}
const String& trustedBiddingSignalsUrl() const {
  DCHECK(hasTrustedBiddingSignalsUrl());
return member_trusted_bidding_signals_url_;
}
String getTrustedBiddingSignalsUrlOr(const String& fallback_value) const;
String getTrustedBiddingSignalsUrlOr(String&& fallback_value) const;
void setTrustedBiddingSignalsUrl(const String& value);
void setTrustedBiddingSignalsUrl(String&& value);

bool hasUserBiddingSignals() const {
  return !member_user_bidding_signals_.IsEmpty();
}
const ScriptValue& userBiddingSignals() const {
  DCHECK(hasUserBiddingSignals());
return member_user_bidding_signals_;
}
ScriptValue getUserBiddingSignalsOr(const ScriptValue& fallback_value) const {
  if (!hasUserBiddingSignals()) {
  return fallback_value;
}
return member_user_bidding_signals_;
}
void setUserBiddingSignals(const ScriptValue& value) {
  member_user_bidding_signals_ = value;
}


// Obsolete accessor functions
void setExecutionMode(const String& value) {
  member_execution_mode_ = V8WorkletExecutionMode::Create(value).value();
has_execution_mode_ = true;
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_ad_components_ = false;
bool has_ads_ = false;
bool has_bidding_logic_url_ = false;
bool has_bidding_wasm_helper_url_ = false;
bool has_daily_update_url_ = false;
bool has_execution_mode_ = false;
bool has_priority_ = false;
bool has_trusted_bidding_signals_keys_ = false;
bool has_trusted_bidding_signals_url_ = false;

HeapVector<Member<AuctionAd>> member_ad_components_;
HeapVector<Member<AuctionAd>> member_ads_;
String member_bidding_logic_url_;
String member_bidding_wasm_helper_url_;
String member_daily_update_url_;
V8WorkletExecutionMode member_execution_mode_{static_cast<V8WorkletExecutionMode::Enum>(0)};
String member_name_;
String member_owner_;
double member_priority_;
Vector<String> member_trusted_bidding_signals_keys_;
String member_trusted_bidding_signals_url_;
ScriptValue member_user_bidding_signals_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUCTION_AD_INTEREST_GROUP_H_
