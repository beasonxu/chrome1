// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_related_application.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



RelatedApplication* RelatedApplication::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  RelatedApplication* dictionary = MakeGarbageCollected<RelatedApplication>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "RelatedApplication";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 RelatedApplication::RelatedApplication() {
  
}

 RelatedApplication::RelatedApplication(v8::Isolate* isolate) {
  
}



String RelatedApplication::getIdOr(const String& fallback_value) const {
  if (!hasId()) {
  return fallback_value;
}
return member_id_;
}

String RelatedApplication::getIdOr(String&& fallback_value) const {
  if (!hasId()) {
  return std::move(fallback_value);
}
return member_id_;
}

void RelatedApplication::setId(const String& value) {
  member_id_ = value;
has_id_ = true;
}

void RelatedApplication::setId(String&& value) {
  member_id_ = std::move(value);
has_id_ = true;
}




void RelatedApplication::setPlatform(const String& value) {
  member_platform_ = value;
}

void RelatedApplication::setPlatform(String&& value) {
  member_platform_ = std::move(value);
}




String RelatedApplication::getUrlOr(const String& fallback_value) const {
  if (!hasUrl()) {
  return fallback_value;
}
return member_url_;
}

String RelatedApplication::getUrlOr(String&& fallback_value) const {
  if (!hasUrl()) {
  return std::move(fallback_value);
}
return member_url_;
}

void RelatedApplication::setUrl(const String& value) {
  member_url_ = value;
has_url_ = true;
}

void RelatedApplication::setUrl(String&& value) {
  member_url_ = std::move(value);
has_url_ = true;
}




String RelatedApplication::getVersionOr(const String& fallback_value) const {
  if (!hasVersion()) {
  return fallback_value;
}
return member_version_;
}

String RelatedApplication::getVersionOr(String&& fallback_value) const {
  if (!hasVersion()) {
  return std::move(fallback_value);
}
return member_version_;
}

void RelatedApplication::setVersion(const String& value) {
  member_version_ = value;
has_version_ = true;
}

void RelatedApplication::setVersion(String&& value) {
  member_version_ = std::move(value);
has_version_ = true;
}




void RelatedApplication::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_id_);
TraceIfNeeded<String>::Trace(visitor, member_platform_);
TraceIfNeeded<String>::Trace(visitor, member_url_);
TraceIfNeeded<String>::Trace(visitor, member_version_);
bindings::DictionaryBase::Trace(visitor);
}

bool RelatedApplication::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasId()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_id_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPlatform()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_platform_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUrl()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_url_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasVersion()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_version_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void RelatedApplication::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "RelatedApplication";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("id");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_id_, member_id_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("platform");
constexpr bool is_required = true;
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_platform_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("url");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_url_, member_url_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("version");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_version_, member_version_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> RelatedApplication::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"id",
"platform",
"url",
"version",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
