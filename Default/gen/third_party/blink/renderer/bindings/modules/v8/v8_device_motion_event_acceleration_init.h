// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_DEVICE_MOTION_EVENT_ACCELERATION_INIT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_DEVICE_MOTION_EVENT_ACCELERATION_INIT_H_

#include "base/containers/span.h"
#include "third_party/abseil-cpp/absl/types/optional.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT DeviceMotionEventAccelerationInit : public bindings::DictionaryBase {
  
  public:
static DeviceMotionEventAccelerationInit* Create() {
  return MakeGarbageCollected<DeviceMotionEventAccelerationInit>();
}
static DeviceMotionEventAccelerationInit* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<DeviceMotionEventAccelerationInit>(isolate);
}
static DeviceMotionEventAccelerationInit* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  DeviceMotionEventAccelerationInit();
explicit  DeviceMotionEventAccelerationInit(v8::Isolate* isolate);

bool hasX() const {
  return true;
}
const absl::optional<double>& x() const {
  return member_x_;
}
void setX(const absl::optional<double>& value) {
  member_x_ = value;
}
void setX(double value) {
  member_x_ = value;
}

bool hasY() const {
  return true;
}
const absl::optional<double>& y() const {
  return member_y_;
}
void setY(const absl::optional<double>& value) {
  member_y_ = value;
}
void setY(double value) {
  member_y_ = value;
}

bool hasZ() const {
  return true;
}
const absl::optional<double>& z() const {
  return member_z_;
}
void setZ(const absl::optional<double>& value) {
  member_z_ = value;
}
void setZ(double value) {
  member_z_ = value;
}


// Obsolete accessor functions
bool hasXNonNull() const {
  return hasX() && x().has_value();
}
double xNonNull() const {
  DCHECK(hasXNonNull());
return x().value();
}
bool hasYNonNull() const {
  return hasY() && y().has_value();
}
double yNonNull() const {
  DCHECK(hasYNonNull());
return y().value();
}
bool hasZNonNull() const {
  return hasZ() && z().has_value();
}
double zNonNull() const {
  DCHECK(hasZNonNull());
return z().value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



absl::optional<double> member_x_;
absl::optional<double> member_y_;
absl::optional<double> member_z_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_DEVICE_MOTION_EVENT_ACCELERATION_INIT_H_
