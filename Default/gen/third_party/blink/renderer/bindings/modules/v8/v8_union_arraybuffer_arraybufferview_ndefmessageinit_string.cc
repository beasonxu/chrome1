// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_union_arraybuffer_arraybufferview_ndefmessageinit_string.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_arraybuffer_arraybufferview.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_arraybuffer_arraybufferview_string.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_arraybuffer_string.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ndef_message_init.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"

namespace blink {



V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString* V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  if (v8_value->IsNullOrUndefined()) {
  auto&& blink_value = NativeValueTraits<NDEFMessageInit>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString>(blink_value);
}
if (v8_value->IsArrayBuffer() || v8_value->IsSharedArrayBuffer()) {
  auto&& blink_value = NativeValueTraits<DOMArrayBuffer>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString>(blink_value);
}
if (v8_value->IsArrayBufferView()) {
  auto&& blink_value = NativeValueTraits<NotShared<DOMArrayBufferView>>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString>(blink_value);
}
if (v8_value->IsObject()) {
  auto&& blink_value = NativeValueTraits<NDEFMessageInit>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString>(blink_value);
}
{
  auto&& blink_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString>(std::move(blink_value));
}
}

 V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString(const String& value) : content_type_(ContentType::kString), member_string_(value) {
  
}

 V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString(String&& value) : content_type_(ContentType::kString), member_string_(std::move(value)) {
  
}













void V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::Set(const String& value) {
  Clear();
member_string_ = value;
content_type_ = ContentType::kString;
}

void V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::Set(String&& value) {
  Clear();
member_string_ = std::move(value);
content_type_ = ContentType::kString;
}


V8UnionArrayBufferOrArrayBufferView* V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::GetAsV8UnionArrayBufferOrArrayBufferView() const {
  switch (content_type_) {
  case ContentType::kArrayBuffer: {
    return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferView>(GetAsArrayBuffer());
  }
  case ContentType::kArrayBufferView: {
    return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferView>(GetAsArrayBufferView());
  }
  default: {
    NOTREACHED();
return nullptr;
  }
}
}

void V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::Set(const V8UnionArrayBufferOrArrayBufferView* value) {
  switch (value->GetContentType()) {
  case V8UnionArrayBufferOrArrayBufferView::ContentType::kArrayBuffer: {
    Set(value->GetAsArrayBuffer());
    break;
  }
  case V8UnionArrayBufferOrArrayBufferView::ContentType::kArrayBufferView: {
    Set(value->GetAsArrayBufferView());
    break;
  }
}
}




V8UnionArrayBufferOrArrayBufferViewOrString* V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::GetAsV8UnionArrayBufferOrArrayBufferViewOrString() const {
  switch (content_type_) {
  case ContentType::kArrayBuffer: {
    return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrString>(GetAsArrayBuffer());
  }
  case ContentType::kArrayBufferView: {
    return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrString>(GetAsArrayBufferView());
  }
  case ContentType::kString: {
    return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrString>(GetAsString());
  }
  default: {
    NOTREACHED();
return nullptr;
  }
}
}

void V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::Set(const V8UnionArrayBufferOrArrayBufferViewOrString* value) {
  switch (value->GetContentType()) {
  case V8UnionArrayBufferOrArrayBufferViewOrString::ContentType::kArrayBuffer: {
    Set(value->GetAsArrayBuffer());
    break;
  }
  case V8UnionArrayBufferOrArrayBufferViewOrString::ContentType::kArrayBufferView: {
    Set(value->GetAsArrayBufferView());
    break;
  }
  case V8UnionArrayBufferOrArrayBufferViewOrString::ContentType::kString: {
    Set(value->GetAsString());
    break;
  }
}
}


V8UnionArrayBufferOrString* V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::GetAsV8UnionArrayBufferOrString() const {
  switch (content_type_) {
  case ContentType::kArrayBuffer: {
    return MakeGarbageCollected<V8UnionArrayBufferOrString>(GetAsArrayBuffer());
  }
  case ContentType::kString: {
    return MakeGarbageCollected<V8UnionArrayBufferOrString>(GetAsString());
  }
  default: {
    NOTREACHED();
return nullptr;
  }
}
}

void V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::Set(const V8UnionArrayBufferOrString* value) {
  switch (value->GetContentType()) {
  case V8UnionArrayBufferOrString::ContentType::kArrayBuffer: {
    Set(value->GetAsArrayBuffer());
    break;
  }
  case V8UnionArrayBufferOrString::ContentType::kString: {
    Set(value->GetAsString());
    break;
  }
}
}


v8::MaybeLocal<v8::Value> V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::ToV8Value(ScriptState* script_state) const {
  switch (content_type_) {
  case ContentType::kArrayBuffer: {
    return ToV8Traits<DOMArrayBuffer>::ToV8(script_state, member_array_buffer_);
  }
  case ContentType::kArrayBufferView: {
    return ToV8Traits<NotShared<DOMArrayBufferView>>::ToV8(script_state, member_array_buffer_view_);
  }
  case ContentType::kNDEFMessageInit: {
    return ToV8Traits<NDEFMessageInit>::ToV8(script_state, member_ndef_message_init_);
  }
  case ContentType::kString: {
    return ToV8Traits<IDLString>::ToV8(script_state, member_string_);
  }
}

NOTREACHED();
return v8::MaybeLocal<v8::Value>();
}

void V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<DOMArrayBuffer>>::Trace(visitor, member_array_buffer_);
TraceIfNeeded<NotShared<DOMArrayBufferView>>::Trace(visitor, member_array_buffer_view_);
TraceIfNeeded<Member<NDEFMessageInit>>::Trace(visitor, member_ndef_message_init_);
TraceIfNeeded<String>::Trace(visitor, member_string_);
bindings::UnionBase::Trace(visitor);
}

void V8UnionArrayBufferOrArrayBufferViewOrNDEFMessageInitOrString::Clear() {
  member_array_buffer_.Clear();
member_array_buffer_view_.Clear();
member_ndef_message_init_.Clear();
member_string_ = String();
}



}  // namespace blink
