// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_hid_report_item.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



HIDReportItem* HIDReportItem::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  HIDReportItem* dictionary = MakeGarbageCollected<HIDReportItem>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "HIDReportItem";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 HIDReportItem::HIDReportItem() {
  
}

 HIDReportItem::HIDReportItem(v8::Isolate* isolate) {
  
}












































































































Vector<String> HIDReportItem::getStringsOr(const Vector<String>& fallback_value) const {
  if (!hasStrings()) {
  return fallback_value;
}
return member_strings_;
}

Vector<String> HIDReportItem::getStringsOr(Vector<String>&& fallback_value) const {
  if (!hasStrings()) {
  return std::move(fallback_value);
}
return member_strings_;
}

void HIDReportItem::setStrings(const Vector<String>& value) {
  member_strings_ = value;
has_strings_ = true;
}

void HIDReportItem::setStrings(Vector<String>&& value) {
  member_strings_ = std::move(value);
has_strings_ = true;
}










































































Vector<uint32_t> HIDReportItem::getUsagesOr(const Vector<uint32_t>& fallback_value) const {
  if (!hasUsages()) {
  return fallback_value;
}
return member_usages_;
}

Vector<uint32_t> HIDReportItem::getUsagesOr(Vector<uint32_t>&& fallback_value) const {
  if (!hasUsages()) {
  return std::move(fallback_value);
}
return member_usages_;
}

void HIDReportItem::setUsages(const Vector<uint32_t>& value) {
  member_usages_ = value;
has_usages_ = true;
}

void HIDReportItem::setUsages(Vector<uint32_t>&& value) {
  member_usages_ = std::move(value);
has_usages_ = true;
}











void HIDReportItem::Trace(Visitor* visitor) const {
  TraceIfNeeded<bool>::Trace(visitor, member_has_null_);
TraceIfNeeded<bool>::Trace(visitor, member_has_preferred_state_);
TraceIfNeeded<bool>::Trace(visitor, member_is_absolute_);
TraceIfNeeded<bool>::Trace(visitor, member_is_array_);
TraceIfNeeded<bool>::Trace(visitor, member_is_buffered_bytes_);
TraceIfNeeded<bool>::Trace(visitor, member_is_constant_);
TraceIfNeeded<bool>::Trace(visitor, member_is_linear_);
TraceIfNeeded<bool>::Trace(visitor, member_is_range_);
TraceIfNeeded<bool>::Trace(visitor, member_is_volatile_);
TraceIfNeeded<int32_t>::Trace(visitor, member_logical_maximum_);
TraceIfNeeded<int32_t>::Trace(visitor, member_logical_minimum_);
TraceIfNeeded<int32_t>::Trace(visitor, member_physical_maximum_);
TraceIfNeeded<int32_t>::Trace(visitor, member_physical_minimum_);
TraceIfNeeded<uint16_t>::Trace(visitor, member_report_count_);
TraceIfNeeded<uint16_t>::Trace(visitor, member_report_size_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_strings_);
TraceIfNeeded<int8_t>::Trace(visitor, member_unit_exponent_);
TraceIfNeeded<int8_t>::Trace(visitor, member_unit_factor_current_exponent_);
TraceIfNeeded<int8_t>::Trace(visitor, member_unit_factor_length_exponent_);
TraceIfNeeded<int8_t>::Trace(visitor, member_unit_factor_luminous_intensity_exponent_);
TraceIfNeeded<int8_t>::Trace(visitor, member_unit_factor_mass_exponent_);
TraceIfNeeded<int8_t>::Trace(visitor, member_unit_factor_temperature_exponent_);
TraceIfNeeded<int8_t>::Trace(visitor, member_unit_factor_time_exponent_);
TraceIfNeeded<V8HIDUnitSystem>::Trace(visitor, member_unit_system_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_usage_maximum_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_usage_minimum_);
TraceIfNeeded<Vector<uint32_t>>::Trace(visitor, member_usages_);
TraceIfNeeded<bool>::Trace(visitor, member_wrap_);
bindings::DictionaryBase::Trace(visitor);
}

bool HIDReportItem::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasHasNull()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_has_null_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasHasPreferredState()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_has_preferred_state_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIsAbsolute()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_is_absolute_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIsArray()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_is_array_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIsBufferedBytes()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_is_buffered_bytes_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIsConstant()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_is_constant_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIsLinear()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_is_linear_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIsRange()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_is_range_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIsVolatile()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_is_volatile_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLogicalMaximum()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_logical_maximum_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLogicalMinimum()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_logical_minimum_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[10].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPhysicalMaximum()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_physical_maximum_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[11].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPhysicalMinimum()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_physical_minimum_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[12].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasReportCount()) {
  if (!ToV8Traits<IDLUnsignedShort>::ToV8(script_state, member_report_count_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[13].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasReportSize()) {
  if (!ToV8Traits<IDLUnsignedShort>::ToV8(script_state, member_report_size_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[14].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStrings()) {
  if (!ToV8Traits<IDLSequence<IDLString>>::ToV8(script_state, member_strings_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[15].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUnitExponent()) {
  if (!ToV8Traits<IDLByte>::ToV8(script_state, member_unit_exponent_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[16].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUnitFactorCurrentExponent()) {
  if (!ToV8Traits<IDLByte>::ToV8(script_state, member_unit_factor_current_exponent_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[17].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUnitFactorLengthExponent()) {
  if (!ToV8Traits<IDLByte>::ToV8(script_state, member_unit_factor_length_exponent_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[18].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUnitFactorLuminousIntensityExponent()) {
  if (!ToV8Traits<IDLByte>::ToV8(script_state, member_unit_factor_luminous_intensity_exponent_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[19].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUnitFactorMassExponent()) {
  if (!ToV8Traits<IDLByte>::ToV8(script_state, member_unit_factor_mass_exponent_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[20].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUnitFactorTemperatureExponent()) {
  if (!ToV8Traits<IDLByte>::ToV8(script_state, member_unit_factor_temperature_exponent_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[21].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUnitFactorTimeExponent()) {
  if (!ToV8Traits<IDLByte>::ToV8(script_state, member_unit_factor_time_exponent_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[22].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUnitSystem()) {
  if (!ToV8Traits<V8HIDUnitSystem>::ToV8(script_state, member_unit_system_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[23].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUsageMaximum()) {
  if (!ToV8Traits<IDLUnsignedLong>::ToV8(script_state, member_usage_maximum_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[24].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUsageMinimum()) {
  if (!ToV8Traits<IDLUnsignedLong>::ToV8(script_state, member_usage_minimum_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[25].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUsages()) {
  if (!ToV8Traits<IDLSequence<IDLUnsignedLong>>::ToV8(script_state, member_usages_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[26].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasWrap()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_wrap_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[27].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void HIDReportItem::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "HIDReportItem";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("hasNull");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_has_null_, member_has_null_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("hasPreferredState");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_has_preferred_state_, member_has_preferred_state_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("isAbsolute");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_is_absolute_, member_is_absolute_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("isArray");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_is_array_, member_is_array_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("isBufferedBytes");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_is_buffered_bytes_, member_is_buffered_bytes_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("isConstant");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_is_constant_, member_is_constant_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("isLinear");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_is_linear_, member_is_linear_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("isRange");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_is_range_, member_is_range_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("isVolatile");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), has_is_volatile_, member_is_volatile_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("logicalMaximum");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), has_logical_maximum_, member_logical_maximum_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("logicalMinimum");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[10].Get(isolate), has_logical_minimum_, member_logical_minimum_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("physicalMaximum");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[11].Get(isolate), has_physical_maximum_, member_physical_maximum_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("physicalMinimum");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[12].Get(isolate), has_physical_minimum_, member_physical_minimum_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("reportCount");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedShort, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[13].Get(isolate), has_report_count_, member_report_count_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("reportSize");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedShort, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[14].Get(isolate), has_report_size_, member_report_size_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("strings");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[15].Get(isolate), has_strings_, member_strings_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("unitExponent");
if (!bindings::GetDictionaryMemberFromV8Object<IDLByte, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[16].Get(isolate), has_unit_exponent_, member_unit_exponent_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("unitFactorCurrentExponent");
if (!bindings::GetDictionaryMemberFromV8Object<IDLByte, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[17].Get(isolate), has_unit_factor_current_exponent_, member_unit_factor_current_exponent_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("unitFactorLengthExponent");
if (!bindings::GetDictionaryMemberFromV8Object<IDLByte, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[18].Get(isolate), has_unit_factor_length_exponent_, member_unit_factor_length_exponent_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("unitFactorLuminousIntensityExponent");
if (!bindings::GetDictionaryMemberFromV8Object<IDLByte, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[19].Get(isolate), has_unit_factor_luminous_intensity_exponent_, member_unit_factor_luminous_intensity_exponent_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("unitFactorMassExponent");
if (!bindings::GetDictionaryMemberFromV8Object<IDLByte, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[20].Get(isolate), has_unit_factor_mass_exponent_, member_unit_factor_mass_exponent_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("unitFactorTemperatureExponent");
if (!bindings::GetDictionaryMemberFromV8Object<IDLByte, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[21].Get(isolate), has_unit_factor_temperature_exponent_, member_unit_factor_temperature_exponent_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("unitFactorTimeExponent");
if (!bindings::GetDictionaryMemberFromV8Object<IDLByte, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[22].Get(isolate), has_unit_factor_time_exponent_, member_unit_factor_time_exponent_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("unitSystem");
if (!bindings::GetDictionaryMemberFromV8Object<V8HIDUnitSystem, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[23].Get(isolate), has_unit_system_, member_unit_system_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("usageMaximum");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[24].Get(isolate), has_usage_maximum_, member_usage_maximum_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("usageMinimum");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[25].Get(isolate), has_usage_minimum_, member_usage_minimum_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("usages");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLUnsignedLong>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[26].Get(isolate), has_usages_, member_usages_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("wrap");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[27].Get(isolate), has_wrap_, member_wrap_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> HIDReportItem::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"hasNull",
"hasPreferredState",
"isAbsolute",
"isArray",
"isBufferedBytes",
"isConstant",
"isLinear",
"isRange",
"isVolatile",
"logicalMaximum",
"logicalMinimum",
"physicalMaximum",
"physicalMinimum",
"reportCount",
"reportSize",
"strings",
"unitExponent",
"unitFactorCurrentExponent",
"unitFactorLengthExponent",
"unitFactorLuminousIntensityExponent",
"unitFactorMassExponent",
"unitFactorTemperatureExponent",
"unitFactorTimeExponent",
"unitSystem",
"usageMaximum",
"usageMinimum",
"usages",
"wrap",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
