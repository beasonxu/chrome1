// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_MEDIA_STREAM_CONSTRAINTS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_MEDIA_STREAM_CONSTRAINTS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_system_audio_preference_enum.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class ExceptionState;
class MediaTrackConstraints;
class V8UnionBooleanOrMediaTrackConstraints;

class MODULES_EXPORT MediaStreamConstraints : public bindings::DictionaryBase {
  
  public:
static MediaStreamConstraints* Create() {
  return MakeGarbageCollected<MediaStreamConstraints>();
}
static MediaStreamConstraints* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<MediaStreamConstraints>(isolate);
}
static MediaStreamConstraints* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  MediaStreamConstraints();
explicit  MediaStreamConstraints(v8::Isolate* isolate);

bool hasAudio() const {
  return true;
}
V8UnionBooleanOrMediaTrackConstraints* audio() const {
  return member_audio_;
}
void setAudio(V8UnionBooleanOrMediaTrackConstraints* value) {
  member_audio_ = value;
DCHECK(member_audio_);
}

bool hasAutoSelectAllScreens() const {
  return true;
}
bool autoSelectAllScreens() const {
  return member_auto_select_all_screens_;
}
void setAutoSelectAllScreens(bool value) {
  member_auto_select_all_screens_ = value;
}

bool hasPreferCurrentTab() const {
  return true;
}
bool preferCurrentTab() const {
  return member_prefer_current_tab_;
}
void setPreferCurrentTab(bool value) {
  member_prefer_current_tab_ = value;
}

bool hasSystemAudio() const {
  return has_system_audio_;
}
V8SystemAudioPreferenceEnum systemAudio() const {
  DCHECK(hasSystemAudio());
return member_system_audio_;
}
V8SystemAudioPreferenceEnum getSystemAudioOr(V8SystemAudioPreferenceEnum fallback_value) const {
  if (!hasSystemAudio()) {
  return fallback_value;
}
return member_system_audio_;
}
void setSystemAudio(V8SystemAudioPreferenceEnum value) {
  member_system_audio_ = value;
has_system_audio_ = true;
}
void setSystemAudio(V8SystemAudioPreferenceEnum::Enum value) {
  member_system_audio_ = V8SystemAudioPreferenceEnum(value);
has_system_audio_ = true;
}

bool hasVideo() const {
  return true;
}
V8UnionBooleanOrMediaTrackConstraints* video() const {
  return member_video_;
}
void setVideo(V8UnionBooleanOrMediaTrackConstraints* value) {
  member_video_ = value;
DCHECK(member_video_);
}


// Obsolete accessor functions
void setSystemAudio(const String& value) {
  member_system_audio_ = V8SystemAudioPreferenceEnum::Create(value).value();
has_system_audio_ = true;
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_system_audio_ = false;

Member<V8UnionBooleanOrMediaTrackConstraints> member_audio_;
bool member_auto_select_all_screens_{false};
bool member_prefer_current_tab_{false};
V8SystemAudioPreferenceEnum member_system_audio_{static_cast<V8SystemAudioPreferenceEnum::Enum>(0)};
Member<V8UnionBooleanOrMediaTrackConstraints> member_video_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_MEDIA_STREAM_CONSTRAINTS_H_
