// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_ICE_GATHER_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_ICE_GATHER_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_ice_transport_policy.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class ExceptionState;
class RTCIceServer;

class MODULES_EXPORT RTCIceGatherOptions : public bindings::DictionaryBase {
  
  public:
static RTCIceGatherOptions* Create() {
  return MakeGarbageCollected<RTCIceGatherOptions>();
}
static RTCIceGatherOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<RTCIceGatherOptions>(isolate);
}
static RTCIceGatherOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  RTCIceGatherOptions();
explicit  RTCIceGatherOptions(v8::Isolate* isolate);

bool hasGatherPolicy() const {
  return true;
}
V8RTCIceTransportPolicy gatherPolicy() const {
  return member_gather_policy_;
}
void setGatherPolicy(V8RTCIceTransportPolicy value) {
  member_gather_policy_ = value;
}
void setGatherPolicy(V8RTCIceTransportPolicy::Enum value) {
  member_gather_policy_ = V8RTCIceTransportPolicy(value);
}

bool hasIceServers() const {
  return has_ice_servers_;
}
const HeapVector<Member<RTCIceServer>>& iceServers() const {
  DCHECK(hasIceServers());
return member_ice_servers_;
}
HeapVector<Member<RTCIceServer>> getIceServersOr(const HeapVector<Member<RTCIceServer>>& fallback_value) const;
HeapVector<Member<RTCIceServer>> getIceServersOr(HeapVector<Member<RTCIceServer>>&& fallback_value) const;
void setIceServers(const HeapVector<Member<RTCIceServer>>& value);
void setIceServers(HeapVector<Member<RTCIceServer>>&& value);


// Obsolete accessor functions
void setGatherPolicy(const String& value) {
  member_gather_policy_ = V8RTCIceTransportPolicy::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_ice_servers_ = false;

V8RTCIceTransportPolicy member_gather_policy_{V8RTCIceTransportPolicy::Enum::kAll};
HeapVector<Member<RTCIceServer>> member_ice_servers_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_ICE_GATHER_OPTIONS_H_
