// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_url_pattern_init.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



URLPatternInit* URLPatternInit::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  URLPatternInit* dictionary = MakeGarbageCollected<URLPatternInit>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "URLPatternInit";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 URLPatternInit::URLPatternInit() {
  
}

 URLPatternInit::URLPatternInit(v8::Isolate* isolate) {
  
}



String URLPatternInit::getBaseURLOr(const String& fallback_value) const {
  if (!hasBaseURL()) {
  return fallback_value;
}
return member_base_url_;
}

String URLPatternInit::getBaseURLOr(String&& fallback_value) const {
  if (!hasBaseURL()) {
  return std::move(fallback_value);
}
return member_base_url_;
}

void URLPatternInit::setBaseURL(const String& value) {
  member_base_url_ = value;
has_base_url_ = true;
}

void URLPatternInit::setBaseURL(String&& value) {
  member_base_url_ = std::move(value);
has_base_url_ = true;
}




String URLPatternInit::getHashOr(const String& fallback_value) const {
  if (!hasHash()) {
  return fallback_value;
}
return member_hash_;
}

String URLPatternInit::getHashOr(String&& fallback_value) const {
  if (!hasHash()) {
  return std::move(fallback_value);
}
return member_hash_;
}

void URLPatternInit::setHash(const String& value) {
  member_hash_ = value;
has_hash_ = true;
}

void URLPatternInit::setHash(String&& value) {
  member_hash_ = std::move(value);
has_hash_ = true;
}




String URLPatternInit::getHostnameOr(const String& fallback_value) const {
  if (!hasHostname()) {
  return fallback_value;
}
return member_hostname_;
}

String URLPatternInit::getHostnameOr(String&& fallback_value) const {
  if (!hasHostname()) {
  return std::move(fallback_value);
}
return member_hostname_;
}

void URLPatternInit::setHostname(const String& value) {
  member_hostname_ = value;
has_hostname_ = true;
}

void URLPatternInit::setHostname(String&& value) {
  member_hostname_ = std::move(value);
has_hostname_ = true;
}




String URLPatternInit::getPasswordOr(const String& fallback_value) const {
  if (!hasPassword()) {
  return fallback_value;
}
return member_password_;
}

String URLPatternInit::getPasswordOr(String&& fallback_value) const {
  if (!hasPassword()) {
  return std::move(fallback_value);
}
return member_password_;
}

void URLPatternInit::setPassword(const String& value) {
  member_password_ = value;
has_password_ = true;
}

void URLPatternInit::setPassword(String&& value) {
  member_password_ = std::move(value);
has_password_ = true;
}




String URLPatternInit::getPathnameOr(const String& fallback_value) const {
  if (!hasPathname()) {
  return fallback_value;
}
return member_pathname_;
}

String URLPatternInit::getPathnameOr(String&& fallback_value) const {
  if (!hasPathname()) {
  return std::move(fallback_value);
}
return member_pathname_;
}

void URLPatternInit::setPathname(const String& value) {
  member_pathname_ = value;
has_pathname_ = true;
}

void URLPatternInit::setPathname(String&& value) {
  member_pathname_ = std::move(value);
has_pathname_ = true;
}




String URLPatternInit::getPortOr(const String& fallback_value) const {
  if (!hasPort()) {
  return fallback_value;
}
return member_port_;
}

String URLPatternInit::getPortOr(String&& fallback_value) const {
  if (!hasPort()) {
  return std::move(fallback_value);
}
return member_port_;
}

void URLPatternInit::setPort(const String& value) {
  member_port_ = value;
has_port_ = true;
}

void URLPatternInit::setPort(String&& value) {
  member_port_ = std::move(value);
has_port_ = true;
}




String URLPatternInit::getProtocolOr(const String& fallback_value) const {
  if (!hasProtocol()) {
  return fallback_value;
}
return member_protocol_;
}

String URLPatternInit::getProtocolOr(String&& fallback_value) const {
  if (!hasProtocol()) {
  return std::move(fallback_value);
}
return member_protocol_;
}

void URLPatternInit::setProtocol(const String& value) {
  member_protocol_ = value;
has_protocol_ = true;
}

void URLPatternInit::setProtocol(String&& value) {
  member_protocol_ = std::move(value);
has_protocol_ = true;
}




String URLPatternInit::getSearchOr(const String& fallback_value) const {
  if (!hasSearch()) {
  return fallback_value;
}
return member_search_;
}

String URLPatternInit::getSearchOr(String&& fallback_value) const {
  if (!hasSearch()) {
  return std::move(fallback_value);
}
return member_search_;
}

void URLPatternInit::setSearch(const String& value) {
  member_search_ = value;
has_search_ = true;
}

void URLPatternInit::setSearch(String&& value) {
  member_search_ = std::move(value);
has_search_ = true;
}




String URLPatternInit::getUsernameOr(const String& fallback_value) const {
  if (!hasUsername()) {
  return fallback_value;
}
return member_username_;
}

String URLPatternInit::getUsernameOr(String&& fallback_value) const {
  if (!hasUsername()) {
  return std::move(fallback_value);
}
return member_username_;
}

void URLPatternInit::setUsername(const String& value) {
  member_username_ = value;
has_username_ = true;
}

void URLPatternInit::setUsername(String&& value) {
  member_username_ = std::move(value);
has_username_ = true;
}




void URLPatternInit::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_base_url_);
TraceIfNeeded<String>::Trace(visitor, member_hash_);
TraceIfNeeded<String>::Trace(visitor, member_hostname_);
TraceIfNeeded<String>::Trace(visitor, member_password_);
TraceIfNeeded<String>::Trace(visitor, member_pathname_);
TraceIfNeeded<String>::Trace(visitor, member_port_);
TraceIfNeeded<String>::Trace(visitor, member_protocol_);
TraceIfNeeded<String>::Trace(visitor, member_search_);
TraceIfNeeded<String>::Trace(visitor, member_username_);
bindings::DictionaryBase::Trace(visitor);
}

bool URLPatternInit::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasBaseURL()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_base_url_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasHash()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_hash_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasHostname()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_hostname_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPassword()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_password_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPathname()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_pathname_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPort()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_port_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasProtocol()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_protocol_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSearch()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_search_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUsername()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_username_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void URLPatternInit::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "URLPatternInit";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("baseURL");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_base_url_, member_base_url_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("hash");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_hash_, member_hash_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("hostname");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_hostname_, member_hostname_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("password");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_password_, member_password_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("pathname");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_pathname_, member_pathname_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("port");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_port_, member_port_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("protocol");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_protocol_, member_protocol_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("search");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_search_, member_search_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("username");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), has_username_, member_username_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> URLPatternInit::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"baseURL",
"hash",
"hostname",
"password",
"pathname",
"port",
"protocol",
"search",
"username",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
