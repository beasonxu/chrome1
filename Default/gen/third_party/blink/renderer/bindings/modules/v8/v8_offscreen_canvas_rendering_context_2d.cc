// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_offscreen_canvas_rendering_context_2d.h"

#include "base/dcheck_is_on.h"
#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_color_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_image_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_matrix.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_matrix_init.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_point_init.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_canvas_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_image_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_video_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_image_bitmap.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_image_data.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_image_data_settings.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_offscreen_canvas.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_set_return_value_for_core.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_image_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text_metrics.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_dompointinit_unrestricteddouble.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_fill_rule.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_filter.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_gradient.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_pattern.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_image_smoothing_quality.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_path_2d.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_union_canvasfilter_string.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_union_csscolorvalue_canvasgradient_canvaspattern_string.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_union_cssimagevalue_htmlcanvaselement_htmlimageelement_htmlvideoelement_imagebitmap_offscreencanvas_svgimageelement_videoframe.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_frame.h"
#include "third_party/blink/renderer/core/css/cssom/css_color_value.h"
#include "third_party/blink/renderer/core/css/cssom/css_style_image_value.h"
#include "third_party/blink/renderer/core/execution_context/execution_context.h"
#include "third_party/blink/renderer/core/frame/dactyloscoper.h"
#include "third_party/blink/renderer/core/frame/web_feature.h"
#include "third_party/blink/renderer/core/geometry/dom_matrix.h"
#include "third_party/blink/renderer/core/html/canvas/html_canvas_element.h"
#include "third_party/blink/renderer/core/html/canvas/image_data.h"
#include "third_party/blink/renderer/core/html/canvas/text_metrics.h"
#include "third_party/blink/renderer/core/html/html_image_element.h"
#include "third_party/blink/renderer/core/html/media/html_video_element.h"
#include "third_party/blink/renderer/core/imagebitmap/image_bitmap.h"
#include "third_party/blink/renderer/core/offscreencanvas/offscreen_canvas.h"
#include "third_party/blink/renderer/core/svg/svg_image_element.h"
#include "third_party/blink/renderer/modules/canvas/canvas2d/canvas_filter.h"
#include "third_party/blink/renderer/modules/canvas/canvas2d/canvas_gradient.h"
#include "third_party/blink/renderer/modules/canvas/canvas2d/canvas_pattern.h"
#include "third_party/blink/renderer/modules/canvas/canvas2d/path_2d.h"
#include "third_party/blink/renderer/modules/canvas/offscreencanvas2d/offscreen_canvas_rendering_context_2d.h"
#include "third_party/blink/renderer/modules/webcodecs/video_frame.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/idl_member_installer.h"
#include "third_party/blink/renderer/platform/bindings/no_alloc_direct_call_exception_state.h"
#include "third_party/blink/renderer/platform/bindings/runtime_call_stats.h"
#include "third_party/blink/renderer/platform/bindings/v8_binding.h"
#include "third_party/blink/renderer/platform/bindings/wrapper_type_info.h"
#include "third_party/blink/renderer/platform/heap/thread_state_scopes.h"
#include "third_party/blink/renderer/platform/instrumentation/use_counter.h"
#include "third_party/blink/renderer/platform/scheduler/public/cooperative_scheduling_manager.h"

namespace blink {



bool V8OffscreenCanvasRenderingContext2D::IsExposed(ExecutionContext* execution_context) {
  
return execution_context->IsWindow() || execution_context->IsWorkerGlobalScope();
}

// Construction of WrapperTypeInfo may require non-trivial initialization due
// to cross-component address resolution in order to load the pointer to the
// parent interface's WrapperTypeInfo.  We ignore this issue because the issue
// happens only on component builds and the official release builds
// (statically-linked builds) are never affected by this issue.
#if defined(COMPONENT_BUILD) && defined(WIN32) && defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif

const WrapperTypeInfo V8OffscreenCanvasRenderingContext2D::wrapper_type_info_{
    gin::kEmbedderBlink,
    V8OffscreenCanvasRenderingContext2D::InstallInterfaceTemplate,
    nullptr,
    "OffscreenCanvasRenderingContext2D",
    nullptr,
    WrapperTypeInfo::kWrapperTypeObjectPrototype,
    WrapperTypeInfo::kObjectClassId,
    WrapperTypeInfo::kInheritFromActiveScriptWrappable,
    WrapperTypeInfo::kIdlInterface,
};

#if defined(COMPONENT_BUILD) && defined(WIN32) && defined(__clang__)
#pragma clang diagnostic pop
#endif

const WrapperTypeInfo& OffscreenCanvasRenderingContext2D::wrapper_type_info_ =
    V8OffscreenCanvasRenderingContext2D::wrapper_type_info_;

// [ActiveScriptWrappable]
static_assert(
    std::is_base_of<ActiveScriptWrappableBase, OffscreenCanvasRenderingContext2D>::value,
    "OffscreenCanvasRenderingContext2D does not inherit from ActiveScriptWrappable<> despite "
    "the IDL has [ActiveScriptWrappable] extended attribute.");
static_assert(
    !std::is_same<decltype(&OffscreenCanvasRenderingContext2D::HasPendingActivity),
                  decltype(&ScriptWrappable::HasPendingActivity)>::value,
    "OffscreenCanvasRenderingContext2D is not overriding hasPendingActivity() despite "
    "the IDL has [ActiveScriptWrappable] extended attribute.");

namespace  {

namespace v8_offscreen_canvas_rendering_context_2d {

void CanvasAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_canvas_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.canvas.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->offscreenCanvasForBinding();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void GlobalAlphaAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_globalAlpha_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.globalAlpha.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->globalAlpha();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
}

void GlobalAlphaAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_globalAlpha_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.globalAlpha.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "globalAlpha";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnrestrictedDouble>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setGlobalAlpha(arg1_value);

}

void GlobalCompositeOperationAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_globalCompositeOperation_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.globalCompositeOperation.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->globalCompositeOperation();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void GlobalCompositeOperationAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_globalCompositeOperation_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.globalCompositeOperation.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "globalCompositeOperation";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setGlobalCompositeOperation(arg1_value);

}

void FilterAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_filter_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.filter.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kCanvas2DFilter);


v8::Local<v8::Value> v8_return_value;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->filter();
if (!ToV8Traits<IDLNullable<V8UnionCanvasFilterOrString>>::ToV8(script_state, return_value).ToLocal(&v8_return_value)) {
  return;
}
bindings::V8SetReturnValue(info, v8_return_value);
}

void FilterAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_filter_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.filter.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kCanvas2DFilter);

const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "filter";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ExecutionContext* receiver_execution_context = ExecutionContext::From(receiver_context);
ExecutionContext* execution_context = receiver_execution_context;
v8::Local<v8::Value> v8_property_value = info[0];
auto&& arg1_value = NativeValueTraits<IDLNullable<V8UnionCanvasFilterOrString>>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setFilter(execution_context, arg1_value);

}

void ImageSmoothingEnabledAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_imageSmoothingEnabled_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.imageSmoothingEnabled.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->imageSmoothingEnabled();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}

void ImageSmoothingEnabledAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_imageSmoothingEnabled_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.imageSmoothingEnabled.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "imageSmoothingEnabled";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLBoolean>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setImageSmoothingEnabled(arg1_value);

}

void ImageSmoothingQualityAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_imageSmoothingQuality_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.imageSmoothingQuality.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kCanvas2DImageSmoothingQuality);


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->imageSmoothingQuality();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void ImageSmoothingQualityAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_imageSmoothingQuality_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.imageSmoothingQuality.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kCanvas2DImageSmoothingQuality);



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "imageSmoothingQuality";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
// https://webidl.spec.whatwg.org/#dfn-attribute-setter
// step 4.6.1. Let S be ? ToString(V).
const auto&& arg1_value_string =
    NativeValueTraits<IDLString>::NativeValue(
        isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException()))
  return;
// step 4.6.2. If S is not one of the enumeration's values, then return
//   undefined.
const auto arg1_value_maybe_enum = V8ImageSmoothingQuality::Create(arg1_value_string);
if (!arg1_value_maybe_enum) {
  bindings::ReportInvalidEnumSetToAttribute(
      isolate, arg1_value_string, "ImageSmoothingQuality", exception_state);
  return;  // Return undefined.
}
const auto arg1_value = arg1_value_maybe_enum.value();

blink_receiver->setImageSmoothingQuality(arg1_value);

}

void StrokeStyleAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_strokeStyle_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.strokeStyle.get");


v8::Local<v8::Value> v8_return_value;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->strokeStyle();
if (!ToV8Traits<V8UnionCSSColorValueOrCanvasGradientOrCanvasPatternOrString>::ToV8(script_state, return_value).ToLocal(&v8_return_value)) {
  return;
}
bindings::V8SetReturnValue(info, v8_return_value);
}

void StrokeStyleAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_strokeStyle_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.strokeStyle.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "strokeStyle";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<V8UnionCSSColorValueOrCanvasGradientOrCanvasPatternOrString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setStrokeStyle(arg1_value);

}

void FillStyleAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_fillStyle_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.fillStyle.get");


v8::Local<v8::Value> v8_return_value;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->fillStyle();
if (!ToV8Traits<V8UnionCSSColorValueOrCanvasGradientOrCanvasPatternOrString>::ToV8(script_state, return_value).ToLocal(&v8_return_value)) {
  return;
}
bindings::V8SetReturnValue(info, v8_return_value);
}

void FillStyleAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_fillStyle_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.fillStyle.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "fillStyle";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<V8UnionCSSColorValueOrCanvasGradientOrCanvasPatternOrString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setFillStyle(arg1_value);

}

void ShadowOffsetXAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_shadowOffsetX_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.shadowOffsetX.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->shadowOffsetX();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
}

void ShadowOffsetXAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_shadowOffsetX_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.shadowOffsetX.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "shadowOffsetX";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnrestrictedDouble>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setShadowOffsetX(arg1_value);

}

void ShadowOffsetYAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_shadowOffsetY_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.shadowOffsetY.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->shadowOffsetY();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
}

void ShadowOffsetYAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_shadowOffsetY_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.shadowOffsetY.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "shadowOffsetY";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnrestrictedDouble>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setShadowOffsetY(arg1_value);

}

void ShadowBlurAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_shadowBlur_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.shadowBlur.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->shadowBlur();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
}

void ShadowBlurAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_shadowBlur_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.shadowBlur.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "shadowBlur";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnrestrictedDouble>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setShadowBlur(arg1_value);

}

void ShadowColorAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_shadowColor_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.shadowColor.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->shadowColor();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void ShadowColorAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_shadowColor_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.shadowColor.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "shadowColor";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setShadowColor(arg1_value);

}

void LineWidthAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_lineWidth_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.lineWidth.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->lineWidth();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
}

void LineWidthAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_lineWidth_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.lineWidth.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "lineWidth";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnrestrictedDouble>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setLineWidth(arg1_value);

}

void LineCapAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_lineCap_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.lineCap.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->lineCap();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void LineCapAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_lineCap_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.lineCap.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "lineCap";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setLineCap(arg1_value);

}

void LineJoinAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_lineJoin_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.lineJoin.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->lineJoin();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void LineJoinAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_lineJoin_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.lineJoin.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "lineJoin";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setLineJoin(arg1_value);

}

void MiterLimitAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_miterLimit_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.miterLimit.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->miterLimit();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
}

void MiterLimitAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_miterLimit_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.miterLimit.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "miterLimit";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnrestrictedDouble>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setMiterLimit(arg1_value);

}

void LineDashOffsetAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_lineDashOffset_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.lineDashOffset.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->lineDashOffset();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
}

void LineDashOffsetAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_lineDashOffset_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.lineDashOffset.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "lineDashOffset";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLUnrestrictedDouble>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setLineDashOffset(arg1_value);

}

void FontAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_font_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.font.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->font();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void FontAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_font_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.font.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "font";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setFont(arg1_value);

}

void TextAlignAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_textAlign_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.textAlign.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->textAlign();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void TextAlignAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_textAlign_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.textAlign.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "textAlign";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTextAlign(arg1_value);

}

void TextBaselineAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_textBaseline_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.textBaseline.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->textBaseline();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void TextBaselineAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_textBaseline_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.textBaseline.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "textBaseline";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTextBaseline(arg1_value);

}

void DirectionAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_direction_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.direction.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->direction();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void DirectionAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_direction_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.direction.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "direction";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setDirection(arg1_value);

}

void FontKerningAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_fontKerning_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.fontKerning.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->fontKerning();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void FontKerningAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_fontKerning_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.fontKerning.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "fontKerning";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setFontKerning(arg1_value);

}

void FontStretchAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_fontStretch_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.fontStretch.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->fontStretch();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void FontStretchAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_fontStretch_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.fontStretch.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "fontStretch";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setFontStretch(arg1_value);

}

void FontVariantCapsAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_fontVariantCaps_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.fontVariantCaps.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->fontVariantCaps();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void FontVariantCapsAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_fontVariantCaps_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.fontVariantCaps.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "fontVariantCaps";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setFontVariantCaps(arg1_value);

}

void LetterSpacingAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_letterSpacing_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.letterSpacing.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->letterSpacing();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void LetterSpacingAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_letterSpacing_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.letterSpacing.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "letterSpacing";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setLetterSpacing(arg1_value);

}

void TextRenderingAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_textRendering_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.textRendering.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->textRendering();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void TextRenderingAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_textRendering_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.textRendering.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "textRendering";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTextRendering(arg1_value);

}

void WordSpacingAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_wordSpacing_Getter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.wordSpacing.get");


v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->wordSpacing();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void WordSpacingAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_wordSpacing_Setter");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.wordSpacing.set");



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "wordSpacing";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setWordSpacing(arg1_value);

}

void ArcOperationNoAllocDirectCallArg6(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_x, double v8_arg2_y, double v8_arg3_radius, double v8_arg4_start_angle, double v8_arg5_end_angle, bool v8_arg6_anticlockwise, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_x = v8_arg1_x;
auto&& arg2_y = v8_arg2_y;
auto&& arg3_radius = v8_arg3_radius;
auto&& arg4_start_angle = v8_arg4_start_angle;
auto&& arg5_end_angle = v8_arg5_end_angle;
auto&& arg6_anticlockwise = v8_arg6_anticlockwise;
v8::Isolate* isolate = v8_receiver->GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "arc";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
blink_receiver->arc(arg1_x, arg2_y, arg3_radius, arg4_start_angle, arg5_end_angle, arg6_anticlockwise, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}

void ArcOperationNoAllocDirectCallArg5(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_x, double v8_arg2_y, double v8_arg3_radius, double v8_arg4_start_angle, double v8_arg5_end_angle, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_x = v8_arg1_x;
auto&& arg2_y = v8_arg2_y;
auto&& arg3_radius = v8_arg3_radius;
auto&& arg4_start_angle = v8_arg4_start_angle;
auto&& arg5_end_angle = v8_arg5_end_angle;
auto&& arg6_anticlockwise{false};
v8::Isolate* isolate = v8_receiver->GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "arc";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
blink_receiver->arc(arg1_x, arg2_y, arg3_radius, arg4_start_angle, arg5_end_angle, arg6_anticlockwise, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}

#if DCHECK_IS_ON()
void ArcOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "arc";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_radius = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_start_angle = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_end_angle = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg6_anticlockwise{false};
if (!info[5]->IsUndefined()) {
  arg6_anticlockwise = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->arc(arg1_x, arg2_y, arg3_radius, arg4_start_angle, arg5_end_angle, arg6_anticlockwise, exception_state);
});
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}
#endif  // DCHECK_IS_ON()

void ArcOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_arc");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.arc");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "arc";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 5)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(5, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
ArcOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_radius = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_start_angle = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_end_angle = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg6_anticlockwise{false};
if (!info[5]->IsUndefined()) {
  arg6_anticlockwise = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
blink_receiver->arc(arg1_x, arg2_y, arg3_radius, arg4_start_angle, arg5_end_angle, arg6_anticlockwise, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void ArcToOperationNoAllocDirectCallArg5(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_x_1, double v8_arg2_y_1, double v8_arg3_x_2, double v8_arg4_y_2, double v8_arg5_radius, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_x_1 = v8_arg1_x_1;
auto&& arg2_y_1 = v8_arg2_y_1;
auto&& arg3_x_2 = v8_arg3_x_2;
auto&& arg4_y_2 = v8_arg4_y_2;
auto&& arg5_radius = v8_arg5_radius;
v8::Isolate* isolate = v8_receiver->GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "arcTo";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
blink_receiver->arcTo(arg1_x_1, arg2_y_1, arg3_x_2, arg4_y_2, arg5_radius, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}

#if DCHECK_IS_ON()
void ArcToOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "arcTo";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_x_1 = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y_1 = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_x_2 = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_y_2 = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_radius = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->arcTo(arg1_x_1, arg2_y_1, arg3_x_2, arg4_y_2, arg5_radius, exception_state);
});
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}
#endif  // DCHECK_IS_ON()

void ArcToOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_arcTo");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.arcTo");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "arcTo";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 5)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(5, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
ArcToOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_x_1 = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y_1 = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_x_2 = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_y_2 = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_radius = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->arcTo(arg1_x_1, arg2_y_1, arg3_x_2, arg4_y_2, arg5_radius, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void BeginLayerOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_beginLayer");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.beginLayer");







v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink_receiver->beginLayer();

}

void BeginPathOperationNoAllocDirectCallArg0(v8::Local<v8::Object> v8_arg0_receiver, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

blink_receiver->beginPath();
}

#if DCHECK_IS_ON()
void BeginPathOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->beginPath();
});

}
#endif  // DCHECK_IS_ON()

void BeginPathOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_beginPath");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.beginPath");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}



#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::Isolate* isolate = info.GetIsolate();
v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
BeginPathOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

blink_receiver->beginPath();

}

void BezierCurveToOperationNoAllocDirectCallArg6(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_cp_1_x, double v8_arg2_cp_1_y, double v8_arg3_cp_2_x, double v8_arg4_cp_2_y, double v8_arg5_x, double v8_arg6_y, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_cp_1_x = v8_arg1_cp_1_x;
auto&& arg2_cp_1_y = v8_arg2_cp_1_y;
auto&& arg3_cp_2_x = v8_arg3_cp_2_x;
auto&& arg4_cp_2_y = v8_arg4_cp_2_y;
auto&& arg5_x = v8_arg5_x;
auto&& arg6_y = v8_arg6_y;
blink_receiver->bezierCurveTo(arg1_cp_1_x, arg2_cp_1_y, arg3_cp_2_x, arg4_cp_2_y, arg5_x, arg6_y);
}

#if DCHECK_IS_ON()
void BezierCurveToOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "bezierCurveTo";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_cp_1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_cp_1_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_cp_2_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_cp_2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg6_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->bezierCurveTo(arg1_cp_1_x, arg2_cp_1_y, arg3_cp_2_x, arg4_cp_2_y, arg5_x, arg6_y);
});

}
#endif  // DCHECK_IS_ON()

void BezierCurveToOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_bezierCurveTo");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.bezierCurveTo");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "bezierCurveTo";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 6)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(6, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
BezierCurveToOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_cp_1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_cp_1_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_cp_2_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_cp_2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg6_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->bezierCurveTo(arg1_cp_1_x, arg2_cp_1_y, arg3_cp_2_x, arg4_cp_2_y, arg5_x, arg6_y);

}

void ClearRectOperationNoAllocDirectCallArg4(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_x, double v8_arg2_y, double v8_arg3_width, double v8_arg4_height, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_x = v8_arg1_x;
auto&& arg2_y = v8_arg2_y;
auto&& arg3_width = v8_arg3_width;
auto&& arg4_height = v8_arg4_height;
blink_receiver->clearRect(arg1_x, arg2_y, arg3_width, arg4_height);
}

#if DCHECK_IS_ON()
void ClearRectOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "clearRect";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_width = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_height = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->clearRect(arg1_x, arg2_y, arg3_width, arg4_height);
});

}
#endif  // DCHECK_IS_ON()

void ClearRectOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_clearRect");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.clearRect");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "clearRect";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 4)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(4, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
ClearRectOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_width = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_height = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->clearRect(arg1_x, arg2_y, arg3_width, arg4_height);

}

void ClipOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  





do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (non_undefined_argument_length <= 0) {
  blink_receiver->clip();
break;
}
v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "clip";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_winding = NativeValueTraits<V8CanvasFillRule>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->clip(arg1_winding);
} while (false);

}

void ClipOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


if (UNLIKELY(info.Length() < 1)) {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "clip";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "clip";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_path = NativeValueTraits<Path2D>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
if (non_undefined_argument_length <= 1) {
  blink_receiver->clip(arg1_path);
break;
}
auto&& arg2_winding = NativeValueTraits<V8CanvasFillRule>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->clip(arg1_path, arg2_winding);
} while (false);

}

void ClipOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_clip");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.clip");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 2);
if (arg_count == 2) {
  return ClipOperationOverload2(info);
}
if (arg_count == 1) {
  if (info[0]->IsUndefined()) {
  return ClipOperationOverload1(info);
}
v8::Isolate* isolate = info.GetIsolate();
if (V8Path2D::HasInstance(isolate, info[0])) {
  return ClipOperationOverload2(info);
}
return ClipOperationOverload1(info);
}
return ClipOperationOverload1(info);
}

void ClosePathOperationNoAllocDirectCallArg0(v8::Local<v8::Object> v8_arg0_receiver, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

blink_receiver->closePath();
}

#if DCHECK_IS_ON()
void ClosePathOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->closePath();
});

}
#endif  // DCHECK_IS_ON()

void ClosePathOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_closePath");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.closePath");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}



#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::Isolate* isolate = info.GetIsolate();
v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
ClosePathOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

blink_receiver->closePath();

}

void CommitOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_commit");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.commit");







v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink_receiver->commit();

}

void CreateConicGradientOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_createConicGradient");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.createConicGradient");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "createConicGradient";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 3)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(3, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_start_angle = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_center_x = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_center_y = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->createConicGradient(arg1_start_angle, arg2_center_x, arg3_center_y);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void CreateImageDataOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "createImageData";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_imagedata = NativeValueTraits<ImageData>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->createImageData(arg1_imagedata, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void CreateImageDataOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "createImageData";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_sw = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_sh = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->createImageData(arg1_sw, arg2_sh, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void CreateImageDataOperationOverload3(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "createImageData";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 3)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(3, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_sw = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_sh = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_image_data_settings = NativeValueTraits<ImageDataSettings>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->createImageData(arg1_sw, arg2_sh, arg3_image_data_settings, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void CreateImageDataOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_createImageData");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.createImageData");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 3);
if (arg_count == 3) {
  return CreateImageDataOperationOverload3(info);
}
if (arg_count == 2) {
  return CreateImageDataOperationOverload2(info);
}
if (arg_count == 1) {
  return CreateImageDataOperationOverload1(info);
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "createImageData";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}
exception_state.ThrowTypeError("Overload resolution failed.");
return;
}

void CreateLinearGradientOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_createLinearGradient");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.createLinearGradient");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "createLinearGradient";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 4)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(4, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_x_0 = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y_0 = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_x_1 = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_y_1 = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->createLinearGradient(arg1_x_0, arg2_y_0, arg3_x_1, arg4_y_1);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void CreatePatternOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_createPattern");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.createPattern");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "createPattern";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_image = NativeValueTraits<V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_repetition_type = NativeValueTraits<IDLStringTreatNullAsEmptyString>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->createPattern(arg1_image, arg2_repetition_type, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void CreateRadialGradientOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_createRadialGradient");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.createRadialGradient");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "createRadialGradient";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 6)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(6, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_x_0 = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y_0 = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_r_0 = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_x_1 = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_y_1 = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg6_r_1 = NativeValueTraits<IDLDouble>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->createRadialGradient(arg1_x_0, arg2_y_0, arg3_r_0, arg4_x_1, arg5_y_1, arg6_r_1, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void DrawImageOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "drawImage";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 3)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(3, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_image = NativeValueTraits<V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->drawImage(arg1_image, arg2_x, arg3_y, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void DrawImageOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "drawImage";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 5)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(5, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_image = NativeValueTraits<V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_width = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_height = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->drawImage(arg1_image, arg2_x, arg3_y, arg4_width, arg5_height, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void DrawImageOperationOverload3(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "drawImage";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 9)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(9, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_image = NativeValueTraits<V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_sx = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_sy = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_sw = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_sh = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg6_dx = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg7_dy = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 6, info[6], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg8_dw = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 7, info[7], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg9_dh = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 8, info[8], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->drawImage(arg1_image, arg2_sx, arg3_sy, arg4_sw, arg5_sh, arg6_dx, arg7_dy, arg8_dw, arg9_dh, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void DrawImageOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_drawImage");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.drawImage");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 9);
if (arg_count == 9) {
  return DrawImageOperationOverload3(info);
}
if (arg_count == 5) {
  return DrawImageOperationOverload2(info);
}
if (arg_count == 3) {
  return DrawImageOperationOverload1(info);
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "drawImage";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 3)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(3, info.Length()));
return;
}
exception_state.ThrowTypeError("Overload resolution failed.");
return;
}

void EllipseOperationNoAllocDirectCallArg8(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_x, double v8_arg2_y, double v8_arg3_radius_x, double v8_arg4_radius_y, double v8_arg5_rotation, double v8_arg6_start_angle, double v8_arg7_end_angle, bool v8_arg8_anticlockwise, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_x = v8_arg1_x;
auto&& arg2_y = v8_arg2_y;
auto&& arg3_radius_x = v8_arg3_radius_x;
auto&& arg4_radius_y = v8_arg4_radius_y;
auto&& arg5_rotation = v8_arg5_rotation;
auto&& arg6_start_angle = v8_arg6_start_angle;
auto&& arg7_end_angle = v8_arg7_end_angle;
auto&& arg8_anticlockwise = v8_arg8_anticlockwise;
v8::Isolate* isolate = v8_receiver->GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "ellipse";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
blink_receiver->ellipse(arg1_x, arg2_y, arg3_radius_x, arg4_radius_y, arg5_rotation, arg6_start_angle, arg7_end_angle, arg8_anticlockwise, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}

void EllipseOperationNoAllocDirectCallArg7(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_x, double v8_arg2_y, double v8_arg3_radius_x, double v8_arg4_radius_y, double v8_arg5_rotation, double v8_arg6_start_angle, double v8_arg7_end_angle, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_x = v8_arg1_x;
auto&& arg2_y = v8_arg2_y;
auto&& arg3_radius_x = v8_arg3_radius_x;
auto&& arg4_radius_y = v8_arg4_radius_y;
auto&& arg5_rotation = v8_arg5_rotation;
auto&& arg6_start_angle = v8_arg6_start_angle;
auto&& arg7_end_angle = v8_arg7_end_angle;
auto&& arg8_anticlockwise{false};
v8::Isolate* isolate = v8_receiver->GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "ellipse";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
blink_receiver->ellipse(arg1_x, arg2_y, arg3_radius_x, arg4_radius_y, arg5_rotation, arg6_start_angle, arg7_end_angle, arg8_anticlockwise, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}

#if DCHECK_IS_ON()
void EllipseOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "ellipse";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_radius_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_radius_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_rotation = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg6_start_angle = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg7_end_angle = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 6, info[6], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg8_anticlockwise{false};
if (!info[7]->IsUndefined()) {
  arg8_anticlockwise = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 7, info[7], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->ellipse(arg1_x, arg2_y, arg3_radius_x, arg4_radius_y, arg5_rotation, arg6_start_angle, arg7_end_angle, arg8_anticlockwise, exception_state);
});
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}
#endif  // DCHECK_IS_ON()

void EllipseOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_ellipse");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.ellipse");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "ellipse";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 7)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(7, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
EllipseOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_radius_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_radius_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_rotation = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg6_start_angle = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg7_end_angle = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 6, info[6], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg8_anticlockwise{false};
if (!info[7]->IsUndefined()) {
  arg8_anticlockwise = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 7, info[7], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
blink_receiver->ellipse(arg1_x, arg2_y, arg3_radius_x, arg4_radius_y, arg5_rotation, arg6_start_angle, arg7_end_angle, arg8_anticlockwise, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void EndLayerOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_endLayer");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.endLayer");







v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink_receiver->endLayer();

}

void FillOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  





do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (non_undefined_argument_length <= 0) {
  blink_receiver->fill();
break;
}
v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "fill";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_winding = NativeValueTraits<V8CanvasFillRule>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->fill(arg1_winding);
} while (false);

}

void FillOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


if (UNLIKELY(info.Length() < 1)) {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "fill";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "fill";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_path = NativeValueTraits<Path2D>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
if (non_undefined_argument_length <= 1) {
  blink_receiver->fill(arg1_path);
break;
}
auto&& arg2_winding = NativeValueTraits<V8CanvasFillRule>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->fill(arg1_path, arg2_winding);
} while (false);

}

void FillOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_fill");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.fill");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 2);
if (arg_count == 2) {
  return FillOperationOverload2(info);
}
if (arg_count == 1) {
  if (info[0]->IsUndefined()) {
  return FillOperationOverload1(info);
}
v8::Isolate* isolate = info.GetIsolate();
if (V8Path2D::HasInstance(isolate, info[0])) {
  return FillOperationOverload2(info);
}
return FillOperationOverload1(info);
}
return FillOperationOverload1(info);
}

void FillRectOperationNoAllocDirectCallArg4(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_x, double v8_arg2_y, double v8_arg3_width, double v8_arg4_height, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_x = v8_arg1_x;
auto&& arg2_y = v8_arg2_y;
auto&& arg3_width = v8_arg3_width;
auto&& arg4_height = v8_arg4_height;
blink_receiver->fillRect(arg1_x, arg2_y, arg3_width, arg4_height);
}

#if DCHECK_IS_ON()
void FillRectOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "fillRect";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_width = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_height = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->fillRect(arg1_x, arg2_y, arg3_width, arg4_height);
});

}
#endif  // DCHECK_IS_ON()

void FillRectOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_fillRect");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.fillRect");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "fillRect";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 4)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(4, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
FillRectOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_width = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_height = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->fillRect(arg1_x, arg2_y, arg3_width, arg4_height);

}

void FillTextOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_fillText");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.fillText");




if (UNLIKELY(info.Length() < 3)) {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "fillText";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(3, info.Length()));
return;
}



do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "fillText";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_text = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
if (non_undefined_argument_length <= 3) {
  blink_receiver->fillText(arg1_text, arg2_x, arg3_y);
break;
}
auto&& arg4_max_width = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->fillText(arg1_text, arg2_x, arg3_y, arg4_max_width);
} while (false);

}

void GetImageDataOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kOffscreenCanvasGetImageData);


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "getImageData";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 4)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(4, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_sx = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_sy = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_sw = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_sh = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->getImageData(arg1_sx, arg2_sy, arg3_sw, arg4_sh, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver);
// [HighEntropy]
Dactyloscoper::Record(current_execution_context, WebFeature::kOffscreenCanvasGetImageData);
}

void GetImageDataOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kOffscreenCanvasGetImageData);


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "getImageData";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 5)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(5, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_sx = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_sy = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_sw = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_sh = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_image_data_settings = NativeValueTraits<ImageDataSettings>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->getImageData(arg1_sx, arg2_sy, arg3_sw, arg4_sh, arg5_image_data_settings, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver);
// [HighEntropy]
Dactyloscoper::Record(current_execution_context, WebFeature::kOffscreenCanvasGetImageData);
}

void GetImageDataOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_getImageData");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.getImageData");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 5);
if (arg_count == 5) {
  return GetImageDataOperationOverload2(info);
}
if (arg_count == 4) {
  return GetImageDataOperationOverload1(info);
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "getImageData";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 4)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(4, info.Length()));
return;
}
exception_state.ThrowTypeError("Overload resolution failed.");
return;
}

void GetLineDashOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_getLineDash");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.getLineDash");







v8::Local<v8::Value> v8_return_value;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->getLineDash();
if (!ToV8Traits<IDLSequence<IDLUnrestrictedDouble>>::ToV8(script_state, return_value).ToLocal(&v8_return_value)) {
  return;
}
bindings::V8SetReturnValue(info, v8_return_value);
}

void GetTransformOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_getTransform");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.getTransform");







v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->getTransform();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void IsContextLostOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_isContextLost");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.isContextLost");







v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->isContextLost();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}

void IsPointInPathOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kOffscreenCanvasIsPointInPath);


if (UNLIKELY(info.Length() < 2)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "isPointInPath";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



bool return_value;
do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "isPointInPath";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
if (non_undefined_argument_length <= 2) {
  return_value = blink_receiver->isPointInPath(arg1_x, arg2_y);
break;
}
auto&& arg3_winding = NativeValueTraits<V8CanvasFillRule>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
return_value = blink_receiver->isPointInPath(arg1_x, arg2_y, arg3_winding);
} while (false);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
// [HighEntropy]
Dactyloscoper::Record(current_execution_context, WebFeature::kOffscreenCanvasIsPointInPath);
}

void IsPointInPathOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kOffscreenCanvasIsPointInPath);


if (UNLIKELY(info.Length() < 3)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "isPointInPath";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(3, info.Length()));
return;
}



bool return_value;
do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "isPointInPath";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_path = NativeValueTraits<Path2D>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
if (non_undefined_argument_length <= 3) {
  return_value = blink_receiver->isPointInPath(arg1_path, arg2_x, arg3_y);
break;
}
auto&& arg4_winding = NativeValueTraits<V8CanvasFillRule>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
return_value = blink_receiver->isPointInPath(arg1_path, arg2_x, arg3_y, arg4_winding);
} while (false);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
// [HighEntropy]
Dactyloscoper::Record(current_execution_context, WebFeature::kOffscreenCanvasIsPointInPath);
}

void IsPointInPathOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_isPointInPath");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.isPointInPath");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 4);
if (arg_count == 4) {
  return IsPointInPathOperationOverload2(info);
}
v8::Isolate* isolate = info.GetIsolate();
if (arg_count == 3) {
  if (V8Path2D::HasInstance(isolate, info[0])) {
  return IsPointInPathOperationOverload2(info);
}
if (info[0]->IsNumber()) {
  return IsPointInPathOperationOverload1(info);
}
return IsPointInPathOperationOverload1(info);
}
if (arg_count == 2) {
  return IsPointInPathOperationOverload1(info);
}

const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "isPointInPath";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}
exception_state.ThrowTypeError("Overload resolution failed.");
return;
}

void IsPointInStrokeOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kOffscreenCanvasIsPointInStroke);


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "isPointInStroke";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->isPointInStroke(arg1_x, arg2_y);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
// [HighEntropy]
Dactyloscoper::Record(current_execution_context, WebFeature::kOffscreenCanvasIsPointInStroke);
}

void IsPointInStrokeOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kOffscreenCanvasIsPointInStroke);


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "isPointInStroke";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 3)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(3, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_path = NativeValueTraits<Path2D>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->isPointInStroke(arg1_path, arg2_x, arg3_y);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
// [HighEntropy]
Dactyloscoper::Record(current_execution_context, WebFeature::kOffscreenCanvasIsPointInStroke);
}

void IsPointInStrokeOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_isPointInStroke");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.isPointInStroke");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 3);
if (arg_count == 3) {
  return IsPointInStrokeOperationOverload2(info);
}
if (arg_count == 2) {
  return IsPointInStrokeOperationOverload1(info);
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "isPointInStroke";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}
exception_state.ThrowTypeError("Overload resolution failed.");
return;
}

void LineToOperationNoAllocDirectCallArg2(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_x, double v8_arg2_y, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_x = v8_arg1_x;
auto&& arg2_y = v8_arg2_y;
blink_receiver->lineTo(arg1_x, arg2_y);
}

#if DCHECK_IS_ON()
void LineToOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "lineTo";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->lineTo(arg1_x, arg2_y);
});

}
#endif  // DCHECK_IS_ON()

void LineToOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_lineTo");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.lineTo");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "lineTo";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
LineToOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->lineTo(arg1_x, arg2_y);

}

void MeasureTextOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_measureText");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.measureText");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kOffscreenCanvasMeasureText);


if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "measureText";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
decltype(NativeValueTraits<IDLString>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_text;
if (LIKELY(info[0]->IsString())) {
  arg1_text.Init(info[0].As<v8::String>());
} else {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "measureText";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_text = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = blink_receiver->measureText(arg1_text);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
// [HighEntropy]
Dactyloscoper::Record(current_execution_context, WebFeature::kOffscreenCanvasMeasureText);
}

void MoveToOperationNoAllocDirectCallArg2(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_x, double v8_arg2_y, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_x = v8_arg1_x;
auto&& arg2_y = v8_arg2_y;
blink_receiver->moveTo(arg1_x, arg2_y);
}

#if DCHECK_IS_ON()
void MoveToOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "moveTo";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->moveTo(arg1_x, arg2_y);
});

}
#endif  // DCHECK_IS_ON()

void MoveToOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_moveTo");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.moveTo");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "moveTo";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
MoveToOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->moveTo(arg1_x, arg2_y);

}

void PutImageDataOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "putImageData";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 3)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(3, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_imagedata = NativeValueTraits<ImageData>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_dx = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_dy = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->putImageData(arg1_imagedata, arg2_dx, arg3_dy, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void PutImageDataOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "putImageData";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 7)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(7, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_imagedata = NativeValueTraits<ImageData>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_dx = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_dy = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_dirty_x = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_dirty_y = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg6_dirty_width = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg7_dirty_height = NativeValueTraits<IDLLongEnforceRange>::ArgumentValue(isolate, 6, info[6], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->putImageData(arg1_imagedata, arg2_dx, arg3_dy, arg4_dirty_x, arg5_dirty_y, arg6_dirty_width, arg7_dirty_height, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void PutImageDataOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_putImageData");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.putImageData");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 7);
if (arg_count == 7) {
  return PutImageDataOperationOverload2(info);
}
if (arg_count == 3) {
  return PutImageDataOperationOverload1(info);
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "putImageData";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 3)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(3, info.Length()));
return;
}
exception_state.ThrowTypeError("Overload resolution failed.");
return;
}

void QuadraticCurveToOperationNoAllocDirectCallArg4(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_cpx, double v8_arg2_cpy, double v8_arg3_x, double v8_arg4_y, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_cpx = v8_arg1_cpx;
auto&& arg2_cpy = v8_arg2_cpy;
auto&& arg3_x = v8_arg3_x;
auto&& arg4_y = v8_arg4_y;
blink_receiver->quadraticCurveTo(arg1_cpx, arg2_cpy, arg3_x, arg4_y);
}

#if DCHECK_IS_ON()
void QuadraticCurveToOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "quadraticCurveTo";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_cpx = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_cpy = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->quadraticCurveTo(arg1_cpx, arg2_cpy, arg3_x, arg4_y);
});

}
#endif  // DCHECK_IS_ON()

void QuadraticCurveToOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_quadraticCurveTo");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.quadraticCurveTo");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "quadraticCurveTo";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 4)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(4, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
QuadraticCurveToOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_cpx = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_cpy = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->quadraticCurveTo(arg1_cpx, arg2_cpy, arg3_x, arg4_y);

}

void RectOperationNoAllocDirectCallArg4(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_x, double v8_arg2_y, double v8_arg3_width, double v8_arg4_height, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_x = v8_arg1_x;
auto&& arg2_y = v8_arg2_y;
auto&& arg3_width = v8_arg3_width;
auto&& arg4_height = v8_arg4_height;
blink_receiver->rect(arg1_x, arg2_y, arg3_width, arg4_height);
}

#if DCHECK_IS_ON()
void RectOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "rect";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_width = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_height = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->rect(arg1_x, arg2_y, arg3_width, arg4_height);
});

}
#endif  // DCHECK_IS_ON()

void RectOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_rect");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.rect");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "rect";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 4)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(4, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
RectOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_width = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_height = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->rect(arg1_x, arg2_y, arg3_width, arg4_height);

}

void ResetOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_reset");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.reset");







v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink_receiver->reset();

}

void ResetTransformOperationNoAllocDirectCallArg0(v8::Local<v8::Object> v8_arg0_receiver, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

blink_receiver->resetTransform();
}

#if DCHECK_IS_ON()
void ResetTransformOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->resetTransform();
});

}
#endif  // DCHECK_IS_ON()

void ResetTransformOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_resetTransform");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.resetTransform");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}



#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::Isolate* isolate = info.GetIsolate();
v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
ResetTransformOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

blink_receiver->resetTransform();

}

void RestoreOperationNoAllocDirectCallArg0(v8::Local<v8::Object> v8_arg0_receiver, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

blink_receiver->restore();
}

#if DCHECK_IS_ON()
void RestoreOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->restore();
});

}
#endif  // DCHECK_IS_ON()

void RestoreOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_restore");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.restore");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}



#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::Isolate* isolate = info.GetIsolate();
v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
RestoreOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

blink_receiver->restore();

}

void RotateOperationNoAllocDirectCallArg1(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_angle, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_angle = v8_arg1_angle;
blink_receiver->rotate(arg1_angle);
}

#if DCHECK_IS_ON()
void RotateOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "rotate";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_angle = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->rotate(arg1_angle);
});

}
#endif  // DCHECK_IS_ON()

void RotateOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_rotate");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.rotate");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "rotate";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
RotateOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_angle = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->rotate(arg1_angle);

}

void RoundRectOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "roundRect";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 5)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(5, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_w = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_h = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_radii = NativeValueTraits<IDLSequence<V8UnionDOMPointInitOrUnrestrictedDouble>>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->roundRect(arg1_x, arg2_y, arg3_w, arg4_h, arg5_radii, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void RoundRectOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "roundRect";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 4)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(4, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_w = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_h = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<V8UnionDOMPointInitOrUnrestrictedDouble>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg5_radii;
if (info[4]->IsUndefined()) {
  arg5_radii = MakeGarbageCollected<V8UnionDOMPointInitOrUnrestrictedDouble>(0);
} else {
  arg5_radii = NativeValueTraits<V8UnionDOMPointInitOrUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
blink_receiver->roundRect(arg1_x, arg2_y, arg3_w, arg4_h, arg5_radii, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void RoundRectOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_roundRect");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.roundRect");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 5);
v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "roundRect";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (arg_count == 5) {
  if (info[4]->IsUndefined()) {
  return RoundRectOperationOverload2(info);
}
if (info[4]->IsNullOrUndefined()) {
  return RoundRectOperationOverload2(info);
}
if (info[4]->IsArray() || bindings::IsEsIterableObject(isolate, info[4], exception_state)) {
  return RoundRectOperationOverload1(info);
}
if (UNLIKELY(exception_state.HadException())) {
  return;
}
if (info[4]->IsObject()) {
  return RoundRectOperationOverload2(info);
}
if (info[4]->IsNumber()) {
  return RoundRectOperationOverload2(info);
}
return RoundRectOperationOverload2(info);
}
if (arg_count == 4) {
  return RoundRectOperationOverload2(info);
}

if (UNLIKELY(info.Length() < 4)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(4, info.Length()));
return;
}
exception_state.ThrowTypeError("Overload resolution failed.");
return;
}

void SaveOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_save");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.save");







v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink_receiver->save();

}

void ScaleOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_scale");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.scale");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "scale";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->scale(arg1_x, arg2_y);

}

void SetLineDashOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_setLineDash");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.setLineDash");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "setLineDash";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_dash = NativeValueTraits<IDLSequence<IDLUnrestrictedDouble>>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setLineDash(arg1_dash);

}

void SetTransformOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "setTransform";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 6)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(6, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_a = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_b = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_c = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_d = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_e = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg6_f = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setTransform(arg1_a, arg2_b, arg3_c, arg4_d, arg5_e, arg6_f);

}

void SetTransformOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  





v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
decltype(NativeValueTraits<DOMMatrixInit>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_transform;
v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "setTransform";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (info[0]->IsUndefined()) {
  arg1_transform = DOMMatrixInit::Create();
} else {
  arg1_transform = NativeValueTraits<DOMMatrixInit>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
blink_receiver->setTransform(arg1_transform, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void SetTransformOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_setTransform");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.setTransform");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 6);
if (arg_count == 6) {
  return SetTransformOperationOverload1(info);
}
if (arg_count == 1) {
  return SetTransformOperationOverload2(info);
}
return SetTransformOperationOverload2(info);
}

void StrokeOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  





v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink_receiver->stroke();

}

void StrokeOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "stroke";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_path = NativeValueTraits<Path2D>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->stroke(arg1_path);

}

void StrokeOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_stroke");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.stroke");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 1);
if (arg_count == 1) {
  return StrokeOperationOverload2(info);
}
return StrokeOperationOverload1(info);
}

void StrokeRectOperationNoAllocDirectCallArg4(v8::Local<v8::Object> v8_arg0_receiver, double v8_arg1_x, double v8_arg2_y, double v8_arg3_width, double v8_arg4_height, v8::FastApiCallbackOptions& v8_arg_callback_options) {
  ThreadState::NoAllocationScope thread_no_alloc_scope(ThreadState::Current());
v8::Local<v8::Object> v8_receiver = v8_arg0_receiver;
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
blink::NoAllocDirectCallScope no_alloc_direct_call_scope(blink_receiver, &v8_arg_callback_options);

auto&& arg1_x = v8_arg1_x;
auto&& arg2_y = v8_arg2_y;
auto&& arg3_width = v8_arg3_width;
auto&& arg4_height = v8_arg4_height;
blink_receiver->strokeRect(arg1_x, arg2_y, arg3_width, arg4_height);
}

#if DCHECK_IS_ON()
void StrokeRectOperationNoAllocDirectCallForTesting(const v8::FunctionCallbackInfo<v8::Value>& info, v8::FastApiCallbackOptions& v8_fast_api_callback_options) {
  v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "strokeRect";
NoAllocDirectCallExceptionState exception_state(blink_receiver, isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_width = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_height = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
({
ThreadState::NoAllocationScope nadc_no_allocation_scope(ThreadState::Current());
v8::Isolate::DisallowJavascriptExecutionScope nadc_disallow_js_exec_scope(isolate, v8::Isolate::DisallowJavascriptExecutionScope::CRASH_ON_FAILURE);
blink::NoAllocDirectCallScope nadc_nadc_scope(blink_receiver, &v8_fast_api_callback_options);
blink_receiver->strokeRect(arg1_x, arg2_y, arg3_width, arg4_height);
});

}
#endif  // DCHECK_IS_ON()

void StrokeRectOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_strokeRect");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.strokeRect");



// [NoAllocDirectCall]
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
if (UNLIKELY(blink_receiver->HasDeferredActions())) {
  blink_receiver->FlushDeferredActions();
return;
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "strokeRect";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 4)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(4, info.Length()));
return;
}


#if DCHECK_IS_ON()
// [NoAllocDirectCall]
if (RuntimeEnabledFeatures::FakeNoAllocDirectCallForTestingEnabled()) {
  v8::FastApiCallbackOptions v8_fast_api_callback_options = v8::FastApiCallbackOptions::CreateForTesting(isolate);
StrokeRectOperationNoAllocDirectCallForTesting(info, v8_fast_api_callback_options);
if (blink_receiver->HasDeferredActions()) {
  blink_receiver->FlushDeferredActions();
return;
}
if (!v8_fast_api_callback_options.fallback) {
  return;
}
}
#endif  // DCHECK_IS_ON()

auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_width = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_height = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->strokeRect(arg1_x, arg2_y, arg3_width, arg4_height);

}

void StrokeTextOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_strokeText");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.strokeText");




if (UNLIKELY(info.Length() < 3)) {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "strokeText";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(3, info.Length()));
return;
}



do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "strokeText";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_text = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
if (non_undefined_argument_length <= 3) {
  blink_receiver->strokeText(arg1_text, arg2_x, arg3_y);
break;
}
auto&& arg4_max_width = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->strokeText(arg1_text, arg2_x, arg3_y, arg4_max_width);
} while (false);

}

void TransformOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_transform");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.transform");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "transform";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 6)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(6, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_a = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_b = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_c = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_d = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_e = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg6_f = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->transform(arg1_a, arg2_b, arg3_c, arg4_d, arg5_e, arg6_f);

}

void TranslateOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_OffscreenCanvasRenderingContext2D_translate");
BLINK_BINDINGS_TRACE_EVENT("OffscreenCanvasRenderingContext2D.translate");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "OffscreenCanvasRenderingContext2D";
const char* const property_name = "translate";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
OffscreenCanvasRenderingContext2D* blink_receiver = V8OffscreenCanvasRenderingContext2D::ToWrappableUnsafe(v8_receiver);
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->translate(arg1_x, arg2_y);

}


}  // namespace v8_offscreen_canvas_rendering_context_2d

using namespace v8_offscreen_canvas_rendering_context_2d;

}  // namespace 

void V8OffscreenCanvasRenderingContext2D::InstallInterfaceTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> interface_template) {
  const WrapperTypeInfo* const wrapper_type_info = V8OffscreenCanvasRenderingContext2D::GetWrapperTypeInfo();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::ObjectTemplate> instance_object_template = interface_function_template->InstanceTemplate();
v8::Local<v8::ObjectTemplate> prototype_object_template = interface_function_template->PrototypeTemplate();
v8::Local<v8::FunctionTemplate> parent_interface_template;
bindings::SetupIDLInterfaceTemplate(isolate, wrapper_type_info, instance_object_template, prototype_object_template, interface_function_template, parent_interface_template);








v8::Local<v8::Template> instance_template = instance_object_template;
v8::Local<v8::Template> prototype_template = prototype_object_template;
InstallUnconditionalProperties(isolate, world, instance_template, prototype_template, interface_template);
InstallContextIndependentProperties(isolate, world, instance_template, prototype_template, interface_template);
}

void V8OffscreenCanvasRenderingContext2D::InstallUnconditionalProperties(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> instance_template, v8::Local<v8::Template> prototype_template, v8::Local<v8::Template> interface_template) {
  using bindings::IDLMemberInstaller;

v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
{
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"canvas", CanvasAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"globalAlpha", GlobalAlphaAttributeGetCallback, GlobalAlphaAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"globalCompositeOperation", GlobalCompositeOperationAttributeGetCallback, GlobalCompositeOperationAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"filter", FilterAttributeGetCallback, FilterAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"imageSmoothingEnabled", ImageSmoothingEnabledAttributeGetCallback, ImageSmoothingEnabledAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"imageSmoothingQuality", ImageSmoothingQualityAttributeGetCallback, ImageSmoothingQualityAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"strokeStyle", StrokeStyleAttributeGetCallback, StrokeStyleAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"fillStyle", FillStyleAttributeGetCallback, FillStyleAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"shadowOffsetX", ShadowOffsetXAttributeGetCallback, ShadowOffsetXAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"shadowOffsetY", ShadowOffsetYAttributeGetCallback, ShadowOffsetYAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"shadowBlur", ShadowBlurAttributeGetCallback, ShadowBlurAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"shadowColor", ShadowColorAttributeGetCallback, ShadowColorAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"lineWidth", LineWidthAttributeGetCallback, LineWidthAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"lineCap", LineCapAttributeGetCallback, LineCapAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"lineJoin", LineJoinAttributeGetCallback, LineJoinAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"miterLimit", MiterLimitAttributeGetCallback, MiterLimitAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"lineDashOffset", LineDashOffsetAttributeGetCallback, LineDashOffsetAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"font", FontAttributeGetCallback, FontAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"textAlign", TextAlignAttributeGetCallback, TextAlignAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"textBaseline", TextBaselineAttributeGetCallback, TextBaselineAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"direction", DirectionAttributeGetCallback, DirectionAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"fontKerning", FontKerningAttributeGetCallback, FontKerningAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"fontStretch", FontStretchAttributeGetCallback, FontStretchAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"fontVariantCaps", FontVariantCapsAttributeGetCallback, FontVariantCapsAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"letterSpacing", LetterSpacingAttributeGetCallback, LetterSpacingAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"textRendering", TextRenderingAttributeGetCallback, TextRenderingAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"wordSpacing", WordSpacingAttributeGetCallback, WordSpacingAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}





{
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"clip", ClipOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"createConicGradient", CreateConicGradientOperationCallback, 3, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"createImageData", CreateImageDataOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"createLinearGradient", CreateLinearGradientOperationCallback, 4, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"createPattern", CreatePatternOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"createRadialGradient", CreateRadialGradientOperationCallback, 6, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"drawImage", DrawImageOperationCallback, 3, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"fill", FillOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"fillText", FillTextOperationCallback, 3, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"getImageData", GetImageDataOperationCallback, 4, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"getLineDash", GetLineDashOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"getTransform", GetTransformOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"isContextLost", IsContextLostOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"isPointInPath", IsPointInPathOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"isPointInStroke", IsPointInStrokeOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"measureText", MeasureTextOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"putImageData", PutImageDataOperationCallback, 3, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"reset", ResetOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"roundRect", RoundRectOperationCallback, 4, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"save", SaveOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"scale", ScaleOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"setLineDash", SetLineDashOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"setTransform", SetTransformOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"stroke", StrokeOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"strokeText", StrokeTextOperationCallback, 3, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"transform", TransformOperationCallback, 6, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"translate", TranslateOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
IDLMemberInstaller::InstallOperations(isolate, world, instance_template, prototype_template, interface_template, signature, kOperationTable);
}


{
  static const v8::CFunction kNoAllocDirectCallOverloadsOfArc[] = {
v8::CFunctionBuilder().Fn(ArcOperationNoAllocDirectCallArg6).Build(),
v8::CFunctionBuilder().Fn(ArcOperationNoAllocDirectCallArg5).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfArcTo[] = {
v8::CFunctionBuilder().Fn(ArcToOperationNoAllocDirectCallArg5).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfBeginPath[] = {
v8::CFunctionBuilder().Fn(BeginPathOperationNoAllocDirectCallArg0).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfBezierCurveTo[] = {
v8::CFunctionBuilder().Fn(BezierCurveToOperationNoAllocDirectCallArg6).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfClearRect[] = {
v8::CFunctionBuilder().Fn(ClearRectOperationNoAllocDirectCallArg4).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfClosePath[] = {
v8::CFunctionBuilder().Fn(ClosePathOperationNoAllocDirectCallArg0).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfEllipse[] = {
v8::CFunctionBuilder().Fn(EllipseOperationNoAllocDirectCallArg8).Build(),
v8::CFunctionBuilder().Fn(EllipseOperationNoAllocDirectCallArg7).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfFillRect[] = {
v8::CFunctionBuilder().Fn(FillRectOperationNoAllocDirectCallArg4).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfLineTo[] = {
v8::CFunctionBuilder().Fn(LineToOperationNoAllocDirectCallArg2).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfMoveTo[] = {
v8::CFunctionBuilder().Fn(MoveToOperationNoAllocDirectCallArg2).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfQuadraticCurveTo[] = {
v8::CFunctionBuilder().Fn(QuadraticCurveToOperationNoAllocDirectCallArg4).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfRect[] = {
v8::CFunctionBuilder().Fn(RectOperationNoAllocDirectCallArg4).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfResetTransform[] = {
v8::CFunctionBuilder().Fn(ResetTransformOperationNoAllocDirectCallArg0).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfRestore[] = {
v8::CFunctionBuilder().Fn(RestoreOperationNoAllocDirectCallArg0).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfRotate[] = {
v8::CFunctionBuilder().Fn(RotateOperationNoAllocDirectCallArg1).Build(),
};
static const v8::CFunction kNoAllocDirectCallOverloadsOfStrokeRect[] = {
v8::CFunctionBuilder().Fn(StrokeRectOperationNoAllocDirectCallArg4).Build(),
};

static const IDLMemberInstaller::NoAllocDirectCallOperationConfig kOperationTable[] = {
{{"arc", ArcOperationCallback, 5, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfArc, std::size(kNoAllocDirectCallOverloadsOfArc)}, 
{{"arcTo", ArcToOperationCallback, 5, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfArcTo, std::size(kNoAllocDirectCallOverloadsOfArcTo)}, 
{{"beginPath", BeginPathOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfBeginPath, std::size(kNoAllocDirectCallOverloadsOfBeginPath)}, 
{{"bezierCurveTo", BezierCurveToOperationCallback, 6, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfBezierCurveTo, std::size(kNoAllocDirectCallOverloadsOfBezierCurveTo)}, 
{{"clearRect", ClearRectOperationCallback, 4, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfClearRect, std::size(kNoAllocDirectCallOverloadsOfClearRect)}, 
{{"closePath", ClosePathOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfClosePath, std::size(kNoAllocDirectCallOverloadsOfClosePath)}, 
{{"ellipse", EllipseOperationCallback, 7, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfEllipse, std::size(kNoAllocDirectCallOverloadsOfEllipse)}, 
{{"fillRect", FillRectOperationCallback, 4, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfFillRect, std::size(kNoAllocDirectCallOverloadsOfFillRect)}, 
{{"lineTo", LineToOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfLineTo, std::size(kNoAllocDirectCallOverloadsOfLineTo)}, 
{{"moveTo", MoveToOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfMoveTo, std::size(kNoAllocDirectCallOverloadsOfMoveTo)}, 
{{"quadraticCurveTo", QuadraticCurveToOperationCallback, 4, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfQuadraticCurveTo, std::size(kNoAllocDirectCallOverloadsOfQuadraticCurveTo)}, 
{{"rect", RectOperationCallback, 4, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfRect, std::size(kNoAllocDirectCallOverloadsOfRect)}, 
{{"resetTransform", ResetTransformOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfResetTransform, std::size(kNoAllocDirectCallOverloadsOfResetTransform)}, 
{{"restore", RestoreOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfRestore, std::size(kNoAllocDirectCallOverloadsOfRestore)}, 
{{"rotate", RotateOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfRotate, std::size(kNoAllocDirectCallOverloadsOfRotate)}, 
{{"strokeRect", StrokeRectOperationCallback, 4, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, kNoAllocDirectCallOverloadsOfStrokeRect, std::size(kNoAllocDirectCallOverloadsOfStrokeRect)}, 
};
IDLMemberInstaller::InstallOperations(isolate, world, instance_template, prototype_template, interface_template, signature, kOperationTable);
}


}

void V8OffscreenCanvasRenderingContext2D::InstallContextIndependentProperties(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> instance_template, v8::Local<v8::Template> prototype_template, v8::Local<v8::Template> interface_template) {
  using bindings::IDLMemberInstaller;





if (RuntimeEnabledFeatures::Canvas2dLayersEnabled()) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"beginLayer", BeginLayerOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"endLayer", EndLayerOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_template, prototype_template, interface_template, signature, kOperationTable);
}
if (RuntimeEnabledFeatures::OffscreenCanvasCommitEnabled()) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"commit", CommitOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_template, prototype_template, interface_template, signature, kOperationTable);
}


}



}  // namespace blink
