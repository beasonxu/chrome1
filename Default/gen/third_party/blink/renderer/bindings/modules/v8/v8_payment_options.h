// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PAYMENT_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PAYMENT_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_payment_shipping_type.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT PaymentOptions : public bindings::DictionaryBase {
  
  public:
static PaymentOptions* Create() {
  return MakeGarbageCollected<PaymentOptions>();
}
static PaymentOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<PaymentOptions>(isolate);
}
static PaymentOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  PaymentOptions();
explicit  PaymentOptions(v8::Isolate* isolate);

bool hasRequestPayerEmail() const {
  return true;
}
bool requestPayerEmail() const {
  return member_request_payer_email_;
}
void setRequestPayerEmail(bool value) {
  member_request_payer_email_ = value;
}

bool hasRequestPayerName() const {
  return true;
}
bool requestPayerName() const {
  return member_request_payer_name_;
}
void setRequestPayerName(bool value) {
  member_request_payer_name_ = value;
}

bool hasRequestPayerPhone() const {
  return true;
}
bool requestPayerPhone() const {
  return member_request_payer_phone_;
}
void setRequestPayerPhone(bool value) {
  member_request_payer_phone_ = value;
}

bool hasRequestShipping() const {
  return true;
}
bool requestShipping() const {
  return member_request_shipping_;
}
void setRequestShipping(bool value) {
  member_request_shipping_ = value;
}

bool hasShippingType() const {
  return true;
}
V8PaymentShippingType shippingType() const {
  return member_shipping_type_;
}
void setShippingType(V8PaymentShippingType value) {
  member_shipping_type_ = value;
}
void setShippingType(V8PaymentShippingType::Enum value) {
  member_shipping_type_ = V8PaymentShippingType(value);
}


// Obsolete accessor functions
void setShippingType(const String& value) {
  member_shipping_type_ = V8PaymentShippingType::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



bool member_request_payer_email_{false};
bool member_request_payer_name_{false};
bool member_request_payer_phone_{false};
bool member_request_shipping_{false};
V8PaymentShippingType member_shipping_type_{V8PaymentShippingType::Enum::kShipping};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PAYMENT_OPTIONS_H_
