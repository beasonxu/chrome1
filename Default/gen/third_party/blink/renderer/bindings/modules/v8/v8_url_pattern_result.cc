// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_url_pattern_result.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_union_urlpatterninit_usvstring.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_url_pattern_component_result.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_url_pattern_init.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



URLPatternResult* URLPatternResult::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  URLPatternResult* dictionary = MakeGarbageCollected<URLPatternResult>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "URLPatternResult";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 URLPatternResult::URLPatternResult() {
  
}

 URLPatternResult::URLPatternResult(v8::Isolate* isolate) {
  
}

















HeapVector<Member<V8UnionURLPatternInitOrUSVString>> URLPatternResult::getInputsOr(const HeapVector<Member<V8UnionURLPatternInitOrUSVString>>& fallback_value) const {
  if (!hasInputs()) {
  return fallback_value;
}
return member_inputs_;
}

HeapVector<Member<V8UnionURLPatternInitOrUSVString>> URLPatternResult::getInputsOr(HeapVector<Member<V8UnionURLPatternInitOrUSVString>>&& fallback_value) const {
  if (!hasInputs()) {
  return std::move(fallback_value);
}
return member_inputs_;
}

void URLPatternResult::setInputs(const HeapVector<Member<V8UnionURLPatternInitOrUSVString>>& value) {
  member_inputs_ = value;
has_inputs_ = true;
}

void URLPatternResult::setInputs(HeapVector<Member<V8UnionURLPatternInitOrUSVString>>&& value) {
  member_inputs_ = std::move(value);
has_inputs_ = true;
}














































void URLPatternResult::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<URLPatternComponentResult>>::Trace(visitor, member_hash_);
TraceIfNeeded<Member<URLPatternComponentResult>>::Trace(visitor, member_hostname_);
TraceIfNeeded<HeapVector<Member<V8UnionURLPatternInitOrUSVString>>>::Trace(visitor, member_inputs_);
TraceIfNeeded<Member<URLPatternComponentResult>>::Trace(visitor, member_password_);
TraceIfNeeded<Member<URLPatternComponentResult>>::Trace(visitor, member_pathname_);
TraceIfNeeded<Member<URLPatternComponentResult>>::Trace(visitor, member_port_);
TraceIfNeeded<Member<URLPatternComponentResult>>::Trace(visitor, member_protocol_);
TraceIfNeeded<Member<URLPatternComponentResult>>::Trace(visitor, member_search_);
TraceIfNeeded<Member<URLPatternComponentResult>>::Trace(visitor, member_username_);
bindings::DictionaryBase::Trace(visitor);
}

bool URLPatternResult::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasHash()) {
  if (!ToV8Traits<URLPatternComponentResult>::ToV8(script_state, member_hash_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasHostname()) {
  if (!ToV8Traits<URLPatternComponentResult>::ToV8(script_state, member_hostname_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasInputs()) {
  if (!ToV8Traits<IDLSequence<V8UnionURLPatternInitOrUSVString>>::ToV8(script_state, member_inputs_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPassword()) {
  if (!ToV8Traits<URLPatternComponentResult>::ToV8(script_state, member_password_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPathname()) {
  if (!ToV8Traits<URLPatternComponentResult>::ToV8(script_state, member_pathname_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPort()) {
  if (!ToV8Traits<URLPatternComponentResult>::ToV8(script_state, member_port_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasProtocol()) {
  if (!ToV8Traits<URLPatternComponentResult>::ToV8(script_state, member_protocol_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSearch()) {
  if (!ToV8Traits<URLPatternComponentResult>::ToV8(script_state, member_search_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUsername()) {
  if (!ToV8Traits<URLPatternComponentResult>::ToV8(script_state, member_username_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void URLPatternResult::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "URLPatternResult";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("hash");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<URLPatternComponentResult, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_hash_, member_hash_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("hostname");
if (!bindings::GetDictionaryMemberFromV8Object<URLPatternComponentResult, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_hostname_, member_hostname_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("inputs");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<V8UnionURLPatternInitOrUSVString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_inputs_, member_inputs_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("password");
if (!bindings::GetDictionaryMemberFromV8Object<URLPatternComponentResult, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_password_, member_password_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("pathname");
if (!bindings::GetDictionaryMemberFromV8Object<URLPatternComponentResult, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_pathname_, member_pathname_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("port");
if (!bindings::GetDictionaryMemberFromV8Object<URLPatternComponentResult, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_port_, member_port_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("protocol");
if (!bindings::GetDictionaryMemberFromV8Object<URLPatternComponentResult, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_protocol_, member_protocol_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("search");
if (!bindings::GetDictionaryMemberFromV8Object<URLPatternComponentResult, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_search_, member_search_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("username");
if (!bindings::GetDictionaryMemberFromV8Object<URLPatternComponentResult, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), has_username_, member_username_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> URLPatternResult::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"hash",
"hostname",
"inputs",
"password",
"pathname",
"port",
"protocol",
"search",
"username",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
