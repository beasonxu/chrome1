// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_union_encodedaudiochunk_encodedaudiochunkorencodedvideochunksequence_encodedvideochunk.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_encoded_audio_chunk.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_encoded_video_chunk.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_union_encodedaudiochunk_encodedvideochunk.h"
#include "third_party/blink/renderer/modules/webcodecs/encoded_audio_chunk.h"
#include "third_party/blink/renderer/modules/webcodecs/encoded_video_chunk.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"

namespace blink {



V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk* V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  if (V8EncodedVideoChunk::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8EncodedVideoChunk::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk>(blink_value);
}
if (V8EncodedAudioChunk::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8EncodedAudioChunk::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk>(blink_value);
}
if (v8_value->IsArray()) {
  auto&& blink_value = NativeValueTraits<IDLSequence<V8UnionEncodedAudioChunkOrEncodedVideoChunk>>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk>(std::move(blink_value));
}
if (v8_value->IsObject()) {
  ScriptIterator script_iterator = ScriptIterator::FromIterable(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
if (!script_iterator.IsNull()) {
  auto&& blink_value = bindings::CreateIDLSequenceFromIterator<V8UnionEncodedAudioChunkOrEncodedVideoChunk>(isolate, std::move(script_iterator), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk>(std::move(blink_value));
}
}
ThrowTypeErrorNotOfType(exception_state, UnionNameInIDL());
return nullptr;
}

 V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk::V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk(const HeapVector<Member<V8UnionEncodedAudioChunkOrEncodedVideoChunk>>& value) : content_type_(ContentType::kEncodedAudioChunkOrEncodedVideoChunkSequence), member_encoded_audio_chunk_or_encoded_video_chunk_sequence_(value) {
  
}

 V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk::V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk(HeapVector<Member<V8UnionEncodedAudioChunkOrEncodedVideoChunk>>&& value) : content_type_(ContentType::kEncodedAudioChunkOrEncodedVideoChunkSequence), member_encoded_audio_chunk_or_encoded_video_chunk_sequence_(std::move(value)) {
  
}







void V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk::Set(const HeapVector<Member<V8UnionEncodedAudioChunkOrEncodedVideoChunk>>& value) {
  Clear();
member_encoded_audio_chunk_or_encoded_video_chunk_sequence_ = value;
content_type_ = ContentType::kEncodedAudioChunkOrEncodedVideoChunkSequence;
}

void V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk::Set(HeapVector<Member<V8UnionEncodedAudioChunkOrEncodedVideoChunk>>&& value) {
  Clear();
member_encoded_audio_chunk_or_encoded_video_chunk_sequence_ = std::move(value);
content_type_ = ContentType::kEncodedAudioChunkOrEncodedVideoChunkSequence;
}





V8UnionEncodedAudioChunkOrEncodedVideoChunk* V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk::GetAsV8UnionEncodedAudioChunkOrEncodedVideoChunk() const {
  switch (content_type_) {
  case ContentType::kEncodedAudioChunk: {
    return MakeGarbageCollected<V8UnionEncodedAudioChunkOrEncodedVideoChunk>(GetAsEncodedAudioChunk());
  }
  case ContentType::kEncodedVideoChunk: {
    return MakeGarbageCollected<V8UnionEncodedAudioChunkOrEncodedVideoChunk>(GetAsEncodedVideoChunk());
  }
  default: {
    NOTREACHED();
return nullptr;
  }
}
}

void V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk::Set(const V8UnionEncodedAudioChunkOrEncodedVideoChunk* value) {
  switch (value->GetContentType()) {
  case V8UnionEncodedAudioChunkOrEncodedVideoChunk::ContentType::kEncodedAudioChunk: {
    Set(value->GetAsEncodedAudioChunk());
    break;
  }
  case V8UnionEncodedAudioChunkOrEncodedVideoChunk::ContentType::kEncodedVideoChunk: {
    Set(value->GetAsEncodedVideoChunk());
    break;
  }
}
}


v8::MaybeLocal<v8::Value> V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk::ToV8Value(ScriptState* script_state) const {
  switch (content_type_) {
  case ContentType::kEncodedAudioChunk: {
    return ToV8Traits<EncodedAudioChunk>::ToV8(script_state, member_encoded_audio_chunk_);
  }
  case ContentType::kEncodedAudioChunkOrEncodedVideoChunkSequence: {
    return ToV8Traits<IDLSequence<V8UnionEncodedAudioChunkOrEncodedVideoChunk>>::ToV8(script_state, member_encoded_audio_chunk_or_encoded_video_chunk_sequence_);
  }
  case ContentType::kEncodedVideoChunk: {
    return ToV8Traits<EncodedVideoChunk>::ToV8(script_state, member_encoded_video_chunk_);
  }
}

NOTREACHED();
return v8::MaybeLocal<v8::Value>();
}

void V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<EncodedAudioChunk>>::Trace(visitor, member_encoded_audio_chunk_);
TraceIfNeeded<HeapVector<Member<V8UnionEncodedAudioChunkOrEncodedVideoChunk>>>::Trace(visitor, member_encoded_audio_chunk_or_encoded_video_chunk_sequence_);
TraceIfNeeded<Member<EncodedVideoChunk>>::Trace(visitor, member_encoded_video_chunk_);
bindings::UnionBase::Trace(visitor);
}

void V8UnionEncodedAudioChunkOrEncodedAudioChunkOrEncodedVideoChunkSequenceOrEncodedVideoChunk::Clear() {
  member_encoded_audio_chunk_.Clear();
member_encoded_audio_chunk_or_encoded_video_chunk_sequence_.clear();
member_encoded_video_chunk_.Clear();
}



}  // namespace blink
