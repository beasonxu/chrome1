// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_webcodecs_texture_info.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/modules/webgl/webgl_texture.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



WebGLWebCodecsTextureInfo* WebGLWebCodecsTextureInfo::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  WebGLWebCodecsTextureInfo* dictionary = MakeGarbageCollected<WebGLWebCodecsTextureInfo>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "WebGLWebCodecsTextureInfo";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 WebGLWebCodecsTextureInfo::WebGLWebCodecsTextureInfo() {
  
}

 WebGLWebCodecsTextureInfo::WebGLWebCodecsTextureInfo(v8::Isolate* isolate) {
  
}



String WebGLWebCodecsTextureInfo::getComponentsOr(const String& fallback_value) const {
  if (!hasComponents()) {
  return fallback_value;
}
return member_components_;
}

String WebGLWebCodecsTextureInfo::getComponentsOr(String&& fallback_value) const {
  if (!hasComponents()) {
  return std::move(fallback_value);
}
return member_components_;
}

void WebGLWebCodecsTextureInfo::setComponents(const String& value) {
  member_components_ = value;
has_components_ = true;
}

void WebGLWebCodecsTextureInfo::setComponents(String&& value) {
  member_components_ = std::move(value);
has_components_ = true;
}




String WebGLWebCodecsTextureInfo::getSamplerFuncOr(const String& fallback_value) const {
  if (!hasSamplerFunc()) {
  return fallback_value;
}
return member_sampler_func_;
}

String WebGLWebCodecsTextureInfo::getSamplerFuncOr(String&& fallback_value) const {
  if (!hasSamplerFunc()) {
  return std::move(fallback_value);
}
return member_sampler_func_;
}

void WebGLWebCodecsTextureInfo::setSamplerFunc(const String& value) {
  member_sampler_func_ = value;
has_sampler_func_ = true;
}

void WebGLWebCodecsTextureInfo::setSamplerFunc(String&& value) {
  member_sampler_func_ = std::move(value);
has_sampler_func_ = true;
}




String WebGLWebCodecsTextureInfo::getSamplerTypeOr(const String& fallback_value) const {
  if (!hasSamplerType()) {
  return fallback_value;
}
return member_sampler_type_;
}

String WebGLWebCodecsTextureInfo::getSamplerTypeOr(String&& fallback_value) const {
  if (!hasSamplerType()) {
  return std::move(fallback_value);
}
return member_sampler_type_;
}

void WebGLWebCodecsTextureInfo::setSamplerType(const String& value) {
  member_sampler_type_ = value;
has_sampler_type_ = true;
}

void WebGLWebCodecsTextureInfo::setSamplerType(String&& value) {
  member_sampler_type_ = std::move(value);
has_sampler_type_ = true;
}


















void WebGLWebCodecsTextureInfo::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_components_);
TraceIfNeeded<String>::Trace(visitor, member_sampler_func_);
TraceIfNeeded<String>::Trace(visitor, member_sampler_type_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_target_);
TraceIfNeeded<Member<WebGLTexture>>::Trace(visitor, member_texture_);
bindings::DictionaryBase::Trace(visitor);
}

bool WebGLWebCodecsTextureInfo::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasComponents()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_components_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSamplerFunc()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_sampler_func_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSamplerType()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_sampler_type_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTarget()) {
  if (!ToV8Traits<IDLUnsignedLong>::ToV8(script_state, member_target_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTexture()) {
  if (!ToV8Traits<WebGLTexture>::ToV8(script_state, member_texture_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void WebGLWebCodecsTextureInfo::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "WebGLWebCodecsTextureInfo";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("components");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_components_, member_components_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("samplerFunc");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_sampler_func_, member_sampler_func_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("samplerType");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_sampler_type_, member_sampler_type_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("target");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_target_, member_target_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("texture");
if (!bindings::GetDictionaryMemberFromV8Object<WebGLTexture, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_texture_, member_texture_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> WebGLWebCodecsTextureInfo::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"components",
"samplerFunc",
"samplerType",
"target",
"texture",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
