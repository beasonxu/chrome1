// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_render_pass_color_attachment.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_color_dict.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_union_doublesequence_gpucolordict.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_union_doublesequence_gpucolordict_gpuloadop.h"
#include "third_party/blink/renderer/modules/webgpu/gpu_texture_view.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



GPURenderPassColorAttachment* GPURenderPassColorAttachment::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  GPURenderPassColorAttachment* dictionary = MakeGarbageCollected<GPURenderPassColorAttachment>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "GPURenderPassColorAttachment";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 GPURenderPassColorAttachment::GPURenderPassColorAttachment() {
  
}

 GPURenderPassColorAttachment::GPURenderPassColorAttachment(v8::Isolate* isolate) {
  
}











































void GPURenderPassColorAttachment::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<V8UnionDoubleSequenceOrGPUColorDict>>::Trace(visitor, member_clear_value_);
TraceIfNeeded<V8GPULoadOp>::Trace(visitor, member_load_op_);
TraceIfNeeded<Member<V8UnionDoubleSequenceOrGPUColorDictOrGPULoadOp>>::Trace(visitor, member_load_value_);
TraceIfNeeded<Member<GPUTextureView>>::Trace(visitor, member_resolve_target_);
TraceIfNeeded<V8GPUStoreOp>::Trace(visitor, member_store_op_);
TraceIfNeeded<Member<GPUTextureView>>::Trace(visitor, member_view_);
bindings::DictionaryBase::Trace(visitor);
}

bool GPURenderPassColorAttachment::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasClearValue()) {
  if (!ToV8Traits<V8UnionDoubleSequenceOrGPUColorDict>::ToV8(script_state, member_clear_value_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLoadOp()) {
  if (!ToV8Traits<V8GPULoadOp>::ToV8(script_state, member_load_op_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLoadValue()) {
  if (!ToV8Traits<V8UnionDoubleSequenceOrGPUColorDictOrGPULoadOp>::ToV8(script_state, member_load_value_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasResolveTarget()) {
  if (!ToV8Traits<GPUTextureView>::ToV8(script_state, member_resolve_target_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStoreOp()) {
  if (!ToV8Traits<V8GPUStoreOp>::ToV8(script_state, member_store_op_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasView()) {
  if (!ToV8Traits<GPUTextureView>::ToV8(script_state, member_view_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void GPURenderPassColorAttachment::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "GPURenderPassColorAttachment";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("clearValue");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionDoubleSequenceOrGPUColorDict, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_clear_value_, member_clear_value_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("loadOp");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPULoadOp, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_load_op_, member_load_op_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("loadValue");
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionDoubleSequenceOrGPUColorDictOrGPULoadOp, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_load_value_, member_load_value_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("resolveTarget");
if (!bindings::GetDictionaryMemberFromV8Object<GPUTextureView, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_resolve_target_, member_resolve_target_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("storeOp");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUStoreOp, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_store_op_, member_store_op_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("view");
constexpr bool is_required = true;
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<GPUTextureView, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_view_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> GPURenderPassColorAttachment::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"clearValue",
"loadOp",
"loadValue",
"resolveTarget",
"storeOp",
"view",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
