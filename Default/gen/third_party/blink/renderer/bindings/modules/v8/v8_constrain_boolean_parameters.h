// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_CONSTRAIN_BOOLEAN_PARAMETERS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_CONSTRAIN_BOOLEAN_PARAMETERS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT ConstrainBooleanParameters : public bindings::DictionaryBase {
  
  public:
static ConstrainBooleanParameters* Create() {
  return MakeGarbageCollected<ConstrainBooleanParameters>();
}
static ConstrainBooleanParameters* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<ConstrainBooleanParameters>(isolate);
}
static ConstrainBooleanParameters* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  ConstrainBooleanParameters();
explicit  ConstrainBooleanParameters(v8::Isolate* isolate);

bool hasExact() const {
  return has_exact_;
}
bool exact() const {
  DCHECK(hasExact());
return member_exact_;
}
bool getExactOr(bool fallback_value) const {
  if (!hasExact()) {
  return fallback_value;
}
return member_exact_;
}
void setExact(bool value) {
  member_exact_ = value;
has_exact_ = true;
}

bool hasIdeal() const {
  return has_ideal_;
}
bool ideal() const {
  DCHECK(hasIdeal());
return member_ideal_;
}
bool getIdealOr(bool fallback_value) const {
  if (!hasIdeal()) {
  return fallback_value;
}
return member_ideal_;
}
void setIdeal(bool value) {
  member_ideal_ = value;
has_ideal_ = true;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_exact_ = false;
bool has_ideal_ = false;

bool member_exact_;
bool member_ideal_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_CONSTRAIN_BOOLEAN_PARAMETERS_H_
