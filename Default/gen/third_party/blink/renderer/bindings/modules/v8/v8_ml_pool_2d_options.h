// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ML_POOL_2D_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ML_POOL_2D_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_auto_pad.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_input_operand_layout.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_rounding_type.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT MLPool2dOptions : public bindings::DictionaryBase {
  
  public:
static MLPool2dOptions* Create() {
  return MakeGarbageCollected<MLPool2dOptions>();
}
static MLPool2dOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<MLPool2dOptions>(isolate);
}
static MLPool2dOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  MLPool2dOptions();
explicit  MLPool2dOptions(v8::Isolate* isolate);

bool hasAutoPad() const {
  return true;
}
V8MLAutoPad autoPad() const {
  return member_auto_pad_;
}
void setAutoPad(V8MLAutoPad value) {
  member_auto_pad_ = value;
}
void setAutoPad(V8MLAutoPad::Enum value) {
  member_auto_pad_ = V8MLAutoPad(value);
}

bool hasDilations() const {
  return has_dilations_;
}
const Vector<int32_t>& dilations() const {
  DCHECK(hasDilations());
return member_dilations_;
}
Vector<int32_t> getDilationsOr(const Vector<int32_t>& fallback_value) const;
Vector<int32_t> getDilationsOr(Vector<int32_t>&& fallback_value) const;
void setDilations(const Vector<int32_t>& value);
void setDilations(Vector<int32_t>&& value);

bool hasLayout() const {
  return true;
}
V8MLInputOperandLayout layout() const {
  return member_layout_;
}
void setLayout(V8MLInputOperandLayout value) {
  member_layout_ = value;
}
void setLayout(V8MLInputOperandLayout::Enum value) {
  member_layout_ = V8MLInputOperandLayout(value);
}

bool hasOutputSizes() const {
  return has_output_sizes_;
}
const Vector<int32_t>& outputSizes() const {
  DCHECK(hasOutputSizes());
return member_output_sizes_;
}
Vector<int32_t> getOutputSizesOr(const Vector<int32_t>& fallback_value) const;
Vector<int32_t> getOutputSizesOr(Vector<int32_t>&& fallback_value) const;
void setOutputSizes(const Vector<int32_t>& value);
void setOutputSizes(Vector<int32_t>&& value);

bool hasPadding() const {
  return has_padding_;
}
const Vector<int32_t>& padding() const {
  DCHECK(hasPadding());
return member_padding_;
}
Vector<int32_t> getPaddingOr(const Vector<int32_t>& fallback_value) const;
Vector<int32_t> getPaddingOr(Vector<int32_t>&& fallback_value) const;
void setPadding(const Vector<int32_t>& value);
void setPadding(Vector<int32_t>&& value);

bool hasRoundingType() const {
  return true;
}
V8MLRoundingType roundingType() const {
  return member_rounding_type_;
}
void setRoundingType(V8MLRoundingType value) {
  member_rounding_type_ = value;
}
void setRoundingType(V8MLRoundingType::Enum value) {
  member_rounding_type_ = V8MLRoundingType(value);
}

bool hasStrides() const {
  return has_strides_;
}
const Vector<int32_t>& strides() const {
  DCHECK(hasStrides());
return member_strides_;
}
Vector<int32_t> getStridesOr(const Vector<int32_t>& fallback_value) const;
Vector<int32_t> getStridesOr(Vector<int32_t>&& fallback_value) const;
void setStrides(const Vector<int32_t>& value);
void setStrides(Vector<int32_t>&& value);

bool hasWindowDimensions() const {
  return has_window_dimensions_;
}
const Vector<int32_t>& windowDimensions() const {
  DCHECK(hasWindowDimensions());
return member_window_dimensions_;
}
Vector<int32_t> getWindowDimensionsOr(const Vector<int32_t>& fallback_value) const;
Vector<int32_t> getWindowDimensionsOr(Vector<int32_t>&& fallback_value) const;
void setWindowDimensions(const Vector<int32_t>& value);
void setWindowDimensions(Vector<int32_t>&& value);


// Obsolete accessor functions
void setAutoPad(const String& value) {
  member_auto_pad_ = V8MLAutoPad::Create(value).value();
}
void setLayout(const String& value) {
  member_layout_ = V8MLInputOperandLayout::Create(value).value();
}
void setRoundingType(const String& value) {
  member_rounding_type_ = V8MLRoundingType::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_dilations_ = false;
bool has_output_sizes_ = false;
bool has_padding_ = false;
bool has_strides_ = false;
bool has_window_dimensions_ = false;

V8MLAutoPad member_auto_pad_{V8MLAutoPad::Enum::kExplicit};
Vector<int32_t> member_dilations_;
V8MLInputOperandLayout member_layout_{V8MLInputOperandLayout::Enum::kNchw};
Vector<int32_t> member_output_sizes_;
Vector<int32_t> member_padding_;
V8MLRoundingType member_rounding_type_{V8MLRoundingType::Enum::kFloor};
Vector<int32_t> member_strides_;
Vector<int32_t> member_window_dimensions_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ML_POOL_2D_OPTIONS_H_
