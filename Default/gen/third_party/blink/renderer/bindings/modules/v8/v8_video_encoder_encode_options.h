// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_VIDEO_ENCODER_ENCODE_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_VIDEO_ENCODER_ENCODE_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/abseil-cpp/absl/types/optional.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT VideoEncoderEncodeOptions : public bindings::DictionaryBase {
  
  public:
static VideoEncoderEncodeOptions* Create() {
  return MakeGarbageCollected<VideoEncoderEncodeOptions>();
}
static VideoEncoderEncodeOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<VideoEncoderEncodeOptions>(isolate);
}
static VideoEncoderEncodeOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  VideoEncoderEncodeOptions();
explicit  VideoEncoderEncodeOptions(v8::Isolate* isolate);

bool hasKeyFrame() const {
  return has_key_frame_;
}
const absl::optional<bool>& keyFrame() const {
  DCHECK(hasKeyFrame());
return member_key_frame_;
}
absl::optional<bool> getKeyFrameOr(const absl::optional<bool>& fallback_value) const {
  if (!hasKeyFrame()) {
  return fallback_value;
}
return member_key_frame_;
}
void setKeyFrame(const absl::optional<bool>& value) {
  member_key_frame_ = value;
has_key_frame_ = true;
}
void setKeyFrame(bool value) {
  member_key_frame_ = value;
has_key_frame_ = true;
}


// Obsolete accessor functions
bool hasKeyFrameNonNull() const {
  return hasKeyFrame() && keyFrame().has_value();
}
bool keyFrameNonNull() const {
  DCHECK(hasKeyFrameNonNull());
return keyFrame().value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_key_frame_ = false;

absl::optional<bool> member_key_frame_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_VIDEO_ENCODER_ENCODE_OPTIONS_H_
