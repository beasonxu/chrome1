// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUCTION_AD_CONFIG_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUCTION_AD_CONFIG_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/script_value.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class AuctionAdConfig;
class ExceptionState;

class MODULES_EXPORT AuctionAdConfig : public bindings::DictionaryBase {
  
  public:
static AuctionAdConfig* Create() {
  return MakeGarbageCollected<AuctionAdConfig>();
}
static AuctionAdConfig* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<AuctionAdConfig>(isolate);
}
static AuctionAdConfig* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  AuctionAdConfig();
explicit  AuctionAdConfig(v8::Isolate* isolate);

bool hasAuctionSignals() const {
  return !member_auction_signals_.IsEmpty();
}
const ScriptValue& auctionSignals() const {
  DCHECK(hasAuctionSignals());
return member_auction_signals_;
}
ScriptValue getAuctionSignalsOr(const ScriptValue& fallback_value) const {
  if (!hasAuctionSignals()) {
  return fallback_value;
}
return member_auction_signals_;
}
void setAuctionSignals(const ScriptValue& value) {
  member_auction_signals_ = value;
}

bool hasComponentAuctions() const {
  return has_component_auctions_;
}
const HeapVector<Member<AuctionAdConfig>>& componentAuctions() const {
  DCHECK(hasComponentAuctions());
return member_component_auctions_;
}
HeapVector<Member<AuctionAdConfig>> getComponentAuctionsOr(const HeapVector<Member<AuctionAdConfig>>& fallback_value) const;
HeapVector<Member<AuctionAdConfig>> getComponentAuctionsOr(HeapVector<Member<AuctionAdConfig>>&& fallback_value) const;
void setComponentAuctions(const HeapVector<Member<AuctionAdConfig>>& value);
void setComponentAuctions(HeapVector<Member<AuctionAdConfig>>&& value);

bool hasDecisionLogicUrl() const {
  return true;
}
const String& decisionLogicUrl() const {
  return member_decision_logic_url_;
}
void setDecisionLogicUrl(const String& value);
void setDecisionLogicUrl(String&& value);

bool hasInterestGroupBuyers() const {
  return has_interest_group_buyers_;
}
const Vector<String>& interestGroupBuyers() const {
  DCHECK(hasInterestGroupBuyers());
return member_interest_group_buyers_;
}
Vector<String> getInterestGroupBuyersOr(const Vector<String>& fallback_value) const;
Vector<String> getInterestGroupBuyersOr(Vector<String>&& fallback_value) const;
void setInterestGroupBuyers(const Vector<String>& value);
void setInterestGroupBuyers(Vector<String>&& value);

bool hasPerBuyerExperimentGroupIds() const {
  return has_per_buyer_experiment_group_ids_;
}
const Vector<std::pair<String, uint16_t>>& perBuyerExperimentGroupIds() const {
  DCHECK(hasPerBuyerExperimentGroupIds());
return member_per_buyer_experiment_group_ids_;
}
Vector<std::pair<String, uint16_t>> getPerBuyerExperimentGroupIdsOr(const Vector<std::pair<String, uint16_t>>& fallback_value) const;
Vector<std::pair<String, uint16_t>> getPerBuyerExperimentGroupIdsOr(Vector<std::pair<String, uint16_t>>&& fallback_value) const;
void setPerBuyerExperimentGroupIds(const Vector<std::pair<String, uint16_t>>& value);
void setPerBuyerExperimentGroupIds(Vector<std::pair<String, uint16_t>>&& value);

bool hasPerBuyerGroupLimits() const {
  return has_per_buyer_group_limits_;
}
const Vector<std::pair<String, uint16_t>>& perBuyerGroupLimits() const {
  DCHECK(hasPerBuyerGroupLimits());
return member_per_buyer_group_limits_;
}
Vector<std::pair<String, uint16_t>> getPerBuyerGroupLimitsOr(const Vector<std::pair<String, uint16_t>>& fallback_value) const;
Vector<std::pair<String, uint16_t>> getPerBuyerGroupLimitsOr(Vector<std::pair<String, uint16_t>>&& fallback_value) const;
void setPerBuyerGroupLimits(const Vector<std::pair<String, uint16_t>>& value);
void setPerBuyerGroupLimits(Vector<std::pair<String, uint16_t>>&& value);

bool hasPerBuyerSignals() const {
  return has_per_buyer_signals_;
}
const HeapVector<std::pair<String, ScriptValue>>& perBuyerSignals() const {
  DCHECK(hasPerBuyerSignals());
return member_per_buyer_signals_;
}
HeapVector<std::pair<String, ScriptValue>> getPerBuyerSignalsOr(const HeapVector<std::pair<String, ScriptValue>>& fallback_value) const;
HeapVector<std::pair<String, ScriptValue>> getPerBuyerSignalsOr(HeapVector<std::pair<String, ScriptValue>>&& fallback_value) const;
void setPerBuyerSignals(const HeapVector<std::pair<String, ScriptValue>>& value);
void setPerBuyerSignals(HeapVector<std::pair<String, ScriptValue>>&& value);

bool hasPerBuyerTimeouts() const {
  return has_per_buyer_timeouts_;
}
const Vector<std::pair<String, uint64_t>>& perBuyerTimeouts() const {
  DCHECK(hasPerBuyerTimeouts());
return member_per_buyer_timeouts_;
}
Vector<std::pair<String, uint64_t>> getPerBuyerTimeoutsOr(const Vector<std::pair<String, uint64_t>>& fallback_value) const;
Vector<std::pair<String, uint64_t>> getPerBuyerTimeoutsOr(Vector<std::pair<String, uint64_t>>&& fallback_value) const;
void setPerBuyerTimeouts(const Vector<std::pair<String, uint64_t>>& value);
void setPerBuyerTimeouts(Vector<std::pair<String, uint64_t>>&& value);

bool hasSeller() const {
  return true;
}
const String& seller() const {
  return member_seller_;
}
void setSeller(const String& value);
void setSeller(String&& value);

bool hasSellerExperimentGroupId() const {
  return has_seller_experiment_group_id_;
}
uint16_t sellerExperimentGroupId() const {
  DCHECK(hasSellerExperimentGroupId());
return member_seller_experiment_group_id_;
}
uint16_t getSellerExperimentGroupIdOr(uint16_t fallback_value) const {
  if (!hasSellerExperimentGroupId()) {
  return fallback_value;
}
return member_seller_experiment_group_id_;
}
void setSellerExperimentGroupId(uint16_t value) {
  member_seller_experiment_group_id_ = value;
has_seller_experiment_group_id_ = true;
}

bool hasSellerSignals() const {
  return !member_seller_signals_.IsEmpty();
}
const ScriptValue& sellerSignals() const {
  DCHECK(hasSellerSignals());
return member_seller_signals_;
}
ScriptValue getSellerSignalsOr(const ScriptValue& fallback_value) const {
  if (!hasSellerSignals()) {
  return fallback_value;
}
return member_seller_signals_;
}
void setSellerSignals(const ScriptValue& value) {
  member_seller_signals_ = value;
}

bool hasSellerTimeout() const {
  return has_seller_timeout_;
}
uint64_t sellerTimeout() const {
  DCHECK(hasSellerTimeout());
return member_seller_timeout_;
}
uint64_t getSellerTimeoutOr(uint64_t fallback_value) const {
  if (!hasSellerTimeout()) {
  return fallback_value;
}
return member_seller_timeout_;
}
void setSellerTimeout(uint64_t value) {
  member_seller_timeout_ = value;
has_seller_timeout_ = true;
}

bool hasTrustedScoringSignalsUrl() const {
  return has_trusted_scoring_signals_url_;
}
const String& trustedScoringSignalsUrl() const {
  DCHECK(hasTrustedScoringSignalsUrl());
return member_trusted_scoring_signals_url_;
}
String getTrustedScoringSignalsUrlOr(const String& fallback_value) const;
String getTrustedScoringSignalsUrlOr(String&& fallback_value) const;
void setTrustedScoringSignalsUrl(const String& value);
void setTrustedScoringSignalsUrl(String&& value);




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_component_auctions_ = false;
bool has_interest_group_buyers_ = false;
bool has_per_buyer_experiment_group_ids_ = false;
bool has_per_buyer_group_limits_ = false;
bool has_per_buyer_signals_ = false;
bool has_per_buyer_timeouts_ = false;
bool has_seller_experiment_group_id_ = false;
bool has_seller_timeout_ = false;
bool has_trusted_scoring_signals_url_ = false;

ScriptValue member_auction_signals_;
HeapVector<Member<AuctionAdConfig>> member_component_auctions_;
String member_decision_logic_url_;
Vector<String> member_interest_group_buyers_;
Vector<std::pair<String, uint16_t>> member_per_buyer_experiment_group_ids_;
Vector<std::pair<String, uint16_t>> member_per_buyer_group_limits_;
HeapVector<std::pair<String, ScriptValue>> member_per_buyer_signals_;
Vector<std::pair<String, uint64_t>> member_per_buyer_timeouts_;
String member_seller_;
uint16_t member_seller_experiment_group_id_;
ScriptValue member_seller_signals_;
uint64_t member_seller_timeout_;
String member_trusted_scoring_signals_url_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUCTION_AD_CONFIG_H_
