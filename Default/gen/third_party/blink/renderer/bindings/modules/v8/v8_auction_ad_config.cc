// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_auction_ad_config.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_auction_ad_config.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



AuctionAdConfig* AuctionAdConfig::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  AuctionAdConfig* dictionary = MakeGarbageCollected<AuctionAdConfig>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "AuctionAdConfig";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 AuctionAdConfig::AuctionAdConfig() {
  
}

 AuctionAdConfig::AuctionAdConfig(v8::Isolate* isolate) {
  
}










HeapVector<Member<AuctionAdConfig>> AuctionAdConfig::getComponentAuctionsOr(const HeapVector<Member<AuctionAdConfig>>& fallback_value) const {
  if (!hasComponentAuctions()) {
  return fallback_value;
}
return member_component_auctions_;
}

HeapVector<Member<AuctionAdConfig>> AuctionAdConfig::getComponentAuctionsOr(HeapVector<Member<AuctionAdConfig>>&& fallback_value) const {
  if (!hasComponentAuctions()) {
  return std::move(fallback_value);
}
return member_component_auctions_;
}

void AuctionAdConfig::setComponentAuctions(const HeapVector<Member<AuctionAdConfig>>& value) {
  member_component_auctions_ = value;
has_component_auctions_ = true;
}

void AuctionAdConfig::setComponentAuctions(HeapVector<Member<AuctionAdConfig>>&& value) {
  member_component_auctions_ = std::move(value);
has_component_auctions_ = true;
}




void AuctionAdConfig::setDecisionLogicUrl(const String& value) {
  member_decision_logic_url_ = value;
}

void AuctionAdConfig::setDecisionLogicUrl(String&& value) {
  member_decision_logic_url_ = std::move(value);
}




Vector<String> AuctionAdConfig::getInterestGroupBuyersOr(const Vector<String>& fallback_value) const {
  if (!hasInterestGroupBuyers()) {
  return fallback_value;
}
return member_interest_group_buyers_;
}

Vector<String> AuctionAdConfig::getInterestGroupBuyersOr(Vector<String>&& fallback_value) const {
  if (!hasInterestGroupBuyers()) {
  return std::move(fallback_value);
}
return member_interest_group_buyers_;
}

void AuctionAdConfig::setInterestGroupBuyers(const Vector<String>& value) {
  member_interest_group_buyers_ = value;
has_interest_group_buyers_ = true;
}

void AuctionAdConfig::setInterestGroupBuyers(Vector<String>&& value) {
  member_interest_group_buyers_ = std::move(value);
has_interest_group_buyers_ = true;
}




Vector<std::pair<String, uint16_t>> AuctionAdConfig::getPerBuyerExperimentGroupIdsOr(const Vector<std::pair<String, uint16_t>>& fallback_value) const {
  if (!hasPerBuyerExperimentGroupIds()) {
  return fallback_value;
}
return member_per_buyer_experiment_group_ids_;
}

Vector<std::pair<String, uint16_t>> AuctionAdConfig::getPerBuyerExperimentGroupIdsOr(Vector<std::pair<String, uint16_t>>&& fallback_value) const {
  if (!hasPerBuyerExperimentGroupIds()) {
  return std::move(fallback_value);
}
return member_per_buyer_experiment_group_ids_;
}

void AuctionAdConfig::setPerBuyerExperimentGroupIds(const Vector<std::pair<String, uint16_t>>& value) {
  member_per_buyer_experiment_group_ids_ = value;
has_per_buyer_experiment_group_ids_ = true;
}

void AuctionAdConfig::setPerBuyerExperimentGroupIds(Vector<std::pair<String, uint16_t>>&& value) {
  member_per_buyer_experiment_group_ids_ = std::move(value);
has_per_buyer_experiment_group_ids_ = true;
}




Vector<std::pair<String, uint16_t>> AuctionAdConfig::getPerBuyerGroupLimitsOr(const Vector<std::pair<String, uint16_t>>& fallback_value) const {
  if (!hasPerBuyerGroupLimits()) {
  return fallback_value;
}
return member_per_buyer_group_limits_;
}

Vector<std::pair<String, uint16_t>> AuctionAdConfig::getPerBuyerGroupLimitsOr(Vector<std::pair<String, uint16_t>>&& fallback_value) const {
  if (!hasPerBuyerGroupLimits()) {
  return std::move(fallback_value);
}
return member_per_buyer_group_limits_;
}

void AuctionAdConfig::setPerBuyerGroupLimits(const Vector<std::pair<String, uint16_t>>& value) {
  member_per_buyer_group_limits_ = value;
has_per_buyer_group_limits_ = true;
}

void AuctionAdConfig::setPerBuyerGroupLimits(Vector<std::pair<String, uint16_t>>&& value) {
  member_per_buyer_group_limits_ = std::move(value);
has_per_buyer_group_limits_ = true;
}




HeapVector<std::pair<String, ScriptValue>> AuctionAdConfig::getPerBuyerSignalsOr(const HeapVector<std::pair<String, ScriptValue>>& fallback_value) const {
  if (!hasPerBuyerSignals()) {
  return fallback_value;
}
return member_per_buyer_signals_;
}

HeapVector<std::pair<String, ScriptValue>> AuctionAdConfig::getPerBuyerSignalsOr(HeapVector<std::pair<String, ScriptValue>>&& fallback_value) const {
  if (!hasPerBuyerSignals()) {
  return std::move(fallback_value);
}
return member_per_buyer_signals_;
}

void AuctionAdConfig::setPerBuyerSignals(const HeapVector<std::pair<String, ScriptValue>>& value) {
  member_per_buyer_signals_ = value;
has_per_buyer_signals_ = true;
}

void AuctionAdConfig::setPerBuyerSignals(HeapVector<std::pair<String, ScriptValue>>&& value) {
  member_per_buyer_signals_ = std::move(value);
has_per_buyer_signals_ = true;
}




Vector<std::pair<String, uint64_t>> AuctionAdConfig::getPerBuyerTimeoutsOr(const Vector<std::pair<String, uint64_t>>& fallback_value) const {
  if (!hasPerBuyerTimeouts()) {
  return fallback_value;
}
return member_per_buyer_timeouts_;
}

Vector<std::pair<String, uint64_t>> AuctionAdConfig::getPerBuyerTimeoutsOr(Vector<std::pair<String, uint64_t>>&& fallback_value) const {
  if (!hasPerBuyerTimeouts()) {
  return std::move(fallback_value);
}
return member_per_buyer_timeouts_;
}

void AuctionAdConfig::setPerBuyerTimeouts(const Vector<std::pair<String, uint64_t>>& value) {
  member_per_buyer_timeouts_ = value;
has_per_buyer_timeouts_ = true;
}

void AuctionAdConfig::setPerBuyerTimeouts(Vector<std::pair<String, uint64_t>>&& value) {
  member_per_buyer_timeouts_ = std::move(value);
has_per_buyer_timeouts_ = true;
}




void AuctionAdConfig::setSeller(const String& value) {
  member_seller_ = value;
}

void AuctionAdConfig::setSeller(String&& value) {
  member_seller_ = std::move(value);
}

























String AuctionAdConfig::getTrustedScoringSignalsUrlOr(const String& fallback_value) const {
  if (!hasTrustedScoringSignalsUrl()) {
  return fallback_value;
}
return member_trusted_scoring_signals_url_;
}

String AuctionAdConfig::getTrustedScoringSignalsUrlOr(String&& fallback_value) const {
  if (!hasTrustedScoringSignalsUrl()) {
  return std::move(fallback_value);
}
return member_trusted_scoring_signals_url_;
}

void AuctionAdConfig::setTrustedScoringSignalsUrl(const String& value) {
  member_trusted_scoring_signals_url_ = value;
has_trusted_scoring_signals_url_ = true;
}

void AuctionAdConfig::setTrustedScoringSignalsUrl(String&& value) {
  member_trusted_scoring_signals_url_ = std::move(value);
has_trusted_scoring_signals_url_ = true;
}




void AuctionAdConfig::Trace(Visitor* visitor) const {
  TraceIfNeeded<ScriptValue>::Trace(visitor, member_auction_signals_);
TraceIfNeeded<HeapVector<Member<AuctionAdConfig>>>::Trace(visitor, member_component_auctions_);
TraceIfNeeded<String>::Trace(visitor, member_decision_logic_url_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_interest_group_buyers_);
TraceIfNeeded<Vector<std::pair<String, uint16_t>>>::Trace(visitor, member_per_buyer_experiment_group_ids_);
TraceIfNeeded<Vector<std::pair<String, uint16_t>>>::Trace(visitor, member_per_buyer_group_limits_);
TraceIfNeeded<HeapVector<std::pair<String, ScriptValue>>>::Trace(visitor, member_per_buyer_signals_);
TraceIfNeeded<Vector<std::pair<String, uint64_t>>>::Trace(visitor, member_per_buyer_timeouts_);
TraceIfNeeded<String>::Trace(visitor, member_seller_);
TraceIfNeeded<uint16_t>::Trace(visitor, member_seller_experiment_group_id_);
TraceIfNeeded<ScriptValue>::Trace(visitor, member_seller_signals_);
TraceIfNeeded<uint64_t>::Trace(visitor, member_seller_timeout_);
TraceIfNeeded<String>::Trace(visitor, member_trusted_scoring_signals_url_);
bindings::DictionaryBase::Trace(visitor);
}

bool AuctionAdConfig::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAuctionSignals()) {
  if (!ToV8Traits<IDLAny>::ToV8(script_state, member_auction_signals_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasComponentAuctions()) {
  if (!ToV8Traits<IDLSequence<AuctionAdConfig>>::ToV8(script_state, member_component_auctions_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDecisionLogicUrl()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_decision_logic_url_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasInterestGroupBuyers()) {
  if (!ToV8Traits<IDLSequence<IDLUSVString>>::ToV8(script_state, member_interest_group_buyers_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPerBuyerExperimentGroupIds()) {
  if (!ToV8Traits<IDLRecord<IDLUSVString, IDLUnsignedShort>>::ToV8(script_state, member_per_buyer_experiment_group_ids_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPerBuyerGroupLimits()) {
  if (!ToV8Traits<IDLRecord<IDLUSVString, IDLUnsignedShort>>::ToV8(script_state, member_per_buyer_group_limits_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPerBuyerSignals()) {
  if (!ToV8Traits<IDLRecord<IDLUSVString, IDLAny>>::ToV8(script_state, member_per_buyer_signals_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPerBuyerTimeouts()) {
  if (!ToV8Traits<IDLRecord<IDLUSVString, IDLUnsignedLongLong>>::ToV8(script_state, member_per_buyer_timeouts_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSeller()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_seller_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSellerExperimentGroupId()) {
  if (!ToV8Traits<IDLUnsignedShort>::ToV8(script_state, member_seller_experiment_group_id_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSellerSignals()) {
  if (!ToV8Traits<IDLAny>::ToV8(script_state, member_seller_signals_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[10].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSellerTimeout()) {
  if (!ToV8Traits<IDLUnsignedLongLong>::ToV8(script_state, member_seller_timeout_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[11].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTrustedScoringSignalsUrl()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_trusted_scoring_signals_url_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[12].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void AuctionAdConfig::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "AuctionAdConfig";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("auctionSignals");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLAny, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_auction_signals_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("componentAuctions");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<AuctionAdConfig>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_component_auctions_, member_component_auctions_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("decisionLogicUrl");
constexpr bool is_required = true;
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_decision_logic_url_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("interestGroupBuyers");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLUSVString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_interest_group_buyers_, member_interest_group_buyers_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("perBuyerExperimentGroupIds");
if (!bindings::GetDictionaryMemberFromV8Object<IDLRecord<IDLUSVString, IDLUnsignedShort>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_per_buyer_experiment_group_ids_, member_per_buyer_experiment_group_ids_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("perBuyerGroupLimits");
if (!bindings::GetDictionaryMemberFromV8Object<IDLRecord<IDLUSVString, IDLUnsignedShort>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_per_buyer_group_limits_, member_per_buyer_group_limits_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("perBuyerSignals");
if (!bindings::GetDictionaryMemberFromV8Object<IDLRecord<IDLUSVString, IDLAny>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_per_buyer_signals_, member_per_buyer_signals_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("perBuyerTimeouts");
if (!bindings::GetDictionaryMemberFromV8Object<IDLRecord<IDLUSVString, IDLUnsignedLongLong>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_per_buyer_timeouts_, member_per_buyer_timeouts_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("seller");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), fallback_presence_var, member_seller_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("sellerExperimentGroupId");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedShort, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), has_seller_experiment_group_id_, member_seller_experiment_group_id_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("sellerSignals");
if (!bindings::GetDictionaryMemberFromV8Object<IDLAny, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[10].Get(isolate), fallback_presence_var, member_seller_signals_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("sellerTimeout");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLongLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[11].Get(isolate), has_seller_timeout_, member_seller_timeout_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("trustedScoringSignalsUrl");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[12].Get(isolate), has_trusted_scoring_signals_url_, member_trusted_scoring_signals_url_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> AuctionAdConfig::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"auctionSignals",
"componentAuctions",
"decisionLogicUrl",
"interestGroupBuyers",
"perBuyerExperimentGroupIds",
"perBuyerGroupLimits",
"perBuyerSignals",
"perBuyerTimeouts",
"seller",
"sellerExperimentGroupId",
"sellerSignals",
"sellerTimeout",
"trustedScoringSignalsUrl",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
