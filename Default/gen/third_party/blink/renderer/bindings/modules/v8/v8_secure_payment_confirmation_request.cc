// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_secure_payment_confirmation_request.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_arraybuffer_arraybufferview.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_payment_credential_instrument.h"
#include "third_party/blink/renderer/core/execution_context/execution_context.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



SecurePaymentConfirmationRequest* SecurePaymentConfirmationRequest::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  SecurePaymentConfirmationRequest* dictionary = MakeGarbageCollected<SecurePaymentConfirmationRequest>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "SecurePaymentConfirmationRequest";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 SecurePaymentConfirmationRequest::SecurePaymentConfirmationRequest() {
  
}

 SecurePaymentConfirmationRequest::SecurePaymentConfirmationRequest(v8::Isolate* isolate) {
  
}















void SecurePaymentConfirmationRequest::setCredentialIds(const HeapVector<Member<V8UnionArrayBufferOrArrayBufferView>>& value) {
  member_credential_ids_ = value;
}

void SecurePaymentConfirmationRequest::setCredentialIds(HeapVector<Member<V8UnionArrayBufferOrArrayBufferView>>&& value) {
  member_credential_ids_ = std::move(value);
}









String SecurePaymentConfirmationRequest::getPayeeNameOr(const String& fallback_value) const {
  if (!hasPayeeName()) {
  return fallback_value;
}
return member_payee_name_;
}

String SecurePaymentConfirmationRequest::getPayeeNameOr(String&& fallback_value) const {
  if (!hasPayeeName()) {
  return std::move(fallback_value);
}
return member_payee_name_;
}

void SecurePaymentConfirmationRequest::setPayeeName(const String& value) {
  member_payee_name_ = value;
has_payee_name_ = true;
}

void SecurePaymentConfirmationRequest::setPayeeName(String&& value) {
  member_payee_name_ = std::move(value);
has_payee_name_ = true;
}




String SecurePaymentConfirmationRequest::getPayeeOriginOr(const String& fallback_value) const {
  if (!hasPayeeOrigin()) {
  return fallback_value;
}
return member_payee_origin_;
}

String SecurePaymentConfirmationRequest::getPayeeOriginOr(String&& fallback_value) const {
  if (!hasPayeeOrigin()) {
  return std::move(fallback_value);
}
return member_payee_origin_;
}

void SecurePaymentConfirmationRequest::setPayeeOrigin(const String& value) {
  member_payee_origin_ = value;
has_payee_origin_ = true;
}

void SecurePaymentConfirmationRequest::setPayeeOrigin(String&& value) {
  member_payee_origin_ = std::move(value);
has_payee_origin_ = true;
}




void SecurePaymentConfirmationRequest::setRpId(const String& value) {
  member_rp_id_ = value;
}

void SecurePaymentConfirmationRequest::setRpId(String&& value) {
  member_rp_id_ = std::move(value);
}


















void SecurePaymentConfirmationRequest::Trace(Visitor* visitor) const {
  TraceIfNeeded<V8SecurePaymentConfirmationAction>::Trace(visitor, member_action_);
TraceIfNeeded<Member<V8UnionArrayBufferOrArrayBufferView>>::Trace(visitor, member_challenge_);
TraceIfNeeded<HeapVector<Member<V8UnionArrayBufferOrArrayBufferView>>>::Trace(visitor, member_credential_ids_);
TraceIfNeeded<Member<PaymentCredentialInstrument>>::Trace(visitor, member_instrument_);
TraceIfNeeded<String>::Trace(visitor, member_payee_name_);
TraceIfNeeded<String>::Trace(visitor, member_payee_origin_);
TraceIfNeeded<String>::Trace(visitor, member_rp_id_);
TraceIfNeeded<bool>::Trace(visitor, member_show_opt_out_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_timeout_);
bindings::DictionaryBase::Trace(visitor);
}

bool SecurePaymentConfirmationRequest::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAction()) {
  if (!ToV8Traits<V8SecurePaymentConfirmationAction>::ToV8(script_state, member_action_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasChallenge()) {
  if (!ToV8Traits<V8UnionArrayBufferOrArrayBufferView>::ToV8(script_state, member_challenge_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCredentialIds()) {
  if (!ToV8Traits<IDLSequence<V8UnionArrayBufferOrArrayBufferView>>::ToV8(script_state, member_credential_ids_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasInstrument()) {
  if (!ToV8Traits<PaymentCredentialInstrument>::ToV8(script_state, member_instrument_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPayeeName()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_payee_name_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPayeeOrigin()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_payee_origin_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasRpId()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_rp_id_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
ExecutionContext* execution_context = ExecutionContext::From(current_context);
if (RuntimeEnabledFeatures::SecurePaymentConfirmationOptOutEnabled(execution_context)) {
  if (hasShowOptOut()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_show_opt_out_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasTimeout()) {
  if (!ToV8Traits<IDLUnsignedLong>::ToV8(script_state, member_timeout_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void SecurePaymentConfirmationRequest::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "SecurePaymentConfirmationRequest";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("action");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<V8SecurePaymentConfirmationAction, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_action_, member_action_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("challenge");
constexpr bool is_required = true;
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionArrayBufferOrArrayBufferView, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_challenge_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("credentialIds");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<V8UnionArrayBufferOrArrayBufferView>, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_credential_ids_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("instrument");
if (!bindings::GetDictionaryMemberFromV8Object<PaymentCredentialInstrument, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_instrument_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("payeeName");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_payee_name_, member_payee_name_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("payeeOrigin");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_payee_origin_, member_payee_origin_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("rpId");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_rp_id_, try_block, exception_state)) {
  return;
}
ExecutionContext* execution_context = ExecutionContext::From(current_context);
if (RuntimeEnabledFeatures::SecurePaymentConfirmationOptOutEnabled(execution_context)) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("showOptOut");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_show_opt_out_, member_show_opt_out_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("timeout");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), has_timeout_, member_timeout_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> SecurePaymentConfirmationRequest::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"action",
"challenge",
"credentialIds",
"instrument",
"payeeName",
"payeeOrigin",
"rpId",
"showOptOut",
"timeout",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
