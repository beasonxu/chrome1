// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_sanitizer_config.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



SanitizerConfig* SanitizerConfig::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  SanitizerConfig* dictionary = MakeGarbageCollected<SanitizerConfig>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "SanitizerConfig";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 SanitizerConfig::SanitizerConfig() {
  
}

 SanitizerConfig::SanitizerConfig(v8::Isolate* isolate) {
  
}



Vector<std::pair<String, Vector<String>>> SanitizerConfig::getAllowAttributesOr(const Vector<std::pair<String, Vector<String>>>& fallback_value) const {
  if (!hasAllowAttributes()) {
  return fallback_value;
}
return member_allow_attributes_;
}

Vector<std::pair<String, Vector<String>>> SanitizerConfig::getAllowAttributesOr(Vector<std::pair<String, Vector<String>>>&& fallback_value) const {
  if (!hasAllowAttributes()) {
  return std::move(fallback_value);
}
return member_allow_attributes_;
}

void SanitizerConfig::setAllowAttributes(const Vector<std::pair<String, Vector<String>>>& value) {
  member_allow_attributes_ = value;
has_allow_attributes_ = true;
}

void SanitizerConfig::setAllowAttributes(Vector<std::pair<String, Vector<String>>>&& value) {
  member_allow_attributes_ = std::move(value);
has_allow_attributes_ = true;
}


















Vector<String> SanitizerConfig::getAllowElementsOr(const Vector<String>& fallback_value) const {
  if (!hasAllowElements()) {
  return fallback_value;
}
return member_allow_elements_;
}

Vector<String> SanitizerConfig::getAllowElementsOr(Vector<String>&& fallback_value) const {
  if (!hasAllowElements()) {
  return std::move(fallback_value);
}
return member_allow_elements_;
}

void SanitizerConfig::setAllowElements(const Vector<String>& value) {
  member_allow_elements_ = value;
has_allow_elements_ = true;
}

void SanitizerConfig::setAllowElements(Vector<String>&& value) {
  member_allow_elements_ = std::move(value);
has_allow_elements_ = true;
}











Vector<String> SanitizerConfig::getBlockElementsOr(const Vector<String>& fallback_value) const {
  if (!hasBlockElements()) {
  return fallback_value;
}
return member_block_elements_;
}

Vector<String> SanitizerConfig::getBlockElementsOr(Vector<String>&& fallback_value) const {
  if (!hasBlockElements()) {
  return std::move(fallback_value);
}
return member_block_elements_;
}

void SanitizerConfig::setBlockElements(const Vector<String>& value) {
  member_block_elements_ = value;
has_block_elements_ = true;
}

void SanitizerConfig::setBlockElements(Vector<String>&& value) {
  member_block_elements_ = std::move(value);
has_block_elements_ = true;
}




Vector<std::pair<String, Vector<String>>> SanitizerConfig::getDropAttributesOr(const Vector<std::pair<String, Vector<String>>>& fallback_value) const {
  if (!hasDropAttributes()) {
  return fallback_value;
}
return member_drop_attributes_;
}

Vector<std::pair<String, Vector<String>>> SanitizerConfig::getDropAttributesOr(Vector<std::pair<String, Vector<String>>>&& fallback_value) const {
  if (!hasDropAttributes()) {
  return std::move(fallback_value);
}
return member_drop_attributes_;
}

void SanitizerConfig::setDropAttributes(const Vector<std::pair<String, Vector<String>>>& value) {
  member_drop_attributes_ = value;
has_drop_attributes_ = true;
}

void SanitizerConfig::setDropAttributes(Vector<std::pair<String, Vector<String>>>&& value) {
  member_drop_attributes_ = std::move(value);
has_drop_attributes_ = true;
}




Vector<String> SanitizerConfig::getDropElementsOr(const Vector<String>& fallback_value) const {
  if (!hasDropElements()) {
  return fallback_value;
}
return member_drop_elements_;
}

Vector<String> SanitizerConfig::getDropElementsOr(Vector<String>&& fallback_value) const {
  if (!hasDropElements()) {
  return std::move(fallback_value);
}
return member_drop_elements_;
}

void SanitizerConfig::setDropElements(const Vector<String>& value) {
  member_drop_elements_ = value;
has_drop_elements_ = true;
}

void SanitizerConfig::setDropElements(Vector<String>&& value) {
  member_drop_elements_ = std::move(value);
has_drop_elements_ = true;
}




void SanitizerConfig::Trace(Visitor* visitor) const {
  TraceIfNeeded<Vector<std::pair<String, Vector<String>>>>::Trace(visitor, member_allow_attributes_);
TraceIfNeeded<bool>::Trace(visitor, member_allow_comments_);
TraceIfNeeded<bool>::Trace(visitor, member_allow_custom_elements_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_allow_elements_);
TraceIfNeeded<bool>::Trace(visitor, member_allow_unknown_markup_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_block_elements_);
TraceIfNeeded<Vector<std::pair<String, Vector<String>>>>::Trace(visitor, member_drop_attributes_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_drop_elements_);
bindings::DictionaryBase::Trace(visitor);
}

bool SanitizerConfig::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAllowAttributes()) {
  if (!ToV8Traits<IDLRecord<IDLString, IDLSequence<IDLString>>>::ToV8(script_state, member_allow_attributes_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAllowComments()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_allow_comments_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAllowCustomElements()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_allow_custom_elements_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAllowElements()) {
  if (!ToV8Traits<IDLSequence<IDLString>>::ToV8(script_state, member_allow_elements_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAllowUnknownMarkup()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_allow_unknown_markup_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasBlockElements()) {
  if (!ToV8Traits<IDLSequence<IDLString>>::ToV8(script_state, member_block_elements_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDropAttributes()) {
  if (!ToV8Traits<IDLRecord<IDLString, IDLSequence<IDLString>>>::ToV8(script_state, member_drop_attributes_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDropElements()) {
  if (!ToV8Traits<IDLSequence<IDLString>>::ToV8(script_state, member_drop_elements_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void SanitizerConfig::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "SanitizerConfig";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("allowAttributes");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLRecord<IDLString, IDLSequence<IDLString>>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_allow_attributes_, member_allow_attributes_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("allowComments");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_allow_comments_, member_allow_comments_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("allowCustomElements");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_allow_custom_elements_, member_allow_custom_elements_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("allowElements");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_allow_elements_, member_allow_elements_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("allowUnknownMarkup");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_allow_unknown_markup_, member_allow_unknown_markup_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("blockElements");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_block_elements_, member_block_elements_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("dropAttributes");
if (!bindings::GetDictionaryMemberFromV8Object<IDLRecord<IDLString, IDLSequence<IDLString>>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_drop_attributes_, member_drop_attributes_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("dropElements");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_drop_elements_, member_drop_elements_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> SanitizerConfig::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"allowAttributes",
"allowComments",
"allowCustomElements",
"allowElements",
"allowUnknownMarkup",
"blockElements",
"dropAttributes",
"dropElements",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
