// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_WEBCODECS_TEXTURE_INFO_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_WEBCODECS_TEXTURE_INFO_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;
class WebGLTexture;

class MODULES_EXPORT WebGLWebCodecsTextureInfo : public bindings::DictionaryBase {
  
  public:
static WebGLWebCodecsTextureInfo* Create() {
  return MakeGarbageCollected<WebGLWebCodecsTextureInfo>();
}
static WebGLWebCodecsTextureInfo* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<WebGLWebCodecsTextureInfo>(isolate);
}
static WebGLWebCodecsTextureInfo* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  WebGLWebCodecsTextureInfo();
explicit  WebGLWebCodecsTextureInfo(v8::Isolate* isolate);

bool hasComponents() const {
  return has_components_;
}
const String& components() const {
  DCHECK(hasComponents());
return member_components_;
}
String getComponentsOr(const String& fallback_value) const;
String getComponentsOr(String&& fallback_value) const;
void setComponents(const String& value);
void setComponents(String&& value);

bool hasSamplerFunc() const {
  return has_sampler_func_;
}
const String& samplerFunc() const {
  DCHECK(hasSamplerFunc());
return member_sampler_func_;
}
String getSamplerFuncOr(const String& fallback_value) const;
String getSamplerFuncOr(String&& fallback_value) const;
void setSamplerFunc(const String& value);
void setSamplerFunc(String&& value);

bool hasSamplerType() const {
  return has_sampler_type_;
}
const String& samplerType() const {
  DCHECK(hasSamplerType());
return member_sampler_type_;
}
String getSamplerTypeOr(const String& fallback_value) const;
String getSamplerTypeOr(String&& fallback_value) const;
void setSamplerType(const String& value);
void setSamplerType(String&& value);

bool hasTarget() const {
  return has_target_;
}
uint32_t target() const {
  DCHECK(hasTarget());
return member_target_;
}
uint32_t getTargetOr(uint32_t fallback_value) const {
  if (!hasTarget()) {
  return fallback_value;
}
return member_target_;
}
void setTarget(uint32_t value) {
  member_target_ = value;
has_target_ = true;
}

bool hasTexture() const {
  return has_texture_;
}
WebGLTexture* texture() const {
  DCHECK(hasTexture());
return member_texture_;
}
WebGLTexture* getTextureOr(WebGLTexture* fallback_value) const {
  if (!hasTexture()) {
  return fallback_value;
}
return member_texture_;
}
void setTexture(WebGLTexture* value) {
  member_texture_ = value;
has_texture_ = true;
DCHECK(member_texture_);
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_components_ = false;
bool has_sampler_func_ = false;
bool has_sampler_type_ = false;
bool has_target_ = false;
bool has_texture_ = false;

String member_components_;
String member_sampler_func_;
String member_sampler_type_;
uint32_t member_target_;
Member<WebGLTexture> member_texture_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_WEBCODECS_TEXTURE_INFO_H_
