// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_render_pass_depth_stencil_attachment.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_union_float_gpuloadop.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_union_gpuloadop_unsignedlongenforcerange.h"
#include "third_party/blink/renderer/modules/webgpu/gpu_texture_view.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



GPURenderPassDepthStencilAttachment* GPURenderPassDepthStencilAttachment::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  GPURenderPassDepthStencilAttachment* dictionary = MakeGarbageCollected<GPURenderPassDepthStencilAttachment>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "GPURenderPassDepthStencilAttachment";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 GPURenderPassDepthStencilAttachment::GPURenderPassDepthStencilAttachment() {
  
}

 GPURenderPassDepthStencilAttachment::GPURenderPassDepthStencilAttachment(v8::Isolate* isolate) {
  
}






































































void GPURenderPassDepthStencilAttachment::Trace(Visitor* visitor) const {
  TraceIfNeeded<float>::Trace(visitor, member_depth_clear_value_);
TraceIfNeeded<V8GPULoadOp>::Trace(visitor, member_depth_load_op_);
TraceIfNeeded<Member<V8UnionFloatOrGPULoadOp>>::Trace(visitor, member_depth_load_value_);
TraceIfNeeded<bool>::Trace(visitor, member_depth_read_only_);
TraceIfNeeded<V8GPUStoreOp>::Trace(visitor, member_depth_store_op_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_stencil_clear_value_);
TraceIfNeeded<V8GPULoadOp>::Trace(visitor, member_stencil_load_op_);
TraceIfNeeded<Member<V8UnionGPULoadOpOrUnsignedLongEnforceRange>>::Trace(visitor, member_stencil_load_value_);
TraceIfNeeded<bool>::Trace(visitor, member_stencil_read_only_);
TraceIfNeeded<V8GPUStoreOp>::Trace(visitor, member_stencil_store_op_);
TraceIfNeeded<Member<GPUTextureView>>::Trace(visitor, member_view_);
bindings::DictionaryBase::Trace(visitor);
}

bool GPURenderPassDepthStencilAttachment::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasDepthClearValue()) {
  if (!ToV8Traits<IDLFloat>::ToV8(script_state, member_depth_clear_value_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDepthLoadOp()) {
  if (!ToV8Traits<V8GPULoadOp>::ToV8(script_state, member_depth_load_op_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDepthLoadValue()) {
  if (!ToV8Traits<V8UnionFloatOrGPULoadOp>::ToV8(script_state, member_depth_load_value_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDepthReadOnly()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_depth_read_only_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDepthStoreOp()) {
  if (!ToV8Traits<V8GPUStoreOp>::ToV8(script_state, member_depth_store_op_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStencilClearValue()) {
  if (!ToV8Traits<IDLUnsignedLongEnforceRange>::ToV8(script_state, member_stencil_clear_value_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStencilLoadOp()) {
  if (!ToV8Traits<V8GPULoadOp>::ToV8(script_state, member_stencil_load_op_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStencilLoadValue()) {
  if (!ToV8Traits<V8UnionGPULoadOpOrUnsignedLongEnforceRange>::ToV8(script_state, member_stencil_load_value_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStencilReadOnly()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_stencil_read_only_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStencilStoreOp()) {
  if (!ToV8Traits<V8GPUStoreOp>::ToV8(script_state, member_stencil_store_op_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasView()) {
  if (!ToV8Traits<GPUTextureView>::ToV8(script_state, member_view_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[10].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void GPURenderPassDepthStencilAttachment::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "GPURenderPassDepthStencilAttachment";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("depthClearValue");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLFloat, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_depth_clear_value_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("depthLoadOp");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPULoadOp, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_depth_load_op_, member_depth_load_op_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("depthLoadValue");
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionFloatOrGPULoadOp, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_depth_load_value_, member_depth_load_value_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("depthReadOnly");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_depth_read_only_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("depthStoreOp");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUStoreOp, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_depth_store_op_, member_depth_store_op_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stencilClearValue");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLongEnforceRange, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_stencil_clear_value_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stencilLoadOp");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPULoadOp, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_stencil_load_op_, member_stencil_load_op_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stencilLoadValue");
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionGPULoadOpOrUnsignedLongEnforceRange, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_stencil_load_value_, member_stencil_load_value_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stencilReadOnly");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), fallback_presence_var, member_stencil_read_only_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stencilStoreOp");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUStoreOp, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), has_stencil_store_op_, member_stencil_store_op_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("view");
constexpr bool is_required = true;
if (!bindings::GetDictionaryMemberFromV8Object<GPUTextureView, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[10].Get(isolate), fallback_presence_var, member_view_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> GPURenderPassDepthStencilAttachment::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"depthClearValue",
"depthLoadOp",
"depthLoadValue",
"depthReadOnly",
"depthStoreOp",
"stencilClearValue",
"stencilLoadOp",
"stencilLoadValue",
"stencilReadOnly",
"stencilStoreOp",
"view",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
