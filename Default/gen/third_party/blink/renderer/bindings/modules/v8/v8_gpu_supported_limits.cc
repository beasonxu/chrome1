// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_supported_limits.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_set_return_value_for_core.h"
#include "third_party/blink/renderer/core/execution_context/execution_context.h"
#include "third_party/blink/renderer/modules/webgpu/gpu_supported_limits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/idl_member_installer.h"
#include "third_party/blink/renderer/platform/bindings/runtime_call_stats.h"
#include "third_party/blink/renderer/platform/bindings/v8_binding.h"
#include "third_party/blink/renderer/platform/bindings/wrapper_type_info.h"

namespace blink {



bool V8GPUSupportedLimits::IsExposed(ExecutionContext* execution_context) {
  
const bool is_in_secure_context = execution_context->IsSecureContext();
return is_in_secure_context && ((execution_context->IsWindow() && RuntimeEnabledFeatures::WebGPUEnabled(execution_context)) || (execution_context->IsDedicatedWorkerGlobalScope() && RuntimeEnabledFeatures::WebGPUEnabled(execution_context)));
}

// Construction of WrapperTypeInfo may require non-trivial initialization due
// to cross-component address resolution in order to load the pointer to the
// parent interface's WrapperTypeInfo.  We ignore this issue because the issue
// happens only on component builds and the official release builds
// (statically-linked builds) are never affected by this issue.
#if defined(COMPONENT_BUILD) && defined(WIN32) && defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif

const WrapperTypeInfo V8GPUSupportedLimits::wrapper_type_info_{
    gin::kEmbedderBlink,
    V8GPUSupportedLimits::InstallInterfaceTemplate,
    nullptr,
    "GPUSupportedLimits",
    nullptr,
    WrapperTypeInfo::kWrapperTypeObjectPrototype,
    WrapperTypeInfo::kObjectClassId,
    WrapperTypeInfo::kNotInheritFromActiveScriptWrappable,
    WrapperTypeInfo::kIdlInterface,
};

#if defined(COMPONENT_BUILD) && defined(WIN32) && defined(__clang__)
#pragma clang diagnostic pop
#endif

const WrapperTypeInfo& GPUSupportedLimits::wrapper_type_info_ =
    V8GPUSupportedLimits::wrapper_type_info_;

// non-[ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, GPUSupportedLimits>::value,
    "GPUSupportedLimits inherits from ActiveScriptWrappable<> without "
    "[ActiveScriptWrappable] extended attribute.");
static_assert(
    std::is_same<decltype(&GPUSupportedLimits::HasPendingActivity),
                 decltype(&ScriptWrappable::HasPendingActivity)>::value,
    "GPUSupportedLimits is overriding hasPendingActivity() without "
    "[ActiveScriptWrappable] extended attribute.");

namespace  {

namespace v8_gpu_supported_limits {

void MaxTextureDimension1DAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxTextureDimension1D_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxTextureDimension1D.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxTextureDimension1D();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxTextureDimension2DAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxTextureDimension2D_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxTextureDimension2D.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxTextureDimension2D();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxTextureDimension3DAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxTextureDimension3D_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxTextureDimension3D.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxTextureDimension3D();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxTextureArrayLayersAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxTextureArrayLayers_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxTextureArrayLayers.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxTextureArrayLayers();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxBindGroupsAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxBindGroups_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxBindGroups.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxBindGroups();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxDynamicUniformBuffersPerPipelineLayoutAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxDynamicUniformBuffersPerPipelineLayout_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxDynamicUniformBuffersPerPipelineLayout.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxDynamicUniformBuffersPerPipelineLayout();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxDynamicStorageBuffersPerPipelineLayoutAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxDynamicStorageBuffersPerPipelineLayout_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxDynamicStorageBuffersPerPipelineLayout.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxDynamicStorageBuffersPerPipelineLayout();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxSampledTexturesPerShaderStageAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxSampledTexturesPerShaderStage_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxSampledTexturesPerShaderStage.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxSampledTexturesPerShaderStage();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxSamplersPerShaderStageAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxSamplersPerShaderStage_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxSamplersPerShaderStage.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxSamplersPerShaderStage();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxStorageBuffersPerShaderStageAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxStorageBuffersPerShaderStage_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxStorageBuffersPerShaderStage.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxStorageBuffersPerShaderStage();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxStorageTexturesPerShaderStageAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxStorageTexturesPerShaderStage_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxStorageTexturesPerShaderStage.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxStorageTexturesPerShaderStage();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxUniformBuffersPerShaderStageAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxUniformBuffersPerShaderStage_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxUniformBuffersPerShaderStage.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxUniformBuffersPerShaderStage();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxUniformBufferBindingSizeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxUniformBufferBindingSize_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxUniformBufferBindingSize.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxUniformBufferBindingSize();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint64_t>());
}


void MaxStorageBufferBindingSizeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxStorageBufferBindingSize_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxStorageBufferBindingSize.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxStorageBufferBindingSize();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint64_t>());
}


void MinUniformBufferOffsetAlignmentAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_minUniformBufferOffsetAlignment_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.minUniformBufferOffsetAlignment.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->minUniformBufferOffsetAlignment();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MinStorageBufferOffsetAlignmentAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_minStorageBufferOffsetAlignment_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.minStorageBufferOffsetAlignment.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->minStorageBufferOffsetAlignment();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxVertexBuffersAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxVertexBuffers_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxVertexBuffers.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxVertexBuffers();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxVertexAttributesAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxVertexAttributes_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxVertexAttributes.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxVertexAttributes();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxVertexBufferArrayStrideAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxVertexBufferArrayStride_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxVertexBufferArrayStride.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxVertexBufferArrayStride();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxInterStageShaderComponentsAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxInterStageShaderComponents_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxInterStageShaderComponents.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxInterStageShaderComponents();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxInterStageShaderVariablesAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxInterStageShaderVariables_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxInterStageShaderVariables.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxInterStageShaderVariables();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxColorAttachmentsAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxColorAttachments_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxColorAttachments.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxColorAttachments();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxComputeWorkgroupStorageSizeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxComputeWorkgroupStorageSize_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxComputeWorkgroupStorageSize.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxComputeWorkgroupStorageSize();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxComputeInvocationsPerWorkgroupAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxComputeInvocationsPerWorkgroup_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxComputeInvocationsPerWorkgroup.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxComputeInvocationsPerWorkgroup();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxComputeWorkgroupSizeXAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxComputeWorkgroupSizeX_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxComputeWorkgroupSizeX.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxComputeWorkgroupSizeX();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxComputeWorkgroupSizeYAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxComputeWorkgroupSizeY_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxComputeWorkgroupSizeY.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxComputeWorkgroupSizeY();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxComputeWorkgroupSizeZAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxComputeWorkgroupSizeZ_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxComputeWorkgroupSizeZ.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxComputeWorkgroupSizeZ();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}


void MaxComputeWorkgroupsPerDimensionAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_GPUSupportedLimits_maxComputeWorkgroupsPerDimension_Getter");
BLINK_BINDINGS_TRACE_EVENT("GPUSupportedLimits.maxComputeWorkgroupsPerDimension.get");


v8::Local<v8::Object> v8_receiver = info.This();
GPUSupportedLimits* blink_receiver = V8GPUSupportedLimits::ToWrappableUnsafe(v8_receiver);
auto&& return_value = blink_receiver->maxComputeWorkgroupsPerDimension();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}



}  // namespace v8_gpu_supported_limits

using namespace v8_gpu_supported_limits;

}  // namespace 

void V8GPUSupportedLimits::InstallInterfaceTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> interface_template) {
  const WrapperTypeInfo* const wrapper_type_info = V8GPUSupportedLimits::GetWrapperTypeInfo();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::ObjectTemplate> instance_object_template = interface_function_template->InstanceTemplate();
v8::Local<v8::ObjectTemplate> prototype_object_template = interface_function_template->PrototypeTemplate();
v8::Local<v8::FunctionTemplate> parent_interface_template;
bindings::SetupIDLInterfaceTemplate(isolate, wrapper_type_info, instance_object_template, prototype_object_template, interface_function_template, parent_interface_template);








v8::Local<v8::Template> instance_template = instance_object_template;
v8::Local<v8::Template> prototype_template = prototype_object_template;
InstallUnconditionalProperties(isolate, world, instance_template, prototype_template, interface_template);
}

void V8GPUSupportedLimits::InstallUnconditionalProperties(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> instance_template, v8::Local<v8::Template> prototype_template, v8::Local<v8::Template> interface_template) {
  using bindings::IDLMemberInstaller;

{
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"maxTextureDimension1D", MaxTextureDimension1DAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxTextureDimension2D", MaxTextureDimension2DAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxTextureDimension3D", MaxTextureDimension3DAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxTextureArrayLayers", MaxTextureArrayLayersAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxBindGroups", MaxBindGroupsAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxDynamicUniformBuffersPerPipelineLayout", MaxDynamicUniformBuffersPerPipelineLayoutAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxDynamicStorageBuffersPerPipelineLayout", MaxDynamicStorageBuffersPerPipelineLayoutAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxSampledTexturesPerShaderStage", MaxSampledTexturesPerShaderStageAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxSamplersPerShaderStage", MaxSamplersPerShaderStageAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxStorageBuffersPerShaderStage", MaxStorageBuffersPerShaderStageAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxStorageTexturesPerShaderStage", MaxStorageTexturesPerShaderStageAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxUniformBuffersPerShaderStage", MaxUniformBuffersPerShaderStageAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxUniformBufferBindingSize", MaxUniformBufferBindingSizeAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxStorageBufferBindingSize", MaxStorageBufferBindingSizeAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"minUniformBufferOffsetAlignment", MinUniformBufferOffsetAlignmentAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"minStorageBufferOffsetAlignment", MinStorageBufferOffsetAlignmentAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxVertexBuffers", MaxVertexBuffersAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxVertexAttributes", MaxVertexAttributesAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxVertexBufferArrayStride", MaxVertexBufferArrayStrideAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxInterStageShaderComponents", MaxInterStageShaderComponentsAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxInterStageShaderVariables", MaxInterStageShaderVariablesAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxColorAttachments", MaxColorAttachmentsAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxComputeWorkgroupStorageSize", MaxComputeWorkgroupStorageSizeAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxComputeInvocationsPerWorkgroup", MaxComputeInvocationsPerWorkgroupAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxComputeWorkgroupSizeX", MaxComputeWorkgroupSizeXAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxComputeWorkgroupSizeY", MaxComputeWorkgroupSizeYAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxComputeWorkgroupSizeZ", MaxComputeWorkgroupSizeZAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"maxComputeWorkgroupsPerDimension", MaxComputeWorkgroupsPerDimensionAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}







}




}  // namespace blink
