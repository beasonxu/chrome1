// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_advertising_event_init.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_string_unsignedlong.h"
#include "third_party/blink/renderer/modules/bluetooth/bluetooth_device.h"
#include "third_party/blink/renderer/modules/bluetooth/bluetooth_manufacturer_data_map.h"
#include "third_party/blink/renderer/modules/bluetooth/bluetooth_service_data_map.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



BluetoothAdvertisingEventInit* BluetoothAdvertisingEventInit::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  BluetoothAdvertisingEventInit* dictionary = MakeGarbageCollected<BluetoothAdvertisingEventInit>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "BluetoothAdvertisingEventInit";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 BluetoothAdvertisingEventInit::BluetoothAdvertisingEventInit() {
  
}

 BluetoothAdvertisingEventInit::BluetoothAdvertisingEventInit(v8::Isolate* isolate) : EventInit(isolate) {
  
}






















String BluetoothAdvertisingEventInit::getNameOr(const String& fallback_value) const {
  if (!hasName()) {
  return fallback_value;
}
return member_name_;
}

String BluetoothAdvertisingEventInit::getNameOr(String&& fallback_value) const {
  if (!hasName()) {
  return std::move(fallback_value);
}
return member_name_;
}

void BluetoothAdvertisingEventInit::setName(const String& value) {
  member_name_ = value;
has_name_ = true;
}

void BluetoothAdvertisingEventInit::setName(String&& value) {
  member_name_ = std::move(value);
has_name_ = true;
}

























HeapVector<Member<V8UnionStringOrUnsignedLong>> BluetoothAdvertisingEventInit::getUuidsOr(const HeapVector<Member<V8UnionStringOrUnsignedLong>>& fallback_value) const {
  if (!hasUuids()) {
  return fallback_value;
}
return member_uuids_;
}

HeapVector<Member<V8UnionStringOrUnsignedLong>> BluetoothAdvertisingEventInit::getUuidsOr(HeapVector<Member<V8UnionStringOrUnsignedLong>>&& fallback_value) const {
  if (!hasUuids()) {
  return std::move(fallback_value);
}
return member_uuids_;
}

void BluetoothAdvertisingEventInit::setUuids(const HeapVector<Member<V8UnionStringOrUnsignedLong>>& value) {
  member_uuids_ = value;
has_uuids_ = true;
}

void BluetoothAdvertisingEventInit::setUuids(HeapVector<Member<V8UnionStringOrUnsignedLong>>&& value) {
  member_uuids_ = std::move(value);
has_uuids_ = true;
}




void BluetoothAdvertisingEventInit::Trace(Visitor* visitor) const {
  TraceIfNeeded<uint16_t>::Trace(visitor, member_appearance_);
TraceIfNeeded<Member<BluetoothDevice>>::Trace(visitor, member_device_);
TraceIfNeeded<Member<BluetoothManufacturerDataMap>>::Trace(visitor, member_manufacturer_data_);
TraceIfNeeded<String>::Trace(visitor, member_name_);
TraceIfNeeded<int8_t>::Trace(visitor, member_rssi_);
TraceIfNeeded<Member<BluetoothServiceDataMap>>::Trace(visitor, member_service_data_);
TraceIfNeeded<int8_t>::Trace(visitor, member_tx_power_);
TraceIfNeeded<HeapVector<Member<V8UnionStringOrUnsignedLong>>>::Trace(visitor, member_uuids_);
EventInit::Trace(visitor);
}

bool BluetoothAdvertisingEventInit::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  if (!EventInit::FillV8ObjectWithMembers(script_state, v8_dictionary)) {
  return false;
}

v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAppearance()) {
  if (!ToV8Traits<IDLUnsignedShort>::ToV8(script_state, member_appearance_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDevice()) {
  if (!ToV8Traits<BluetoothDevice>::ToV8(script_state, member_device_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasManufacturerData()) {
  if (!ToV8Traits<BluetoothManufacturerDataMap>::ToV8(script_state, member_manufacturer_data_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasName()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_name_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasRssi()) {
  if (!ToV8Traits<IDLByte>::ToV8(script_state, member_rssi_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasServiceData()) {
  if (!ToV8Traits<BluetoothServiceDataMap>::ToV8(script_state, member_service_data_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTxPower()) {
  if (!ToV8Traits<IDLByte>::ToV8(script_state, member_tx_power_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUuids()) {
  if (!ToV8Traits<IDLSequence<V8UnionStringOrUnsignedLong>>::ToV8(script_state, member_uuids_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void BluetoothAdvertisingEventInit::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  EventInit::FillMembersFromV8Object(isolate, v8_dictionary, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

const char* const class_like_name = "BluetoothAdvertisingEventInit";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("appearance");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedShort, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_appearance_, member_appearance_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("device");
constexpr bool is_required = true;
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<BluetoothDevice, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_device_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("manufacturerData");
if (!bindings::GetDictionaryMemberFromV8Object<BluetoothManufacturerDataMap, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_manufacturer_data_, member_manufacturer_data_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("name");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_name_, member_name_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("rssi");
if (!bindings::GetDictionaryMemberFromV8Object<IDLByte, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_rssi_, member_rssi_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("serviceData");
if (!bindings::GetDictionaryMemberFromV8Object<BluetoothServiceDataMap, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_service_data_, member_service_data_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("txPower");
if (!bindings::GetDictionaryMemberFromV8Object<IDLByte, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_tx_power_, member_tx_power_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("uuids");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<V8UnionStringOrUnsignedLong>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_uuids_, member_uuids_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> BluetoothAdvertisingEventInit::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"appearance",
"device",
"manufacturerData",
"name",
"rssi",
"serviceData",
"txPower",
"uuids",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
