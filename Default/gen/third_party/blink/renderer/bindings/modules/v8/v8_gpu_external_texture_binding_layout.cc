// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_external_texture_binding_layout.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



GPUExternalTextureBindingLayout* GPUExternalTextureBindingLayout::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  GPUExternalTextureBindingLayout* dictionary = MakeGarbageCollected<GPUExternalTextureBindingLayout>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "GPUExternalTextureBindingLayout";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 GPUExternalTextureBindingLayout::GPUExternalTextureBindingLayout() {
  
}

 GPUExternalTextureBindingLayout::GPUExternalTextureBindingLayout(v8::Isolate* isolate) {
  
}




void GPUExternalTextureBindingLayout::Trace(Visitor* visitor) const {
  bindings::DictionaryBase::Trace(visitor);
}

bool GPUExternalTextureBindingLayout::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  return true;
}

void GPUExternalTextureBindingLayout::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  
}

const base::span<const v8::Eternal<v8::Name>> GPUExternalTextureBindingLayout::GetV8OwnMemberNames(v8::Isolate* isolate) {
  return {};
}


}  // namespace blink
