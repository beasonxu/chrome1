// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_device_descriptor.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_queue_descriptor.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



GPUDeviceDescriptor* GPUDeviceDescriptor::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  GPUDeviceDescriptor* dictionary = MakeGarbageCollected<GPUDeviceDescriptor>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "GPUDeviceDescriptor";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 GPUDeviceDescriptor::GPUDeviceDescriptor() : member_default_queue_(GPUQueueDescriptor::Create()) {
  
}

 GPUDeviceDescriptor::GPUDeviceDescriptor(v8::Isolate* isolate) : GPUObjectDescriptorBase(isolate), member_default_queue_(GPUQueueDescriptor::Create()) {
  
}








void GPUDeviceDescriptor::setRequiredFeatures(const Vector<V8GPUFeatureName>& value) {
  member_required_features_ = value;
}

void GPUDeviceDescriptor::setRequiredFeatures(Vector<V8GPUFeatureName>&& value) {
  member_required_features_ = std::move(value);
}




Vector<std::pair<String, uint64_t>> GPUDeviceDescriptor::getRequiredLimitsOr(const Vector<std::pair<String, uint64_t>>& fallback_value) const {
  if (!hasRequiredLimits()) {
  return fallback_value;
}
return member_required_limits_;
}

Vector<std::pair<String, uint64_t>> GPUDeviceDescriptor::getRequiredLimitsOr(Vector<std::pair<String, uint64_t>>&& fallback_value) const {
  if (!hasRequiredLimits()) {
  return std::move(fallback_value);
}
return member_required_limits_;
}

void GPUDeviceDescriptor::setRequiredLimits(const Vector<std::pair<String, uint64_t>>& value) {
  member_required_limits_ = value;
has_required_limits_ = true;
}

void GPUDeviceDescriptor::setRequiredLimits(Vector<std::pair<String, uint64_t>>&& value) {
  member_required_limits_ = std::move(value);
has_required_limits_ = true;
}




void GPUDeviceDescriptor::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<GPUQueueDescriptor>>::Trace(visitor, member_default_queue_);
TraceIfNeeded<Vector<V8GPUFeatureName>>::Trace(visitor, member_required_features_);
TraceIfNeeded<Vector<std::pair<String, uint64_t>>>::Trace(visitor, member_required_limits_);
GPUObjectDescriptorBase::Trace(visitor);
}

bool GPUDeviceDescriptor::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  if (!GPUObjectDescriptorBase::FillV8ObjectWithMembers(script_state, v8_dictionary)) {
  return false;
}

v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasDefaultQueue()) {
  if (!ToV8Traits<GPUQueueDescriptor>::ToV8(script_state, member_default_queue_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasRequiredFeatures()) {
  if (!ToV8Traits<IDLSequence<V8GPUFeatureName>>::ToV8(script_state, member_required_features_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasRequiredLimits()) {
  if (!ToV8Traits<IDLRecord<IDLString, IDLUnsignedLongLongEnforceRange>>::ToV8(script_state, member_required_limits_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void GPUDeviceDescriptor::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  GPUObjectDescriptorBase::FillMembersFromV8Object(isolate, v8_dictionary, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

const char* const class_like_name = "GPUDeviceDescriptor";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("defaultQueue");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<GPUQueueDescriptor, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_default_queue_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("requiredFeatures");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<V8GPUFeatureName>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_required_features_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("requiredLimits");
if (!bindings::GetDictionaryMemberFromV8Object<IDLRecord<IDLString, IDLUnsignedLongLongEnforceRange>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_required_limits_, member_required_limits_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> GPUDeviceDescriptor::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"defaultQueue",
"requiredFeatures",
"requiredLimits",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
