// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_COMPRESSED_TEXTURE_ASTC_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_COMPRESSED_TEXTURE_ASTC_H_

#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/v8_interface_bridge.h"

namespace blink {

class ExecutionContext;
class WebGLCompressedTextureASTC;
struct WrapperTypeInfo;

class MODULES_EXPORT V8WebGLCompressedTextureASTC final : public bindings::V8InterfaceBridge<V8WebGLCompressedTextureASTC, WebGLCompressedTextureASTC> {
  
  public:
// Constants
class Constant final {
  STATIC_ONLY(Constant);

  public:
static constexpr uint32_t kCompressedRgbaAstc4X4Khr = 0x93B0;
static constexpr uint32_t kCompressedRgbaAstc5X4Khr = 0x93B1;
static constexpr uint32_t kCompressedRgbaAstc5X5Khr = 0x93B2;
static constexpr uint32_t kCompressedRgbaAstc6X5Khr = 0x93B3;
static constexpr uint32_t kCompressedRgbaAstc6X6Khr = 0x93B4;
static constexpr uint32_t kCompressedRgbaAstc8X5Khr = 0x93B5;
static constexpr uint32_t kCompressedRgbaAstc8X6Khr = 0x93B6;
static constexpr uint32_t kCompressedRgbaAstc8X8Khr = 0x93B7;
static constexpr uint32_t kCompressedRgbaAstc10X5Khr = 0x93B8;
static constexpr uint32_t kCompressedRgbaAstc10X6Khr = 0x93B9;
static constexpr uint32_t kCompressedRgbaAstc10X8Khr = 0x93BA;
static constexpr uint32_t kCompressedRgbaAstc10X10Khr = 0x93BB;
static constexpr uint32_t kCompressedRgbaAstc12X10Khr = 0x93BC;
static constexpr uint32_t kCompressedRgbaAstc12X12Khr = 0x93BD;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc4X4Khr = 0x93D0;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc5X4Khr = 0x93D1;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc5X5Khr = 0x93D2;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc6X5Khr = 0x93D3;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc6X6Khr = 0x93D4;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc8X5Khr = 0x93D5;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc8X6Khr = 0x93D6;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc8X8Khr = 0x93D7;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc10X5Khr = 0x93D8;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc10X6Khr = 0x93D9;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc10X8Khr = 0x93DA;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc10X10Khr = 0x93DB;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc12X10Khr = 0x93DC;
static constexpr uint32_t kCompressedSrgb8Alpha8Astc12X12Khr = 0x93DD;

  
  
  
};

static bool IsExposed(ExecutionContext* execution_context);

static constexpr const WrapperTypeInfo* GetWrapperTypeInfo() {
  return &wrapper_type_info_;
}

static void InstallInterfaceTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> interface_template);
static void InstallUnconditionalProperties(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> instance_template, v8::Local<v8::Template> prototype_template, v8::Local<v8::Template> interface_template);
static void InstallContextDependentProperties(v8::Local<v8::Context> context, const DOMWrapperWorld& world, v8::Local<v8::Object> instance_object, v8::Local<v8::Object> prototype_object, v8::Local<v8::Object> interface_object, v8::Local<v8::Template> interface_template, FeatureSelector feature_selector);


  
  private:
static const WrapperTypeInfo wrapper_type_info_;


  friend class WebGLCompressedTextureASTC;
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_COMPRESSED_TEXTURE_ASTC_H_
