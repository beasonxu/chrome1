// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_authentication_extensions_client_inputs.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_arraybuffer_arraybufferview.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_authentication_extensions_large_blob_inputs.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_authentication_extensions_payment_inputs.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_cable_authentication_data.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_cable_registration_data.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_remote_desktop_client_override.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



AuthenticationExtensionsClientInputs* AuthenticationExtensionsClientInputs::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  AuthenticationExtensionsClientInputs* dictionary = MakeGarbageCollected<AuthenticationExtensionsClientInputs>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "AuthenticationExtensionsClientInputs";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs() {
  
}

 AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(v8::Isolate* isolate) {
  
}



String AuthenticationExtensionsClientInputs::getAppidOr(const String& fallback_value) const {
  if (!hasAppid()) {
  return fallback_value;
}
return member_appid_;
}

String AuthenticationExtensionsClientInputs::getAppidOr(String&& fallback_value) const {
  if (!hasAppid()) {
  return std::move(fallback_value);
}
return member_appid_;
}

void AuthenticationExtensionsClientInputs::setAppid(const String& value) {
  member_appid_ = value;
has_appid_ = true;
}

void AuthenticationExtensionsClientInputs::setAppid(String&& value) {
  member_appid_ = std::move(value);
has_appid_ = true;
}




String AuthenticationExtensionsClientInputs::getAppidExcludeOr(const String& fallback_value) const {
  if (!hasAppidExclude()) {
  return fallback_value;
}
return member_appid_exclude_;
}

String AuthenticationExtensionsClientInputs::getAppidExcludeOr(String&& fallback_value) const {
  if (!hasAppidExclude()) {
  return std::move(fallback_value);
}
return member_appid_exclude_;
}

void AuthenticationExtensionsClientInputs::setAppidExclude(const String& value) {
  member_appid_exclude_ = value;
has_appid_exclude_ = true;
}

void AuthenticationExtensionsClientInputs::setAppidExclude(String&& value) {
  member_appid_exclude_ = std::move(value);
has_appid_exclude_ = true;
}




HeapVector<Member<CableAuthenticationData>> AuthenticationExtensionsClientInputs::getCableAuthenticationOr(const HeapVector<Member<CableAuthenticationData>>& fallback_value) const {
  if (!hasCableAuthentication()) {
  return fallback_value;
}
return member_cable_authentication_;
}

HeapVector<Member<CableAuthenticationData>> AuthenticationExtensionsClientInputs::getCableAuthenticationOr(HeapVector<Member<CableAuthenticationData>>&& fallback_value) const {
  if (!hasCableAuthentication()) {
  return std::move(fallback_value);
}
return member_cable_authentication_;
}

void AuthenticationExtensionsClientInputs::setCableAuthentication(const HeapVector<Member<CableAuthenticationData>>& value) {
  member_cable_authentication_ = value;
has_cable_authentication_ = true;
}

void AuthenticationExtensionsClientInputs::setCableAuthentication(HeapVector<Member<CableAuthenticationData>>&& value) {
  member_cable_authentication_ = std::move(value);
has_cable_authentication_ = true;
}























String AuthenticationExtensionsClientInputs::getCredentialProtectionPolicyOr(const String& fallback_value) const {
  if (!hasCredentialProtectionPolicy()) {
  return fallback_value;
}
return member_credential_protection_policy_;
}

String AuthenticationExtensionsClientInputs::getCredentialProtectionPolicyOr(String&& fallback_value) const {
  if (!hasCredentialProtectionPolicy()) {
  return std::move(fallback_value);
}
return member_credential_protection_policy_;
}

void AuthenticationExtensionsClientInputs::setCredentialProtectionPolicy(const String& value) {
  member_credential_protection_policy_ = value;
has_credential_protection_policy_ = true;
}

void AuthenticationExtensionsClientInputs::setCredentialProtectionPolicy(String&& value) {
  member_credential_protection_policy_ = std::move(value);
has_credential_protection_policy_ = true;
}

































































void AuthenticationExtensionsClientInputs::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_appid_);
TraceIfNeeded<String>::Trace(visitor, member_appid_exclude_);
TraceIfNeeded<HeapVector<Member<CableAuthenticationData>>>::Trace(visitor, member_cable_authentication_);
TraceIfNeeded<Member<CableRegistrationData>>::Trace(visitor, member_cable_registration_);
TraceIfNeeded<Member<V8UnionArrayBufferOrArrayBufferView>>::Trace(visitor, member_cred_blob_);
TraceIfNeeded<bool>::Trace(visitor, member_cred_props_);
TraceIfNeeded<String>::Trace(visitor, member_credential_protection_policy_);
TraceIfNeeded<bool>::Trace(visitor, member_enforce_credential_protection_policy_);
TraceIfNeeded<bool>::Trace(visitor, member_get_cred_blob_);
TraceIfNeeded<bool>::Trace(visitor, member_google_legacy_appid_support_);
TraceIfNeeded<bool>::Trace(visitor, member_hmac_create_secret_);
TraceIfNeeded<Member<AuthenticationExtensionsLargeBlobInputs>>::Trace(visitor, member_large_blob_);
TraceIfNeeded<bool>::Trace(visitor, member_min_pin_length_);
TraceIfNeeded<Member<AuthenticationExtensionsPaymentInputs>>::Trace(visitor, member_payment_);
TraceIfNeeded<Member<RemoteDesktopClientOverride>>::Trace(visitor, member_remote_desktop_client_override_);
TraceIfNeeded<bool>::Trace(visitor, member_uvm_);
bindings::DictionaryBase::Trace(visitor);
}

bool AuthenticationExtensionsClientInputs::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAppid()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_appid_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAppidExclude()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_appid_exclude_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCableAuthentication()) {
  if (!ToV8Traits<IDLSequence<CableAuthenticationData>>::ToV8(script_state, member_cable_authentication_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCableRegistration()) {
  if (!ToV8Traits<CableRegistrationData>::ToV8(script_state, member_cable_registration_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCredBlob()) {
  if (!ToV8Traits<V8UnionArrayBufferOrArrayBufferView>::ToV8(script_state, member_cred_blob_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCredProps()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_cred_props_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCredentialProtectionPolicy()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_credential_protection_policy_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasEnforceCredentialProtectionPolicy()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_enforce_credential_protection_policy_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasGetCredBlob()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_get_cred_blob_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasGoogleLegacyAppidSupport()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_google_legacy_appid_support_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasHmacCreateSecret()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_hmac_create_secret_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[10].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::WebAuthenticationLargeBlobExtensionEnabled()) {
  if (hasLargeBlob()) {
  if (!ToV8Traits<AuthenticationExtensionsLargeBlobInputs>::ToV8(script_state, member_large_blob_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[11].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasMinPinLength()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_min_pin_length_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[12].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::SecurePaymentConfirmationEnabled()) {
  if (hasPayment()) {
  if (!ToV8Traits<AuthenticationExtensionsPaymentInputs>::ToV8(script_state, member_payment_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[13].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (RuntimeEnabledFeatures::WebAuthenticationRemoteDesktopSupportEnabled()) {
  if (hasRemoteDesktopClientOverride()) {
  if (!ToV8Traits<RemoteDesktopClientOverride>::ToV8(script_state, member_remote_desktop_client_override_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[14].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasUvm()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_uvm_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[15].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void AuthenticationExtensionsClientInputs::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "AuthenticationExtensionsClientInputs";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("appid");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_appid_, member_appid_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("appidExclude");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_appid_exclude_, member_appid_exclude_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("cableAuthentication");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<CableAuthenticationData>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_cable_authentication_, member_cable_authentication_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("cableRegistration");
if (!bindings::GetDictionaryMemberFromV8Object<CableRegistrationData, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_cable_registration_, member_cable_registration_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("credBlob");
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionArrayBufferOrArrayBufferView, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_cred_blob_, member_cred_blob_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("credProps");
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_cred_props_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("credentialProtectionPolicy");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_credential_protection_policy_, member_credential_protection_policy_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("enforceCredentialProtectionPolicy");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), fallback_presence_var, member_enforce_credential_protection_policy_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("getCredBlob");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), has_get_cred_blob_, member_get_cred_blob_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("googleLegacyAppidSupport");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), has_google_legacy_appid_support_, member_google_legacy_appid_support_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("hmacCreateSecret");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[10].Get(isolate), has_hmac_create_secret_, member_hmac_create_secret_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::WebAuthenticationLargeBlobExtensionEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("largeBlob");
if (!bindings::GetDictionaryMemberFromV8Object<AuthenticationExtensionsLargeBlobInputs, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[11].Get(isolate), has_large_blob_, member_large_blob_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("minPinLength");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[12].Get(isolate), has_min_pin_length_, member_min_pin_length_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::SecurePaymentConfirmationEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("payment");
if (!bindings::GetDictionaryMemberFromV8Object<AuthenticationExtensionsPaymentInputs, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[13].Get(isolate), has_payment_, member_payment_, try_block, exception_state)) {
  return;
}
}
if (RuntimeEnabledFeatures::WebAuthenticationRemoteDesktopSupportEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("remoteDesktopClientOverride");
if (!bindings::GetDictionaryMemberFromV8Object<RemoteDesktopClientOverride, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[14].Get(isolate), has_remote_desktop_client_override_, member_remote_desktop_client_override_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("uvm");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[15].Get(isolate), has_uvm_, member_uvm_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> AuthenticationExtensionsClientInputs::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"appid",
"appidExclude",
"cableAuthentication",
"cableRegistration",
"credBlob",
"credProps",
"credentialProtectionPolicy",
"enforceCredentialProtectionPolicy",
"getCredBlob",
"googleLegacyAppidSupport",
"hmacCreateSecret",
"largeBlob",
"minPinLength",
"payment",
"remoteDesktopClientOverride",
"uvm",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
