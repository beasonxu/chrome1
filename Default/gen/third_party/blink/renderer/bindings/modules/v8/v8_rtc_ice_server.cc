// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_ice_server.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_string_stringsequence.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



RTCIceServer* RTCIceServer::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  RTCIceServer* dictionary = MakeGarbageCollected<RTCIceServer>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "RTCIceServer";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 RTCIceServer::RTCIceServer() {
  
}

 RTCIceServer::RTCIceServer(v8::Isolate* isolate) {
  
}



String RTCIceServer::getCredentialOr(const String& fallback_value) const {
  if (!hasCredential()) {
  return fallback_value;
}
return member_credential_;
}

String RTCIceServer::getCredentialOr(String&& fallback_value) const {
  if (!hasCredential()) {
  return std::move(fallback_value);
}
return member_credential_;
}

void RTCIceServer::setCredential(const String& value) {
  member_credential_ = value;
has_credential_ = true;
}

void RTCIceServer::setCredential(String&& value) {
  member_credential_ = std::move(value);
has_credential_ = true;
}




String RTCIceServer::getUrlOr(const String& fallback_value) const {
  if (!hasUrl()) {
  return fallback_value;
}
return member_url_;
}

String RTCIceServer::getUrlOr(String&& fallback_value) const {
  if (!hasUrl()) {
  return std::move(fallback_value);
}
return member_url_;
}

void RTCIceServer::setUrl(const String& value) {
  member_url_ = value;
has_url_ = true;
}

void RTCIceServer::setUrl(String&& value) {
  member_url_ = std::move(value);
has_url_ = true;
}











String RTCIceServer::getUsernameOr(const String& fallback_value) const {
  if (!hasUsername()) {
  return fallback_value;
}
return member_username_;
}

String RTCIceServer::getUsernameOr(String&& fallback_value) const {
  if (!hasUsername()) {
  return std::move(fallback_value);
}
return member_username_;
}

void RTCIceServer::setUsername(const String& value) {
  member_username_ = value;
has_username_ = true;
}

void RTCIceServer::setUsername(String&& value) {
  member_username_ = std::move(value);
has_username_ = true;
}




void RTCIceServer::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_credential_);
TraceIfNeeded<String>::Trace(visitor, member_url_);
TraceIfNeeded<Member<V8UnionStringOrStringSequence>>::Trace(visitor, member_urls_);
TraceIfNeeded<String>::Trace(visitor, member_username_);
bindings::DictionaryBase::Trace(visitor);
}

bool RTCIceServer::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasCredential()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_credential_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUrl()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_url_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUrls()) {
  if (!ToV8Traits<V8UnionStringOrStringSequence>::ToV8(script_state, member_urls_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUsername()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_username_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void RTCIceServer::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "RTCIceServer";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("credential");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_credential_, member_credential_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("url");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_url_, member_url_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("urls");
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionStringOrStringSequence, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_urls_, member_urls_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("username");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_username_, member_username_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> RTCIceServer::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"credential",
"url",
"urls",
"username",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
