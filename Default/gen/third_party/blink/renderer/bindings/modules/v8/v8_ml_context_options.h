// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ML_CONTEXT_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ML_CONTEXT_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_device_preference.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_model_format.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_power_preference.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT MLContextOptions : public bindings::DictionaryBase {
  
  public:
static MLContextOptions* Create() {
  return MakeGarbageCollected<MLContextOptions>();
}
static MLContextOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<MLContextOptions>(isolate);
}
static MLContextOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  MLContextOptions();
explicit  MLContextOptions(v8::Isolate* isolate);

bool hasDevicePreference() const {
  return true;
}
V8MLDevicePreference devicePreference() const {
  return member_device_preference_;
}
void setDevicePreference(V8MLDevicePreference value) {
  member_device_preference_ = value;
}
void setDevicePreference(V8MLDevicePreference::Enum value) {
  member_device_preference_ = V8MLDevicePreference(value);
}

bool hasModelFormat() const {
  return true;
}
V8MLModelFormat modelFormat() const {
  return member_model_format_;
}
void setModelFormat(V8MLModelFormat value) {
  member_model_format_ = value;
}
void setModelFormat(V8MLModelFormat::Enum value) {
  member_model_format_ = V8MLModelFormat(value);
}

bool hasNumThreads() const {
  return true;
}
uint32_t numThreads() const {
  return member_num_threads_;
}
void setNumThreads(uint32_t value) {
  member_num_threads_ = value;
}

bool hasPowerPreference() const {
  return true;
}
V8MLPowerPreference powerPreference() const {
  return member_power_preference_;
}
void setPowerPreference(V8MLPowerPreference value) {
  member_power_preference_ = value;
}
void setPowerPreference(V8MLPowerPreference::Enum value) {
  member_power_preference_ = V8MLPowerPreference(value);
}


// Obsolete accessor functions
void setDevicePreference(const String& value) {
  member_device_preference_ = V8MLDevicePreference::Create(value).value();
}
void setModelFormat(const String& value) {
  member_model_format_ = V8MLModelFormat::Create(value).value();
}
void setPowerPreference(const String& value) {
  member_power_preference_ = V8MLPowerPreference::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



V8MLDevicePreference member_device_preference_{V8MLDevicePreference::Enum::kAuto};
V8MLModelFormat member_model_format_{V8MLModelFormat::Enum::kTflite};
uint32_t member_num_threads_{0};
V8MLPowerPreference member_power_preference_{V8MLPowerPreference::Enum::kAuto};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ML_CONTEXT_OPTIONS_H_
