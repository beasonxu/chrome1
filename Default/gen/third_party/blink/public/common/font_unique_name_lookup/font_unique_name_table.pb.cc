// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: font_unique_name_table.proto

#include "font_unique_name_table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace blink {
PROTOBUF_CONSTEXPR FontUniqueNameTable_UniqueFont::FontUniqueNameTable_UniqueFont(
    ::_pbi::ConstantInitialized)
  : file_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ttc_index_(0u){}
struct FontUniqueNameTable_UniqueFontDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontUniqueNameTable_UniqueFontDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontUniqueNameTable_UniqueFontDefaultTypeInternal() {}
  union {
    FontUniqueNameTable_UniqueFont _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontUniqueNameTable_UniqueFontDefaultTypeInternal _FontUniqueNameTable_UniqueFont_default_instance_;
PROTOBUF_CONSTEXPR FontUniqueNameTable_UniqueNameToFontMapping::FontUniqueNameTable_UniqueNameToFontMapping(
    ::_pbi::ConstantInitialized)
  : font_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , font_index_(0u){}
struct FontUniqueNameTable_UniqueNameToFontMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontUniqueNameTable_UniqueNameToFontMappingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontUniqueNameTable_UniqueNameToFontMappingDefaultTypeInternal() {}
  union {
    FontUniqueNameTable_UniqueNameToFontMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontUniqueNameTable_UniqueNameToFontMappingDefaultTypeInternal _FontUniqueNameTable_UniqueNameToFontMapping_default_instance_;
PROTOBUF_CONSTEXPR FontUniqueNameTable::FontUniqueNameTable(
    ::_pbi::ConstantInitialized)
  : fonts_()
  , name_map_()
  , stored_for_platform_version_identifier_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct FontUniqueNameTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontUniqueNameTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontUniqueNameTableDefaultTypeInternal() {}
  union {
    FontUniqueNameTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontUniqueNameTableDefaultTypeInternal _FontUniqueNameTable_default_instance_;
}  // namespace blink
namespace blink {

// ===================================================================

class FontUniqueNameTable_UniqueFont::_Internal {
 public:
  using HasBits = decltype(std::declval<FontUniqueNameTable_UniqueFont>()._has_bits_);
  static void set_has_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ttc_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FontUniqueNameTable_UniqueFont::FontUniqueNameTable_UniqueFont(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blink.FontUniqueNameTable.UniqueFont)
}
FontUniqueNameTable_UniqueFont::FontUniqueNameTable_UniqueFont(const FontUniqueNameTable_UniqueFont& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_path()) {
    file_path_.Set(from._internal_file_path(), 
      GetArenaForAllocation());
  }
  ttc_index_ = from.ttc_index_;
  // @@protoc_insertion_point(copy_constructor:blink.FontUniqueNameTable.UniqueFont)
}

inline void FontUniqueNameTable_UniqueFont::SharedCtor() {
file_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ttc_index_ = 0u;
}

FontUniqueNameTable_UniqueFont::~FontUniqueNameTable_UniqueFont() {
  // @@protoc_insertion_point(destructor:blink.FontUniqueNameTable.UniqueFont)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FontUniqueNameTable_UniqueFont::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.Destroy();
}

void FontUniqueNameTable_UniqueFont::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FontUniqueNameTable_UniqueFont::Clear() {
// @@protoc_insertion_point(message_clear_start:blink.FontUniqueNameTable.UniqueFont)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_path_.ClearNonDefaultToEmpty();
  }
  ttc_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FontUniqueNameTable_UniqueFont::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string file_path = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 ttc_index = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_ttc_index(&has_bits);
          ttc_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FontUniqueNameTable_UniqueFont::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blink.FontUniqueNameTable.UniqueFont)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_path = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_file_path(), target);
  }

  // required uint32 ttc_index = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_ttc_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blink.FontUniqueNameTable.UniqueFont)
  return target;
}

size_t FontUniqueNameTable_UniqueFont::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:blink.FontUniqueNameTable.UniqueFont)
  size_t total_size = 0;

  if (_internal_has_file_path()) {
    // required string file_path = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  if (_internal_has_ttc_index()) {
    // required uint32 ttc_index = 20;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ttc_index());
  }

  return total_size;
}
size_t FontUniqueNameTable_UniqueFont::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blink.FontUniqueNameTable.UniqueFont)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string file_path = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());

    // required uint32 ttc_index = 20;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ttc_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FontUniqueNameTable_UniqueFont::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FontUniqueNameTable_UniqueFont*>(
      &from));
}

void FontUniqueNameTable_UniqueFont::MergeFrom(const FontUniqueNameTable_UniqueFont& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blink.FontUniqueNameTable.UniqueFont)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_path(from._internal_file_path());
    }
    if (cached_has_bits & 0x00000002u) {
      ttc_index_ = from.ttc_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FontUniqueNameTable_UniqueFont::CopyFrom(const FontUniqueNameTable_UniqueFont& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blink.FontUniqueNameTable.UniqueFont)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontUniqueNameTable_UniqueFont::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FontUniqueNameTable_UniqueFont::InternalSwap(FontUniqueNameTable_UniqueFont* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  swap(ttc_index_, other->ttc_index_);
}

std::string FontUniqueNameTable_UniqueFont::GetTypeName() const {
  return "blink.FontUniqueNameTable.UniqueFont";
}


// ===================================================================

class FontUniqueNameTable_UniqueNameToFontMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<FontUniqueNameTable_UniqueNameToFontMapping>()._has_bits_);
  static void set_has_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_font_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FontUniqueNameTable_UniqueNameToFontMapping::FontUniqueNameTable_UniqueNameToFontMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blink.FontUniqueNameTable.UniqueNameToFontMapping)
}
FontUniqueNameTable_UniqueNameToFontMapping::FontUniqueNameTable_UniqueNameToFontMapping(const FontUniqueNameTable_UniqueNameToFontMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_font_name()) {
    font_name_.Set(from._internal_font_name(), 
      GetArenaForAllocation());
  }
  font_index_ = from.font_index_;
  // @@protoc_insertion_point(copy_constructor:blink.FontUniqueNameTable.UniqueNameToFontMapping)
}

inline void FontUniqueNameTable_UniqueNameToFontMapping::SharedCtor() {
font_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  font_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
font_index_ = 0u;
}

FontUniqueNameTable_UniqueNameToFontMapping::~FontUniqueNameTable_UniqueNameToFontMapping() {
  // @@protoc_insertion_point(destructor:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FontUniqueNameTable_UniqueNameToFontMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  font_name_.Destroy();
}

void FontUniqueNameTable_UniqueNameToFontMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FontUniqueNameTable_UniqueNameToFontMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    font_name_.ClearNonDefaultToEmpty();
  }
  font_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FontUniqueNameTable_UniqueNameToFontMapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string font_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_font_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 font_index = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_font_index(&has_bits);
          font_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FontUniqueNameTable_UniqueNameToFontMapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string font_name = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_font_name(), target);
  }

  // required uint32 font_index = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_font_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  return target;
}

size_t FontUniqueNameTable_UniqueNameToFontMapping::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  size_t total_size = 0;

  if (_internal_has_font_name()) {
    // required string font_name = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_name());
  }

  if (_internal_has_font_index()) {
    // required uint32 font_index = 20;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_font_index());
  }

  return total_size;
}
size_t FontUniqueNameTable_UniqueNameToFontMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string font_name = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_name());

    // required uint32 font_index = 20;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_font_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FontUniqueNameTable_UniqueNameToFontMapping::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FontUniqueNameTable_UniqueNameToFontMapping*>(
      &from));
}

void FontUniqueNameTable_UniqueNameToFontMapping::MergeFrom(const FontUniqueNameTable_UniqueNameToFontMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_font_name(from._internal_font_name());
    }
    if (cached_has_bits & 0x00000002u) {
      font_index_ = from.font_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FontUniqueNameTable_UniqueNameToFontMapping::CopyFrom(const FontUniqueNameTable_UniqueNameToFontMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontUniqueNameTable_UniqueNameToFontMapping::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FontUniqueNameTable_UniqueNameToFontMapping::InternalSwap(FontUniqueNameTable_UniqueNameToFontMapping* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &font_name_, lhs_arena,
      &other->font_name_, rhs_arena
  );
  swap(font_index_, other->font_index_);
}

std::string FontUniqueNameTable_UniqueNameToFontMapping::GetTypeName() const {
  return "blink.FontUniqueNameTable.UniqueNameToFontMapping";
}


// ===================================================================

class FontUniqueNameTable::_Internal {
 public:
  using HasBits = decltype(std::declval<FontUniqueNameTable>()._has_bits_);
  static void set_has_stored_for_platform_version_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FontUniqueNameTable::FontUniqueNameTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  fonts_(arena),
  name_map_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blink.FontUniqueNameTable)
}
FontUniqueNameTable::FontUniqueNameTable(const FontUniqueNameTable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      fonts_(from.fonts_),
      name_map_(from.name_map_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  stored_for_platform_version_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stored_for_platform_version_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stored_for_platform_version_identifier()) {
    stored_for_platform_version_identifier_.Set(from._internal_stored_for_platform_version_identifier(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:blink.FontUniqueNameTable)
}

inline void FontUniqueNameTable::SharedCtor() {
stored_for_platform_version_identifier_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stored_for_platform_version_identifier_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FontUniqueNameTable::~FontUniqueNameTable() {
  // @@protoc_insertion_point(destructor:blink.FontUniqueNameTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FontUniqueNameTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stored_for_platform_version_identifier_.Destroy();
}

void FontUniqueNameTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FontUniqueNameTable::Clear() {
// @@protoc_insertion_point(message_clear_start:blink.FontUniqueNameTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fonts_.Clear();
  name_map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stored_for_platform_version_identifier_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FontUniqueNameTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string stored_for_platform_version_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stored_for_platform_version_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .blink.FontUniqueNameTable.UniqueFont fonts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fonts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .blink.FontUniqueNameTable.UniqueNameToFontMapping name_map = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_name_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FontUniqueNameTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blink.FontUniqueNameTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string stored_for_platform_version_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stored_for_platform_version_identifier(), target);
  }

  // repeated .blink.FontUniqueNameTable.UniqueFont fonts = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fonts_size()); i < n; i++) {
    const auto& repfield = this->_internal_fonts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .blink.FontUniqueNameTable.UniqueNameToFontMapping name_map = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_name_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_name_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blink.FontUniqueNameTable)
  return target;
}

size_t FontUniqueNameTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blink.FontUniqueNameTable)
  size_t total_size = 0;

  // required string stored_for_platform_version_identifier = 1;
  if (_internal_has_stored_for_platform_version_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stored_for_platform_version_identifier());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blink.FontUniqueNameTable.UniqueFont fonts = 10;
  total_size += 1UL * this->_internal_fonts_size();
  for (const auto& msg : this->fonts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .blink.FontUniqueNameTable.UniqueNameToFontMapping name_map = 20;
  total_size += 2UL * this->_internal_name_map_size();
  for (const auto& msg : this->name_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FontUniqueNameTable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FontUniqueNameTable*>(
      &from));
}

void FontUniqueNameTable::MergeFrom(const FontUniqueNameTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blink.FontUniqueNameTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fonts_.MergeFrom(from.fonts_);
  name_map_.MergeFrom(from.name_map_);
  if (from._internal_has_stored_for_platform_version_identifier()) {
    _internal_set_stored_for_platform_version_identifier(from._internal_stored_for_platform_version_identifier());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FontUniqueNameTable::CopyFrom(const FontUniqueNameTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blink.FontUniqueNameTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontUniqueNameTable::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fonts_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(name_map_))
    return false;
  return true;
}

void FontUniqueNameTable::InternalSwap(FontUniqueNameTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fonts_.InternalSwap(&other->fonts_);
  name_map_.InternalSwap(&other->name_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stored_for_platform_version_identifier_, lhs_arena,
      &other->stored_for_platform_version_identifier_, rhs_arena
  );
}

std::string FontUniqueNameTable::GetTypeName() const {
  return "blink.FontUniqueNameTable";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace blink
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blink::FontUniqueNameTable_UniqueFont*
Arena::CreateMaybeMessage< ::blink::FontUniqueNameTable_UniqueFont >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blink::FontUniqueNameTable_UniqueFont >(arena);
}
template<> PROTOBUF_NOINLINE ::blink::FontUniqueNameTable_UniqueNameToFontMapping*
Arena::CreateMaybeMessage< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::blink::FontUniqueNameTable*
Arena::CreateMaybeMessage< ::blink::FontUniqueNameTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blink::FontUniqueNameTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
