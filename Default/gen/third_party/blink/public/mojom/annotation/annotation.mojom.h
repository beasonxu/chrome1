// third_party/blink/public/mojom/annotation/annotation.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANNOTATION_ANNOTATION_MOJOM_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANNOTATION_ANNOTATION_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/annotation/annotation.mojom-shared.h"
#include "third_party/blink/public/mojom/annotation/annotation.mojom-forward.h"
#include "mojo/public/mojom/base/string16.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/common/common_export.h"




namespace blink {
namespace mojom {

class AnnotationAgentProxy;

template <typename ImplRefTraits>
class AnnotationAgentStub;

class AnnotationAgentRequestValidator;


class BLINK_COMMON_EXPORT AnnotationAgent
    : public AnnotationAgentInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = AnnotationAgentInterfaceBase;
  using Proxy_ = AnnotationAgentProxy;

  template <typename ImplRefTraits>
  using Stub_ = AnnotationAgentStub<ImplRefTraits>;

  using RequestValidator_ = AnnotationAgentRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kScrollIntoViewMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct ScrollIntoView_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~AnnotationAgent() = default;

  
  virtual void ScrollIntoView() = 0;
};

class AnnotationAgentHostProxy;

template <typename ImplRefTraits>
class AnnotationAgentHostStub;

class AnnotationAgentHostRequestValidator;


class BLINK_COMMON_EXPORT AnnotationAgentHost
    : public AnnotationAgentHostInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = AnnotationAgentHostInterfaceBase;
  using Proxy_ = AnnotationAgentHostProxy;

  template <typename ImplRefTraits>
  using Stub_ = AnnotationAgentHostStub<ImplRefTraits>;

  using RequestValidator_ = AnnotationAgentHostRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kDidFinishAttachmentMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct DidFinishAttachment_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~AnnotationAgentHost() = default;

  
  virtual void DidFinishAttachment(const ::gfx::Rect& document_relative_rect) = 0;
};

class AnnotationAgentContainerProxy;

template <typename ImplRefTraits>
class AnnotationAgentContainerStub;

class AnnotationAgentContainerRequestValidator;
class AnnotationAgentContainerResponseValidator;


class BLINK_COMMON_EXPORT AnnotationAgentContainer
    : public AnnotationAgentContainerInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = AnnotationAgentContainerInterfaceBase;
  using Proxy_ = AnnotationAgentContainerProxy;

  template <typename ImplRefTraits>
  using Stub_ = AnnotationAgentContainerStub<ImplRefTraits>;

  using RequestValidator_ = AnnotationAgentContainerRequestValidator;
  using ResponseValidator_ = AnnotationAgentContainerResponseValidator;
  enum MethodMinVersions : uint32_t {
    kCreateAgentMinVersion = 0,
    kCreateAgentFromSelectionMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct CreateAgent_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct CreateAgentFromSelection_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~AnnotationAgentContainer() = default;

  
  virtual void CreateAgent(::mojo::PendingRemote<AnnotationAgentHost> host_remote, ::mojo::PendingReceiver<AnnotationAgent> agent_receiver, AnnotationType type, const std::string& serialized_selector) = 0;


  using CreateAgentFromSelectionCallback = base::OnceCallback<void(::mojo::PendingReceiver<AnnotationAgentHost>, ::mojo::PendingRemote<AnnotationAgent>, const std::string&, const ::std::u16string&)>;
  
  virtual void CreateAgentFromSelection(AnnotationType type, CreateAgentFromSelectionCallback callback) = 0;
};



class BLINK_COMMON_EXPORT AnnotationAgentProxy
    : public AnnotationAgent {
 public:
  using InterfaceType = AnnotationAgent;

  explicit AnnotationAgentProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void ScrollIntoView() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_COMMON_EXPORT AnnotationAgentHostProxy
    : public AnnotationAgentHost {
 public:
  using InterfaceType = AnnotationAgentHost;

  explicit AnnotationAgentHostProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void DidFinishAttachment(const ::gfx::Rect& document_relative_rect) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_COMMON_EXPORT AnnotationAgentContainerProxy
    : public AnnotationAgentContainer {
 public:
  using InterfaceType = AnnotationAgentContainer;

  explicit AnnotationAgentContainerProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void CreateAgent(::mojo::PendingRemote<AnnotationAgentHost> host_remote, ::mojo::PendingReceiver<AnnotationAgent> agent_receiver, AnnotationType type, const std::string& serialized_selector) final;
  
  void CreateAgentFromSelection(AnnotationType type, CreateAgentFromSelectionCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_COMMON_EXPORT AnnotationAgentStubDispatch {
 public:
  static bool Accept(AnnotationAgent* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AnnotationAgent* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AnnotationAgent>>
class AnnotationAgentStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AnnotationAgentStub() = default;
  ~AnnotationAgentStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AnnotationAgentStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AnnotationAgentStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT AnnotationAgentHostStubDispatch {
 public:
  static bool Accept(AnnotationAgentHost* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AnnotationAgentHost* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AnnotationAgentHost>>
class AnnotationAgentHostStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AnnotationAgentHostStub() = default;
  ~AnnotationAgentHostStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AnnotationAgentHostStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AnnotationAgentHostStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT AnnotationAgentContainerStubDispatch {
 public:
  static bool Accept(AnnotationAgentContainer* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AnnotationAgentContainer* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AnnotationAgentContainer>>
class AnnotationAgentContainerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AnnotationAgentContainerStub() = default;
  ~AnnotationAgentContainerStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AnnotationAgentContainerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AnnotationAgentContainerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT AnnotationAgentRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT AnnotationAgentHostRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT AnnotationAgentContainerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT AnnotationAgentContainerResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace blink

namespace mojo {

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANNOTATION_ANNOTATION_MOJOM_H_