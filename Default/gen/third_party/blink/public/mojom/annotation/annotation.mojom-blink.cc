// third_party/blink/public/mojom/annotation/annotation.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/annotation/annotation.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/annotation/annotation.mojom-params-data.h"
#include "third_party/blink/public/mojom/annotation/annotation.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/annotation/annotation.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/annotation/annotation.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANNOTATION_ANNOTATION_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANNOTATION_ANNOTATION_MOJOM_BLINK_JUMBO_H_
#endif



namespace blink {
namespace mojom {
namespace blink {
const char AnnotationAgent::Name_[] = "blink.mojom.AnnotationAgent";

AnnotationAgent::IPCStableHashFunction AnnotationAgent::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAnnotationAgent_ScrollIntoView_Name: {
      return &AnnotationAgent::ScrollIntoView_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AnnotationAgent::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAnnotationAgent_ScrollIntoView_Name:
            return "Receive blink::mojom::AnnotationAgent::ScrollIntoView";
    }
  } else {
    switch (message.name()) {
      case internal::kAnnotationAgent_ScrollIntoView_Name:
            return "Receive reply blink::mojom::AnnotationAgent::ScrollIntoView";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AnnotationAgent::ScrollIntoView_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AnnotationAgent::ScrollIntoView");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

AnnotationAgentProxy::AnnotationAgentProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AnnotationAgentProxy::ScrollIntoView(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::AnnotationAgent::ScrollIntoView");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAnnotationAgent_ScrollIntoView_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AnnotationAgent_ScrollIntoView_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AnnotationAgent::Name_);
  message.set_method_name("ScrollIntoView");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool AnnotationAgentStubDispatch::Accept(
    AnnotationAgent* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAnnotationAgent_ScrollIntoView_Name: {

      DCHECK(message->is_serialized());
      internal::AnnotationAgent_ScrollIntoView_Params_Data* params =
          reinterpret_cast<internal::AnnotationAgent_ScrollIntoView_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      AnnotationAgent_ScrollIntoView_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AnnotationAgent::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ScrollIntoView();
      return true;
    }
  }
  return false;
}

// static
bool AnnotationAgentStubDispatch::AcceptWithResponder(
    AnnotationAgent* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAnnotationAgent_ScrollIntoView_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAnnotationAgentValidationInfo[] = {
    {&internal::AnnotationAgent_ScrollIntoView_Params_Data::Validate,
     nullptr /* no response */},
};

bool AnnotationAgentRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::AnnotationAgent::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAnnotationAgentValidationInfo);
}

const char AnnotationAgentHost::Name_[] = "blink.mojom.AnnotationAgentHost";

AnnotationAgentHost::IPCStableHashFunction AnnotationAgentHost::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAnnotationAgentHost_DidFinishAttachment_Name: {
      return &AnnotationAgentHost::DidFinishAttachment_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AnnotationAgentHost::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAnnotationAgentHost_DidFinishAttachment_Name:
            return "Receive blink::mojom::AnnotationAgentHost::DidFinishAttachment";
    }
  } else {
    switch (message.name()) {
      case internal::kAnnotationAgentHost_DidFinishAttachment_Name:
            return "Receive reply blink::mojom::AnnotationAgentHost::DidFinishAttachment";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AnnotationAgentHost::DidFinishAttachment_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AnnotationAgentHost::DidFinishAttachment");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

AnnotationAgentHostProxy::AnnotationAgentHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AnnotationAgentHostProxy::DidFinishAttachment(
    const ::gfx::Rect& in_document_relative_rect) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::AnnotationAgentHost::DidFinishAttachment", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("document_relative_rect"), in_document_relative_rect,
                        "<value of type const ::gfx::Rect&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAnnotationAgentHost_DidFinishAttachment_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AnnotationAgentHost_DidFinishAttachment_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->document_relative_rect)::BaseType> document_relative_rect_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::RectDataView>(
      in_document_relative_rect, document_relative_rect_fragment);
  params->document_relative_rect.Set(
      document_relative_rect_fragment.is_null() ? nullptr : document_relative_rect_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->document_relative_rect.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null document_relative_rect in AnnotationAgentHost.DidFinishAttachment request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AnnotationAgentHost::Name_);
  message.set_method_name("DidFinishAttachment");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool AnnotationAgentHostStubDispatch::Accept(
    AnnotationAgentHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAnnotationAgentHost_DidFinishAttachment_Name: {

      DCHECK(message->is_serialized());
      internal::AnnotationAgentHost_DidFinishAttachment_Params_Data* params =
          reinterpret_cast<internal::AnnotationAgentHost_DidFinishAttachment_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::gfx::Rect p_document_relative_rect{};
      AnnotationAgentHost_DidFinishAttachment_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDocumentRelativeRect(&p_document_relative_rect))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AnnotationAgentHost::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DidFinishAttachment(
std::move(p_document_relative_rect));
      return true;
    }
  }
  return false;
}

// static
bool AnnotationAgentHostStubDispatch::AcceptWithResponder(
    AnnotationAgentHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAnnotationAgentHost_DidFinishAttachment_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAnnotationAgentHostValidationInfo[] = {
    {&internal::AnnotationAgentHost_DidFinishAttachment_Params_Data::Validate,
     nullptr /* no response */},
};

bool AnnotationAgentHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::AnnotationAgentHost::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAnnotationAgentHostValidationInfo);
}

const char AnnotationAgentContainer::Name_[] = "blink.mojom.AnnotationAgentContainer";

AnnotationAgentContainer::IPCStableHashFunction AnnotationAgentContainer::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAnnotationAgentContainer_CreateAgent_Name: {
      return &AnnotationAgentContainer::CreateAgent_Sym::IPCStableHash;
    }
    case internal::kAnnotationAgentContainer_CreateAgentFromSelection_Name: {
      return &AnnotationAgentContainer::CreateAgentFromSelection_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AnnotationAgentContainer::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAnnotationAgentContainer_CreateAgent_Name:
            return "Receive blink::mojom::AnnotationAgentContainer::CreateAgent";
      case internal::kAnnotationAgentContainer_CreateAgentFromSelection_Name:
            return "Receive blink::mojom::AnnotationAgentContainer::CreateAgentFromSelection";
    }
  } else {
    switch (message.name()) {
      case internal::kAnnotationAgentContainer_CreateAgent_Name:
            return "Receive reply blink::mojom::AnnotationAgentContainer::CreateAgent";
      case internal::kAnnotationAgentContainer_CreateAgentFromSelection_Name:
            return "Receive reply blink::mojom::AnnotationAgentContainer::CreateAgentFromSelection";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AnnotationAgentContainer::CreateAgent_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AnnotationAgentContainer::CreateAgent");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AnnotationAgentContainer::CreateAgentFromSelection_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AnnotationAgentContainer::CreateAgentFromSelection");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class AnnotationAgentContainer_CreateAgentFromSelection_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AnnotationAgentContainer_CreateAgentFromSelection_ForwardToCallback(
      AnnotationAgentContainer::CreateAgentFromSelectionCallback callback
      ) : callback_(std::move(callback)) {
  }

  AnnotationAgentContainer_CreateAgentFromSelection_ForwardToCallback(const AnnotationAgentContainer_CreateAgentFromSelection_ForwardToCallback&) = delete;
  AnnotationAgentContainer_CreateAgentFromSelection_ForwardToCallback& operator=(const AnnotationAgentContainer_CreateAgentFromSelection_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AnnotationAgentContainer::CreateAgentFromSelectionCallback callback_;
};

AnnotationAgentContainerProxy::AnnotationAgentContainerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AnnotationAgentContainerProxy::CreateAgent(
    ::mojo::PendingRemote<AnnotationAgentHost> in_host_remote, ::mojo::PendingReceiver<AnnotationAgent> in_agent_receiver, AnnotationType in_type, const WTF::String& in_serialized_selector) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::AnnotationAgentContainer::CreateAgent", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("host_remote"), in_host_remote,
                        "<value of type ::mojo::PendingRemote<AnnotationAgentHost>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("agent_receiver"), in_agent_receiver,
                        "<value of type ::mojo::PendingReceiver<AnnotationAgent>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("type"), in_type,
                        "<value of type AnnotationType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("serialized_selector"), in_serialized_selector,
                        "<value of type const WTF::String&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAnnotationAgentContainer_CreateAgent_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AnnotationAgentContainer_CreateAgent_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::AnnotationAgentHostInterfaceBase>>(
      in_host_remote, &params->host_remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->host_remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid host_remote in AnnotationAgentContainer.CreateAgent request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::AnnotationAgentInterfaceBase>>(
      in_agent_receiver, &params->agent_receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->agent_receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid agent_receiver in AnnotationAgentContainer.CreateAgent request");
  mojo::internal::Serialize<::blink::mojom::AnnotationType>(
      in_type, &params->type);
  mojo::internal::MessageFragment<
      typename decltype(params->serialized_selector)::BaseType> serialized_selector_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_serialized_selector, serialized_selector_fragment);
  params->serialized_selector.Set(
      serialized_selector_fragment.is_null() ? nullptr : serialized_selector_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->serialized_selector.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null serialized_selector in AnnotationAgentContainer.CreateAgent request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AnnotationAgentContainer::Name_);
  message.set_method_name("CreateAgent");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AnnotationAgentContainerProxy::CreateAgentFromSelection(
    AnnotationType in_type, CreateAgentFromSelectionCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::AnnotationAgentContainer::CreateAgentFromSelection", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("type"), in_type,
                        "<value of type AnnotationType>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAnnotationAgentContainer_CreateAgentFromSelection_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AnnotationAgentContainer_CreateAgentFromSelection_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::AnnotationType>(
      in_type, &params->type);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AnnotationAgentContainer::Name_);
  message.set_method_name("CreateAgentFromSelection");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AnnotationAgentContainer_CreateAgentFromSelection_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class AnnotationAgentContainer_CreateAgentFromSelection_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AnnotationAgentContainer::CreateAgentFromSelectionCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AnnotationAgentContainer_CreateAgentFromSelection_ProxyToResponder> proxy(
        new AnnotationAgentContainer_CreateAgentFromSelection_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AnnotationAgentContainer_CreateAgentFromSelection_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AnnotationAgentContainer_CreateAgentFromSelection_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AnnotationAgentContainer_CreateAgentFromSelection_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AnnotationAgentContainer::CreateAgentFromSelectionCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::mojo::PendingReceiver<AnnotationAgentHost> in_host_receiver, ::mojo::PendingRemote<AnnotationAgent> in_agent_remote, const WTF::String& in_serialized_selector, const ::WTF::String& in_selected_text);
};

bool AnnotationAgentContainer_CreateAgentFromSelection_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AnnotationAgentContainer_CreateAgentFromSelection_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AnnotationAgentContainer_CreateAgentFromSelection_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::mojo::PendingReceiver<AnnotationAgentHost> p_host_receiver{};
  ::mojo::PendingRemote<AnnotationAgent> p_agent_remote{};
  WTF::String p_serialized_selector{};
  ::WTF::String p_selected_text{};
  AnnotationAgentContainer_CreateAgentFromSelection_ResponseParamsDataView input_data_view(params, message);
  
  if (success) {
    p_host_receiver =
        input_data_view.TakeHostReceiver<decltype(p_host_receiver)>();
  }
  if (success) {
    p_agent_remote =
        input_data_view.TakeAgentRemote<decltype(p_agent_remote)>();
  }
  if (success && !input_data_view.ReadSerializedSelector(&p_serialized_selector))
    success = false;
  if (success && !input_data_view.ReadSelectedText(&p_selected_text))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AnnotationAgentContainer::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_host_receiver), 
std::move(p_agent_remote), 
std::move(p_serialized_selector), 
std::move(p_selected_text));
  return true;
}

void AnnotationAgentContainer_CreateAgentFromSelection_ProxyToResponder::Run(
    ::mojo::PendingReceiver<AnnotationAgentHost> in_host_receiver, ::mojo::PendingRemote<AnnotationAgent> in_agent_remote, const WTF::String& in_serialized_selector, const ::WTF::String& in_selected_text) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::AnnotationAgentContainer::CreateAgentFromSelection", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("host_receiver"), in_host_receiver,
                        "<value of type ::mojo::PendingReceiver<AnnotationAgentHost>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("agent_remote"), in_agent_remote,
                        "<value of type ::mojo::PendingRemote<AnnotationAgent>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("serialized_selector"), in_serialized_selector,
                        "<value of type const WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("selected_text"), in_selected_text,
                        "<value of type const ::WTF::String&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAnnotationAgentContainer_CreateAgentFromSelection_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AnnotationAgentContainer_CreateAgentFromSelection_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::AnnotationAgentHostInterfaceBase>>(
      in_host_receiver, &params->host_receiver, &params.message());
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::AnnotationAgentInterfaceBase>>(
      in_agent_remote, &params->agent_remote, &params.message());
  mojo::internal::MessageFragment<
      typename decltype(params->serialized_selector)::BaseType> serialized_selector_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_serialized_selector, serialized_selector_fragment);
  params->serialized_selector.Set(
      serialized_selector_fragment.is_null() ? nullptr : serialized_selector_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->serialized_selector.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null serialized_selector in ");
  mojo::internal::MessageFragment<
      typename decltype(params->selected_text)::BaseType> selected_text_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_selected_text, selected_text_fragment);
  params->selected_text.Set(
      selected_text_fragment.is_null() ? nullptr : selected_text_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->selected_text.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null selected_text in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AnnotationAgentContainer::Name_);
  message.set_method_name("CreateAgentFromSelection");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool AnnotationAgentContainerStubDispatch::Accept(
    AnnotationAgentContainer* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAnnotationAgentContainer_CreateAgent_Name: {

      DCHECK(message->is_serialized());
      internal::AnnotationAgentContainer_CreateAgent_Params_Data* params =
          reinterpret_cast<internal::AnnotationAgentContainer_CreateAgent_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<AnnotationAgentHost> p_host_remote{};
      ::mojo::PendingReceiver<AnnotationAgent> p_agent_receiver{};
      AnnotationType p_type{};
      WTF::String p_serialized_selector{};
      AnnotationAgentContainer_CreateAgent_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_host_remote =
            input_data_view.TakeHostRemote<decltype(p_host_remote)>();
      }
      if (success) {
        p_agent_receiver =
            input_data_view.TakeAgentReceiver<decltype(p_agent_receiver)>();
      }
      if (success && !input_data_view.ReadType(&p_type))
        success = false;
      if (success && !input_data_view.ReadSerializedSelector(&p_serialized_selector))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AnnotationAgentContainer::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateAgent(
std::move(p_host_remote), 
std::move(p_agent_receiver), 
std::move(p_type), 
std::move(p_serialized_selector));
      return true;
    }
    case internal::kAnnotationAgentContainer_CreateAgentFromSelection_Name: {
      break;
    }
  }
  return false;
}

// static
bool AnnotationAgentContainerStubDispatch::AcceptWithResponder(
    AnnotationAgentContainer* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAnnotationAgentContainer_CreateAgent_Name: {
      break;
    }
    case internal::kAnnotationAgentContainer_CreateAgentFromSelection_Name: {

      internal::AnnotationAgentContainer_CreateAgentFromSelection_Params_Data* params =
          reinterpret_cast<
              internal::AnnotationAgentContainer_CreateAgentFromSelection_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      AnnotationType p_type{};
      AnnotationAgentContainer_CreateAgentFromSelection_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadType(&p_type))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AnnotationAgentContainer::Name_, 1, false);
        return false;
      }
      AnnotationAgentContainer::CreateAgentFromSelectionCallback callback =
          AnnotationAgentContainer_CreateAgentFromSelection_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateAgentFromSelection(
std::move(p_type), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAnnotationAgentContainerValidationInfo[] = {
    {&internal::AnnotationAgentContainer_CreateAgent_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AnnotationAgentContainer_CreateAgentFromSelection_Params_Data::Validate,
     &internal::AnnotationAgentContainer_CreateAgentFromSelection_ResponseParams_Data::Validate},
};

bool AnnotationAgentContainerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::AnnotationAgentContainer::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAnnotationAgentContainerValidationInfo);
}

bool AnnotationAgentContainerResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::AnnotationAgentContainer::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kAnnotationAgentContainerValidationInfo);
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {


void AnnotationAgentInterceptorForTesting::ScrollIntoView() {
  GetForwardingInterface()->ScrollIntoView();
}
AnnotationAgentAsyncWaiter::AnnotationAgentAsyncWaiter(
    AnnotationAgent* proxy) : proxy_(proxy) {}

AnnotationAgentAsyncWaiter::~AnnotationAgentAsyncWaiter() = default;




void AnnotationAgentHostInterceptorForTesting::DidFinishAttachment(const ::gfx::Rect& document_relative_rect) {
  GetForwardingInterface()->DidFinishAttachment(std::move(document_relative_rect));
}
AnnotationAgentHostAsyncWaiter::AnnotationAgentHostAsyncWaiter(
    AnnotationAgentHost* proxy) : proxy_(proxy) {}

AnnotationAgentHostAsyncWaiter::~AnnotationAgentHostAsyncWaiter() = default;




void AnnotationAgentContainerInterceptorForTesting::CreateAgent(::mojo::PendingRemote<AnnotationAgentHost> host_remote, ::mojo::PendingReceiver<AnnotationAgent> agent_receiver, AnnotationType type, const WTF::String& serialized_selector) {
  GetForwardingInterface()->CreateAgent(std::move(host_remote), std::move(agent_receiver), std::move(type), std::move(serialized_selector));
}
void AnnotationAgentContainerInterceptorForTesting::CreateAgentFromSelection(AnnotationType type, CreateAgentFromSelectionCallback callback) {
  GetForwardingInterface()->CreateAgentFromSelection(std::move(type), std::move(callback));
}
AnnotationAgentContainerAsyncWaiter::AnnotationAgentContainerAsyncWaiter(
    AnnotationAgentContainer* proxy) : proxy_(proxy) {}

AnnotationAgentContainerAsyncWaiter::~AnnotationAgentContainerAsyncWaiter() = default;

void AnnotationAgentContainerAsyncWaiter::CreateAgentFromSelection(
    AnnotationType type, ::mojo::PendingReceiver<AnnotationAgentHost>* out_host_receiver, ::mojo::PendingRemote<AnnotationAgent>* out_agent_remote, WTF::String* out_serialized_selector, ::WTF::String* out_selected_text) {
  base::RunLoop loop;
  proxy_->CreateAgentFromSelection(std::move(type),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::PendingReceiver<AnnotationAgentHost>* out_host_receiver
,
             ::mojo::PendingRemote<AnnotationAgent>* out_agent_remote
,
             WTF::String* out_serialized_selector
,
             ::WTF::String* out_selected_text
,
             ::mojo::PendingReceiver<AnnotationAgentHost> host_receiver,
             ::mojo::PendingRemote<AnnotationAgent> agent_remote,
             const WTF::String& serialized_selector,
             const ::WTF::String& selected_text) {*out_host_receiver = std::move(host_receiver);*out_agent_remote = std::move(agent_remote);*out_serialized_selector = std::move(serialized_selector);*out_selected_text = std::move(selected_text);
            loop->Quit();
          },
          &loop,
          out_host_receiver,
          out_agent_remote,
          out_serialized_selector,
          out_selected_text));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif