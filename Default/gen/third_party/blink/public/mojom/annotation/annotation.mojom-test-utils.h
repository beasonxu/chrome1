// third_party/blink/public/mojom/annotation/annotation.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANNOTATION_ANNOTATION_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANNOTATION_ANNOTATION_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/annotation/annotation.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT AnnotationAgentInterceptorForTesting : public AnnotationAgent {
  virtual AnnotationAgent* GetForwardingInterface() = 0;
  void ScrollIntoView() override;
};
class BLINK_COMMON_EXPORT AnnotationAgentAsyncWaiter {
 public:
  explicit AnnotationAgentAsyncWaiter(AnnotationAgent* proxy);

  AnnotationAgentAsyncWaiter(const AnnotationAgentAsyncWaiter&) = delete;
  AnnotationAgentAsyncWaiter& operator=(const AnnotationAgentAsyncWaiter&) = delete;

  ~AnnotationAgentAsyncWaiter();

 private:
  AnnotationAgent* const proxy_;
};


class BLINK_COMMON_EXPORT AnnotationAgentHostInterceptorForTesting : public AnnotationAgentHost {
  virtual AnnotationAgentHost* GetForwardingInterface() = 0;
  void DidFinishAttachment(const ::gfx::Rect& document_relative_rect) override;
};
class BLINK_COMMON_EXPORT AnnotationAgentHostAsyncWaiter {
 public:
  explicit AnnotationAgentHostAsyncWaiter(AnnotationAgentHost* proxy);

  AnnotationAgentHostAsyncWaiter(const AnnotationAgentHostAsyncWaiter&) = delete;
  AnnotationAgentHostAsyncWaiter& operator=(const AnnotationAgentHostAsyncWaiter&) = delete;

  ~AnnotationAgentHostAsyncWaiter();

 private:
  AnnotationAgentHost* const proxy_;
};


class BLINK_COMMON_EXPORT AnnotationAgentContainerInterceptorForTesting : public AnnotationAgentContainer {
  virtual AnnotationAgentContainer* GetForwardingInterface() = 0;
  void CreateAgent(::mojo::PendingRemote<AnnotationAgentHost> host_remote, ::mojo::PendingReceiver<AnnotationAgent> agent_receiver, AnnotationType type, const std::string& serialized_selector) override;
  void CreateAgentFromSelection(AnnotationType type, CreateAgentFromSelectionCallback callback) override;
};
class BLINK_COMMON_EXPORT AnnotationAgentContainerAsyncWaiter {
 public:
  explicit AnnotationAgentContainerAsyncWaiter(AnnotationAgentContainer* proxy);

  AnnotationAgentContainerAsyncWaiter(const AnnotationAgentContainerAsyncWaiter&) = delete;
  AnnotationAgentContainerAsyncWaiter& operator=(const AnnotationAgentContainerAsyncWaiter&) = delete;

  ~AnnotationAgentContainerAsyncWaiter();
  void CreateAgentFromSelection(
      AnnotationType type, ::mojo::PendingReceiver<AnnotationAgentHost>* out_host_receiver, ::mojo::PendingRemote<AnnotationAgent>* out_agent_remote, std::string* out_serialized_selector, ::std::u16string* out_selected_text);

 private:
  AnnotationAgentContainer* const proxy_;
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANNOTATION_ANNOTATION_MOJOM_TEST_UTILS_H_