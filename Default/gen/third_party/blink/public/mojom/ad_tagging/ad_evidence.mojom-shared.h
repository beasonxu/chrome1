// third_party/blink/public/mojom/ad_tagging/ad_evidence.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_AD_TAGGING_AD_EVIDENCE_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_AD_TAGGING_AD_EVIDENCE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/ad_tagging/ad_evidence.mojom-shared-internal.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {
class FrameAdEvidenceDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::FrameAdEvidenceDataView> {
  using Data = ::blink::mojom::internal::FrameAdEvidence_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class FilterListResult : int32_t {
  
  kNotChecked = 0,
  
  kMatchedAllowingRule = 1,
  
  kMatchedNoRules = 2,
  
  kMatchedBlockingRule = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, FilterListResult value);
inline bool IsKnownEnumValue(FilterListResult value) {
  return internal::FilterListResult_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class FrameCreationStackEvidence : int32_t {
  
  kNotCreatedByAdScript = 0,
  
  kCreatedByAdScript = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, FrameCreationStackEvidence value);
inline bool IsKnownEnumValue(FrameCreationStackEvidence value) {
  return internal::FrameCreationStackEvidence_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class FrameAdEvidenceDataView {
 public:
  FrameAdEvidenceDataView() = default;

  FrameAdEvidenceDataView(
      internal::FrameAdEvidence_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_complete() const {
    return data_->is_complete;
  }
  bool parent_is_ad() const {
    return data_->parent_is_ad;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadLatestFilterListResult(UserType* output) const {
    auto data_value = data_->latest_filter_list_result;
    return mojo::internal::Deserialize<::blink::mojom::FilterListResult>(
        data_value, output);
  }
  FilterListResult latest_filter_list_result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FilterListResult>(data_->latest_filter_list_result));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadMostRestrictiveFilterListResult(UserType* output) const {
    auto data_value = data_->most_restrictive_filter_list_result;
    return mojo::internal::Deserialize<::blink::mojom::FilterListResult>(
        data_value, output);
  }
  FilterListResult most_restrictive_filter_list_result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FilterListResult>(data_->most_restrictive_filter_list_result));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadCreatedByAdScript(UserType* output) const {
    auto data_value = data_->created_by_ad_script;
    return mojo::internal::Deserialize<::blink::mojom::FrameCreationStackEvidence>(
        data_value, output);
  }
  FrameCreationStackEvidence created_by_ad_script() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FrameCreationStackEvidence>(data_->created_by_ad_script));
  }
 private:
  internal::FrameAdEvidence_Data* data_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::FilterListResult>
    : public mojo::internal::EnumHashImpl<::blink::mojom::FilterListResult> {};

template <>
struct hash<::blink::mojom::FrameCreationStackEvidence>
    : public mojo::internal::EnumHashImpl<::blink::mojom::FrameCreationStackEvidence> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FilterListResult, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::FilterListResult, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::FilterListResult>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FrameCreationStackEvidence, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::FrameCreationStackEvidence, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::FrameCreationStackEvidence>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FrameAdEvidenceDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::FrameAdEvidenceDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::FrameAdEvidence_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->is_complete = Traits::is_complete(input);
    fragment->parent_is_ad = Traits::parent_is_ad(input);
    mojo::internal::Serialize<::blink::mojom::FilterListResult>(
        Traits::latest_filter_list_result(input), &fragment->latest_filter_list_result);
    mojo::internal::Serialize<::blink::mojom::FilterListResult>(
        Traits::most_restrictive_filter_list_result(input), &fragment->most_restrictive_filter_list_result);
    mojo::internal::Serialize<::blink::mojom::FrameCreationStackEvidence>(
        Traits::created_by_ad_script(input), &fragment->created_by_ad_script);
  }

  static bool Deserialize(::blink::mojom::internal::FrameAdEvidence_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::FrameAdEvidenceDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::FilterListResult> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::FilterListResult value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::FrameCreationStackEvidence> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::FrameCreationStackEvidence value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_AD_TAGGING_AD_EVIDENCE_MOJOM_SHARED_H_