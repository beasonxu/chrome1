// third_party/blink/public/mojom/subapps/sub_apps_service.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/subapps/sub_apps_service.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/subapps/sub_apps_service.mojom-params-data.h"
#include "third_party/blink/public/mojom/subapps/sub_apps_service.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/subapps/sub_apps_service.mojom-import-headers.h"
#include "third_party/blink/public/mojom/subapps/sub_apps_service.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SUBAPPS_SUB_APPS_SERVICE_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SUBAPPS_SUB_APPS_SERVICE_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
SubAppsServiceAddInfo::SubAppsServiceAddInfo()
    : unhashed_app_id(),
      install_url() {}

SubAppsServiceAddInfo::SubAppsServiceAddInfo(
    const std::string& unhashed_app_id_in,
    const ::GURL& install_url_in)
    : unhashed_app_id(std::move(unhashed_app_id_in)),
      install_url(std::move(install_url_in)) {}

SubAppsServiceAddInfo::~SubAppsServiceAddInfo() = default;

void SubAppsServiceAddInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "unhashed_app_id"), this->unhashed_app_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "install_url"), this->install_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SubAppsServiceAddInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SubAppsServiceAddResult::SubAppsServiceAddResult()
    : unhashed_app_id(),
      result_code() {}

SubAppsServiceAddResult::SubAppsServiceAddResult(
    const std::string& unhashed_app_id_in,
    SubAppsServiceAddResultCode result_code_in)
    : unhashed_app_id(std::move(unhashed_app_id_in)),
      result_code(std::move(result_code_in)) {}

SubAppsServiceAddResult::~SubAppsServiceAddResult() = default;
size_t SubAppsServiceAddResult::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->unhashed_app_id);
  seed = mojo::internal::Hash(seed, this->result_code);
  return seed;
}

void SubAppsServiceAddResult::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "unhashed_app_id"), this->unhashed_app_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "result_code"), this->result_code,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type SubAppsServiceAddResultCode>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SubAppsServiceAddResult::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SubAppsServiceListResult::SubAppsServiceListResult()
    : code(),
      sub_app_ids() {}

SubAppsServiceListResult::SubAppsServiceListResult(
    SubAppsServiceResult code_in,
    std::vector<std::string> sub_app_ids_in)
    : code(std::move(code_in)),
      sub_app_ids(std::move(sub_app_ids_in)) {}

SubAppsServiceListResult::~SubAppsServiceListResult() = default;

void SubAppsServiceListResult::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "code"), this->code,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type SubAppsServiceResult>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sub_app_ids"), this->sub_app_ids,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SubAppsServiceListResult::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char SubAppsService::Name_[] = "blink.mojom.SubAppsService";

SubAppsService::IPCStableHashFunction SubAppsService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kSubAppsService_Add_Name: {
      return &SubAppsService::Add_Sym::IPCStableHash;
    }
    case internal::kSubAppsService_List_Name: {
      return &SubAppsService::List_Sym::IPCStableHash;
    }
    case internal::kSubAppsService_Remove_Name: {
      return &SubAppsService::Remove_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* SubAppsService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kSubAppsService_Add_Name:
            return "Receive blink::mojom::SubAppsService::Add";
      case internal::kSubAppsService_List_Name:
            return "Receive blink::mojom::SubAppsService::List";
      case internal::kSubAppsService_Remove_Name:
            return "Receive blink::mojom::SubAppsService::Remove";
    }
  } else {
    switch (message.name()) {
      case internal::kSubAppsService_Add_Name:
            return "Receive reply blink::mojom::SubAppsService::Add";
      case internal::kSubAppsService_List_Name:
            return "Receive reply blink::mojom::SubAppsService::List";
      case internal::kSubAppsService_Remove_Name:
            return "Receive reply blink::mojom::SubAppsService::Remove";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t SubAppsService::Add_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::SubAppsService::Add");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SubAppsService::List_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::SubAppsService::List");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SubAppsService::Remove_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::SubAppsService::Remove");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class SubAppsService_Add_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SubAppsService_Add_ForwardToCallback(
      SubAppsService::AddCallback callback
      ) : callback_(std::move(callback)) {
  }

  SubAppsService_Add_ForwardToCallback(const SubAppsService_Add_ForwardToCallback&) = delete;
  SubAppsService_Add_ForwardToCallback& operator=(const SubAppsService_Add_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SubAppsService::AddCallback callback_;
};

class SubAppsService_List_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SubAppsService_List_ForwardToCallback(
      SubAppsService::ListCallback callback
      ) : callback_(std::move(callback)) {
  }

  SubAppsService_List_ForwardToCallback(const SubAppsService_List_ForwardToCallback&) = delete;
  SubAppsService_List_ForwardToCallback& operator=(const SubAppsService_List_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SubAppsService::ListCallback callback_;
};

class SubAppsService_Remove_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SubAppsService_Remove_ForwardToCallback(
      SubAppsService::RemoveCallback callback
      ) : callback_(std::move(callback)) {
  }

  SubAppsService_Remove_ForwardToCallback(const SubAppsService_Remove_ForwardToCallback&) = delete;
  SubAppsService_Remove_ForwardToCallback& operator=(const SubAppsService_Remove_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SubAppsService::RemoveCallback callback_;
};

SubAppsServiceProxy::SubAppsServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SubAppsServiceProxy::Add(
    std::vector<SubAppsServiceAddInfoPtr> in_sub_apps, AddCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::SubAppsService::Add", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("sub_apps"), in_sub_apps,
                        "<value of type std::vector<SubAppsServiceAddInfoPtr>>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSubAppsService_Add_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::SubAppsService_Add_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->sub_apps)::BaseType>
      sub_apps_fragment(params.message());
  const mojo::internal::ContainerValidateParams sub_apps_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::SubAppsServiceAddInfoDataView>>(
      in_sub_apps, sub_apps_fragment, &sub_apps_validate_params);
  params->sub_apps.Set(
      sub_apps_fragment.is_null() ? nullptr : sub_apps_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->sub_apps.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null sub_apps in SubAppsService.Add request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SubAppsService::Name_);
  message.set_method_name("Add");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SubAppsService_Add_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SubAppsServiceProxy::List(
    ListCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::SubAppsService::List");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSubAppsService_List_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::SubAppsService_List_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SubAppsService::Name_);
  message.set_method_name("List");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SubAppsService_List_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SubAppsServiceProxy::Remove(
    const std::string& in_unhashed_app_id, RemoveCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::SubAppsService::Remove", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("unhashed_app_id"), in_unhashed_app_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSubAppsService_Remove_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::SubAppsService_Remove_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->unhashed_app_id)::BaseType> unhashed_app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_unhashed_app_id, unhashed_app_id_fragment);
  params->unhashed_app_id.Set(
      unhashed_app_id_fragment.is_null() ? nullptr : unhashed_app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->unhashed_app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null unhashed_app_id in SubAppsService.Remove request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SubAppsService::Name_);
  message.set_method_name("Remove");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SubAppsService_Remove_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class SubAppsService_Add_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SubAppsService::AddCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SubAppsService_Add_ProxyToResponder> proxy(
        new SubAppsService_Add_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SubAppsService_Add_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SubAppsService_Add_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SubAppsService_Add_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SubAppsService::AddCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<SubAppsServiceAddResultPtr> in_result);
};

bool SubAppsService_Add_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SubAppsService_Add_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SubAppsService_Add_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<SubAppsServiceAddResultPtr> p_result{};
  SubAppsService_Add_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SubAppsService::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void SubAppsService_Add_ProxyToResponder::Run(
    std::vector<SubAppsServiceAddResultPtr> in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::SubAppsService::Add", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type std::vector<SubAppsServiceAddResultPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSubAppsService_Add_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::SubAppsService_Add_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->result)::BaseType>
      result_fragment(params.message());
  const mojo::internal::ContainerValidateParams result_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::SubAppsServiceAddResultDataView>>(
      in_result, result_fragment, &result_validate_params);
  params->result.Set(
      result_fragment.is_null() ? nullptr : result_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->result.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null result in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SubAppsService::Name_);
  message.set_method_name("Add");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SubAppsService_List_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SubAppsService::ListCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SubAppsService_List_ProxyToResponder> proxy(
        new SubAppsService_List_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SubAppsService_List_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SubAppsService_List_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SubAppsService_List_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SubAppsService::ListCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      SubAppsServiceListResultPtr in_result);
};

bool SubAppsService_List_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SubAppsService_List_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SubAppsService_List_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  SubAppsServiceListResultPtr p_result{};
  SubAppsService_List_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SubAppsService::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void SubAppsService_List_ProxyToResponder::Run(
    SubAppsServiceListResultPtr in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::SubAppsService::List", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type SubAppsServiceListResultPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSubAppsService_List_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::SubAppsService_List_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->result)::BaseType> result_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::SubAppsServiceListResultDataView>(
      in_result, result_fragment);
  params->result.Set(
      result_fragment.is_null() ? nullptr : result_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->result.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null result in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SubAppsService::Name_);
  message.set_method_name("List");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SubAppsService_Remove_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SubAppsService::RemoveCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SubAppsService_Remove_ProxyToResponder> proxy(
        new SubAppsService_Remove_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SubAppsService_Remove_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SubAppsService_Remove_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SubAppsService_Remove_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SubAppsService::RemoveCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      SubAppsServiceResult in_result);
};

bool SubAppsService_Remove_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SubAppsService_Remove_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SubAppsService_Remove_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  SubAppsServiceResult p_result{};
  SubAppsService_Remove_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SubAppsService::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void SubAppsService_Remove_ProxyToResponder::Run(
    SubAppsServiceResult in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::SubAppsService::Remove", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type SubAppsServiceResult>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSubAppsService_Remove_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::SubAppsService_Remove_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::SubAppsServiceResult>(
      in_result, &params->result);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SubAppsService::Name_);
  message.set_method_name("Remove");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool SubAppsServiceStubDispatch::Accept(
    SubAppsService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSubAppsService_Add_Name: {
      break;
    }
    case internal::kSubAppsService_List_Name: {
      break;
    }
    case internal::kSubAppsService_Remove_Name: {
      break;
    }
  }
  return false;
}

// static
bool SubAppsServiceStubDispatch::AcceptWithResponder(
    SubAppsService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kSubAppsService_Add_Name: {

      internal::SubAppsService_Add_Params_Data* params =
          reinterpret_cast<
              internal::SubAppsService_Add_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::vector<SubAppsServiceAddInfoPtr> p_sub_apps{};
      SubAppsService_Add_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadSubApps(&p_sub_apps))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SubAppsService::Name_, 0, false);
        return false;
      }
      SubAppsService::AddCallback callback =
          SubAppsService_Add_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Add(
std::move(p_sub_apps), std::move(callback));
      return true;
    }
    case internal::kSubAppsService_List_Name: {

      internal::SubAppsService_List_Params_Data* params =
          reinterpret_cast<
              internal::SubAppsService_List_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      SubAppsService_List_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SubAppsService::Name_, 1, false);
        return false;
      }
      SubAppsService::ListCallback callback =
          SubAppsService_List_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->List(std::move(callback));
      return true;
    }
    case internal::kSubAppsService_Remove_Name: {

      internal::SubAppsService_Remove_Params_Data* params =
          reinterpret_cast<
              internal::SubAppsService_Remove_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_unhashed_app_id{};
      SubAppsService_Remove_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUnhashedAppId(&p_unhashed_app_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SubAppsService::Name_, 2, false);
        return false;
      }
      SubAppsService::RemoveCallback callback =
          SubAppsService_Remove_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Remove(
std::move(p_unhashed_app_id), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSubAppsServiceValidationInfo[] = {
    {&internal::SubAppsService_Add_Params_Data::Validate,
     &internal::SubAppsService_Add_ResponseParams_Data::Validate},
    {&internal::SubAppsService_List_Params_Data::Validate,
     &internal::SubAppsService_List_ResponseParams_Data::Validate},
    {&internal::SubAppsService_Remove_Params_Data::Validate,
     &internal::SubAppsService_Remove_ResponseParams_Data::Validate},
};

bool SubAppsServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::SubAppsService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSubAppsServiceValidationInfo);
}

bool SubAppsServiceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::SubAppsService::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kSubAppsServiceValidationInfo);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::SubAppsServiceAddInfo::DataView, ::blink::mojom::SubAppsServiceAddInfoPtr>::Read(
    ::blink::mojom::SubAppsServiceAddInfo::DataView input,
    ::blink::mojom::SubAppsServiceAddInfoPtr* output) {
  bool success = true;
  ::blink::mojom::SubAppsServiceAddInfoPtr result(::blink::mojom::SubAppsServiceAddInfo::New());
  
      if (success && !input.ReadUnhashedAppId(&result->unhashed_app_id))
        success = false;
      if (success && !input.ReadInstallUrl(&result->install_url))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::SubAppsServiceAddResult::DataView, ::blink::mojom::SubAppsServiceAddResultPtr>::Read(
    ::blink::mojom::SubAppsServiceAddResult::DataView input,
    ::blink::mojom::SubAppsServiceAddResultPtr* output) {
  bool success = true;
  ::blink::mojom::SubAppsServiceAddResultPtr result(::blink::mojom::SubAppsServiceAddResult::New());
  
      if (success && !input.ReadUnhashedAppId(&result->unhashed_app_id))
        success = false;
      if (success && !input.ReadResultCode(&result->result_code))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::SubAppsServiceListResult::DataView, ::blink::mojom::SubAppsServiceListResultPtr>::Read(
    ::blink::mojom::SubAppsServiceListResult::DataView input,
    ::blink::mojom::SubAppsServiceListResultPtr* output) {
  bool success = true;
  ::blink::mojom::SubAppsServiceListResultPtr result(::blink::mojom::SubAppsServiceListResult::New());
  
      if (success && !input.ReadCode(&result->code))
        success = false;
      if (success && !input.ReadSubAppIds(&result->sub_app_ids))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {


void SubAppsServiceInterceptorForTesting::Add(std::vector<SubAppsServiceAddInfoPtr> sub_apps, AddCallback callback) {
  GetForwardingInterface()->Add(std::move(sub_apps), std::move(callback));
}
void SubAppsServiceInterceptorForTesting::List(ListCallback callback) {
  GetForwardingInterface()->List(std::move(callback));
}
void SubAppsServiceInterceptorForTesting::Remove(const std::string& unhashed_app_id, RemoveCallback callback) {
  GetForwardingInterface()->Remove(std::move(unhashed_app_id), std::move(callback));
}
SubAppsServiceAsyncWaiter::SubAppsServiceAsyncWaiter(
    SubAppsService* proxy) : proxy_(proxy) {}

SubAppsServiceAsyncWaiter::~SubAppsServiceAsyncWaiter() = default;

void SubAppsServiceAsyncWaiter::Add(
    std::vector<SubAppsServiceAddInfoPtr> sub_apps, std::vector<SubAppsServiceAddResultPtr>* out_result) {
  base::RunLoop loop;
  proxy_->Add(std::move(sub_apps),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<SubAppsServiceAddResultPtr>* out_result
,
             std::vector<SubAppsServiceAddResultPtr> result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void SubAppsServiceAsyncWaiter::List(
    SubAppsServiceListResultPtr* out_result) {
  base::RunLoop loop;
  proxy_->List(
      base::BindOnce(
          [](base::RunLoop* loop,
             SubAppsServiceListResultPtr* out_result
,
             SubAppsServiceListResultPtr result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void SubAppsServiceAsyncWaiter::Remove(
    const std::string& unhashed_app_id, SubAppsServiceResult* out_result) {
  base::RunLoop loop;
  proxy_->Remove(std::move(unhashed_app_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             SubAppsServiceResult* out_result
,
             SubAppsServiceResult result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}





}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif