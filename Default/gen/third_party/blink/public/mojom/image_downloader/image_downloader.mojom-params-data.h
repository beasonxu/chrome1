// third_party/blink/public/mojom/image_downloader/image_downloader.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_IMAGE_DOWNLOADER_IMAGE_DOWNLOADER_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_IMAGE_DOWNLOADER_IMAGE_DOWNLOADER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ImageDownloader_DownloadImage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  uint8_t is_favicon : 1;
  uint8_t bypass_cache : 1;
  uint8_t pad2_[3];
  uint32_t max_bitmap_size;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> preferred_size;

 private:
  friend class mojo::internal::MessageFragment<ImageDownloader_DownloadImage_Params_Data>;

  ImageDownloader_DownloadImage_Params_Data();
  ~ImageDownloader_DownloadImage_Params_Data() = delete;
};
static_assert(sizeof(ImageDownloader_DownloadImage_Params_Data) == 32,
              "Bad sizeof(ImageDownloader_DownloadImage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ImageDownloader_DownloadImage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t http_status_code;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::skia::mojom::internal::BitmapN32_Data>>> images;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::gfx::mojom::internal::Size_Data>>> original_image_sizes;

 private:
  friend class mojo::internal::MessageFragment<ImageDownloader_DownloadImage_ResponseParams_Data>;

  ImageDownloader_DownloadImage_ResponseParams_Data();
  ~ImageDownloader_DownloadImage_ResponseParams_Data() = delete;
};
static_assert(sizeof(ImageDownloader_DownloadImage_ResponseParams_Data) == 32,
              "Bad sizeof(ImageDownloader_DownloadImage_ResponseParams_Data)");

}  // namespace internal


class ImageDownloader_DownloadImage_ParamsDataView {
 public:
  ImageDownloader_DownloadImage_ParamsDataView() = default;

  ImageDownloader_DownloadImage_ParamsDataView(
      internal::ImageDownloader_DownloadImage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  bool is_favicon() const {
    return data_->is_favicon;
  }
  inline void GetPreferredSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPreferredSize(UserType* output) {
    
    auto* pointer = data_->preferred_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  uint32_t max_bitmap_size() const {
    return data_->max_bitmap_size;
  }
  bool bypass_cache() const {
    return data_->bypass_cache;
  }
 private:
  internal::ImageDownloader_DownloadImage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ImageDownloader_DownloadImage_ResponseParamsDataView {
 public:
  ImageDownloader_DownloadImage_ResponseParamsDataView() = default;

  ImageDownloader_DownloadImage_ResponseParamsDataView(
      internal::ImageDownloader_DownloadImage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t http_status_code() const {
    return data_->http_status_code;
  }
  inline void GetImagesDataView(
      mojo::ArrayDataView<::skia::mojom::BitmapN32DataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadImages(UserType* output) {
    
    auto* pointer = data_->images.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::skia::mojom::BitmapN32DataView>>(
        pointer, output, message_);
  }
  inline void GetOriginalImageSizesDataView(
      mojo::ArrayDataView<::gfx::mojom::SizeDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOriginalImageSizes(UserType* output) {
    
    auto* pointer = data_->original_image_sizes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::gfx::mojom::SizeDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ImageDownloader_DownloadImage_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void ImageDownloader_DownloadImage_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ImageDownloader_DownloadImage_ParamsDataView::GetPreferredSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->preferred_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}


inline void ImageDownloader_DownloadImage_ResponseParamsDataView::GetImagesDataView(
    mojo::ArrayDataView<::skia::mojom::BitmapN32DataView>* output) {
  auto pointer = data_->images.Get();
  *output = mojo::ArrayDataView<::skia::mojom::BitmapN32DataView>(pointer, message_);
}
inline void ImageDownloader_DownloadImage_ResponseParamsDataView::GetOriginalImageSizesDataView(
    mojo::ArrayDataView<::gfx::mojom::SizeDataView>* output) {
  auto pointer = data_->original_image_sizes.Get();
  *output = mojo::ArrayDataView<::gfx::mojom::SizeDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_IMAGE_DOWNLOADER_IMAGE_DOWNLOADER_MOJOM_PARAMS_DATA_H_