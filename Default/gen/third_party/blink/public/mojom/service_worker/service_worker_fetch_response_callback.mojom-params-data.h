// third_party/blink/public/mojom/service_worker/service_worker_fetch_response_callback.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_FETCH_RESPONSE_CALLBACK_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_FETCH_RESPONSE_CALLBACK_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerFetchResponseCallback_OnResponse_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FetchAPIResponse_Data> response;
  mojo::internal::Pointer<internal::ServiceWorkerFetchEventTiming_Data> timing;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerFetchResponseCallback_OnResponse_Params_Data>;

  ServiceWorkerFetchResponseCallback_OnResponse_Params_Data();
  ~ServiceWorkerFetchResponseCallback_OnResponse_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerFetchResponseCallback_OnResponse_Params_Data) == 24,
              "Bad sizeof(ServiceWorkerFetchResponseCallback_OnResponse_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerFetchResponseCallback_OnResponseStream_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FetchAPIResponse_Data> response;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerStreamHandle_Data> body_as_stream;
  mojo::internal::Pointer<internal::ServiceWorkerFetchEventTiming_Data> timing;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerFetchResponseCallback_OnResponseStream_Params_Data>;

  ServiceWorkerFetchResponseCallback_OnResponseStream_Params_Data();
  ~ServiceWorkerFetchResponseCallback_OnResponseStream_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerFetchResponseCallback_OnResponseStream_Params_Data) == 32,
              "Bad sizeof(ServiceWorkerFetchResponseCallback_OnResponseStream_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerFetchResponseCallback_OnFallback_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::DataElementChunkedDataPipe_Data> request_body;
  mojo::internal::Pointer<internal::ServiceWorkerFetchEventTiming_Data> timing;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerFetchResponseCallback_OnFallback_Params_Data>;

  ServiceWorkerFetchResponseCallback_OnFallback_Params_Data();
  ~ServiceWorkerFetchResponseCallback_OnFallback_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerFetchResponseCallback_OnFallback_Params_Data) == 24,
              "Bad sizeof(ServiceWorkerFetchResponseCallback_OnFallback_Params_Data)");

}  // namespace internal


class ServiceWorkerFetchResponseCallback_OnResponse_ParamsDataView {
 public:
  ServiceWorkerFetchResponseCallback_OnResponse_ParamsDataView() = default;

  ServiceWorkerFetchResponseCallback_OnResponse_ParamsDataView(
      internal::ServiceWorkerFetchResponseCallback_OnResponse_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResponseDataView(
      ::blink::mojom::FetchAPIResponseDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResponse(UserType* output) {
    
    auto* pointer = data_->response.Get();
    return mojo::internal::Deserialize<::blink::mojom::FetchAPIResponseDataView>(
        pointer, output, message_);
  }
  inline void GetTimingDataView(
      ServiceWorkerFetchEventTimingDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTiming(UserType* output) {
    
    auto* pointer = data_->timing.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerFetchEventTimingDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerFetchResponseCallback_OnResponse_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerFetchResponseCallback_OnResponseStream_ParamsDataView {
 public:
  ServiceWorkerFetchResponseCallback_OnResponseStream_ParamsDataView() = default;

  ServiceWorkerFetchResponseCallback_OnResponseStream_ParamsDataView(
      internal::ServiceWorkerFetchResponseCallback_OnResponseStream_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResponseDataView(
      ::blink::mojom::FetchAPIResponseDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResponse(UserType* output) {
    
    auto* pointer = data_->response.Get();
    return mojo::internal::Deserialize<::blink::mojom::FetchAPIResponseDataView>(
        pointer, output, message_);
  }
  inline void GetBodyAsStreamDataView(
      ::blink::mojom::ServiceWorkerStreamHandleDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBodyAsStream(UserType* output) {
    
    auto* pointer = data_->body_as_stream.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerStreamHandleDataView>(
        pointer, output, message_);
  }
  inline void GetTimingDataView(
      ServiceWorkerFetchEventTimingDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTiming(UserType* output) {
    
    auto* pointer = data_->timing.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerFetchEventTimingDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerFetchResponseCallback_OnResponseStream_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerFetchResponseCallback_OnFallback_ParamsDataView {
 public:
  ServiceWorkerFetchResponseCallback_OnFallback_ParamsDataView() = default;

  ServiceWorkerFetchResponseCallback_OnFallback_ParamsDataView(
      internal::ServiceWorkerFetchResponseCallback_OnFallback_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestBodyDataView(
      ::network::mojom::DataElementChunkedDataPipeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequestBody(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::DataElementChunkedDataPipeDataView, UserType>(),
    "Attempting to read the optional `request_body` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadRequestBody` instead "
    "of `ReadRequestBody if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->request_body.Get();
    return mojo::internal::Deserialize<::network::mojom::DataElementChunkedDataPipeDataView>(
        pointer, output, message_);
  }
  inline void GetTimingDataView(
      ServiceWorkerFetchEventTimingDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTiming(UserType* output) {
    
    auto* pointer = data_->timing.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerFetchEventTimingDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerFetchResponseCallback_OnFallback_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void ServiceWorkerFetchResponseCallback_OnResponse_ParamsDataView::GetResponseDataView(
    ::blink::mojom::FetchAPIResponseDataView* output) {
  auto pointer = data_->response.Get();
  *output = ::blink::mojom::FetchAPIResponseDataView(pointer, message_);
}
inline void ServiceWorkerFetchResponseCallback_OnResponse_ParamsDataView::GetTimingDataView(
    ServiceWorkerFetchEventTimingDataView* output) {
  auto pointer = data_->timing.Get();
  *output = ServiceWorkerFetchEventTimingDataView(pointer, message_);
}


inline void ServiceWorkerFetchResponseCallback_OnResponseStream_ParamsDataView::GetResponseDataView(
    ::blink::mojom::FetchAPIResponseDataView* output) {
  auto pointer = data_->response.Get();
  *output = ::blink::mojom::FetchAPIResponseDataView(pointer, message_);
}
inline void ServiceWorkerFetchResponseCallback_OnResponseStream_ParamsDataView::GetBodyAsStreamDataView(
    ::blink::mojom::ServiceWorkerStreamHandleDataView* output) {
  auto pointer = data_->body_as_stream.Get();
  *output = ::blink::mojom::ServiceWorkerStreamHandleDataView(pointer, message_);
}
inline void ServiceWorkerFetchResponseCallback_OnResponseStream_ParamsDataView::GetTimingDataView(
    ServiceWorkerFetchEventTimingDataView* output) {
  auto pointer = data_->timing.Get();
  *output = ServiceWorkerFetchEventTimingDataView(pointer, message_);
}


inline void ServiceWorkerFetchResponseCallback_OnFallback_ParamsDataView::GetRequestBodyDataView(
    ::network::mojom::DataElementChunkedDataPipeDataView* output) {
  auto pointer = data_->request_body.Get();
  *output = ::network::mojom::DataElementChunkedDataPipeDataView(pointer, message_);
}
inline void ServiceWorkerFetchResponseCallback_OnFallback_ParamsDataView::GetTimingDataView(
    ServiceWorkerFetchEventTimingDataView* output) {
  auto pointer = data_->timing.Get();
  *output = ServiceWorkerFetchEventTimingDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_FETCH_RESPONSE_CALLBACK_MOJOM_PARAMS_DATA_H_