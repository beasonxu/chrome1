// third_party/blink/public/mojom/service_worker/embedded_worker.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_EMBEDDED_WORKER_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_EMBEDDED_WORKER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/service_worker/embedded_worker.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "services/network/public/mojom/url_loader_factory.mojom-shared.h"
#include "services/service_manager/public/mojom/interface_provider.mojom-shared.h"
#include "third_party/blink/public/mojom/devtools/console_message.mojom-shared.h"
#include "third_party/blink/public/mojom/devtools/devtools_agent.mojom-shared.h"
#include "third_party/blink/public/mojom/loader/fetch_client_settings_object.mojom-shared.h"
#include "third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom-shared.h"
#include "third_party/blink/public/mojom/renderer_preference_watcher.mojom-shared.h"
#include "third_party/blink/public/mojom/renderer_preferences.mojom-shared.h"
#include "third_party/blink/public/mojom/script/script_type.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_event_status.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_fetch_handler_type.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_installed_scripts_manager.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_provider.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_registration.mojom-shared.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-shared.h"
#include "third_party/blink/public/mojom/use_counter/metrics/web_feature.mojom-shared.h"
#include "third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom-shared.h"
#include "third_party/blink/public/mojom/worker/subresource_loader_updater.mojom-shared.h"
#include "third_party/blink/public/mojom/worker/worker_content_settings_proxy.mojom-shared.h"
#include "third_party/blink/public/mojom/worker/worker_main_script_load_params.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "mojo/public/cpp/bindings/native_enum.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"
#include "base/component_export.h"




namespace blink {
namespace mojom {
class EmbeddedWorkerStartParamsDataView;

class EmbeddedWorkerStartTimingDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::EmbeddedWorkerStartParamsDataView> {
  using Data = ::blink::mojom::internal::EmbeddedWorkerStartParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::EmbeddedWorkerStartTimingDataView> {
  using Data = ::blink::mojom::internal::EmbeddedWorkerStartTiming_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {
// Interface base classes. They are used for type safety check.
class EmbeddedWorkerInstanceClientInterfaceBase {};

using EmbeddedWorkerInstanceClientPtrDataView =
    mojo::InterfacePtrDataView<EmbeddedWorkerInstanceClientInterfaceBase>;
using EmbeddedWorkerInstanceClientRequestDataView =
    mojo::InterfaceRequestDataView<EmbeddedWorkerInstanceClientInterfaceBase>;
using EmbeddedWorkerInstanceClientAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<EmbeddedWorkerInstanceClientInterfaceBase>;
using EmbeddedWorkerInstanceClientAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<EmbeddedWorkerInstanceClientInterfaceBase>;
class EmbeddedWorkerInstanceHostInterfaceBase {};

using EmbeddedWorkerInstanceHostPtrDataView =
    mojo::InterfacePtrDataView<EmbeddedWorkerInstanceHostInterfaceBase>;
using EmbeddedWorkerInstanceHostRequestDataView =
    mojo::InterfaceRequestDataView<EmbeddedWorkerInstanceHostInterfaceBase>;
using EmbeddedWorkerInstanceHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<EmbeddedWorkerInstanceHostInterfaceBase>;
using EmbeddedWorkerInstanceHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<EmbeddedWorkerInstanceHostInterfaceBase>;


class EmbeddedWorkerStartParamsDataView {
 public:
  EmbeddedWorkerStartParamsDataView() = default;

  EmbeddedWorkerStartParamsDataView(
      internal::EmbeddedWorkerStartParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t service_worker_version_id() const {
    return data_->service_worker_version_id;
  }
  inline void GetScopeDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScope(UserType* output) {
    
    auto* pointer = data_->scope.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetScriptUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScriptUrl(UserType* output) {
    
    auto* pointer = data_->script_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadScriptType(UserType* output) const {
    auto data_value = data_->script_type;
    return mojo::internal::Deserialize<::blink::mojom::ScriptType>(
        data_value, output);
  }
  ::blink::mojom::ScriptType script_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ScriptType>(data_->script_type));
  }
  inline void GetOutsideFetchClientSettingsObjectDataView(
      ::blink::mojom::FetchClientSettingsObjectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOutsideFetchClientSettingsObject(UserType* output) {
    
    auto* pointer = data_->outside_fetch_client_settings_object.Get();
    return mojo::internal::Deserialize<::blink::mojom::FetchClientSettingsObjectDataView>(
        pointer, output, message_);
  }
  inline void GetUserAgentDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUserAgent(UserType* output) {
    
    auto* pointer = data_->user_agent.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUaMetadataDataView(
      ::blink::mojom::UserAgentMetadataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUaMetadata(UserType* output) {
    
    auto* pointer = data_->ua_metadata.Get();
    return mojo::internal::Deserialize<::blink::mojom::UserAgentMetadataDataView>(
        pointer, output, message_);
  }
  int32_t service_worker_route_id() const {
    return data_->service_worker_route_id;
  }
  inline void GetDevtoolsWorkerTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevtoolsWorkerToken(UserType* output) {
    
    auto* pointer = data_->devtools_worker_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetScriptUrlToSkipThrottlingDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScriptUrlToSkipThrottling(UserType* output) {
    
    auto* pointer = data_->script_url_to_skip_throttling.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  bool wait_for_debugger() const {
    return data_->wait_for_debugger;
  }
  bool is_installed() const {
    return data_->is_installed;
  }
  inline void GetRendererPreferencesDataView(
      ::blink::mojom::RendererPreferencesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRendererPreferences(UserType* output) {
    
    auto* pointer = data_->renderer_preferences.Get();
    return mojo::internal::Deserialize<::blink::mojom::RendererPreferencesDataView>(
        pointer, output, message_);
  }
  inline void GetForcedEnabledRuntimeFeaturesDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadForcedEnabledRuntimeFeatures(UserType* output) {
    
    auto* pointer = data_->forced_enabled_runtime_features.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeServiceWorkerReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::ServiceWorkerInterfaceBase>>(
            &data_->service_worker_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeInterfaceProvider() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::service_manager::mojom::InterfaceProviderInterfaceBase>>(
            &data_->interface_provider, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeControllerReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::ControllerServiceWorkerInterfaceBase>>(
            &data_->controller_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetInstalledScriptsInfoDataView(
      ::blink::mojom::ServiceWorkerInstalledScriptsInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInstalledScriptsInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerInstalledScriptsInfoDataView, UserType>(),
    "Attempting to read the optional `installed_scripts_info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadInstalledScriptsInfo` instead "
    "of `ReadInstalledScriptsInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->installed_scripts_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerInstalledScriptsInfoDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeInstanceHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::EmbeddedWorkerInstanceHostAssociatedPtrInfoDataView>(
            &data_->instance_host, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetProviderInfoDataView(
      ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProviderInfo(UserType* output) {
    
    auto* pointer = data_->provider_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerProviderInfoForStartWorkerDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeContentSettingsProxy() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::WorkerContentSettingsProxyInterfaceBase>>(
            &data_->content_settings_proxy, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakePreferenceWatcherReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::RendererPreferenceWatcherInterfaceBase>>(
            &data_->preference_watcher_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetSubresourceLoaderFactoriesDataView(
      ::blink::mojom::URLLoaderFactoryBundleDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSubresourceLoaderFactories(UserType* output) {
    
    auto* pointer = data_->subresource_loader_factories.Get();
    return mojo::internal::Deserialize<::blink::mojom::URLLoaderFactoryBundleDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeSubresourceLoaderUpdater() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::SubresourceLoaderUpdaterInterfaceBase>>(
            &data_->subresource_loader_updater, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetServiceWorkerTokenDataView(
      ::blink::mojom::ServiceWorkerTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadServiceWorkerToken(UserType* output) {
    
    auto* pointer = data_->service_worker_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerTokenDataView>(
        pointer, output, message_);
  }
  int64_t ukm_source_id() const {
    return data_->ukm_source_id;
  }
  inline void GetMainScriptLoadParamsDataView(
      ::blink::mojom::WorkerMainScriptLoadParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMainScriptLoadParams(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::WorkerMainScriptLoadParamsDataView, UserType>(),
    "Attempting to read the optional `main_script_load_params` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadMainScriptLoadParams` instead "
    "of `ReadMainScriptLoadParams if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->main_script_load_params.Get();
    return mojo::internal::Deserialize<::blink::mojom::WorkerMainScriptLoadParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::EmbeddedWorkerStartParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EmbeddedWorkerStartTimingDataView {
 public:
  EmbeddedWorkerStartTimingDataView() = default;

  EmbeddedWorkerStartTimingDataView(
      internal::EmbeddedWorkerStartTiming_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStartWorkerReceivedTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStartWorkerReceivedTime(UserType* output) {
    
    auto* pointer = data_->start_worker_received_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  inline void GetScriptEvaluationStartTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScriptEvaluationStartTime(UserType* output) {
    
    auto* pointer = data_->script_evaluation_start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  inline void GetScriptEvaluationEndTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScriptEvaluationEndTime(UserType* output) {
    
    auto* pointer = data_->script_evaluation_end_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
 private:
  internal::EmbeddedWorkerStartTiming_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::EmbeddedWorkerStartParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::EmbeddedWorkerStartParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::EmbeddedWorkerStartParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->service_worker_version_id = Traits::service_worker_version_id(input);
    decltype(Traits::scope(input)) in_scope = Traits::scope(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->scope)::BaseType> scope_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_scope, scope_fragment);
    fragment->scope.Set(
        scope_fragment.is_null() ? nullptr : scope_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->scope.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null scope in EmbeddedWorkerStartParams struct");
    decltype(Traits::script_url(input)) in_script_url = Traits::script_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->script_url)::BaseType> script_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_script_url, script_url_fragment);
    fragment->script_url.Set(
        script_url_fragment.is_null() ? nullptr : script_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->script_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null script_url in EmbeddedWorkerStartParams struct");
    mojo::internal::Serialize<::blink::mojom::ScriptType>(
        Traits::script_type(input), &fragment->script_type);
    decltype(Traits::outside_fetch_client_settings_object(input)) in_outside_fetch_client_settings_object = Traits::outside_fetch_client_settings_object(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->outside_fetch_client_settings_object)::BaseType> outside_fetch_client_settings_object_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::FetchClientSettingsObjectDataView>(
        in_outside_fetch_client_settings_object, outside_fetch_client_settings_object_fragment);
    fragment->outside_fetch_client_settings_object.Set(
        outside_fetch_client_settings_object_fragment.is_null() ? nullptr : outside_fetch_client_settings_object_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->outside_fetch_client_settings_object.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null outside_fetch_client_settings_object in EmbeddedWorkerStartParams struct");
    decltype(Traits::user_agent(input)) in_user_agent = Traits::user_agent(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->user_agent)::BaseType> user_agent_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_user_agent, user_agent_fragment);
    fragment->user_agent.Set(
        user_agent_fragment.is_null() ? nullptr : user_agent_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->user_agent.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null user_agent in EmbeddedWorkerStartParams struct");
    decltype(Traits::ua_metadata(input)) in_ua_metadata = Traits::ua_metadata(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ua_metadata)::BaseType> ua_metadata_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::UserAgentMetadataDataView>(
        in_ua_metadata, ua_metadata_fragment);
    fragment->ua_metadata.Set(
        ua_metadata_fragment.is_null() ? nullptr : ua_metadata_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ua_metadata.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ua_metadata in EmbeddedWorkerStartParams struct");
    fragment->service_worker_route_id = Traits::service_worker_route_id(input);
    decltype(Traits::devtools_worker_token(input)) in_devtools_worker_token = Traits::devtools_worker_token(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->devtools_worker_token)::BaseType> devtools_worker_token_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_devtools_worker_token, devtools_worker_token_fragment);
    fragment->devtools_worker_token.Set(
        devtools_worker_token_fragment.is_null() ? nullptr : devtools_worker_token_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->devtools_worker_token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null devtools_worker_token in EmbeddedWorkerStartParams struct");
    decltype(Traits::script_url_to_skip_throttling(input)) in_script_url_to_skip_throttling = Traits::script_url_to_skip_throttling(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->script_url_to_skip_throttling)::BaseType> script_url_to_skip_throttling_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_script_url_to_skip_throttling, script_url_to_skip_throttling_fragment);
    fragment->script_url_to_skip_throttling.Set(
        script_url_to_skip_throttling_fragment.is_null() ? nullptr : script_url_to_skip_throttling_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->script_url_to_skip_throttling.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null script_url_to_skip_throttling in EmbeddedWorkerStartParams struct");
    fragment->wait_for_debugger = Traits::wait_for_debugger(input);
    fragment->is_installed = Traits::is_installed(input);
    decltype(Traits::renderer_preferences(input)) in_renderer_preferences = Traits::renderer_preferences(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->renderer_preferences)::BaseType> renderer_preferences_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::RendererPreferencesDataView>(
        in_renderer_preferences, renderer_preferences_fragment);
    fragment->renderer_preferences.Set(
        renderer_preferences_fragment.is_null() ? nullptr : renderer_preferences_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->renderer_preferences.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null renderer_preferences in EmbeddedWorkerStartParams struct");
    decltype(Traits::forced_enabled_runtime_features(input)) in_forced_enabled_runtime_features = Traits::forced_enabled_runtime_features(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->forced_enabled_runtime_features)::BaseType>
        forced_enabled_runtime_features_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams forced_enabled_runtime_features_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_forced_enabled_runtime_features, forced_enabled_runtime_features_fragment, &forced_enabled_runtime_features_validate_params);
    fragment->forced_enabled_runtime_features.Set(
        forced_enabled_runtime_features_fragment.is_null() ? nullptr : forced_enabled_runtime_features_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->forced_enabled_runtime_features.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null forced_enabled_runtime_features in EmbeddedWorkerStartParams struct");
    decltype(Traits::service_worker_receiver(input)) in_service_worker_receiver = Traits::service_worker_receiver(input);
    mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::ServiceWorkerInterfaceBase>>(
        in_service_worker_receiver, &fragment->service_worker_receiver, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->service_worker_receiver),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid service_worker_receiver in EmbeddedWorkerStartParams struct");
    decltype(Traits::interface_provider(input)) in_interface_provider = Traits::interface_provider(input);
    mojo::internal::Serialize<mojo::InterfaceRequestDataView<::service_manager::mojom::InterfaceProviderInterfaceBase>>(
        in_interface_provider, &fragment->interface_provider, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->interface_provider),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid interface_provider in EmbeddedWorkerStartParams struct");
    decltype(Traits::controller_receiver(input)) in_controller_receiver = Traits::controller_receiver(input);
    mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::ControllerServiceWorkerInterfaceBase>>(
        in_controller_receiver, &fragment->controller_receiver, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->controller_receiver),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid controller_receiver in EmbeddedWorkerStartParams struct");
    decltype(Traits::installed_scripts_info(input)) in_installed_scripts_info = Traits::installed_scripts_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->installed_scripts_info)::BaseType> installed_scripts_info_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::ServiceWorkerInstalledScriptsInfoDataView>(
        in_installed_scripts_info, installed_scripts_info_fragment);
    fragment->installed_scripts_info.Set(
        installed_scripts_info_fragment.is_null() ? nullptr : installed_scripts_info_fragment.data());
    decltype(Traits::instance_host(input)) in_instance_host = Traits::instance_host(input);
    mojo::internal::Serialize<::blink::mojom::EmbeddedWorkerInstanceHostAssociatedPtrInfoDataView>(
        in_instance_host, &fragment->instance_host, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->instance_host),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
        "invalid instance_host in EmbeddedWorkerStartParams struct");
    decltype(Traits::provider_info(input)) in_provider_info = Traits::provider_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->provider_info)::BaseType> provider_info_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::ServiceWorkerProviderInfoForStartWorkerDataView>(
        in_provider_info, provider_info_fragment);
    fragment->provider_info.Set(
        provider_info_fragment.is_null() ? nullptr : provider_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->provider_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null provider_info in EmbeddedWorkerStartParams struct");
    decltype(Traits::content_settings_proxy(input)) in_content_settings_proxy = Traits::content_settings_proxy(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::WorkerContentSettingsProxyInterfaceBase>>(
        in_content_settings_proxy, &fragment->content_settings_proxy, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->content_settings_proxy),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid content_settings_proxy in EmbeddedWorkerStartParams struct");
    decltype(Traits::preference_watcher_receiver(input)) in_preference_watcher_receiver = Traits::preference_watcher_receiver(input);
    mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::RendererPreferenceWatcherInterfaceBase>>(
        in_preference_watcher_receiver, &fragment->preference_watcher_receiver, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->preference_watcher_receiver),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid preference_watcher_receiver in EmbeddedWorkerStartParams struct");
    decltype(Traits::subresource_loader_factories(input)) in_subresource_loader_factories = Traits::subresource_loader_factories(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->subresource_loader_factories)::BaseType> subresource_loader_factories_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::URLLoaderFactoryBundleDataView>(
        in_subresource_loader_factories, subresource_loader_factories_fragment);
    fragment->subresource_loader_factories.Set(
        subresource_loader_factories_fragment.is_null() ? nullptr : subresource_loader_factories_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->subresource_loader_factories.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null subresource_loader_factories in EmbeddedWorkerStartParams struct");
    decltype(Traits::subresource_loader_updater(input)) in_subresource_loader_updater = Traits::subresource_loader_updater(input);
    mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::SubresourceLoaderUpdaterInterfaceBase>>(
        in_subresource_loader_updater, &fragment->subresource_loader_updater, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->subresource_loader_updater),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid subresource_loader_updater in EmbeddedWorkerStartParams struct");
    decltype(Traits::service_worker_token(input)) in_service_worker_token = Traits::service_worker_token(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->service_worker_token)::BaseType> service_worker_token_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::ServiceWorkerTokenDataView>(
        in_service_worker_token, service_worker_token_fragment);
    fragment->service_worker_token.Set(
        service_worker_token_fragment.is_null() ? nullptr : service_worker_token_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->service_worker_token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null service_worker_token in EmbeddedWorkerStartParams struct");
    fragment->ukm_source_id = Traits::ukm_source_id(input);
    decltype(Traits::main_script_load_params(input)) in_main_script_load_params = Traits::main_script_load_params(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->main_script_load_params)::BaseType> main_script_load_params_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::WorkerMainScriptLoadParamsDataView>(
        in_main_script_load_params, main_script_load_params_fragment);
    fragment->main_script_load_params.Set(
        main_script_load_params_fragment.is_null() ? nullptr : main_script_load_params_fragment.data());
  }

  static bool Deserialize(::blink::mojom::internal::EmbeddedWorkerStartParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::EmbeddedWorkerStartParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::EmbeddedWorkerStartTimingDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::EmbeddedWorkerStartTimingDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::EmbeddedWorkerStartTiming_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::start_worker_received_time(input)) in_start_worker_received_time = Traits::start_worker_received_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->start_worker_received_time)::BaseType> start_worker_received_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_start_worker_received_time, start_worker_received_time_fragment);
    fragment->start_worker_received_time.Set(
        start_worker_received_time_fragment.is_null() ? nullptr : start_worker_received_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->start_worker_received_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null start_worker_received_time in EmbeddedWorkerStartTiming struct");
    decltype(Traits::script_evaluation_start_time(input)) in_script_evaluation_start_time = Traits::script_evaluation_start_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->script_evaluation_start_time)::BaseType> script_evaluation_start_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_script_evaluation_start_time, script_evaluation_start_time_fragment);
    fragment->script_evaluation_start_time.Set(
        script_evaluation_start_time_fragment.is_null() ? nullptr : script_evaluation_start_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->script_evaluation_start_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null script_evaluation_start_time in EmbeddedWorkerStartTiming struct");
    decltype(Traits::script_evaluation_end_time(input)) in_script_evaluation_end_time = Traits::script_evaluation_end_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->script_evaluation_end_time)::BaseType> script_evaluation_end_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_script_evaluation_end_time, script_evaluation_end_time_fragment);
    fragment->script_evaluation_end_time.Set(
        script_evaluation_end_time_fragment.is_null() ? nullptr : script_evaluation_end_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->script_evaluation_end_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null script_evaluation_end_time in EmbeddedWorkerStartTiming struct");
  }

  static bool Deserialize(::blink::mojom::internal::EmbeddedWorkerStartTiming_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::EmbeddedWorkerStartTimingDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void EmbeddedWorkerStartParamsDataView::GetScopeDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->scope.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetScriptUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->script_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetOutsideFetchClientSettingsObjectDataView(
    ::blink::mojom::FetchClientSettingsObjectDataView* output) {
  auto pointer = data_->outside_fetch_client_settings_object.Get();
  *output = ::blink::mojom::FetchClientSettingsObjectDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetUserAgentDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->user_agent.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetUaMetadataDataView(
    ::blink::mojom::UserAgentMetadataDataView* output) {
  auto pointer = data_->ua_metadata.Get();
  *output = ::blink::mojom::UserAgentMetadataDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetDevtoolsWorkerTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_worker_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetScriptUrlToSkipThrottlingDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->script_url_to_skip_throttling.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetRendererPreferencesDataView(
    ::blink::mojom::RendererPreferencesDataView* output) {
  auto pointer = data_->renderer_preferences.Get();
  *output = ::blink::mojom::RendererPreferencesDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetForcedEnabledRuntimeFeaturesDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->forced_enabled_runtime_features.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetInstalledScriptsInfoDataView(
    ::blink::mojom::ServiceWorkerInstalledScriptsInfoDataView* output) {
  auto pointer = data_->installed_scripts_info.Get();
  *output = ::blink::mojom::ServiceWorkerInstalledScriptsInfoDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetProviderInfoDataView(
    ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerDataView* output) {
  auto pointer = data_->provider_info.Get();
  *output = ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetSubresourceLoaderFactoriesDataView(
    ::blink::mojom::URLLoaderFactoryBundleDataView* output) {
  auto pointer = data_->subresource_loader_factories.Get();
  *output = ::blink::mojom::URLLoaderFactoryBundleDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetServiceWorkerTokenDataView(
    ::blink::mojom::ServiceWorkerTokenDataView* output) {
  auto pointer = data_->service_worker_token.Get();
  *output = ::blink::mojom::ServiceWorkerTokenDataView(pointer, message_);
}
inline void EmbeddedWorkerStartParamsDataView::GetMainScriptLoadParamsDataView(
    ::blink::mojom::WorkerMainScriptLoadParamsDataView* output) {
  auto pointer = data_->main_script_load_params.Get();
  *output = ::blink::mojom::WorkerMainScriptLoadParamsDataView(pointer, message_);
}


inline void EmbeddedWorkerStartTimingDataView::GetStartWorkerReceivedTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->start_worker_received_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void EmbeddedWorkerStartTimingDataView::GetScriptEvaluationStartTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->script_evaluation_start_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void EmbeddedWorkerStartTimingDataView::GetScriptEvaluationEndTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->script_evaluation_end_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_EMBEDDED_WORKER_MOJOM_SHARED_H_