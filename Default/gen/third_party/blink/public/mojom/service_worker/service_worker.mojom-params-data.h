// third_party/blink/public/mojom/service_worker/service_worker.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_SetCachedMetadata_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyBuffer_Data> data;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_SetCachedMetadata_Params_Data>;

  ServiceWorkerHost_SetCachedMetadata_Params_Data();
  ~ServiceWorkerHost_SetCachedMetadata_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_SetCachedMetadata_Params_Data) == 24,
              "Bad sizeof(ServiceWorkerHost_SetCachedMetadata_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_ClearCachedMetadata_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_ClearCachedMetadata_Params_Data>;

  ServiceWorkerHost_ClearCachedMetadata_Params_Data();
  ~ServiceWorkerHost_ClearCachedMetadata_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_ClearCachedMetadata_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerHost_ClearCachedMetadata_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_GetClients_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerClientQueryOptions_Data> options;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_GetClients_Params_Data>;

  ServiceWorkerHost_GetClients_Params_Data();
  ~ServiceWorkerHost_GetClients_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_GetClients_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerHost_GetClients_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_GetClients_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerClientInfo_Data>>> clients;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_GetClients_ResponseParams_Data>;

  ServiceWorkerHost_GetClients_ResponseParams_Data();
  ~ServiceWorkerHost_GetClients_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_GetClients_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorkerHost_GetClients_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_GetClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> client_uuid;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_GetClient_Params_Data>;

  ServiceWorkerHost_GetClient_Params_Data();
  ~ServiceWorkerHost_GetClient_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_GetClient_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerHost_GetClient_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_GetClient_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerClientInfo_Data> client;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_GetClient_ResponseParams_Data>;

  ServiceWorkerHost_GetClient_ResponseParams_Data();
  ~ServiceWorkerHost_GetClient_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_GetClient_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorkerHost_GetClient_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_OpenNewTab_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_OpenNewTab_Params_Data>;

  ServiceWorkerHost_OpenNewTab_Params_Data();
  ~ServiceWorkerHost_OpenNewTab_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_OpenNewTab_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerHost_OpenNewTab_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_OpenNewTab_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerClientInfo_Data> client;
  mojo::internal::Pointer<mojo::internal::String_Data> error_msg;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_OpenNewTab_ResponseParams_Data>;

  ServiceWorkerHost_OpenNewTab_ResponseParams_Data();
  ~ServiceWorkerHost_OpenNewTab_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_OpenNewTab_ResponseParams_Data) == 32,
              "Bad sizeof(ServiceWorkerHost_OpenNewTab_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_OpenPaymentHandlerWindow_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_OpenPaymentHandlerWindow_Params_Data>;

  ServiceWorkerHost_OpenPaymentHandlerWindow_Params_Data();
  ~ServiceWorkerHost_OpenPaymentHandlerWindow_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_OpenPaymentHandlerWindow_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerHost_OpenPaymentHandlerWindow_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerClientInfo_Data> client;
  mojo::internal::Pointer<mojo::internal::String_Data> error_msg;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams_Data>;

  ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams_Data();
  ~ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams_Data) == 32,
              "Bad sizeof(ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_PostMessageToClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> client_uuid;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> message;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_PostMessageToClient_Params_Data>;

  ServiceWorkerHost_PostMessageToClient_Params_Data();
  ~ServiceWorkerHost_PostMessageToClient_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_PostMessageToClient_Params_Data) == 24,
              "Bad sizeof(ServiceWorkerHost_PostMessageToClient_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_FocusClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> client_uuid;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_FocusClient_Params_Data>;

  ServiceWorkerHost_FocusClient_Params_Data();
  ~ServiceWorkerHost_FocusClient_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_FocusClient_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerHost_FocusClient_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_FocusClient_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerClientInfo_Data> client;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_FocusClient_ResponseParams_Data>;

  ServiceWorkerHost_FocusClient_ResponseParams_Data();
  ~ServiceWorkerHost_FocusClient_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_FocusClient_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorkerHost_FocusClient_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_NavigateClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> client_uuid;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_NavigateClient_Params_Data>;

  ServiceWorkerHost_NavigateClient_Params_Data();
  ~ServiceWorkerHost_NavigateClient_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_NavigateClient_Params_Data) == 24,
              "Bad sizeof(ServiceWorkerHost_NavigateClient_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_NavigateClient_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerClientInfo_Data> client;
  mojo::internal::Pointer<mojo::internal::String_Data> error_msg;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_NavigateClient_ResponseParams_Data>;

  ServiceWorkerHost_NavigateClient_ResponseParams_Data();
  ~ServiceWorkerHost_NavigateClient_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_NavigateClient_ResponseParams_Data) == 32,
              "Bad sizeof(ServiceWorkerHost_NavigateClient_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_SkipWaiting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_SkipWaiting_Params_Data>;

  ServiceWorkerHost_SkipWaiting_Params_Data();
  ~ServiceWorkerHost_SkipWaiting_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_SkipWaiting_Params_Data) == 8,
              "Bad sizeof(ServiceWorkerHost_SkipWaiting_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_SkipWaiting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_SkipWaiting_ResponseParams_Data>;

  ServiceWorkerHost_SkipWaiting_ResponseParams_Data();
  ~ServiceWorkerHost_SkipWaiting_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_SkipWaiting_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorkerHost_SkipWaiting_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_ClaimClients_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_ClaimClients_Params_Data>;

  ServiceWorkerHost_ClaimClients_Params_Data();
  ~ServiceWorkerHost_ClaimClients_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_ClaimClients_Params_Data) == 8,
              "Bad sizeof(ServiceWorkerHost_ClaimClients_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerHost_ClaimClients_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> error_msg;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerHost_ClaimClients_ResponseParams_Data>;

  ServiceWorkerHost_ClaimClients_ResponseParams_Data();
  ~ServiceWorkerHost_ClaimClients_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerHost_ClaimClients_ResponseParams_Data) == 24,
              "Bad sizeof(ServiceWorkerHost_ClaimClients_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_InitializeGlobalScope_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data service_worker_host;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerRegistrationObjectInfo_Data> registration_info;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerObjectInfo_Data> service_worker_info;
  int32_t fetch_handler_existence;
  mojo::internal::Handle_Data reporting_observer_receiver;
  int32_t ancestor_frame_type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_InitializeGlobalScope_Params_Data>;

  ServiceWorker_InitializeGlobalScope_Params_Data();
  ~ServiceWorker_InitializeGlobalScope_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_InitializeGlobalScope_Params_Data) == 48,
              "Bad sizeof(ServiceWorker_InitializeGlobalScope_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchInstallEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchInstallEvent_Params_Data>;

  ServiceWorker_DispatchInstallEvent_Params_Data();
  ~ServiceWorker_DispatchInstallEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchInstallEvent_Params_Data) == 8,
              "Bad sizeof(ServiceWorker_DispatchInstallEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchInstallEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint32_t fetch_count;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchInstallEvent_ResponseParams_Data>;

  ServiceWorker_DispatchInstallEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchInstallEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchInstallEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchInstallEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchActivateEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchActivateEvent_Params_Data>;

  ServiceWorker_DispatchActivateEvent_Params_Data();
  ~ServiceWorker_DispatchActivateEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchActivateEvent_Params_Data) == 8,
              "Bad sizeof(ServiceWorker_DispatchActivateEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchActivateEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchActivateEvent_ResponseParams_Data>;

  ServiceWorker_DispatchActivateEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchActivateEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchActivateEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchActivateEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchBackgroundFetchAbortEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::BackgroundFetchRegistration_Data> registration;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchBackgroundFetchAbortEvent_Params_Data>;

  ServiceWorker_DispatchBackgroundFetchAbortEvent_Params_Data();
  ~ServiceWorker_DispatchBackgroundFetchAbortEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchBackgroundFetchAbortEvent_Params_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchBackgroundFetchAbortEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams_Data>;

  ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchBackgroundFetchClickEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::BackgroundFetchRegistration_Data> registration;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchBackgroundFetchClickEvent_Params_Data>;

  ServiceWorker_DispatchBackgroundFetchClickEvent_Params_Data();
  ~ServiceWorker_DispatchBackgroundFetchClickEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchBackgroundFetchClickEvent_Params_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchBackgroundFetchClickEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams_Data>;

  ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchBackgroundFetchFailEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::BackgroundFetchRegistration_Data> registration;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchBackgroundFetchFailEvent_Params_Data>;

  ServiceWorker_DispatchBackgroundFetchFailEvent_Params_Data();
  ~ServiceWorker_DispatchBackgroundFetchFailEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchBackgroundFetchFailEvent_Params_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchBackgroundFetchFailEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams_Data>;

  ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::BackgroundFetchRegistration_Data> registration;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params_Data>;

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params_Data();
  ~ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams_Data>;

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchCookieChangeEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::CookieChangeInfo_Data> change;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchCookieChangeEvent_Params_Data>;

  ServiceWorker_DispatchCookieChangeEvent_Params_Data();
  ~ServiceWorker_DispatchCookieChangeEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchCookieChangeEvent_Params_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchCookieChangeEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchCookieChangeEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchCookieChangeEvent_ResponseParams_Data>;

  ServiceWorker_DispatchCookieChangeEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchCookieChangeEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchCookieChangeEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchCookieChangeEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchFetchEventForMainResource_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::DispatchFetchEventParams_Data> params;
  mojo::internal::Interface_Data response_callback;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchFetchEventForMainResource_Params_Data>;

  ServiceWorker_DispatchFetchEventForMainResource_Params_Data();
  ~ServiceWorker_DispatchFetchEventForMainResource_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchFetchEventForMainResource_Params_Data) == 24,
              "Bad sizeof(ServiceWorker_DispatchFetchEventForMainResource_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchFetchEventForMainResource_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchFetchEventForMainResource_ResponseParams_Data>;

  ServiceWorker_DispatchFetchEventForMainResource_ResponseParams_Data();
  ~ServiceWorker_DispatchFetchEventForMainResource_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchFetchEventForMainResource_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchFetchEventForMainResource_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchNotificationClickEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> notification_id;
  mojo::internal::Pointer<::blink::mojom::internal::NotificationData_Data> notification_data;
  int32_t action_index;
  uint8_t pad2_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> reply;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchNotificationClickEvent_Params_Data>;

  ServiceWorker_DispatchNotificationClickEvent_Params_Data();
  ~ServiceWorker_DispatchNotificationClickEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchNotificationClickEvent_Params_Data) == 40,
              "Bad sizeof(ServiceWorker_DispatchNotificationClickEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchNotificationClickEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchNotificationClickEvent_ResponseParams_Data>;

  ServiceWorker_DispatchNotificationClickEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchNotificationClickEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchNotificationClickEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchNotificationClickEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchNotificationCloseEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> notification_id;
  mojo::internal::Pointer<::blink::mojom::internal::NotificationData_Data> notification_data;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchNotificationCloseEvent_Params_Data>;

  ServiceWorker_DispatchNotificationCloseEvent_Params_Data();
  ~ServiceWorker_DispatchNotificationCloseEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchNotificationCloseEvent_Params_Data) == 24,
              "Bad sizeof(ServiceWorker_DispatchNotificationCloseEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchNotificationCloseEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchNotificationCloseEvent_ResponseParams_Data>;

  ServiceWorker_DispatchNotificationCloseEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchNotificationCloseEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchNotificationCloseEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchNotificationCloseEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchPushEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> payload;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchPushEvent_Params_Data>;

  ServiceWorker_DispatchPushEvent_Params_Data();
  ~ServiceWorker_DispatchPushEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchPushEvent_Params_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchPushEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchPushEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchPushEvent_ResponseParams_Data>;

  ServiceWorker_DispatchPushEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchPushEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchPushEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchPushEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchPushSubscriptionChangeEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::PushSubscription_Data> old_subscription;
  mojo::internal::Pointer<::blink::mojom::internal::PushSubscription_Data> new_subscription;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchPushSubscriptionChangeEvent_Params_Data>;

  ServiceWorker_DispatchPushSubscriptionChangeEvent_Params_Data();
  ~ServiceWorker_DispatchPushSubscriptionChangeEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchPushSubscriptionChangeEvent_Params_Data) == 24,
              "Bad sizeof(ServiceWorker_DispatchPushSubscriptionChangeEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams_Data>;

  ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchSyncEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> tag;
  uint8_t last_chance : 1;
  uint8_t pad1_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> timeout;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchSyncEvent_Params_Data>;

  ServiceWorker_DispatchSyncEvent_Params_Data();
  ~ServiceWorker_DispatchSyncEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchSyncEvent_Params_Data) == 32,
              "Bad sizeof(ServiceWorker_DispatchSyncEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchSyncEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchSyncEvent_ResponseParams_Data>;

  ServiceWorker_DispatchSyncEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchSyncEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchSyncEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchSyncEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchPeriodicSyncEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> tag;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> timeout;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchPeriodicSyncEvent_Params_Data>;

  ServiceWorker_DispatchPeriodicSyncEvent_Params_Data();
  ~ServiceWorker_DispatchPeriodicSyncEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchPeriodicSyncEvent_Params_Data) == 24,
              "Bad sizeof(ServiceWorker_DispatchPeriodicSyncEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams_Data>;

  ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchAbortPaymentEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data result_of_abort_payment;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchAbortPaymentEvent_Params_Data>;

  ServiceWorker_DispatchAbortPaymentEvent_Params_Data();
  ~ServiceWorker_DispatchAbortPaymentEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchAbortPaymentEvent_Params_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchAbortPaymentEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchAbortPaymentEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchAbortPaymentEvent_ResponseParams_Data>;

  ServiceWorker_DispatchAbortPaymentEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchAbortPaymentEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchAbortPaymentEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchAbortPaymentEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchCanMakePaymentEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::payments::mojom::internal::CanMakePaymentEventData_Data> event_data;
  mojo::internal::Interface_Data result_of_can_make_payment;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchCanMakePaymentEvent_Params_Data>;

  ServiceWorker_DispatchCanMakePaymentEvent_Params_Data();
  ~ServiceWorker_DispatchCanMakePaymentEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchCanMakePaymentEvent_Params_Data) == 24,
              "Bad sizeof(ServiceWorker_DispatchCanMakePaymentEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams_Data>;

  ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchPaymentRequestEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::payments::mojom::internal::PaymentRequestEventData_Data> request_data;
  mojo::internal::Interface_Data response_callback;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchPaymentRequestEvent_Params_Data>;

  ServiceWorker_DispatchPaymentRequestEvent_Params_Data();
  ~ServiceWorker_DispatchPaymentRequestEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchPaymentRequestEvent_Params_Data) == 24,
              "Bad sizeof(ServiceWorker_DispatchPaymentRequestEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchPaymentRequestEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchPaymentRequestEvent_ResponseParams_Data>;

  ServiceWorker_DispatchPaymentRequestEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchPaymentRequestEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchPaymentRequestEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchPaymentRequestEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchExtendableMessageEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ExtendableMessageEvent_Data> event;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchExtendableMessageEvent_Params_Data>;

  ServiceWorker_DispatchExtendableMessageEvent_Params_Data();
  ~ServiceWorker_DispatchExtendableMessageEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchExtendableMessageEvent_Params_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchExtendableMessageEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchExtendableMessageEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchExtendableMessageEvent_ResponseParams_Data>;

  ServiceWorker_DispatchExtendableMessageEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchExtendableMessageEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchExtendableMessageEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchExtendableMessageEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchContentDeleteEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchContentDeleteEvent_Params_Data>;

  ServiceWorker_DispatchContentDeleteEvent_Params_Data();
  ~ServiceWorker_DispatchContentDeleteEvent_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchContentDeleteEvent_Params_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchContentDeleteEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_DispatchContentDeleteEvent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_DispatchContentDeleteEvent_ResponseParams_Data>;

  ServiceWorker_DispatchContentDeleteEvent_ResponseParams_Data();
  ~ServiceWorker_DispatchContentDeleteEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_DispatchContentDeleteEvent_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorker_DispatchContentDeleteEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_Ping_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_Ping_Params_Data>;

  ServiceWorker_Ping_Params_Data();
  ~ServiceWorker_Ping_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_Ping_Params_Data) == 8,
              "Bad sizeof(ServiceWorker_Ping_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_Ping_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_Ping_ResponseParams_Data>;

  ServiceWorker_Ping_ResponseParams_Data();
  ~ServiceWorker_Ping_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_Ping_ResponseParams_Data) == 8,
              "Bad sizeof(ServiceWorker_Ping_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_SetIdleDelay_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> delay;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_SetIdleDelay_Params_Data>;

  ServiceWorker_SetIdleDelay_Params_Data();
  ~ServiceWorker_SetIdleDelay_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_SetIdleDelay_Params_Data) == 16,
              "Bad sizeof(ServiceWorker_SetIdleDelay_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_AddMessageToConsole_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t level;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_AddMessageToConsole_Params_Data>;

  ServiceWorker_AddMessageToConsole_Params_Data();
  ~ServiceWorker_AddMessageToConsole_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_AddMessageToConsole_Params_Data) == 24,
              "Bad sizeof(ServiceWorker_AddMessageToConsole_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_ExecuteScriptForTest_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::BigString16_Data> javascript;
  uint8_t wants_result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_ExecuteScriptForTest_Params_Data>;

  ServiceWorker_ExecuteScriptForTest_Params_Data();
  ~ServiceWorker_ExecuteScriptForTest_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorker_ExecuteScriptForTest_Params_Data) == 24,
              "Bad sizeof(ServiceWorker_ExecuteScriptForTest_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorker_ExecuteScriptForTest_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::Value_Data result;
  mojo::internal::Pointer<mojo::internal::String_Data> error;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorker_ExecuteScriptForTest_ResponseParams_Data>;

  ServiceWorker_ExecuteScriptForTest_ResponseParams_Data();
  ~ServiceWorker_ExecuteScriptForTest_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorker_ExecuteScriptForTest_ResponseParams_Data) == 32,
              "Bad sizeof(ServiceWorker_ExecuteScriptForTest_ResponseParams_Data)");

}  // namespace internal


class ServiceWorkerHost_SetCachedMetadata_ParamsDataView {
 public:
  ServiceWorkerHost_SetCachedMetadata_ParamsDataView() = default;

  ServiceWorkerHost_SetCachedMetadata_ParamsDataView(
      internal::ServiceWorkerHost_SetCachedMetadata_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetDataDataView(
      ::mojo_base::mojom::ReadOnlyBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_SetCachedMetadata_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_ClearCachedMetadata_ParamsDataView {
 public:
  ServiceWorkerHost_ClearCachedMetadata_ParamsDataView() = default;

  ServiceWorkerHost_ClearCachedMetadata_ParamsDataView(
      internal::ServiceWorkerHost_ClearCachedMetadata_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_ClearCachedMetadata_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_GetClients_ParamsDataView {
 public:
  ServiceWorkerHost_GetClients_ParamsDataView() = default;

  ServiceWorkerHost_GetClients_ParamsDataView(
      internal::ServiceWorkerHost_GetClients_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOptionsDataView(
      ::blink::mojom::ServiceWorkerClientQueryOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerClientQueryOptionsDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_GetClients_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_GetClients_ResponseParamsDataView {
 public:
  ServiceWorkerHost_GetClients_ResponseParamsDataView() = default;

  ServiceWorkerHost_GetClients_ResponseParamsDataView(
      internal::ServiceWorkerHost_GetClients_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetClientsDataView(
      mojo::ArrayDataView<::blink::mojom::ServiceWorkerClientInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClients(UserType* output) {
    
    auto* pointer = data_->clients.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::ServiceWorkerClientInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_GetClients_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_GetClient_ParamsDataView {
 public:
  ServiceWorkerHost_GetClient_ParamsDataView() = default;

  ServiceWorkerHost_GetClient_ParamsDataView(
      internal::ServiceWorkerHost_GetClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetClientUuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClientUuid(UserType* output) {
    
    auto* pointer = data_->client_uuid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_GetClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_GetClient_ResponseParamsDataView {
 public:
  ServiceWorkerHost_GetClient_ResponseParamsDataView() = default;

  ServiceWorkerHost_GetClient_ResponseParamsDataView(
      internal::ServiceWorkerHost_GetClient_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetClientDataView(
      ::blink::mojom::ServiceWorkerClientInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClient(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerClientInfoDataView, UserType>(),
    "Attempting to read the optional `client` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadClient` instead "
    "of `ReadClient if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->client.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerClientInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_GetClient_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_OpenNewTab_ParamsDataView {
 public:
  ServiceWorkerHost_OpenNewTab_ParamsDataView() = default;

  ServiceWorkerHost_OpenNewTab_ParamsDataView(
      internal::ServiceWorkerHost_OpenNewTab_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_OpenNewTab_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_OpenNewTab_ResponseParamsDataView {
 public:
  ServiceWorkerHost_OpenNewTab_ResponseParamsDataView() = default;

  ServiceWorkerHost_OpenNewTab_ResponseParamsDataView(
      internal::ServiceWorkerHost_OpenNewTab_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetClientDataView(
      ::blink::mojom::ServiceWorkerClientInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClient(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerClientInfoDataView, UserType>(),
    "Attempting to read the optional `client` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadClient` instead "
    "of `ReadClient if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->client.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerClientInfoDataView>(
        pointer, output, message_);
  }
  inline void GetErrorMsgDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMsg(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `error_msg` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadErrorMsg` instead "
    "of `ReadErrorMsg if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error_msg.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_OpenNewTab_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_OpenPaymentHandlerWindow_ParamsDataView {
 public:
  ServiceWorkerHost_OpenPaymentHandlerWindow_ParamsDataView() = default;

  ServiceWorkerHost_OpenPaymentHandlerWindow_ParamsDataView(
      internal::ServiceWorkerHost_OpenPaymentHandlerWindow_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_OpenPaymentHandlerWindow_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParamsDataView {
 public:
  ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParamsDataView() = default;

  ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParamsDataView(
      internal::ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetClientDataView(
      ::blink::mojom::ServiceWorkerClientInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClient(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerClientInfoDataView, UserType>(),
    "Attempting to read the optional `client` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadClient` instead "
    "of `ReadClient if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->client.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerClientInfoDataView>(
        pointer, output, message_);
  }
  inline void GetErrorMsgDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMsg(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `error_msg` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadErrorMsg` instead "
    "of `ReadErrorMsg if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error_msg.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_PostMessageToClient_ParamsDataView {
 public:
  ServiceWorkerHost_PostMessageToClient_ParamsDataView() = default;

  ServiceWorkerHost_PostMessageToClient_ParamsDataView(
      internal::ServiceWorkerHost_PostMessageToClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetClientUuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClientUuid(UserType* output) {
    
    auto* pointer = data_->client_uuid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_PostMessageToClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_FocusClient_ParamsDataView {
 public:
  ServiceWorkerHost_FocusClient_ParamsDataView() = default;

  ServiceWorkerHost_FocusClient_ParamsDataView(
      internal::ServiceWorkerHost_FocusClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetClientUuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClientUuid(UserType* output) {
    
    auto* pointer = data_->client_uuid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_FocusClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_FocusClient_ResponseParamsDataView {
 public:
  ServiceWorkerHost_FocusClient_ResponseParamsDataView() = default;

  ServiceWorkerHost_FocusClient_ResponseParamsDataView(
      internal::ServiceWorkerHost_FocusClient_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetClientDataView(
      ::blink::mojom::ServiceWorkerClientInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClient(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerClientInfoDataView, UserType>(),
    "Attempting to read the optional `client` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadClient` instead "
    "of `ReadClient if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->client.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerClientInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_FocusClient_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_NavigateClient_ParamsDataView {
 public:
  ServiceWorkerHost_NavigateClient_ParamsDataView() = default;

  ServiceWorkerHost_NavigateClient_ParamsDataView(
      internal::ServiceWorkerHost_NavigateClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetClientUuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClientUuid(UserType* output) {
    
    auto* pointer = data_->client_uuid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_NavigateClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_NavigateClient_ResponseParamsDataView {
 public:
  ServiceWorkerHost_NavigateClient_ResponseParamsDataView() = default;

  ServiceWorkerHost_NavigateClient_ResponseParamsDataView(
      internal::ServiceWorkerHost_NavigateClient_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetClientDataView(
      ::blink::mojom::ServiceWorkerClientInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClient(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerClientInfoDataView, UserType>(),
    "Attempting to read the optional `client` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadClient` instead "
    "of `ReadClient if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->client.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerClientInfoDataView>(
        pointer, output, message_);
  }
  inline void GetErrorMsgDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMsg(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `error_msg` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadErrorMsg` instead "
    "of `ReadErrorMsg if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error_msg.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_NavigateClient_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerHost_SkipWaiting_ParamsDataView {
 public:
  ServiceWorkerHost_SkipWaiting_ParamsDataView() = default;

  ServiceWorkerHost_SkipWaiting_ParamsDataView(
      internal::ServiceWorkerHost_SkipWaiting_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorkerHost_SkipWaiting_Params_Data* data_ = nullptr;
};



class ServiceWorkerHost_SkipWaiting_ResponseParamsDataView {
 public:
  ServiceWorkerHost_SkipWaiting_ResponseParamsDataView() = default;

  ServiceWorkerHost_SkipWaiting_ResponseParamsDataView(
      internal::ServiceWorkerHost_SkipWaiting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::ServiceWorkerHost_SkipWaiting_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorkerHost_ClaimClients_ParamsDataView {
 public:
  ServiceWorkerHost_ClaimClients_ParamsDataView() = default;

  ServiceWorkerHost_ClaimClients_ParamsDataView(
      internal::ServiceWorkerHost_ClaimClients_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorkerHost_ClaimClients_Params_Data* data_ = nullptr;
};



class ServiceWorkerHost_ClaimClients_ResponseParamsDataView {
 public:
  ServiceWorkerHost_ClaimClients_ResponseParamsDataView() = default;

  ServiceWorkerHost_ClaimClients_ResponseParamsDataView(
      internal::ServiceWorkerHost_ClaimClients_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerErrorType>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerErrorType error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerErrorType>(data_->error));
  }
  inline void GetErrorMsgDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMsg(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `error_msg` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadErrorMsg` instead "
    "of `ReadErrorMsg if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error_msg.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerHost_ClaimClients_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_InitializeGlobalScope_ParamsDataView {
 public:
  ServiceWorker_InitializeGlobalScope_ParamsDataView() = default;

  ServiceWorker_InitializeGlobalScope_ParamsDataView(
      internal::ServiceWorker_InitializeGlobalScope_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeServiceWorkerHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::ServiceWorkerHostAssociatedPtrInfoDataView>(
            &data_->service_worker_host, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetRegistrationInfoDataView(
      ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRegistrationInfo(UserType* output) {
    
    auto* pointer = data_->registration_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView>(
        pointer, output, message_);
  }
  inline void GetServiceWorkerInfoDataView(
      ::blink::mojom::ServiceWorkerObjectInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadServiceWorkerInfo(UserType* output) {
    
    auto* pointer = data_->service_worker_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerObjectInfoDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadFetchHandlerExistence(UserType* output) const {
    auto data_value = data_->fetch_handler_existence;
    return mojo::internal::Deserialize<::blink::mojom::FetchHandlerExistence>(
        data_value, output);
  }
  FetchHandlerExistence fetch_handler_existence() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FetchHandlerExistence>(data_->fetch_handler_existence));
  }
  template <typename UserType>
  UserType TakeReportingObserverReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::ReportingObserverInterfaceBase>>(
            &data_->reporting_observer_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadAncestorFrameType(UserType* output) const {
    auto data_value = data_->ancestor_frame_type;
    return mojo::internal::Deserialize<::blink::mojom::AncestorFrameType>(
        data_value, output);
  }
  ::blink::mojom::AncestorFrameType ancestor_frame_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::AncestorFrameType>(data_->ancestor_frame_type));
  }
 private:
  internal::ServiceWorker_InitializeGlobalScope_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchInstallEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchInstallEvent_ParamsDataView() = default;

  ServiceWorker_DispatchInstallEvent_ParamsDataView(
      internal::ServiceWorker_DispatchInstallEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorker_DispatchInstallEvent_Params_Data* data_ = nullptr;
};



class ServiceWorker_DispatchInstallEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchInstallEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchInstallEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchInstallEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
  uint32_t fetch_count() const {
    return data_->fetch_count;
  }
 private:
  internal::ServiceWorker_DispatchInstallEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchActivateEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchActivateEvent_ParamsDataView() = default;

  ServiceWorker_DispatchActivateEvent_ParamsDataView(
      internal::ServiceWorker_DispatchActivateEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorker_DispatchActivateEvent_Params_Data* data_ = nullptr;
};



class ServiceWorker_DispatchActivateEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchActivateEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchActivateEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchActivateEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchActivateEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchBackgroundFetchAbortEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchBackgroundFetchAbortEvent_ParamsDataView() = default;

  ServiceWorker_DispatchBackgroundFetchAbortEvent_ParamsDataView(
      internal::ServiceWorker_DispatchBackgroundFetchAbortEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRegistrationDataView(
      ::blink::mojom::BackgroundFetchRegistrationDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRegistration(UserType* output) {
    
    auto* pointer = data_->registration.Get();
    return mojo::internal::Deserialize<::blink::mojom::BackgroundFetchRegistrationDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchBackgroundFetchAbortEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchBackgroundFetchClickEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchBackgroundFetchClickEvent_ParamsDataView() = default;

  ServiceWorker_DispatchBackgroundFetchClickEvent_ParamsDataView(
      internal::ServiceWorker_DispatchBackgroundFetchClickEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRegistrationDataView(
      ::blink::mojom::BackgroundFetchRegistrationDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRegistration(UserType* output) {
    
    auto* pointer = data_->registration.Get();
    return mojo::internal::Deserialize<::blink::mojom::BackgroundFetchRegistrationDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchBackgroundFetchClickEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchBackgroundFetchFailEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchBackgroundFetchFailEvent_ParamsDataView() = default;

  ServiceWorker_DispatchBackgroundFetchFailEvent_ParamsDataView(
      internal::ServiceWorker_DispatchBackgroundFetchFailEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRegistrationDataView(
      ::blink::mojom::BackgroundFetchRegistrationDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRegistration(UserType* output) {
    
    auto* pointer = data_->registration.Get();
    return mojo::internal::Deserialize<::blink::mojom::BackgroundFetchRegistrationDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchBackgroundFetchFailEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchBackgroundFetchSuccessEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchBackgroundFetchSuccessEvent_ParamsDataView() = default;

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_ParamsDataView(
      internal::ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRegistrationDataView(
      ::blink::mojom::BackgroundFetchRegistrationDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRegistration(UserType* output) {
    
    auto* pointer = data_->registration.Get();
    return mojo::internal::Deserialize<::blink::mojom::BackgroundFetchRegistrationDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchCookieChangeEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchCookieChangeEvent_ParamsDataView() = default;

  ServiceWorker_DispatchCookieChangeEvent_ParamsDataView(
      internal::ServiceWorker_DispatchCookieChangeEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetChangeDataView(
      ::network::mojom::CookieChangeInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadChange(UserType* output) {
    
    auto* pointer = data_->change.Get();
    return mojo::internal::Deserialize<::network::mojom::CookieChangeInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchCookieChangeEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchCookieChangeEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchCookieChangeEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchCookieChangeEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchCookieChangeEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchCookieChangeEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchFetchEventForMainResource_ParamsDataView {
 public:
  ServiceWorker_DispatchFetchEventForMainResource_ParamsDataView() = default;

  ServiceWorker_DispatchFetchEventForMainResource_ParamsDataView(
      internal::ServiceWorker_DispatchFetchEventForMainResource_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      ::blink::mojom::DispatchFetchEventParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::blink::mojom::DispatchFetchEventParamsDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeResponseCallback() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::ServiceWorkerFetchResponseCallbackInterfaceBase>>(
            &data_->response_callback, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ServiceWorker_DispatchFetchEventForMainResource_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchFetchEventForMainResource_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchFetchEventForMainResource_ResponseParamsDataView() = default;

  ServiceWorker_DispatchFetchEventForMainResource_ResponseParamsDataView(
      internal::ServiceWorker_DispatchFetchEventForMainResource_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchFetchEventForMainResource_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchNotificationClickEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchNotificationClickEvent_ParamsDataView() = default;

  ServiceWorker_DispatchNotificationClickEvent_ParamsDataView(
      internal::ServiceWorker_DispatchNotificationClickEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNotificationIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNotificationId(UserType* output) {
    
    auto* pointer = data_->notification_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetNotificationDataDataView(
      ::blink::mojom::NotificationDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNotificationData(UserType* output) {
    
    auto* pointer = data_->notification_data.Get();
    return mojo::internal::Deserialize<::blink::mojom::NotificationDataDataView>(
        pointer, output, message_);
  }
  int32_t action_index() const {
    return data_->action_index;
  }
  inline void GetReplyDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReply(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::String16DataView, UserType>(),
    "Attempting to read the optional `reply` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadReply` instead "
    "of `ReadReply if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->reply.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchNotificationClickEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchNotificationClickEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchNotificationClickEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchNotificationClickEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchNotificationClickEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchNotificationClickEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchNotificationCloseEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchNotificationCloseEvent_ParamsDataView() = default;

  ServiceWorker_DispatchNotificationCloseEvent_ParamsDataView(
      internal::ServiceWorker_DispatchNotificationCloseEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNotificationIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNotificationId(UserType* output) {
    
    auto* pointer = data_->notification_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetNotificationDataDataView(
      ::blink::mojom::NotificationDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNotificationData(UserType* output) {
    
    auto* pointer = data_->notification_data.Get();
    return mojo::internal::Deserialize<::blink::mojom::NotificationDataDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchNotificationCloseEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchNotificationCloseEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchNotificationCloseEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchNotificationCloseEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchNotificationCloseEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchNotificationCloseEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchPushEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchPushEvent_ParamsDataView() = default;

  ServiceWorker_DispatchPushEvent_ParamsDataView(
      internal::ServiceWorker_DispatchPushEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPayloadDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPayload(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `payload` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPayload` instead "
    "of `ReadPayload if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->payload.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchPushEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchPushEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchPushEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchPushEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchPushEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchPushEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchPushSubscriptionChangeEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchPushSubscriptionChangeEvent_ParamsDataView() = default;

  ServiceWorker_DispatchPushSubscriptionChangeEvent_ParamsDataView(
      internal::ServiceWorker_DispatchPushSubscriptionChangeEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOldSubscriptionDataView(
      ::blink::mojom::PushSubscriptionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOldSubscription(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::PushSubscriptionDataView, UserType>(),
    "Attempting to read the optional `old_subscription` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOldSubscription` instead "
    "of `ReadOldSubscription if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->old_subscription.Get();
    return mojo::internal::Deserialize<::blink::mojom::PushSubscriptionDataView>(
        pointer, output, message_);
  }
  inline void GetNewSubscriptionDataView(
      ::blink::mojom::PushSubscriptionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewSubscription(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::PushSubscriptionDataView, UserType>(),
    "Attempting to read the optional `new_subscription` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadNewSubscription` instead "
    "of `ReadNewSubscription if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->new_subscription.Get();
    return mojo::internal::Deserialize<::blink::mojom::PushSubscriptionDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchPushSubscriptionChangeEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchSyncEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchSyncEvent_ParamsDataView() = default;

  ServiceWorker_DispatchSyncEvent_ParamsDataView(
      internal::ServiceWorker_DispatchSyncEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTagDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTag(UserType* output) {
    
    auto* pointer = data_->tag.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool last_chance() const {
    return data_->last_chance;
  }
  inline void GetTimeoutDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTimeout(UserType* output) {
    
    auto* pointer = data_->timeout.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchSyncEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchSyncEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchSyncEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchSyncEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchSyncEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchSyncEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchPeriodicSyncEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchPeriodicSyncEvent_ParamsDataView() = default;

  ServiceWorker_DispatchPeriodicSyncEvent_ParamsDataView(
      internal::ServiceWorker_DispatchPeriodicSyncEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTagDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTag(UserType* output) {
    
    auto* pointer = data_->tag.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetTimeoutDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTimeout(UserType* output) {
    
    auto* pointer = data_->timeout.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchPeriodicSyncEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchPeriodicSyncEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchPeriodicSyncEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchPeriodicSyncEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchAbortPaymentEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchAbortPaymentEvent_ParamsDataView() = default;

  ServiceWorker_DispatchAbortPaymentEvent_ParamsDataView(
      internal::ServiceWorker_DispatchAbortPaymentEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeResultOfAbortPayment() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::payments::mojom::PaymentHandlerResponseCallbackInterfaceBase>>(
            &data_->result_of_abort_payment, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ServiceWorker_DispatchAbortPaymentEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchAbortPaymentEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchAbortPaymentEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchAbortPaymentEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchAbortPaymentEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchAbortPaymentEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchCanMakePaymentEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchCanMakePaymentEvent_ParamsDataView() = default;

  ServiceWorker_DispatchCanMakePaymentEvent_ParamsDataView(
      internal::ServiceWorker_DispatchCanMakePaymentEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEventDataDataView(
      ::payments::mojom::CanMakePaymentEventDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEventData(UserType* output) {
    
    auto* pointer = data_->event_data.Get();
    return mojo::internal::Deserialize<::payments::mojom::CanMakePaymentEventDataDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeResultOfCanMakePayment() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::payments::mojom::PaymentHandlerResponseCallbackInterfaceBase>>(
            &data_->result_of_can_make_payment, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ServiceWorker_DispatchCanMakePaymentEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchCanMakePaymentEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchCanMakePaymentEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchCanMakePaymentEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchPaymentRequestEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchPaymentRequestEvent_ParamsDataView() = default;

  ServiceWorker_DispatchPaymentRequestEvent_ParamsDataView(
      internal::ServiceWorker_DispatchPaymentRequestEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestDataDataView(
      ::payments::mojom::PaymentRequestEventDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequestData(UserType* output) {
    
    auto* pointer = data_->request_data.Get();
    return mojo::internal::Deserialize<::payments::mojom::PaymentRequestEventDataDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeResponseCallback() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::payments::mojom::PaymentHandlerResponseCallbackInterfaceBase>>(
            &data_->response_callback, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ServiceWorker_DispatchPaymentRequestEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchPaymentRequestEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchPaymentRequestEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchPaymentRequestEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchPaymentRequestEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchPaymentRequestEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchExtendableMessageEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchExtendableMessageEvent_ParamsDataView() = default;

  ServiceWorker_DispatchExtendableMessageEvent_ParamsDataView(
      internal::ServiceWorker_DispatchExtendableMessageEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEventDataView(
      ExtendableMessageEventDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEvent(UserType* output) {
    
    auto* pointer = data_->event.Get();
    return mojo::internal::Deserialize<::blink::mojom::ExtendableMessageEventDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchExtendableMessageEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchExtendableMessageEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchExtendableMessageEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchExtendableMessageEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchExtendableMessageEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchExtendableMessageEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_DispatchContentDeleteEvent_ParamsDataView {
 public:
  ServiceWorker_DispatchContentDeleteEvent_ParamsDataView() = default;

  ServiceWorker_DispatchContentDeleteEvent_ParamsDataView(
      internal::ServiceWorker_DispatchContentDeleteEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_DispatchContentDeleteEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_DispatchContentDeleteEvent_ResponseParamsDataView {
 public:
  ServiceWorker_DispatchContentDeleteEvent_ResponseParamsDataView() = default;

  ServiceWorker_DispatchContentDeleteEvent_ResponseParamsDataView(
      internal::ServiceWorker_DispatchContentDeleteEvent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerEventStatus>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerEventStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerEventStatus>(data_->status));
  }
 private:
  internal::ServiceWorker_DispatchContentDeleteEvent_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_Ping_ParamsDataView {
 public:
  ServiceWorker_Ping_ParamsDataView() = default;

  ServiceWorker_Ping_ParamsDataView(
      internal::ServiceWorker_Ping_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorker_Ping_Params_Data* data_ = nullptr;
};



class ServiceWorker_Ping_ResponseParamsDataView {
 public:
  ServiceWorker_Ping_ResponseParamsDataView() = default;

  ServiceWorker_Ping_ResponseParamsDataView(
      internal::ServiceWorker_Ping_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorker_Ping_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorker_SetIdleDelay_ParamsDataView {
 public:
  ServiceWorker_SetIdleDelay_ParamsDataView() = default;

  ServiceWorker_SetIdleDelay_ParamsDataView(
      internal::ServiceWorker_SetIdleDelay_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDelayDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDelay(UserType* output) {
    
    auto* pointer = data_->delay.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_SetIdleDelay_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_AddMessageToConsole_ParamsDataView {
 public:
  ServiceWorker_AddMessageToConsole_ParamsDataView() = default;

  ServiceWorker_AddMessageToConsole_ParamsDataView(
      internal::ServiceWorker_AddMessageToConsole_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadLevel(UserType* output) const {
    auto data_value = data_->level;
    return mojo::internal::Deserialize<::blink::mojom::ConsoleMessageLevel>(
        data_value, output);
  }
  ::blink::mojom::ConsoleMessageLevel level() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ConsoleMessageLevel>(data_->level));
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_AddMessageToConsole_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_ExecuteScriptForTest_ParamsDataView {
 public:
  ServiceWorker_ExecuteScriptForTest_ParamsDataView() = default;

  ServiceWorker_ExecuteScriptForTest_ParamsDataView(
      internal::ServiceWorker_ExecuteScriptForTest_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetJavascriptDataView(
      ::mojo_base::mojom::BigString16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadJavascript(UserType* output) {
    
    auto* pointer = data_->javascript.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::BigString16DataView>(
        pointer, output, message_);
  }
  bool wants_result() const {
    return data_->wants_result;
  }
 private:
  internal::ServiceWorker_ExecuteScriptForTest_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorker_ExecuteScriptForTest_ResponseParamsDataView {
 public:
  ServiceWorker_ExecuteScriptForTest_ResponseParamsDataView() = default;

  ServiceWorker_ExecuteScriptForTest_ResponseParamsDataView(
      internal::ServiceWorker_ExecuteScriptForTest_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::mojo_base::mojom::ValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::ValueDataView>(
        pointer, output, message_);
  }
  inline void GetErrorDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `error` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadError` instead "
    "of `ReadError if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorker_ExecuteScriptForTest_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void ServiceWorkerHost_SetCachedMetadata_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ServiceWorkerHost_SetCachedMetadata_ParamsDataView::GetDataDataView(
    ::mojo_base::mojom::ReadOnlyBufferDataView* output) {
  auto pointer = data_->data.Get();
  *output = ::mojo_base::mojom::ReadOnlyBufferDataView(pointer, message_);
}


inline void ServiceWorkerHost_ClearCachedMetadata_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void ServiceWorkerHost_GetClients_ParamsDataView::GetOptionsDataView(
    ::blink::mojom::ServiceWorkerClientQueryOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = ::blink::mojom::ServiceWorkerClientQueryOptionsDataView(pointer, message_);
}


inline void ServiceWorkerHost_GetClients_ResponseParamsDataView::GetClientsDataView(
    mojo::ArrayDataView<::blink::mojom::ServiceWorkerClientInfoDataView>* output) {
  auto pointer = data_->clients.Get();
  *output = mojo::ArrayDataView<::blink::mojom::ServiceWorkerClientInfoDataView>(pointer, message_);
}


inline void ServiceWorkerHost_GetClient_ParamsDataView::GetClientUuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->client_uuid.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ServiceWorkerHost_GetClient_ResponseParamsDataView::GetClientDataView(
    ::blink::mojom::ServiceWorkerClientInfoDataView* output) {
  auto pointer = data_->client.Get();
  *output = ::blink::mojom::ServiceWorkerClientInfoDataView(pointer, message_);
}


inline void ServiceWorkerHost_OpenNewTab_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void ServiceWorkerHost_OpenNewTab_ResponseParamsDataView::GetClientDataView(
    ::blink::mojom::ServiceWorkerClientInfoDataView* output) {
  auto pointer = data_->client.Get();
  *output = ::blink::mojom::ServiceWorkerClientInfoDataView(pointer, message_);
}
inline void ServiceWorkerHost_OpenNewTab_ResponseParamsDataView::GetErrorMsgDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error_msg.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ServiceWorkerHost_OpenPaymentHandlerWindow_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParamsDataView::GetClientDataView(
    ::blink::mojom::ServiceWorkerClientInfoDataView* output) {
  auto pointer = data_->client.Get();
  *output = ::blink::mojom::ServiceWorkerClientInfoDataView(pointer, message_);
}
inline void ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParamsDataView::GetErrorMsgDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error_msg.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ServiceWorkerHost_PostMessageToClient_ParamsDataView::GetClientUuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->client_uuid.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ServiceWorkerHost_PostMessageToClient_ParamsDataView::GetMessageDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, message_);
}


inline void ServiceWorkerHost_FocusClient_ParamsDataView::GetClientUuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->client_uuid.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ServiceWorkerHost_FocusClient_ResponseParamsDataView::GetClientDataView(
    ::blink::mojom::ServiceWorkerClientInfoDataView* output) {
  auto pointer = data_->client.Get();
  *output = ::blink::mojom::ServiceWorkerClientInfoDataView(pointer, message_);
}


inline void ServiceWorkerHost_NavigateClient_ParamsDataView::GetClientUuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->client_uuid.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ServiceWorkerHost_NavigateClient_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void ServiceWorkerHost_NavigateClient_ResponseParamsDataView::GetClientDataView(
    ::blink::mojom::ServiceWorkerClientInfoDataView* output) {
  auto pointer = data_->client.Get();
  *output = ::blink::mojom::ServiceWorkerClientInfoDataView(pointer, message_);
}
inline void ServiceWorkerHost_NavigateClient_ResponseParamsDataView::GetErrorMsgDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error_msg.Get();
  *output = mojo::StringDataView(pointer, message_);
}








inline void ServiceWorkerHost_ClaimClients_ResponseParamsDataView::GetErrorMsgDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error_msg.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ServiceWorker_InitializeGlobalScope_ParamsDataView::GetRegistrationInfoDataView(
    ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView* output) {
  auto pointer = data_->registration_info.Get();
  *output = ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView(pointer, message_);
}
inline void ServiceWorker_InitializeGlobalScope_ParamsDataView::GetServiceWorkerInfoDataView(
    ::blink::mojom::ServiceWorkerObjectInfoDataView* output) {
  auto pointer = data_->service_worker_info.Get();
  *output = ::blink::mojom::ServiceWorkerObjectInfoDataView(pointer, message_);
}










inline void ServiceWorker_DispatchBackgroundFetchAbortEvent_ParamsDataView::GetRegistrationDataView(
    ::blink::mojom::BackgroundFetchRegistrationDataView* output) {
  auto pointer = data_->registration.Get();
  *output = ::blink::mojom::BackgroundFetchRegistrationDataView(pointer, message_);
}




inline void ServiceWorker_DispatchBackgroundFetchClickEvent_ParamsDataView::GetRegistrationDataView(
    ::blink::mojom::BackgroundFetchRegistrationDataView* output) {
  auto pointer = data_->registration.Get();
  *output = ::blink::mojom::BackgroundFetchRegistrationDataView(pointer, message_);
}




inline void ServiceWorker_DispatchBackgroundFetchFailEvent_ParamsDataView::GetRegistrationDataView(
    ::blink::mojom::BackgroundFetchRegistrationDataView* output) {
  auto pointer = data_->registration.Get();
  *output = ::blink::mojom::BackgroundFetchRegistrationDataView(pointer, message_);
}




inline void ServiceWorker_DispatchBackgroundFetchSuccessEvent_ParamsDataView::GetRegistrationDataView(
    ::blink::mojom::BackgroundFetchRegistrationDataView* output) {
  auto pointer = data_->registration.Get();
  *output = ::blink::mojom::BackgroundFetchRegistrationDataView(pointer, message_);
}




inline void ServiceWorker_DispatchCookieChangeEvent_ParamsDataView::GetChangeDataView(
    ::network::mojom::CookieChangeInfoDataView* output) {
  auto pointer = data_->change.Get();
  *output = ::network::mojom::CookieChangeInfoDataView(pointer, message_);
}




inline void ServiceWorker_DispatchFetchEventForMainResource_ParamsDataView::GetParamsDataView(
    ::blink::mojom::DispatchFetchEventParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::blink::mojom::DispatchFetchEventParamsDataView(pointer, message_);
}




inline void ServiceWorker_DispatchNotificationClickEvent_ParamsDataView::GetNotificationIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->notification_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ServiceWorker_DispatchNotificationClickEvent_ParamsDataView::GetNotificationDataDataView(
    ::blink::mojom::NotificationDataDataView* output) {
  auto pointer = data_->notification_data.Get();
  *output = ::blink::mojom::NotificationDataDataView(pointer, message_);
}
inline void ServiceWorker_DispatchNotificationClickEvent_ParamsDataView::GetReplyDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->reply.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}




inline void ServiceWorker_DispatchNotificationCloseEvent_ParamsDataView::GetNotificationIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->notification_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ServiceWorker_DispatchNotificationCloseEvent_ParamsDataView::GetNotificationDataDataView(
    ::blink::mojom::NotificationDataDataView* output) {
  auto pointer = data_->notification_data.Get();
  *output = ::blink::mojom::NotificationDataDataView(pointer, message_);
}




inline void ServiceWorker_DispatchPushEvent_ParamsDataView::GetPayloadDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->payload.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void ServiceWorker_DispatchPushSubscriptionChangeEvent_ParamsDataView::GetOldSubscriptionDataView(
    ::blink::mojom::PushSubscriptionDataView* output) {
  auto pointer = data_->old_subscription.Get();
  *output = ::blink::mojom::PushSubscriptionDataView(pointer, message_);
}
inline void ServiceWorker_DispatchPushSubscriptionChangeEvent_ParamsDataView::GetNewSubscriptionDataView(
    ::blink::mojom::PushSubscriptionDataView* output) {
  auto pointer = data_->new_subscription.Get();
  *output = ::blink::mojom::PushSubscriptionDataView(pointer, message_);
}




inline void ServiceWorker_DispatchSyncEvent_ParamsDataView::GetTagDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->tag.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ServiceWorker_DispatchSyncEvent_ParamsDataView::GetTimeoutDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->timeout.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}




inline void ServiceWorker_DispatchPeriodicSyncEvent_ParamsDataView::GetTagDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->tag.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ServiceWorker_DispatchPeriodicSyncEvent_ParamsDataView::GetTimeoutDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->timeout.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}








inline void ServiceWorker_DispatchCanMakePaymentEvent_ParamsDataView::GetEventDataDataView(
    ::payments::mojom::CanMakePaymentEventDataDataView* output) {
  auto pointer = data_->event_data.Get();
  *output = ::payments::mojom::CanMakePaymentEventDataDataView(pointer, message_);
}




inline void ServiceWorker_DispatchPaymentRequestEvent_ParamsDataView::GetRequestDataDataView(
    ::payments::mojom::PaymentRequestEventDataDataView* output) {
  auto pointer = data_->request_data.Get();
  *output = ::payments::mojom::PaymentRequestEventDataDataView(pointer, message_);
}




inline void ServiceWorker_DispatchExtendableMessageEvent_ParamsDataView::GetEventDataView(
    ExtendableMessageEventDataView* output) {
  auto pointer = data_->event.Get();
  *output = ExtendableMessageEventDataView(pointer, message_);
}




inline void ServiceWorker_DispatchContentDeleteEvent_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, message_);
}








inline void ServiceWorker_SetIdleDelay_ParamsDataView::GetDelayDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->delay.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}


inline void ServiceWorker_AddMessageToConsole_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ServiceWorker_ExecuteScriptForTest_ParamsDataView::GetJavascriptDataView(
    ::mojo_base::mojom::BigString16DataView* output) {
  auto pointer = data_->javascript.Get();
  *output = ::mojo_base::mojom::BigString16DataView(pointer, message_);
}


inline void ServiceWorker_ExecuteScriptForTest_ResponseParamsDataView::GetResultDataView(
    ::mojo_base::mojom::ValueDataView* output) {
  auto pointer = &data_->result;
  *output = ::mojo_base::mojom::ValueDataView(pointer, message_);
}
inline void ServiceWorker_ExecuteScriptForTest_ResponseParamsDataView::GetErrorDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_MOJOM_PARAMS_DATA_H_