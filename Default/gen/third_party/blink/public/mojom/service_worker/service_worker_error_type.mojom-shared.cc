// third_party/blink/public/mojom/service_worker/service_worker_error_type.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/service_worker/service_worker_error_type.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/service_worker/service_worker_error_type.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* ServiceWorkerErrorTypeToStringHelper(ServiceWorkerErrorType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case ServiceWorkerErrorType::kNone:
      return "kNone";
    case ServiceWorkerErrorType::kAbort:
      return "kAbort";
    case ServiceWorkerErrorType::kActivate:
      return "kActivate";
    case ServiceWorkerErrorType::kDisabled:
      return "kDisabled";
    case ServiceWorkerErrorType::kInstall:
      return "kInstall";
    case ServiceWorkerErrorType::kNavigation:
      return "kNavigation";
    case ServiceWorkerErrorType::kNetwork:
      return "kNetwork";
    case ServiceWorkerErrorType::kNotFound:
      return "kNotFound";
    case ServiceWorkerErrorType::kScriptEvaluateFailed:
      return "kScriptEvaluateFailed";
    case ServiceWorkerErrorType::kSecurity:
      return "kSecurity";
    case ServiceWorkerErrorType::kState:
      return "kState";
    case ServiceWorkerErrorType::kTimeout:
      return "kTimeout";
    case ServiceWorkerErrorType::kType:
      return "kType";
    case ServiceWorkerErrorType::kUnknown:
      return "kUnknown";
    default:
      return nullptr;
  }
}

std::string ServiceWorkerErrorTypeToString(ServiceWorkerErrorType value) {
  const char *str = ServiceWorkerErrorTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown ServiceWorkerErrorType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, ServiceWorkerErrorType value) {
  return os << ServiceWorkerErrorTypeToString(value);
}

static NOINLINE const char* ServiceWorkerResponseErrorToStringHelper(ServiceWorkerResponseError value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case ServiceWorkerResponseError::kUnknown:
      return "kUnknown";
    case ServiceWorkerResponseError::kPromiseRejected:
      return "kPromiseRejected";
    case ServiceWorkerResponseError::kDefaultPrevented:
      return "kDefaultPrevented";
    case ServiceWorkerResponseError::kNoV8Instance:
      return "kNoV8Instance";
    case ServiceWorkerResponseError::kResponseTypeError:
      return "kResponseTypeError";
    case ServiceWorkerResponseError::kResponseTypeOpaque:
      return "kResponseTypeOpaque";
    case ServiceWorkerResponseError::kResponseTypeNotBasicOrDefault:
      return "kResponseTypeNotBasicOrDefault";
    case ServiceWorkerResponseError::kBodyUsed:
      return "kBodyUsed";
    case ServiceWorkerResponseError::kResponseTypeOpaqueForClientRequest:
      return "kResponseTypeOpaqueForClientRequest";
    case ServiceWorkerResponseError::kResponseTypeOpaqueRedirect:
      return "kResponseTypeOpaqueRedirect";
    case ServiceWorkerResponseError::kBodyLocked:
      return "kBodyLocked";
    case ServiceWorkerResponseError::kRedirectedResponseForNotFollowRequest:
      return "kRedirectedResponseForNotFollowRequest";
    case ServiceWorkerResponseError::kDataPipeCreationFailed:
      return "kDataPipeCreationFailed";
    case ServiceWorkerResponseError::kResponseTypeCorsForRequestModeSameOrigin:
      return "kResponseTypeCorsForRequestModeSameOrigin";
    case ServiceWorkerResponseError::kResponseBodyBroken:
      return "kResponseBodyBroken";
    case ServiceWorkerResponseError::kDisallowedByCorp:
      return "kDisallowedByCorp";
    case ServiceWorkerResponseError::kRequestBodyUnusable:
      return "kRequestBodyUnusable";
    default:
      return nullptr;
  }
}

std::string ServiceWorkerResponseErrorToString(ServiceWorkerResponseError value) {
  const char *str = ServiceWorkerResponseErrorToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown ServiceWorkerResponseError value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, ServiceWorkerResponseError value) {
  return os << ServiceWorkerResponseErrorToString(value);
}

namespace internal {

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::ServiceWorkerErrorType>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::ServiceWorkerErrorType value) {
  return std::move(context).WriteString(::blink::mojom::ServiceWorkerErrorTypeToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::ServiceWorkerResponseError>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::ServiceWorkerResponseError value) {
  return std::move(context).WriteString(::blink::mojom::ServiceWorkerResponseErrorToString(value));
}

} // namespace perfetto