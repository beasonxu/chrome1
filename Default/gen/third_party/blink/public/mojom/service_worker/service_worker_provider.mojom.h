// third_party/blink/public/mojom/service_worker/service_worker_provider.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_PROVIDER_MOJOM_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_PROVIDER_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/service_worker/service_worker_provider.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_provider.mojom-forward.h"
#include "services/network/public/mojom/url_loader_factory.mojom-forward.h"
#include "third_party/blink/public/mojom/browser_interface_broker.mojom-forward.h"
#include "third_party/blink/public/mojom/cache_storage/cache_storage.mojom-forward.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_container.mojom-forward.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_container_type.mojom-forward.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_object.mojom-forward.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_worker_client.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/common/common_export.h"




namespace blink {
namespace mojom {








class BLINK_COMMON_EXPORT ServiceWorkerProviderInfoForStartWorker {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ServiceWorkerProviderInfoForStartWorker, T>::value>;
  using DataView = ServiceWorkerProviderInfoForStartWorkerDataView;
  using Data_ = internal::ServiceWorkerProviderInfoForStartWorker_Data;

  template <typename... Args>
  static ServiceWorkerProviderInfoForStartWorkerPtr New(Args&&... args) {
    return ServiceWorkerProviderInfoForStartWorkerPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ServiceWorkerProviderInfoForStartWorkerPtr From(const U& u) {
    return mojo::TypeConverter<ServiceWorkerProviderInfoForStartWorkerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ServiceWorkerProviderInfoForStartWorker>::Convert(*this);
  }


  ServiceWorkerProviderInfoForStartWorker();

  ServiceWorkerProviderInfoForStartWorker(
      ::mojo::PendingAssociatedRemote<::blink::mojom::ServiceWorkerContainerHost> host_remote,
      ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> script_loader_factory_remote,
      ::mojo::PendingRemote<::blink::mojom::CacheStorage> cache_storage,
      ::mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker> browser_interface_broker);

ServiceWorkerProviderInfoForStartWorker(const ServiceWorkerProviderInfoForStartWorker&) = delete;
ServiceWorkerProviderInfoForStartWorker& operator=(const ServiceWorkerProviderInfoForStartWorker&) = delete;

  ~ServiceWorkerProviderInfoForStartWorker();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ServiceWorkerProviderInfoForStartWorkerPtr>
  ServiceWorkerProviderInfoForStartWorkerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ServiceWorkerProviderInfoForStartWorker::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ServiceWorkerProviderInfoForStartWorker::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ServiceWorkerProviderInfoForStartWorker::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ServiceWorkerProviderInfoForStartWorker_UnserializedMessageContext<
            UserType, ServiceWorkerProviderInfoForStartWorker::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ServiceWorkerProviderInfoForStartWorker::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ServiceWorkerProviderInfoForStartWorker::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ServiceWorkerProviderInfoForStartWorker_UnserializedMessageContext<
            UserType, ServiceWorkerProviderInfoForStartWorker::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ServiceWorkerProviderInfoForStartWorker::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::mojo::PendingAssociatedRemote<::blink::mojom::ServiceWorkerContainerHost> host_remote;
  
  ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> script_loader_factory_remote;
  
  ::mojo::PendingRemote<::blink::mojom::CacheStorage> cache_storage;
  
  ::mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker> browser_interface_broker;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ServiceWorkerProviderInfoForStartWorker::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ServiceWorkerProviderInfoForStartWorker::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ServiceWorkerProviderInfoForStartWorker::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ServiceWorkerProviderInfoForStartWorker::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
ServiceWorkerProviderInfoForStartWorkerPtr ServiceWorkerProviderInfoForStartWorker::Clone() const {
  return New(
      mojo::Clone(host_remote),
      mojo::Clone(script_loader_factory_remote),
      mojo::Clone(cache_storage),
      mojo::Clone(browser_interface_broker)
  );
}

template <typename T, ServiceWorkerProviderInfoForStartWorker::EnableIfSame<T>*>
bool ServiceWorkerProviderInfoForStartWorker::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->host_remote, other_struct.host_remote))
    return false;
  if (!mojo::Equals(this->script_loader_factory_remote, other_struct.script_loader_factory_remote))
    return false;
  if (!mojo::Equals(this->cache_storage, other_struct.cache_storage))
    return false;
  if (!mojo::Equals(this->browser_interface_broker, other_struct.browser_interface_broker))
    return false;
  return true;
}

template <typename T, ServiceWorkerProviderInfoForStartWorker::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.host_remote < rhs.host_remote)
    return true;
  if (rhs.host_remote < lhs.host_remote)
    return false;
  if (lhs.script_loader_factory_remote < rhs.script_loader_factory_remote)
    return true;
  if (rhs.script_loader_factory_remote < lhs.script_loader_factory_remote)
    return false;
  if (lhs.cache_storage < rhs.cache_storage)
    return true;
  if (rhs.cache_storage < lhs.cache_storage)
    return false;
  if (lhs.browser_interface_broker < rhs.browser_interface_broker)
    return true;
  if (rhs.browser_interface_broker < lhs.browser_interface_broker)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::ServiceWorkerProviderInfoForStartWorker::DataView,
                                         ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerPtr> {
  static bool IsNull(const ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::ServiceWorkerProviderInfoForStartWorkerPtr* output) { output->reset(); }

  static  decltype(::blink::mojom::ServiceWorkerProviderInfoForStartWorker::host_remote)& host_remote(
       ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerPtr& input) {
    return input->host_remote;
  }

  static  decltype(::blink::mojom::ServiceWorkerProviderInfoForStartWorker::script_loader_factory_remote)& script_loader_factory_remote(
       ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerPtr& input) {
    return input->script_loader_factory_remote;
  }

  static  decltype(::blink::mojom::ServiceWorkerProviderInfoForStartWorker::cache_storage)& cache_storage(
       ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerPtr& input) {
    return input->cache_storage;
  }

  static  decltype(::blink::mojom::ServiceWorkerProviderInfoForStartWorker::browser_interface_broker)& browser_interface_broker(
       ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerPtr& input) {
    return input->browser_interface_broker;
  }

  static bool Read(::blink::mojom::ServiceWorkerProviderInfoForStartWorker::DataView input, ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_PROVIDER_MOJOM_H_