// third_party/blink/public/mojom/service_worker/service_worker_provider.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/service_worker/service_worker_provider.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/service_worker/service_worker_provider.mojom-params-data.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_provider.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/service_worker/service_worker_provider.mojom-import-headers.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_provider.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_PROVIDER_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_PROVIDER_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
const char kNavigation_ServiceWorkerSpec[] = "navigation:service_worker";
ServiceWorkerProviderInfoForStartWorker::ServiceWorkerProviderInfoForStartWorker()
    : host_remote(),
      script_loader_factory_remote(),
      cache_storage(),
      browser_interface_broker() {}

ServiceWorkerProviderInfoForStartWorker::ServiceWorkerProviderInfoForStartWorker(
    ::mojo::PendingAssociatedRemote<::blink::mojom::ServiceWorkerContainerHost> host_remote_in,
    ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> script_loader_factory_remote_in,
    ::mojo::PendingRemote<::blink::mojom::CacheStorage> cache_storage_in,
    ::mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker> browser_interface_broker_in)
    : host_remote(std::move(host_remote_in)),
      script_loader_factory_remote(std::move(script_loader_factory_remote_in)),
      cache_storage(std::move(cache_storage_in)),
      browser_interface_broker(std::move(browser_interface_broker_in)) {}

ServiceWorkerProviderInfoForStartWorker::~ServiceWorkerProviderInfoForStartWorker() = default;

void ServiceWorkerProviderInfoForStartWorker::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "host_remote"), this->host_remote,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingAssociatedRemote<::blink::mojom::ServiceWorkerContainerHost>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "script_loader_factory_remote"), this->script_loader_factory_remote,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<::network::mojom::URLLoaderFactory>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cache_storage"), this->cache_storage,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<::blink::mojom::CacheStorage>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "browser_interface_broker"), this->browser_interface_broker,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool ServiceWorkerProviderInfoForStartWorker::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::ServiceWorkerProviderInfoForStartWorker::DataView, ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerPtr>::Read(
    ::blink::mojom::ServiceWorkerProviderInfoForStartWorker::DataView input,
    ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerPtr* output) {
  bool success = true;
  ::blink::mojom::ServiceWorkerProviderInfoForStartWorkerPtr result(::blink::mojom::ServiceWorkerProviderInfoForStartWorker::New());
  
      if (success) {
        result->host_remote =
            input.TakeHostRemote<decltype(result->host_remote)>();
      }
      if (success) {
        result->script_loader_factory_remote =
            input.TakeScriptLoaderFactoryRemote<decltype(result->script_loader_factory_remote)>();
      }
      if (success) {
        result->cache_storage =
            input.TakeCacheStorage<decltype(result->cache_storage)>();
      }
      if (success) {
        result->browser_interface_broker =
            input.TakeBrowserInterfaceBroker<decltype(result->browser_interface_broker)>();
      }
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif