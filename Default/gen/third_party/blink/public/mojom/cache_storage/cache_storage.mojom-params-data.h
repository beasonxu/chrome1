// third_party/blink/public/mojom/cache_storage/cache_storage.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CACHE_STORAGE_CACHE_STORAGE_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CACHE_STORAGE_CACHE_STORAGE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_Match_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FetchAPIRequest_Data> request;
  mojo::internal::Pointer<internal::CacheQueryOptions_Data> query_options;
  uint8_t in_related_fetch_event : 1;
  uint8_t in_range_fetch_event : 1;
  uint8_t pad3_[7];
  int64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_Match_Params_Data>;

  CacheStorageCache_Match_Params_Data();
  ~CacheStorageCache_Match_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_Match_Params_Data) == 40,
              "Bad sizeof(CacheStorageCache_Match_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_Match_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::MatchResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_Match_ResponseParams_Data>;

  CacheStorageCache_Match_ResponseParams_Data();
  ~CacheStorageCache_Match_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_Match_ResponseParams_Data) == 24,
              "Bad sizeof(CacheStorageCache_Match_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_MatchAll_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FetchAPIRequest_Data> request;
  mojo::internal::Pointer<internal::CacheQueryOptions_Data> query_options;
  int64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_MatchAll_Params_Data>;

  CacheStorageCache_MatchAll_Params_Data();
  ~CacheStorageCache_MatchAll_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_MatchAll_Params_Data) == 32,
              "Bad sizeof(CacheStorageCache_MatchAll_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_MatchAll_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::MatchAllResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_MatchAll_ResponseParams_Data>;

  CacheStorageCache_MatchAll_ResponseParams_Data();
  ~CacheStorageCache_MatchAll_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_MatchAll_ResponseParams_Data) == 24,
              "Bad sizeof(CacheStorageCache_MatchAll_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_GetAllMatchedEntries_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FetchAPIRequest_Data> request;
  mojo::internal::Pointer<internal::CacheQueryOptions_Data> query_options;
  int64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_GetAllMatchedEntries_Params_Data>;

  CacheStorageCache_GetAllMatchedEntries_Params_Data();
  ~CacheStorageCache_GetAllMatchedEntries_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_GetAllMatchedEntries_Params_Data) == 32,
              "Bad sizeof(CacheStorageCache_GetAllMatchedEntries_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_GetAllMatchedEntries_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::GetAllMatchedEntriesResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_GetAllMatchedEntries_ResponseParams_Data>;

  CacheStorageCache_GetAllMatchedEntries_ResponseParams_Data();
  ~CacheStorageCache_GetAllMatchedEntries_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_GetAllMatchedEntries_ResponseParams_Data) == 24,
              "Bad sizeof(CacheStorageCache_GetAllMatchedEntries_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_Keys_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FetchAPIRequest_Data> request;
  mojo::internal::Pointer<internal::CacheQueryOptions_Data> query_options;
  int64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_Keys_Params_Data>;

  CacheStorageCache_Keys_Params_Data();
  ~CacheStorageCache_Keys_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_Keys_Params_Data) == 32,
              "Bad sizeof(CacheStorageCache_Keys_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_Keys_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::CacheKeysResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_Keys_ResponseParams_Data>;

  CacheStorageCache_Keys_ResponseParams_Data();
  ~CacheStorageCache_Keys_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_Keys_ResponseParams_Data) == 24,
              "Bad sizeof(CacheStorageCache_Keys_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_Batch_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::BatchOperation_Data>>> batch_operations;
  int64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_Batch_Params_Data>;

  CacheStorageCache_Batch_Params_Data();
  ~CacheStorageCache_Batch_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_Batch_Params_Data) == 24,
              "Bad sizeof(CacheStorageCache_Batch_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_Batch_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::CacheStorageVerboseError_Data> result;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_Batch_ResponseParams_Data>;

  CacheStorageCache_Batch_ResponseParams_Data();
  ~CacheStorageCache_Batch_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_Batch_ResponseParams_Data) == 16,
              "Bad sizeof(CacheStorageCache_Batch_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_WriteSideData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> expected_response_time;
  ::mojo_base::mojom::internal::BigBuffer_Data data;
  int64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_WriteSideData_Params_Data>;

  CacheStorageCache_WriteSideData_Params_Data();
  ~CacheStorageCache_WriteSideData_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_WriteSideData_Params_Data) == 48,
              "Bad sizeof(CacheStorageCache_WriteSideData_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorageCache_WriteSideData_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CacheStorageCache_WriteSideData_ResponseParams_Data>;

  CacheStorageCache_WriteSideData_ResponseParams_Data();
  ~CacheStorageCache_WriteSideData_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorageCache_WriteSideData_ResponseParams_Data) == 16,
              "Bad sizeof(CacheStorageCache_WriteSideData_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorage_Has_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> cache_name;
  int64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<CacheStorage_Has_Params_Data>;

  CacheStorage_Has_Params_Data();
  ~CacheStorage_Has_Params_Data() = delete;
};
static_assert(sizeof(CacheStorage_Has_Params_Data) == 24,
              "Bad sizeof(CacheStorage_Has_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorage_Has_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CacheStorage_Has_ResponseParams_Data>;

  CacheStorage_Has_ResponseParams_Data();
  ~CacheStorage_Has_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorage_Has_ResponseParams_Data) == 16,
              "Bad sizeof(CacheStorage_Has_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorage_Delete_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> cache_name;
  int64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<CacheStorage_Delete_Params_Data>;

  CacheStorage_Delete_Params_Data();
  ~CacheStorage_Delete_Params_Data() = delete;
};
static_assert(sizeof(CacheStorage_Delete_Params_Data) == 24,
              "Bad sizeof(CacheStorage_Delete_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorage_Delete_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CacheStorage_Delete_ResponseParams_Data>;

  CacheStorage_Delete_ResponseParams_Data();
  ~CacheStorage_Delete_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorage_Delete_ResponseParams_Data) == 16,
              "Bad sizeof(CacheStorage_Delete_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorage_Keys_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<CacheStorage_Keys_Params_Data>;

  CacheStorage_Keys_Params_Data();
  ~CacheStorage_Keys_Params_Data() = delete;
};
static_assert(sizeof(CacheStorage_Keys_Params_Data) == 16,
              "Bad sizeof(CacheStorage_Keys_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorage_Keys_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data>>> keys;

 private:
  friend class mojo::internal::MessageFragment<CacheStorage_Keys_ResponseParams_Data>;

  CacheStorage_Keys_ResponseParams_Data();
  ~CacheStorage_Keys_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorage_Keys_ResponseParams_Data) == 16,
              "Bad sizeof(CacheStorage_Keys_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorage_Match_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FetchAPIRequest_Data> request;
  mojo::internal::Pointer<internal::MultiCacheQueryOptions_Data> match_options;
  uint8_t in_related_fetch_event : 1;
  uint8_t in_range_fetch_event : 1;
  uint8_t pad3_[7];
  int64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<CacheStorage_Match_Params_Data>;

  CacheStorage_Match_Params_Data();
  ~CacheStorage_Match_Params_Data() = delete;
};
static_assert(sizeof(CacheStorage_Match_Params_Data) == 40,
              "Bad sizeof(CacheStorage_Match_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorage_Match_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::MatchResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<CacheStorage_Match_ResponseParams_Data>;

  CacheStorage_Match_ResponseParams_Data();
  ~CacheStorage_Match_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorage_Match_ResponseParams_Data) == 24,
              "Bad sizeof(CacheStorage_Match_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorage_Open_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> cache_name;
  int64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<CacheStorage_Open_Params_Data>;

  CacheStorage_Open_Params_Data();
  ~CacheStorage_Open_Params_Data() = delete;
};
static_assert(sizeof(CacheStorage_Open_Params_Data) == 24,
              "Bad sizeof(CacheStorage_Open_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CacheStorage_Open_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::OpenResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<CacheStorage_Open_ResponseParams_Data>;

  CacheStorage_Open_ResponseParams_Data();
  ~CacheStorage_Open_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorage_Open_ResponseParams_Data) == 24,
              "Bad sizeof(CacheStorage_Open_ResponseParams_Data)");

}  // namespace internal


class CacheStorageCache_Match_ParamsDataView {
 public:
  CacheStorageCache_Match_ParamsDataView() = default;

  CacheStorageCache_Match_ParamsDataView(
      internal::CacheStorageCache_Match_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestDataView(
      ::blink::mojom::FetchAPIRequestDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequest(UserType* output) {
    
    auto* pointer = data_->request.Get();
    return mojo::internal::Deserialize<::blink::mojom::FetchAPIRequestDataView>(
        pointer, output, message_);
  }
  inline void GetQueryOptionsDataView(
      CacheQueryOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadQueryOptions(UserType* output) {
    
    auto* pointer = data_->query_options.Get();
    return mojo::internal::Deserialize<::blink::mojom::CacheQueryOptionsDataView>(
        pointer, output, message_);
  }
  bool in_related_fetch_event() const {
    return data_->in_related_fetch_event;
  }
  bool in_range_fetch_event() const {
    return data_->in_range_fetch_event;
  }
  int64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::CacheStorageCache_Match_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageCache_Match_ResponseParamsDataView {
 public:
  CacheStorageCache_Match_ResponseParamsDataView() = default;

  CacheStorageCache_Match_ResponseParamsDataView(
      internal::CacheStorageCache_Match_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      MatchResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::MatchResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorageCache_Match_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageCache_MatchAll_ParamsDataView {
 public:
  CacheStorageCache_MatchAll_ParamsDataView() = default;

  CacheStorageCache_MatchAll_ParamsDataView(
      internal::CacheStorageCache_MatchAll_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestDataView(
      ::blink::mojom::FetchAPIRequestDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequest(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::FetchAPIRequestDataView, UserType>(),
    "Attempting to read the optional `request` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadRequest` instead "
    "of `ReadRequest if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->request.Get();
    return mojo::internal::Deserialize<::blink::mojom::FetchAPIRequestDataView>(
        pointer, output, message_);
  }
  inline void GetQueryOptionsDataView(
      CacheQueryOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadQueryOptions(UserType* output) {
    
    auto* pointer = data_->query_options.Get();
    return mojo::internal::Deserialize<::blink::mojom::CacheQueryOptionsDataView>(
        pointer, output, message_);
  }
  int64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::CacheStorageCache_MatchAll_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageCache_MatchAll_ResponseParamsDataView {
 public:
  CacheStorageCache_MatchAll_ResponseParamsDataView() = default;

  CacheStorageCache_MatchAll_ResponseParamsDataView(
      internal::CacheStorageCache_MatchAll_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      MatchAllResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::MatchAllResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorageCache_MatchAll_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageCache_GetAllMatchedEntries_ParamsDataView {
 public:
  CacheStorageCache_GetAllMatchedEntries_ParamsDataView() = default;

  CacheStorageCache_GetAllMatchedEntries_ParamsDataView(
      internal::CacheStorageCache_GetAllMatchedEntries_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestDataView(
      ::blink::mojom::FetchAPIRequestDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequest(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::FetchAPIRequestDataView, UserType>(),
    "Attempting to read the optional `request` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadRequest` instead "
    "of `ReadRequest if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->request.Get();
    return mojo::internal::Deserialize<::blink::mojom::FetchAPIRequestDataView>(
        pointer, output, message_);
  }
  inline void GetQueryOptionsDataView(
      CacheQueryOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadQueryOptions(UserType* output) {
    
    auto* pointer = data_->query_options.Get();
    return mojo::internal::Deserialize<::blink::mojom::CacheQueryOptionsDataView>(
        pointer, output, message_);
  }
  int64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::CacheStorageCache_GetAllMatchedEntries_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageCache_GetAllMatchedEntries_ResponseParamsDataView {
 public:
  CacheStorageCache_GetAllMatchedEntries_ResponseParamsDataView() = default;

  CacheStorageCache_GetAllMatchedEntries_ResponseParamsDataView(
      internal::CacheStorageCache_GetAllMatchedEntries_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      GetAllMatchedEntriesResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::GetAllMatchedEntriesResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorageCache_GetAllMatchedEntries_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageCache_Keys_ParamsDataView {
 public:
  CacheStorageCache_Keys_ParamsDataView() = default;

  CacheStorageCache_Keys_ParamsDataView(
      internal::CacheStorageCache_Keys_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestDataView(
      ::blink::mojom::FetchAPIRequestDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequest(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::FetchAPIRequestDataView, UserType>(),
    "Attempting to read the optional `request` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadRequest` instead "
    "of `ReadRequest if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->request.Get();
    return mojo::internal::Deserialize<::blink::mojom::FetchAPIRequestDataView>(
        pointer, output, message_);
  }
  inline void GetQueryOptionsDataView(
      CacheQueryOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadQueryOptions(UserType* output) {
    
    auto* pointer = data_->query_options.Get();
    return mojo::internal::Deserialize<::blink::mojom::CacheQueryOptionsDataView>(
        pointer, output, message_);
  }
  int64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::CacheStorageCache_Keys_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageCache_Keys_ResponseParamsDataView {
 public:
  CacheStorageCache_Keys_ResponseParamsDataView() = default;

  CacheStorageCache_Keys_ResponseParamsDataView(
      internal::CacheStorageCache_Keys_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      CacheKeysResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::CacheKeysResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorageCache_Keys_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageCache_Batch_ParamsDataView {
 public:
  CacheStorageCache_Batch_ParamsDataView() = default;

  CacheStorageCache_Batch_ParamsDataView(
      internal::CacheStorageCache_Batch_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBatchOperationsDataView(
      mojo::ArrayDataView<BatchOperationDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBatchOperations(UserType* output) {
    
    auto* pointer = data_->batch_operations.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::BatchOperationDataView>>(
        pointer, output, message_);
  }
  int64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::CacheStorageCache_Batch_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageCache_Batch_ResponseParamsDataView {
 public:
  CacheStorageCache_Batch_ResponseParamsDataView() = default;

  CacheStorageCache_Batch_ResponseParamsDataView(
      internal::CacheStorageCache_Batch_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      CacheStorageVerboseErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::CacheStorageVerboseErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorageCache_Batch_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageCache_WriteSideData_ParamsDataView {
 public:
  CacheStorageCache_WriteSideData_ParamsDataView() = default;

  CacheStorageCache_WriteSideData_ParamsDataView(
      internal::CacheStorageCache_WriteSideData_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetExpectedResponseTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadExpectedResponseTime(UserType* output) {
    
    auto* pointer = data_->expected_response_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = !data_->data.is_null() ? &data_->data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
  int64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::CacheStorageCache_WriteSideData_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageCache_WriteSideData_ResponseParamsDataView {
 public:
  CacheStorageCache_WriteSideData_ResponseParamsDataView() = default;

  CacheStorageCache_WriteSideData_ResponseParamsDataView(
      internal::CacheStorageCache_WriteSideData_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::blink::mojom::CacheStorageError>(
        data_value, output);
  }
  CacheStorageError result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CacheStorageError>(data_->result));
  }
 private:
  internal::CacheStorageCache_WriteSideData_ResponseParams_Data* data_ = nullptr;
};



class CacheStorage_Has_ParamsDataView {
 public:
  CacheStorage_Has_ParamsDataView() = default;

  CacheStorage_Has_ParamsDataView(
      internal::CacheStorage_Has_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCacheNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCacheName(UserType* output) {
    
    auto* pointer = data_->cache_name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  int64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::CacheStorage_Has_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorage_Has_ResponseParamsDataView {
 public:
  CacheStorage_Has_ResponseParamsDataView() = default;

  CacheStorage_Has_ResponseParamsDataView(
      internal::CacheStorage_Has_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::blink::mojom::CacheStorageError>(
        data_value, output);
  }
  CacheStorageError result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CacheStorageError>(data_->result));
  }
 private:
  internal::CacheStorage_Has_ResponseParams_Data* data_ = nullptr;
};



class CacheStorage_Delete_ParamsDataView {
 public:
  CacheStorage_Delete_ParamsDataView() = default;

  CacheStorage_Delete_ParamsDataView(
      internal::CacheStorage_Delete_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCacheNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCacheName(UserType* output) {
    
    auto* pointer = data_->cache_name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  int64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::CacheStorage_Delete_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorage_Delete_ResponseParamsDataView {
 public:
  CacheStorage_Delete_ResponseParamsDataView() = default;

  CacheStorage_Delete_ResponseParamsDataView(
      internal::CacheStorage_Delete_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::blink::mojom::CacheStorageError>(
        data_value, output);
  }
  CacheStorageError result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CacheStorageError>(data_->result));
  }
 private:
  internal::CacheStorage_Delete_ResponseParams_Data* data_ = nullptr;
};



class CacheStorage_Keys_ParamsDataView {
 public:
  CacheStorage_Keys_ParamsDataView() = default;

  CacheStorage_Keys_ParamsDataView(
      internal::CacheStorage_Keys_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::CacheStorage_Keys_Params_Data* data_ = nullptr;
};



class CacheStorage_Keys_ResponseParamsDataView {
 public:
  CacheStorage_Keys_ResponseParamsDataView() = default;

  CacheStorage_Keys_ResponseParamsDataView(
      internal::CacheStorage_Keys_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeysDataView(
      mojo::ArrayDataView<::mojo_base::mojom::String16DataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeys(UserType* output) {
    
    auto* pointer = data_->keys.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo_base::mojom::String16DataView>>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorage_Keys_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorage_Match_ParamsDataView {
 public:
  CacheStorage_Match_ParamsDataView() = default;

  CacheStorage_Match_ParamsDataView(
      internal::CacheStorage_Match_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestDataView(
      ::blink::mojom::FetchAPIRequestDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequest(UserType* output) {
    
    auto* pointer = data_->request.Get();
    return mojo::internal::Deserialize<::blink::mojom::FetchAPIRequestDataView>(
        pointer, output, message_);
  }
  inline void GetMatchOptionsDataView(
      MultiCacheQueryOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMatchOptions(UserType* output) {
    
    auto* pointer = data_->match_options.Get();
    return mojo::internal::Deserialize<::blink::mojom::MultiCacheQueryOptionsDataView>(
        pointer, output, message_);
  }
  bool in_related_fetch_event() const {
    return data_->in_related_fetch_event;
  }
  bool in_range_fetch_event() const {
    return data_->in_range_fetch_event;
  }
  int64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::CacheStorage_Match_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorage_Match_ResponseParamsDataView {
 public:
  CacheStorage_Match_ResponseParamsDataView() = default;

  CacheStorage_Match_ResponseParamsDataView(
      internal::CacheStorage_Match_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      MatchResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::MatchResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorage_Match_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorage_Open_ParamsDataView {
 public:
  CacheStorage_Open_ParamsDataView() = default;

  CacheStorage_Open_ParamsDataView(
      internal::CacheStorage_Open_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCacheNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCacheName(UserType* output) {
    
    auto* pointer = data_->cache_name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  int64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::CacheStorage_Open_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorage_Open_ResponseParamsDataView {
 public:
  CacheStorage_Open_ResponseParamsDataView() = default;

  CacheStorage_Open_ResponseParamsDataView(
      internal::CacheStorage_Open_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      OpenResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::OpenResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorage_Open_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void CacheStorageCache_Match_ParamsDataView::GetRequestDataView(
    ::blink::mojom::FetchAPIRequestDataView* output) {
  auto pointer = data_->request.Get();
  *output = ::blink::mojom::FetchAPIRequestDataView(pointer, message_);
}
inline void CacheStorageCache_Match_ParamsDataView::GetQueryOptionsDataView(
    CacheQueryOptionsDataView* output) {
  auto pointer = data_->query_options.Get();
  *output = CacheQueryOptionsDataView(pointer, message_);
}


inline void CacheStorageCache_Match_ResponseParamsDataView::GetResultDataView(
    MatchResultDataView* output) {
  auto pointer = &data_->result;
  *output = MatchResultDataView(pointer, message_);
}


inline void CacheStorageCache_MatchAll_ParamsDataView::GetRequestDataView(
    ::blink::mojom::FetchAPIRequestDataView* output) {
  auto pointer = data_->request.Get();
  *output = ::blink::mojom::FetchAPIRequestDataView(pointer, message_);
}
inline void CacheStorageCache_MatchAll_ParamsDataView::GetQueryOptionsDataView(
    CacheQueryOptionsDataView* output) {
  auto pointer = data_->query_options.Get();
  *output = CacheQueryOptionsDataView(pointer, message_);
}


inline void CacheStorageCache_MatchAll_ResponseParamsDataView::GetResultDataView(
    MatchAllResultDataView* output) {
  auto pointer = &data_->result;
  *output = MatchAllResultDataView(pointer, message_);
}


inline void CacheStorageCache_GetAllMatchedEntries_ParamsDataView::GetRequestDataView(
    ::blink::mojom::FetchAPIRequestDataView* output) {
  auto pointer = data_->request.Get();
  *output = ::blink::mojom::FetchAPIRequestDataView(pointer, message_);
}
inline void CacheStorageCache_GetAllMatchedEntries_ParamsDataView::GetQueryOptionsDataView(
    CacheQueryOptionsDataView* output) {
  auto pointer = data_->query_options.Get();
  *output = CacheQueryOptionsDataView(pointer, message_);
}


inline void CacheStorageCache_GetAllMatchedEntries_ResponseParamsDataView::GetResultDataView(
    GetAllMatchedEntriesResultDataView* output) {
  auto pointer = &data_->result;
  *output = GetAllMatchedEntriesResultDataView(pointer, message_);
}


inline void CacheStorageCache_Keys_ParamsDataView::GetRequestDataView(
    ::blink::mojom::FetchAPIRequestDataView* output) {
  auto pointer = data_->request.Get();
  *output = ::blink::mojom::FetchAPIRequestDataView(pointer, message_);
}
inline void CacheStorageCache_Keys_ParamsDataView::GetQueryOptionsDataView(
    CacheQueryOptionsDataView* output) {
  auto pointer = data_->query_options.Get();
  *output = CacheQueryOptionsDataView(pointer, message_);
}


inline void CacheStorageCache_Keys_ResponseParamsDataView::GetResultDataView(
    CacheKeysResultDataView* output) {
  auto pointer = &data_->result;
  *output = CacheKeysResultDataView(pointer, message_);
}


inline void CacheStorageCache_Batch_ParamsDataView::GetBatchOperationsDataView(
    mojo::ArrayDataView<BatchOperationDataView>* output) {
  auto pointer = data_->batch_operations.Get();
  *output = mojo::ArrayDataView<BatchOperationDataView>(pointer, message_);
}


inline void CacheStorageCache_Batch_ResponseParamsDataView::GetResultDataView(
    CacheStorageVerboseErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = CacheStorageVerboseErrorDataView(pointer, message_);
}


inline void CacheStorageCache_WriteSideData_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void CacheStorageCache_WriteSideData_ParamsDataView::GetExpectedResponseTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->expected_response_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void CacheStorageCache_WriteSideData_ParamsDataView::GetDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}




inline void CacheStorage_Has_ParamsDataView::GetCacheNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->cache_name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}




inline void CacheStorage_Delete_ParamsDataView::GetCacheNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->cache_name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}






inline void CacheStorage_Keys_ResponseParamsDataView::GetKeysDataView(
    mojo::ArrayDataView<::mojo_base::mojom::String16DataView>* output) {
  auto pointer = data_->keys.Get();
  *output = mojo::ArrayDataView<::mojo_base::mojom::String16DataView>(pointer, message_);
}


inline void CacheStorage_Match_ParamsDataView::GetRequestDataView(
    ::blink::mojom::FetchAPIRequestDataView* output) {
  auto pointer = data_->request.Get();
  *output = ::blink::mojom::FetchAPIRequestDataView(pointer, message_);
}
inline void CacheStorage_Match_ParamsDataView::GetMatchOptionsDataView(
    MultiCacheQueryOptionsDataView* output) {
  auto pointer = data_->match_options.Get();
  *output = MultiCacheQueryOptionsDataView(pointer, message_);
}


inline void CacheStorage_Match_ResponseParamsDataView::GetResultDataView(
    MatchResultDataView* output) {
  auto pointer = &data_->result;
  *output = MatchResultDataView(pointer, message_);
}


inline void CacheStorage_Open_ParamsDataView::GetCacheNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->cache_name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}


inline void CacheStorage_Open_ResponseParamsDataView::GetResultDataView(
    OpenResultDataView* output) {
  auto pointer = &data_->result;
  *output = OpenResultDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CACHE_STORAGE_CACHE_STORAGE_MOJOM_PARAMS_DATA_H_