// third_party/blink/public/mojom/navigation/navigation_api_history_entry_arrays.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_NAVIGATION_NAVIGATION_API_HISTORY_ENTRY_ARRAYS_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_NAVIGATION_NAVIGATION_API_HISTORY_ENTRY_ARRAYS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/navigation/navigation_api_history_entry_arrays.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {
class NavigationApiHistoryEntryDataView;

class NavigationApiHistoryEntryArraysDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::NavigationApiHistoryEntryDataView> {
  using Data = ::blink::mojom::internal::NavigationApiHistoryEntry_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::NavigationApiHistoryEntryArraysDataView> {
  using Data = ::blink::mojom::internal::NavigationApiHistoryEntryArrays_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


class NavigationApiHistoryEntryDataView {
 public:
  NavigationApiHistoryEntryDataView() = default;

  NavigationApiHistoryEntryDataView(
      internal::NavigationApiHistoryEntry_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeyDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = data_->key.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetIdDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetUrlDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  int64_t item_sequence_number() const {
    return data_->item_sequence_number;
  }
  int64_t document_sequence_number() const {
    return data_->document_sequence_number;
  }
  inline void GetStateDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::String16DataView, UserType>(),
    "Attempting to read the optional `state` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadState` instead "
    "of `ReadState if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->state.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
 private:
  internal::NavigationApiHistoryEntry_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NavigationApiHistoryEntryArraysDataView {
 public:
  NavigationApiHistoryEntryArraysDataView() = default;

  NavigationApiHistoryEntryArraysDataView(
      internal::NavigationApiHistoryEntryArrays_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBackEntriesDataView(
      mojo::ArrayDataView<NavigationApiHistoryEntryDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBackEntries(UserType* output) {
    
    auto* pointer = data_->back_entries.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::NavigationApiHistoryEntryDataView>>(
        pointer, output, message_);
  }
  inline void GetForwardEntriesDataView(
      mojo::ArrayDataView<NavigationApiHistoryEntryDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadForwardEntries(UserType* output) {
    
    auto* pointer = data_->forward_entries.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::NavigationApiHistoryEntryDataView>>(
        pointer, output, message_);
  }
 private:
  internal::NavigationApiHistoryEntryArrays_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::NavigationApiHistoryEntryDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::NavigationApiHistoryEntryDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::NavigationApiHistoryEntry_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::key(input)) in_key = Traits::key(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->key)::BaseType> key_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_key, key_fragment);
    fragment->key.Set(
        key_fragment.is_null() ? nullptr : key_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->key.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null key in NavigationApiHistoryEntry struct");
    decltype(Traits::id(input)) in_id = Traits::id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->id)::BaseType> id_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_id, id_fragment);
    fragment->id.Set(
        id_fragment.is_null() ? nullptr : id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null id in NavigationApiHistoryEntry struct");
    decltype(Traits::url(input)) in_url = Traits::url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url)::BaseType> url_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_url, url_fragment);
    fragment->url.Set(
        url_fragment.is_null() ? nullptr : url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in NavigationApiHistoryEntry struct");
    fragment->item_sequence_number = Traits::item_sequence_number(input);
    fragment->document_sequence_number = Traits::document_sequence_number(input);
    decltype(Traits::state(input)) in_state = Traits::state(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->state)::BaseType> state_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_state, state_fragment);
    fragment->state.Set(
        state_fragment.is_null() ? nullptr : state_fragment.data());
  }

  static bool Deserialize(::blink::mojom::internal::NavigationApiHistoryEntry_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::NavigationApiHistoryEntryDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::NavigationApiHistoryEntryArraysDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::NavigationApiHistoryEntryArraysDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::NavigationApiHistoryEntryArrays_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::back_entries(input)) in_back_entries = Traits::back_entries(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->back_entries)::BaseType>
        back_entries_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams back_entries_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::NavigationApiHistoryEntryDataView>>(
        in_back_entries, back_entries_fragment, &back_entries_validate_params);
    fragment->back_entries.Set(
        back_entries_fragment.is_null() ? nullptr : back_entries_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->back_entries.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null back_entries in NavigationApiHistoryEntryArrays struct");
    decltype(Traits::forward_entries(input)) in_forward_entries = Traits::forward_entries(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->forward_entries)::BaseType>
        forward_entries_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams forward_entries_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::NavigationApiHistoryEntryDataView>>(
        in_forward_entries, forward_entries_fragment, &forward_entries_validate_params);
    fragment->forward_entries.Set(
        forward_entries_fragment.is_null() ? nullptr : forward_entries_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->forward_entries.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null forward_entries in NavigationApiHistoryEntryArrays struct");
  }

  static bool Deserialize(::blink::mojom::internal::NavigationApiHistoryEntryArrays_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::NavigationApiHistoryEntryArraysDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void NavigationApiHistoryEntryDataView::GetKeyDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->key.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void NavigationApiHistoryEntryDataView::GetIdDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void NavigationApiHistoryEntryDataView::GetUrlDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->url.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void NavigationApiHistoryEntryDataView::GetStateDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->state.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}


inline void NavigationApiHistoryEntryArraysDataView::GetBackEntriesDataView(
    mojo::ArrayDataView<NavigationApiHistoryEntryDataView>* output) {
  auto pointer = data_->back_entries.Get();
  *output = mojo::ArrayDataView<NavigationApiHistoryEntryDataView>(pointer, message_);
}
inline void NavigationApiHistoryEntryArraysDataView::GetForwardEntriesDataView(
    mojo::ArrayDataView<NavigationApiHistoryEntryDataView>* output) {
  auto pointer = data_->forward_entries.Get();
  *output = mojo::ArrayDataView<NavigationApiHistoryEntryDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_NAVIGATION_NAVIGATION_API_HISTORY_ENTRY_ARRAYS_MOJOM_SHARED_H_