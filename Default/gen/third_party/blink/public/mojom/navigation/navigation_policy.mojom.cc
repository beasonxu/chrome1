// third_party/blink/public/mojom/navigation/navigation_policy.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/navigation/navigation_policy.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/navigation/navigation_policy.mojom-params-data.h"
#include "third_party/blink/public/mojom/navigation/navigation_policy.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/navigation/navigation_policy.mojom-import-headers.h"
#include "third_party/blink/public/mojom/navigation/navigation_policy.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_NAVIGATION_NAVIGATION_POLICY_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_NAVIGATION_NAVIGATION_POLICY_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
NavigationDownloadTypes::NavigationDownloadTypes()
    : view_source(),
      interstitial(),
      opener_cross_origin(),
      ad_frame_no_gesture(),
      ad_frame(),
      sandbox(),
      no_gesture() {}

NavigationDownloadTypes::NavigationDownloadTypes(
    bool view_source_in,
    bool interstitial_in,
    bool opener_cross_origin_in,
    bool ad_frame_no_gesture_in,
    bool ad_frame_in,
    bool sandbox_in,
    bool no_gesture_in)
    : view_source(std::move(view_source_in)),
      interstitial(std::move(interstitial_in)),
      opener_cross_origin(std::move(opener_cross_origin_in)),
      ad_frame_no_gesture(std::move(ad_frame_no_gesture_in)),
      ad_frame(std::move(ad_frame_in)),
      sandbox(std::move(sandbox_in)),
      no_gesture(std::move(no_gesture_in)) {}

NavigationDownloadTypes::~NavigationDownloadTypes() = default;

void NavigationDownloadTypes::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "view_source"), this->view_source,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "interstitial"), this->interstitial,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "opener_cross_origin"), this->opener_cross_origin,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "ad_frame_no_gesture"), this->ad_frame_no_gesture,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "ad_frame"), this->ad_frame,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sandbox"), this->sandbox,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "no_gesture"), this->no_gesture,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool NavigationDownloadTypes::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
NavigationDownloadPolicy::NavigationDownloadPolicy()
    : observed_types(),
      disallowed_types() {}

NavigationDownloadPolicy::NavigationDownloadPolicy(
    const ::blink::NavigationDownloadPolicy::NavigationDownloadTypes& observed_types_in,
    const ::blink::NavigationDownloadPolicy::NavigationDownloadTypes& disallowed_types_in)
    : observed_types(std::move(observed_types_in)),
      disallowed_types(std::move(disallowed_types_in)) {}

NavigationDownloadPolicy::~NavigationDownloadPolicy() = default;

void NavigationDownloadPolicy::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "observed_types"), this->observed_types,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::NavigationDownloadPolicy::NavigationDownloadTypes&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "disallowed_types"), this->disallowed_types,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::NavigationDownloadPolicy::NavigationDownloadTypes&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool NavigationDownloadPolicy::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::NavigationDownloadTypes::DataView, ::blink::mojom::NavigationDownloadTypesPtr>::Read(
    ::blink::mojom::NavigationDownloadTypes::DataView input,
    ::blink::mojom::NavigationDownloadTypesPtr* output) {
  bool success = true;
  ::blink::mojom::NavigationDownloadTypesPtr result(::blink::mojom::NavigationDownloadTypes::New());
  
      if (success)
        result->view_source = input.view_source();
      if (success)
        result->interstitial = input.interstitial();
      if (success)
        result->opener_cross_origin = input.opener_cross_origin();
      if (success)
        result->ad_frame_no_gesture = input.ad_frame_no_gesture();
      if (success)
        result->ad_frame = input.ad_frame();
      if (success)
        result->sandbox = input.sandbox();
      if (success)
        result->no_gesture = input.no_gesture();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::NavigationDownloadPolicy::DataView, ::blink::mojom::NavigationDownloadPolicyPtr>::Read(
    ::blink::mojom::NavigationDownloadPolicy::DataView input,
    ::blink::mojom::NavigationDownloadPolicyPtr* output) {
  bool success = true;
  ::blink::mojom::NavigationDownloadPolicyPtr result(::blink::mojom::NavigationDownloadPolicy::New());
  
      if (success && !input.ReadObservedTypes(&result->observed_types))
        success = false;
      if (success && !input.ReadDisallowedTypes(&result->disallowed_types))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif