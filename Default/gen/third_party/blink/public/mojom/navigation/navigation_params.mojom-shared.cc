// third_party/blink/public/mojom/navigation/navigation_params.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/navigation/navigation_params.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/navigation/navigation_params.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* NavigationTypeToStringHelper(NavigationType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case NavigationType::RELOAD:
      return "RELOAD";
    case NavigationType::RELOAD_BYPASSING_CACHE:
      return "RELOAD_BYPASSING_CACHE";
    case NavigationType::RELOAD_ORIGINAL_REQUEST_URL:
      return "RELOAD_ORIGINAL_REQUEST_URL";
    case NavigationType::RESTORE:
      return "RESTORE";
    case NavigationType::RESTORE_WITH_POST:
      return "RESTORE_WITH_POST";
    case NavigationType::HISTORY_SAME_DOCUMENT:
      return "HISTORY_SAME_DOCUMENT";
    case NavigationType::HISTORY_DIFFERENT_DOCUMENT:
      return "HISTORY_DIFFERENT_DOCUMENT";
    case NavigationType::SAME_DOCUMENT:
      return "SAME_DOCUMENT";
    case NavigationType::DIFFERENT_DOCUMENT:
      return "DIFFERENT_DOCUMENT";
    default:
      return nullptr;
  }
}

std::string NavigationTypeToString(NavigationType value) {
  const char *str = NavigationTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown NavigationType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, NavigationType value) {
  return os << NavigationTypeToString(value);
}

namespace internal {


// static
bool BeginNavigationParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 112, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const BeginNavigationParams_Data* object =
      static_cast<const BeginNavigationParams_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->initiator_frame_token, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->headers, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams headers_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->headers, validation_context,
                                         &headers_validate_params)) {
    return false;
  }


  if (!::blink::mojom::internal::RequestContextType_Data
        ::Validate(object->request_context_type, validation_context))
    return false;


  if (!::blink::mojom::internal::MixedContentContextType_Data
        ::Validate(object->mixed_content_context_type, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->searchable_form_url, 9, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->searchable_form_url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->searchable_form_encoding, 10, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams searchable_form_encoding_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->searchable_form_encoding, validation_context,
                                         &searchable_form_encoding_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->client_side_redirect_url, 11, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->client_side_redirect_url, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->devtools_initiator, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->trust_token_params, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->impression, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->before_unload_start, 15, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->before_unload_start, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->before_unload_end, 16, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->before_unload_end, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->web_bundle_token, validation_context))
    return false;

  return true;
}

BeginNavigationParams_Data::BeginNavigationParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CommonNavigationParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 128, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CommonNavigationParams_Data* object =
      static_cast<const CommonNavigationParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->initiator_origin, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->referrer, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->referrer, validation_context))
    return false;


  if (!::blink::mojom::internal::NavigationType_Data
        ::Validate(object->navigation_type, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->download_policy, 6, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->download_policy, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->base_url_for_data_url, 8, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->base_url_for_data_url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->navigation_start, 9, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->navigation_start, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->method, 10, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams method_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->method, validation_context,
                                         &method_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->post_data, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->source_location, 12, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->source_location, validation_context))
    return false;


  if (!::network::mojom::internal::CSPDisposition_Data
        ::Validate(object->should_check_main_world_csp, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->initiator_origin_trial_features, 17, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams initiator_origin_trial_features_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->initiator_origin_trial_features, validation_context,
                                         &initiator_origin_trial_features_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->href_translate, 18, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams href_translate_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->href_translate, validation_context,
                                         &href_translate_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->input_start, 20, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->input_start, validation_context))
    return false;


  if (!::network::mojom::internal::RequestDestination_Data
        ::Validate(object->request_destination, validation_context))
    return false;

  return true;
}

CommonNavigationParams_Data::CommonNavigationParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NavigationTiming_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NavigationTiming_Data* object =
      static_cast<const NavigationTiming_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->redirect_start, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->redirect_start, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->redirect_end, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->redirect_end, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->fetch_start, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->fetch_start, validation_context))
    return false;

  return true;
}

NavigationTiming_Data::NavigationTiming_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool OldPageInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const OldPageInfo_Data* object =
      static_cast<const OldPageInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->new_lifecycle_state_for_old_page, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->new_lifecycle_state_for_old_page, validation_context))
    return false;

  return true;
}

OldPageInfo_Data::OldPageInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CommitNavigationParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 264, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CommitNavigationParams_Data* object =
      static_cast<const CommitNavigationParams_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->origin_to_commit, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->storage_key, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->storage_key, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->redirects, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams redirects_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->redirects, validation_context,
                                         &redirects_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->redirect_response, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams redirect_response_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->redirect_response, validation_context,
                                         &redirect_response_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->redirect_infos, 6, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams redirect_infos_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->redirect_infos, validation_context,
                                         &redirect_infos_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->post_content_type, 7, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams post_content_type_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->post_content_type, validation_context,
                                         &post_content_type_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->original_url, 8, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->original_url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->original_method, 9, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams original_method_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->original_method, validation_context,
                                         &original_method_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->page_state, 11, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams page_state_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->page_state, validation_context,
                                         &page_state_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->subframe_unique_names, 13, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams subframe_unique_names_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->subframe_unique_names, validation_context,
                                         &subframe_unique_names_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->navigation_timing, 21, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->navigation_timing, validation_context))
    return false;


  if (!::blink::mojom::internal::WasActivatedOption_Data
        ::Validate(object->was_activated, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->navigation_token, 23, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->navigation_token, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->prefetched_signed_exchanges, 24, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams prefetched_signed_exchanges_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->prefetched_signed_exchanges, validation_context,
                                         &prefetched_signed_exchanges_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data_url_as_string, 25, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams data_url_as_string_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->data_url_as_string, validation_context,
                                         &data_url_as_string_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->web_bundle_physical_url, 27, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->web_bundle_physical_url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->web_bundle_claimed_url, 28, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->web_bundle_claimed_url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->frame_policy, 30, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->frame_policy, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->force_enabled_origin_trials, 31, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams force_enabled_origin_trials_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->force_enabled_origin_trials, validation_context,
                                         &force_enabled_origin_trials_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->enabled_client_hints, 34, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams enabled_client_hints_validate_params(
      0, ::network::mojom::internal::WebClientHintsType_Data::Validate);
  if (!mojo::internal::ValidateContainer(object->enabled_client_hints, validation_context,
                                         &enabled_client_hints_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->old_page_info, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->navigation_api_history_entry_arrays, 38, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->navigation_api_history_entry_arrays, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->early_hints_preloaded_resources, 39, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams early_hints_preloaded_resources_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->early_hints_preloaded_resources, validation_context,
                                         &early_hints_preloaded_resources_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams ad_auction_components_validate_params(
      20, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->ad_auction_components, validation_context,
                                         &ad_auction_components_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->fenced_frame_reporting_metadata, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->commit_sent, 42, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->commit_sent, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->srcdoc_value, 43, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams srcdoc_value_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->srcdoc_value, validation_context,
                                         &srcdoc_value_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->reduced_accept_language, 46, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams reduced_accept_language_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->reduced_accept_language, validation_context,
                                         &reduced_accept_language_validate_params)) {
    return false;
  }

  return true;
}

CommitNavigationParams_Data::CommitNavigationParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::NavigationType>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::NavigationType value) {
  return std::move(context).WriteString(::blink::mojom::NavigationTypeToString(value));
}

} // namespace perfetto