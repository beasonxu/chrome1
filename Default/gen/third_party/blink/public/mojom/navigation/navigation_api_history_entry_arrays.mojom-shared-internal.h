// third_party/blink/public/mojom/navigation/navigation_api_history_entry_arrays.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_NAVIGATION_NAVIGATION_API_HISTORY_ENTRY_ARRAYS_MOJOM_SHARED_INTERNAL_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_NAVIGATION_NAVIGATION_API_HISTORY_ENTRY_ARRAYS_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/string16.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace blink {
namespace mojom {
namespace internal {
class NavigationApiHistoryEntry_Data;
class NavigationApiHistoryEntryArrays_Data;

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NavigationApiHistoryEntry_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> key;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> url;
  int64_t item_sequence_number;
  int64_t document_sequence_number;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> state;

 private:
  friend class mojo::internal::MessageFragment<NavigationApiHistoryEntry_Data>;

  NavigationApiHistoryEntry_Data();
  ~NavigationApiHistoryEntry_Data() = delete;
};
static_assert(sizeof(NavigationApiHistoryEntry_Data) == 56,
              "Bad sizeof(NavigationApiHistoryEntry_Data)");
// Used by NavigationApiHistoryEntry::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct NavigationApiHistoryEntry_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  NavigationApiHistoryEntry_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~NavigationApiHistoryEntry_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<NavigationApiHistoryEntry_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    NavigationApiHistoryEntry_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NavigationApiHistoryEntryArrays_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::NavigationApiHistoryEntry_Data>>> back_entries;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::NavigationApiHistoryEntry_Data>>> forward_entries;

 private:
  friend class mojo::internal::MessageFragment<NavigationApiHistoryEntryArrays_Data>;

  NavigationApiHistoryEntryArrays_Data();
  ~NavigationApiHistoryEntryArrays_Data() = delete;
};
static_assert(sizeof(NavigationApiHistoryEntryArrays_Data) == 24,
              "Bad sizeof(NavigationApiHistoryEntryArrays_Data)");
// Used by NavigationApiHistoryEntryArrays::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct NavigationApiHistoryEntryArrays_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  NavigationApiHistoryEntryArrays_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~NavigationApiHistoryEntryArrays_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<NavigationApiHistoryEntryArrays_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    NavigationApiHistoryEntryArrays_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_NAVIGATION_NAVIGATION_API_HISTORY_ENTRY_ARRAYS_MOJOM_SHARED_INTERNAL_H_