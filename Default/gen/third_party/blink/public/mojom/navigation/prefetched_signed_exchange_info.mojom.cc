// third_party/blink/public/mojom/navigation/prefetched_signed_exchange_info.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/navigation/prefetched_signed_exchange_info.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/navigation/prefetched_signed_exchange_info.mojom-params-data.h"
#include "third_party/blink/public/mojom/navigation/prefetched_signed_exchange_info.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/navigation/prefetched_signed_exchange_info.mojom-import-headers.h"
#include "third_party/blink/public/mojom/navigation/prefetched_signed_exchange_info.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_NAVIGATION_PREFETCHED_SIGNED_EXCHANGE_INFO_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_NAVIGATION_PREFETCHED_SIGNED_EXCHANGE_INFO_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
SHA256HashValue::SHA256HashValue()
    : data() {}

SHA256HashValue::SHA256HashValue(
    const std::string& data_in)
    : data(std::move(data_in)) {}

SHA256HashValue::~SHA256HashValue() = default;

void SHA256HashValue::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "data"), this->data,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SHA256HashValue::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
PrefetchedSignedExchangeInfo::PrefetchedSignedExchangeInfo()
    : outer_url(),
      header_integrity(),
      inner_url(),
      inner_response(),
      loader_factory_handle() {}

PrefetchedSignedExchangeInfo::PrefetchedSignedExchangeInfo(
    const ::GURL& outer_url_in,
    const ::net::SHA256HashValue& header_integrity_in,
    const ::GURL& inner_url_in,
    ::network::mojom::URLResponseHeadPtr inner_response_in,
    ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> loader_factory_handle_in)
    : outer_url(std::move(outer_url_in)),
      header_integrity(std::move(header_integrity_in)),
      inner_url(std::move(inner_url_in)),
      inner_response(std::move(inner_response_in)),
      loader_factory_handle(std::move(loader_factory_handle_in)) {}

PrefetchedSignedExchangeInfo::~PrefetchedSignedExchangeInfo() = default;

void PrefetchedSignedExchangeInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "outer_url"), this->outer_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "header_integrity"), this->header_integrity,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::net::SHA256HashValue&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "inner_url"), this->inner_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "inner_response"), this->inner_response,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::URLResponseHeadPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "loader_factory_handle"), this->loader_factory_handle,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<::network::mojom::URLLoaderFactory>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool PrefetchedSignedExchangeInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::SHA256HashValue::DataView, ::blink::mojom::SHA256HashValuePtr>::Read(
    ::blink::mojom::SHA256HashValue::DataView input,
    ::blink::mojom::SHA256HashValuePtr* output) {
  bool success = true;
  ::blink::mojom::SHA256HashValuePtr result(::blink::mojom::SHA256HashValue::New());
  
      if (success && !input.ReadData(&result->data))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::PrefetchedSignedExchangeInfo::DataView, ::blink::mojom::PrefetchedSignedExchangeInfoPtr>::Read(
    ::blink::mojom::PrefetchedSignedExchangeInfo::DataView input,
    ::blink::mojom::PrefetchedSignedExchangeInfoPtr* output) {
  bool success = true;
  ::blink::mojom::PrefetchedSignedExchangeInfoPtr result(::blink::mojom::PrefetchedSignedExchangeInfo::New());
  
      if (success && !input.ReadOuterUrl(&result->outer_url))
        success = false;
      if (success && !input.ReadHeaderIntegrity(&result->header_integrity))
        success = false;
      if (success && !input.ReadInnerUrl(&result->inner_url))
        success = false;
      if (success && !input.ReadInnerResponse(&result->inner_response))
        success = false;
      if (success) {
        result->loader_factory_handle =
            input.TakeLoaderFactoryHandle<decltype(result->loader_factory_handle)>();
      }
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif