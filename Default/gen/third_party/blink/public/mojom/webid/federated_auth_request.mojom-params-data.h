// third_party/blink/public/mojom/webid/federated_auth_request.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBID_FEDERATED_AUTH_REQUEST_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBID_FEDERATED_AUTH_REQUEST_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FederatedAuthRequest_RequestToken_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::IdentityProvider_Data> identity_provider_ptr;
  uint8_t prefer_auto_sign_in : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FederatedAuthRequest_RequestToken_Params_Data>;

  FederatedAuthRequest_RequestToken_Params_Data();
  ~FederatedAuthRequest_RequestToken_Params_Data() = delete;
};
static_assert(sizeof(FederatedAuthRequest_RequestToken_Params_Data) == 24,
              "Bad sizeof(FederatedAuthRequest_RequestToken_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FederatedAuthRequest_RequestToken_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> token;

 private:
  friend class mojo::internal::MessageFragment<FederatedAuthRequest_RequestToken_ResponseParams_Data>;

  FederatedAuthRequest_RequestToken_ResponseParams_Data();
  ~FederatedAuthRequest_RequestToken_ResponseParams_Data() = delete;
};
static_assert(sizeof(FederatedAuthRequest_RequestToken_ResponseParams_Data) == 24,
              "Bad sizeof(FederatedAuthRequest_RequestToken_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FederatedAuthRequest_CancelTokenRequest_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FederatedAuthRequest_CancelTokenRequest_Params_Data>;

  FederatedAuthRequest_CancelTokenRequest_Params_Data();
  ~FederatedAuthRequest_CancelTokenRequest_Params_Data() = delete;
};
static_assert(sizeof(FederatedAuthRequest_CancelTokenRequest_Params_Data) == 8,
              "Bad sizeof(FederatedAuthRequest_CancelTokenRequest_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FederatedAuthRequest_LogoutRps_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::LogoutRpsRequest_Data>>> rp_logout_requests;

 private:
  friend class mojo::internal::MessageFragment<FederatedAuthRequest_LogoutRps_Params_Data>;

  FederatedAuthRequest_LogoutRps_Params_Data();
  ~FederatedAuthRequest_LogoutRps_Params_Data() = delete;
};
static_assert(sizeof(FederatedAuthRequest_LogoutRps_Params_Data) == 16,
              "Bad sizeof(FederatedAuthRequest_LogoutRps_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FederatedAuthRequest_LogoutRps_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FederatedAuthRequest_LogoutRps_ResponseParams_Data>;

  FederatedAuthRequest_LogoutRps_ResponseParams_Data();
  ~FederatedAuthRequest_LogoutRps_ResponseParams_Data() = delete;
};
static_assert(sizeof(FederatedAuthRequest_LogoutRps_ResponseParams_Data) == 16,
              "Bad sizeof(FederatedAuthRequest_LogoutRps_ResponseParams_Data)");

}  // namespace internal


class FederatedAuthRequest_RequestToken_ParamsDataView {
 public:
  FederatedAuthRequest_RequestToken_ParamsDataView() = default;

  FederatedAuthRequest_RequestToken_ParamsDataView(
      internal::FederatedAuthRequest_RequestToken_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdentityProviderPtrDataView(
      IdentityProviderDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIdentityProviderPtr(UserType* output) {
    
    auto* pointer = data_->identity_provider_ptr.Get();
    return mojo::internal::Deserialize<::blink::mojom::IdentityProviderDataView>(
        pointer, output, message_);
  }
  bool prefer_auto_sign_in() const {
    return data_->prefer_auto_sign_in;
  }
 private:
  internal::FederatedAuthRequest_RequestToken_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FederatedAuthRequest_RequestToken_ResponseParamsDataView {
 public:
  FederatedAuthRequest_RequestToken_ResponseParamsDataView() = default;

  FederatedAuthRequest_RequestToken_ResponseParamsDataView(
      internal::FederatedAuthRequest_RequestToken_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::RequestTokenStatus>(
        data_value, output);
  }
  RequestTokenStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::RequestTokenStatus>(data_->status));
  }
  inline void GetTokenDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `token` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadToken` instead "
    "of `ReadToken if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->token.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FederatedAuthRequest_RequestToken_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FederatedAuthRequest_CancelTokenRequest_ParamsDataView {
 public:
  FederatedAuthRequest_CancelTokenRequest_ParamsDataView() = default;

  FederatedAuthRequest_CancelTokenRequest_ParamsDataView(
      internal::FederatedAuthRequest_CancelTokenRequest_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FederatedAuthRequest_CancelTokenRequest_Params_Data* data_ = nullptr;
};



class FederatedAuthRequest_LogoutRps_ParamsDataView {
 public:
  FederatedAuthRequest_LogoutRps_ParamsDataView() = default;

  FederatedAuthRequest_LogoutRps_ParamsDataView(
      internal::FederatedAuthRequest_LogoutRps_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRpLogoutRequestsDataView(
      mojo::ArrayDataView<LogoutRpsRequestDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRpLogoutRequests(UserType* output) {
    
    auto* pointer = data_->rp_logout_requests.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::LogoutRpsRequestDataView>>(
        pointer, output, message_);
  }
 private:
  internal::FederatedAuthRequest_LogoutRps_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FederatedAuthRequest_LogoutRps_ResponseParamsDataView {
 public:
  FederatedAuthRequest_LogoutRps_ResponseParamsDataView() = default;

  FederatedAuthRequest_LogoutRps_ResponseParamsDataView(
      internal::FederatedAuthRequest_LogoutRps_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::LogoutRpsStatus>(
        data_value, output);
  }
  LogoutRpsStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::LogoutRpsStatus>(data_->status));
  }
 private:
  internal::FederatedAuthRequest_LogoutRps_ResponseParams_Data* data_ = nullptr;
};


inline void FederatedAuthRequest_RequestToken_ParamsDataView::GetIdentityProviderPtrDataView(
    IdentityProviderDataView* output) {
  auto pointer = data_->identity_provider_ptr.Get();
  *output = IdentityProviderDataView(pointer, message_);
}


inline void FederatedAuthRequest_RequestToken_ResponseParamsDataView::GetTokenDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->token.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void FederatedAuthRequest_LogoutRps_ParamsDataView::GetRpLogoutRequestsDataView(
    mojo::ArrayDataView<LogoutRpsRequestDataView>* output) {
  auto pointer = data_->rp_logout_requests.Get();
  *output = mojo::ArrayDataView<LogoutRpsRequestDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBID_FEDERATED_AUTH_REQUEST_MOJOM_PARAMS_DATA_H_