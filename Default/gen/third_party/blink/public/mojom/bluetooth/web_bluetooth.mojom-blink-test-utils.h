// third_party/blink/public/mojom/bluetooth/web_bluetooth.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLUETOOTH_WEB_BLUETOOTH_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLUETOOTH_WEB_BLUETOOTH_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/bluetooth/web_bluetooth.mojom-blink.h"
#include "third_party/blink/public/platform/web_common.h"


namespace blink {
namespace mojom {
namespace blink {


class BLINK_PLATFORM_EXPORT WebBluetoothServiceInterceptorForTesting : public WebBluetoothService {
  virtual WebBluetoothService* GetForwardingInterface() = 0;
  void GetAvailability(GetAvailabilityCallback callback) override;
  void RequestDevice(WebBluetoothRequestDeviceOptionsPtr options, RequestDeviceCallback callback) override;
  void GetDevices(GetDevicesCallback callback) override;
  void ForgetDevice(const ::blink::WebBluetoothDeviceId& device_id, ForgetDeviceCallback callback) override;
  void RemoteServerConnect(const ::blink::WebBluetoothDeviceId& device_id, ::mojo::PendingAssociatedRemote<WebBluetoothServerClient> client, RemoteServerConnectCallback callback) override;
  void RemoteServerDisconnect(const ::blink::WebBluetoothDeviceId& device_id) override;
  void RemoteServerGetPrimaryServices(const ::blink::WebBluetoothDeviceId& device_id, WebBluetoothGATTQueryQuantity quantity, const ::WTF::String& services_uuid, RemoteServerGetPrimaryServicesCallback callback) override;
  void RemoteServiceGetCharacteristics(const WTF::String& service_instance_id, WebBluetoothGATTQueryQuantity quantity, const ::WTF::String& characteristics_uuid, RemoteServiceGetCharacteristicsCallback callback) override;
  void RemoteCharacteristicReadValue(const WTF::String& characteristic_instance_id, RemoteCharacteristicReadValueCallback callback) override;
  void RemoteCharacteristicWriteValue(const WTF::String& characteristic_instance_id, const WTF::Vector<uint8_t>& value, WebBluetoothWriteType write_type, RemoteCharacteristicWriteValueCallback callback) override;
  void RemoteCharacteristicStartNotifications(const WTF::String& characteristic_instance_id, ::mojo::PendingAssociatedRemote<WebBluetoothCharacteristicClient> client, RemoteCharacteristicStartNotificationsCallback callback) override;
  void RemoteCharacteristicStopNotifications(const WTF::String& characteristic_instance_id, RemoteCharacteristicStopNotificationsCallback callback) override;
  void RemoteCharacteristicGetDescriptors(const WTF::String& characteristics_instance_id, WebBluetoothGATTQueryQuantity quantity, const ::WTF::String& descriptor_uuid, RemoteCharacteristicGetDescriptorsCallback callback) override;
  void RemoteDescriptorReadValue(const WTF::String& descriptor_instance_id, RemoteDescriptorReadValueCallback callback) override;
  void RemoteDescriptorWriteValue(const WTF::String& descriptor_instance_id, const WTF::Vector<uint8_t>& value, RemoteDescriptorWriteValueCallback callback) override;
  void RequestScanningStart(::mojo::PendingAssociatedRemote<WebBluetoothAdvertisementClient> client, WebBluetoothRequestLEScanOptionsPtr options, RequestScanningStartCallback callback) override;
  void WatchAdvertisementsForDevice(const ::blink::WebBluetoothDeviceId& device_id, ::mojo::PendingAssociatedRemote<WebBluetoothAdvertisementClient> client, WatchAdvertisementsForDeviceCallback callback) override;
};
class BLINK_PLATFORM_EXPORT WebBluetoothServiceAsyncWaiter {
 public:
  explicit WebBluetoothServiceAsyncWaiter(WebBluetoothService* proxy);

  WebBluetoothServiceAsyncWaiter(const WebBluetoothServiceAsyncWaiter&) = delete;
  WebBluetoothServiceAsyncWaiter& operator=(const WebBluetoothServiceAsyncWaiter&) = delete;

  ~WebBluetoothServiceAsyncWaiter();
  void GetAvailability(
      bool* out_is_available);
  void RequestDevice(
      WebBluetoothRequestDeviceOptionsPtr options, WebBluetoothResult* out_result, WebBluetoothDevicePtr* out_device);
  void GetDevices(
      WTF::Vector<WebBluetoothDevicePtr>* out_devices);
  void ForgetDevice(
      const ::blink::WebBluetoothDeviceId& device_id);
  void RemoteServerConnect(
      const ::blink::WebBluetoothDeviceId& device_id, ::mojo::PendingAssociatedRemote<WebBluetoothServerClient> client, WebBluetoothResult* out_result);
  void RemoteServerGetPrimaryServices(
      const ::blink::WebBluetoothDeviceId& device_id, WebBluetoothGATTQueryQuantity quantity, const ::WTF::String& services_uuid, WebBluetoothResult* out_result, absl::optional<WTF::Vector<WebBluetoothRemoteGATTServicePtr>>* out_services);
  void RemoteServiceGetCharacteristics(
      const WTF::String& service_instance_id, WebBluetoothGATTQueryQuantity quantity, const ::WTF::String& characteristics_uuid, WebBluetoothResult* out_result, absl::optional<WTF::Vector<WebBluetoothRemoteGATTCharacteristicPtr>>* out_characteristics);
  void RemoteCharacteristicReadValue(
      const WTF::String& characteristic_instance_id, WebBluetoothResult* out_result, absl::optional<WTF::Vector<uint8_t>>* out_value);
  void RemoteCharacteristicWriteValue(
      const WTF::String& characteristic_instance_id, const WTF::Vector<uint8_t>& value, WebBluetoothWriteType write_type, WebBluetoothResult* out_result);
  void RemoteCharacteristicStartNotifications(
      const WTF::String& characteristic_instance_id, ::mojo::PendingAssociatedRemote<WebBluetoothCharacteristicClient> client, WebBluetoothResult* out_result);
  void RemoteCharacteristicStopNotifications(
      const WTF::String& characteristic_instance_id);
  void RemoteCharacteristicGetDescriptors(
      const WTF::String& characteristics_instance_id, WebBluetoothGATTQueryQuantity quantity, const ::WTF::String& descriptor_uuid, WebBluetoothResult* out_result, absl::optional<WTF::Vector<WebBluetoothRemoteGATTDescriptorPtr>>* out_descriptors);
  void RemoteDescriptorReadValue(
      const WTF::String& descriptor_instance_id, WebBluetoothResult* out_result, absl::optional<WTF::Vector<uint8_t>>* out_value);
  void RemoteDescriptorWriteValue(
      const WTF::String& descriptor_instance_id, const WTF::Vector<uint8_t>& value, WebBluetoothResult* out_result);
  void RequestScanningStart(
      ::mojo::PendingAssociatedRemote<WebBluetoothAdvertisementClient> client, WebBluetoothRequestLEScanOptionsPtr options, WebBluetoothResult* out_result);
  void WatchAdvertisementsForDevice(
      const ::blink::WebBluetoothDeviceId& device_id, ::mojo::PendingAssociatedRemote<WebBluetoothAdvertisementClient> client, WebBluetoothResult* out_result);

 private:
  WebBluetoothService* const proxy_;
};


class BLINK_PLATFORM_EXPORT WebBluetoothServerClientInterceptorForTesting : public WebBluetoothServerClient {
  virtual WebBluetoothServerClient* GetForwardingInterface() = 0;
  void GATTServerDisconnected() override;
};
class BLINK_PLATFORM_EXPORT WebBluetoothServerClientAsyncWaiter {
 public:
  explicit WebBluetoothServerClientAsyncWaiter(WebBluetoothServerClient* proxy);

  WebBluetoothServerClientAsyncWaiter(const WebBluetoothServerClientAsyncWaiter&) = delete;
  WebBluetoothServerClientAsyncWaiter& operator=(const WebBluetoothServerClientAsyncWaiter&) = delete;

  ~WebBluetoothServerClientAsyncWaiter();

 private:
  WebBluetoothServerClient* const proxy_;
};


class BLINK_PLATFORM_EXPORT WebBluetoothCharacteristicClientInterceptorForTesting : public WebBluetoothCharacteristicClient {
  virtual WebBluetoothCharacteristicClient* GetForwardingInterface() = 0;
  void RemoteCharacteristicValueChanged(const WTF::Vector<uint8_t>& value) override;
};
class BLINK_PLATFORM_EXPORT WebBluetoothCharacteristicClientAsyncWaiter {
 public:
  explicit WebBluetoothCharacteristicClientAsyncWaiter(WebBluetoothCharacteristicClient* proxy);

  WebBluetoothCharacteristicClientAsyncWaiter(const WebBluetoothCharacteristicClientAsyncWaiter&) = delete;
  WebBluetoothCharacteristicClientAsyncWaiter& operator=(const WebBluetoothCharacteristicClientAsyncWaiter&) = delete;

  ~WebBluetoothCharacteristicClientAsyncWaiter();

 private:
  WebBluetoothCharacteristicClient* const proxy_;
};


class BLINK_PLATFORM_EXPORT WebBluetoothAdvertisementClientInterceptorForTesting : public WebBluetoothAdvertisementClient {
  virtual WebBluetoothAdvertisementClient* GetForwardingInterface() = 0;
  void AdvertisingEvent(WebBluetoothAdvertisingEventPtr result) override;
};
class BLINK_PLATFORM_EXPORT WebBluetoothAdvertisementClientAsyncWaiter {
 public:
  explicit WebBluetoothAdvertisementClientAsyncWaiter(WebBluetoothAdvertisementClient* proxy);

  WebBluetoothAdvertisementClientAsyncWaiter(const WebBluetoothAdvertisementClientAsyncWaiter&) = delete;
  WebBluetoothAdvertisementClientAsyncWaiter& operator=(const WebBluetoothAdvertisementClientAsyncWaiter&) = delete;

  ~WebBluetoothAdvertisementClientAsyncWaiter();

 private:
  WebBluetoothAdvertisementClient* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLUETOOTH_WEB_BLUETOOTH_MOJOM_BLINK_TEST_UTILS_H_