// third_party/blink/public/mojom/bluetooth/web_bluetooth.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLUETOOTH_WEB_BLUETOOTH_MOJOM_SHARED_INTERNAL_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLUETOOTH_WEB_BLUETOOTH_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "device/bluetooth/public/mojom/uuid.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace blink {
namespace mojom {
namespace internal {
class WebBluetoothLeScanFilter_Data;
class WebBluetoothCompany_Data;
class WebBluetoothDataFilter_Data;
class WebBluetoothRequestDeviceOptions_Data;
class WebBluetoothRequestLEScanOptions_Data;
class WebBluetoothDeviceId_Data;
class WebBluetoothDevice_Data;
class WebBluetoothRemoteGATTService_Data;
class WebBluetoothRemoteGATTCharacteristic_Data;
class WebBluetoothAdvertisingEvent_Data;
class WebBluetoothRemoteGATTDescriptor_Data;

struct WebBluetoothResult_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct WebBluetoothGATTQueryQuantity_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct WebBluetoothWriteType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebBluetoothLeScanFilter_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::bluetooth::mojom::internal::UUID_Data>>> services;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<mojo::internal::String_Data> name_prefix;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<internal::WebBluetoothCompany_Data>, mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebBluetoothDataFilter_Data>>>>> manufacturer_data;

 private:
  friend class mojo::internal::MessageFragment<WebBluetoothLeScanFilter_Data>;

  WebBluetoothLeScanFilter_Data();
  ~WebBluetoothLeScanFilter_Data() = delete;
};
static_assert(sizeof(WebBluetoothLeScanFilter_Data) == 40,
              "Bad sizeof(WebBluetoothLeScanFilter_Data)");
// Used by WebBluetoothLeScanFilter::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebBluetoothLeScanFilter_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebBluetoothLeScanFilter_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebBluetoothLeScanFilter_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebBluetoothLeScanFilter_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebBluetoothLeScanFilter_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebBluetoothCompany_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint16_t id;
  uint8_t padfinal_[6];

 private:
  friend class mojo::internal::MessageFragment<WebBluetoothCompany_Data>;

  WebBluetoothCompany_Data();
  ~WebBluetoothCompany_Data() = delete;
};
static_assert(sizeof(WebBluetoothCompany_Data) == 16,
              "Bad sizeof(WebBluetoothCompany_Data)");
// Used by WebBluetoothCompany::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebBluetoothCompany_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebBluetoothCompany_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebBluetoothCompany_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebBluetoothCompany_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebBluetoothCompany_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebBluetoothDataFilter_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t data;
  uint8_t mask;
  uint8_t padfinal_[6];

 private:
  friend class mojo::internal::MessageFragment<WebBluetoothDataFilter_Data>;

  WebBluetoothDataFilter_Data();
  ~WebBluetoothDataFilter_Data() = delete;
};
static_assert(sizeof(WebBluetoothDataFilter_Data) == 16,
              "Bad sizeof(WebBluetoothDataFilter_Data)");
// Used by WebBluetoothDataFilter::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebBluetoothDataFilter_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebBluetoothDataFilter_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebBluetoothDataFilter_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebBluetoothDataFilter_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebBluetoothDataFilter_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebBluetoothRequestDeviceOptions_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebBluetoothLeScanFilter_Data>>> filters;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::bluetooth::mojom::internal::UUID_Data>>> optional_services;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint16_t>> optional_manufacturer_data;
  uint8_t accept_all_devices : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<WebBluetoothRequestDeviceOptions_Data>;

  WebBluetoothRequestDeviceOptions_Data();
  ~WebBluetoothRequestDeviceOptions_Data() = delete;
};
static_assert(sizeof(WebBluetoothRequestDeviceOptions_Data) == 40,
              "Bad sizeof(WebBluetoothRequestDeviceOptions_Data)");
// Used by WebBluetoothRequestDeviceOptions::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebBluetoothRequestDeviceOptions_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebBluetoothRequestDeviceOptions_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebBluetoothRequestDeviceOptions_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebBluetoothRequestDeviceOptions_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebBluetoothRequestDeviceOptions_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebBluetoothRequestLEScanOptions_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebBluetoothLeScanFilter_Data>>> filters;
  uint8_t keep_repeated_devices : 1;
  uint8_t accept_all_advertisements : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<WebBluetoothRequestLEScanOptions_Data>;

  WebBluetoothRequestLEScanOptions_Data();
  ~WebBluetoothRequestLEScanOptions_Data() = delete;
};
static_assert(sizeof(WebBluetoothRequestLEScanOptions_Data) == 24,
              "Bad sizeof(WebBluetoothRequestLEScanOptions_Data)");
// Used by WebBluetoothRequestLEScanOptions::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebBluetoothRequestLEScanOptions_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebBluetoothRequestLEScanOptions_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebBluetoothRequestLEScanOptions_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebBluetoothRequestLEScanOptions_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebBluetoothRequestLEScanOptions_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebBluetoothDeviceId_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> device_id;

 private:
  friend class mojo::internal::MessageFragment<WebBluetoothDeviceId_Data>;

  WebBluetoothDeviceId_Data();
  ~WebBluetoothDeviceId_Data() = delete;
};
static_assert(sizeof(WebBluetoothDeviceId_Data) == 16,
              "Bad sizeof(WebBluetoothDeviceId_Data)");
// Used by WebBluetoothDeviceId::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebBluetoothDeviceId_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebBluetoothDeviceId_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebBluetoothDeviceId_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebBluetoothDeviceId_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebBluetoothDeviceId_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebBluetoothDevice_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WebBluetoothDeviceId_Data> id;
  mojo::internal::Pointer<mojo::internal::String_Data> name;

 private:
  friend class mojo::internal::MessageFragment<WebBluetoothDevice_Data>;

  WebBluetoothDevice_Data();
  ~WebBluetoothDevice_Data() = delete;
};
static_assert(sizeof(WebBluetoothDevice_Data) == 24,
              "Bad sizeof(WebBluetoothDevice_Data)");
// Used by WebBluetoothDevice::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebBluetoothDevice_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebBluetoothDevice_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebBluetoothDevice_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebBluetoothDevice_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebBluetoothDevice_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebBluetoothRemoteGATTService_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> instance_id;
  mojo::internal::Pointer<::bluetooth::mojom::internal::UUID_Data> uuid;

 private:
  friend class mojo::internal::MessageFragment<WebBluetoothRemoteGATTService_Data>;

  WebBluetoothRemoteGATTService_Data();
  ~WebBluetoothRemoteGATTService_Data() = delete;
};
static_assert(sizeof(WebBluetoothRemoteGATTService_Data) == 24,
              "Bad sizeof(WebBluetoothRemoteGATTService_Data)");
// Used by WebBluetoothRemoteGATTService::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebBluetoothRemoteGATTService_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebBluetoothRemoteGATTService_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebBluetoothRemoteGATTService_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebBluetoothRemoteGATTService_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebBluetoothRemoteGATTService_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebBluetoothRemoteGATTCharacteristic_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> instance_id;
  mojo::internal::Pointer<::bluetooth::mojom::internal::UUID_Data> uuid;
  uint32_t properties;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<WebBluetoothRemoteGATTCharacteristic_Data>;

  WebBluetoothRemoteGATTCharacteristic_Data();
  ~WebBluetoothRemoteGATTCharacteristic_Data() = delete;
};
static_assert(sizeof(WebBluetoothRemoteGATTCharacteristic_Data) == 32,
              "Bad sizeof(WebBluetoothRemoteGATTCharacteristic_Data)");
// Used by WebBluetoothRemoteGATTCharacteristic::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebBluetoothRemoteGATTCharacteristic_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebBluetoothRemoteGATTCharacteristic_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebBluetoothRemoteGATTCharacteristic_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebBluetoothRemoteGATTCharacteristic_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebBluetoothRemoteGATTCharacteristic_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebBluetoothAdvertisingEvent_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WebBluetoothDevice_Data> device;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::bluetooth::mojom::internal::UUID_Data>>> uuids;
  uint8_t appearance_is_set : 1;
  uint8_t tx_power_is_set : 1;
  uint8_t rssi_is_set : 1;
  uint8_t tx_power;
  uint16_t appearance;
  uint8_t rssi;
  uint8_t pad8_[3];
  mojo::internal::Pointer<mojo::internal::Map_Data<uint16_t, mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>>>> manufacturer_data;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<::bluetooth::mojom::internal::UUID_Data>, mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>>>> service_data;

 private:
  friend class mojo::internal::MessageFragment<WebBluetoothAdvertisingEvent_Data>;

  WebBluetoothAdvertisingEvent_Data();
  ~WebBluetoothAdvertisingEvent_Data() = delete;
};
static_assert(sizeof(WebBluetoothAdvertisingEvent_Data) == 56,
              "Bad sizeof(WebBluetoothAdvertisingEvent_Data)");
// Used by WebBluetoothAdvertisingEvent::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebBluetoothAdvertisingEvent_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebBluetoothAdvertisingEvent_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebBluetoothAdvertisingEvent_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebBluetoothAdvertisingEvent_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebBluetoothAdvertisingEvent_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebBluetoothRemoteGATTDescriptor_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> instance_id;
  mojo::internal::Pointer<::bluetooth::mojom::internal::UUID_Data> uuid;

 private:
  friend class mojo::internal::MessageFragment<WebBluetoothRemoteGATTDescriptor_Data>;

  WebBluetoothRemoteGATTDescriptor_Data();
  ~WebBluetoothRemoteGATTDescriptor_Data() = delete;
};
static_assert(sizeof(WebBluetoothRemoteGATTDescriptor_Data) == 24,
              "Bad sizeof(WebBluetoothRemoteGATTDescriptor_Data)");
// Used by WebBluetoothRemoteGATTDescriptor::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebBluetoothRemoteGATTDescriptor_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebBluetoothRemoteGATTDescriptor_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebBluetoothRemoteGATTDescriptor_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebBluetoothRemoteGATTDescriptor_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebBluetoothRemoteGATTDescriptor_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLUETOOTH_WEB_BLUETOOTH_MOJOM_SHARED_INTERNAL_H_