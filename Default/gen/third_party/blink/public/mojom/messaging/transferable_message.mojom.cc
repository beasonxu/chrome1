// third_party/blink/public/mojom/messaging/transferable_message.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/messaging/transferable_message.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/messaging/transferable_message.mojom-params-data.h"
#include "third_party/blink/public/mojom/messaging/transferable_message.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/messaging/transferable_message.mojom-import-headers.h"
#include "third_party/blink/public/mojom/messaging/transferable_message.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_MESSAGING_TRANSFERABLE_MESSAGE_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_MESSAGING_TRANSFERABLE_MESSAGE_MOJOM_JUMBO_H_
#include "third_party/blink/public/common/messaging/cloneable_message_mojom_traits.h"
#endif



namespace blink {
namespace mojom {
TransferableMessage::TransferableMessage()
    : message(),
      ports(),
      stream_channels(),
      array_buffer_contents_array(),
      image_bitmap_contents_array(),
      user_activation(),
      delegated_capability(::blink::mojom::DelegatedCapability::kNone) {}

TransferableMessage::TransferableMessage(
    ::blink::CloneableMessage message_in,
    std::vector<::blink::MessagePortDescriptor> ports_in,
    std::vector<::blink::MessagePortDescriptor> stream_channels_in,
    std::vector<::blink::mojom::SerializedArrayBufferContentsPtr> array_buffer_contents_array_in,
    std::vector<::SkBitmap> image_bitmap_contents_array_in,
    ::blink::mojom::UserActivationSnapshotPtr user_activation_in,
    ::blink::mojom::DelegatedCapability delegated_capability_in)
    : message(std::move(message_in)),
      ports(std::move(ports_in)),
      stream_channels(std::move(stream_channels_in)),
      array_buffer_contents_array(std::move(array_buffer_contents_array_in)),
      image_bitmap_contents_array(std::move(image_bitmap_contents_array_in)),
      user_activation(std::move(user_activation_in)),
      delegated_capability(std::move(delegated_capability_in)) {}

TransferableMessage::~TransferableMessage() = default;

void TransferableMessage::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "message"), this->message,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::CloneableMessage>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "ports"), this->ports,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<::blink::MessagePortDescriptor>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "stream_channels"), this->stream_channels,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<::blink::MessagePortDescriptor>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "array_buffer_contents_array"), this->array_buffer_contents_array,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<::blink::mojom::SerializedArrayBufferContentsPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "image_bitmap_contents_array"), this->image_bitmap_contents_array,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::SkBitmap>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "user_activation"), this->user_activation,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::mojom::UserActivationSnapshotPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "delegated_capability"), this->delegated_capability,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::mojom::DelegatedCapability>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool TransferableMessage::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::TransferableMessage::DataView, ::blink::mojom::TransferableMessagePtr>::Read(
    ::blink::mojom::TransferableMessage::DataView input,
    ::blink::mojom::TransferableMessagePtr* output) {
  bool success = true;
  ::blink::mojom::TransferableMessagePtr result(::blink::mojom::TransferableMessage::New());
  
      if (success && !input.ReadMessage(&result->message))
        success = false;
      if (success && !input.ReadPorts(&result->ports))
        success = false;
      if (success && !input.ReadStreamChannels(&result->stream_channels))
        success = false;
      if (success && !input.ReadArrayBufferContentsArray(&result->array_buffer_contents_array))
        success = false;
      if (success && !input.ReadImageBitmapContentsArray(&result->image_bitmap_contents_array))
        success = false;
      if (success && !input.ReadUserActivation(&result->user_activation))
        success = false;
      if (success && !input.ReadDelegatedCapability(&result->delegated_capability))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif