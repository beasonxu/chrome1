// third_party/blink/public/mojom/cookie_manager/cookie_manager_automation.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/cookie_manager/cookie_manager_automation.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.test.mojom');



  function CookieManagerAutomation_DeleteAllCookies_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CookieManagerAutomation_DeleteAllCookies_Params.prototype.initDefaults_ = function() {
  };
  CookieManagerAutomation_DeleteAllCookies_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CookieManagerAutomation_DeleteAllCookies_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CookieManagerAutomation_DeleteAllCookies_Params.encodedSize = codec.kStructHeaderSize + 0;

  CookieManagerAutomation_DeleteAllCookies_Params.decode = function(decoder) {
    var packed;
    var val = new CookieManagerAutomation_DeleteAllCookies_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CookieManagerAutomation_DeleteAllCookies_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CookieManagerAutomation_DeleteAllCookies_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CookieManagerAutomation_DeleteAllCookies_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CookieManagerAutomation_DeleteAllCookies_ResponseParams.prototype.initDefaults_ = function() {
  };
  CookieManagerAutomation_DeleteAllCookies_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CookieManagerAutomation_DeleteAllCookies_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CookieManagerAutomation_DeleteAllCookies_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  CookieManagerAutomation_DeleteAllCookies_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CookieManagerAutomation_DeleteAllCookies_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CookieManagerAutomation_DeleteAllCookies_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CookieManagerAutomation_DeleteAllCookies_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  var kCookieManagerAutomation_DeleteAllCookies_Name = 0;

  function CookieManagerAutomationPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CookieManagerAutomation,
                                                   handleOrPtrInfo);
  }

  function CookieManagerAutomationAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CookieManagerAutomation, associatedInterfacePtrInfo);
  }

  CookieManagerAutomationAssociatedPtr.prototype =
      Object.create(CookieManagerAutomationPtr.prototype);
  CookieManagerAutomationAssociatedPtr.prototype.constructor =
      CookieManagerAutomationAssociatedPtr;

  function CookieManagerAutomationProxy(receiver) {
    this.receiver_ = receiver;
  }
  CookieManagerAutomationPtr.prototype.deleteAllCookies = function() {
    return CookieManagerAutomationProxy.prototype.deleteAllCookies
        .apply(this.ptr.getProxy(), arguments);
  };

  CookieManagerAutomationProxy.prototype.deleteAllCookies = function() {
    var params_ = new CookieManagerAutomation_DeleteAllCookies_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCookieManagerAutomation_DeleteAllCookies_Name,
          codec.align(CookieManagerAutomation_DeleteAllCookies_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CookieManagerAutomation_DeleteAllCookies_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CookieManagerAutomation_DeleteAllCookies_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function CookieManagerAutomationStub(delegate) {
    this.delegate_ = delegate;
  }
  CookieManagerAutomationStub.prototype.deleteAllCookies = function() {
    return this.delegate_ && this.delegate_.deleteAllCookies && this.delegate_.deleteAllCookies();
  }

  CookieManagerAutomationStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  CookieManagerAutomationStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCookieManagerAutomation_DeleteAllCookies_Name:
      var params = reader.decodeStruct(CookieManagerAutomation_DeleteAllCookies_Params);
      this.deleteAllCookies().then(function(response) {
        var responseParams =
            new CookieManagerAutomation_DeleteAllCookies_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kCookieManagerAutomation_DeleteAllCookies_Name,
            codec.align(CookieManagerAutomation_DeleteAllCookies_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CookieManagerAutomation_DeleteAllCookies_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateCookieManagerAutomationRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCookieManagerAutomation_DeleteAllCookies_Name:
        if (message.expectsResponse())
          paramsClass = CookieManagerAutomation_DeleteAllCookies_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCookieManagerAutomationResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kCookieManagerAutomation_DeleteAllCookies_Name:
        if (message.isResponse())
          paramsClass = CookieManagerAutomation_DeleteAllCookies_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var CookieManagerAutomation = {
    name: 'blink.test.mojom.CookieManagerAutomation',
    kVersion: 0,
    ptrClass: CookieManagerAutomationPtr,
    proxyClass: CookieManagerAutomationProxy,
    stubClass: CookieManagerAutomationStub,
    validateRequest: validateCookieManagerAutomationRequest,
    validateResponse: validateCookieManagerAutomationResponse,
  };
  CookieManagerAutomationStub.prototype.validator = validateCookieManagerAutomationRequest;
  CookieManagerAutomationProxy.prototype.validator = validateCookieManagerAutomationResponse;
  exports.CookieManagerAutomation = CookieManagerAutomation;
  exports.CookieManagerAutomationPtr = CookieManagerAutomationPtr;
  exports.CookieManagerAutomationAssociatedPtr = CookieManagerAutomationAssociatedPtr;
})();