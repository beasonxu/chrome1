// third_party/blink/public/mojom/permissions_policy/document_policy_feature.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_POLICY_DOCUMENT_POLICY_FEATURE_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_POLICY_DOCUMENT_POLICY_FEATURE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/permissions_policy/document_policy_feature.mojom-shared-internal.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {


}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class DocumentPolicyFeature : int32_t {
  
  kDefault = 0,
  
  kFontDisplay = 1,
  
  kLosslessImagesMaxBpp = 2,
  
  kForceLoadAtTop = 3,
  
  kLosslessImagesStrictMaxBpp = 4,
  
  kLossyImagesMaxBpp = 5,
  
  kOversizedImages = 6,
  
  kUnsizedMedia = 7,
  
  kLayoutAnimations = 8,
  
  kDocumentWrite = 9,
  
  kSyncScript = 10,
  
  kJSProfiling = 11,
  
  kSyncXHR = 12,
  
  kDocumentDomain = 13,
  kMinValue = 0,
  kMaxValue = 13,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, DocumentPolicyFeature value);
inline bool IsKnownEnumValue(DocumentPolicyFeature value) {
  return internal::DocumentPolicyFeature_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::DocumentPolicyFeature>
    : public mojo::internal::EnumHashImpl<::blink::mojom::DocumentPolicyFeature> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::DocumentPolicyFeature, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::DocumentPolicyFeature, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::DocumentPolicyFeature>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {


}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::DocumentPolicyFeature> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::DocumentPolicyFeature value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_POLICY_DOCUMENT_POLICY_FEATURE_MOJOM_SHARED_H_