// third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* PermissionsPolicyFeatureToStringHelper(PermissionsPolicyFeature value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case PermissionsPolicyFeature::kNotFound:
      return "kNotFound";
    case PermissionsPolicyFeature::kAutoplay:
      return "kAutoplay";
    case PermissionsPolicyFeature::kCamera:
      return "kCamera";
    case PermissionsPolicyFeature::kEncryptedMedia:
      return "kEncryptedMedia";
    case PermissionsPolicyFeature::kFullscreen:
      return "kFullscreen";
    case PermissionsPolicyFeature::kGeolocation:
      return "kGeolocation";
    case PermissionsPolicyFeature::kMicrophone:
      return "kMicrophone";
    case PermissionsPolicyFeature::kMidiFeature:
      return "kMidiFeature";
    case PermissionsPolicyFeature::kPayment:
      return "kPayment";
    case PermissionsPolicyFeature::kDocumentDomain:
      return "kDocumentDomain";
    case PermissionsPolicyFeature::kSyncXHR:
      return "kSyncXHR";
    case PermissionsPolicyFeature::kUsb:
      return "kUsb";
    case PermissionsPolicyFeature::kAccelerometer:
      return "kAccelerometer";
    case PermissionsPolicyFeature::kAmbientLightSensor:
      return "kAmbientLightSensor";
    case PermissionsPolicyFeature::kGyroscope:
      return "kGyroscope";
    case PermissionsPolicyFeature::kMagnetometer:
      return "kMagnetometer";
    case PermissionsPolicyFeature::kPictureInPicture:
      return "kPictureInPicture";
    case PermissionsPolicyFeature::kVerticalScroll:
      return "kVerticalScroll";
    case PermissionsPolicyFeature::kScreenWakeLock:
      return "kScreenWakeLock";
    case PermissionsPolicyFeature::kFrobulate:
      return "kFrobulate";
    case PermissionsPolicyFeature::kSerial:
      return "kSerial";
    case PermissionsPolicyFeature::kHid:
      return "kHid";
    case PermissionsPolicyFeature::kIdleDetection:
      return "kIdleDetection";
    case PermissionsPolicyFeature::kExecutionWhileOutOfViewport:
      return "kExecutionWhileOutOfViewport";
    case PermissionsPolicyFeature::kExecutionWhileNotRendered:
      return "kExecutionWhileNotRendered";
    case PermissionsPolicyFeature::kFocusWithoutUserActivation:
      return "kFocusWithoutUserActivation";
    case PermissionsPolicyFeature::kClientHintDPR:
      return "kClientHintDPR";
    case PermissionsPolicyFeature::kClientHintDeviceMemory:
      return "kClientHintDeviceMemory";
    case PermissionsPolicyFeature::kClientHintDownlink:
      return "kClientHintDownlink";
    case PermissionsPolicyFeature::kClientHintECT:
      return "kClientHintECT";
    case PermissionsPolicyFeature::kClientHintRTT:
      return "kClientHintRTT";
    case PermissionsPolicyFeature::kClientHintUA:
      return "kClientHintUA";
    case PermissionsPolicyFeature::kClientHintUAArch:
      return "kClientHintUAArch";
    case PermissionsPolicyFeature::kClientHintUAModel:
      return "kClientHintUAModel";
    case PermissionsPolicyFeature::kClientHintUAPlatform:
      return "kClientHintUAPlatform";
    case PermissionsPolicyFeature::kClientHintViewportWidth:
      return "kClientHintViewportWidth";
    case PermissionsPolicyFeature::kClientHintWidth:
      return "kClientHintWidth";
    case PermissionsPolicyFeature::kWebXr:
      return "kWebXr";
    case PermissionsPolicyFeature::kPublicKeyCredentialsGet:
      return "kPublicKeyCredentialsGet";
    case PermissionsPolicyFeature::kClientHintUAMobile:
      return "kClientHintUAMobile";
    case PermissionsPolicyFeature::kStorageAccessAPI:
      return "kStorageAccessAPI";
    case PermissionsPolicyFeature::kClientHintUAFullVersion:
      return "kClientHintUAFullVersion";
    case PermissionsPolicyFeature::kTrustTokenRedemption:
      return "kTrustTokenRedemption";
    case PermissionsPolicyFeature::kAttributionReporting:
      return "kAttributionReporting";
    case PermissionsPolicyFeature::kClientHintUAPlatformVersion:
      return "kClientHintUAPlatformVersion";
    case PermissionsPolicyFeature::kCrossOriginIsolated:
      return "kCrossOriginIsolated";
    case PermissionsPolicyFeature::kClipboardRead:
      return "kClipboardRead";
    case PermissionsPolicyFeature::kClipboardWrite:
      return "kClipboardWrite";
    case PermissionsPolicyFeature::kWebShare:
      return "kWebShare";
    case PermissionsPolicyFeature::kGamepad:
      return "kGamepad";
    case PermissionsPolicyFeature::kOTPCredentials:
      return "kOTPCredentials";
    case PermissionsPolicyFeature::kDisplayCapture:
      return "kDisplayCapture";
    case PermissionsPolicyFeature::kSharedAutofill:
      return "kSharedAutofill";
    case PermissionsPolicyFeature::kDirectSockets:
      return "kDirectSockets";
    case PermissionsPolicyFeature::kClientHintPrefersColorScheme:
      return "kClientHintPrefersColorScheme";
    case PermissionsPolicyFeature::kWindowPlacement:
      return "kWindowPlacement";
    case PermissionsPolicyFeature::kClientHintUABitness:
      return "kClientHintUABitness";
    case PermissionsPolicyFeature::kClientHintUAReduced:
      return "kClientHintUAReduced";
    case PermissionsPolicyFeature::kClientHintViewportHeight:
      return "kClientHintViewportHeight";
    case PermissionsPolicyFeature::kKeyboardMap:
      return "kKeyboardMap";
    case PermissionsPolicyFeature::kRunAdAuction:
      return "kRunAdAuction";
    case PermissionsPolicyFeature::kJoinAdInterestGroup:
      return "kJoinAdInterestGroup";
    case PermissionsPolicyFeature::kClientHintUAFullVersionList:
      return "kClientHintUAFullVersionList";
    case PermissionsPolicyFeature::kClientHintUAFull:
      return "kClientHintUAFull";
    case PermissionsPolicyFeature::kClientHintUAWoW64:
      return "kClientHintUAWoW64";
    case PermissionsPolicyFeature::kBrowsingTopics:
      return "kBrowsingTopics";
    case PermissionsPolicyFeature::kBrowsingTopicsBackwardCompatible:
      return "kBrowsingTopicsBackwardCompatible";
    case PermissionsPolicyFeature::kClientHintSaveData:
      return "kClientHintSaveData";
    case PermissionsPolicyFeature::kLocalFonts:
      return "kLocalFonts";
    case PermissionsPolicyFeature::kBluetooth:
      return "kBluetooth";
    case PermissionsPolicyFeature::kFederatedCredentials:
      return "kFederatedCredentials";
    case PermissionsPolicyFeature::kSharedStorage:
      return "kSharedStorage";
    case PermissionsPolicyFeature::kUnload:
      return "kUnload";
    default:
      return nullptr;
  }
}

std::string PermissionsPolicyFeatureToString(PermissionsPolicyFeature value) {
  const char *str = PermissionsPolicyFeatureToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown PermissionsPolicyFeature value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, PermissionsPolicyFeature value) {
  return os << PermissionsPolicyFeatureToString(value);
}

namespace internal {

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::PermissionsPolicyFeature>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::PermissionsPolicyFeature value) {
  return std::move(context).WriteString(::blink::mojom::PermissionsPolicyFeatureToString(value));
}

} // namespace perfetto