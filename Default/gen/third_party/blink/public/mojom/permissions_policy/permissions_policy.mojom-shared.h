// third_party/blink/public/mojom/permissions_policy/permissions_policy.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_POLICY_PERMISSIONS_POLICY_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_POLICY_PERMISSIONS_POLICY_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/permissions_policy/permissions_policy.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared.h"
#include "third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom-shared.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {
class ParsedPermissionsPolicyDeclarationDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView> {
  using Data = ::blink::mojom::internal::ParsedPermissionsPolicyDeclaration_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


class ParsedPermissionsPolicyDeclarationDataView {
 public:
  ParsedPermissionsPolicyDeclarationDataView() = default;

  ParsedPermissionsPolicyDeclarationDataView(
      internal::ParsedPermissionsPolicyDeclaration_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadFeature(UserType* output) const {
    auto data_value = data_->feature;
    return mojo::internal::Deserialize<::blink::mojom::PermissionsPolicyFeature>(
        data_value, output);
  }
  ::blink::mojom::PermissionsPolicyFeature feature() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PermissionsPolicyFeature>(data_->feature));
  }
  inline void GetAllowedOriginsDataView(
      mojo::ArrayDataView<::url::mojom::OriginDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAllowedOrigins(UserType* output) {
    
    auto* pointer = data_->allowed_origins.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::OriginDataView>>(
        pointer, output, message_);
  }
  bool matches_all_origins() const {
    return data_->matches_all_origins;
  }
  bool matches_opaque_src() const {
    return data_->matches_opaque_src;
  }
 private:
  internal::ParsedPermissionsPolicyDeclaration_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::ParsedPermissionsPolicyDeclaration_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::blink::mojom::PermissionsPolicyFeature>(
        Traits::feature(input), &fragment->feature);
    decltype(Traits::allowed_origins(input)) in_allowed_origins = Traits::allowed_origins(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->allowed_origins)::BaseType>
        allowed_origins_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams allowed_origins_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::url::mojom::OriginDataView>>(
        in_allowed_origins, allowed_origins_fragment, &allowed_origins_validate_params);
    fragment->allowed_origins.Set(
        allowed_origins_fragment.is_null() ? nullptr : allowed_origins_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->allowed_origins.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null allowed_origins in ParsedPermissionsPolicyDeclaration struct");
    fragment->matches_all_origins = Traits::matches_all_origins(input);
    fragment->matches_opaque_src = Traits::matches_opaque_src(input);
  }

  static bool Deserialize(::blink::mojom::internal::ParsedPermissionsPolicyDeclaration_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::ParsedPermissionsPolicyDeclarationDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void ParsedPermissionsPolicyDeclarationDataView::GetAllowedOriginsDataView(
    mojo::ArrayDataView<::url::mojom::OriginDataView>* output) {
  auto pointer = data_->allowed_origins.Get();
  *output = mojo::ArrayDataView<::url::mojom::OriginDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_POLICY_PERMISSIONS_POLICY_MOJOM_SHARED_H_