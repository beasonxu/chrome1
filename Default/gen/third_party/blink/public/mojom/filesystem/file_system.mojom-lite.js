// third_party/blink/public/mojom/filesystem/file_system.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('blink.mojom');





/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.FileSystemTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.FileSystemType = {
  
  kTemporary: 0,
  kPersistent: 1,
  kIsolated: 2,
  kExternal: 3,
  MIN_VALUE: 0,
  MAX_VALUE: 3,
};





/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.FileSystemCancellableOperationPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.FileSystemCancellableOperation.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.mojom.FileSystemCancellableOperationInterface }
 */
blink.mojom.FileSystemCancellableOperationRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.FileSystemCancellableOperationPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.FileSystemCancellableOperationPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.FileSystemCancellableOperationPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  cancel() {
    return this.proxy.sendMessage(
        0,
        blink.mojom.FileSystemCancellableOperation_Cancel_ParamsSpec.$,
        blink.mojom.FileSystemCancellableOperation_Cancel_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the FileSystemCancellableOperation
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.FileSystemCancellableOperationReceiver = class {
  /**
   * @param {!blink.mojom.FileSystemCancellableOperationInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.FileSystemCancellableOperationRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.FileSystemCancellableOperationRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FileSystemCancellableOperationRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FileSystemCancellableOperation_Cancel_ParamsSpec.$,
        blink.mojom.FileSystemCancellableOperation_Cancel_ResponseParamsSpec.$,
        impl.cancel.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.FileSystemCancellableOperation = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.FileSystemCancellableOperation";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.FileSystemCancellableOperationRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.FileSystemCancellableOperationRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the FileSystemCancellableOperation
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.FileSystemCancellableOperationCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.FileSystemCancellableOperationRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FileSystemCancellableOperationRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.cancel =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FileSystemCancellableOperation_Cancel_ParamsSpec.$,
        blink.mojom.FileSystemCancellableOperation_Cancel_ResponseParamsSpec.$,
        this.cancel.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.FileSystemOperationListenerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.FileSystemOperationListener.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.mojom.FileSystemOperationListenerInterface }
 */
blink.mojom.FileSystemOperationListenerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.FileSystemOperationListenerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.FileSystemOperationListenerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.FileSystemOperationListenerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Array<!filesystem.mojom.DirectoryEntry> } entries
   * @param { !boolean } hasMore
   */

  resultsRetrieved(
      entries,
      hasMore) {
    this.proxy.sendMessage(
        0,
        blink.mojom.FileSystemOperationListener_ResultsRetrieved_ParamsSpec.$,
        null,
        [
          entries,
          hasMore
        ]);
  }

  
  /**
   * @param { !bigint } byteCount
   * @param { !boolean } complete
   */

  didWrite(
      byteCount,
      complete) {
    this.proxy.sendMessage(
        1,
        blink.mojom.FileSystemOperationListener_DidWrite_ParamsSpec.$,
        null,
        [
          byteCount,
          complete
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.FileError } errorCode
   */

  errorOccurred(
      errorCode) {
    this.proxy.sendMessage(
        2,
        blink.mojom.FileSystemOperationListener_ErrorOccurred_ParamsSpec.$,
        null,
        [
          errorCode
        ]);
  }
};

/**
 * An object which receives request messages for the FileSystemOperationListener
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.FileSystemOperationListenerReceiver = class {
  /**
   * @param {!blink.mojom.FileSystemOperationListenerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.FileSystemOperationListenerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.FileSystemOperationListenerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FileSystemOperationListenerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FileSystemOperationListener_ResultsRetrieved_ParamsSpec.$,
        null,
        impl.resultsRetrieved.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.FileSystemOperationListener_DidWrite_ParamsSpec.$,
        null,
        impl.didWrite.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.mojom.FileSystemOperationListener_ErrorOccurred_ParamsSpec.$,
        null,
        impl.errorOccurred.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.FileSystemOperationListener = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.FileSystemOperationListener";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.FileSystemOperationListenerRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.FileSystemOperationListenerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the FileSystemOperationListener
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.FileSystemOperationListenerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.FileSystemOperationListenerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FileSystemOperationListenerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.resultsRetrieved =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FileSystemOperationListener_ResultsRetrieved_ParamsSpec.$,
        null,
        this.resultsRetrieved.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.didWrite =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.FileSystemOperationListener_DidWrite_ParamsSpec.$,
        null,
        this.didWrite.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.errorOccurred =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.mojom.FileSystemOperationListener_ErrorOccurred_ParamsSpec.$,
        null,
        this.errorOccurred.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.ReceivedSnapshotListenerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.ReceivedSnapshotListener.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.mojom.ReceivedSnapshotListenerInterface }
 */
blink.mojom.ReceivedSnapshotListenerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.ReceivedSnapshotListenerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.ReceivedSnapshotListenerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.ReceivedSnapshotListenerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  didReceiveSnapshotFile() {
    this.proxy.sendMessage(
        0,
        blink.mojom.ReceivedSnapshotListener_DidReceiveSnapshotFile_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the ReceivedSnapshotListener
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.ReceivedSnapshotListenerReceiver = class {
  /**
   * @param {!blink.mojom.ReceivedSnapshotListenerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.ReceivedSnapshotListenerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.ReceivedSnapshotListenerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.ReceivedSnapshotListenerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.ReceivedSnapshotListener_DidReceiveSnapshotFile_ParamsSpec.$,
        null,
        impl.didReceiveSnapshotFile.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.ReceivedSnapshotListener = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.ReceivedSnapshotListener";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.ReceivedSnapshotListenerRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.ReceivedSnapshotListenerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the ReceivedSnapshotListener
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.ReceivedSnapshotListenerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.ReceivedSnapshotListenerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.ReceivedSnapshotListenerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.didReceiveSnapshotFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.ReceivedSnapshotListener_DidReceiveSnapshotFile_ParamsSpec.$,
        null,
        this.didReceiveSnapshotFile.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.FileSystemManagerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.FileSystemManager.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.mojom.FileSystemManagerInterface }
 */
blink.mojom.FileSystemManagerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.FileSystemManagerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.FileSystemManagerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.FileSystemManagerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !blink.mojom.FileSystemType } fileSystemType
   * @return {!Promise<{
        name: !string,
        rootUrl: !url.mojom.Url,
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  open(
      origin,
      fileSystemType) {
    return this.proxy.sendMessage(
        0,
        blink.mojom.FileSystemManager_Open_ParamsSpec.$,
        blink.mojom.FileSystemManager_Open_ResponseParamsSpec.$,
        [
          origin,
          fileSystemType
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } filesystemUrl
   * @return {!Promise<{
        info: !blink.mojom.FileSystemInfo,
        filePath: !mojoBase.mojom.FilePath,
        isDirectory: !boolean,
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  resolveURL(
      filesystemUrl) {
    return this.proxy.sendMessage(
        1,
        blink.mojom.FileSystemManager_ResolveURL_ParamsSpec.$,
        blink.mojom.FileSystemManager_ResolveURL_ResponseParamsSpec.$,
        [
          filesystemUrl
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } srcPath
   * @param { !url.mojom.Url } destPath
   * @return {!Promise<{
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  move(
      srcPath,
      destPath) {
    return this.proxy.sendMessage(
        2,
        blink.mojom.FileSystemManager_Move_ParamsSpec.$,
        blink.mojom.FileSystemManager_Move_ResponseParamsSpec.$,
        [
          srcPath,
          destPath
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } srcPath
   * @param { !url.mojom.Url } destPath
   * @return {!Promise<{
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  copy(
      srcPath,
      destPath) {
    return this.proxy.sendMessage(
        3,
        blink.mojom.FileSystemManager_Copy_ParamsSpec.$,
        blink.mojom.FileSystemManager_Copy_ResponseParamsSpec.$,
        [
          srcPath,
          destPath
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } path
   * @param { !boolean } recursive
   * @return {!Promise<{
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  remove(
      path,
      recursive) {
    return this.proxy.sendMessage(
        4,
        blink.mojom.FileSystemManager_Remove_ParamsSpec.$,
        blink.mojom.FileSystemManager_Remove_ResponseParamsSpec.$,
        [
          path,
          recursive
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } path
   * @return {!Promise<{
        fileInfo: !mojoBase.mojom.FileInfo,
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  readMetadata(
      path) {
    return this.proxy.sendMessage(
        5,
        blink.mojom.FileSystemManager_ReadMetadata_ParamsSpec.$,
        blink.mojom.FileSystemManager_ReadMetadata_ResponseParamsSpec.$,
        [
          path
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } path
   * @param { !boolean } exclusive
   * @param { !boolean } isDirectory
   * @param { !boolean } recursive
   * @return {!Promise<{
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  create(
      path,
      exclusive,
      isDirectory,
      recursive) {
    return this.proxy.sendMessage(
        6,
        blink.mojom.FileSystemManager_Create_ParamsSpec.$,
        blink.mojom.FileSystemManager_Create_ResponseParamsSpec.$,
        [
          path,
          exclusive,
          isDirectory,
          recursive
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } path
   * @param { !boolean } isDirectory
   * @return {!Promise<{
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  exists(
      path,
      isDirectory) {
    return this.proxy.sendMessage(
        7,
        blink.mojom.FileSystemManager_Exists_ParamsSpec.$,
        blink.mojom.FileSystemManager_Exists_ResponseParamsSpec.$,
        [
          path,
          isDirectory
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } path
   * @param { !blink.mojom.FileSystemOperationListenerRemote } listener
   */

  readDirectory(
      path,
      listener) {
    this.proxy.sendMessage(
        8,
        blink.mojom.FileSystemManager_ReadDirectory_ParamsSpec.$,
        null,
        [
          path,
          listener
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } path
   * @return {!Promise<{
        entries: !Array<!filesystem.mojom.DirectoryEntry>,
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  readDirectorySync(
      path) {
    return this.proxy.sendMessage(
        9,
        blink.mojom.FileSystemManager_ReadDirectorySync_ParamsSpec.$,
        blink.mojom.FileSystemManager_ReadDirectorySync_ResponseParamsSpec.$,
        [
          path
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } filePath
   * @param { !string } blobUuid
   * @param { !bigint } position
   * @param { !blink.mojom.FileSystemCancellableOperationPendingReceiver } opReceiver
   * @param { !blink.mojom.FileSystemOperationListenerRemote } listener
   */

  write(
      filePath,
      blobUuid,
      position,
      opReceiver,
      listener) {
    this.proxy.sendMessage(
        10,
        blink.mojom.FileSystemManager_Write_ParamsSpec.$,
        null,
        [
          filePath,
          blobUuid,
          position,
          opReceiver,
          listener
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } filePath
   * @param { !string } blobUuid
   * @param { !bigint } position
   * @return {!Promise<{
        byteCount: !bigint,
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  writeSync(
      filePath,
      blobUuid,
      position) {
    return this.proxy.sendMessage(
        11,
        blink.mojom.FileSystemManager_WriteSync_ParamsSpec.$,
        blink.mojom.FileSystemManager_WriteSync_ResponseParamsSpec.$,
        [
          filePath,
          blobUuid,
          position
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } filePath
   * @param { !bigint } length
   * @param { !blink.mojom.FileSystemCancellableOperationPendingReceiver } opReceiver
   * @return {!Promise<{
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  truncate(
      filePath,
      length,
      opReceiver) {
    return this.proxy.sendMessage(
        12,
        blink.mojom.FileSystemManager_Truncate_ParamsSpec.$,
        blink.mojom.FileSystemManager_Truncate_ResponseParamsSpec.$,
        [
          filePath,
          length,
          opReceiver
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } filePath
   * @param { !bigint } length
   * @return {!Promise<{
        errorCode: !mojoBase.mojom.FileError,
   *  }>}
   */

  truncateSync(
      filePath,
      length) {
    return this.proxy.sendMessage(
        13,
        blink.mojom.FileSystemManager_TruncateSync_ParamsSpec.$,
        blink.mojom.FileSystemManager_TruncateSync_ResponseParamsSpec.$,
        [
          filePath,
          length
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } filePath
   * @return {!Promise<{
        fileInfo: !mojoBase.mojom.FileInfo,
        platformPath: !mojoBase.mojom.FilePath,
        errorCode: !mojoBase.mojom.FileError,
        snapshotListener: ?blink.mojom.ReceivedSnapshotListenerRemote,
   *  }>}
   */

  createSnapshotFile(
      filePath) {
    return this.proxy.sendMessage(
        14,
        blink.mojom.FileSystemManager_CreateSnapshotFile_ParamsSpec.$,
        blink.mojom.FileSystemManager_CreateSnapshotFile_ResponseParamsSpec.$,
        [
          filePath
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } filePath
   * @return {!Promise<{
        platformPath: !mojoBase.mojom.FilePath,
   *  }>}
   */

  getPlatformPath(
      filePath) {
    return this.proxy.sendMessage(
        15,
        blink.mojom.FileSystemManager_GetPlatformPath_ParamsSpec.$,
        blink.mojom.FileSystemManager_GetPlatformPath_ResponseParamsSpec.$,
        [
          filePath
        ]);
  }

  
  /**
   * @param { !string } contentType
   * @param { !url.mojom.Url } url
   * @param { !bigint } length
   * @param { ?mojoBase.mojom.Time } expectedModificationTime
   * @return {!Promise<{
        blob: !blink.mojom.SerializedBlob,
   *  }>}
   */

  registerBlob(
      contentType,
      url,
      length,
      expectedModificationTime) {
    return this.proxy.sendMessage(
        16,
        blink.mojom.FileSystemManager_RegisterBlob_ParamsSpec.$,
        blink.mojom.FileSystemManager_RegisterBlob_ResponseParamsSpec.$,
        [
          contentType,
          url,
          length,
          expectedModificationTime
        ]);
  }
};

/**
 * An object which receives request messages for the FileSystemManager
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.FileSystemManagerReceiver = class {
  /**
   * @param {!blink.mojom.FileSystemManagerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.FileSystemManagerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.FileSystemManagerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FileSystemManagerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FileSystemManager_Open_ParamsSpec.$,
        blink.mojom.FileSystemManager_Open_ResponseParamsSpec.$,
        impl.open.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.FileSystemManager_ResolveURL_ParamsSpec.$,
        blink.mojom.FileSystemManager_ResolveURL_ResponseParamsSpec.$,
        impl.resolveURL.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.mojom.FileSystemManager_Move_ParamsSpec.$,
        blink.mojom.FileSystemManager_Move_ResponseParamsSpec.$,
        impl.move.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        blink.mojom.FileSystemManager_Copy_ParamsSpec.$,
        blink.mojom.FileSystemManager_Copy_ResponseParamsSpec.$,
        impl.copy.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        blink.mojom.FileSystemManager_Remove_ParamsSpec.$,
        blink.mojom.FileSystemManager_Remove_ResponseParamsSpec.$,
        impl.remove.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        blink.mojom.FileSystemManager_ReadMetadata_ParamsSpec.$,
        blink.mojom.FileSystemManager_ReadMetadata_ResponseParamsSpec.$,
        impl.readMetadata.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        blink.mojom.FileSystemManager_Create_ParamsSpec.$,
        blink.mojom.FileSystemManager_Create_ResponseParamsSpec.$,
        impl.create.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        blink.mojom.FileSystemManager_Exists_ParamsSpec.$,
        blink.mojom.FileSystemManager_Exists_ResponseParamsSpec.$,
        impl.exists.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        blink.mojom.FileSystemManager_ReadDirectory_ParamsSpec.$,
        null,
        impl.readDirectory.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        blink.mojom.FileSystemManager_ReadDirectorySync_ParamsSpec.$,
        blink.mojom.FileSystemManager_ReadDirectorySync_ResponseParamsSpec.$,
        impl.readDirectorySync.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        blink.mojom.FileSystemManager_Write_ParamsSpec.$,
        null,
        impl.write.bind(impl));
    this.helper_internal_.registerHandler(
        11,
        blink.mojom.FileSystemManager_WriteSync_ParamsSpec.$,
        blink.mojom.FileSystemManager_WriteSync_ResponseParamsSpec.$,
        impl.writeSync.bind(impl));
    this.helper_internal_.registerHandler(
        12,
        blink.mojom.FileSystemManager_Truncate_ParamsSpec.$,
        blink.mojom.FileSystemManager_Truncate_ResponseParamsSpec.$,
        impl.truncate.bind(impl));
    this.helper_internal_.registerHandler(
        13,
        blink.mojom.FileSystemManager_TruncateSync_ParamsSpec.$,
        blink.mojom.FileSystemManager_TruncateSync_ResponseParamsSpec.$,
        impl.truncateSync.bind(impl));
    this.helper_internal_.registerHandler(
        14,
        blink.mojom.FileSystemManager_CreateSnapshotFile_ParamsSpec.$,
        blink.mojom.FileSystemManager_CreateSnapshotFile_ResponseParamsSpec.$,
        impl.createSnapshotFile.bind(impl));
    this.helper_internal_.registerHandler(
        15,
        blink.mojom.FileSystemManager_GetPlatformPath_ParamsSpec.$,
        blink.mojom.FileSystemManager_GetPlatformPath_ResponseParamsSpec.$,
        impl.getPlatformPath.bind(impl));
    this.helper_internal_.registerHandler(
        16,
        blink.mojom.FileSystemManager_RegisterBlob_ParamsSpec.$,
        blink.mojom.FileSystemManager_RegisterBlob_ResponseParamsSpec.$,
        impl.registerBlob.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.FileSystemManager = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.FileSystemManager";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.FileSystemManagerRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.FileSystemManagerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the FileSystemManager
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.FileSystemManagerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.FileSystemManagerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FileSystemManagerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.open =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FileSystemManager_Open_ParamsSpec.$,
        blink.mojom.FileSystemManager_Open_ResponseParamsSpec.$,
        this.open.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.resolveURL =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.FileSystemManager_ResolveURL_ParamsSpec.$,
        blink.mojom.FileSystemManager_ResolveURL_ResponseParamsSpec.$,
        this.resolveURL.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.move =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.mojom.FileSystemManager_Move_ParamsSpec.$,
        blink.mojom.FileSystemManager_Move_ResponseParamsSpec.$,
        this.move.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.copy =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        blink.mojom.FileSystemManager_Copy_ParamsSpec.$,
        blink.mojom.FileSystemManager_Copy_ResponseParamsSpec.$,
        this.copy.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.remove =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        blink.mojom.FileSystemManager_Remove_ParamsSpec.$,
        blink.mojom.FileSystemManager_Remove_ResponseParamsSpec.$,
        this.remove.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.readMetadata =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        blink.mojom.FileSystemManager_ReadMetadata_ParamsSpec.$,
        blink.mojom.FileSystemManager_ReadMetadata_ResponseParamsSpec.$,
        this.readMetadata.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.create =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        blink.mojom.FileSystemManager_Create_ParamsSpec.$,
        blink.mojom.FileSystemManager_Create_ResponseParamsSpec.$,
        this.create.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.exists =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        blink.mojom.FileSystemManager_Exists_ParamsSpec.$,
        blink.mojom.FileSystemManager_Exists_ResponseParamsSpec.$,
        this.exists.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.readDirectory =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        blink.mojom.FileSystemManager_ReadDirectory_ParamsSpec.$,
        null,
        this.readDirectory.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.readDirectorySync =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        blink.mojom.FileSystemManager_ReadDirectorySync_ParamsSpec.$,
        blink.mojom.FileSystemManager_ReadDirectorySync_ResponseParamsSpec.$,
        this.readDirectorySync.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.write =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        blink.mojom.FileSystemManager_Write_ParamsSpec.$,
        null,
        this.write.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.writeSync =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        11,
        blink.mojom.FileSystemManager_WriteSync_ParamsSpec.$,
        blink.mojom.FileSystemManager_WriteSync_ResponseParamsSpec.$,
        this.writeSync.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.truncate =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        12,
        blink.mojom.FileSystemManager_Truncate_ParamsSpec.$,
        blink.mojom.FileSystemManager_Truncate_ResponseParamsSpec.$,
        this.truncate.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.truncateSync =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        13,
        blink.mojom.FileSystemManager_TruncateSync_ParamsSpec.$,
        blink.mojom.FileSystemManager_TruncateSync_ResponseParamsSpec.$,
        this.truncateSync.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createSnapshotFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        14,
        blink.mojom.FileSystemManager_CreateSnapshotFile_ParamsSpec.$,
        blink.mojom.FileSystemManager_CreateSnapshotFile_ResponseParamsSpec.$,
        this.createSnapshotFile.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getPlatformPath =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        15,
        blink.mojom.FileSystemManager_GetPlatformPath_ParamsSpec.$,
        blink.mojom.FileSystemManager_GetPlatformPath_ResponseParamsSpec.$,
        this.getPlatformPath.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.registerBlob =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        16,
        blink.mojom.FileSystemManager_RegisterBlob_ParamsSpec.$,
        blink.mojom.FileSystemManager_RegisterBlob_ResponseParamsSpec.$,
        this.registerBlob.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemInfoSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemCancellableOperation_Cancel_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemCancellableOperation_Cancel_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemOperationListener_ResultsRetrieved_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemOperationListener_DidWrite_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemOperationListener_ErrorOccurred_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.ReceivedSnapshotListener_DidReceiveSnapshotFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Open_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Open_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_ResolveURL_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_ResolveURL_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Move_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Move_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Copy_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Copy_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Remove_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Remove_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_ReadMetadata_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_ReadMetadata_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Create_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Create_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Exists_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Exists_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_ReadDirectory_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_ReadDirectorySync_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_ReadDirectorySync_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Write_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_WriteSync_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_WriteSync_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Truncate_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_Truncate_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_TruncateSync_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_TruncateSync_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_CreateSnapshotFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_CreateSnapshotFile_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_GetPlatformPath_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_GetPlatformPath_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_RegisterBlob_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemManager_RegisterBlob_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.FileSystemInfoSpec.$,
    'FileSystemInfo',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'rootUrl', 8,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'mountType', 16,
        0,
        blink.mojom.FileSystemTypeSpec.$,
        blink.mojom.FileSystemType.kTemporary,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
blink.mojom.FileSystemInfo = class {
  constructor() {
    /** @export { !string } */
    this.name;
    /** @export { !url.mojom.Url } */
    this.rootUrl;
    /** @export { !blink.mojom.FileSystemType } */
    this.mountType;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemCancellableOperation_Cancel_ParamsSpec.$,
    'FileSystemCancellableOperation_Cancel_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.mojom.FileSystemCancellableOperation_Cancel_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemCancellableOperation_Cancel_ResponseParamsSpec.$,
    'FileSystemCancellableOperation_Cancel_ResponseParams',
    [
      mojo.internal.StructField(
        'errorCode', 0,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemCancellableOperation_Cancel_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemOperationListener_ResultsRetrieved_ParamsSpec.$,
    'FileSystemOperationListener_ResultsRetrieved_Params',
    [
      mojo.internal.StructField(
        'entries', 0,
        0,
        mojo.internal.Array(filesystem.mojom.DirectoryEntrySpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'hasMore', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemOperationListener_ResultsRetrieved_Params = class {
  constructor() {
    /** @export { !Array<!filesystem.mojom.DirectoryEntry> } */
    this.entries;
    /** @export { !boolean } */
    this.hasMore;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemOperationListener_DidWrite_ParamsSpec.$,
    'FileSystemOperationListener_DidWrite_Params',
    [
      mojo.internal.StructField(
        'byteCount', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
      mojo.internal.StructField(
        'complete', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemOperationListener_DidWrite_Params = class {
  constructor() {
    /** @export { !bigint } */
    this.byteCount;
    /** @export { !boolean } */
    this.complete;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemOperationListener_ErrorOccurred_ParamsSpec.$,
    'FileSystemOperationListener_ErrorOccurred_Params',
    [
      mojo.internal.StructField(
        'errorCode', 0,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemOperationListener_ErrorOccurred_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.ReceivedSnapshotListener_DidReceiveSnapshotFile_ParamsSpec.$,
    'ReceivedSnapshotListener_DidReceiveSnapshotFile_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.mojom.ReceivedSnapshotListener_DidReceiveSnapshotFile_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Open_ParamsSpec.$,
    'FileSystemManager_Open_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url.mojom.OriginSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fileSystemType', 8,
        0,
        blink.mojom.FileSystemTypeSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemManager_Open_Params = class {
  constructor() {
    /** @export { !url.mojom.Origin } */
    this.origin;
    /** @export { !blink.mojom.FileSystemType } */
    this.fileSystemType;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Open_ResponseParamsSpec.$,
    'FileSystemManager_Open_ResponseParams',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'rootUrl', 8,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'errorCode', 16,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
blink.mojom.FileSystemManager_Open_ResponseParams = class {
  constructor() {
    /** @export { !string } */
    this.name;
    /** @export { !url.mojom.Url } */
    this.rootUrl;
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_ResolveURL_ParamsSpec.$,
    'FileSystemManager_ResolveURL_Params',
    [
      mojo.internal.StructField(
        'filesystemUrl', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_ResolveURL_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.filesystemUrl;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_ResolveURL_ResponseParamsSpec.$,
    'FileSystemManager_ResolveURL_ResponseParams',
    [
      mojo.internal.StructField(
        'info', 0,
        0,
        blink.mojom.FileSystemInfoSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'filePath', 8,
        0,
        mojoBase.mojom.FilePathSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'isDirectory', 16,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'errorCode', 20,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
blink.mojom.FileSystemManager_ResolveURL_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.FileSystemInfo } */
    this.info;
    /** @export { !mojoBase.mojom.FilePath } */
    this.filePath;
    /** @export { !boolean } */
    this.isDirectory;
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Move_ParamsSpec.$,
    'FileSystemManager_Move_Params',
    [
      mojo.internal.StructField(
        'srcPath', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'destPath', 8,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemManager_Move_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.srcPath;
    /** @export { !url.mojom.Url } */
    this.destPath;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Move_ResponseParamsSpec.$,
    'FileSystemManager_Move_ResponseParams',
    [
      mojo.internal.StructField(
        'errorCode', 0,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_Move_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Copy_ParamsSpec.$,
    'FileSystemManager_Copy_Params',
    [
      mojo.internal.StructField(
        'srcPath', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'destPath', 8,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemManager_Copy_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.srcPath;
    /** @export { !url.mojom.Url } */
    this.destPath;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Copy_ResponseParamsSpec.$,
    'FileSystemManager_Copy_ResponseParams',
    [
      mojo.internal.StructField(
        'errorCode', 0,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_Copy_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Remove_ParamsSpec.$,
    'FileSystemManager_Remove_Params',
    [
      mojo.internal.StructField(
        'path', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'recursive', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemManager_Remove_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.path;
    /** @export { !boolean } */
    this.recursive;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Remove_ResponseParamsSpec.$,
    'FileSystemManager_Remove_ResponseParams',
    [
      mojo.internal.StructField(
        'errorCode', 0,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_Remove_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_ReadMetadata_ParamsSpec.$,
    'FileSystemManager_ReadMetadata_Params',
    [
      mojo.internal.StructField(
        'path', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_ReadMetadata_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.path;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_ReadMetadata_ResponseParamsSpec.$,
    'FileSystemManager_ReadMetadata_ResponseParams',
    [
      mojo.internal.StructField(
        'fileInfo', 0,
        0,
        mojoBase.mojom.FileInfoSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'errorCode', 8,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemManager_ReadMetadata_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.FileInfo } */
    this.fileInfo;
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Create_ParamsSpec.$,
    'FileSystemManager_Create_Params',
    [
      mojo.internal.StructField(
        'path', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'exclusive', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'isDirectory', 8,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'recursive', 8,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemManager_Create_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.path;
    /** @export { !boolean } */
    this.exclusive;
    /** @export { !boolean } */
    this.isDirectory;
    /** @export { !boolean } */
    this.recursive;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Create_ResponseParamsSpec.$,
    'FileSystemManager_Create_ResponseParams',
    [
      mojo.internal.StructField(
        'errorCode', 0,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_Create_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Exists_ParamsSpec.$,
    'FileSystemManager_Exists_Params',
    [
      mojo.internal.StructField(
        'path', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'isDirectory', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemManager_Exists_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.path;
    /** @export { !boolean } */
    this.isDirectory;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Exists_ResponseParamsSpec.$,
    'FileSystemManager_Exists_ResponseParams',
    [
      mojo.internal.StructField(
        'errorCode', 0,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_Exists_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_ReadDirectory_ParamsSpec.$,
    'FileSystemManager_ReadDirectory_Params',
    [
      mojo.internal.StructField(
        'path', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'listener', 8,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.FileSystemOperationListenerRemote),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemManager_ReadDirectory_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.path;
    /** @export { !blink.mojom.FileSystemOperationListenerRemote } */
    this.listener;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_ReadDirectorySync_ParamsSpec.$,
    'FileSystemManager_ReadDirectorySync_Params',
    [
      mojo.internal.StructField(
        'path', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_ReadDirectorySync_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.path;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_ReadDirectorySync_ResponseParamsSpec.$,
    'FileSystemManager_ReadDirectorySync_ResponseParams',
    [
      mojo.internal.StructField(
        'entries', 0,
        0,
        mojo.internal.Array(filesystem.mojom.DirectoryEntrySpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'errorCode', 8,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemManager_ReadDirectorySync_ResponseParams = class {
  constructor() {
    /** @export { !Array<!filesystem.mojom.DirectoryEntry> } */
    this.entries;
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Write_ParamsSpec.$,
    'FileSystemManager_Write_Params',
    [
      mojo.internal.StructField(
        'filePath', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'blobUuid', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'position', 16,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
      mojo.internal.StructField(
        'opReceiver', 24,
        0,
        mojo.internal.InterfaceRequest(blink.mojom.FileSystemCancellableOperationPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'listener', 28,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.FileSystemOperationListenerRemote),
        null,
        false /* nullable */),
    ],
    [[0, 48],]);





/** @record */
blink.mojom.FileSystemManager_Write_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.filePath;
    /** @export { !string } */
    this.blobUuid;
    /** @export { !bigint } */
    this.position;
    /** @export { !blink.mojom.FileSystemCancellableOperationPendingReceiver } */
    this.opReceiver;
    /** @export { !blink.mojom.FileSystemOperationListenerRemote } */
    this.listener;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_WriteSync_ParamsSpec.$,
    'FileSystemManager_WriteSync_Params',
    [
      mojo.internal.StructField(
        'filePath', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'blobUuid', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'position', 16,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
blink.mojom.FileSystemManager_WriteSync_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.filePath;
    /** @export { !string } */
    this.blobUuid;
    /** @export { !bigint } */
    this.position;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_WriteSync_ResponseParamsSpec.$,
    'FileSystemManager_WriteSync_ResponseParams',
    [
      mojo.internal.StructField(
        'byteCount', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
      mojo.internal.StructField(
        'errorCode', 8,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemManager_WriteSync_ResponseParams = class {
  constructor() {
    /** @export { !bigint } */
    this.byteCount;
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Truncate_ParamsSpec.$,
    'FileSystemManager_Truncate_Params',
    [
      mojo.internal.StructField(
        'filePath', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'length', 8,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
      mojo.internal.StructField(
        'opReceiver', 16,
        0,
        mojo.internal.InterfaceRequest(blink.mojom.FileSystemCancellableOperationPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
blink.mojom.FileSystemManager_Truncate_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.filePath;
    /** @export { !bigint } */
    this.length;
    /** @export { !blink.mojom.FileSystemCancellableOperationPendingReceiver } */
    this.opReceiver;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_Truncate_ResponseParamsSpec.$,
    'FileSystemManager_Truncate_ResponseParams',
    [
      mojo.internal.StructField(
        'errorCode', 0,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_Truncate_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_TruncateSync_ParamsSpec.$,
    'FileSystemManager_TruncateSync_Params',
    [
      mojo.internal.StructField(
        'filePath', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'length', 8,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemManager_TruncateSync_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.filePath;
    /** @export { !bigint } */
    this.length;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_TruncateSync_ResponseParamsSpec.$,
    'FileSystemManager_TruncateSync_ResponseParams',
    [
      mojo.internal.StructField(
        'errorCode', 0,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_TruncateSync_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_CreateSnapshotFile_ParamsSpec.$,
    'FileSystemManager_CreateSnapshotFile_Params',
    [
      mojo.internal.StructField(
        'filePath', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_CreateSnapshotFile_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.filePath;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_CreateSnapshotFile_ResponseParamsSpec.$,
    'FileSystemManager_CreateSnapshotFile_ResponseParams',
    [
      mojo.internal.StructField(
        'fileInfo', 0,
        0,
        mojoBase.mojom.FileInfoSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'platformPath', 8,
        0,
        mojoBase.mojom.FilePathSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'errorCode', 16,
        0,
        mojoBase.mojom.FileErrorSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'snapshotListener', 20,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.ReceivedSnapshotListenerRemote),
        null,
        true /* nullable */),
    ],
    [[0, 40],]);





/** @record */
blink.mojom.FileSystemManager_CreateSnapshotFile_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.FileInfo } */
    this.fileInfo;
    /** @export { !mojoBase.mojom.FilePath } */
    this.platformPath;
    /** @export { !mojoBase.mojom.FileError } */
    this.errorCode;
    /** @export { (blink.mojom.ReceivedSnapshotListenerRemote|undefined) } */
    this.snapshotListener;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_GetPlatformPath_ParamsSpec.$,
    'FileSystemManager_GetPlatformPath_Params',
    [
      mojo.internal.StructField(
        'filePath', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_GetPlatformPath_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.filePath;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_GetPlatformPath_ResponseParamsSpec.$,
    'FileSystemManager_GetPlatformPath_ResponseParams',
    [
      mojo.internal.StructField(
        'platformPath', 0,
        0,
        mojoBase.mojom.FilePathSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_GetPlatformPath_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.FilePath } */
    this.platformPath;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_RegisterBlob_ParamsSpec.$,
    'FileSystemManager_RegisterBlob_Params',
    [
      mojo.internal.StructField(
        'contentType', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'url', 8,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'length', 16,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */),
      mojo.internal.StructField(
        'expectedModificationTime', 24,
        0,
        mojoBase.mojom.TimeSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 40],]);





/** @record */
blink.mojom.FileSystemManager_RegisterBlob_Params = class {
  constructor() {
    /** @export { !string } */
    this.contentType;
    /** @export { !url.mojom.Url } */
    this.url;
    /** @export { !bigint } */
    this.length;
    /** @export { (mojoBase.mojom.Time|undefined) } */
    this.expectedModificationTime;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemManager_RegisterBlob_ResponseParamsSpec.$,
    'FileSystemManager_RegisterBlob_ResponseParams',
    [
      mojo.internal.StructField(
        'blob', 0,
        0,
        blink.mojom.SerializedBlobSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemManager_RegisterBlob_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.SerializedBlob } */
    this.blob;
  }
};


