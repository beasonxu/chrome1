// third_party/blink/public/mojom/portal/portal.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/portal/portal.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/portal/portal.mojom-params-data.h"
#include "third_party/blink/public/mojom/portal/portal.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/portal/portal.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/portal/portal.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PORTAL_PORTAL_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PORTAL_PORTAL_MOJOM_BLINK_JUMBO_H_
#endif



namespace blink {
namespace mojom {
namespace blink {
const char Portal::Name_[] = "blink.mojom.Portal";

Portal::IPCStableHashFunction Portal::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kPortal_Navigate_Name: {
      return &Portal::Navigate_Sym::IPCStableHash;
    }
    case internal::kPortal_Activate_Name: {
      return &Portal::Activate_Sym::IPCStableHash;
    }
    case internal::kPortal_PostMessageToGuest_Name: {
      return &Portal::PostMessageToGuest_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* Portal::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kPortal_Navigate_Name:
            return "Receive blink::mojom::Portal::Navigate";
      case internal::kPortal_Activate_Name:
            return "Receive blink::mojom::Portal::Activate";
      case internal::kPortal_PostMessageToGuest_Name:
            return "Receive blink::mojom::Portal::PostMessageToGuest";
    }
  } else {
    switch (message.name()) {
      case internal::kPortal_Navigate_Name:
            return "Receive reply blink::mojom::Portal::Navigate";
      case internal::kPortal_Activate_Name:
            return "Receive reply blink::mojom::Portal::Activate";
      case internal::kPortal_PostMessageToGuest_Name:
            return "Receive reply blink::mojom::Portal::PostMessageToGuest";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t Portal::Navigate_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::Portal::Navigate");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Portal::Activate_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::Portal::Activate");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Portal::PostMessageToGuest_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::Portal::PostMessageToGuest");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class Portal_Navigate_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Portal_Navigate_ForwardToCallback(
      Portal::NavigateCallback callback
      ) : callback_(std::move(callback)) {
  }

  Portal_Navigate_ForwardToCallback(const Portal_Navigate_ForwardToCallback&) = delete;
  Portal_Navigate_ForwardToCallback& operator=(const Portal_Navigate_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  Portal::NavigateCallback callback_;
};

class Portal_Activate_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Portal_Activate_ForwardToCallback(
      Portal::ActivateCallback callback
      ) : callback_(std::move(callback)) {
  }

  Portal_Activate_ForwardToCallback(const Portal_Activate_ForwardToCallback&) = delete;
  Portal_Activate_ForwardToCallback& operator=(const Portal_Activate_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  Portal::ActivateCallback callback_;
};

PortalProxy::PortalProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PortalProxy::Navigate(
    const ::blink::KURL& in_url, ::blink::mojom::blink::ReferrerPtr in_referrer, NavigateCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::Portal::Navigate", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::blink::KURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("referrer"), in_referrer,
                        "<value of type ::blink::mojom::blink::ReferrerPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPortal_Navigate_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::Portal_Navigate_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in Portal.Navigate request");
  mojo::internal::MessageFragment<
      typename decltype(params->referrer)::BaseType> referrer_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::ReferrerDataView>(
      in_referrer, referrer_fragment);
  params->referrer.Set(
      referrer_fragment.is_null() ? nullptr : referrer_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->referrer.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null referrer in Portal.Navigate request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Portal::Name_);
  message.set_method_name("Navigate");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new Portal_Navigate_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void PortalProxy::Activate(
    ::blink::BlinkTransferableMessage in_data, ::base::TimeTicks in_activation_time, uint64_t in_trace_id, ActivateCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::Portal::Activate", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), in_data,
                        "<value of type ::blink::BlinkTransferableMessage>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("activation_time"), in_activation_time,
                        "<value of type ::base::TimeTicks>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("trace_id"), in_trace_id,
                        "<value of type uint64_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPortal_Activate_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::Portal_Activate_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->data)::BaseType> data_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::TransferableMessageDataView>(
      in_data, data_fragment);
  params->data.Set(
      data_fragment.is_null() ? nullptr : data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in Portal.Activate request");
  mojo::internal::MessageFragment<
      typename decltype(params->activation_time)::BaseType> activation_time_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
      in_activation_time, activation_time_fragment);
  params->activation_time.Set(
      activation_time_fragment.is_null() ? nullptr : activation_time_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->activation_time.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null activation_time in Portal.Activate request");
  params->trace_id = in_trace_id;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Portal::Name_);
  message.set_method_name("Activate");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new Portal_Activate_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void PortalProxy::PostMessageToGuest(
    ::blink::BlinkTransferableMessage in_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::Portal::PostMessageToGuest", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("message"), in_message,
                        "<value of type ::blink::BlinkTransferableMessage>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPortal_PostMessageToGuest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::Portal_PostMessageToGuest_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->message)::BaseType> message_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::TransferableMessageDataView>(
      in_message, message_fragment);
  params->message.Set(
      message_fragment.is_null() ? nullptr : message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null message in Portal.PostMessageToGuest request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Portal::Name_);
  message.set_method_name("PostMessageToGuest");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class Portal_Navigate_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static Portal::NavigateCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<Portal_Navigate_ProxyToResponder> proxy(
        new Portal_Navigate_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&Portal_Navigate_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~Portal_Navigate_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  Portal_Navigate_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "Portal::NavigateCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool Portal_Navigate_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::Portal_Navigate_ResponseParams_Data* params =
      reinterpret_cast<
          internal::Portal_Navigate_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  Portal_Navigate_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        Portal::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void Portal_Navigate_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply blink::mojom::Portal::Navigate");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPortal_Navigate_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::Portal_Navigate_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Portal::Name_);
  message.set_method_name("Navigate");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class Portal_Activate_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static Portal::ActivateCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<Portal_Activate_ProxyToResponder> proxy(
        new Portal_Activate_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&Portal_Activate_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~Portal_Activate_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  Portal_Activate_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "Portal::ActivateCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      PortalActivateResult in_result);
};

bool Portal_Activate_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::Portal_Activate_ResponseParams_Data* params =
      reinterpret_cast<
          internal::Portal_Activate_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  PortalActivateResult p_result{};
  Portal_Activate_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        Portal::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void Portal_Activate_ProxyToResponder::Run(
    PortalActivateResult in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::Portal::Activate", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type PortalActivateResult>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPortal_Activate_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::Portal_Activate_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::PortalActivateResult>(
      in_result, &params->result);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Portal::Name_);
  message.set_method_name("Activate");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PortalStubDispatch::Accept(
    Portal* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPortal_Navigate_Name: {
      break;
    }
    case internal::kPortal_Activate_Name: {
      break;
    }
    case internal::kPortal_PostMessageToGuest_Name: {

      DCHECK(message->is_serialized());
      internal::Portal_PostMessageToGuest_Params_Data* params =
          reinterpret_cast<internal::Portal_PostMessageToGuest_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::BlinkTransferableMessage p_message{};
      Portal_PostMessageToGuest_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadMessage(&p_message))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Portal::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PostMessageToGuest(
std::move(p_message));
      return true;
    }
  }
  return false;
}

// static
bool PortalStubDispatch::AcceptWithResponder(
    Portal* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kPortal_Navigate_Name: {

      internal::Portal_Navigate_Params_Data* params =
          reinterpret_cast<
              internal::Portal_Navigate_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::KURL p_url{};
      ::blink::mojom::blink::ReferrerPtr p_referrer{};
      Portal_Navigate_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (success && !input_data_view.ReadReferrer(&p_referrer))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Portal::Name_, 0, false);
        return false;
      }
      Portal::NavigateCallback callback =
          Portal_Navigate_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Navigate(
std::move(p_url), 
std::move(p_referrer), std::move(callback));
      return true;
    }
    case internal::kPortal_Activate_Name: {

      internal::Portal_Activate_Params_Data* params =
          reinterpret_cast<
              internal::Portal_Activate_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::BlinkTransferableMessage p_data{};
      ::base::TimeTicks p_activation_time{};
      uint64_t p_trace_id{};
      Portal_Activate_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadData(&p_data))
        success = false;
      if (success && !input_data_view.ReadActivationTime(&p_activation_time))
        success = false;
      if (success)
        p_trace_id = input_data_view.trace_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Portal::Name_, 1, false);
        return false;
      }
      Portal::ActivateCallback callback =
          Portal_Activate_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Activate(
std::move(p_data), 
std::move(p_activation_time), 
std::move(p_trace_id), std::move(callback));
      return true;
    }
    case internal::kPortal_PostMessageToGuest_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPortalValidationInfo[] = {
    {&internal::Portal_Navigate_Params_Data::Validate,
     &internal::Portal_Navigate_ResponseParams_Data::Validate},
    {&internal::Portal_Activate_Params_Data::Validate,
     &internal::Portal_Activate_ResponseParams_Data::Validate},
    {&internal::Portal_PostMessageToGuest_Params_Data::Validate,
     nullptr /* no response */},
};

bool PortalRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::Portal::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPortalValidationInfo);
}

bool PortalResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::Portal::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kPortalValidationInfo);
}
const char PortalClient::Name_[] = "blink.mojom.PortalClient";

PortalClient::IPCStableHashFunction PortalClient::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kPortalClient_ForwardMessageFromGuest_Name: {
      return &PortalClient::ForwardMessageFromGuest_Sym::IPCStableHash;
    }
    case internal::kPortalClient_DispatchLoadEvent_Name: {
      return &PortalClient::DispatchLoadEvent_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* PortalClient::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kPortalClient_ForwardMessageFromGuest_Name:
            return "Receive blink::mojom::PortalClient::ForwardMessageFromGuest";
      case internal::kPortalClient_DispatchLoadEvent_Name:
            return "Receive blink::mojom::PortalClient::DispatchLoadEvent";
    }
  } else {
    switch (message.name()) {
      case internal::kPortalClient_ForwardMessageFromGuest_Name:
            return "Receive reply blink::mojom::PortalClient::ForwardMessageFromGuest";
      case internal::kPortalClient_DispatchLoadEvent_Name:
            return "Receive reply blink::mojom::PortalClient::DispatchLoadEvent";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t PortalClient::ForwardMessageFromGuest_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PortalClient::ForwardMessageFromGuest");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PortalClient::DispatchLoadEvent_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PortalClient::DispatchLoadEvent");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

PortalClientProxy::PortalClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PortalClientProxy::ForwardMessageFromGuest(
    ::blink::BlinkTransferableMessage in_message, const ::scoped_refptr<const ::blink::SecurityOrigin>& in_source_origin) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PortalClient::ForwardMessageFromGuest", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("message"), in_message,
                        "<value of type ::blink::BlinkTransferableMessage>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("source_origin"), in_source_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPortalClient_ForwardMessageFromGuest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PortalClient_ForwardMessageFromGuest_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->message)::BaseType> message_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::TransferableMessageDataView>(
      in_message, message_fragment);
  params->message.Set(
      message_fragment.is_null() ? nullptr : message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null message in PortalClient.ForwardMessageFromGuest request");
  mojo::internal::MessageFragment<
      typename decltype(params->source_origin)::BaseType> source_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_source_origin, source_origin_fragment);
  params->source_origin.Set(
      source_origin_fragment.is_null() ? nullptr : source_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->source_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null source_origin in PortalClient.ForwardMessageFromGuest request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PortalClient::Name_);
  message.set_method_name("ForwardMessageFromGuest");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PortalClientProxy::DispatchLoadEvent(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::PortalClient::DispatchLoadEvent");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPortalClient_DispatchLoadEvent_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PortalClient_DispatchLoadEvent_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PortalClient::Name_);
  message.set_method_name("DispatchLoadEvent");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool PortalClientStubDispatch::Accept(
    PortalClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPortalClient_ForwardMessageFromGuest_Name: {

      DCHECK(message->is_serialized());
      internal::PortalClient_ForwardMessageFromGuest_Params_Data* params =
          reinterpret_cast<internal::PortalClient_ForwardMessageFromGuest_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::BlinkTransferableMessage p_message{};
      ::scoped_refptr<const ::blink::SecurityOrigin> p_source_origin{};
      PortalClient_ForwardMessageFromGuest_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadMessage(&p_message))
        success = false;
      if (success && !input_data_view.ReadSourceOrigin(&p_source_origin))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PortalClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ForwardMessageFromGuest(
std::move(p_message), 
std::move(p_source_origin));
      return true;
    }
    case internal::kPortalClient_DispatchLoadEvent_Name: {

      DCHECK(message->is_serialized());
      internal::PortalClient_DispatchLoadEvent_Params_Data* params =
          reinterpret_cast<internal::PortalClient_DispatchLoadEvent_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      PortalClient_DispatchLoadEvent_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PortalClient::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DispatchLoadEvent();
      return true;
    }
  }
  return false;
}

// static
bool PortalClientStubDispatch::AcceptWithResponder(
    PortalClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kPortalClient_ForwardMessageFromGuest_Name: {
      break;
    }
    case internal::kPortalClient_DispatchLoadEvent_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPortalClientValidationInfo[] = {
    {&internal::PortalClient_ForwardMessageFromGuest_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PortalClient_DispatchLoadEvent_Params_Data::Validate,
     nullptr /* no response */},
};

bool PortalClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::PortalClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPortalClientValidationInfo);
}

const char PortalHost::Name_[] = "blink.mojom.PortalHost";

PortalHost::IPCStableHashFunction PortalHost::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kPortalHost_PostMessageToHost_Name: {
      return &PortalHost::PostMessageToHost_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* PortalHost::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kPortalHost_PostMessageToHost_Name:
            return "Receive blink::mojom::PortalHost::PostMessageToHost";
    }
  } else {
    switch (message.name()) {
      case internal::kPortalHost_PostMessageToHost_Name:
            return "Receive reply blink::mojom::PortalHost::PostMessageToHost";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t PortalHost::PostMessageToHost_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PortalHost::PostMessageToHost");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

PortalHostProxy::PortalHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PortalHostProxy::PostMessageToHost(
    ::blink::BlinkTransferableMessage in_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PortalHost::PostMessageToHost", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("message"), in_message,
                        "<value of type ::blink::BlinkTransferableMessage>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPortalHost_PostMessageToHost_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PortalHost_PostMessageToHost_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->message)::BaseType> message_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::TransferableMessageDataView>(
      in_message, message_fragment);
  params->message.Set(
      message_fragment.is_null() ? nullptr : message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null message in PortalHost.PostMessageToHost request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PortalHost::Name_);
  message.set_method_name("PostMessageToHost");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool PortalHostStubDispatch::Accept(
    PortalHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPortalHost_PostMessageToHost_Name: {

      DCHECK(message->is_serialized());
      internal::PortalHost_PostMessageToHost_Params_Data* params =
          reinterpret_cast<internal::PortalHost_PostMessageToHost_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::BlinkTransferableMessage p_message{};
      PortalHost_PostMessageToHost_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadMessage(&p_message))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PortalHost::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PostMessageToHost(
std::move(p_message));
      return true;
    }
  }
  return false;
}

// static
bool PortalHostStubDispatch::AcceptWithResponder(
    PortalHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kPortalHost_PostMessageToHost_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPortalHostValidationInfo[] = {
    {&internal::PortalHost_PostMessageToHost_Params_Data::Validate,
     nullptr /* no response */},
};

bool PortalHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::PortalHost::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPortalHostValidationInfo);
}



}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {


void PortalInterceptorForTesting::Navigate(const ::blink::KURL& url, ::blink::mojom::blink::ReferrerPtr referrer, NavigateCallback callback) {
  GetForwardingInterface()->Navigate(std::move(url), std::move(referrer), std::move(callback));
}
void PortalInterceptorForTesting::Activate(::blink::BlinkTransferableMessage data, ::base::TimeTicks activation_time, uint64_t trace_id, ActivateCallback callback) {
  GetForwardingInterface()->Activate(std::move(data), std::move(activation_time), std::move(trace_id), std::move(callback));
}
void PortalInterceptorForTesting::PostMessageToGuest(::blink::BlinkTransferableMessage message) {
  GetForwardingInterface()->PostMessageToGuest(std::move(message));
}
PortalAsyncWaiter::PortalAsyncWaiter(
    Portal* proxy) : proxy_(proxy) {}

PortalAsyncWaiter::~PortalAsyncWaiter() = default;

void PortalAsyncWaiter::Navigate(
    const ::blink::KURL& url, ::blink::mojom::blink::ReferrerPtr referrer) {
  base::RunLoop loop;
  proxy_->Navigate(std::move(url),std::move(referrer),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void PortalAsyncWaiter::Activate(
    ::blink::BlinkTransferableMessage data, ::base::TimeTicks activation_time, uint64_t trace_id, PortalActivateResult* out_result) {
  base::RunLoop loop;
  proxy_->Activate(std::move(data),std::move(activation_time),std::move(trace_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             PortalActivateResult* out_result
,
             PortalActivateResult result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}



void PortalClientInterceptorForTesting::ForwardMessageFromGuest(::blink::BlinkTransferableMessage message, const ::scoped_refptr<const ::blink::SecurityOrigin>& source_origin) {
  GetForwardingInterface()->ForwardMessageFromGuest(std::move(message), std::move(source_origin));
}
void PortalClientInterceptorForTesting::DispatchLoadEvent() {
  GetForwardingInterface()->DispatchLoadEvent();
}
PortalClientAsyncWaiter::PortalClientAsyncWaiter(
    PortalClient* proxy) : proxy_(proxy) {}

PortalClientAsyncWaiter::~PortalClientAsyncWaiter() = default;




void PortalHostInterceptorForTesting::PostMessageToHost(::blink::BlinkTransferableMessage message) {
  GetForwardingInterface()->PostMessageToHost(std::move(message));
}
PortalHostAsyncWaiter::PortalHostAsyncWaiter(
    PortalHost* proxy) : proxy_(proxy) {}

PortalHostAsyncWaiter::~PortalHostAsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif