// third_party/blink/public/mojom/portal/portal.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PORTAL_PORTAL_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PORTAL_PORTAL_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Portal_Navigate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::blink::mojom::internal::Referrer_Data> referrer;

 private:
  friend class mojo::internal::MessageFragment<Portal_Navigate_Params_Data>;

  Portal_Navigate_Params_Data();
  ~Portal_Navigate_Params_Data() = delete;
};
static_assert(sizeof(Portal_Navigate_Params_Data) == 24,
              "Bad sizeof(Portal_Navigate_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Portal_Navigate_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Portal_Navigate_ResponseParams_Data>;

  Portal_Navigate_ResponseParams_Data();
  ~Portal_Navigate_ResponseParams_Data() = delete;
};
static_assert(sizeof(Portal_Navigate_ResponseParams_Data) == 8,
              "Bad sizeof(Portal_Navigate_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Portal_Activate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> data;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> activation_time;
  uint64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<Portal_Activate_Params_Data>;

  Portal_Activate_Params_Data();
  ~Portal_Activate_Params_Data() = delete;
};
static_assert(sizeof(Portal_Activate_Params_Data) == 32,
              "Bad sizeof(Portal_Activate_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Portal_Activate_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Portal_Activate_ResponseParams_Data>;

  Portal_Activate_ResponseParams_Data();
  ~Portal_Activate_ResponseParams_Data() = delete;
};
static_assert(sizeof(Portal_Activate_ResponseParams_Data) == 16,
              "Bad sizeof(Portal_Activate_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Portal_PostMessageToGuest_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> message;

 private:
  friend class mojo::internal::MessageFragment<Portal_PostMessageToGuest_Params_Data>;

  Portal_PostMessageToGuest_Params_Data();
  ~Portal_PostMessageToGuest_Params_Data() = delete;
};
static_assert(sizeof(Portal_PostMessageToGuest_Params_Data) == 16,
              "Bad sizeof(Portal_PostMessageToGuest_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PortalClient_ForwardMessageFromGuest_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> message;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> source_origin;

 private:
  friend class mojo::internal::MessageFragment<PortalClient_ForwardMessageFromGuest_Params_Data>;

  PortalClient_ForwardMessageFromGuest_Params_Data();
  ~PortalClient_ForwardMessageFromGuest_Params_Data() = delete;
};
static_assert(sizeof(PortalClient_ForwardMessageFromGuest_Params_Data) == 24,
              "Bad sizeof(PortalClient_ForwardMessageFromGuest_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PortalClient_DispatchLoadEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PortalClient_DispatchLoadEvent_Params_Data>;

  PortalClient_DispatchLoadEvent_Params_Data();
  ~PortalClient_DispatchLoadEvent_Params_Data() = delete;
};
static_assert(sizeof(PortalClient_DispatchLoadEvent_Params_Data) == 8,
              "Bad sizeof(PortalClient_DispatchLoadEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PortalHost_PostMessageToHost_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> message;

 private:
  friend class mojo::internal::MessageFragment<PortalHost_PostMessageToHost_Params_Data>;

  PortalHost_PostMessageToHost_Params_Data();
  ~PortalHost_PostMessageToHost_Params_Data() = delete;
};
static_assert(sizeof(PortalHost_PostMessageToHost_Params_Data) == 16,
              "Bad sizeof(PortalHost_PostMessageToHost_Params_Data)");

}  // namespace internal


class Portal_Navigate_ParamsDataView {
 public:
  Portal_Navigate_ParamsDataView() = default;

  Portal_Navigate_ParamsDataView(
      internal::Portal_Navigate_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetReferrerDataView(
      ::blink::mojom::ReferrerDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReferrer(UserType* output) {
    
    auto* pointer = data_->referrer.Get();
    return mojo::internal::Deserialize<::blink::mojom::ReferrerDataView>(
        pointer, output, message_);
  }
 private:
  internal::Portal_Navigate_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Portal_Navigate_ResponseParamsDataView {
 public:
  Portal_Navigate_ResponseParamsDataView() = default;

  Portal_Navigate_ResponseParamsDataView(
      internal::Portal_Navigate_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Portal_Navigate_ResponseParams_Data* data_ = nullptr;
};



class Portal_Activate_ParamsDataView {
 public:
  Portal_Activate_ParamsDataView() = default;

  Portal_Activate_ParamsDataView(
      internal::Portal_Activate_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, message_);
  }
  inline void GetActivationTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadActivationTime(UserType* output) {
    
    auto* pointer = data_->activation_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  uint64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::Portal_Activate_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Portal_Activate_ResponseParamsDataView {
 public:
  Portal_Activate_ResponseParamsDataView() = default;

  Portal_Activate_ResponseParamsDataView(
      internal::Portal_Activate_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::blink::mojom::PortalActivateResult>(
        data_value, output);
  }
  PortalActivateResult result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PortalActivateResult>(data_->result));
  }
 private:
  internal::Portal_Activate_ResponseParams_Data* data_ = nullptr;
};



class Portal_PostMessageToGuest_ParamsDataView {
 public:
  Portal_PostMessageToGuest_ParamsDataView() = default;

  Portal_PostMessageToGuest_ParamsDataView(
      internal::Portal_PostMessageToGuest_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, message_);
  }
 private:
  internal::Portal_PostMessageToGuest_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PortalClient_ForwardMessageFromGuest_ParamsDataView {
 public:
  PortalClient_ForwardMessageFromGuest_ParamsDataView() = default;

  PortalClient_ForwardMessageFromGuest_ParamsDataView(
      internal::PortalClient_ForwardMessageFromGuest_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, message_);
  }
  inline void GetSourceOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceOrigin(UserType* output) {
    
    auto* pointer = data_->source_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
 private:
  internal::PortalClient_ForwardMessageFromGuest_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PortalClient_DispatchLoadEvent_ParamsDataView {
 public:
  PortalClient_DispatchLoadEvent_ParamsDataView() = default;

  PortalClient_DispatchLoadEvent_ParamsDataView(
      internal::PortalClient_DispatchLoadEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PortalClient_DispatchLoadEvent_Params_Data* data_ = nullptr;
};



class PortalHost_PostMessageToHost_ParamsDataView {
 public:
  PortalHost_PostMessageToHost_ParamsDataView() = default;

  PortalHost_PostMessageToHost_ParamsDataView(
      internal::PortalHost_PostMessageToHost_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, message_);
  }
 private:
  internal::PortalHost_PostMessageToHost_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void Portal_Navigate_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void Portal_Navigate_ParamsDataView::GetReferrerDataView(
    ::blink::mojom::ReferrerDataView* output) {
  auto pointer = data_->referrer.Get();
  *output = ::blink::mojom::ReferrerDataView(pointer, message_);
}




inline void Portal_Activate_ParamsDataView::GetDataDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->data.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, message_);
}
inline void Portal_Activate_ParamsDataView::GetActivationTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->activation_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}




inline void Portal_PostMessageToGuest_ParamsDataView::GetMessageDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, message_);
}


inline void PortalClient_ForwardMessageFromGuest_ParamsDataView::GetMessageDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, message_);
}
inline void PortalClient_ForwardMessageFromGuest_ParamsDataView::GetSourceOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->source_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}




inline void PortalHost_PostMessageToHost_ParamsDataView::GetMessageDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PORTAL_PORTAL_MOJOM_PARAMS_DATA_H_