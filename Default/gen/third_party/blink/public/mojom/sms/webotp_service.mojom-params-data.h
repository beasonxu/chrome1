// third_party/blink/public/mojom/sms/webotp_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SMS_WEBOTP_SERVICE_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SMS_WEBOTP_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebOTPService_Receive_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<WebOTPService_Receive_Params_Data>;

  WebOTPService_Receive_Params_Data();
  ~WebOTPService_Receive_Params_Data() = delete;
};
static_assert(sizeof(WebOTPService_Receive_Params_Data) == 8,
              "Bad sizeof(WebOTPService_Receive_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebOTPService_Receive_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> otp;

 private:
  friend class mojo::internal::MessageFragment<WebOTPService_Receive_ResponseParams_Data>;

  WebOTPService_Receive_ResponseParams_Data();
  ~WebOTPService_Receive_ResponseParams_Data() = delete;
};
static_assert(sizeof(WebOTPService_Receive_ResponseParams_Data) == 24,
              "Bad sizeof(WebOTPService_Receive_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) WebOTPService_Abort_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<WebOTPService_Abort_Params_Data>;

  WebOTPService_Abort_Params_Data();
  ~WebOTPService_Abort_Params_Data() = delete;
};
static_assert(sizeof(WebOTPService_Abort_Params_Data) == 8,
              "Bad sizeof(WebOTPService_Abort_Params_Data)");

}  // namespace internal


class WebOTPService_Receive_ParamsDataView {
 public:
  WebOTPService_Receive_ParamsDataView() = default;

  WebOTPService_Receive_ParamsDataView(
      internal::WebOTPService_Receive_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WebOTPService_Receive_Params_Data* data_ = nullptr;
};



class WebOTPService_Receive_ResponseParamsDataView {
 public:
  WebOTPService_Receive_ResponseParamsDataView() = default;

  WebOTPService_Receive_ResponseParamsDataView(
      internal::WebOTPService_Receive_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::SmsStatus>(
        data_value, output);
  }
  SmsStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::SmsStatus>(data_->status));
  }
  inline void GetOtpDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOtp(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `otp` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOtp` instead "
    "of `ReadOtp if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->otp.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebOTPService_Receive_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebOTPService_Abort_ParamsDataView {
 public:
  WebOTPService_Abort_ParamsDataView() = default;

  WebOTPService_Abort_ParamsDataView(
      internal::WebOTPService_Abort_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WebOTPService_Abort_Params_Data* data_ = nullptr;
};




inline void WebOTPService_Receive_ResponseParamsDataView::GetOtpDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->otp.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SMS_WEBOTP_SERVICE_MOJOM_PARAMS_DATA_H_