// third_party/blink/public/mojom/device/device.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/device/device.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/device/device.mojom-params-data.h"
#include "third_party/blink/public/mojom/device/device.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/device/device.mojom-import-headers.h"
#include "third_party/blink/public/mojom/device/device.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVICE_DEVICE_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVICE_DEVICE_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
DeviceAttributeResult::DeviceAttributeResult() : tag_(Tag::kErrorMessage) {
  data_.error_message = new std::string;
}

DeviceAttributeResult::~DeviceAttributeResult() {
  DestroyActive();
}


void DeviceAttributeResult::set_error_message(
    const std::string& error_message) {
  if (tag_ == Tag::kErrorMessage) {
    *(data_.error_message) = std::move(error_message);
  } else {
    DestroyActive();
    tag_ = Tag::kErrorMessage;
    data_.error_message = new std::string(
        std::move(error_message));
  }
}
void DeviceAttributeResult::set_attribute(
    const absl::optional<std::string>& attribute) {
  if (tag_ == Tag::kAttribute) {
    *(data_.attribute) = std::move(attribute);
  } else {
    DestroyActive();
    tag_ = Tag::kAttribute;
    data_.attribute = new absl::optional<std::string>(
        std::move(attribute));
  }
}

void DeviceAttributeResult::DestroyActive() {
  switch (tag_) {

    case Tag::kErrorMessage:

      delete data_.error_message;
      break;
    case Tag::kAttribute:

      delete data_.attribute;
      break;
  }
}

bool DeviceAttributeResult::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}
const char ManagedConfigurationObserver::Name_[] = "blink.mojom.ManagedConfigurationObserver";

ManagedConfigurationObserver::IPCStableHashFunction ManagedConfigurationObserver::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kManagedConfigurationObserver_OnConfigurationChanged_Name: {
      return &ManagedConfigurationObserver::OnConfigurationChanged_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ManagedConfigurationObserver::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kManagedConfigurationObserver_OnConfigurationChanged_Name:
            return "Receive blink::mojom::ManagedConfigurationObserver::OnConfigurationChanged";
    }
  } else {
    switch (message.name()) {
      case internal::kManagedConfigurationObserver_OnConfigurationChanged_Name:
            return "Receive reply blink::mojom::ManagedConfigurationObserver::OnConfigurationChanged";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ManagedConfigurationObserver::OnConfigurationChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::ManagedConfigurationObserver::OnConfigurationChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

ManagedConfigurationObserverProxy::ManagedConfigurationObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ManagedConfigurationObserverProxy::OnConfigurationChanged(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::ManagedConfigurationObserver::OnConfigurationChanged");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kManagedConfigurationObserver_OnConfigurationChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::ManagedConfigurationObserver_OnConfigurationChanged_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ManagedConfigurationObserver::Name_);
  message.set_method_name("OnConfigurationChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool ManagedConfigurationObserverStubDispatch::Accept(
    ManagedConfigurationObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kManagedConfigurationObserver_OnConfigurationChanged_Name: {

      DCHECK(message->is_serialized());
      internal::ManagedConfigurationObserver_OnConfigurationChanged_Params_Data* params =
          reinterpret_cast<internal::ManagedConfigurationObserver_OnConfigurationChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ManagedConfigurationObserver_OnConfigurationChanged_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ManagedConfigurationObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnConfigurationChanged();
      return true;
    }
  }
  return false;
}

// static
bool ManagedConfigurationObserverStubDispatch::AcceptWithResponder(
    ManagedConfigurationObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kManagedConfigurationObserver_OnConfigurationChanged_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kManagedConfigurationObserverValidationInfo[] = {
    {&internal::ManagedConfigurationObserver_OnConfigurationChanged_Params_Data::Validate,
     nullptr /* no response */},
};

bool ManagedConfigurationObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::ManagedConfigurationObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kManagedConfigurationObserverValidationInfo);
}

const char DeviceAPIService::Name_[] = "blink.mojom.DeviceAPIService";

DeviceAPIService::IPCStableHashFunction DeviceAPIService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kDeviceAPIService_GetDirectoryId_Name: {
      return &DeviceAPIService::GetDirectoryId_Sym::IPCStableHash;
    }
    case internal::kDeviceAPIService_GetHostname_Name: {
      return &DeviceAPIService::GetHostname_Sym::IPCStableHash;
    }
    case internal::kDeviceAPIService_GetSerialNumber_Name: {
      return &DeviceAPIService::GetSerialNumber_Sym::IPCStableHash;
    }
    case internal::kDeviceAPIService_GetAnnotatedAssetId_Name: {
      return &DeviceAPIService::GetAnnotatedAssetId_Sym::IPCStableHash;
    }
    case internal::kDeviceAPIService_GetAnnotatedLocation_Name: {
      return &DeviceAPIService::GetAnnotatedLocation_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* DeviceAPIService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kDeviceAPIService_GetDirectoryId_Name:
            return "Receive blink::mojom::DeviceAPIService::GetDirectoryId";
      case internal::kDeviceAPIService_GetHostname_Name:
            return "Receive blink::mojom::DeviceAPIService::GetHostname";
      case internal::kDeviceAPIService_GetSerialNumber_Name:
            return "Receive blink::mojom::DeviceAPIService::GetSerialNumber";
      case internal::kDeviceAPIService_GetAnnotatedAssetId_Name:
            return "Receive blink::mojom::DeviceAPIService::GetAnnotatedAssetId";
      case internal::kDeviceAPIService_GetAnnotatedLocation_Name:
            return "Receive blink::mojom::DeviceAPIService::GetAnnotatedLocation";
    }
  } else {
    switch (message.name()) {
      case internal::kDeviceAPIService_GetDirectoryId_Name:
            return "Receive reply blink::mojom::DeviceAPIService::GetDirectoryId";
      case internal::kDeviceAPIService_GetHostname_Name:
            return "Receive reply blink::mojom::DeviceAPIService::GetHostname";
      case internal::kDeviceAPIService_GetSerialNumber_Name:
            return "Receive reply blink::mojom::DeviceAPIService::GetSerialNumber";
      case internal::kDeviceAPIService_GetAnnotatedAssetId_Name:
            return "Receive reply blink::mojom::DeviceAPIService::GetAnnotatedAssetId";
      case internal::kDeviceAPIService_GetAnnotatedLocation_Name:
            return "Receive reply blink::mojom::DeviceAPIService::GetAnnotatedLocation";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t DeviceAPIService::GetDirectoryId_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DeviceAPIService::GetDirectoryId");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceAPIService::GetHostname_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DeviceAPIService::GetHostname");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceAPIService::GetSerialNumber_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DeviceAPIService::GetSerialNumber");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceAPIService::GetAnnotatedAssetId_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DeviceAPIService::GetAnnotatedAssetId");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceAPIService::GetAnnotatedLocation_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DeviceAPIService::GetAnnotatedLocation");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class DeviceAPIService_GetDirectoryId_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DeviceAPIService_GetDirectoryId_ForwardToCallback(
      DeviceAPIService::GetDirectoryIdCallback callback
      ) : callback_(std::move(callback)) {
  }

  DeviceAPIService_GetDirectoryId_ForwardToCallback(const DeviceAPIService_GetDirectoryId_ForwardToCallback&) = delete;
  DeviceAPIService_GetDirectoryId_ForwardToCallback& operator=(const DeviceAPIService_GetDirectoryId_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  DeviceAPIService::GetDirectoryIdCallback callback_;
};

class DeviceAPIService_GetHostname_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DeviceAPIService_GetHostname_ForwardToCallback(
      DeviceAPIService::GetHostnameCallback callback
      ) : callback_(std::move(callback)) {
  }

  DeviceAPIService_GetHostname_ForwardToCallback(const DeviceAPIService_GetHostname_ForwardToCallback&) = delete;
  DeviceAPIService_GetHostname_ForwardToCallback& operator=(const DeviceAPIService_GetHostname_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  DeviceAPIService::GetHostnameCallback callback_;
};

class DeviceAPIService_GetSerialNumber_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DeviceAPIService_GetSerialNumber_ForwardToCallback(
      DeviceAPIService::GetSerialNumberCallback callback
      ) : callback_(std::move(callback)) {
  }

  DeviceAPIService_GetSerialNumber_ForwardToCallback(const DeviceAPIService_GetSerialNumber_ForwardToCallback&) = delete;
  DeviceAPIService_GetSerialNumber_ForwardToCallback& operator=(const DeviceAPIService_GetSerialNumber_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  DeviceAPIService::GetSerialNumberCallback callback_;
};

class DeviceAPIService_GetAnnotatedAssetId_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DeviceAPIService_GetAnnotatedAssetId_ForwardToCallback(
      DeviceAPIService::GetAnnotatedAssetIdCallback callback
      ) : callback_(std::move(callback)) {
  }

  DeviceAPIService_GetAnnotatedAssetId_ForwardToCallback(const DeviceAPIService_GetAnnotatedAssetId_ForwardToCallback&) = delete;
  DeviceAPIService_GetAnnotatedAssetId_ForwardToCallback& operator=(const DeviceAPIService_GetAnnotatedAssetId_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  DeviceAPIService::GetAnnotatedAssetIdCallback callback_;
};

class DeviceAPIService_GetAnnotatedLocation_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DeviceAPIService_GetAnnotatedLocation_ForwardToCallback(
      DeviceAPIService::GetAnnotatedLocationCallback callback
      ) : callback_(std::move(callback)) {
  }

  DeviceAPIService_GetAnnotatedLocation_ForwardToCallback(const DeviceAPIService_GetAnnotatedLocation_ForwardToCallback&) = delete;
  DeviceAPIService_GetAnnotatedLocation_ForwardToCallback& operator=(const DeviceAPIService_GetAnnotatedLocation_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  DeviceAPIService::GetAnnotatedLocationCallback callback_;
};

DeviceAPIServiceProxy::DeviceAPIServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DeviceAPIServiceProxy::GetDirectoryId(
    GetDirectoryIdCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::DeviceAPIService::GetDirectoryId");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceAPIService_GetDirectoryId_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DeviceAPIService_GetDirectoryId_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceAPIService::Name_);
  message.set_method_name("GetDirectoryId");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DeviceAPIService_GetDirectoryId_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void DeviceAPIServiceProxy::GetHostname(
    GetHostnameCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::DeviceAPIService::GetHostname");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceAPIService_GetHostname_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DeviceAPIService_GetHostname_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceAPIService::Name_);
  message.set_method_name("GetHostname");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DeviceAPIService_GetHostname_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void DeviceAPIServiceProxy::GetSerialNumber(
    GetSerialNumberCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::DeviceAPIService::GetSerialNumber");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceAPIService_GetSerialNumber_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DeviceAPIService_GetSerialNumber_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceAPIService::Name_);
  message.set_method_name("GetSerialNumber");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DeviceAPIService_GetSerialNumber_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void DeviceAPIServiceProxy::GetAnnotatedAssetId(
    GetAnnotatedAssetIdCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::DeviceAPIService::GetAnnotatedAssetId");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceAPIService_GetAnnotatedAssetId_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DeviceAPIService_GetAnnotatedAssetId_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceAPIService::Name_);
  message.set_method_name("GetAnnotatedAssetId");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DeviceAPIService_GetAnnotatedAssetId_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void DeviceAPIServiceProxy::GetAnnotatedLocation(
    GetAnnotatedLocationCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::DeviceAPIService::GetAnnotatedLocation");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceAPIService_GetAnnotatedLocation_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DeviceAPIService_GetAnnotatedLocation_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceAPIService::Name_);
  message.set_method_name("GetAnnotatedLocation");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DeviceAPIService_GetAnnotatedLocation_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class DeviceAPIService_GetDirectoryId_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static DeviceAPIService::GetDirectoryIdCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<DeviceAPIService_GetDirectoryId_ProxyToResponder> proxy(
        new DeviceAPIService_GetDirectoryId_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&DeviceAPIService_GetDirectoryId_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DeviceAPIService_GetDirectoryId_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  DeviceAPIService_GetDirectoryId_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DeviceAPIService::GetDirectoryIdCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      DeviceAttributeResultPtr in_result);
};

bool DeviceAPIService_GetDirectoryId_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::DeviceAPIService_GetDirectoryId_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DeviceAPIService_GetDirectoryId_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  DeviceAttributeResultPtr p_result{};
  DeviceAPIService_GetDirectoryId_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DeviceAPIService::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void DeviceAPIService_GetDirectoryId_ProxyToResponder::Run(
    DeviceAttributeResultPtr in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::DeviceAPIService::GetDirectoryId", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type DeviceAttributeResultPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceAPIService_GetDirectoryId_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DeviceAPIService_GetDirectoryId_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->result)>
      result_fragment(params.message());
  result_fragment.Claim(&params->result);
  mojo::internal::Serialize<::blink::mojom::DeviceAttributeResultDataView>(
      in_result, result_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->result.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null result in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceAPIService::Name_);
  message.set_method_name("GetDirectoryId");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class DeviceAPIService_GetHostname_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static DeviceAPIService::GetHostnameCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<DeviceAPIService_GetHostname_ProxyToResponder> proxy(
        new DeviceAPIService_GetHostname_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&DeviceAPIService_GetHostname_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DeviceAPIService_GetHostname_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  DeviceAPIService_GetHostname_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DeviceAPIService::GetHostnameCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      DeviceAttributeResultPtr in_result);
};

bool DeviceAPIService_GetHostname_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::DeviceAPIService_GetHostname_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DeviceAPIService_GetHostname_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  DeviceAttributeResultPtr p_result{};
  DeviceAPIService_GetHostname_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DeviceAPIService::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void DeviceAPIService_GetHostname_ProxyToResponder::Run(
    DeviceAttributeResultPtr in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::DeviceAPIService::GetHostname", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type DeviceAttributeResultPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceAPIService_GetHostname_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DeviceAPIService_GetHostname_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->result)>
      result_fragment(params.message());
  result_fragment.Claim(&params->result);
  mojo::internal::Serialize<::blink::mojom::DeviceAttributeResultDataView>(
      in_result, result_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->result.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null result in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceAPIService::Name_);
  message.set_method_name("GetHostname");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class DeviceAPIService_GetSerialNumber_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static DeviceAPIService::GetSerialNumberCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<DeviceAPIService_GetSerialNumber_ProxyToResponder> proxy(
        new DeviceAPIService_GetSerialNumber_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&DeviceAPIService_GetSerialNumber_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DeviceAPIService_GetSerialNumber_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  DeviceAPIService_GetSerialNumber_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DeviceAPIService::GetSerialNumberCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      DeviceAttributeResultPtr in_result);
};

bool DeviceAPIService_GetSerialNumber_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::DeviceAPIService_GetSerialNumber_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DeviceAPIService_GetSerialNumber_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  DeviceAttributeResultPtr p_result{};
  DeviceAPIService_GetSerialNumber_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DeviceAPIService::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void DeviceAPIService_GetSerialNumber_ProxyToResponder::Run(
    DeviceAttributeResultPtr in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::DeviceAPIService::GetSerialNumber", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type DeviceAttributeResultPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceAPIService_GetSerialNumber_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DeviceAPIService_GetSerialNumber_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->result)>
      result_fragment(params.message());
  result_fragment.Claim(&params->result);
  mojo::internal::Serialize<::blink::mojom::DeviceAttributeResultDataView>(
      in_result, result_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->result.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null result in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceAPIService::Name_);
  message.set_method_name("GetSerialNumber");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class DeviceAPIService_GetAnnotatedAssetId_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static DeviceAPIService::GetAnnotatedAssetIdCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<DeviceAPIService_GetAnnotatedAssetId_ProxyToResponder> proxy(
        new DeviceAPIService_GetAnnotatedAssetId_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&DeviceAPIService_GetAnnotatedAssetId_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DeviceAPIService_GetAnnotatedAssetId_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  DeviceAPIService_GetAnnotatedAssetId_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DeviceAPIService::GetAnnotatedAssetIdCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      DeviceAttributeResultPtr in_result);
};

bool DeviceAPIService_GetAnnotatedAssetId_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::DeviceAPIService_GetAnnotatedAssetId_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DeviceAPIService_GetAnnotatedAssetId_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  DeviceAttributeResultPtr p_result{};
  DeviceAPIService_GetAnnotatedAssetId_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DeviceAPIService::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void DeviceAPIService_GetAnnotatedAssetId_ProxyToResponder::Run(
    DeviceAttributeResultPtr in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::DeviceAPIService::GetAnnotatedAssetId", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type DeviceAttributeResultPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceAPIService_GetAnnotatedAssetId_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DeviceAPIService_GetAnnotatedAssetId_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->result)>
      result_fragment(params.message());
  result_fragment.Claim(&params->result);
  mojo::internal::Serialize<::blink::mojom::DeviceAttributeResultDataView>(
      in_result, result_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->result.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null result in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceAPIService::Name_);
  message.set_method_name("GetAnnotatedAssetId");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class DeviceAPIService_GetAnnotatedLocation_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static DeviceAPIService::GetAnnotatedLocationCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<DeviceAPIService_GetAnnotatedLocation_ProxyToResponder> proxy(
        new DeviceAPIService_GetAnnotatedLocation_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&DeviceAPIService_GetAnnotatedLocation_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DeviceAPIService_GetAnnotatedLocation_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  DeviceAPIService_GetAnnotatedLocation_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DeviceAPIService::GetAnnotatedLocationCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      DeviceAttributeResultPtr in_result);
};

bool DeviceAPIService_GetAnnotatedLocation_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::DeviceAPIService_GetAnnotatedLocation_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DeviceAPIService_GetAnnotatedLocation_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  DeviceAttributeResultPtr p_result{};
  DeviceAPIService_GetAnnotatedLocation_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DeviceAPIService::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void DeviceAPIService_GetAnnotatedLocation_ProxyToResponder::Run(
    DeviceAttributeResultPtr in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::DeviceAPIService::GetAnnotatedLocation", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type DeviceAttributeResultPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceAPIService_GetAnnotatedLocation_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DeviceAPIService_GetAnnotatedLocation_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->result)>
      result_fragment(params.message());
  result_fragment.Claim(&params->result);
  mojo::internal::Serialize<::blink::mojom::DeviceAttributeResultDataView>(
      in_result, result_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->result.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null result in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceAPIService::Name_);
  message.set_method_name("GetAnnotatedLocation");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool DeviceAPIServiceStubDispatch::Accept(
    DeviceAPIService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDeviceAPIService_GetDirectoryId_Name: {
      break;
    }
    case internal::kDeviceAPIService_GetHostname_Name: {
      break;
    }
    case internal::kDeviceAPIService_GetSerialNumber_Name: {
      break;
    }
    case internal::kDeviceAPIService_GetAnnotatedAssetId_Name: {
      break;
    }
    case internal::kDeviceAPIService_GetAnnotatedLocation_Name: {
      break;
    }
  }
  return false;
}

// static
bool DeviceAPIServiceStubDispatch::AcceptWithResponder(
    DeviceAPIService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kDeviceAPIService_GetDirectoryId_Name: {

      internal::DeviceAPIService_GetDirectoryId_Params_Data* params =
          reinterpret_cast<
              internal::DeviceAPIService_GetDirectoryId_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      DeviceAPIService_GetDirectoryId_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceAPIService::Name_, 0, false);
        return false;
      }
      DeviceAPIService::GetDirectoryIdCallback callback =
          DeviceAPIService_GetDirectoryId_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetDirectoryId(std::move(callback));
      return true;
    }
    case internal::kDeviceAPIService_GetHostname_Name: {

      internal::DeviceAPIService_GetHostname_Params_Data* params =
          reinterpret_cast<
              internal::DeviceAPIService_GetHostname_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      DeviceAPIService_GetHostname_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceAPIService::Name_, 1, false);
        return false;
      }
      DeviceAPIService::GetHostnameCallback callback =
          DeviceAPIService_GetHostname_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetHostname(std::move(callback));
      return true;
    }
    case internal::kDeviceAPIService_GetSerialNumber_Name: {

      internal::DeviceAPIService_GetSerialNumber_Params_Data* params =
          reinterpret_cast<
              internal::DeviceAPIService_GetSerialNumber_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      DeviceAPIService_GetSerialNumber_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceAPIService::Name_, 2, false);
        return false;
      }
      DeviceAPIService::GetSerialNumberCallback callback =
          DeviceAPIService_GetSerialNumber_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetSerialNumber(std::move(callback));
      return true;
    }
    case internal::kDeviceAPIService_GetAnnotatedAssetId_Name: {

      internal::DeviceAPIService_GetAnnotatedAssetId_Params_Data* params =
          reinterpret_cast<
              internal::DeviceAPIService_GetAnnotatedAssetId_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      DeviceAPIService_GetAnnotatedAssetId_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceAPIService::Name_, 3, false);
        return false;
      }
      DeviceAPIService::GetAnnotatedAssetIdCallback callback =
          DeviceAPIService_GetAnnotatedAssetId_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetAnnotatedAssetId(std::move(callback));
      return true;
    }
    case internal::kDeviceAPIService_GetAnnotatedLocation_Name: {

      internal::DeviceAPIService_GetAnnotatedLocation_Params_Data* params =
          reinterpret_cast<
              internal::DeviceAPIService_GetAnnotatedLocation_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      DeviceAPIService_GetAnnotatedLocation_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceAPIService::Name_, 4, false);
        return false;
      }
      DeviceAPIService::GetAnnotatedLocationCallback callback =
          DeviceAPIService_GetAnnotatedLocation_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetAnnotatedLocation(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDeviceAPIServiceValidationInfo[] = {
    {&internal::DeviceAPIService_GetDirectoryId_Params_Data::Validate,
     &internal::DeviceAPIService_GetDirectoryId_ResponseParams_Data::Validate},
    {&internal::DeviceAPIService_GetHostname_Params_Data::Validate,
     &internal::DeviceAPIService_GetHostname_ResponseParams_Data::Validate},
    {&internal::DeviceAPIService_GetSerialNumber_Params_Data::Validate,
     &internal::DeviceAPIService_GetSerialNumber_ResponseParams_Data::Validate},
    {&internal::DeviceAPIService_GetAnnotatedAssetId_Params_Data::Validate,
     &internal::DeviceAPIService_GetAnnotatedAssetId_ResponseParams_Data::Validate},
    {&internal::DeviceAPIService_GetAnnotatedLocation_Params_Data::Validate,
     &internal::DeviceAPIService_GetAnnotatedLocation_ResponseParams_Data::Validate},
};

bool DeviceAPIServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::DeviceAPIService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDeviceAPIServiceValidationInfo);
}

bool DeviceAPIServiceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::DeviceAPIService::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kDeviceAPIServiceValidationInfo);
}
const char ManagedConfigurationService::Name_[] = "blink.mojom.ManagedConfigurationService";

ManagedConfigurationService::IPCStableHashFunction ManagedConfigurationService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kManagedConfigurationService_GetManagedConfiguration_Name: {
      return &ManagedConfigurationService::GetManagedConfiguration_Sym::IPCStableHash;
    }
    case internal::kManagedConfigurationService_SubscribeToManagedConfiguration_Name: {
      return &ManagedConfigurationService::SubscribeToManagedConfiguration_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ManagedConfigurationService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kManagedConfigurationService_GetManagedConfiguration_Name:
            return "Receive blink::mojom::ManagedConfigurationService::GetManagedConfiguration";
      case internal::kManagedConfigurationService_SubscribeToManagedConfiguration_Name:
            return "Receive blink::mojom::ManagedConfigurationService::SubscribeToManagedConfiguration";
    }
  } else {
    switch (message.name()) {
      case internal::kManagedConfigurationService_GetManagedConfiguration_Name:
            return "Receive reply blink::mojom::ManagedConfigurationService::GetManagedConfiguration";
      case internal::kManagedConfigurationService_SubscribeToManagedConfiguration_Name:
            return "Receive reply blink::mojom::ManagedConfigurationService::SubscribeToManagedConfiguration";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ManagedConfigurationService::GetManagedConfiguration_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::ManagedConfigurationService::GetManagedConfiguration");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ManagedConfigurationService::SubscribeToManagedConfiguration_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::ManagedConfigurationService::SubscribeToManagedConfiguration");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class ManagedConfigurationService_GetManagedConfiguration_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ManagedConfigurationService_GetManagedConfiguration_ForwardToCallback(
      ManagedConfigurationService::GetManagedConfigurationCallback callback
      ) : callback_(std::move(callback)) {
  }

  ManagedConfigurationService_GetManagedConfiguration_ForwardToCallback(const ManagedConfigurationService_GetManagedConfiguration_ForwardToCallback&) = delete;
  ManagedConfigurationService_GetManagedConfiguration_ForwardToCallback& operator=(const ManagedConfigurationService_GetManagedConfiguration_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ManagedConfigurationService::GetManagedConfigurationCallback callback_;
};

ManagedConfigurationServiceProxy::ManagedConfigurationServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ManagedConfigurationServiceProxy::GetManagedConfiguration(
    const std::vector<std::string>& in_keys, GetManagedConfigurationCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::ManagedConfigurationService::GetManagedConfiguration", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("keys"), in_keys,
                        "<value of type const std::vector<std::string>&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kManagedConfigurationService_GetManagedConfiguration_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::ManagedConfigurationService_GetManagedConfiguration_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->keys)::BaseType>
      keys_fragment(params.message());
  const mojo::internal::ContainerValidateParams keys_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
      in_keys, keys_fragment, &keys_validate_params);
  params->keys.Set(
      keys_fragment.is_null() ? nullptr : keys_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->keys.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null keys in ManagedConfigurationService.GetManagedConfiguration request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ManagedConfigurationService::Name_);
  message.set_method_name("GetManagedConfiguration");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ManagedConfigurationService_GetManagedConfiguration_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void ManagedConfigurationServiceProxy::SubscribeToManagedConfiguration(
    ::mojo::PendingRemote<ManagedConfigurationObserver> in_observer) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::ManagedConfigurationService::SubscribeToManagedConfiguration", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("observer"), in_observer,
                        "<value of type ::mojo::PendingRemote<ManagedConfigurationObserver>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kManagedConfigurationService_SubscribeToManagedConfiguration_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::ManagedConfigurationService_SubscribeToManagedConfiguration_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::ManagedConfigurationObserverInterfaceBase>>(
      in_observer, &params->observer, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->observer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid observer in ManagedConfigurationService.SubscribeToManagedConfiguration request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ManagedConfigurationService::Name_);
  message.set_method_name("SubscribeToManagedConfiguration");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class ManagedConfigurationService_GetManagedConfiguration_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ManagedConfigurationService::GetManagedConfigurationCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ManagedConfigurationService_GetManagedConfiguration_ProxyToResponder> proxy(
        new ManagedConfigurationService_GetManagedConfiguration_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&ManagedConfigurationService_GetManagedConfiguration_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~ManagedConfigurationService_GetManagedConfiguration_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ManagedConfigurationService_GetManagedConfiguration_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ManagedConfigurationService::GetManagedConfigurationCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const absl::optional<base::flat_map<std::string, std::string>>& in_configurations);
};

bool ManagedConfigurationService_GetManagedConfiguration_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::ManagedConfigurationService_GetManagedConfiguration_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ManagedConfigurationService_GetManagedConfiguration_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  absl::optional<base::flat_map<std::string, std::string>> p_configurations{};
  ManagedConfigurationService_GetManagedConfiguration_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadConfigurations(&p_configurations))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ManagedConfigurationService::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_configurations));
  return true;
}

void ManagedConfigurationService_GetManagedConfiguration_ProxyToResponder::Run(
    const absl::optional<base::flat_map<std::string, std::string>>& in_configurations) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::ManagedConfigurationService::GetManagedConfiguration", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("configurations"), in_configurations,
                        "<value of type const absl::optional<base::flat_map<std::string, std::string>>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kManagedConfigurationService_GetManagedConfiguration_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::ManagedConfigurationService_GetManagedConfiguration_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->configurations)::BaseType>
      configurations_fragment(params.message());
  const mojo::internal::ContainerValidateParams configurations_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  mojo::internal::Serialize<mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>>(
      in_configurations, configurations_fragment, &configurations_validate_params);
  params->configurations.Set(
      configurations_fragment.is_null() ? nullptr : configurations_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ManagedConfigurationService::Name_);
  message.set_method_name("GetManagedConfiguration");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool ManagedConfigurationServiceStubDispatch::Accept(
    ManagedConfigurationService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kManagedConfigurationService_GetManagedConfiguration_Name: {
      break;
    }
    case internal::kManagedConfigurationService_SubscribeToManagedConfiguration_Name: {

      DCHECK(message->is_serialized());
      internal::ManagedConfigurationService_SubscribeToManagedConfiguration_Params_Data* params =
          reinterpret_cast<internal::ManagedConfigurationService_SubscribeToManagedConfiguration_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<ManagedConfigurationObserver> p_observer{};
      ManagedConfigurationService_SubscribeToManagedConfiguration_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_observer =
            input_data_view.TakeObserver<decltype(p_observer)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ManagedConfigurationService::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SubscribeToManagedConfiguration(
std::move(p_observer));
      return true;
    }
  }
  return false;
}

// static
bool ManagedConfigurationServiceStubDispatch::AcceptWithResponder(
    ManagedConfigurationService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kManagedConfigurationService_GetManagedConfiguration_Name: {

      internal::ManagedConfigurationService_GetManagedConfiguration_Params_Data* params =
          reinterpret_cast<
              internal::ManagedConfigurationService_GetManagedConfiguration_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::vector<std::string> p_keys{};
      ManagedConfigurationService_GetManagedConfiguration_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadKeys(&p_keys))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ManagedConfigurationService::Name_, 0, false);
        return false;
      }
      ManagedConfigurationService::GetManagedConfigurationCallback callback =
          ManagedConfigurationService_GetManagedConfiguration_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetManagedConfiguration(
std::move(p_keys), std::move(callback));
      return true;
    }
    case internal::kManagedConfigurationService_SubscribeToManagedConfiguration_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kManagedConfigurationServiceValidationInfo[] = {
    {&internal::ManagedConfigurationService_GetManagedConfiguration_Params_Data::Validate,
     &internal::ManagedConfigurationService_GetManagedConfiguration_ResponseParams_Data::Validate},
    {&internal::ManagedConfigurationService_SubscribeToManagedConfiguration_Params_Data::Validate,
     nullptr /* no response */},
};

bool ManagedConfigurationServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::ManagedConfigurationService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kManagedConfigurationServiceValidationInfo);
}

bool ManagedConfigurationServiceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::ManagedConfigurationService::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kManagedConfigurationServiceValidationInfo);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {

// static
bool UnionTraits<::blink::mojom::DeviceAttributeResult::DataView, ::blink::mojom::DeviceAttributeResultPtr>::Read(
    ::blink::mojom::DeviceAttributeResult::DataView input,
    ::blink::mojom::DeviceAttributeResultPtr* output) {
  using UnionType = ::blink::mojom::DeviceAttributeResult;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::kErrorMessage: {
      std::string result_error_message;
      if (!input.ReadErrorMessage(&result_error_message))
        return false;

      *output = UnionType::NewErrorMessage(
          std::move(result_error_message));
      break;
    }
    case Tag::kAttribute: {
      absl::optional<std::string> result_attribute;
      if (!input.ReadAttribute(&result_attribute))
        return false;

      *output = UnionType::NewAttribute(
          std::move(result_attribute));
      break;
    }
    default:

      return false;
  }
  return true;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {


void ManagedConfigurationObserverInterceptorForTesting::OnConfigurationChanged() {
  GetForwardingInterface()->OnConfigurationChanged();
}
ManagedConfigurationObserverAsyncWaiter::ManagedConfigurationObserverAsyncWaiter(
    ManagedConfigurationObserver* proxy) : proxy_(proxy) {}

ManagedConfigurationObserverAsyncWaiter::~ManagedConfigurationObserverAsyncWaiter() = default;




void DeviceAPIServiceInterceptorForTesting::GetDirectoryId(GetDirectoryIdCallback callback) {
  GetForwardingInterface()->GetDirectoryId(std::move(callback));
}
void DeviceAPIServiceInterceptorForTesting::GetHostname(GetHostnameCallback callback) {
  GetForwardingInterface()->GetHostname(std::move(callback));
}
void DeviceAPIServiceInterceptorForTesting::GetSerialNumber(GetSerialNumberCallback callback) {
  GetForwardingInterface()->GetSerialNumber(std::move(callback));
}
void DeviceAPIServiceInterceptorForTesting::GetAnnotatedAssetId(GetAnnotatedAssetIdCallback callback) {
  GetForwardingInterface()->GetAnnotatedAssetId(std::move(callback));
}
void DeviceAPIServiceInterceptorForTesting::GetAnnotatedLocation(GetAnnotatedLocationCallback callback) {
  GetForwardingInterface()->GetAnnotatedLocation(std::move(callback));
}
DeviceAPIServiceAsyncWaiter::DeviceAPIServiceAsyncWaiter(
    DeviceAPIService* proxy) : proxy_(proxy) {}

DeviceAPIServiceAsyncWaiter::~DeviceAPIServiceAsyncWaiter() = default;

void DeviceAPIServiceAsyncWaiter::GetDirectoryId(
    DeviceAttributeResultPtr* out_result) {
  base::RunLoop loop;
  proxy_->GetDirectoryId(
      base::BindOnce(
          [](base::RunLoop* loop,
             DeviceAttributeResultPtr* out_result
,
             DeviceAttributeResultPtr result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void DeviceAPIServiceAsyncWaiter::GetHostname(
    DeviceAttributeResultPtr* out_result) {
  base::RunLoop loop;
  proxy_->GetHostname(
      base::BindOnce(
          [](base::RunLoop* loop,
             DeviceAttributeResultPtr* out_result
,
             DeviceAttributeResultPtr result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void DeviceAPIServiceAsyncWaiter::GetSerialNumber(
    DeviceAttributeResultPtr* out_result) {
  base::RunLoop loop;
  proxy_->GetSerialNumber(
      base::BindOnce(
          [](base::RunLoop* loop,
             DeviceAttributeResultPtr* out_result
,
             DeviceAttributeResultPtr result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void DeviceAPIServiceAsyncWaiter::GetAnnotatedAssetId(
    DeviceAttributeResultPtr* out_result) {
  base::RunLoop loop;
  proxy_->GetAnnotatedAssetId(
      base::BindOnce(
          [](base::RunLoop* loop,
             DeviceAttributeResultPtr* out_result
,
             DeviceAttributeResultPtr result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void DeviceAPIServiceAsyncWaiter::GetAnnotatedLocation(
    DeviceAttributeResultPtr* out_result) {
  base::RunLoop loop;
  proxy_->GetAnnotatedLocation(
      base::BindOnce(
          [](base::RunLoop* loop,
             DeviceAttributeResultPtr* out_result
,
             DeviceAttributeResultPtr result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}



void ManagedConfigurationServiceInterceptorForTesting::GetManagedConfiguration(const std::vector<std::string>& keys, GetManagedConfigurationCallback callback) {
  GetForwardingInterface()->GetManagedConfiguration(std::move(keys), std::move(callback));
}
void ManagedConfigurationServiceInterceptorForTesting::SubscribeToManagedConfiguration(::mojo::PendingRemote<ManagedConfigurationObserver> observer) {
  GetForwardingInterface()->SubscribeToManagedConfiguration(std::move(observer));
}
ManagedConfigurationServiceAsyncWaiter::ManagedConfigurationServiceAsyncWaiter(
    ManagedConfigurationService* proxy) : proxy_(proxy) {}

ManagedConfigurationServiceAsyncWaiter::~ManagedConfigurationServiceAsyncWaiter() = default;

void ManagedConfigurationServiceAsyncWaiter::GetManagedConfiguration(
    const std::vector<std::string>& keys, absl::optional<base::flat_map<std::string, std::string>>* out_configurations) {
  base::RunLoop loop;
  proxy_->GetManagedConfiguration(std::move(keys),
      base::BindOnce(
          [](base::RunLoop* loop,
             absl::optional<base::flat_map<std::string, std::string>>* out_configurations
,
             const absl::optional<base::flat_map<std::string, std::string>>& configurations) {*out_configurations = std::move(configurations);
            loop->Quit();
          },
          &loop,
          out_configurations));
  loop.Run();
}





}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif