// third_party/blink/public/mojom/device/device.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVICE_DEVICE_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVICE_DEVICE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/device/device.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class DeviceAttributeResultDataView;


}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::DeviceAttributeResultDataView> {
  using Data = ::blink::mojom::internal::DeviceAttributeResult_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {
// Interface base classes. They are used for type safety check.
class ManagedConfigurationObserverInterfaceBase {};

using ManagedConfigurationObserverPtrDataView =
    mojo::InterfacePtrDataView<ManagedConfigurationObserverInterfaceBase>;
using ManagedConfigurationObserverRequestDataView =
    mojo::InterfaceRequestDataView<ManagedConfigurationObserverInterfaceBase>;
using ManagedConfigurationObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ManagedConfigurationObserverInterfaceBase>;
using ManagedConfigurationObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ManagedConfigurationObserverInterfaceBase>;
class DeviceAPIServiceInterfaceBase {};

using DeviceAPIServicePtrDataView =
    mojo::InterfacePtrDataView<DeviceAPIServiceInterfaceBase>;
using DeviceAPIServiceRequestDataView =
    mojo::InterfaceRequestDataView<DeviceAPIServiceInterfaceBase>;
using DeviceAPIServiceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<DeviceAPIServiceInterfaceBase>;
using DeviceAPIServiceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<DeviceAPIServiceInterfaceBase>;
class ManagedConfigurationServiceInterfaceBase {};

using ManagedConfigurationServicePtrDataView =
    mojo::InterfacePtrDataView<ManagedConfigurationServiceInterfaceBase>;
using ManagedConfigurationServiceRequestDataView =
    mojo::InterfaceRequestDataView<ManagedConfigurationServiceInterfaceBase>;
using ManagedConfigurationServiceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ManagedConfigurationServiceInterfaceBase>;
using ManagedConfigurationServiceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ManagedConfigurationServiceInterfaceBase>;


class DeviceAttributeResultDataView {
 public:
  using Tag = internal::DeviceAttributeResult_Data::DeviceAttributeResult_Tag;

  DeviceAttributeResultDataView() = default;

  DeviceAttributeResultDataView(
      internal::DeviceAttributeResult_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_error_message() const { return data_->tag == Tag::kErrorMessage; }
  inline void GetErrorMessageDataView(
      mojo::StringDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMessage(UserType* output) const {
    
    CHECK(is_error_message());
    return mojo::internal::Deserialize<mojo::StringDataView>(
        data_->data.f_error_message.Get(), output, message_);
  }
  bool is_attribute() const { return data_->tag == Tag::kAttribute; }
  inline void GetAttributeDataView(
      mojo::StringDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadAttribute(UserType* output) const {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `attribute` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadAttribute` instead "
    "of `ReadAttribute if you're fine with null values being "
    "silently ignored in this case.");
    CHECK(is_attribute());
    return mojo::internal::Deserialize<mojo::StringDataView>(
        data_->data.f_attribute.Get(), output, message_);
  }

 private:
  internal::DeviceAttributeResult_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::DeviceAttributeResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::blink::mojom::DeviceAttributeResultDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::blink::mojom::internal::DeviceAttributeResult_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::blink::mojom::DeviceAttributeResultDataView::Tag::kErrorMessage: {
        decltype(Traits::error_message(input))
            in_error_message = Traits::error_message(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_error_message)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<mojo::StringDataView>(
            in_error_message, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null error_message in DeviceAttributeResult union");
        fragment->data.f_error_message.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::blink::mojom::DeviceAttributeResultDataView::Tag::kAttribute: {
        decltype(Traits::attribute(input))
            in_attribute = Traits::attribute(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_attribute)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<mojo::StringDataView>(
            in_attribute, value_fragment);
        fragment->data.f_attribute.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
    }
  }

  static bool Deserialize(::blink::mojom::internal::DeviceAttributeResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::DeviceAttributeResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void DeviceAttributeResultDataView::GetErrorMessageDataView(
    mojo::StringDataView* output) const {
  CHECK(is_error_message());
  *output = mojo::StringDataView(data_->data.f_error_message.Get(), message_);
}
inline void DeviceAttributeResultDataView::GetAttributeDataView(
    mojo::StringDataView* output) const {
  CHECK(is_attribute());
  *output = mojo::StringDataView(data_->data.f_attribute.Get(), message_);
}


}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVICE_DEVICE_MOJOM_SHARED_H_