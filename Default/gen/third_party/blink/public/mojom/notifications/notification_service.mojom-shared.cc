// third_party/blink/public/mojom/notifications/notification_service.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/notifications/notification_service.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/notifications/notification_service.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* PersistentNotificationErrorToStringHelper(PersistentNotificationError value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case PersistentNotificationError::NONE:
      return "NONE";
    case PersistentNotificationError::INTERNAL_ERROR:
      return "INTERNAL_ERROR";
    case PersistentNotificationError::PERMISSION_DENIED:
      return "PERMISSION_DENIED";
    default:
      return nullptr;
  }
}

std::string PersistentNotificationErrorToString(PersistentNotificationError value) {
  const char *str = PersistentNotificationErrorToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown PersistentNotificationError value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, PersistentNotificationError value) {
  return os << PersistentNotificationErrorToString(value);
}

namespace internal {


// static
bool NonPersistentNotificationListener_OnShow_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NonPersistentNotificationListener_OnShow_Params_Data* object =
      static_cast<const NonPersistentNotificationListener_OnShow_Params_Data*>(data);

  return true;
}

NonPersistentNotificationListener_OnShow_Params_Data::NonPersistentNotificationListener_OnShow_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NonPersistentNotificationListener_OnClick_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NonPersistentNotificationListener_OnClick_Params_Data* object =
      static_cast<const NonPersistentNotificationListener_OnClick_Params_Data*>(data);

  return true;
}

NonPersistentNotificationListener_OnClick_Params_Data::NonPersistentNotificationListener_OnClick_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NonPersistentNotificationListener_OnClick_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NonPersistentNotificationListener_OnClick_ResponseParams_Data* object =
      static_cast<const NonPersistentNotificationListener_OnClick_ResponseParams_Data*>(data);

  return true;
}

NonPersistentNotificationListener_OnClick_ResponseParams_Data::NonPersistentNotificationListener_OnClick_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NonPersistentNotificationListener_OnClose_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NonPersistentNotificationListener_OnClose_Params_Data* object =
      static_cast<const NonPersistentNotificationListener_OnClose_Params_Data*>(data);

  return true;
}

NonPersistentNotificationListener_OnClose_Params_Data::NonPersistentNotificationListener_OnClose_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NonPersistentNotificationListener_OnClose_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NonPersistentNotificationListener_OnClose_ResponseParams_Data* object =
      static_cast<const NonPersistentNotificationListener_OnClose_ResponseParams_Data*>(data);

  return true;
}

NonPersistentNotificationListener_OnClose_ResponseParams_Data::NonPersistentNotificationListener_OnClose_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NotificationService_GetPermissionStatus_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NotificationService_GetPermissionStatus_Params_Data* object =
      static_cast<const NotificationService_GetPermissionStatus_Params_Data*>(data);

  return true;
}

NotificationService_GetPermissionStatus_Params_Data::NotificationService_GetPermissionStatus_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NotificationService_GetPermissionStatus_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NotificationService_GetPermissionStatus_ResponseParams_Data* object =
      static_cast<const NotificationService_GetPermissionStatus_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::PermissionStatus_Data
        ::Validate(object->status, validation_context))
    return false;

  return true;
}

NotificationService_GetPermissionStatus_ResponseParams_Data::NotificationService_GetPermissionStatus_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NotificationService_DisplayNonPersistentNotification_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NotificationService_DisplayNonPersistentNotification_Params_Data* object =
      static_cast<const NotificationService_DisplayNonPersistentNotification_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->token, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams token_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->token, validation_context,
                                         &token_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->notification_data, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->notification_data, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->notification_resources, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->notification_resources, validation_context))
    return false;

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->event_listener, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->event_listener,
                                                 validation_context)) {
    return false;
  }

  return true;
}

NotificationService_DisplayNonPersistentNotification_Params_Data::NotificationService_DisplayNonPersistentNotification_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NotificationService_CloseNonPersistentNotification_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NotificationService_CloseNonPersistentNotification_Params_Data* object =
      static_cast<const NotificationService_CloseNonPersistentNotification_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->token, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams token_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->token, validation_context,
                                         &token_validate_params)) {
    return false;
  }

  return true;
}

NotificationService_CloseNonPersistentNotification_Params_Data::NotificationService_CloseNonPersistentNotification_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NotificationService_DisplayPersistentNotification_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NotificationService_DisplayPersistentNotification_Params_Data* object =
      static_cast<const NotificationService_DisplayPersistentNotification_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->notification_data, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->notification_data, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->notification_resources, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->notification_resources, validation_context))
    return false;

  return true;
}

NotificationService_DisplayPersistentNotification_Params_Data::NotificationService_DisplayPersistentNotification_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NotificationService_DisplayPersistentNotification_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NotificationService_DisplayPersistentNotification_ResponseParams_Data* object =
      static_cast<const NotificationService_DisplayPersistentNotification_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::PersistentNotificationError_Data
        ::Validate(object->error, validation_context))
    return false;

  return true;
}

NotificationService_DisplayPersistentNotification_ResponseParams_Data::NotificationService_DisplayPersistentNotification_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NotificationService_ClosePersistentNotification_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NotificationService_ClosePersistentNotification_Params_Data* object =
      static_cast<const NotificationService_ClosePersistentNotification_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->notification_id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams notification_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->notification_id, validation_context,
                                         &notification_id_validate_params)) {
    return false;
  }

  return true;
}

NotificationService_ClosePersistentNotification_Params_Data::NotificationService_ClosePersistentNotification_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NotificationService_GetNotifications_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NotificationService_GetNotifications_Params_Data* object =
      static_cast<const NotificationService_GetNotifications_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->filter_tag, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams filter_tag_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->filter_tag, validation_context,
                                         &filter_tag_validate_params)) {
    return false;
  }

  return true;
}

NotificationService_GetNotifications_Params_Data::NotificationService_GetNotifications_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NotificationService_GetNotifications_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NotificationService_GetNotifications_ResponseParams_Data* object =
      static_cast<const NotificationService_GetNotifications_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->notification_ids, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams notification_ids_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->notification_ids, validation_context,
                                         &notification_ids_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->notification_datas, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams notification_datas_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->notification_datas, validation_context,
                                         &notification_datas_validate_params)) {
    return false;
  }

  return true;
}

NotificationService_GetNotifications_ResponseParams_Data::NotificationService_GetNotifications_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::PersistentNotificationError>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::PersistentNotificationError value) {
  return std::move(context).WriteString(::blink::mojom::PersistentNotificationErrorToString(value));
}

} // namespace perfetto