// third_party/blink/public/mojom/worker/shared_worker_host.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_HOST_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_HOST_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SharedWorkerHost_OnConnected_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t connection_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SharedWorkerHost_OnConnected_Params_Data>;

  SharedWorkerHost_OnConnected_Params_Data();
  ~SharedWorkerHost_OnConnected_Params_Data() = delete;
};
static_assert(sizeof(SharedWorkerHost_OnConnected_Params_Data) == 16,
              "Bad sizeof(SharedWorkerHost_OnConnected_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SharedWorkerHost_OnContextClosed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SharedWorkerHost_OnContextClosed_Params_Data>;

  SharedWorkerHost_OnContextClosed_Params_Data();
  ~SharedWorkerHost_OnContextClosed_Params_Data() = delete;
};
static_assert(sizeof(SharedWorkerHost_OnContextClosed_Params_Data) == 8,
              "Bad sizeof(SharedWorkerHost_OnContextClosed_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SharedWorkerHost_OnReadyForInspection_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data agent;
  mojo::internal::Handle_Data agent_host;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SharedWorkerHost_OnReadyForInspection_Params_Data>;

  SharedWorkerHost_OnReadyForInspection_Params_Data();
  ~SharedWorkerHost_OnReadyForInspection_Params_Data() = delete;
};
static_assert(sizeof(SharedWorkerHost_OnReadyForInspection_Params_Data) == 24,
              "Bad sizeof(SharedWorkerHost_OnReadyForInspection_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SharedWorkerHost_OnScriptLoadFailed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> error_message;

 private:
  friend class mojo::internal::MessageFragment<SharedWorkerHost_OnScriptLoadFailed_Params_Data>;

  SharedWorkerHost_OnScriptLoadFailed_Params_Data();
  ~SharedWorkerHost_OnScriptLoadFailed_Params_Data() = delete;
};
static_assert(sizeof(SharedWorkerHost_OnScriptLoadFailed_Params_Data) == 16,
              "Bad sizeof(SharedWorkerHost_OnScriptLoadFailed_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SharedWorkerHost_OnFeatureUsed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t feature;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SharedWorkerHost_OnFeatureUsed_Params_Data>;

  SharedWorkerHost_OnFeatureUsed_Params_Data();
  ~SharedWorkerHost_OnFeatureUsed_Params_Data() = delete;
};
static_assert(sizeof(SharedWorkerHost_OnFeatureUsed_Params_Data) == 16,
              "Bad sizeof(SharedWorkerHost_OnFeatureUsed_Params_Data)");

}  // namespace internal


class SharedWorkerHost_OnConnected_ParamsDataView {
 public:
  SharedWorkerHost_OnConnected_ParamsDataView() = default;

  SharedWorkerHost_OnConnected_ParamsDataView(
      internal::SharedWorkerHost_OnConnected_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t connection_id() const {
    return data_->connection_id;
  }
 private:
  internal::SharedWorkerHost_OnConnected_Params_Data* data_ = nullptr;
};



class SharedWorkerHost_OnContextClosed_ParamsDataView {
 public:
  SharedWorkerHost_OnContextClosed_ParamsDataView() = default;

  SharedWorkerHost_OnContextClosed_ParamsDataView(
      internal::SharedWorkerHost_OnContextClosed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SharedWorkerHost_OnContextClosed_Params_Data* data_ = nullptr;
};



class SharedWorkerHost_OnReadyForInspection_ParamsDataView {
 public:
  SharedWorkerHost_OnReadyForInspection_ParamsDataView() = default;

  SharedWorkerHost_OnReadyForInspection_ParamsDataView(
      internal::SharedWorkerHost_OnReadyForInspection_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeAgent() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::DevToolsAgentInterfaceBase>>(
            &data_->agent, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeAgentHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::DevToolsAgentHostInterfaceBase>>(
            &data_->agent_host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SharedWorkerHost_OnReadyForInspection_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SharedWorkerHost_OnScriptLoadFailed_ParamsDataView {
 public:
  SharedWorkerHost_OnScriptLoadFailed_ParamsDataView() = default;

  SharedWorkerHost_OnScriptLoadFailed_ParamsDataView(
      internal::SharedWorkerHost_OnScriptLoadFailed_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetErrorMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMessage(UserType* output) {
    
    auto* pointer = data_->error_message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::SharedWorkerHost_OnScriptLoadFailed_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SharedWorkerHost_OnFeatureUsed_ParamsDataView {
 public:
  SharedWorkerHost_OnFeatureUsed_ParamsDataView() = default;

  SharedWorkerHost_OnFeatureUsed_ParamsDataView(
      internal::SharedWorkerHost_OnFeatureUsed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadFeature(UserType* output) const {
    auto data_value = data_->feature;
    return mojo::internal::Deserialize<::blink::mojom::WebFeature>(
        data_value, output);
  }
  ::blink::mojom::WebFeature feature() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::WebFeature>(data_->feature));
  }
 private:
  internal::SharedWorkerHost_OnFeatureUsed_Params_Data* data_ = nullptr;
};








inline void SharedWorkerHost_OnScriptLoadFailed_ParamsDataView::GetErrorMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error_message.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_HOST_MOJOM_PARAMS_DATA_H_