// third_party/blink/public/mojom/worker/shared_worker_factory.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/worker/shared_worker_factory.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/worker/shared_worker_factory.mojom-params-data.h"
namespace blink {
namespace mojom {

namespace internal {


// static
bool SharedWorkerFactory_CreateSharedWorker_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 168, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedWorkerFactory_CreateSharedWorker_Params_Data* object =
      static_cast<const SharedWorkerFactory_CreateSharedWorker_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->info, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->info, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->token, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->token, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->constructor_origin, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->constructor_origin, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->user_agent, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams user_agent_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->user_agent, validation_context,
                                         &user_agent_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->full_user_agent, 6, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams full_user_agent_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->full_user_agent, validation_context,
                                         &full_user_agent_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->reduced_user_agent, 7, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams reduced_user_agent_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->reduced_user_agent, validation_context,
                                         &reduced_user_agent_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->ua_metadata, 8, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->ua_metadata, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->devtools_worker_token, 10, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->devtools_worker_token, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->renderer_preferences, 11, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->renderer_preferences, validation_context))
    return false;

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->preference_watcher_receiver, 12, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->preference_watcher_receiver,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->content_settings, 13, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->content_settings,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->service_worker_container_info, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->main_script_load_params, 15, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->main_script_load_params, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->subresource_loader_factories, 16, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->subresource_loader_factories, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->controller_info, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->policy_container, 18, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->policy_container, validation_context))
    return false;

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->host, 19, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->host,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->shared_worker, 20, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->shared_worker,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->browser_interface_broker, 21, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->browser_interface_broker,
                                                 validation_context)) {
    return false;
  }

  return true;
}

SharedWorkerFactory_CreateSharedWorker_Params_Data::SharedWorkerFactory_CreateSharedWorker_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink