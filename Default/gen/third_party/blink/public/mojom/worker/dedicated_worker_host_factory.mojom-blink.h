// third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_DEDICATED_WORKER_HOST_FACTORY_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_DEDICATED_WORKER_HOST_FACTORY_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom-shared.h"
#include "third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom-blink-forward.h"
#include "services/network/public/mojom/cross_origin_embedder_policy.mojom-blink.h"
#include "services/network/public/mojom/fetch_api.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/blob/blob_url_store.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/browser_interface_broker.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/loader/fetch_client_settings_object.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/worker/subresource_loader_updater.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom-blink.h"
#include "third_party/blink/public/mojom/worker/dedicated_worker_host.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/worker/worker_main_script_load_params.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_container.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-blink.h"
#include "third_party/blink/public/mojom/frame/back_forward_cache_controller.mojom-blink-forward.h"
#include "url/mojom/url.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/core/core_export.h"




namespace blink {
namespace mojom {
namespace blink {

class DedicatedWorkerHostFactoryClientProxy;

template <typename ImplRefTraits>
class DedicatedWorkerHostFactoryClientStub;

class DedicatedWorkerHostFactoryClientRequestValidator;


class CORE_EXPORT DedicatedWorkerHostFactoryClient
    : public DedicatedWorkerHostFactoryClientInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = DedicatedWorkerHostFactoryClientInterfaceBase;
  using Proxy_ = DedicatedWorkerHostFactoryClientProxy;

  template <typename ImplRefTraits>
  using Stub_ = DedicatedWorkerHostFactoryClientStub<ImplRefTraits>;

  using RequestValidator_ = DedicatedWorkerHostFactoryClientRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnWorkerHostCreatedMinVersion = 0,
    kOnScriptLoadStartedMinVersion = 0,
    kOnScriptLoadStartFailedMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct OnWorkerHostCreated_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnScriptLoadStarted_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnScriptLoadStartFailed_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~DedicatedWorkerHostFactoryClient() = default;

  
  virtual void OnWorkerHostCreated(::mojo::PendingRemote<::blink::mojom::blink::BrowserInterfaceBroker> browser_interface_broker, ::mojo::PendingRemote<::blink::mojom::blink::DedicatedWorkerHost> host) = 0;

  
  virtual void OnScriptLoadStarted(::blink::mojom::blink::ServiceWorkerContainerInfoForClientPtr service_worker_container_info, ::blink::mojom::blink::WorkerMainScriptLoadParamsPtr main_script_load_params, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, ::mojo::PendingReceiver<::blink::mojom::blink::SubresourceLoaderUpdater> subresource_loader_updater, ::blink::mojom::blink::ControllerServiceWorkerInfoPtr controller_info, ::mojo::PendingRemote<::blink::mojom::blink::BackForwardCacheControllerHost> back_forward_cache_controller_host) = 0;

  
  virtual void OnScriptLoadStartFailed() = 0;
};

class DedicatedWorkerHostFactoryProxy;

template <typename ImplRefTraits>
class DedicatedWorkerHostFactoryStub;

class DedicatedWorkerHostFactoryRequestValidator;
class DedicatedWorkerHostFactoryResponseValidator;


class CORE_EXPORT DedicatedWorkerHostFactory
    : public DedicatedWorkerHostFactoryInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = DedicatedWorkerHostFactoryInterfaceBase;
  using Proxy_ = DedicatedWorkerHostFactoryProxy;

  template <typename ImplRefTraits>
  using Stub_ = DedicatedWorkerHostFactoryStub<ImplRefTraits>;

  using RequestValidator_ = DedicatedWorkerHostFactoryRequestValidator;
  using ResponseValidator_ = DedicatedWorkerHostFactoryResponseValidator;
  enum MethodMinVersions : uint32_t {
    kCreateWorkerHostMinVersion = 0,
    kCreateWorkerHostAndStartScriptLoadMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct CreateWorkerHost_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct CreateWorkerHostAndStartScriptLoad_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~DedicatedWorkerHostFactory() = default;


  using CreateWorkerHostCallback = base::OnceCallback<void(const ::network::CrossOriginEmbedderPolicy&, ::mojo::PendingRemote<::blink::mojom::blink::BackForwardCacheControllerHost>)>;
  
  virtual void CreateWorkerHost(const ::blink::DedicatedWorkerToken& token, const ::blink::KURL& script_url, ::mojo::PendingReceiver<::blink::mojom::blink::BrowserInterfaceBroker> browser_interface_broker, ::mojo::PendingReceiver<::blink::mojom::blink::DedicatedWorkerHost> host, CreateWorkerHostCallback callback) = 0;

  
  virtual void CreateWorkerHostAndStartScriptLoad(const ::blink::DedicatedWorkerToken& token, const ::blink::KURL& script_url, ::network::mojom::blink::CredentialsMode credentials_mode, ::blink::mojom::blink::FetchClientSettingsObjectPtr outside_fetch_client_settings_object, ::mojo::PendingRemote<::blink::mojom::blink::BlobURLToken> blob_url_token, ::mojo::PendingRemote<DedicatedWorkerHostFactoryClient> client) = 0;
};



class CORE_EXPORT DedicatedWorkerHostFactoryClientProxy
    : public DedicatedWorkerHostFactoryClient {
 public:
  using InterfaceType = DedicatedWorkerHostFactoryClient;

  explicit DedicatedWorkerHostFactoryClientProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnWorkerHostCreated(::mojo::PendingRemote<::blink::mojom::blink::BrowserInterfaceBroker> browser_interface_broker, ::mojo::PendingRemote<::blink::mojom::blink::DedicatedWorkerHost> host) final;
  
  void OnScriptLoadStarted(::blink::mojom::blink::ServiceWorkerContainerInfoForClientPtr service_worker_container_info, ::blink::mojom::blink::WorkerMainScriptLoadParamsPtr main_script_load_params, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, ::mojo::PendingReceiver<::blink::mojom::blink::SubresourceLoaderUpdater> subresource_loader_updater, ::blink::mojom::blink::ControllerServiceWorkerInfoPtr controller_info, ::mojo::PendingRemote<::blink::mojom::blink::BackForwardCacheControllerHost> back_forward_cache_controller_host) final;
  
  void OnScriptLoadStartFailed() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class CORE_EXPORT DedicatedWorkerHostFactoryProxy
    : public DedicatedWorkerHostFactory {
 public:
  using InterfaceType = DedicatedWorkerHostFactory;

  explicit DedicatedWorkerHostFactoryProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void CreateWorkerHost(const ::blink::DedicatedWorkerToken& token, const ::blink::KURL& script_url, ::mojo::PendingReceiver<::blink::mojom::blink::BrowserInterfaceBroker> browser_interface_broker, ::mojo::PendingReceiver<::blink::mojom::blink::DedicatedWorkerHost> host, CreateWorkerHostCallback callback) final;
  
  void CreateWorkerHostAndStartScriptLoad(const ::blink::DedicatedWorkerToken& token, const ::blink::KURL& script_url, ::network::mojom::blink::CredentialsMode credentials_mode, ::blink::mojom::blink::FetchClientSettingsObjectPtr outside_fetch_client_settings_object, ::mojo::PendingRemote<::blink::mojom::blink::BlobURLToken> blob_url_token, ::mojo::PendingRemote<DedicatedWorkerHostFactoryClient> client) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class CORE_EXPORT DedicatedWorkerHostFactoryClientStubDispatch {
 public:
  static bool Accept(DedicatedWorkerHostFactoryClient* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      DedicatedWorkerHostFactoryClient* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<DedicatedWorkerHostFactoryClient>>
class DedicatedWorkerHostFactoryClientStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  DedicatedWorkerHostFactoryClientStub() = default;
  ~DedicatedWorkerHostFactoryClientStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DedicatedWorkerHostFactoryClientStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DedicatedWorkerHostFactoryClientStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class CORE_EXPORT DedicatedWorkerHostFactoryStubDispatch {
 public:
  static bool Accept(DedicatedWorkerHostFactory* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      DedicatedWorkerHostFactory* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<DedicatedWorkerHostFactory>>
class DedicatedWorkerHostFactoryStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  DedicatedWorkerHostFactoryStub() = default;
  ~DedicatedWorkerHostFactoryStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DedicatedWorkerHostFactoryStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DedicatedWorkerHostFactoryStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class CORE_EXPORT DedicatedWorkerHostFactoryClientRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class CORE_EXPORT DedicatedWorkerHostFactoryRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class CORE_EXPORT DedicatedWorkerHostFactoryResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_DEDICATED_WORKER_HOST_FACTORY_MOJOM_BLINK_H_