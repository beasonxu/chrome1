// third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_DEDICATED_WORKER_HOST_FACTORY_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_DEDICATED_WORKER_HOST_FACTORY_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data browser_interface_broker;
  mojo::internal::Interface_Data host;

 private:
  friend class mojo::internal::MessageFragment<DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data>;

  DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data();
  ~DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data() = delete;
};
static_assert(sizeof(DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data) == 24,
              "Bad sizeof(DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerContainerInfoForClient_Data> service_worker_container_info;
  mojo::internal::Pointer<::blink::mojom::internal::WorkerMainScriptLoadParams_Data> main_script_load_params;
  mojo::internal::Pointer<::blink::mojom::internal::URLLoaderFactoryBundle_Data> subresource_loader_factories;
  mojo::internal::Handle_Data subresource_loader_updater;
  uint8_t pad3_[4];
  mojo::internal::Pointer<::blink::mojom::internal::ControllerServiceWorkerInfo_Data> controller_info;
  mojo::internal::Interface_Data back_forward_cache_controller_host;

 private:
  friend class mojo::internal::MessageFragment<DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data>;

  DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data();
  ~DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data() = delete;
};
static_assert(sizeof(DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data) == 56,
              "Bad sizeof(DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data>;

  DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data();
  ~DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data() = delete;
};
static_assert(sizeof(DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data) == 8,
              "Bad sizeof(DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::DedicatedWorkerToken_Data> token;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> script_url;
  mojo::internal::Handle_Data browser_interface_broker;
  mojo::internal::Handle_Data host;

 private:
  friend class mojo::internal::MessageFragment<DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data>;

  DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data();
  ~DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data() = delete;
};
static_assert(sizeof(DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data) == 32,
              "Bad sizeof(DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::CrossOriginEmbedderPolicy_Data> parent_coep;
  mojo::internal::Interface_Data back_forward_cache_controller_host;

 private:
  friend class mojo::internal::MessageFragment<DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data>;

  DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data();
  ~DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data() = delete;
};
static_assert(sizeof(DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data) == 24,
              "Bad sizeof(DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::DedicatedWorkerToken_Data> token;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> script_url;
  int32_t credentials_mode;
  uint8_t pad2_[4];
  mojo::internal::Pointer<::blink::mojom::internal::FetchClientSettingsObject_Data> outside_fetch_client_settings_object;
  mojo::internal::Interface_Data blob_url_token;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data>;

  DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data();
  ~DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data() = delete;
};
static_assert(sizeof(DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data) == 56,
              "Bad sizeof(DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data)");

}  // namespace internal


class DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_ParamsDataView {
 public:
  DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_ParamsDataView() = default;

  DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_ParamsDataView(
      internal::DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeBrowserInterfaceBroker() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BrowserInterfaceBrokerInterfaceBase>>(
            &data_->browser_interface_broker, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::DedicatedWorkerHostInterfaceBase>>(
            &data_->host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_ParamsDataView {
 public:
  DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_ParamsDataView() = default;

  DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_ParamsDataView(
      internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetServiceWorkerContainerInfoDataView(
      ::blink::mojom::ServiceWorkerContainerInfoForClientDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadServiceWorkerContainerInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerContainerInfoForClientDataView, UserType>(),
    "Attempting to read the optional `service_worker_container_info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadServiceWorkerContainerInfo` instead "
    "of `ReadServiceWorkerContainerInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->service_worker_container_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerContainerInfoForClientDataView>(
        pointer, output, message_);
  }
  inline void GetMainScriptLoadParamsDataView(
      ::blink::mojom::WorkerMainScriptLoadParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMainScriptLoadParams(UserType* output) {
    
    auto* pointer = data_->main_script_load_params.Get();
    return mojo::internal::Deserialize<::blink::mojom::WorkerMainScriptLoadParamsDataView>(
        pointer, output, message_);
  }
  inline void GetSubresourceLoaderFactoriesDataView(
      ::blink::mojom::URLLoaderFactoryBundleDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSubresourceLoaderFactories(UserType* output) {
    
    auto* pointer = data_->subresource_loader_factories.Get();
    return mojo::internal::Deserialize<::blink::mojom::URLLoaderFactoryBundleDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeSubresourceLoaderUpdater() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::SubresourceLoaderUpdaterInterfaceBase>>(
            &data_->subresource_loader_updater, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetControllerInfoDataView(
      ::blink::mojom::ControllerServiceWorkerInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadControllerInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ControllerServiceWorkerInfoDataView, UserType>(),
    "Attempting to read the optional `controller_info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadControllerInfo` instead "
    "of `ReadControllerInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->controller_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ControllerServiceWorkerInfoDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeBackForwardCacheControllerHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BackForwardCacheControllerHostInterfaceBase>>(
            &data_->back_forward_cache_controller_host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_ParamsDataView {
 public:
  DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_ParamsDataView() = default;

  DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_ParamsDataView(
      internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data* data_ = nullptr;
};



class DedicatedWorkerHostFactory_CreateWorkerHost_ParamsDataView {
 public:
  DedicatedWorkerHostFactory_CreateWorkerHost_ParamsDataView() = default;

  DedicatedWorkerHostFactory_CreateWorkerHost_ParamsDataView(
      internal::DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTokenDataView(
      ::blink::mojom::DedicatedWorkerTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
    auto* pointer = data_->token.Get();
    return mojo::internal::Deserialize<::blink::mojom::DedicatedWorkerTokenDataView>(
        pointer, output, message_);
  }
  inline void GetScriptUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScriptUrl(UserType* output) {
    
    auto* pointer = data_->script_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeBrowserInterfaceBroker() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::BrowserInterfaceBrokerInterfaceBase>>(
            &data_->browser_interface_broker, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::DedicatedWorkerHostInterfaceBase>>(
            &data_->host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParamsDataView {
 public:
  DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParamsDataView() = default;

  DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParamsDataView(
      internal::DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParentCoepDataView(
      ::network::mojom::CrossOriginEmbedderPolicyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParentCoep(UserType* output) {
    
    auto* pointer = data_->parent_coep.Get();
    return mojo::internal::Deserialize<::network::mojom::CrossOriginEmbedderPolicyDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeBackForwardCacheControllerHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BackForwardCacheControllerHostInterfaceBase>>(
            &data_->back_forward_cache_controller_host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_ParamsDataView {
 public:
  DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_ParamsDataView() = default;

  DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_ParamsDataView(
      internal::DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTokenDataView(
      ::blink::mojom::DedicatedWorkerTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
    auto* pointer = data_->token.Get();
    return mojo::internal::Deserialize<::blink::mojom::DedicatedWorkerTokenDataView>(
        pointer, output, message_);
  }
  inline void GetScriptUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScriptUrl(UserType* output) {
    
    auto* pointer = data_->script_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadCredentialsMode(UserType* output) const {
    auto data_value = data_->credentials_mode;
    return mojo::internal::Deserialize<::network::mojom::CredentialsMode>(
        data_value, output);
  }
  ::network::mojom::CredentialsMode credentials_mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::CredentialsMode>(data_->credentials_mode));
  }
  inline void GetOutsideFetchClientSettingsObjectDataView(
      ::blink::mojom::FetchClientSettingsObjectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOutsideFetchClientSettingsObject(UserType* output) {
    
    auto* pointer = data_->outside_fetch_client_settings_object.Get();
    return mojo::internal::Deserialize<::blink::mojom::FetchClientSettingsObjectDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeBlobUrlToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BlobURLTokenInterfaceBase>>(
            &data_->blob_url_token, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::DedicatedWorkerHostFactoryClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_ParamsDataView::GetServiceWorkerContainerInfoDataView(
    ::blink::mojom::ServiceWorkerContainerInfoForClientDataView* output) {
  auto pointer = data_->service_worker_container_info.Get();
  *output = ::blink::mojom::ServiceWorkerContainerInfoForClientDataView(pointer, message_);
}
inline void DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_ParamsDataView::GetMainScriptLoadParamsDataView(
    ::blink::mojom::WorkerMainScriptLoadParamsDataView* output) {
  auto pointer = data_->main_script_load_params.Get();
  *output = ::blink::mojom::WorkerMainScriptLoadParamsDataView(pointer, message_);
}
inline void DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_ParamsDataView::GetSubresourceLoaderFactoriesDataView(
    ::blink::mojom::URLLoaderFactoryBundleDataView* output) {
  auto pointer = data_->subresource_loader_factories.Get();
  *output = ::blink::mojom::URLLoaderFactoryBundleDataView(pointer, message_);
}
inline void DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_ParamsDataView::GetControllerInfoDataView(
    ::blink::mojom::ControllerServiceWorkerInfoDataView* output) {
  auto pointer = data_->controller_info.Get();
  *output = ::blink::mojom::ControllerServiceWorkerInfoDataView(pointer, message_);
}




inline void DedicatedWorkerHostFactory_CreateWorkerHost_ParamsDataView::GetTokenDataView(
    ::blink::mojom::DedicatedWorkerTokenDataView* output) {
  auto pointer = data_->token.Get();
  *output = ::blink::mojom::DedicatedWorkerTokenDataView(pointer, message_);
}
inline void DedicatedWorkerHostFactory_CreateWorkerHost_ParamsDataView::GetScriptUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->script_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParamsDataView::GetParentCoepDataView(
    ::network::mojom::CrossOriginEmbedderPolicyDataView* output) {
  auto pointer = data_->parent_coep.Get();
  *output = ::network::mojom::CrossOriginEmbedderPolicyDataView(pointer, message_);
}


inline void DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_ParamsDataView::GetTokenDataView(
    ::blink::mojom::DedicatedWorkerTokenDataView* output) {
  auto pointer = data_->token.Get();
  *output = ::blink::mojom::DedicatedWorkerTokenDataView(pointer, message_);
}
inline void DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_ParamsDataView::GetScriptUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->script_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_ParamsDataView::GetOutsideFetchClientSettingsObjectDataView(
    ::blink::mojom::FetchClientSettingsObjectDataView* output) {
  auto pointer = data_->outside_fetch_client_settings_object.Get();
  *output = ::blink::mojom::FetchClientSettingsObjectDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_DEDICATED_WORKER_HOST_FACTORY_MOJOM_PARAMS_DATA_H_