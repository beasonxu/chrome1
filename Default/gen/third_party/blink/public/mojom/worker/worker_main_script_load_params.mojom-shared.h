// third_party/blink/public/mojom/worker/worker_main_script_load_params.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_WORKER_MAIN_SCRIPT_LOAD_PARAMS_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_WORKER_MAIN_SCRIPT_LOAD_PARAMS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/worker/worker_main_script_load_params.mojom-shared-internal.h"
#include "services/network/public/mojom/url_loader.mojom-shared.h"
#include "services/network/public/mojom/url_response_head.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "mojo/public/cpp/bindings/native_enum.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"
#include "base/component_export.h"




namespace blink {
namespace mojom {
class WorkerMainScriptLoadParamsDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::WorkerMainScriptLoadParamsDataView> {
  using Data = ::blink::mojom::internal::WorkerMainScriptLoadParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


class WorkerMainScriptLoadParamsDataView {
 public:
  WorkerMainScriptLoadParamsDataView() = default;

  WorkerMainScriptLoadParamsDataView(
      internal::WorkerMainScriptLoadParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t request_id() const {
    return data_->request_id;
  }
  inline void GetResponseHeadDataView(
      ::network::mojom::URLResponseHeadDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResponseHead(UserType* output) {
    
    auto* pointer = data_->response_head.Get();
    return mojo::internal::Deserialize<::network::mojom::URLResponseHeadDataView>(
        pointer, output, message_);
  }
  mojo::ScopedDataPipeConsumerHandle TakeResponseBody() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->response_body, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetUrlLoaderClientEndpointsDataView(
      ::network::mojom::URLLoaderClientEndpointsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrlLoaderClientEndpoints(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::URLLoaderClientEndpointsDataView, UserType>(),
    "Attempting to read the optional `url_loader_client_endpoints` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUrlLoaderClientEndpoints` instead "
    "of `ReadUrlLoaderClientEndpoints if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->url_loader_client_endpoints.Get();
    return mojo::internal::Deserialize<::network::mojom::URLLoaderClientEndpointsDataView>(
        pointer, output, message_);
  }
  inline void GetRedirectInfosDataView(
      mojo::ArrayDataView<::network::mojom::URLRequestRedirectInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRedirectInfos(UserType* output) {
    
    auto* pointer = data_->redirect_infos.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::URLRequestRedirectInfoDataView>>(
        pointer, output, message_);
  }
  inline void GetRedirectResponseHeadsDataView(
      mojo::ArrayDataView<::network::mojom::URLResponseHeadDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRedirectResponseHeads(UserType* output) {
    
    auto* pointer = data_->redirect_response_heads.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::URLResponseHeadDataView>>(
        pointer, output, message_);
  }
 private:
  internal::WorkerMainScriptLoadParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::WorkerMainScriptLoadParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::WorkerMainScriptLoadParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::WorkerMainScriptLoadParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->request_id = Traits::request_id(input);
    decltype(Traits::response_head(input)) in_response_head = Traits::response_head(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->response_head)::BaseType> response_head_fragment(
            fragment.message());
    mojo::internal::Serialize<::network::mojom::URLResponseHeadDataView>(
        in_response_head, response_head_fragment);
    fragment->response_head.Set(
        response_head_fragment.is_null() ? nullptr : response_head_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->response_head.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null response_head in WorkerMainScriptLoadParams struct");
    decltype(Traits::response_body(input)) in_response_body = Traits::response_body(input);
    mojo::internal::Serialize<mojo::ScopedDataPipeConsumerHandle>(
        in_response_body, &fragment->response_body, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->response_body),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid response_body in WorkerMainScriptLoadParams struct");
    decltype(Traits::url_loader_client_endpoints(input)) in_url_loader_client_endpoints = Traits::url_loader_client_endpoints(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url_loader_client_endpoints)::BaseType> url_loader_client_endpoints_fragment(
            fragment.message());
    mojo::internal::Serialize<::network::mojom::URLLoaderClientEndpointsDataView>(
        in_url_loader_client_endpoints, url_loader_client_endpoints_fragment);
    fragment->url_loader_client_endpoints.Set(
        url_loader_client_endpoints_fragment.is_null() ? nullptr : url_loader_client_endpoints_fragment.data());
    decltype(Traits::redirect_infos(input)) in_redirect_infos = Traits::redirect_infos(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->redirect_infos)::BaseType>
        redirect_infos_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams redirect_infos_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::URLRequestRedirectInfoDataView>>(
        in_redirect_infos, redirect_infos_fragment, &redirect_infos_validate_params);
    fragment->redirect_infos.Set(
        redirect_infos_fragment.is_null() ? nullptr : redirect_infos_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->redirect_infos.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null redirect_infos in WorkerMainScriptLoadParams struct");
    decltype(Traits::redirect_response_heads(input)) in_redirect_response_heads = Traits::redirect_response_heads(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->redirect_response_heads)::BaseType>
        redirect_response_heads_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams redirect_response_heads_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::URLResponseHeadDataView>>(
        in_redirect_response_heads, redirect_response_heads_fragment, &redirect_response_heads_validate_params);
    fragment->redirect_response_heads.Set(
        redirect_response_heads_fragment.is_null() ? nullptr : redirect_response_heads_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->redirect_response_heads.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null redirect_response_heads in WorkerMainScriptLoadParams struct");
  }

  static bool Deserialize(::blink::mojom::internal::WorkerMainScriptLoadParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::WorkerMainScriptLoadParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void WorkerMainScriptLoadParamsDataView::GetResponseHeadDataView(
    ::network::mojom::URLResponseHeadDataView* output) {
  auto pointer = data_->response_head.Get();
  *output = ::network::mojom::URLResponseHeadDataView(pointer, message_);
}
inline void WorkerMainScriptLoadParamsDataView::GetUrlLoaderClientEndpointsDataView(
    ::network::mojom::URLLoaderClientEndpointsDataView* output) {
  auto pointer = data_->url_loader_client_endpoints.Get();
  *output = ::network::mojom::URLLoaderClientEndpointsDataView(pointer, message_);
}
inline void WorkerMainScriptLoadParamsDataView::GetRedirectInfosDataView(
    mojo::ArrayDataView<::network::mojom::URLRequestRedirectInfoDataView>* output) {
  auto pointer = data_->redirect_infos.Get();
  *output = mojo::ArrayDataView<::network::mojom::URLRequestRedirectInfoDataView>(pointer, message_);
}
inline void WorkerMainScriptLoadParamsDataView::GetRedirectResponseHeadsDataView(
    mojo::ArrayDataView<::network::mojom::URLResponseHeadDataView>* output) {
  auto pointer = data_->redirect_response_heads.Get();
  *output = mojo::ArrayDataView<::network::mojom::URLResponseHeadDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_WORKER_MAIN_SCRIPT_LOAD_PARAMS_MOJOM_SHARED_H_