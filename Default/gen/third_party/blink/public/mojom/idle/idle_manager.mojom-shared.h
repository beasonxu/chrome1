// third_party/blink/public/mojom/idle/idle_manager.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_IDLE_IDLE_MANAGER_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_IDLE_IDLE_MANAGER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/idle/idle_manager.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class IdleStateDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::IdleStateDataView> {
  using Data = ::blink::mojom::internal::IdleState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class IdleManagerError : int32_t {
  
  kSuccess = 0,
  
  kPermissionDisabled = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, IdleManagerError value);
inline bool IsKnownEnumValue(IdleManagerError value) {
  return internal::IdleManagerError_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class IdleMonitorInterfaceBase {};

using IdleMonitorPtrDataView =
    mojo::InterfacePtrDataView<IdleMonitorInterfaceBase>;
using IdleMonitorRequestDataView =
    mojo::InterfaceRequestDataView<IdleMonitorInterfaceBase>;
using IdleMonitorAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<IdleMonitorInterfaceBase>;
using IdleMonitorAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<IdleMonitorInterfaceBase>;
class IdleManagerInterfaceBase {};

using IdleManagerPtrDataView =
    mojo::InterfacePtrDataView<IdleManagerInterfaceBase>;
using IdleManagerRequestDataView =
    mojo::InterfaceRequestDataView<IdleManagerInterfaceBase>;
using IdleManagerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<IdleManagerInterfaceBase>;
using IdleManagerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<IdleManagerInterfaceBase>;


class IdleStateDataView {
 public:
  IdleStateDataView() = default;

  IdleStateDataView(
      internal::IdleState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdleTimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIdleTime(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::TimeDeltaDataView, UserType>(),
    "Attempting to read the optional `idle_time` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadIdleTime` instead "
    "of `ReadIdleTime if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->idle_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
  bool screen_locked() const {
    return data_->screen_locked;
  }
 private:
  internal::IdleState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::IdleManagerError>
    : public mojo::internal::EnumHashImpl<::blink::mojom::IdleManagerError> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::IdleManagerError, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::IdleManagerError, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::IdleManagerError>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::IdleStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::IdleStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::IdleState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::idle_time(input)) in_idle_time = Traits::idle_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->idle_time)::BaseType> idle_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_idle_time, idle_time_fragment);
    fragment->idle_time.Set(
        idle_time_fragment.is_null() ? nullptr : idle_time_fragment.data());
    fragment->screen_locked = Traits::screen_locked(input);
  }

  static bool Deserialize(::blink::mojom::internal::IdleState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::IdleStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void IdleStateDataView::GetIdleTimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->idle_time.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::IdleManagerError> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::IdleManagerError value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_IDLE_IDLE_MANAGER_MOJOM_SHARED_H_