// third_party/blink/public/mojom/speech/speech_recognizer.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  SpeechRecognitionError as blink_mojom_SpeechRecognitionError,
  SpeechRecognitionErrorSpec as blink_mojom_SpeechRecognitionErrorSpec
} from './speech_recognition_error.mojom.m.js';

import {
  SpeechRecognitionGrammar as blink_mojom_SpeechRecognitionGrammar,
  SpeechRecognitionGrammarSpec as blink_mojom_SpeechRecognitionGrammarSpec
} from './speech_recognition_grammar.mojom.m.js';

import {
  SpeechRecognitionResult as blink_mojom_SpeechRecognitionResult,
  SpeechRecognitionResultSpec as blink_mojom_SpeechRecognitionResultSpec
} from './speech_recognition_result.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class SpeechRecognizerPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.SpeechRecognizer', scope);
  }
}

/** @interface */
export class SpeechRecognizerInterface {
  
  /**
   * @param { !StartSpeechRecognitionRequestParams } params
   */

  start(params) {}
}

/**
 * @implements { SpeechRecognizerInterface }
 */
export class SpeechRecognizerRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!SpeechRecognizerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          SpeechRecognizerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!SpeechRecognizerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !StartSpeechRecognitionRequestParams } params
   */

  start(
      params) {
    this.proxy.sendMessage(
        0,
        SpeechRecognizer_Start_ParamsSpec.$,
        null,
        [
          params
        ]);
  }
}

/**
 * An object which receives request messages for the SpeechRecognizer
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class SpeechRecognizerReceiver {
  /**
   * @param {!SpeechRecognizerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!SpeechRecognizerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        SpeechRecognizerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SpeechRecognizerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        SpeechRecognizer_Start_ParamsSpec.$,
        null,
        impl.start.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class SpeechRecognizer {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.SpeechRecognizer";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!SpeechRecognizerRemote}
   */
  static getRemote() {
    let remote = new SpeechRecognizerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the SpeechRecognizer
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class SpeechRecognizerCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      SpeechRecognizerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SpeechRecognizerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.start =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        SpeechRecognizer_Start_ParamsSpec.$,
        null,
        this.start.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class SpeechRecognitionSessionPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.SpeechRecognitionSession', scope);
  }
}

/** @interface */
export class SpeechRecognitionSessionInterface {
  
  /**
   */

  abort() {}
  
  /**
   */

  stopCapture() {}
}

/**
 * @implements { SpeechRecognitionSessionInterface }
 */
export class SpeechRecognitionSessionRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!SpeechRecognitionSessionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          SpeechRecognitionSessionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!SpeechRecognitionSessionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  abort() {
    this.proxy.sendMessage(
        0,
        SpeechRecognitionSession_Abort_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  stopCapture() {
    this.proxy.sendMessage(
        1,
        SpeechRecognitionSession_StopCapture_ParamsSpec.$,
        null,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the SpeechRecognitionSession
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class SpeechRecognitionSessionReceiver {
  /**
   * @param {!SpeechRecognitionSessionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!SpeechRecognitionSessionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        SpeechRecognitionSessionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SpeechRecognitionSessionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        SpeechRecognitionSession_Abort_ParamsSpec.$,
        null,
        impl.abort.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        SpeechRecognitionSession_StopCapture_ParamsSpec.$,
        null,
        impl.stopCapture.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class SpeechRecognitionSession {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.SpeechRecognitionSession";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!SpeechRecognitionSessionRemote}
   */
  static getRemote() {
    let remote = new SpeechRecognitionSessionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the SpeechRecognitionSession
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class SpeechRecognitionSessionCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      SpeechRecognitionSessionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SpeechRecognitionSessionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.abort =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        SpeechRecognitionSession_Abort_ParamsSpec.$,
        null,
        this.abort.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.stopCapture =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        SpeechRecognitionSession_StopCapture_ParamsSpec.$,
        null,
        this.stopCapture.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class SpeechRecognitionSessionClientPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.SpeechRecognitionSessionClient', scope);
  }
}

/** @interface */
export class SpeechRecognitionSessionClientInterface {
  
  /**
   * @param { !Array<!blink_mojom_SpeechRecognitionResult> } results
   */

  resultRetrieved(results) {}
  
  /**
   * @param { !blink_mojom_SpeechRecognitionError } error
   */

  errorOccurred(error) {}
  
  /**
   */

  started() {}
  
  /**
   */

  audioStarted() {}
  
  /**
   */

  soundStarted() {}
  
  /**
   */

  soundEnded() {}
  
  /**
   */

  audioEnded() {}
  
  /**
   */

  ended() {}
}

/**
 * @implements { SpeechRecognitionSessionClientInterface }
 */
export class SpeechRecognitionSessionClientRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!SpeechRecognitionSessionClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          SpeechRecognitionSessionClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!SpeechRecognitionSessionClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Array<!blink_mojom_SpeechRecognitionResult> } results
   */

  resultRetrieved(
      results) {
    this.proxy.sendMessage(
        0,
        SpeechRecognitionSessionClient_ResultRetrieved_ParamsSpec.$,
        null,
        [
          results
        ]);
  }

  
  /**
   * @param { !blink_mojom_SpeechRecognitionError } error
   */

  errorOccurred(
      error) {
    this.proxy.sendMessage(
        1,
        SpeechRecognitionSessionClient_ErrorOccurred_ParamsSpec.$,
        null,
        [
          error
        ]);
  }

  
  /**
   */

  started() {
    this.proxy.sendMessage(
        2,
        SpeechRecognitionSessionClient_Started_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  audioStarted() {
    this.proxy.sendMessage(
        3,
        SpeechRecognitionSessionClient_AudioStarted_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  soundStarted() {
    this.proxy.sendMessage(
        4,
        SpeechRecognitionSessionClient_SoundStarted_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  soundEnded() {
    this.proxy.sendMessage(
        5,
        SpeechRecognitionSessionClient_SoundEnded_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  audioEnded() {
    this.proxy.sendMessage(
        6,
        SpeechRecognitionSessionClient_AudioEnded_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  ended() {
    this.proxy.sendMessage(
        7,
        SpeechRecognitionSessionClient_Ended_ParamsSpec.$,
        null,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the SpeechRecognitionSessionClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class SpeechRecognitionSessionClientReceiver {
  /**
   * @param {!SpeechRecognitionSessionClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!SpeechRecognitionSessionClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        SpeechRecognitionSessionClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SpeechRecognitionSessionClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        SpeechRecognitionSessionClient_ResultRetrieved_ParamsSpec.$,
        null,
        impl.resultRetrieved.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        SpeechRecognitionSessionClient_ErrorOccurred_ParamsSpec.$,
        null,
        impl.errorOccurred.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        SpeechRecognitionSessionClient_Started_ParamsSpec.$,
        null,
        impl.started.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        SpeechRecognitionSessionClient_AudioStarted_ParamsSpec.$,
        null,
        impl.audioStarted.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        SpeechRecognitionSessionClient_SoundStarted_ParamsSpec.$,
        null,
        impl.soundStarted.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        SpeechRecognitionSessionClient_SoundEnded_ParamsSpec.$,
        null,
        impl.soundEnded.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        SpeechRecognitionSessionClient_AudioEnded_ParamsSpec.$,
        null,
        impl.audioEnded.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        SpeechRecognitionSessionClient_Ended_ParamsSpec.$,
        null,
        impl.ended.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class SpeechRecognitionSessionClient {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.SpeechRecognitionSessionClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!SpeechRecognitionSessionClientRemote}
   */
  static getRemote() {
    let remote = new SpeechRecognitionSessionClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the SpeechRecognitionSessionClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class SpeechRecognitionSessionClientCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      SpeechRecognitionSessionClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SpeechRecognitionSessionClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.resultRetrieved =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        SpeechRecognitionSessionClient_ResultRetrieved_ParamsSpec.$,
        null,
        this.resultRetrieved.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.errorOccurred =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        SpeechRecognitionSessionClient_ErrorOccurred_ParamsSpec.$,
        null,
        this.errorOccurred.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.started =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        SpeechRecognitionSessionClient_Started_ParamsSpec.$,
        null,
        this.started.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.audioStarted =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        SpeechRecognitionSessionClient_AudioStarted_ParamsSpec.$,
        null,
        this.audioStarted.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.soundStarted =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        SpeechRecognitionSessionClient_SoundStarted_ParamsSpec.$,
        null,
        this.soundStarted.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.soundEnded =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        SpeechRecognitionSessionClient_SoundEnded_ParamsSpec.$,
        null,
        this.soundEnded.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.audioEnded =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        SpeechRecognitionSessionClient_AudioEnded_ParamsSpec.$,
        null,
        this.audioEnded.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.ended =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        SpeechRecognitionSessionClient_Ended_ParamsSpec.$,
        null,
        this.ended.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StartSpeechRecognitionRequestParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SpeechRecognizer_Start_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SpeechRecognitionSession_Abort_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SpeechRecognitionSession_StopCapture_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SpeechRecognitionSessionClient_ResultRetrieved_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SpeechRecognitionSessionClient_ErrorOccurred_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SpeechRecognitionSessionClient_Started_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SpeechRecognitionSessionClient_AudioStarted_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SpeechRecognitionSessionClient_SoundStarted_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SpeechRecognitionSessionClient_SoundEnded_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SpeechRecognitionSessionClient_AudioEnded_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SpeechRecognitionSessionClient_Ended_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    StartSpeechRecognitionRequestParamsSpec.$,
    'StartSpeechRecognitionRequestParams',
    [
      mojo.internal.StructField(
        'sessionReceiver', 0,
        0,
        mojo.internal.InterfaceRequest(SpeechRecognitionSessionPendingReceiver),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'client', 4,
        0,
        mojo.internal.InterfaceProxy(SpeechRecognitionSessionClientRemote),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'language', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'grammars', 24,
        0,
        mojo.internal.Array(blink_mojom_SpeechRecognitionGrammarSpec.$, false),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'maxHypotheses', 12,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'continuous', 32,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'interimResults', 32,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 48],]);



/**
 * @record
 */
export class StartSpeechRecognitionRequestParams {
  constructor() {
    /** @type { !SpeechRecognitionSessionPendingReceiver } */
    this.sessionReceiver;
    /** @type { !SpeechRecognitionSessionClientRemote } */
    this.client;
    /** @type { !number } */
    this.maxHypotheses;
    /** @type { !string } */
    this.language;
    /** @type { !Array<!blink_mojom_SpeechRecognitionGrammar> } */
    this.grammars;
    /** @type { !boolean } */
    this.continuous;
    /** @type { !boolean } */
    this.interimResults;
  }
}



mojo.internal.Struct(
    SpeechRecognizer_Start_ParamsSpec.$,
    'SpeechRecognizer_Start_Params',
    [
      mojo.internal.StructField(
        'params', 0,
        0,
        StartSpeechRecognitionRequestParamsSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class SpeechRecognizer_Start_Params {
  constructor() {
    /** @type { !StartSpeechRecognitionRequestParams } */
    this.params;
  }
}



mojo.internal.Struct(
    SpeechRecognitionSession_Abort_ParamsSpec.$,
    'SpeechRecognitionSession_Abort_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class SpeechRecognitionSession_Abort_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    SpeechRecognitionSession_StopCapture_ParamsSpec.$,
    'SpeechRecognitionSession_StopCapture_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class SpeechRecognitionSession_StopCapture_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    SpeechRecognitionSessionClient_ResultRetrieved_ParamsSpec.$,
    'SpeechRecognitionSessionClient_ResultRetrieved_Params',
    [
      mojo.internal.StructField(
        'results', 0,
        0,
        mojo.internal.Array(blink_mojom_SpeechRecognitionResultSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class SpeechRecognitionSessionClient_ResultRetrieved_Params {
  constructor() {
    /** @type { !Array<!blink_mojom_SpeechRecognitionResult> } */
    this.results;
  }
}



mojo.internal.Struct(
    SpeechRecognitionSessionClient_ErrorOccurred_ParamsSpec.$,
    'SpeechRecognitionSessionClient_ErrorOccurred_Params',
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        blink_mojom_SpeechRecognitionErrorSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class SpeechRecognitionSessionClient_ErrorOccurred_Params {
  constructor() {
    /** @type { !blink_mojom_SpeechRecognitionError } */
    this.error;
  }
}



mojo.internal.Struct(
    SpeechRecognitionSessionClient_Started_ParamsSpec.$,
    'SpeechRecognitionSessionClient_Started_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class SpeechRecognitionSessionClient_Started_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    SpeechRecognitionSessionClient_AudioStarted_ParamsSpec.$,
    'SpeechRecognitionSessionClient_AudioStarted_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class SpeechRecognitionSessionClient_AudioStarted_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    SpeechRecognitionSessionClient_SoundStarted_ParamsSpec.$,
    'SpeechRecognitionSessionClient_SoundStarted_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class SpeechRecognitionSessionClient_SoundStarted_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    SpeechRecognitionSessionClient_SoundEnded_ParamsSpec.$,
    'SpeechRecognitionSessionClient_SoundEnded_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class SpeechRecognitionSessionClient_SoundEnded_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    SpeechRecognitionSessionClient_AudioEnded_ParamsSpec.$,
    'SpeechRecognitionSessionClient_AudioEnded_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class SpeechRecognitionSessionClient_AudioEnded_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    SpeechRecognitionSessionClient_Ended_ParamsSpec.$,
    'SpeechRecognitionSessionClient_Ended_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class SpeechRecognitionSessionClient_Ended_Params {
  constructor() {
  }
}

