// third_party/blink/public/mojom/speech/speech_recognizer.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/speech/speech_recognizer.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/speech/speech_recognizer.mojom-params-data.h"
namespace blink {
namespace mojom {

namespace internal {


// static
bool StartSpeechRecognitionRequestParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 48, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const StartSpeechRecognitionRequestParams_Data* object =
      static_cast<const StartSpeechRecognitionRequestParams_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->session_receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->session_receiver,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->client, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->client,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->language, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams language_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->language, validation_context,
                                         &language_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->grammars, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams grammars_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->grammars, validation_context,
                                         &grammars_validate_params)) {
    return false;
  }

  return true;
}

StartSpeechRecognitionRequestParams_Data::StartSpeechRecognitionRequestParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SpeechRecognizer_Start_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SpeechRecognizer_Start_Params_Data* object =
      static_cast<const SpeechRecognizer_Start_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->params, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->params, validation_context))
    return false;

  return true;
}

SpeechRecognizer_Start_Params_Data::SpeechRecognizer_Start_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SpeechRecognitionSession_Abort_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SpeechRecognitionSession_Abort_Params_Data* object =
      static_cast<const SpeechRecognitionSession_Abort_Params_Data*>(data);

  return true;
}

SpeechRecognitionSession_Abort_Params_Data::SpeechRecognitionSession_Abort_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SpeechRecognitionSession_StopCapture_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SpeechRecognitionSession_StopCapture_Params_Data* object =
      static_cast<const SpeechRecognitionSession_StopCapture_Params_Data*>(data);

  return true;
}

SpeechRecognitionSession_StopCapture_Params_Data::SpeechRecognitionSession_StopCapture_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SpeechRecognitionSessionClient_ResultRetrieved_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SpeechRecognitionSessionClient_ResultRetrieved_Params_Data* object =
      static_cast<const SpeechRecognitionSessionClient_ResultRetrieved_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->results, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams results_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->results, validation_context,
                                         &results_validate_params)) {
    return false;
  }

  return true;
}

SpeechRecognitionSessionClient_ResultRetrieved_Params_Data::SpeechRecognitionSessionClient_ResultRetrieved_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SpeechRecognitionSessionClient_ErrorOccurred_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SpeechRecognitionSessionClient_ErrorOccurred_Params_Data* object =
      static_cast<const SpeechRecognitionSessionClient_ErrorOccurred_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->error, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->error, validation_context))
    return false;

  return true;
}

SpeechRecognitionSessionClient_ErrorOccurred_Params_Data::SpeechRecognitionSessionClient_ErrorOccurred_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SpeechRecognitionSessionClient_Started_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SpeechRecognitionSessionClient_Started_Params_Data* object =
      static_cast<const SpeechRecognitionSessionClient_Started_Params_Data*>(data);

  return true;
}

SpeechRecognitionSessionClient_Started_Params_Data::SpeechRecognitionSessionClient_Started_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SpeechRecognitionSessionClient_AudioStarted_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SpeechRecognitionSessionClient_AudioStarted_Params_Data* object =
      static_cast<const SpeechRecognitionSessionClient_AudioStarted_Params_Data*>(data);

  return true;
}

SpeechRecognitionSessionClient_AudioStarted_Params_Data::SpeechRecognitionSessionClient_AudioStarted_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SpeechRecognitionSessionClient_SoundStarted_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SpeechRecognitionSessionClient_SoundStarted_Params_Data* object =
      static_cast<const SpeechRecognitionSessionClient_SoundStarted_Params_Data*>(data);

  return true;
}

SpeechRecognitionSessionClient_SoundStarted_Params_Data::SpeechRecognitionSessionClient_SoundStarted_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SpeechRecognitionSessionClient_SoundEnded_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SpeechRecognitionSessionClient_SoundEnded_Params_Data* object =
      static_cast<const SpeechRecognitionSessionClient_SoundEnded_Params_Data*>(data);

  return true;
}

SpeechRecognitionSessionClient_SoundEnded_Params_Data::SpeechRecognitionSessionClient_SoundEnded_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SpeechRecognitionSessionClient_AudioEnded_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SpeechRecognitionSessionClient_AudioEnded_Params_Data* object =
      static_cast<const SpeechRecognitionSessionClient_AudioEnded_Params_Data*>(data);

  return true;
}

SpeechRecognitionSessionClient_AudioEnded_Params_Data::SpeechRecognitionSessionClient_AudioEnded_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SpeechRecognitionSessionClient_Ended_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SpeechRecognitionSessionClient_Ended_Params_Data* object =
      static_cast<const SpeechRecognitionSessionClient_Ended_Params_Data*>(data);

  return true;
}

SpeechRecognitionSessionClient_Ended_Params_Data::SpeechRecognitionSessionClient_Ended_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink