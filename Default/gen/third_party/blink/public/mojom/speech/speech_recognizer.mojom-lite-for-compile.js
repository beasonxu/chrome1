// third_party/blink/public/mojom/speech/speech_recognizer.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('blink.mojom.SpeechRecognitionError');
goog.require('blink.mojom.SpeechRecognitionGrammar');
goog.require('blink.mojom.SpeechRecognitionResult');






goog.provide('blink.mojom.SpeechRecognizer');
goog.provide('blink.mojom.SpeechRecognizerReceiver');
goog.provide('blink.mojom.SpeechRecognizerCallbackRouter');
goog.provide('blink.mojom.SpeechRecognizerInterface');
goog.provide('blink.mojom.SpeechRecognizerRemote');
goog.provide('blink.mojom.SpeechRecognizerPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.SpeechRecognizerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.SpeechRecognizer.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.SpeechRecognizerInterface = class {
  
  /**
   * @param { !blink.mojom.StartSpeechRecognitionRequestParams } params
   */

  start(params) {}
};

/**
 * @export
 * @implements { blink.mojom.SpeechRecognizerInterface }
 */
blink.mojom.SpeechRecognizerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.SpeechRecognizerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.SpeechRecognizerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.SpeechRecognizerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !blink.mojom.StartSpeechRecognitionRequestParams } params
   */

  start(
      params) {
    this.proxy.sendMessage(
        0,
        blink.mojom.SpeechRecognizer_Start_ParamsSpec.$,
        null,
        [
          params
        ]);
  }
};

/**
 * An object which receives request messages for the SpeechRecognizer
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.SpeechRecognizerReceiver = class {
  /**
   * @param {!blink.mojom.SpeechRecognizerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.SpeechRecognizerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.SpeechRecognizerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.SpeechRecognizerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.SpeechRecognizer_Start_ParamsSpec.$,
        null,
        impl.start.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.SpeechRecognizer = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.SpeechRecognizer";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.SpeechRecognizerRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.SpeechRecognizerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the SpeechRecognizer
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.SpeechRecognizerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.SpeechRecognizerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.SpeechRecognizerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.start =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.SpeechRecognizer_Start_ParamsSpec.$,
        null,
        this.start.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.SpeechRecognitionSession');
goog.provide('blink.mojom.SpeechRecognitionSessionReceiver');
goog.provide('blink.mojom.SpeechRecognitionSessionCallbackRouter');
goog.provide('blink.mojom.SpeechRecognitionSessionInterface');
goog.provide('blink.mojom.SpeechRecognitionSessionRemote');
goog.provide('blink.mojom.SpeechRecognitionSessionPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.SpeechRecognitionSessionPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.SpeechRecognitionSession.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.SpeechRecognitionSessionInterface = class {
  
  /**
   */

  abort() {}
  
  /**
   */

  stopCapture() {}
};

/**
 * @export
 * @implements { blink.mojom.SpeechRecognitionSessionInterface }
 */
blink.mojom.SpeechRecognitionSessionRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.SpeechRecognitionSessionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.SpeechRecognitionSessionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.SpeechRecognitionSessionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  abort() {
    this.proxy.sendMessage(
        0,
        blink.mojom.SpeechRecognitionSession_Abort_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  stopCapture() {
    this.proxy.sendMessage(
        1,
        blink.mojom.SpeechRecognitionSession_StopCapture_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the SpeechRecognitionSession
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.SpeechRecognitionSessionReceiver = class {
  /**
   * @param {!blink.mojom.SpeechRecognitionSessionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.SpeechRecognitionSessionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.SpeechRecognitionSessionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.SpeechRecognitionSessionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.SpeechRecognitionSession_Abort_ParamsSpec.$,
        null,
        impl.abort.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.SpeechRecognitionSession_StopCapture_ParamsSpec.$,
        null,
        impl.stopCapture.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.SpeechRecognitionSession = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.SpeechRecognitionSession";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.SpeechRecognitionSessionRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.SpeechRecognitionSessionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the SpeechRecognitionSession
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.SpeechRecognitionSessionCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.SpeechRecognitionSessionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.SpeechRecognitionSessionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.abort =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.SpeechRecognitionSession_Abort_ParamsSpec.$,
        null,
        this.abort.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.stopCapture =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.SpeechRecognitionSession_StopCapture_ParamsSpec.$,
        null,
        this.stopCapture.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.SpeechRecognitionSessionClient');
goog.provide('blink.mojom.SpeechRecognitionSessionClientReceiver');
goog.provide('blink.mojom.SpeechRecognitionSessionClientCallbackRouter');
goog.provide('blink.mojom.SpeechRecognitionSessionClientInterface');
goog.provide('blink.mojom.SpeechRecognitionSessionClientRemote');
goog.provide('blink.mojom.SpeechRecognitionSessionClientPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.SpeechRecognitionSessionClientPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.SpeechRecognitionSessionClient.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.SpeechRecognitionSessionClientInterface = class {
  
  /**
   * @param { !Array<!blink.mojom.SpeechRecognitionResult> } results
   */

  resultRetrieved(results) {}
  
  /**
   * @param { !blink.mojom.SpeechRecognitionError } error
   */

  errorOccurred(error) {}
  
  /**
   */

  started() {}
  
  /**
   */

  audioStarted() {}
  
  /**
   */

  soundStarted() {}
  
  /**
   */

  soundEnded() {}
  
  /**
   */

  audioEnded() {}
  
  /**
   */

  ended() {}
};

/**
 * @export
 * @implements { blink.mojom.SpeechRecognitionSessionClientInterface }
 */
blink.mojom.SpeechRecognitionSessionClientRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.SpeechRecognitionSessionClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.SpeechRecognitionSessionClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.SpeechRecognitionSessionClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Array<!blink.mojom.SpeechRecognitionResult> } results
   */

  resultRetrieved(
      results) {
    this.proxy.sendMessage(
        0,
        blink.mojom.SpeechRecognitionSessionClient_ResultRetrieved_ParamsSpec.$,
        null,
        [
          results
        ]);
  }

  
  /**
   * @param { !blink.mojom.SpeechRecognitionError } error
   */

  errorOccurred(
      error) {
    this.proxy.sendMessage(
        1,
        blink.mojom.SpeechRecognitionSessionClient_ErrorOccurred_ParamsSpec.$,
        null,
        [
          error
        ]);
  }

  
  /**
   */

  started() {
    this.proxy.sendMessage(
        2,
        blink.mojom.SpeechRecognitionSessionClient_Started_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  audioStarted() {
    this.proxy.sendMessage(
        3,
        blink.mojom.SpeechRecognitionSessionClient_AudioStarted_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  soundStarted() {
    this.proxy.sendMessage(
        4,
        blink.mojom.SpeechRecognitionSessionClient_SoundStarted_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  soundEnded() {
    this.proxy.sendMessage(
        5,
        blink.mojom.SpeechRecognitionSessionClient_SoundEnded_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  audioEnded() {
    this.proxy.sendMessage(
        6,
        blink.mojom.SpeechRecognitionSessionClient_AudioEnded_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  ended() {
    this.proxy.sendMessage(
        7,
        blink.mojom.SpeechRecognitionSessionClient_Ended_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the SpeechRecognitionSessionClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.SpeechRecognitionSessionClientReceiver = class {
  /**
   * @param {!blink.mojom.SpeechRecognitionSessionClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.SpeechRecognitionSessionClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.SpeechRecognitionSessionClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.SpeechRecognitionSessionClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.SpeechRecognitionSessionClient_ResultRetrieved_ParamsSpec.$,
        null,
        impl.resultRetrieved.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.SpeechRecognitionSessionClient_ErrorOccurred_ParamsSpec.$,
        null,
        impl.errorOccurred.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.mojom.SpeechRecognitionSessionClient_Started_ParamsSpec.$,
        null,
        impl.started.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        blink.mojom.SpeechRecognitionSessionClient_AudioStarted_ParamsSpec.$,
        null,
        impl.audioStarted.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        blink.mojom.SpeechRecognitionSessionClient_SoundStarted_ParamsSpec.$,
        null,
        impl.soundStarted.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        blink.mojom.SpeechRecognitionSessionClient_SoundEnded_ParamsSpec.$,
        null,
        impl.soundEnded.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        blink.mojom.SpeechRecognitionSessionClient_AudioEnded_ParamsSpec.$,
        null,
        impl.audioEnded.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        blink.mojom.SpeechRecognitionSessionClient_Ended_ParamsSpec.$,
        null,
        impl.ended.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.SpeechRecognitionSessionClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.SpeechRecognitionSessionClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.SpeechRecognitionSessionClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.SpeechRecognitionSessionClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the SpeechRecognitionSessionClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.SpeechRecognitionSessionClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.SpeechRecognitionSessionClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.SpeechRecognitionSessionClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.resultRetrieved =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.SpeechRecognitionSessionClient_ResultRetrieved_ParamsSpec.$,
        null,
        this.resultRetrieved.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.errorOccurred =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.SpeechRecognitionSessionClient_ErrorOccurred_ParamsSpec.$,
        null,
        this.errorOccurred.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.started =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.mojom.SpeechRecognitionSessionClient_Started_ParamsSpec.$,
        null,
        this.started.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.audioStarted =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        blink.mojom.SpeechRecognitionSessionClient_AudioStarted_ParamsSpec.$,
        null,
        this.audioStarted.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.soundStarted =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        blink.mojom.SpeechRecognitionSessionClient_SoundStarted_ParamsSpec.$,
        null,
        this.soundStarted.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.soundEnded =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        blink.mojom.SpeechRecognitionSessionClient_SoundEnded_ParamsSpec.$,
        null,
        this.soundEnded.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.audioEnded =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        blink.mojom.SpeechRecognitionSessionClient_AudioEnded_ParamsSpec.$,
        null,
        this.audioEnded.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.ended =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        blink.mojom.SpeechRecognitionSessionClient_Ended_ParamsSpec.$,
        null,
        this.ended.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.StartSpeechRecognitionRequestParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.StartSpeechRecognitionRequestParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.SpeechRecognizer_Start_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognizer_Start_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.SpeechRecognitionSession_Abort_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionSession_Abort_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.SpeechRecognitionSession_StopCapture_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionSession_StopCapture_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.SpeechRecognitionSessionClient_ResultRetrieved_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionSessionClient_ResultRetrieved_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.SpeechRecognitionSessionClient_ErrorOccurred_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionSessionClient_ErrorOccurred_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.SpeechRecognitionSessionClient_Started_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionSessionClient_Started_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.SpeechRecognitionSessionClient_AudioStarted_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionSessionClient_AudioStarted_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.SpeechRecognitionSessionClient_SoundStarted_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionSessionClient_SoundStarted_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.SpeechRecognitionSessionClient_SoundEnded_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionSessionClient_SoundEnded_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.SpeechRecognitionSessionClient_AudioEnded_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionSessionClient_AudioEnded_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.SpeechRecognitionSessionClient_Ended_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionSessionClient_Ended_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.StartSpeechRecognitionRequestParamsSpec.$,
    'StartSpeechRecognitionRequestParams',
    [
      mojo.internal.StructField(
        'sessionReceiver', 0,
        0,
        mojo.internal.InterfaceRequest(blink.mojom.SpeechRecognitionSessionPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'client', 4,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.SpeechRecognitionSessionClientRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'language', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'grammars', 24,
        0,
        mojo.internal.Array(blink.mojom.SpeechRecognitionGrammarSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'maxHypotheses', 12,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'continuous', 32,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'interimResults', 32,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 48],]);



goog.provide('blink.mojom.StartSpeechRecognitionRequestParams');

/** @record */
blink.mojom.StartSpeechRecognitionRequestParams = class {
  constructor() {
    /** @export { !blink.mojom.SpeechRecognitionSessionPendingReceiver } */
    this.sessionReceiver;
    /** @export { !blink.mojom.SpeechRecognitionSessionClientRemote } */
    this.client;
    /** @export { !number } */
    this.maxHypotheses;
    /** @export { !string } */
    this.language;
    /** @export { !Array<!blink.mojom.SpeechRecognitionGrammar> } */
    this.grammars;
    /** @export { !boolean } */
    this.continuous;
    /** @export { !boolean } */
    this.interimResults;
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognizer_Start_ParamsSpec.$,
    'SpeechRecognizer_Start_Params',
    [
      mojo.internal.StructField(
        'params', 0,
        0,
        blink.mojom.StartSpeechRecognitionRequestParamsSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.SpeechRecognizer_Start_Params');

/** @record */
blink.mojom.SpeechRecognizer_Start_Params = class {
  constructor() {
    /** @export { !blink.mojom.StartSpeechRecognitionRequestParams } */
    this.params;
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionSession_Abort_ParamsSpec.$,
    'SpeechRecognitionSession_Abort_Params',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.SpeechRecognitionSession_Abort_Params');

/** @record */
blink.mojom.SpeechRecognitionSession_Abort_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionSession_StopCapture_ParamsSpec.$,
    'SpeechRecognitionSession_StopCapture_Params',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.SpeechRecognitionSession_StopCapture_Params');

/** @record */
blink.mojom.SpeechRecognitionSession_StopCapture_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionSessionClient_ResultRetrieved_ParamsSpec.$,
    'SpeechRecognitionSessionClient_ResultRetrieved_Params',
    [
      mojo.internal.StructField(
        'results', 0,
        0,
        mojo.internal.Array(blink.mojom.SpeechRecognitionResultSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.SpeechRecognitionSessionClient_ResultRetrieved_Params');

/** @record */
blink.mojom.SpeechRecognitionSessionClient_ResultRetrieved_Params = class {
  constructor() {
    /** @export { !Array<!blink.mojom.SpeechRecognitionResult> } */
    this.results;
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionSessionClient_ErrorOccurred_ParamsSpec.$,
    'SpeechRecognitionSessionClient_ErrorOccurred_Params',
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        blink.mojom.SpeechRecognitionErrorSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.SpeechRecognitionSessionClient_ErrorOccurred_Params');

/** @record */
blink.mojom.SpeechRecognitionSessionClient_ErrorOccurred_Params = class {
  constructor() {
    /** @export { !blink.mojom.SpeechRecognitionError } */
    this.error;
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionSessionClient_Started_ParamsSpec.$,
    'SpeechRecognitionSessionClient_Started_Params',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.SpeechRecognitionSessionClient_Started_Params');

/** @record */
blink.mojom.SpeechRecognitionSessionClient_Started_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionSessionClient_AudioStarted_ParamsSpec.$,
    'SpeechRecognitionSessionClient_AudioStarted_Params',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.SpeechRecognitionSessionClient_AudioStarted_Params');

/** @record */
blink.mojom.SpeechRecognitionSessionClient_AudioStarted_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionSessionClient_SoundStarted_ParamsSpec.$,
    'SpeechRecognitionSessionClient_SoundStarted_Params',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.SpeechRecognitionSessionClient_SoundStarted_Params');

/** @record */
blink.mojom.SpeechRecognitionSessionClient_SoundStarted_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionSessionClient_SoundEnded_ParamsSpec.$,
    'SpeechRecognitionSessionClient_SoundEnded_Params',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.SpeechRecognitionSessionClient_SoundEnded_Params');

/** @record */
blink.mojom.SpeechRecognitionSessionClient_SoundEnded_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionSessionClient_AudioEnded_ParamsSpec.$,
    'SpeechRecognitionSessionClient_AudioEnded_Params',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.SpeechRecognitionSessionClient_AudioEnded_Params');

/** @record */
blink.mojom.SpeechRecognitionSessionClient_AudioEnded_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionSessionClient_Ended_ParamsSpec.$,
    'SpeechRecognitionSessionClient_Ended_Params',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.SpeechRecognitionSessionClient_Ended_Params');

/** @record */
blink.mojom.SpeechRecognitionSessionClient_Ended_Params = class {
  constructor() {
  }
};


