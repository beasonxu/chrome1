// third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_USER_AGENT_USER_AGENT_METADATA_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_USER_AGENT_USER_AGENT_METADATA_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom-shared-internal.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {
class UserAgentBrandVersionDataView;

class UserAgentMetadataDataView;

class UserAgentOverrideDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::UserAgentBrandVersionDataView> {
  using Data = ::blink::mojom::internal::UserAgentBrandVersion_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::UserAgentMetadataDataView> {
  using Data = ::blink::mojom::internal::UserAgentMetadata_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::UserAgentOverrideDataView> {
  using Data = ::blink::mojom::internal::UserAgentOverride_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


class UserAgentBrandVersionDataView {
 public:
  UserAgentBrandVersionDataView() = default;

  UserAgentBrandVersionDataView(
      internal::UserAgentBrandVersion_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBrandDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBrand(UserType* output) {
    
    auto* pointer = data_->brand.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetVersionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVersion(UserType* output) {
    
    auto* pointer = data_->version.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::UserAgentBrandVersion_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UserAgentMetadataDataView {
 public:
  UserAgentMetadataDataView() = default;

  UserAgentMetadataDataView(
      internal::UserAgentMetadata_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBrandVersionListDataView(
      mojo::ArrayDataView<UserAgentBrandVersionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBrandVersionList(UserType* output) {
    
    auto* pointer = data_->brand_version_list.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::UserAgentBrandVersionDataView>>(
        pointer, output, message_);
  }
  inline void GetBrandFullVersionListDataView(
      mojo::ArrayDataView<UserAgentBrandVersionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBrandFullVersionList(UserType* output) {
    
    auto* pointer = data_->brand_full_version_list.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::UserAgentBrandVersionDataView>>(
        pointer, output, message_);
  }
  inline void GetFullVersionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFullVersion(UserType* output) {
    
    auto* pointer = data_->full_version.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPlatformDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPlatform(UserType* output) {
    
    auto* pointer = data_->platform.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPlatformVersionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPlatformVersion(UserType* output) {
    
    auto* pointer = data_->platform_version.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetArchitectureDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadArchitecture(UserType* output) {
    
    auto* pointer = data_->architecture.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetModelDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadModel(UserType* output) {
    
    auto* pointer = data_->model.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool mobile() const {
    return data_->mobile;
  }
  inline void GetBitnessDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBitness(UserType* output) {
    
    auto* pointer = data_->bitness.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool wow64() const {
    return data_->wow64;
  }
 private:
  internal::UserAgentMetadata_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UserAgentOverrideDataView {
 public:
  UserAgentOverrideDataView() = default;

  UserAgentOverrideDataView(
      internal::UserAgentOverride_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUaStringOverrideDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUaStringOverride(UserType* output) {
    
    auto* pointer = data_->ua_string_override.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUaMetadataOverrideDataView(
      UserAgentMetadataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUaMetadataOverride(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::UserAgentMetadataDataView, UserType>(),
    "Attempting to read the optional `ua_metadata_override` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUaMetadataOverride` instead "
    "of `ReadUaMetadataOverride if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->ua_metadata_override.Get();
    return mojo::internal::Deserialize<::blink::mojom::UserAgentMetadataDataView>(
        pointer, output, message_);
  }
 private:
  internal::UserAgentOverride_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::UserAgentBrandVersionDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::UserAgentBrandVersionDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::UserAgentBrandVersion_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::brand(input)) in_brand = Traits::brand(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->brand)::BaseType> brand_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_brand, brand_fragment);
    fragment->brand.Set(
        brand_fragment.is_null() ? nullptr : brand_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->brand.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null brand in UserAgentBrandVersion struct");
    decltype(Traits::version(input)) in_version = Traits::version(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->version)::BaseType> version_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_version, version_fragment);
    fragment->version.Set(
        version_fragment.is_null() ? nullptr : version_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->version.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null version in UserAgentBrandVersion struct");
  }

  static bool Deserialize(::blink::mojom::internal::UserAgentBrandVersion_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::UserAgentBrandVersionDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::UserAgentMetadataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::UserAgentMetadataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::UserAgentMetadata_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::brand_version_list(input)) in_brand_version_list = Traits::brand_version_list(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->brand_version_list)::BaseType>
        brand_version_list_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams brand_version_list_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::UserAgentBrandVersionDataView>>(
        in_brand_version_list, brand_version_list_fragment, &brand_version_list_validate_params);
    fragment->brand_version_list.Set(
        brand_version_list_fragment.is_null() ? nullptr : brand_version_list_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->brand_version_list.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null brand_version_list in UserAgentMetadata struct");
    decltype(Traits::brand_full_version_list(input)) in_brand_full_version_list = Traits::brand_full_version_list(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->brand_full_version_list)::BaseType>
        brand_full_version_list_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams brand_full_version_list_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::UserAgentBrandVersionDataView>>(
        in_brand_full_version_list, brand_full_version_list_fragment, &brand_full_version_list_validate_params);
    fragment->brand_full_version_list.Set(
        brand_full_version_list_fragment.is_null() ? nullptr : brand_full_version_list_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->brand_full_version_list.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null brand_full_version_list in UserAgentMetadata struct");
    decltype(Traits::full_version(input)) in_full_version = Traits::full_version(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->full_version)::BaseType> full_version_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_full_version, full_version_fragment);
    fragment->full_version.Set(
        full_version_fragment.is_null() ? nullptr : full_version_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->full_version.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null full_version in UserAgentMetadata struct");
    decltype(Traits::platform(input)) in_platform = Traits::platform(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->platform)::BaseType> platform_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_platform, platform_fragment);
    fragment->platform.Set(
        platform_fragment.is_null() ? nullptr : platform_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->platform.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null platform in UserAgentMetadata struct");
    decltype(Traits::platform_version(input)) in_platform_version = Traits::platform_version(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->platform_version)::BaseType> platform_version_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_platform_version, platform_version_fragment);
    fragment->platform_version.Set(
        platform_version_fragment.is_null() ? nullptr : platform_version_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->platform_version.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null platform_version in UserAgentMetadata struct");
    decltype(Traits::architecture(input)) in_architecture = Traits::architecture(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->architecture)::BaseType> architecture_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_architecture, architecture_fragment);
    fragment->architecture.Set(
        architecture_fragment.is_null() ? nullptr : architecture_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->architecture.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null architecture in UserAgentMetadata struct");
    decltype(Traits::model(input)) in_model = Traits::model(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->model)::BaseType> model_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_model, model_fragment);
    fragment->model.Set(
        model_fragment.is_null() ? nullptr : model_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->model.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null model in UserAgentMetadata struct");
    fragment->mobile = Traits::mobile(input);
    decltype(Traits::bitness(input)) in_bitness = Traits::bitness(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->bitness)::BaseType> bitness_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_bitness, bitness_fragment);
    fragment->bitness.Set(
        bitness_fragment.is_null() ? nullptr : bitness_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->bitness.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bitness in UserAgentMetadata struct");
    fragment->wow64 = Traits::wow64(input);
  }

  static bool Deserialize(::blink::mojom::internal::UserAgentMetadata_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::UserAgentMetadataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::UserAgentOverrideDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::UserAgentOverrideDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::UserAgentOverride_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::ua_string_override(input)) in_ua_string_override = Traits::ua_string_override(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ua_string_override)::BaseType> ua_string_override_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_ua_string_override, ua_string_override_fragment);
    fragment->ua_string_override.Set(
        ua_string_override_fragment.is_null() ? nullptr : ua_string_override_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ua_string_override.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ua_string_override in UserAgentOverride struct");
    decltype(Traits::ua_metadata_override(input)) in_ua_metadata_override = Traits::ua_metadata_override(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ua_metadata_override)::BaseType> ua_metadata_override_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::UserAgentMetadataDataView>(
        in_ua_metadata_override, ua_metadata_override_fragment);
    fragment->ua_metadata_override.Set(
        ua_metadata_override_fragment.is_null() ? nullptr : ua_metadata_override_fragment.data());
  }

  static bool Deserialize(::blink::mojom::internal::UserAgentOverride_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::UserAgentOverrideDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void UserAgentBrandVersionDataView::GetBrandDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->brand.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void UserAgentBrandVersionDataView::GetVersionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->version.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void UserAgentMetadataDataView::GetBrandVersionListDataView(
    mojo::ArrayDataView<UserAgentBrandVersionDataView>* output) {
  auto pointer = data_->brand_version_list.Get();
  *output = mojo::ArrayDataView<UserAgentBrandVersionDataView>(pointer, message_);
}
inline void UserAgentMetadataDataView::GetBrandFullVersionListDataView(
    mojo::ArrayDataView<UserAgentBrandVersionDataView>* output) {
  auto pointer = data_->brand_full_version_list.Get();
  *output = mojo::ArrayDataView<UserAgentBrandVersionDataView>(pointer, message_);
}
inline void UserAgentMetadataDataView::GetFullVersionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->full_version.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void UserAgentMetadataDataView::GetPlatformDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->platform.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void UserAgentMetadataDataView::GetPlatformVersionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->platform_version.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void UserAgentMetadataDataView::GetArchitectureDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->architecture.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void UserAgentMetadataDataView::GetModelDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->model.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void UserAgentMetadataDataView::GetBitnessDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->bitness.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void UserAgentOverrideDataView::GetUaStringOverrideDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->ua_string_override.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void UserAgentOverrideDataView::GetUaMetadataOverrideDataView(
    UserAgentMetadataDataView* output) {
  auto pointer = data_->ua_metadata_override.Get();
  *output = UserAgentMetadataDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_USER_AGENT_USER_AGENT_METADATA_MOJOM_SHARED_H_