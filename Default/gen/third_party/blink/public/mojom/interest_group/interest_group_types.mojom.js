// third_party/blink/public/mojom/interest_group/interest_group_types.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/interest_group/interest_group_types.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../../url/mojom/origin.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }


  var MAX_INTEREST_GROUP_SIZE = 51200;

  function InterestGroupAd(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterestGroupAd.prototype.initDefaults_ = function() {
    this.renderUrl = null;
    this.metadata = null;
  };
  InterestGroupAd.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterestGroupAd.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroupAd.renderUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroupAd.metadata
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterestGroupAd.encodedSize = codec.kStructHeaderSize + 16;

  InterestGroupAd.decode = function(decoder) {
    var packed;
    var val = new InterestGroupAd();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.renderUrl =
        decoder.decodeStructPointer(url$.Url);
    val.metadata =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  InterestGroupAd.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterestGroupAd.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.renderUrl);
    encoder.encodeStruct(codec.NullableString, val.metadata);
  };
  function InterestGroup(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  InterestGroup.ExecutionMode = {};
  InterestGroup.ExecutionMode.kCompatibilityMode = 0;
  InterestGroup.ExecutionMode.kGroupedByOriginMode = 1;
  InterestGroup.ExecutionMode.kFrozenContext = 2;
  InterestGroup.ExecutionMode.MIN_VALUE = 0;
  InterestGroup.ExecutionMode.MAX_VALUE = 2;

  InterestGroup.ExecutionMode.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  InterestGroup.ExecutionMode.toKnownEnumValue = function(value) {
    return value;
  };

  InterestGroup.ExecutionMode.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  InterestGroup.prototype.initDefaults_ = function() {
    this.expiry = null;
    this.owner = null;
    this.name = null;
    this.priority = 0.0;
    this.executionMode = InterestGroup.ExecutionMode.kCompatibilityMode;
    this.biddingUrl = null;
    this.biddingWasmHelperUrl = null;
    this.dailyUpdateUrl = null;
    this.trustedBiddingSignalsUrl = null;
    this.trustedBiddingSignalsKeys = null;
    this.userBiddingSignals = null;
    this.ads = null;
    this.adComponents = null;
  };
  InterestGroup.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterestGroup.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 112}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.expiry
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.owner
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate InterestGroup.executionMode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 32, InterestGroup.ExecutionMode);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.biddingUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.biddingWasmHelperUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.dailyUpdateUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.trustedBiddingSignalsUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.trustedBiddingSignalsKeys
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 72, 8, codec.String, true, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.userBiddingSignals
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 80, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.ads
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 88, 8, new codec.PointerTo(InterestGroupAd), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.adComponents
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 96, 8, new codec.PointerTo(InterestGroupAd), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterestGroup.encodedSize = codec.kStructHeaderSize + 104;

  InterestGroup.decode = function(decoder) {
    var packed;
    var val = new InterestGroup();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.expiry =
        decoder.decodeStructPointer(time$.Time);
    val.owner =
        decoder.decodeStructPointer(origin$.Origin);
    val.name =
        decoder.decodeStruct(codec.String);
    val.priority =
        decoder.decodeStruct(codec.Double);
    val.executionMode =
        decoder.decodeStruct(new codec.Enum(InterestGroup.ExecutionMode));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.biddingUrl =
        decoder.decodeStructPointer(url$.Url);
    val.biddingWasmHelperUrl =
        decoder.decodeStructPointer(url$.Url);
    val.dailyUpdateUrl =
        decoder.decodeStructPointer(url$.Url);
    val.trustedBiddingSignalsUrl =
        decoder.decodeStructPointer(url$.Url);
    val.trustedBiddingSignalsKeys =
        decoder.decodeArrayPointer(codec.String);
    val.userBiddingSignals =
        decoder.decodeStruct(codec.NullableString);
    val.ads =
        decoder.decodeArrayPointer(new codec.PointerTo(InterestGroupAd));
    val.adComponents =
        decoder.decodeArrayPointer(new codec.PointerTo(InterestGroupAd));
    return val;
  };

  InterestGroup.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterestGroup.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.Time, val.expiry);
    encoder.encodeStructPointer(origin$.Origin, val.owner);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.Double, val.priority);
    encoder.encodeStruct(codec.Int32, val.executionMode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.biddingUrl);
    encoder.encodeStructPointer(url$.Url, val.biddingWasmHelperUrl);
    encoder.encodeStructPointer(url$.Url, val.dailyUpdateUrl);
    encoder.encodeStructPointer(url$.Url, val.trustedBiddingSignalsUrl);
    encoder.encodeArrayPointer(codec.String, val.trustedBiddingSignalsKeys);
    encoder.encodeStruct(codec.NullableString, val.userBiddingSignals);
    encoder.encodeArrayPointer(new codec.PointerTo(InterestGroupAd), val.ads);
    encoder.encodeArrayPointer(new codec.PointerTo(InterestGroupAd), val.adComponents);
  };
  function AuctionAdConfigNonSharedParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AuctionAdConfigNonSharedParams.prototype.initDefaults_ = function() {
    this.interestGroupBuyers = null;
    this.auctionSignals = null;
    this.sellerSignals = null;
    this.sellerTimeout = null;
    this.perBuyerSignals = null;
    this.perBuyerTimeouts = null;
    this.allBuyersTimeout = null;
    this.perBuyerGroupLimits = null;
    this.allBuyersGroupLimit = 65535;
    this.componentAuctions = null;
  };
  AuctionAdConfigNonSharedParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AuctionAdConfigNonSharedParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 88}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.interestGroupBuyers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(origin$.Origin), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.auctionSignals
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.sellerSignals
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.sellerTimeout
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, time$.TimeDelta, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.perBuyerSignals
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 32, true, new codec.PointerTo(origin$.Origin), codec.String, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.perBuyerTimeouts
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 40, true, new codec.PointerTo(origin$.Origin), new codec.PointerTo(time$.TimeDelta), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.allBuyersTimeout
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, time$.TimeDelta, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.perBuyerGroupLimits
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 56, false, new codec.PointerTo(origin$.Origin), codec.Uint16, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate AuctionAdConfigNonSharedParams.componentAuctions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 72, 8, new codec.PointerTo(AuctionAdConfig), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AuctionAdConfigNonSharedParams.encodedSize = codec.kStructHeaderSize + 80;

  AuctionAdConfigNonSharedParams.decode = function(decoder) {
    var packed;
    var val = new AuctionAdConfigNonSharedParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.interestGroupBuyers =
        decoder.decodeArrayPointer(new codec.PointerTo(origin$.Origin));
    val.auctionSignals =
        decoder.decodeStruct(codec.NullableString);
    val.sellerSignals =
        decoder.decodeStruct(codec.NullableString);
    val.sellerTimeout =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.perBuyerSignals =
        decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), codec.String);
    val.perBuyerTimeouts =
        decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(time$.TimeDelta));
    val.allBuyersTimeout =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.perBuyerGroupLimits =
        decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), codec.Uint16);
    val.allBuyersGroupLimit =
        decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.componentAuctions =
        decoder.decodeArrayPointer(new codec.PointerTo(AuctionAdConfig));
    return val;
  };

  AuctionAdConfigNonSharedParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AuctionAdConfigNonSharedParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(origin$.Origin), val.interestGroupBuyers);
    encoder.encodeStruct(codec.NullableString, val.auctionSignals);
    encoder.encodeStruct(codec.NullableString, val.sellerSignals);
    encoder.encodeStructPointer(time$.TimeDelta, val.sellerTimeout);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), codec.String, val.perBuyerSignals);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(time$.TimeDelta), val.perBuyerTimeouts);
    encoder.encodeStructPointer(time$.TimeDelta, val.allBuyersTimeout);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), codec.Uint16, val.perBuyerGroupLimits);
    encoder.encodeStruct(codec.Uint16, val.allBuyersGroupLimit);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(AuctionAdConfig), val.componentAuctions);
  };
  function AuctionAdConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AuctionAdConfig.prototype.initDefaults_ = function() {
    this.seller = null;
    this.decisionLogicUrl = null;
    this.trustedScoringSignalsUrl = null;
    this.auctionAdConfigNonSharedParams = null;
    this.hasSellerExperimentGroupId = false;
    this.hasAllBuyerExperimentGroupId = false;
    this.sellerExperimentGroupId = 0;
    this.allBuyerExperimentGroupId = 0;
    this.perBuyerExperimentGroupIds = null;
  };
  AuctionAdConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AuctionAdConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfig.seller
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfig.decisionLogicUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfig.trustedScoringSignalsUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfig.auctionAdConfigNonSharedParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, AuctionAdConfigNonSharedParams, false);
    if (err !== validator.validationError.NONE)
        return err;






    // validate AuctionAdConfig.perBuyerExperimentGroupIds
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 40, false, new codec.PointerTo(origin$.Origin), codec.Uint16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AuctionAdConfig.encodedSize = codec.kStructHeaderSize + 48;

  AuctionAdConfig.decode = function(decoder) {
    var packed;
    var val = new AuctionAdConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.seller =
        decoder.decodeStructPointer(origin$.Origin);
    val.decisionLogicUrl =
        decoder.decodeStructPointer(url$.Url);
    val.trustedScoringSignalsUrl =
        decoder.decodeStructPointer(url$.Url);
    val.auctionAdConfigNonSharedParams =
        decoder.decodeStructPointer(AuctionAdConfigNonSharedParams);
    packed = decoder.readUint8();
    val.hasSellerExperimentGroupId = (packed >> 0) & 1 ? true : false;
    val.hasAllBuyerExperimentGroupId = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    val.sellerExperimentGroupId =
        decoder.decodeStruct(codec.Uint16);
    val.allBuyerExperimentGroupId =
        decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    val.perBuyerExperimentGroupIds =
        decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), codec.Uint16);
    return val;
  };

  AuctionAdConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AuctionAdConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.seller);
    encoder.encodeStructPointer(url$.Url, val.decisionLogicUrl);
    encoder.encodeStructPointer(url$.Url, val.trustedScoringSignalsUrl);
    encoder.encodeStructPointer(AuctionAdConfigNonSharedParams, val.auctionAdConfigNonSharedParams);
    packed = 0;
    packed |= (val.hasSellerExperimentGroupId & 1) << 0
    packed |= (val.hasAllBuyerExperimentGroupId & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint16, val.sellerExperimentGroupId);
    encoder.encodeStruct(codec.Int16, val.allBuyerExperimentGroupId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), codec.Uint16, val.perBuyerExperimentGroupIds);
  };
  exports.MAX_INTEREST_GROUP_SIZE = MAX_INTEREST_GROUP_SIZE;
  exports.InterestGroupAd = InterestGroupAd;
  exports.InterestGroup = InterestGroup;
  exports.AuctionAdConfigNonSharedParams = AuctionAdConfigNonSharedParams;
  exports.AuctionAdConfig = AuctionAdConfig;
})();