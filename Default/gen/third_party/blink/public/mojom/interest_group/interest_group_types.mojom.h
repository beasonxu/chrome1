// third_party/blink/public/mojom/interest_group/interest_group_types.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INTEREST_GROUP_INTEREST_GROUP_TYPES_MOJOM_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INTEREST_GROUP_INTEREST_GROUP_TYPES_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-shared.h"
#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-forward.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "url/mojom/origin.mojom.h"
#include "url/mojom/url.mojom.h"
#include <string>
#include <vector>




#include "third_party/blink/public/common/interest_group/auction_config_mojom_traits.h"
#include "third_party/blink/public/common/interest_group/interest_group_mojom_traits.h"
#include "third_party/blink/public/common/common_export.h"




namespace blink {
namespace mojom {











class BLINK_COMMON_EXPORT InterestGroupAd {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<InterestGroupAd, T>::value>;
  using DataView = InterestGroupAdDataView;
  using Data_ = internal::InterestGroupAd_Data;

  template <typename... Args>
  static InterestGroupAdPtr New(Args&&... args) {
    return InterestGroupAdPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static InterestGroupAdPtr From(const U& u) {
    return mojo::TypeConverter<InterestGroupAdPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, InterestGroupAd>::Convert(*this);
  }


  InterestGroupAd();

  InterestGroupAd(
      const ::GURL& render_url,
      const absl::optional<std::string>& metadata);


  ~InterestGroupAd();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = InterestGroupAdPtr>
  InterestGroupAdPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, InterestGroupAd::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, InterestGroupAd::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        InterestGroupAd::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        InterestGroupAd::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::InterestGroupAd_UnserializedMessageContext<
            UserType, InterestGroupAd::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<InterestGroupAd::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return InterestGroupAd::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::InterestGroupAd_UnserializedMessageContext<
            UserType, InterestGroupAd::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<InterestGroupAd::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::GURL render_url;
  
  absl::optional<std::string> metadata;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, InterestGroupAd::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, InterestGroupAd::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, InterestGroupAd::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, InterestGroupAd::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_COMMON_EXPORT InterestGroup {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<InterestGroup, T>::value>;
  using DataView = InterestGroupDataView;
  using Data_ = internal::InterestGroup_Data;
  using ExecutionMode = InterestGroup_ExecutionMode;

  template <typename... Args>
  static InterestGroupPtr New(Args&&... args) {
    return InterestGroupPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static InterestGroupPtr From(const U& u) {
    return mojo::TypeConverter<InterestGroupPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, InterestGroup>::Convert(*this);
  }


  InterestGroup();

  InterestGroup(
      ::base::Time expiry,
      const ::url::Origin& owner,
      const std::string& name,
      double priority,
      InterestGroup::ExecutionMode execution_mode,
      const absl::optional<::GURL>& bidding_url,
      const absl::optional<::GURL>& bidding_wasm_helper_url,
      const absl::optional<::GURL>& daily_update_url,
      const absl::optional<::GURL>& trusted_bidding_signals_url,
      absl::optional<std::vector<std::string>> trusted_bidding_signals_keys,
      const absl::optional<std::string>& user_bidding_signals,
      absl::optional<std::vector<::blink::InterestGroup::Ad>> ads,
      absl::optional<std::vector<::blink::InterestGroup::Ad>> ad_components);


  ~InterestGroup();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = InterestGroupPtr>
  InterestGroupPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, InterestGroup::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, InterestGroup::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        InterestGroup::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        InterestGroup::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::InterestGroup_UnserializedMessageContext<
            UserType, InterestGroup::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<InterestGroup::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return InterestGroup::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::InterestGroup_UnserializedMessageContext<
            UserType, InterestGroup::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<InterestGroup::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::base::Time expiry;
  
  ::url::Origin owner;
  
  std::string name;
  
  double priority;
  
  InterestGroup::ExecutionMode execution_mode;
  
  absl::optional<::GURL> bidding_url;
  
  absl::optional<::GURL> bidding_wasm_helper_url;
  
  absl::optional<::GURL> daily_update_url;
  
  absl::optional<::GURL> trusted_bidding_signals_url;
  
  absl::optional<std::vector<std::string>> trusted_bidding_signals_keys;
  
  absl::optional<std::string> user_bidding_signals;
  
  absl::optional<std::vector<::blink::InterestGroup::Ad>> ads;
  
  absl::optional<std::vector<::blink::InterestGroup::Ad>> ad_components;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, InterestGroup::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, InterestGroup::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, InterestGroup::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, InterestGroup::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_COMMON_EXPORT AuctionAdConfigNonSharedParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AuctionAdConfigNonSharedParams, T>::value>;
  using DataView = AuctionAdConfigNonSharedParamsDataView;
  using Data_ = internal::AuctionAdConfigNonSharedParams_Data;

  template <typename... Args>
  static AuctionAdConfigNonSharedParamsPtr New(Args&&... args) {
    return AuctionAdConfigNonSharedParamsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AuctionAdConfigNonSharedParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuctionAdConfigNonSharedParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuctionAdConfigNonSharedParams>::Convert(*this);
  }


  AuctionAdConfigNonSharedParams();

  AuctionAdConfigNonSharedParams(
      absl::optional<std::vector<::url::Origin>> interest_group_buyers,
      const absl::optional<std::string>& auction_signals,
      const absl::optional<std::string>& seller_signals,
      absl::optional<::base::TimeDelta> seller_timeout,
      const absl::optional<base::flat_map<::url::Origin, std::string>>& per_buyer_signals,
      const absl::optional<base::flat_map<::url::Origin, ::base::TimeDelta>>& per_buyer_timeouts,
      absl::optional<::base::TimeDelta> all_buyers_timeout,
      const base::flat_map<::url::Origin, uint16_t>& per_buyer_group_limits,
      uint16_t all_buyers_group_limit,
      std::vector<::blink::AuctionConfig> component_auctions);


  ~AuctionAdConfigNonSharedParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AuctionAdConfigNonSharedParamsPtr>
  AuctionAdConfigNonSharedParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AuctionAdConfigNonSharedParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AuctionAdConfigNonSharedParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AuctionAdConfigNonSharedParams::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AuctionAdConfigNonSharedParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AuctionAdConfigNonSharedParams_UnserializedMessageContext<
            UserType, AuctionAdConfigNonSharedParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AuctionAdConfigNonSharedParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return AuctionAdConfigNonSharedParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AuctionAdConfigNonSharedParams_UnserializedMessageContext<
            UserType, AuctionAdConfigNonSharedParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AuctionAdConfigNonSharedParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  absl::optional<std::vector<::url::Origin>> interest_group_buyers;
  
  absl::optional<std::string> auction_signals;
  
  absl::optional<std::string> seller_signals;
  
  absl::optional<::base::TimeDelta> seller_timeout;
  
  absl::optional<base::flat_map<::url::Origin, std::string>> per_buyer_signals;
  
  absl::optional<base::flat_map<::url::Origin, ::base::TimeDelta>> per_buyer_timeouts;
  
  absl::optional<::base::TimeDelta> all_buyers_timeout;
  
  base::flat_map<::url::Origin, uint16_t> per_buyer_group_limits;
  
  uint16_t all_buyers_group_limit;
  
  std::vector<::blink::AuctionConfig> component_auctions;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AuctionAdConfigNonSharedParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AuctionAdConfigNonSharedParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AuctionAdConfigNonSharedParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AuctionAdConfigNonSharedParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_COMMON_EXPORT AuctionAdConfig {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AuctionAdConfig, T>::value>;
  using DataView = AuctionAdConfigDataView;
  using Data_ = internal::AuctionAdConfig_Data;

  template <typename... Args>
  static AuctionAdConfigPtr New(Args&&... args) {
    return AuctionAdConfigPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AuctionAdConfigPtr From(const U& u) {
    return mojo::TypeConverter<AuctionAdConfigPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuctionAdConfig>::Convert(*this);
  }


  AuctionAdConfig();

  AuctionAdConfig(
      const ::url::Origin& seller,
      const ::GURL& decision_logic_url,
      const absl::optional<::GURL>& trusted_scoring_signals_url,
      const ::blink::AuctionConfig::NonSharedParams& auction_ad_config_non_shared_params,
      bool has_seller_experiment_group_id,
      uint16_t seller_experiment_group_id,
      bool has_all_buyer_experiment_group_id,
      int16_t all_buyer_experiment_group_id,
      const base::flat_map<::url::Origin, uint16_t>& per_buyer_experiment_group_ids);


  ~AuctionAdConfig();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AuctionAdConfigPtr>
  AuctionAdConfigPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AuctionAdConfig::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AuctionAdConfig::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AuctionAdConfig::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AuctionAdConfig::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AuctionAdConfig_UnserializedMessageContext<
            UserType, AuctionAdConfig::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AuctionAdConfig::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return AuctionAdConfig::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AuctionAdConfig_UnserializedMessageContext<
            UserType, AuctionAdConfig::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AuctionAdConfig::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::url::Origin seller;
  
  ::GURL decision_logic_url;
  
  absl::optional<::GURL> trusted_scoring_signals_url;
  
  ::blink::AuctionConfig::NonSharedParams auction_ad_config_non_shared_params;
  
  bool has_seller_experiment_group_id;
  
  uint16_t seller_experiment_group_id;
  
  bool has_all_buyer_experiment_group_id;
  
  int16_t all_buyer_experiment_group_id;
  
  base::flat_map<::url::Origin, uint16_t> per_buyer_experiment_group_ids;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AuctionAdConfig::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AuctionAdConfig::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AuctionAdConfig::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AuctionAdConfig::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
InterestGroupAdPtr InterestGroupAd::Clone() const {
  return New(
      mojo::Clone(render_url),
      mojo::Clone(metadata)
  );
}

template <typename T, InterestGroupAd::EnableIfSame<T>*>
bool InterestGroupAd::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->render_url, other_struct.render_url))
    return false;
  if (!mojo::Equals(this->metadata, other_struct.metadata))
    return false;
  return true;
}

template <typename T, InterestGroupAd::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.render_url < rhs.render_url)
    return true;
  if (rhs.render_url < lhs.render_url)
    return false;
  if (lhs.metadata < rhs.metadata)
    return true;
  if (rhs.metadata < lhs.metadata)
    return false;
  return false;
}
template <typename StructPtrType>
InterestGroupPtr InterestGroup::Clone() const {
  return New(
      mojo::Clone(expiry),
      mojo::Clone(owner),
      mojo::Clone(name),
      mojo::Clone(priority),
      mojo::Clone(execution_mode),
      mojo::Clone(bidding_url),
      mojo::Clone(bidding_wasm_helper_url),
      mojo::Clone(daily_update_url),
      mojo::Clone(trusted_bidding_signals_url),
      mojo::Clone(trusted_bidding_signals_keys),
      mojo::Clone(user_bidding_signals),
      mojo::Clone(ads),
      mojo::Clone(ad_components)
  );
}

template <typename T, InterestGroup::EnableIfSame<T>*>
bool InterestGroup::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->expiry, other_struct.expiry))
    return false;
  if (!mojo::Equals(this->owner, other_struct.owner))
    return false;
  if (!mojo::Equals(this->name, other_struct.name))
    return false;
  if (!mojo::Equals(this->priority, other_struct.priority))
    return false;
  if (!mojo::Equals(this->execution_mode, other_struct.execution_mode))
    return false;
  if (!mojo::Equals(this->bidding_url, other_struct.bidding_url))
    return false;
  if (!mojo::Equals(this->bidding_wasm_helper_url, other_struct.bidding_wasm_helper_url))
    return false;
  if (!mojo::Equals(this->daily_update_url, other_struct.daily_update_url))
    return false;
  if (!mojo::Equals(this->trusted_bidding_signals_url, other_struct.trusted_bidding_signals_url))
    return false;
  if (!mojo::Equals(this->trusted_bidding_signals_keys, other_struct.trusted_bidding_signals_keys))
    return false;
  if (!mojo::Equals(this->user_bidding_signals, other_struct.user_bidding_signals))
    return false;
  if (!mojo::Equals(this->ads, other_struct.ads))
    return false;
  if (!mojo::Equals(this->ad_components, other_struct.ad_components))
    return false;
  return true;
}

template <typename T, InterestGroup::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.expiry < rhs.expiry)
    return true;
  if (rhs.expiry < lhs.expiry)
    return false;
  if (lhs.owner < rhs.owner)
    return true;
  if (rhs.owner < lhs.owner)
    return false;
  if (lhs.name < rhs.name)
    return true;
  if (rhs.name < lhs.name)
    return false;
  if (lhs.priority < rhs.priority)
    return true;
  if (rhs.priority < lhs.priority)
    return false;
  if (lhs.execution_mode < rhs.execution_mode)
    return true;
  if (rhs.execution_mode < lhs.execution_mode)
    return false;
  if (lhs.bidding_url < rhs.bidding_url)
    return true;
  if (rhs.bidding_url < lhs.bidding_url)
    return false;
  if (lhs.bidding_wasm_helper_url < rhs.bidding_wasm_helper_url)
    return true;
  if (rhs.bidding_wasm_helper_url < lhs.bidding_wasm_helper_url)
    return false;
  if (lhs.daily_update_url < rhs.daily_update_url)
    return true;
  if (rhs.daily_update_url < lhs.daily_update_url)
    return false;
  if (lhs.trusted_bidding_signals_url < rhs.trusted_bidding_signals_url)
    return true;
  if (rhs.trusted_bidding_signals_url < lhs.trusted_bidding_signals_url)
    return false;
  if (lhs.trusted_bidding_signals_keys < rhs.trusted_bidding_signals_keys)
    return true;
  if (rhs.trusted_bidding_signals_keys < lhs.trusted_bidding_signals_keys)
    return false;
  if (lhs.user_bidding_signals < rhs.user_bidding_signals)
    return true;
  if (rhs.user_bidding_signals < lhs.user_bidding_signals)
    return false;
  if (lhs.ads < rhs.ads)
    return true;
  if (rhs.ads < lhs.ads)
    return false;
  if (lhs.ad_components < rhs.ad_components)
    return true;
  if (rhs.ad_components < lhs.ad_components)
    return false;
  return false;
}
template <typename StructPtrType>
AuctionAdConfigNonSharedParamsPtr AuctionAdConfigNonSharedParams::Clone() const {
  return New(
      mojo::Clone(interest_group_buyers),
      mojo::Clone(auction_signals),
      mojo::Clone(seller_signals),
      mojo::Clone(seller_timeout),
      mojo::Clone(per_buyer_signals),
      mojo::Clone(per_buyer_timeouts),
      mojo::Clone(all_buyers_timeout),
      mojo::Clone(per_buyer_group_limits),
      mojo::Clone(all_buyers_group_limit),
      mojo::Clone(component_auctions)
  );
}

template <typename T, AuctionAdConfigNonSharedParams::EnableIfSame<T>*>
bool AuctionAdConfigNonSharedParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->interest_group_buyers, other_struct.interest_group_buyers))
    return false;
  if (!mojo::Equals(this->auction_signals, other_struct.auction_signals))
    return false;
  if (!mojo::Equals(this->seller_signals, other_struct.seller_signals))
    return false;
  if (!mojo::Equals(this->seller_timeout, other_struct.seller_timeout))
    return false;
  if (!mojo::Equals(this->per_buyer_signals, other_struct.per_buyer_signals))
    return false;
  if (!mojo::Equals(this->per_buyer_timeouts, other_struct.per_buyer_timeouts))
    return false;
  if (!mojo::Equals(this->all_buyers_timeout, other_struct.all_buyers_timeout))
    return false;
  if (!mojo::Equals(this->per_buyer_group_limits, other_struct.per_buyer_group_limits))
    return false;
  if (!mojo::Equals(this->all_buyers_group_limit, other_struct.all_buyers_group_limit))
    return false;
  if (!mojo::Equals(this->component_auctions, other_struct.component_auctions))
    return false;
  return true;
}

template <typename T, AuctionAdConfigNonSharedParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.interest_group_buyers < rhs.interest_group_buyers)
    return true;
  if (rhs.interest_group_buyers < lhs.interest_group_buyers)
    return false;
  if (lhs.auction_signals < rhs.auction_signals)
    return true;
  if (rhs.auction_signals < lhs.auction_signals)
    return false;
  if (lhs.seller_signals < rhs.seller_signals)
    return true;
  if (rhs.seller_signals < lhs.seller_signals)
    return false;
  if (lhs.seller_timeout < rhs.seller_timeout)
    return true;
  if (rhs.seller_timeout < lhs.seller_timeout)
    return false;
  if (lhs.per_buyer_signals < rhs.per_buyer_signals)
    return true;
  if (rhs.per_buyer_signals < lhs.per_buyer_signals)
    return false;
  if (lhs.per_buyer_timeouts < rhs.per_buyer_timeouts)
    return true;
  if (rhs.per_buyer_timeouts < lhs.per_buyer_timeouts)
    return false;
  if (lhs.all_buyers_timeout < rhs.all_buyers_timeout)
    return true;
  if (rhs.all_buyers_timeout < lhs.all_buyers_timeout)
    return false;
  if (lhs.per_buyer_group_limits < rhs.per_buyer_group_limits)
    return true;
  if (rhs.per_buyer_group_limits < lhs.per_buyer_group_limits)
    return false;
  if (lhs.all_buyers_group_limit < rhs.all_buyers_group_limit)
    return true;
  if (rhs.all_buyers_group_limit < lhs.all_buyers_group_limit)
    return false;
  if (lhs.component_auctions < rhs.component_auctions)
    return true;
  if (rhs.component_auctions < lhs.component_auctions)
    return false;
  return false;
}
template <typename StructPtrType>
AuctionAdConfigPtr AuctionAdConfig::Clone() const {
  return New(
      mojo::Clone(seller),
      mojo::Clone(decision_logic_url),
      mojo::Clone(trusted_scoring_signals_url),
      mojo::Clone(auction_ad_config_non_shared_params),
      mojo::Clone(has_seller_experiment_group_id),
      mojo::Clone(seller_experiment_group_id),
      mojo::Clone(has_all_buyer_experiment_group_id),
      mojo::Clone(all_buyer_experiment_group_id),
      mojo::Clone(per_buyer_experiment_group_ids)
  );
}

template <typename T, AuctionAdConfig::EnableIfSame<T>*>
bool AuctionAdConfig::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->seller, other_struct.seller))
    return false;
  if (!mojo::Equals(this->decision_logic_url, other_struct.decision_logic_url))
    return false;
  if (!mojo::Equals(this->trusted_scoring_signals_url, other_struct.trusted_scoring_signals_url))
    return false;
  if (!mojo::Equals(this->auction_ad_config_non_shared_params, other_struct.auction_ad_config_non_shared_params))
    return false;
  if (!mojo::Equals(this->has_seller_experiment_group_id, other_struct.has_seller_experiment_group_id))
    return false;
  if (!mojo::Equals(this->seller_experiment_group_id, other_struct.seller_experiment_group_id))
    return false;
  if (!mojo::Equals(this->has_all_buyer_experiment_group_id, other_struct.has_all_buyer_experiment_group_id))
    return false;
  if (!mojo::Equals(this->all_buyer_experiment_group_id, other_struct.all_buyer_experiment_group_id))
    return false;
  if (!mojo::Equals(this->per_buyer_experiment_group_ids, other_struct.per_buyer_experiment_group_ids))
    return false;
  return true;
}

template <typename T, AuctionAdConfig::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.seller < rhs.seller)
    return true;
  if (rhs.seller < lhs.seller)
    return false;
  if (lhs.decision_logic_url < rhs.decision_logic_url)
    return true;
  if (rhs.decision_logic_url < lhs.decision_logic_url)
    return false;
  if (lhs.trusted_scoring_signals_url < rhs.trusted_scoring_signals_url)
    return true;
  if (rhs.trusted_scoring_signals_url < lhs.trusted_scoring_signals_url)
    return false;
  if (lhs.auction_ad_config_non_shared_params < rhs.auction_ad_config_non_shared_params)
    return true;
  if (rhs.auction_ad_config_non_shared_params < lhs.auction_ad_config_non_shared_params)
    return false;
  if (lhs.has_seller_experiment_group_id < rhs.has_seller_experiment_group_id)
    return true;
  if (rhs.has_seller_experiment_group_id < lhs.has_seller_experiment_group_id)
    return false;
  if (lhs.seller_experiment_group_id < rhs.seller_experiment_group_id)
    return true;
  if (rhs.seller_experiment_group_id < lhs.seller_experiment_group_id)
    return false;
  if (lhs.has_all_buyer_experiment_group_id < rhs.has_all_buyer_experiment_group_id)
    return true;
  if (rhs.has_all_buyer_experiment_group_id < lhs.has_all_buyer_experiment_group_id)
    return false;
  if (lhs.all_buyer_experiment_group_id < rhs.all_buyer_experiment_group_id)
    return true;
  if (rhs.all_buyer_experiment_group_id < lhs.all_buyer_experiment_group_id)
    return false;
  if (lhs.per_buyer_experiment_group_ids < rhs.per_buyer_experiment_group_ids)
    return true;
  if (rhs.per_buyer_experiment_group_ids < lhs.per_buyer_experiment_group_ids)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::InterestGroupAd::DataView,
                                         ::blink::mojom::InterestGroupAdPtr> {
  static bool IsNull(const ::blink::mojom::InterestGroupAdPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::InterestGroupAdPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::InterestGroupAd::render_url)& render_url(
      const ::blink::mojom::InterestGroupAdPtr& input) {
    return input->render_url;
  }

  static const decltype(::blink::mojom::InterestGroupAd::metadata)& metadata(
      const ::blink::mojom::InterestGroupAdPtr& input) {
    return input->metadata;
  }

  static bool Read(::blink::mojom::InterestGroupAd::DataView input, ::blink::mojom::InterestGroupAdPtr* output);
};


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::InterestGroup::DataView,
                                         ::blink::mojom::InterestGroupPtr> {
  static bool IsNull(const ::blink::mojom::InterestGroupPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::InterestGroupPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::InterestGroup::expiry)& expiry(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->expiry;
  }

  static const decltype(::blink::mojom::InterestGroup::owner)& owner(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->owner;
  }

  static const decltype(::blink::mojom::InterestGroup::name)& name(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->name;
  }

  static decltype(::blink::mojom::InterestGroup::priority) priority(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->priority;
  }

  static decltype(::blink::mojom::InterestGroup::execution_mode) execution_mode(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->execution_mode;
  }

  static const decltype(::blink::mojom::InterestGroup::bidding_url)& bidding_url(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->bidding_url;
  }

  static const decltype(::blink::mojom::InterestGroup::bidding_wasm_helper_url)& bidding_wasm_helper_url(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->bidding_wasm_helper_url;
  }

  static const decltype(::blink::mojom::InterestGroup::daily_update_url)& daily_update_url(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->daily_update_url;
  }

  static const decltype(::blink::mojom::InterestGroup::trusted_bidding_signals_url)& trusted_bidding_signals_url(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->trusted_bidding_signals_url;
  }

  static const decltype(::blink::mojom::InterestGroup::trusted_bidding_signals_keys)& trusted_bidding_signals_keys(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->trusted_bidding_signals_keys;
  }

  static const decltype(::blink::mojom::InterestGroup::user_bidding_signals)& user_bidding_signals(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->user_bidding_signals;
  }

  static const decltype(::blink::mojom::InterestGroup::ads)& ads(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->ads;
  }

  static const decltype(::blink::mojom::InterestGroup::ad_components)& ad_components(
      const ::blink::mojom::InterestGroupPtr& input) {
    return input->ad_components;
  }

  static bool Read(::blink::mojom::InterestGroup::DataView input, ::blink::mojom::InterestGroupPtr* output);
};


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::AuctionAdConfigNonSharedParams::DataView,
                                         ::blink::mojom::AuctionAdConfigNonSharedParamsPtr> {
  static bool IsNull(const ::blink::mojom::AuctionAdConfigNonSharedParamsPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::AuctionAdConfigNonSharedParamsPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::AuctionAdConfigNonSharedParams::interest_group_buyers)& interest_group_buyers(
      const ::blink::mojom::AuctionAdConfigNonSharedParamsPtr& input) {
    return input->interest_group_buyers;
  }

  static const decltype(::blink::mojom::AuctionAdConfigNonSharedParams::auction_signals)& auction_signals(
      const ::blink::mojom::AuctionAdConfigNonSharedParamsPtr& input) {
    return input->auction_signals;
  }

  static const decltype(::blink::mojom::AuctionAdConfigNonSharedParams::seller_signals)& seller_signals(
      const ::blink::mojom::AuctionAdConfigNonSharedParamsPtr& input) {
    return input->seller_signals;
  }

  static const decltype(::blink::mojom::AuctionAdConfigNonSharedParams::seller_timeout)& seller_timeout(
      const ::blink::mojom::AuctionAdConfigNonSharedParamsPtr& input) {
    return input->seller_timeout;
  }

  static const decltype(::blink::mojom::AuctionAdConfigNonSharedParams::per_buyer_signals)& per_buyer_signals(
      const ::blink::mojom::AuctionAdConfigNonSharedParamsPtr& input) {
    return input->per_buyer_signals;
  }

  static const decltype(::blink::mojom::AuctionAdConfigNonSharedParams::per_buyer_timeouts)& per_buyer_timeouts(
      const ::blink::mojom::AuctionAdConfigNonSharedParamsPtr& input) {
    return input->per_buyer_timeouts;
  }

  static const decltype(::blink::mojom::AuctionAdConfigNonSharedParams::all_buyers_timeout)& all_buyers_timeout(
      const ::blink::mojom::AuctionAdConfigNonSharedParamsPtr& input) {
    return input->all_buyers_timeout;
  }

  static const decltype(::blink::mojom::AuctionAdConfigNonSharedParams::per_buyer_group_limits)& per_buyer_group_limits(
      const ::blink::mojom::AuctionAdConfigNonSharedParamsPtr& input) {
    return input->per_buyer_group_limits;
  }

  static decltype(::blink::mojom::AuctionAdConfigNonSharedParams::all_buyers_group_limit) all_buyers_group_limit(
      const ::blink::mojom::AuctionAdConfigNonSharedParamsPtr& input) {
    return input->all_buyers_group_limit;
  }

  static const decltype(::blink::mojom::AuctionAdConfigNonSharedParams::component_auctions)& component_auctions(
      const ::blink::mojom::AuctionAdConfigNonSharedParamsPtr& input) {
    return input->component_auctions;
  }

  static bool Read(::blink::mojom::AuctionAdConfigNonSharedParams::DataView input, ::blink::mojom::AuctionAdConfigNonSharedParamsPtr* output);
};


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::AuctionAdConfig::DataView,
                                         ::blink::mojom::AuctionAdConfigPtr> {
  static bool IsNull(const ::blink::mojom::AuctionAdConfigPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::AuctionAdConfigPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::AuctionAdConfig::seller)& seller(
      const ::blink::mojom::AuctionAdConfigPtr& input) {
    return input->seller;
  }

  static const decltype(::blink::mojom::AuctionAdConfig::decision_logic_url)& decision_logic_url(
      const ::blink::mojom::AuctionAdConfigPtr& input) {
    return input->decision_logic_url;
  }

  static const decltype(::blink::mojom::AuctionAdConfig::trusted_scoring_signals_url)& trusted_scoring_signals_url(
      const ::blink::mojom::AuctionAdConfigPtr& input) {
    return input->trusted_scoring_signals_url;
  }

  static const decltype(::blink::mojom::AuctionAdConfig::auction_ad_config_non_shared_params)& auction_ad_config_non_shared_params(
      const ::blink::mojom::AuctionAdConfigPtr& input) {
    return input->auction_ad_config_non_shared_params;
  }

  static decltype(::blink::mojom::AuctionAdConfig::has_seller_experiment_group_id) has_seller_experiment_group_id(
      const ::blink::mojom::AuctionAdConfigPtr& input) {
    return input->has_seller_experiment_group_id;
  }

  static decltype(::blink::mojom::AuctionAdConfig::seller_experiment_group_id) seller_experiment_group_id(
      const ::blink::mojom::AuctionAdConfigPtr& input) {
    return input->seller_experiment_group_id;
  }

  static decltype(::blink::mojom::AuctionAdConfig::has_all_buyer_experiment_group_id) has_all_buyer_experiment_group_id(
      const ::blink::mojom::AuctionAdConfigPtr& input) {
    return input->has_all_buyer_experiment_group_id;
  }

  static decltype(::blink::mojom::AuctionAdConfig::all_buyer_experiment_group_id) all_buyer_experiment_group_id(
      const ::blink::mojom::AuctionAdConfigPtr& input) {
    return input->all_buyer_experiment_group_id;
  }

  static const decltype(::blink::mojom::AuctionAdConfig::per_buyer_experiment_group_ids)& per_buyer_experiment_group_ids(
      const ::blink::mojom::AuctionAdConfigPtr& input) {
    return input->per_buyer_experiment_group_ids;
  }

  static bool Read(::blink::mojom::AuctionAdConfig::DataView input, ::blink::mojom::AuctionAdConfigPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_INTEREST_GROUP_INTEREST_GROUP_TYPES_MOJOM_H_