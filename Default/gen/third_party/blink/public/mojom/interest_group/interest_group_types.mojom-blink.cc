// third_party/blink/public/mojom/interest_group/interest_group_types.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-params-data.h"
#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INTEREST_GROUP_INTEREST_GROUP_TYPES_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INTEREST_GROUP_INTEREST_GROUP_TYPES_MOJOM_BLINK_JUMBO_H_
#endif



namespace blink {
namespace mojom {
namespace blink {
InterestGroupAd::InterestGroupAd()
    : render_url(),
      metadata() {}

InterestGroupAd::InterestGroupAd(
    const ::blink::KURL& render_url_in,
    const WTF::String& metadata_in)
    : render_url(std::move(render_url_in)),
      metadata(std::move(metadata_in)) {}

InterestGroupAd::~InterestGroupAd() = default;

void InterestGroupAd::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "render_url"), this->render_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::KURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "metadata"), this->metadata,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool InterestGroupAd::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
InterestGroup::InterestGroup()
    : expiry(),
      owner(),
      name(),
      priority(0.0),
      execution_mode(InterestGroup_ExecutionMode::kCompatibilityMode),
      bidding_url(),
      bidding_wasm_helper_url(),
      daily_update_url(),
      trusted_bidding_signals_url(),
      trusted_bidding_signals_keys(),
      user_bidding_signals(),
      ads(),
      ad_components() {}

InterestGroup::InterestGroup(
    ::base::Time expiry_in,
    const ::scoped_refptr<const ::blink::SecurityOrigin>& owner_in,
    const WTF::String& name_in,
    double priority_in,
    InterestGroup::ExecutionMode execution_mode_in,
    const absl::optional<::blink::KURL>& bidding_url_in,
    const absl::optional<::blink::KURL>& bidding_wasm_helper_url_in,
    const absl::optional<::blink::KURL>& daily_update_url_in,
    const absl::optional<::blink::KURL>& trusted_bidding_signals_url_in,
    absl::optional<WTF::Vector<WTF::String>> trusted_bidding_signals_keys_in,
    const WTF::String& user_bidding_signals_in,
    absl::optional<WTF::Vector<InterestGroupAdPtr>> ads_in,
    absl::optional<WTF::Vector<InterestGroupAdPtr>> ad_components_in)
    : expiry(std::move(expiry_in)),
      owner(std::move(owner_in)),
      name(std::move(name_in)),
      priority(std::move(priority_in)),
      execution_mode(std::move(execution_mode_in)),
      bidding_url(std::move(bidding_url_in)),
      bidding_wasm_helper_url(std::move(bidding_wasm_helper_url_in)),
      daily_update_url(std::move(daily_update_url_in)),
      trusted_bidding_signals_url(std::move(trusted_bidding_signals_url_in)),
      trusted_bidding_signals_keys(std::move(trusted_bidding_signals_keys_in)),
      user_bidding_signals(std::move(user_bidding_signals_in)),
      ads(std::move(ads_in)),
      ad_components(std::move(ad_components_in)) {}

InterestGroup::~InterestGroup() = default;

void InterestGroup::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "expiry"), this->expiry,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::Time>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "owner"), this->owner,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "priority"), this->priority,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type double>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "execution_mode"), this->execution_mode,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type InterestGroup::ExecutionMode>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bidding_url"), this->bidding_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::blink::KURL>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bidding_wasm_helper_url"), this->bidding_wasm_helper_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::blink::KURL>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "daily_update_url"), this->daily_update_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::blink::KURL>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "trusted_bidding_signals_url"), this->trusted_bidding_signals_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::blink::KURL>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "trusted_bidding_signals_keys"), this->trusted_bidding_signals_keys,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<WTF::Vector<WTF::String>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "user_bidding_signals"), this->user_bidding_signals,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "ads"), this->ads,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type absl::optional<WTF::Vector<InterestGroupAdPtr>>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "ad_components"), this->ad_components,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type absl::optional<WTF::Vector<InterestGroupAdPtr>>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool InterestGroup::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AuctionAdConfigNonSharedParams::AuctionAdConfigNonSharedParams()
    : interest_group_buyers(),
      auction_signals(),
      seller_signals(),
      seller_timeout(),
      per_buyer_signals(),
      per_buyer_timeouts(),
      all_buyers_timeout(),
      per_buyer_group_limits(),
      all_buyers_group_limit(65535U),
      component_auctions() {}

AuctionAdConfigNonSharedParams::AuctionAdConfigNonSharedParams(
    absl::optional<WTF::Vector<::scoped_refptr<const ::blink::SecurityOrigin>>> interest_group_buyers_in,
    const WTF::String& auction_signals_in,
    const WTF::String& seller_signals_in,
    absl::optional<::base::TimeDelta> seller_timeout_in,
    const absl::optional<WTF::HashMap<::scoped_refptr<const ::blink::SecurityOrigin>, WTF::String>>& per_buyer_signals_in,
    const absl::optional<WTF::HashMap<::scoped_refptr<const ::blink::SecurityOrigin>, ::base::TimeDelta>>& per_buyer_timeouts_in,
    absl::optional<::base::TimeDelta> all_buyers_timeout_in,
    const WTF::HashMap<::scoped_refptr<const ::blink::SecurityOrigin>, uint16_t>& per_buyer_group_limits_in,
    uint16_t all_buyers_group_limit_in,
    WTF::Vector<AuctionAdConfigPtr> component_auctions_in)
    : interest_group_buyers(std::move(interest_group_buyers_in)),
      auction_signals(std::move(auction_signals_in)),
      seller_signals(std::move(seller_signals_in)),
      seller_timeout(std::move(seller_timeout_in)),
      per_buyer_signals(std::move(per_buyer_signals_in)),
      per_buyer_timeouts(std::move(per_buyer_timeouts_in)),
      all_buyers_timeout(std::move(all_buyers_timeout_in)),
      per_buyer_group_limits(std::move(per_buyer_group_limits_in)),
      all_buyers_group_limit(std::move(all_buyers_group_limit_in)),
      component_auctions(std::move(component_auctions_in)) {}

AuctionAdConfigNonSharedParams::~AuctionAdConfigNonSharedParams() = default;

void AuctionAdConfigNonSharedParams::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "interest_group_buyers"), this->interest_group_buyers,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<WTF::Vector<::scoped_refptr<const ::blink::SecurityOrigin>>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "auction_signals"), this->auction_signals,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "seller_signals"), this->seller_signals,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "seller_timeout"), this->seller_timeout,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type absl::optional<::base::TimeDelta>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "per_buyer_signals"), this->per_buyer_signals,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<WTF::HashMap<::scoped_refptr<const ::blink::SecurityOrigin>, WTF::String>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "per_buyer_timeouts"), this->per_buyer_timeouts,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<WTF::HashMap<::scoped_refptr<const ::blink::SecurityOrigin>, ::base::TimeDelta>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "all_buyers_timeout"), this->all_buyers_timeout,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type absl::optional<::base::TimeDelta>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "per_buyer_group_limits"), this->per_buyer_group_limits,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<::scoped_refptr<const ::blink::SecurityOrigin>, uint16_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "all_buyers_group_limit"), this->all_buyers_group_limit,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint16_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "component_auctions"), this->component_auctions,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type WTF::Vector<AuctionAdConfigPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AuctionAdConfigNonSharedParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AuctionAdConfig::AuctionAdConfig()
    : seller(),
      decision_logic_url(),
      trusted_scoring_signals_url(),
      auction_ad_config_non_shared_params(),
      has_seller_experiment_group_id(false),
      seller_experiment_group_id(),
      has_all_buyer_experiment_group_id(false),
      all_buyer_experiment_group_id(),
      per_buyer_experiment_group_ids() {}

AuctionAdConfig::AuctionAdConfig(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& seller_in,
    const ::blink::KURL& decision_logic_url_in,
    const absl::optional<::blink::KURL>& trusted_scoring_signals_url_in,
    AuctionAdConfigNonSharedParamsPtr auction_ad_config_non_shared_params_in,
    bool has_seller_experiment_group_id_in,
    uint16_t seller_experiment_group_id_in,
    bool has_all_buyer_experiment_group_id_in,
    int16_t all_buyer_experiment_group_id_in,
    const WTF::HashMap<::scoped_refptr<const ::blink::SecurityOrigin>, uint16_t>& per_buyer_experiment_group_ids_in)
    : seller(std::move(seller_in)),
      decision_logic_url(std::move(decision_logic_url_in)),
      trusted_scoring_signals_url(std::move(trusted_scoring_signals_url_in)),
      auction_ad_config_non_shared_params(std::move(auction_ad_config_non_shared_params_in)),
      has_seller_experiment_group_id(std::move(has_seller_experiment_group_id_in)),
      seller_experiment_group_id(std::move(seller_experiment_group_id_in)),
      has_all_buyer_experiment_group_id(std::move(has_all_buyer_experiment_group_id_in)),
      all_buyer_experiment_group_id(std::move(all_buyer_experiment_group_id_in)),
      per_buyer_experiment_group_ids(std::move(per_buyer_experiment_group_ids_in)) {}

AuctionAdConfig::~AuctionAdConfig() = default;

void AuctionAdConfig::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "seller"), this->seller,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "decision_logic_url"), this->decision_logic_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::KURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "trusted_scoring_signals_url"), this->trusted_scoring_signals_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::blink::KURL>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "auction_ad_config_non_shared_params"), this->auction_ad_config_non_shared_params,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type AuctionAdConfigNonSharedParamsPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_seller_experiment_group_id"), this->has_seller_experiment_group_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "seller_experiment_group_id"), this->seller_experiment_group_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint16_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_all_buyer_experiment_group_id"), this->has_all_buyer_experiment_group_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "all_buyer_experiment_group_id"), this->all_buyer_experiment_group_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int16_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "per_buyer_experiment_group_ids"), this->per_buyer_experiment_group_ids,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<::scoped_refptr<const ::blink::SecurityOrigin>, uint16_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AuctionAdConfig::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::blink::InterestGroupAd::DataView, ::blink::mojom::blink::InterestGroupAdPtr>::Read(
    ::blink::mojom::blink::InterestGroupAd::DataView input,
    ::blink::mojom::blink::InterestGroupAdPtr* output) {
  bool success = true;
  ::blink::mojom::blink::InterestGroupAdPtr result(::blink::mojom::blink::InterestGroupAd::New());
  
      if (success && !input.ReadRenderUrl(&result->render_url))
        success = false;
      if (success && !input.ReadMetadata(&result->metadata))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::InterestGroup::DataView, ::blink::mojom::blink::InterestGroupPtr>::Read(
    ::blink::mojom::blink::InterestGroup::DataView input,
    ::blink::mojom::blink::InterestGroupPtr* output) {
  bool success = true;
  ::blink::mojom::blink::InterestGroupPtr result(::blink::mojom::blink::InterestGroup::New());
  
      if (success && !input.ReadExpiry(&result->expiry))
        success = false;
      if (success && !input.ReadOwner(&result->owner))
        success = false;
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success)
        result->priority = input.priority();
      if (success && !input.ReadExecutionMode(&result->execution_mode))
        success = false;
      if (success && !input.ReadBiddingUrl(&result->bidding_url))
        success = false;
      if (success && !input.ReadBiddingWasmHelperUrl(&result->bidding_wasm_helper_url))
        success = false;
      if (success && !input.ReadDailyUpdateUrl(&result->daily_update_url))
        success = false;
      if (success && !input.ReadTrustedBiddingSignalsUrl(&result->trusted_bidding_signals_url))
        success = false;
      if (success && !input.ReadTrustedBiddingSignalsKeys(&result->trusted_bidding_signals_keys))
        success = false;
      if (success && !input.ReadUserBiddingSignals(&result->user_bidding_signals))
        success = false;
      if (success && !input.ReadAds(&result->ads))
        success = false;
      if (success && !input.ReadAdComponents(&result->ad_components))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::AuctionAdConfigNonSharedParams::DataView, ::blink::mojom::blink::AuctionAdConfigNonSharedParamsPtr>::Read(
    ::blink::mojom::blink::AuctionAdConfigNonSharedParams::DataView input,
    ::blink::mojom::blink::AuctionAdConfigNonSharedParamsPtr* output) {
  bool success = true;
  ::blink::mojom::blink::AuctionAdConfigNonSharedParamsPtr result(::blink::mojom::blink::AuctionAdConfigNonSharedParams::New());
  
      if (success && !input.ReadInterestGroupBuyers(&result->interest_group_buyers))
        success = false;
      if (success && !input.ReadAuctionSignals(&result->auction_signals))
        success = false;
      if (success && !input.ReadSellerSignals(&result->seller_signals))
        success = false;
      if (success && !input.ReadSellerTimeout(&result->seller_timeout))
        success = false;
      if (success && !input.ReadPerBuyerSignals(&result->per_buyer_signals))
        success = false;
      if (success && !input.ReadPerBuyerTimeouts(&result->per_buyer_timeouts))
        success = false;
      if (success && !input.ReadAllBuyersTimeout(&result->all_buyers_timeout))
        success = false;
      if (success && !input.ReadPerBuyerGroupLimits(&result->per_buyer_group_limits))
        success = false;
      if (success)
        result->all_buyers_group_limit = input.all_buyers_group_limit();
      if (success && !input.ReadComponentAuctions(&result->component_auctions))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::AuctionAdConfig::DataView, ::blink::mojom::blink::AuctionAdConfigPtr>::Read(
    ::blink::mojom::blink::AuctionAdConfig::DataView input,
    ::blink::mojom::blink::AuctionAdConfigPtr* output) {
  bool success = true;
  ::blink::mojom::blink::AuctionAdConfigPtr result(::blink::mojom::blink::AuctionAdConfig::New());
  
      if (success && !input.ReadSeller(&result->seller))
        success = false;
      if (success && !input.ReadDecisionLogicUrl(&result->decision_logic_url))
        success = false;
      if (success && !input.ReadTrustedScoringSignalsUrl(&result->trusted_scoring_signals_url))
        success = false;
      if (success && !input.ReadAuctionAdConfigNonSharedParams(&result->auction_ad_config_non_shared_params))
        success = false;
      if (success)
        result->has_seller_experiment_group_id = input.has_seller_experiment_group_id();
      if (success)
        result->seller_experiment_group_id = input.seller_experiment_group_id();
      if (success)
        result->has_all_buyer_experiment_group_id = input.has_all_buyer_experiment_group_id();
      if (success)
        result->all_buyer_experiment_group_id = input.all_buyer_experiment_group_id();
      if (success && !input.ReadPerBuyerExperimentGroupIds(&result->per_buyer_experiment_group_ids))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif