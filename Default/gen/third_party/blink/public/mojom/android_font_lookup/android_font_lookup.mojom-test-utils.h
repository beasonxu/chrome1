// third_party/blink/public/mojom/android_font_lookup/android_font_lookup.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANDROID_FONT_LOOKUP_ANDROID_FONT_LOOKUP_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANDROID_FONT_LOOKUP_ANDROID_FONT_LOOKUP_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/android_font_lookup/android_font_lookup.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT AndroidFontLookupInterceptorForTesting : public AndroidFontLookup {
  virtual AndroidFontLookup* GetForwardingInterface() = 0;
  void GetUniqueNameLookupTable(GetUniqueNameLookupTableCallback callback) override;
  void MatchLocalFontByUniqueName(const std::string& font_unique_name, MatchLocalFontByUniqueNameCallback callback) override;
  void FetchAllFontFiles(FetchAllFontFilesCallback callback) override;
};
class BLINK_COMMON_EXPORT AndroidFontLookupAsyncWaiter {
 public:
  explicit AndroidFontLookupAsyncWaiter(AndroidFontLookup* proxy);

  AndroidFontLookupAsyncWaiter(const AndroidFontLookupAsyncWaiter&) = delete;
  AndroidFontLookupAsyncWaiter& operator=(const AndroidFontLookupAsyncWaiter&) = delete;

  ~AndroidFontLookupAsyncWaiter();
  void GetUniqueNameLookupTable(
      std::vector<std::string>* out_unique_font_names);
  void MatchLocalFontByUniqueName(
      const std::string& font_unique_name, ::base::File* out_font_file_handle);
  void FetchAllFontFiles(
      base::flat_map<std::string, ::base::File>* out_font_files);

 private:
  AndroidFontLookup* const proxy_;
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANDROID_FONT_LOOKUP_ANDROID_FONT_LOOKUP_MOJOM_TEST_UTILS_H_