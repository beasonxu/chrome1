// third_party/blink/public/mojom/credentialmanagement/credential_manager.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CREDENTIALMANAGEMENT_CREDENTIAL_MANAGER_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CREDENTIALMANAGEMENT_CREDENTIAL_MANAGER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CredentialManager_Store_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::CredentialInfo_Data> credential;

 private:
  friend class mojo::internal::MessageFragment<CredentialManager_Store_Params_Data>;

  CredentialManager_Store_Params_Data();
  ~CredentialManager_Store_Params_Data() = delete;
};
static_assert(sizeof(CredentialManager_Store_Params_Data) == 16,
              "Bad sizeof(CredentialManager_Store_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CredentialManager_Store_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CredentialManager_Store_ResponseParams_Data>;

  CredentialManager_Store_ResponseParams_Data();
  ~CredentialManager_Store_ResponseParams_Data() = delete;
};
static_assert(sizeof(CredentialManager_Store_ResponseParams_Data) == 8,
              "Bad sizeof(CredentialManager_Store_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CredentialManager_PreventSilentAccess_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CredentialManager_PreventSilentAccess_Params_Data>;

  CredentialManager_PreventSilentAccess_Params_Data();
  ~CredentialManager_PreventSilentAccess_Params_Data() = delete;
};
static_assert(sizeof(CredentialManager_PreventSilentAccess_Params_Data) == 8,
              "Bad sizeof(CredentialManager_PreventSilentAccess_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CredentialManager_PreventSilentAccess_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CredentialManager_PreventSilentAccess_ResponseParams_Data>;

  CredentialManager_PreventSilentAccess_ResponseParams_Data();
  ~CredentialManager_PreventSilentAccess_ResponseParams_Data() = delete;
};
static_assert(sizeof(CredentialManager_PreventSilentAccess_ResponseParams_Data) == 8,
              "Bad sizeof(CredentialManager_PreventSilentAccess_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CredentialManager_Get_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t mediation;
  uint8_t include_passwords : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::url::mojom::internal::Url_Data>>> federations;

 private:
  friend class mojo::internal::MessageFragment<CredentialManager_Get_Params_Data>;

  CredentialManager_Get_Params_Data();
  ~CredentialManager_Get_Params_Data() = delete;
};
static_assert(sizeof(CredentialManager_Get_Params_Data) == 24,
              "Bad sizeof(CredentialManager_Get_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CredentialManager_Get_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::CredentialInfo_Data> credential;

 private:
  friend class mojo::internal::MessageFragment<CredentialManager_Get_ResponseParams_Data>;

  CredentialManager_Get_ResponseParams_Data();
  ~CredentialManager_Get_ResponseParams_Data() = delete;
};
static_assert(sizeof(CredentialManager_Get_ResponseParams_Data) == 24,
              "Bad sizeof(CredentialManager_Get_ResponseParams_Data)");

}  // namespace internal


class CredentialManager_Store_ParamsDataView {
 public:
  CredentialManager_Store_ParamsDataView() = default;

  CredentialManager_Store_ParamsDataView(
      internal::CredentialManager_Store_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCredentialDataView(
      CredentialInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCredential(UserType* output) {
    
    auto* pointer = data_->credential.Get();
    return mojo::internal::Deserialize<::blink::mojom::CredentialInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::CredentialManager_Store_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CredentialManager_Store_ResponseParamsDataView {
 public:
  CredentialManager_Store_ResponseParamsDataView() = default;

  CredentialManager_Store_ResponseParamsDataView(
      internal::CredentialManager_Store_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CredentialManager_Store_ResponseParams_Data* data_ = nullptr;
};



class CredentialManager_PreventSilentAccess_ParamsDataView {
 public:
  CredentialManager_PreventSilentAccess_ParamsDataView() = default;

  CredentialManager_PreventSilentAccess_ParamsDataView(
      internal::CredentialManager_PreventSilentAccess_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CredentialManager_PreventSilentAccess_Params_Data* data_ = nullptr;
};



class CredentialManager_PreventSilentAccess_ResponseParamsDataView {
 public:
  CredentialManager_PreventSilentAccess_ResponseParamsDataView() = default;

  CredentialManager_PreventSilentAccess_ResponseParamsDataView(
      internal::CredentialManager_PreventSilentAccess_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CredentialManager_PreventSilentAccess_ResponseParams_Data* data_ = nullptr;
};



class CredentialManager_Get_ParamsDataView {
 public:
  CredentialManager_Get_ParamsDataView() = default;

  CredentialManager_Get_ParamsDataView(
      internal::CredentialManager_Get_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadMediation(UserType* output) const {
    auto data_value = data_->mediation;
    return mojo::internal::Deserialize<::blink::mojom::CredentialMediationRequirement>(
        data_value, output);
  }
  CredentialMediationRequirement mediation() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CredentialMediationRequirement>(data_->mediation));
  }
  bool include_passwords() const {
    return data_->include_passwords;
  }
  inline void GetFederationsDataView(
      mojo::ArrayDataView<::url::mojom::UrlDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFederations(UserType* output) {
    
    auto* pointer = data_->federations.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CredentialManager_Get_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CredentialManager_Get_ResponseParamsDataView {
 public:
  CredentialManager_Get_ResponseParamsDataView() = default;

  CredentialManager_Get_ResponseParamsDataView(
      internal::CredentialManager_Get_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::blink::mojom::CredentialManagerError>(
        data_value, output);
  }
  CredentialManagerError error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CredentialManagerError>(data_->error));
  }
  inline void GetCredentialDataView(
      CredentialInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCredential(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::CredentialInfoDataView, UserType>(),
    "Attempting to read the optional `credential` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadCredential` instead "
    "of `ReadCredential if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->credential.Get();
    return mojo::internal::Deserialize<::blink::mojom::CredentialInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::CredentialManager_Get_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void CredentialManager_Store_ParamsDataView::GetCredentialDataView(
    CredentialInfoDataView* output) {
  auto pointer = data_->credential.Get();
  *output = CredentialInfoDataView(pointer, message_);
}








inline void CredentialManager_Get_ParamsDataView::GetFederationsDataView(
    mojo::ArrayDataView<::url::mojom::UrlDataView>* output) {
  auto pointer = data_->federations.Get();
  *output = mojo::ArrayDataView<::url::mojom::UrlDataView>(pointer, message_);
}


inline void CredentialManager_Get_ResponseParamsDataView::GetCredentialDataView(
    CredentialInfoDataView* output) {
  auto pointer = data_->credential.Get();
  *output = CredentialInfoDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CREDENTIALMANAGEMENT_CREDENTIAL_MANAGER_MOJOM_PARAMS_DATA_H_