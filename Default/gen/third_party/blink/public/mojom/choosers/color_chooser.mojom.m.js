// third_party/blink/public/mojom/choosers/color_chooser.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class ColorChooserFactoryPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.ColorChooserFactory', scope);
  }
}

/** @interface */
export class ColorChooserFactoryInterface {
  
  /**
   * @param { !ColorChooserPendingReceiver } chooser
   * @param { !ColorChooserClientRemote } client
   * @param { !number } color
   * @param { !Array<!ColorSuggestion> } suggestions
   */

  openColorChooser(chooser, client, color, suggestions) {}
}

/**
 * @implements { ColorChooserFactoryInterface }
 */
export class ColorChooserFactoryRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!ColorChooserFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          ColorChooserFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!ColorChooserFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !ColorChooserPendingReceiver } chooser
   * @param { !ColorChooserClientRemote } client
   * @param { !number } color
   * @param { !Array<!ColorSuggestion> } suggestions
   */

  openColorChooser(
      chooser,
      client,
      color,
      suggestions) {
    this.proxy.sendMessage(
        0,
        ColorChooserFactory_OpenColorChooser_ParamsSpec.$,
        null,
        [
          chooser,
          client,
          color,
          suggestions
        ]);
  }
}

/**
 * An object which receives request messages for the ColorChooserFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class ColorChooserFactoryReceiver {
  /**
   * @param {!ColorChooserFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!ColorChooserFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        ColorChooserFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ColorChooserFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        ColorChooserFactory_OpenColorChooser_ParamsSpec.$,
        null,
        impl.openColorChooser.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class ColorChooserFactory {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.ColorChooserFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!ColorChooserFactoryRemote}
   */
  static getRemote() {
    let remote = new ColorChooserFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the ColorChooserFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class ColorChooserFactoryCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      ColorChooserFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ColorChooserFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.openColorChooser =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        ColorChooserFactory_OpenColorChooser_ParamsSpec.$,
        null,
        this.openColorChooser.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class ColorChooserPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.ColorChooser', scope);
  }
}

/** @interface */
export class ColorChooserInterface {
  
  /**
   * @param { !number } color
   */

  setSelectedColor(color) {}
}

/**
 * @implements { ColorChooserInterface }
 */
export class ColorChooserRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!ColorChooserPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          ColorChooserPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!ColorChooserPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } color
   */

  setSelectedColor(
      color) {
    this.proxy.sendMessage(
        0,
        ColorChooser_SetSelectedColor_ParamsSpec.$,
        null,
        [
          color
        ]);
  }
}

/**
 * An object which receives request messages for the ColorChooser
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class ColorChooserReceiver {
  /**
   * @param {!ColorChooserInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!ColorChooserRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        ColorChooserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ColorChooserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        ColorChooser_SetSelectedColor_ParamsSpec.$,
        null,
        impl.setSelectedColor.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class ColorChooser {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.ColorChooser";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!ColorChooserRemote}
   */
  static getRemote() {
    let remote = new ColorChooserRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the ColorChooser
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class ColorChooserCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      ColorChooserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ColorChooserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setSelectedColor =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        ColorChooser_SetSelectedColor_ParamsSpec.$,
        null,
        this.setSelectedColor.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class ColorChooserClientPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.ColorChooserClient', scope);
  }
}

/** @interface */
export class ColorChooserClientInterface {
  
  /**
   * @param { !number } color
   */

  didChooseColor(color) {}
}

/**
 * @implements { ColorChooserClientInterface }
 */
export class ColorChooserClientRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!ColorChooserClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          ColorChooserClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!ColorChooserClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } color
   */

  didChooseColor(
      color) {
    this.proxy.sendMessage(
        0,
        ColorChooserClient_DidChooseColor_ParamsSpec.$,
        null,
        [
          color
        ]);
  }
}

/**
 * An object which receives request messages for the ColorChooserClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class ColorChooserClientReceiver {
  /**
   * @param {!ColorChooserClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!ColorChooserClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        ColorChooserClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ColorChooserClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        ColorChooserClient_DidChooseColor_ParamsSpec.$,
        null,
        impl.didChooseColor.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class ColorChooserClient {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.ColorChooserClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!ColorChooserClientRemote}
   */
  static getRemote() {
    let remote = new ColorChooserClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the ColorChooserClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class ColorChooserClientCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      ColorChooserClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!ColorChooserClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.didChooseColor =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        ColorChooserClient_DidChooseColor_ParamsSpec.$,
        null,
        this.didChooseColor.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class EyeDropperChooserPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.EyeDropperChooser', scope);
  }
}

/** @interface */
export class EyeDropperChooserInterface {
  
  /**
   * @return {!Promise<{
        success: !boolean,
        color: !number,
   *  }>}
   */

  choose() {}
}

/**
 * @implements { EyeDropperChooserInterface }
 */
export class EyeDropperChooserRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!EyeDropperChooserPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          EyeDropperChooserPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!EyeDropperChooserPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        success: !boolean,
        color: !number,
   *  }>}
   */

  choose() {
    return this.proxy.sendMessage(
        0,
        EyeDropperChooser_Choose_ParamsSpec.$,
        EyeDropperChooser_Choose_ResponseParamsSpec.$,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the EyeDropperChooser
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class EyeDropperChooserReceiver {
  /**
   * @param {!EyeDropperChooserInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!EyeDropperChooserRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        EyeDropperChooserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!EyeDropperChooserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        EyeDropperChooser_Choose_ParamsSpec.$,
        EyeDropperChooser_Choose_ResponseParamsSpec.$,
        impl.choose.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class EyeDropperChooser {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.EyeDropperChooser";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!EyeDropperChooserRemote}
   */
  static getRemote() {
    let remote = new EyeDropperChooserRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the EyeDropperChooser
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class EyeDropperChooserCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      EyeDropperChooserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!EyeDropperChooserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.choose =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        EyeDropperChooser_Choose_ParamsSpec.$,
        EyeDropperChooser_Choose_ResponseParamsSpec.$,
        this.choose.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ColorSuggestionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ColorChooserFactory_OpenColorChooser_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ColorChooser_SetSelectedColor_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ColorChooserClient_DidChooseColor_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const EyeDropperChooser_Choose_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const EyeDropperChooser_Choose_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    ColorSuggestionSpec.$,
    'ColorSuggestion',
    [
      mojo.internal.StructField(
        'color', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'label', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class ColorSuggestion {
  constructor() {
    /** @type { !number } */
    this.color;
    /** @type { !string } */
    this.label;
  }
}



mojo.internal.Struct(
    ColorChooserFactory_OpenColorChooser_ParamsSpec.$,
    'ColorChooserFactory_OpenColorChooser_Params',
    [
      mojo.internal.StructField(
        'chooser', 0,
        0,
        mojo.internal.InterfaceRequest(ColorChooserPendingReceiver),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'client', 4,
        0,
        mojo.internal.InterfaceProxy(ColorChooserClientRemote),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'color', 12,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'suggestions', 16,
        0,
        mojo.internal.Array(ColorSuggestionSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class ColorChooserFactory_OpenColorChooser_Params {
  constructor() {
    /** @type { !ColorChooserPendingReceiver } */
    this.chooser;
    /** @type { !ColorChooserClientRemote } */
    this.client;
    /** @type { !number } */
    this.color;
    /** @type { !Array<!ColorSuggestion> } */
    this.suggestions;
  }
}



mojo.internal.Struct(
    ColorChooser_SetSelectedColor_ParamsSpec.$,
    'ColorChooser_SetSelectedColor_Params',
    [
      mojo.internal.StructField(
        'color', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class ColorChooser_SetSelectedColor_Params {
  constructor() {
    /** @type { !number } */
    this.color;
  }
}



mojo.internal.Struct(
    ColorChooserClient_DidChooseColor_ParamsSpec.$,
    'ColorChooserClient_DidChooseColor_Params',
    [
      mojo.internal.StructField(
        'color', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class ColorChooserClient_DidChooseColor_Params {
  constructor() {
    /** @type { !number } */
    this.color;
  }
}



mojo.internal.Struct(
    EyeDropperChooser_Choose_ParamsSpec.$,
    'EyeDropperChooser_Choose_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class EyeDropperChooser_Choose_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    EyeDropperChooser_Choose_ResponseParamsSpec.$,
    'EyeDropperChooser_Choose_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'color', 4,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class EyeDropperChooser_Choose_ResponseParams {
  constructor() {
    /** @type { !boolean } */
    this.success;
    /** @type { !number } */
    this.color;
  }
}

