// third_party/blink/public/mojom/scroll/scroll_enums.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/scroll/scroll_enums.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/scroll/scroll_enums.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* ScrollTypeToStringHelper(ScrollType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case ScrollType::kUser:
      return "kUser";
    case ScrollType::kProgrammatic:
      return "kProgrammatic";
    case ScrollType::kClamping:
      return "kClamping";
    case ScrollType::kCompositor:
      return "kCompositor";
    case ScrollType::kAnchoring:
      return "kAnchoring";
    case ScrollType::kSequenced:
      return "kSequenced";
    default:
      return nullptr;
  }
}

std::string ScrollTypeToString(ScrollType value) {
  const char *str = ScrollTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown ScrollType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, ScrollType value) {
  return os << ScrollTypeToString(value);
}

static NOINLINE const char* ScrollBehaviorToStringHelper(ScrollBehavior value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case ScrollBehavior::kAuto:
      return "kAuto";
    case ScrollBehavior::kInstant:
      return "kInstant";
    case ScrollBehavior::kSmooth:
      return "kSmooth";
    default:
      return nullptr;
  }
}

std::string ScrollBehaviorToString(ScrollBehavior value) {
  const char *str = ScrollBehaviorToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown ScrollBehavior value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, ScrollBehavior value) {
  return os << ScrollBehaviorToString(value);
}

namespace internal {

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::ScrollType>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::ScrollType value) {
  return std::move(context).WriteString(::blink::mojom::ScrollTypeToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::ScrollBehavior>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::ScrollBehavior value) {
  return std::move(context).WriteString(::blink::mojom::ScrollBehaviorToString(value));
}

} // namespace perfetto