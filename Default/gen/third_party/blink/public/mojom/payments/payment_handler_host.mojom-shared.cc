// third_party/blink/public/mojom/payments/payment_handler_host.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/payments/payment_handler_host.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/payments/payment_handler_host.mojom-params-data.h"
namespace payments {
namespace mojom {

namespace internal {


// static
bool PaymentHandlerMethodData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const PaymentHandlerMethodData_Data* object =
      static_cast<const PaymentHandlerMethodData_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->method_name, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams method_name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->method_name, validation_context,
                                         &method_name_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams stringified_data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->stringified_data, validation_context,
                                         &stringified_data_validate_params)) {
    return false;
  }

  return true;
}

PaymentHandlerMethodData_Data::PaymentHandlerMethodData_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PaymentHandlerModifier_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const PaymentHandlerModifier_Data* object =
      static_cast<const PaymentHandlerModifier_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->total, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->method_data, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->method_data, validation_context))
    return false;

  return true;
}

PaymentHandlerModifier_Data::PaymentHandlerModifier_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PaymentRequestDetailsUpdate_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 56, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const PaymentRequestDetailsUpdate_Data* object =
      static_cast<const PaymentRequestDetailsUpdate_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->total, validation_context))
    return false;

  const mojo::internal::ContainerValidateParams shipping_options_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->shipping_options, validation_context,
                                         &shipping_options_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams modifiers_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->modifiers, validation_context,
                                         &modifiers_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->error, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams error_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error, validation_context,
                                         &error_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams stringified_payment_method_errors_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->stringified_payment_method_errors, validation_context,
                                         &stringified_payment_method_errors_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->shipping_address_errors, validation_context))
    return false;

  return true;
}

PaymentRequestDetailsUpdate_Data::PaymentRequestDetailsUpdate_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PaymentHandlerHost_ChangePaymentMethod_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const PaymentHandlerHost_ChangePaymentMethod_Params_Data* object =
      static_cast<const PaymentHandlerHost_ChangePaymentMethod_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->method_data, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->method_data, validation_context))
    return false;

  return true;
}

PaymentHandlerHost_ChangePaymentMethod_Params_Data::PaymentHandlerHost_ChangePaymentMethod_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PaymentHandlerHost_ChangePaymentMethod_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const PaymentHandlerHost_ChangePaymentMethod_ResponseParams_Data* object =
      static_cast<const PaymentHandlerHost_ChangePaymentMethod_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->response_data, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->response_data, validation_context))
    return false;

  return true;
}

PaymentHandlerHost_ChangePaymentMethod_ResponseParams_Data::PaymentHandlerHost_ChangePaymentMethod_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PaymentHandlerHost_ChangeShippingOption_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const PaymentHandlerHost_ChangeShippingOption_Params_Data* object =
      static_cast<const PaymentHandlerHost_ChangeShippingOption_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->shipping_option_id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams shipping_option_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->shipping_option_id, validation_context,
                                         &shipping_option_id_validate_params)) {
    return false;
  }

  return true;
}

PaymentHandlerHost_ChangeShippingOption_Params_Data::PaymentHandlerHost_ChangeShippingOption_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PaymentHandlerHost_ChangeShippingOption_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const PaymentHandlerHost_ChangeShippingOption_ResponseParams_Data* object =
      static_cast<const PaymentHandlerHost_ChangeShippingOption_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->response_data, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->response_data, validation_context))
    return false;

  return true;
}

PaymentHandlerHost_ChangeShippingOption_ResponseParams_Data::PaymentHandlerHost_ChangeShippingOption_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PaymentHandlerHost_ChangeShippingAddress_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const PaymentHandlerHost_ChangeShippingAddress_Params_Data* object =
      static_cast<const PaymentHandlerHost_ChangeShippingAddress_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->shipping_address, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->shipping_address, validation_context))
    return false;

  return true;
}

PaymentHandlerHost_ChangeShippingAddress_Params_Data::PaymentHandlerHost_ChangeShippingAddress_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PaymentHandlerHost_ChangeShippingAddress_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const PaymentHandlerHost_ChangeShippingAddress_ResponseParams_Data* object =
      static_cast<const PaymentHandlerHost_ChangeShippingAddress_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->response_data, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->response_data, validation_context))
    return false;

  return true;
}

PaymentHandlerHost_ChangeShippingAddress_ResponseParams_Data::PaymentHandlerHost_ChangeShippingAddress_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace payments