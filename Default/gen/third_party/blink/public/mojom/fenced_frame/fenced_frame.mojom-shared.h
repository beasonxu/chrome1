// third_party/blink/public/mojom/fenced_frame/fenced_frame.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FENCED_FRAME_FENCED_FRAME_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FENCED_FRAME_FENCED_FRAME_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/fenced_frame/fenced_frame.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "url/mojom/origin.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class FencedFrameReportingDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::FencedFrameReportingDataView> {
  using Data = ::blink::mojom::internal::FencedFrameReporting_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class FencedFrameMode : int32_t {
  
  kDefault = 0,
  
  kOpaqueAds = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, FencedFrameMode value);
inline bool IsKnownEnumValue(FencedFrameMode value) {
  return internal::FencedFrameMode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ReportingDestination : int32_t {
  
  kBuyer = 0,
  
  kSeller = 1,
  
  kComponentSeller = 2,
  
  kSharedStorageSelectUrl = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, ReportingDestination value);
inline bool IsKnownEnumValue(ReportingDestination value) {
  return internal::ReportingDestination_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class FencedFrameOwnerHostInterfaceBase {};

using FencedFrameOwnerHostPtrDataView =
    mojo::InterfacePtrDataView<FencedFrameOwnerHostInterfaceBase>;
using FencedFrameOwnerHostRequestDataView =
    mojo::InterfaceRequestDataView<FencedFrameOwnerHostInterfaceBase>;
using FencedFrameOwnerHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<FencedFrameOwnerHostInterfaceBase>;
using FencedFrameOwnerHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<FencedFrameOwnerHostInterfaceBase>;


class FencedFrameReportingDataView {
 public:
  FencedFrameReportingDataView() = default;

  FencedFrameReportingDataView(
      internal::FencedFrameReporting_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMetadataDataView(
      mojo::MapDataView<ReportingDestination, mojo::MapDataView<mojo::StringDataView, ::url::mojom::UrlDataView>>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMetadata(UserType* output) {
    
    auto* pointer = data_->metadata.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::blink::mojom::ReportingDestination, mojo::MapDataView<mojo::StringDataView, ::url::mojom::UrlDataView>>>(
        pointer, output, message_);
  }
 private:
  internal::FencedFrameReporting_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::FencedFrameMode>
    : public mojo::internal::EnumHashImpl<::blink::mojom::FencedFrameMode> {};

template <>
struct hash<::blink::mojom::ReportingDestination>
    : public mojo::internal::EnumHashImpl<::blink::mojom::ReportingDestination> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FencedFrameMode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::FencedFrameMode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::FencedFrameMode>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ReportingDestination, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::ReportingDestination, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::ReportingDestination>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FencedFrameReportingDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::FencedFrameReportingDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::FencedFrameReporting_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::metadata(input)) in_metadata = Traits::metadata(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->metadata)::BaseType>
        metadata_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams metadata_validate_params(
        new mojo::internal::ContainerValidateParams(0, ::blink::mojom::internal::ReportingDestination_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr))));
    mojo::internal::Serialize<mojo::MapDataView<::blink::mojom::ReportingDestination, mojo::MapDataView<mojo::StringDataView, ::url::mojom::UrlDataView>>>(
        in_metadata, metadata_fragment, &metadata_validate_params);
    fragment->metadata.Set(
        metadata_fragment.is_null() ? nullptr : metadata_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->metadata.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null metadata in FencedFrameReporting struct");
  }

  static bool Deserialize(::blink::mojom::internal::FencedFrameReporting_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::FencedFrameReportingDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void FencedFrameReportingDataView::GetMetadataDataView(
    mojo::MapDataView<ReportingDestination, mojo::MapDataView<mojo::StringDataView, ::url::mojom::UrlDataView>>* output) {
  auto pointer = data_->metadata.Get();
  *output = mojo::MapDataView<ReportingDestination, mojo::MapDataView<mojo::StringDataView, ::url::mojom::UrlDataView>>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::FencedFrameMode> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::FencedFrameMode value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::ReportingDestination> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::ReportingDestination value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FENCED_FRAME_FENCED_FRAME_MOJOM_SHARED_H_