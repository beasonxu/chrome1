// third_party/blink/public/mojom/fenced_frame/fenced_frame.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('mojoBase.mojom.TimeTicks');
goog.require('url.mojom.Url');




goog.provide('blink.mojom.FencedFrameMode');
goog.provide('blink.mojom.FencedFrameModeSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.FencedFrameModeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.FencedFrameMode = {
  
  kDefault: 0,
  kOpaqueAds: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};

goog.provide('blink.mojom.ReportingDestination');
goog.provide('blink.mojom.ReportingDestinationSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.ReportingDestinationSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.ReportingDestination = {
  
  kBuyer: 0,
  kSeller: 1,
  kComponentSeller: 2,
  kSharedStorageSelectUrl: 3,
  MIN_VALUE: 0,
  MAX_VALUE: 3,
};



goog.provide('blink.mojom.FencedFrameOwnerHost');
goog.provide('blink.mojom.FencedFrameOwnerHostReceiver');
goog.provide('blink.mojom.FencedFrameOwnerHostCallbackRouter');
goog.provide('blink.mojom.FencedFrameOwnerHostInterface');
goog.provide('blink.mojom.FencedFrameOwnerHostRemote');
goog.provide('blink.mojom.FencedFrameOwnerHostPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.FencedFrameOwnerHostPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.FencedFrameOwnerHost.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.FencedFrameOwnerHostInterface = class {
  
  /**
   * @param { !url.mojom.Url } url
   * @param { !mojoBase.mojom.TimeTicks } navigationStartTime
   */

  navigate(url, navigationStartTime) {}
};

/**
 * @export
 * @implements { blink.mojom.FencedFrameOwnerHostInterface }
 */
blink.mojom.FencedFrameOwnerHostRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.FencedFrameOwnerHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.FencedFrameOwnerHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.FencedFrameOwnerHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !url.mojom.Url } url
   * @param { !mojoBase.mojom.TimeTicks } navigationStartTime
   */

  navigate(
      url,
      navigationStartTime) {
    this.proxy.sendMessage(
        0,
        blink.mojom.FencedFrameOwnerHost_Navigate_ParamsSpec.$,
        null,
        [
          url,
          navigationStartTime
        ]);
  }
};

/**
 * An object which receives request messages for the FencedFrameOwnerHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.FencedFrameOwnerHostReceiver = class {
  /**
   * @param {!blink.mojom.FencedFrameOwnerHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.FencedFrameOwnerHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.FencedFrameOwnerHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FencedFrameOwnerHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FencedFrameOwnerHost_Navigate_ParamsSpec.$,
        null,
        impl.navigate.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.FencedFrameOwnerHost = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.FencedFrameOwnerHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.FencedFrameOwnerHostRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.FencedFrameOwnerHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the FencedFrameOwnerHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.FencedFrameOwnerHostCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.FencedFrameOwnerHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FencedFrameOwnerHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.navigate =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FencedFrameOwnerHost_Navigate_ParamsSpec.$,
        null,
        this.navigate.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.FencedFrameReportingSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FencedFrameReportingSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.FencedFrameOwnerHost_Navigate_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FencedFrameOwnerHost_Navigate_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.FencedFrameReportingSpec.$,
    'FencedFrameReporting',
    [
      mojo.internal.StructField(
        'metadata', 0,
        0,
        mojo.internal.Map(blink.mojom.ReportingDestinationSpec.$, mojo.internal.Map(mojo.internal.String, url.mojom.UrlSpec.$, false), false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.FencedFrameReporting');

/** @record */
blink.mojom.FencedFrameReporting = class {
  constructor() {
    /** @export { !Object<!blink.mojom.ReportingDestination, !Object<!string, !url.mojom.Url>> } */
    this.metadata;
  }
};




mojo.internal.Struct(
    blink.mojom.FencedFrameOwnerHost_Navigate_ParamsSpec.$,
    'FencedFrameOwnerHost_Navigate_Params',
    [
      mojo.internal.StructField(
        'url', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'navigationStartTime', 8,
        0,
        mojoBase.mojom.TimeTicksSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.FencedFrameOwnerHost_Navigate_Params');

/** @record */
blink.mojom.FencedFrameOwnerHost_Navigate_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.url;
    /** @export { !mojoBase.mojom.TimeTicks } */
    this.navigationStartTime;
  }
};


