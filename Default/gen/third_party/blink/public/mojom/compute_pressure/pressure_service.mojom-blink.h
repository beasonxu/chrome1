// third_party/blink/public/mojom/compute_pressure/pressure_service.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_COMPUTE_PRESSURE_PRESSURE_SERVICE_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_COMPUTE_PRESSURE_PRESSURE_SERVICE_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/compute_pressure/pressure_service.mojom-shared.h"
#include "third_party/blink/public/mojom/compute_pressure/pressure_service.mojom-blink-forward.h"
#include "services/device/public/mojom/pressure_state.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace WTF {
struct blink_mojom_internal_PressureStatus_DataHashFn {
  static unsigned GetHash(const ::blink::mojom::PressureStatus& value) {
    using utype = std::underlying_type<::blink::mojom::PressureStatus>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::blink::mojom::PressureStatus& left, const ::blink::mojom::PressureStatus& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::blink::mojom::PressureStatus>
    : public GenericHashTraits<::blink::mojom::PressureStatus> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::blink::mojom::PressureStatus EmptyValue() { return static_cast<::blink::mojom::PressureStatus>(-1000000); }
  static void ConstructDeletedValue(::blink::mojom::PressureStatus& slot, bool) {
    slot = static_cast<::blink::mojom::PressureStatus>(-1000001);
  }
  static bool IsDeletedValue(const ::blink::mojom::PressureStatus& value) {
    return value == static_cast<::blink::mojom::PressureStatus>(-1000001);
  }
};
}  // namespace WTF


namespace blink {
namespace mojom {
namespace blink {

class PressureObserverProxy;

template <typename ImplRefTraits>
class PressureObserverStub;

class PressureObserverRequestValidator;


class PLATFORM_EXPORT PressureObserver
    : public PressureObserverInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = PressureObserverInterfaceBase;
  using Proxy_ = PressureObserverProxy;

  template <typename ImplRefTraits>
  using Stub_ = PressureObserverStub<ImplRefTraits>;

  using RequestValidator_ = PressureObserverRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnUpdateMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct OnUpdate_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~PressureObserver() = default;

  
  virtual void OnUpdate(::device::mojom::blink::PressureStatePtr state) = 0;
};

class PressureServiceProxy;

template <typename ImplRefTraits>
class PressureServiceStub;

class PressureServiceRequestValidator;
class PressureServiceResponseValidator;


class PLATFORM_EXPORT PressureService
    : public PressureServiceInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = PressureServiceInterfaceBase;
  using Proxy_ = PressureServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = PressureServiceStub<ImplRefTraits>;

  using RequestValidator_ = PressureServiceRequestValidator;
  using ResponseValidator_ = PressureServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kAddObserverMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct AddObserver_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~PressureService() = default;


  using AddObserverCallback = base::OnceCallback<void(PressureStatus)>;
  
  virtual void AddObserver(::mojo::PendingRemote<PressureObserver> observer, PressureQuantizationPtr quantization, AddObserverCallback callback) = 0;
};



class PLATFORM_EXPORT PressureObserverProxy
    : public PressureObserver {
 public:
  using InterfaceType = PressureObserver;

  explicit PressureObserverProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnUpdate(::device::mojom::blink::PressureStatePtr state) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class PLATFORM_EXPORT PressureServiceProxy
    : public PressureService {
 public:
  using InterfaceType = PressureService;

  explicit PressureServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void AddObserver(::mojo::PendingRemote<PressureObserver> observer, PressureQuantizationPtr quantization, AddObserverCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT PressureObserverStubDispatch {
 public:
  static bool Accept(PressureObserver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PressureObserver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PressureObserver>>
class PressureObserverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PressureObserverStub() = default;
  ~PressureObserverStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PressureObserverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PressureObserverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT PressureServiceStubDispatch {
 public:
  static bool Accept(PressureService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PressureService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PressureService>>
class PressureServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PressureServiceStub() = default;
  ~PressureServiceStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PressureServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PressureServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT PressureObserverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT PressureServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT PressureServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};








class PLATFORM_EXPORT PressureQuantization {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PressureQuantization, T>::value>;
  using DataView = PressureQuantizationDataView;
  using Data_ = internal::PressureQuantization_Data;

  template <typename... Args>
  static PressureQuantizationPtr New(Args&&... args) {
    return PressureQuantizationPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PressureQuantizationPtr From(const U& u) {
    return mojo::TypeConverter<PressureQuantizationPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PressureQuantization>::Convert(*this);
  }


  PressureQuantization();

  explicit PressureQuantization(
      WTF::Vector<double> cpu_utilization_thresholds);


  ~PressureQuantization();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PressureQuantizationPtr>
  PressureQuantizationPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PressureQuantization::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PressureQuantization::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PressureQuantization::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PressureQuantization::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PressureQuantization_UnserializedMessageContext<
            UserType, PressureQuantization::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PressureQuantization::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return PressureQuantization::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PressureQuantization_UnserializedMessageContext<
            UserType, PressureQuantization::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PressureQuantization::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  WTF::Vector<double> cpu_utilization_thresholds;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PressureQuantization::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PressureQuantization::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PressureQuantization::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PressureQuantization::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
PressureQuantizationPtr PressureQuantization::Clone() const {
  return New(
      mojo::Clone(cpu_utilization_thresholds)
  );
}

template <typename T, PressureQuantization::EnableIfSame<T>*>
bool PressureQuantization::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->cpu_utilization_thresholds, other_struct.cpu_utilization_thresholds))
    return false;
  return true;
}

template <typename T, PressureQuantization::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.cpu_utilization_thresholds < rhs.cpu_utilization_thresholds)
    return true;
  if (rhs.cpu_utilization_thresholds < lhs.cpu_utilization_thresholds)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::PressureQuantization::DataView,
                                         ::blink::mojom::blink::PressureQuantizationPtr> {
  static bool IsNull(const ::blink::mojom::blink::PressureQuantizationPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::PressureQuantizationPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::PressureQuantization::cpu_utilization_thresholds)& cpu_utilization_thresholds(
      const ::blink::mojom::blink::PressureQuantizationPtr& input) {
    return input->cpu_utilization_thresholds;
  }

  static bool Read(::blink::mojom::blink::PressureQuantization::DataView input, ::blink::mojom::blink::PressureQuantizationPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_COMPUTE_PRESSURE_PRESSURE_SERVICE_MOJOM_BLINK_H_