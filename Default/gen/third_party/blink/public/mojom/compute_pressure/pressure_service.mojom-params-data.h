// third_party/blink/public/mojom/compute_pressure/pressure_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_COMPUTE_PRESSURE_PRESSURE_SERVICE_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_COMPUTE_PRESSURE_PRESSURE_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PressureObserver_OnUpdate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::device::mojom::internal::PressureState_Data> state;

 private:
  friend class mojo::internal::MessageFragment<PressureObserver_OnUpdate_Params_Data>;

  PressureObserver_OnUpdate_Params_Data();
  ~PressureObserver_OnUpdate_Params_Data() = delete;
};
static_assert(sizeof(PressureObserver_OnUpdate_Params_Data) == 16,
              "Bad sizeof(PressureObserver_OnUpdate_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PressureService_AddObserver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;
  mojo::internal::Pointer<internal::PressureQuantization_Data> quantization;

 private:
  friend class mojo::internal::MessageFragment<PressureService_AddObserver_Params_Data>;

  PressureService_AddObserver_Params_Data();
  ~PressureService_AddObserver_Params_Data() = delete;
};
static_assert(sizeof(PressureService_AddObserver_Params_Data) == 24,
              "Bad sizeof(PressureService_AddObserver_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PressureService_AddObserver_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PressureService_AddObserver_ResponseParams_Data>;

  PressureService_AddObserver_ResponseParams_Data();
  ~PressureService_AddObserver_ResponseParams_Data() = delete;
};
static_assert(sizeof(PressureService_AddObserver_ResponseParams_Data) == 16,
              "Bad sizeof(PressureService_AddObserver_ResponseParams_Data)");

}  // namespace internal


class PressureObserver_OnUpdate_ParamsDataView {
 public:
  PressureObserver_OnUpdate_ParamsDataView() = default;

  PressureObserver_OnUpdate_ParamsDataView(
      internal::PressureObserver_OnUpdate_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStateDataView(
      ::device::mojom::PressureStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) {
    
    auto* pointer = data_->state.Get();
    return mojo::internal::Deserialize<::device::mojom::PressureStateDataView>(
        pointer, output, message_);
  }
 private:
  internal::PressureObserver_OnUpdate_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PressureService_AddObserver_ParamsDataView {
 public:
  PressureService_AddObserver_ParamsDataView() = default;

  PressureService_AddObserver_ParamsDataView(
      internal::PressureService_AddObserver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::PressureObserverInterfaceBase>>(
            &data_->observer, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetQuantizationDataView(
      PressureQuantizationDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadQuantization(UserType* output) {
    
    auto* pointer = data_->quantization.Get();
    return mojo::internal::Deserialize<::blink::mojom::PressureQuantizationDataView>(
        pointer, output, message_);
  }
 private:
  internal::PressureService_AddObserver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PressureService_AddObserver_ResponseParamsDataView {
 public:
  PressureService_AddObserver_ResponseParamsDataView() = default;

  PressureService_AddObserver_ResponseParamsDataView(
      internal::PressureService_AddObserver_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::PressureStatus>(
        data_value, output);
  }
  PressureStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PressureStatus>(data_->status));
  }
 private:
  internal::PressureService_AddObserver_ResponseParams_Data* data_ = nullptr;
};


inline void PressureObserver_OnUpdate_ParamsDataView::GetStateDataView(
    ::device::mojom::PressureStateDataView* output) {
  auto pointer = data_->state.Get();
  *output = ::device::mojom::PressureStateDataView(pointer, message_);
}


inline void PressureService_AddObserver_ParamsDataView::GetQuantizationDataView(
    PressureQuantizationDataView* output) {
  auto pointer = data_->quantization.Get();
  *output = PressureQuantizationDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_COMPUTE_PRESSURE_PRESSURE_SERVICE_MOJOM_PARAMS_DATA_H_