// third_party/blink/public/mojom/compute_pressure/pressure_service.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  PressureState as device_mojom_PressureState,
  PressureStateSpec as device_mojom_PressureStateSpec
} from '../../../../../services/device/public/mojom/pressure_state.mojom.m.js';


/**
 * @const { !number }
 */
export const MAX_PRESSURE_CPU_UTILIZATION_THRESHOLDS = 3;


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const PressureStatusSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const PressureStatus = {
  
  kOk: 0,
  kNotSupported: 1,
  kSecurityError: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class PressureObserverPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.PressureObserver', scope);
  }
}

/** @interface */
export class PressureObserverInterface {
  
  /**
   * @param { !device_mojom_PressureState } state
   */

  onUpdate(state) {}
}

/**
 * @implements { PressureObserverInterface }
 */
export class PressureObserverRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!PressureObserverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          PressureObserverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!PressureObserverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !device_mojom_PressureState } state
   */

  onUpdate(
      state) {
    this.proxy.sendMessage(
        0,
        PressureObserver_OnUpdate_ParamsSpec.$,
        null,
        [
          state
        ]);
  }
}

/**
 * An object which receives request messages for the PressureObserver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class PressureObserverReceiver {
  /**
   * @param {!PressureObserverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!PressureObserverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        PressureObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PressureObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        PressureObserver_OnUpdate_ParamsSpec.$,
        null,
        impl.onUpdate.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class PressureObserver {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.PressureObserver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!PressureObserverRemote}
   */
  static getRemote() {
    let remote = new PressureObserverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the PressureObserver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class PressureObserverCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      PressureObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PressureObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onUpdate =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        PressureObserver_OnUpdate_ParamsSpec.$,
        null,
        this.onUpdate.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class PressureServicePendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.PressureService', scope);
  }
}

/** @interface */
export class PressureServiceInterface {
  
  /**
   * @param { !PressureObserverRemote } observer
   * @param { !PressureQuantization } quantization
   * @return {!Promise<{
        status: !PressureStatus,
   *  }>}
   */

  addObserver(observer, quantization) {}
}

/**
 * @implements { PressureServiceInterface }
 */
export class PressureServiceRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!PressureServicePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          PressureServicePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!PressureServicePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !PressureObserverRemote } observer
   * @param { !PressureQuantization } quantization
   * @return {!Promise<{
        status: !PressureStatus,
   *  }>}
   */

  addObserver(
      observer,
      quantization) {
    return this.proxy.sendMessage(
        0,
        PressureService_AddObserver_ParamsSpec.$,
        PressureService_AddObserver_ResponseParamsSpec.$,
        [
          observer,
          quantization
        ]);
  }
}

/**
 * An object which receives request messages for the PressureService
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class PressureServiceReceiver {
  /**
   * @param {!PressureServiceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!PressureServiceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        PressureServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PressureServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        PressureService_AddObserver_ParamsSpec.$,
        PressureService_AddObserver_ResponseParamsSpec.$,
        impl.addObserver.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class PressureService {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.PressureService";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!PressureServiceRemote}
   */
  static getRemote() {
    let remote = new PressureServiceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the PressureService
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class PressureServiceCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      PressureServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PressureServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addObserver =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        PressureService_AddObserver_ParamsSpec.$,
        PressureService_AddObserver_ResponseParamsSpec.$,
        this.addObserver.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PressureQuantizationSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PressureObserver_OnUpdate_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PressureService_AddObserver_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PressureService_AddObserver_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    PressureQuantizationSpec.$,
    'PressureQuantization',
    [
      mojo.internal.StructField(
        'cpuUtilizationThresholds', 0,
        0,
        mojo.internal.Array(mojo.internal.Double, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class PressureQuantization {
  constructor() {
    /** @type { !Array<!number> } */
    this.cpuUtilizationThresholds;
  }
}



mojo.internal.Struct(
    PressureObserver_OnUpdate_ParamsSpec.$,
    'PressureObserver_OnUpdate_Params',
    [
      mojo.internal.StructField(
        'state', 0,
        0,
        device_mojom_PressureStateSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class PressureObserver_OnUpdate_Params {
  constructor() {
    /** @type { !device_mojom_PressureState } */
    this.state;
  }
}



mojo.internal.Struct(
    PressureService_AddObserver_ParamsSpec.$,
    'PressureService_AddObserver_Params',
    [
      mojo.internal.StructField(
        'observer', 0,
        0,
        mojo.internal.InterfaceProxy(PressureObserverRemote),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'quantization', 8,
        0,
        PressureQuantizationSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class PressureService_AddObserver_Params {
  constructor() {
    /** @type { !PressureObserverRemote } */
    this.observer;
    /** @type { !PressureQuantization } */
    this.quantization;
  }
}



mojo.internal.Struct(
    PressureService_AddObserver_ResponseParamsSpec.$,
    'PressureService_AddObserver_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        PressureStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class PressureService_AddObserver_ResponseParams {
  constructor() {
    /** @type { !PressureStatus } */
    this.status;
  }
}

