// third_party/blink/public/mojom/compute_pressure/pressure_service.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/compute_pressure/pressure_service.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/compute_pressure/pressure_service.mojom-params-data.h"
#include "third_party/blink/public/mojom/compute_pressure/pressure_service.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/compute_pressure/pressure_service.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/compute_pressure/pressure_service.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_COMPUTE_PRESSURE_PRESSURE_SERVICE_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_COMPUTE_PRESSURE_PRESSURE_SERVICE_MOJOM_BLINK_JUMBO_H_
#endif



namespace blink {
namespace mojom {
namespace blink {
PressureQuantization::PressureQuantization()
    : cpu_utilization_thresholds() {}

PressureQuantization::PressureQuantization(
    WTF::Vector<double> cpu_utilization_thresholds_in)
    : cpu_utilization_thresholds(std::move(cpu_utilization_thresholds_in)) {}

PressureQuantization::~PressureQuantization() = default;

void PressureQuantization::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cpu_utilization_thresholds"), this->cpu_utilization_thresholds,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::Vector<double>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool PressureQuantization::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char PressureObserver::Name_[] = "blink.mojom.PressureObserver";

PressureObserver::IPCStableHashFunction PressureObserver::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kPressureObserver_OnUpdate_Name: {
      return &PressureObserver::OnUpdate_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* PressureObserver::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kPressureObserver_OnUpdate_Name:
            return "Receive blink::mojom::PressureObserver::OnUpdate";
    }
  } else {
    switch (message.name()) {
      case internal::kPressureObserver_OnUpdate_Name:
            return "Receive reply blink::mojom::PressureObserver::OnUpdate";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t PressureObserver::OnUpdate_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PressureObserver::OnUpdate");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

PressureObserverProxy::PressureObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PressureObserverProxy::OnUpdate(
    ::device::mojom::blink::PressureStatePtr in_state) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PressureObserver::OnUpdate", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("state"), in_state,
                        "<value of type ::device::mojom::blink::PressureStatePtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPressureObserver_OnUpdate_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PressureObserver_OnUpdate_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->state)::BaseType> state_fragment(
          params.message());
  mojo::internal::Serialize<::device::mojom::PressureStateDataView>(
      in_state, state_fragment);
  params->state.Set(
      state_fragment.is_null() ? nullptr : state_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->state.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null state in PressureObserver.OnUpdate request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PressureObserver::Name_);
  message.set_method_name("OnUpdate");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool PressureObserverStubDispatch::Accept(
    PressureObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPressureObserver_OnUpdate_Name: {

      DCHECK(message->is_serialized());
      internal::PressureObserver_OnUpdate_Params_Data* params =
          reinterpret_cast<internal::PressureObserver_OnUpdate_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::device::mojom::blink::PressureStatePtr p_state{};
      PressureObserver_OnUpdate_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadState(&p_state))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PressureObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnUpdate(
std::move(p_state));
      return true;
    }
  }
  return false;
}

// static
bool PressureObserverStubDispatch::AcceptWithResponder(
    PressureObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kPressureObserver_OnUpdate_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPressureObserverValidationInfo[] = {
    {&internal::PressureObserver_OnUpdate_Params_Data::Validate,
     nullptr /* no response */},
};

bool PressureObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::PressureObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPressureObserverValidationInfo);
}

const char PressureService::Name_[] = "blink.mojom.PressureService";

PressureService::IPCStableHashFunction PressureService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kPressureService_AddObserver_Name: {
      return &PressureService::AddObserver_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* PressureService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kPressureService_AddObserver_Name:
            return "Receive blink::mojom::PressureService::AddObserver";
    }
  } else {
    switch (message.name()) {
      case internal::kPressureService_AddObserver_Name:
            return "Receive reply blink::mojom::PressureService::AddObserver";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t PressureService::AddObserver_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PressureService::AddObserver");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class PressureService_AddObserver_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PressureService_AddObserver_ForwardToCallback(
      PressureService::AddObserverCallback callback
      ) : callback_(std::move(callback)) {
  }

  PressureService_AddObserver_ForwardToCallback(const PressureService_AddObserver_ForwardToCallback&) = delete;
  PressureService_AddObserver_ForwardToCallback& operator=(const PressureService_AddObserver_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  PressureService::AddObserverCallback callback_;
};

PressureServiceProxy::PressureServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PressureServiceProxy::AddObserver(
    ::mojo::PendingRemote<PressureObserver> in_observer, PressureQuantizationPtr in_quantization, AddObserverCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PressureService::AddObserver", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("observer"), in_observer,
                        "<value of type ::mojo::PendingRemote<PressureObserver>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("quantization"), in_quantization,
                        "<value of type PressureQuantizationPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPressureService_AddObserver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PressureService_AddObserver_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::PressureObserverInterfaceBase>>(
      in_observer, &params->observer, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->observer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid observer in PressureService.AddObserver request");
  mojo::internal::MessageFragment<
      typename decltype(params->quantization)::BaseType> quantization_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::PressureQuantizationDataView>(
      in_quantization, quantization_fragment);
  params->quantization.Set(
      quantization_fragment.is_null() ? nullptr : quantization_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->quantization.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null quantization in PressureService.AddObserver request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PressureService::Name_);
  message.set_method_name("AddObserver");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PressureService_AddObserver_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class PressureService_AddObserver_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static PressureService::AddObserverCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PressureService_AddObserver_ProxyToResponder> proxy(
        new PressureService_AddObserver_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&PressureService_AddObserver_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PressureService_AddObserver_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  PressureService_AddObserver_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PressureService::AddObserverCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      PressureStatus in_status);
};

bool PressureService_AddObserver_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::PressureService_AddObserver_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PressureService_AddObserver_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  PressureStatus p_status{};
  PressureService_AddObserver_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadStatus(&p_status))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PressureService::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_status));
  return true;
}

void PressureService_AddObserver_ProxyToResponder::Run(
    PressureStatus in_status) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::PressureService::AddObserver", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("status"), in_status,
                        "<value of type PressureStatus>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPressureService_AddObserver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PressureService_AddObserver_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::PressureStatus>(
      in_status, &params->status);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PressureService::Name_);
  message.set_method_name("AddObserver");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PressureServiceStubDispatch::Accept(
    PressureService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPressureService_AddObserver_Name: {
      break;
    }
  }
  return false;
}

// static
bool PressureServiceStubDispatch::AcceptWithResponder(
    PressureService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kPressureService_AddObserver_Name: {

      internal::PressureService_AddObserver_Params_Data* params =
          reinterpret_cast<
              internal::PressureService_AddObserver_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<PressureObserver> p_observer{};
      PressureQuantizationPtr p_quantization{};
      PressureService_AddObserver_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_observer =
            input_data_view.TakeObserver<decltype(p_observer)>();
      }
      if (success && !input_data_view.ReadQuantization(&p_quantization))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PressureService::Name_, 0, false);
        return false;
      }
      PressureService::AddObserverCallback callback =
          PressureService_AddObserver_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddObserver(
std::move(p_observer), 
std::move(p_quantization), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPressureServiceValidationInfo[] = {
    {&internal::PressureService_AddObserver_Params_Data::Validate,
     &internal::PressureService_AddObserver_ResponseParams_Data::Validate},
};

bool PressureServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::PressureService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPressureServiceValidationInfo);
}

bool PressureServiceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::PressureService::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kPressureServiceValidationInfo);
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::blink::PressureQuantization::DataView, ::blink::mojom::blink::PressureQuantizationPtr>::Read(
    ::blink::mojom::blink::PressureQuantization::DataView input,
    ::blink::mojom::blink::PressureQuantizationPtr* output) {
  bool success = true;
  ::blink::mojom::blink::PressureQuantizationPtr result(::blink::mojom::blink::PressureQuantization::New());
  
      if (success && !input.ReadCpuUtilizationThresholds(&result->cpu_utilization_thresholds))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {


void PressureObserverInterceptorForTesting::OnUpdate(::device::mojom::blink::PressureStatePtr state) {
  GetForwardingInterface()->OnUpdate(std::move(state));
}
PressureObserverAsyncWaiter::PressureObserverAsyncWaiter(
    PressureObserver* proxy) : proxy_(proxy) {}

PressureObserverAsyncWaiter::~PressureObserverAsyncWaiter() = default;




void PressureServiceInterceptorForTesting::AddObserver(::mojo::PendingRemote<PressureObserver> observer, PressureQuantizationPtr quantization, AddObserverCallback callback) {
  GetForwardingInterface()->AddObserver(std::move(observer), std::move(quantization), std::move(callback));
}
PressureServiceAsyncWaiter::PressureServiceAsyncWaiter(
    PressureService* proxy) : proxy_(proxy) {}

PressureServiceAsyncWaiter::~PressureServiceAsyncWaiter() = default;

void PressureServiceAsyncWaiter::AddObserver(
    ::mojo::PendingRemote<PressureObserver> observer, PressureQuantizationPtr quantization, PressureStatus* out_status) {
  base::RunLoop loop;
  proxy_->AddObserver(std::move(observer),std::move(quantization),
      base::BindOnce(
          [](base::RunLoop* loop,
             PressureStatus* out_status
,
             PressureStatus status) {*out_status = std::move(status);
            loop->Quit();
          },
          &loop,
          out_status));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif