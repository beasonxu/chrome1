// third_party/blink/public/mojom/digital_goods/digital_goods.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DIGITAL_GOODS_DIGITAL_GOODS_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DIGITAL_GOODS_DIGITAL_GOODS_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/digital_goods/digital_goods.mojom-shared.h"
#include "third_party/blink/public/mojom/digital_goods/digital_goods.mojom-blink-forward.h"
#include "components/digital_goods/mojom/digital_goods.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace payments {
namespace mojom {
namespace blink {

class DigitalGoodsProxy;

template <typename ImplRefTraits>
class DigitalGoodsStub;

class DigitalGoodsRequestValidator;
class DigitalGoodsResponseValidator;


class PLATFORM_EXPORT DigitalGoods
    : public DigitalGoodsInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = DigitalGoodsInterfaceBase;
  using Proxy_ = DigitalGoodsProxy;

  template <typename ImplRefTraits>
  using Stub_ = DigitalGoodsStub<ImplRefTraits>;

  using RequestValidator_ = DigitalGoodsRequestValidator;
  using ResponseValidator_ = DigitalGoodsResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetDetailsMinVersion = 0,
    kListPurchasesMinVersion = 0,
    kListPurchaseHistoryMinVersion = 0,
    kConsumeMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GetDetails_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ListPurchases_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ListPurchaseHistory_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Consume_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~DigitalGoods() = default;


  using GetDetailsCallback = base::OnceCallback<void(::payments::mojom::blink::BillingResponseCode, WTF::Vector<::payments::mojom::blink::ItemDetailsPtr>)>;
  
  virtual void GetDetails(const WTF::Vector<WTF::String>& item_ids, GetDetailsCallback callback) = 0;


  using ListPurchasesCallback = base::OnceCallback<void(::payments::mojom::blink::BillingResponseCode, WTF::Vector<::payments::mojom::blink::PurchaseReferencePtr>)>;
  
  virtual void ListPurchases(ListPurchasesCallback callback) = 0;


  using ListPurchaseHistoryCallback = base::OnceCallback<void(::payments::mojom::blink::BillingResponseCode, WTF::Vector<::payments::mojom::blink::PurchaseReferencePtr>)>;
  
  virtual void ListPurchaseHistory(ListPurchaseHistoryCallback callback) = 0;


  using ConsumeCallback = base::OnceCallback<void(::payments::mojom::blink::BillingResponseCode)>;
  
  virtual void Consume(const WTF::String& purchase_token, ConsumeCallback callback) = 0;
};

class DigitalGoodsFactoryProxy;

template <typename ImplRefTraits>
class DigitalGoodsFactoryStub;

class DigitalGoodsFactoryRequestValidator;
class DigitalGoodsFactoryResponseValidator;


class PLATFORM_EXPORT DigitalGoodsFactory
    : public DigitalGoodsFactoryInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = DigitalGoodsFactoryInterfaceBase;
  using Proxy_ = DigitalGoodsFactoryProxy;

  template <typename ImplRefTraits>
  using Stub_ = DigitalGoodsFactoryStub<ImplRefTraits>;

  using RequestValidator_ = DigitalGoodsFactoryRequestValidator;
  using ResponseValidator_ = DigitalGoodsFactoryResponseValidator;
  enum MethodMinVersions : uint32_t {
    kCreateDigitalGoodsMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct CreateDigitalGoods_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~DigitalGoodsFactory() = default;


  using CreateDigitalGoodsCallback = base::OnceCallback<void(::payments::mojom::blink::CreateDigitalGoodsResponseCode, ::mojo::PendingRemote<DigitalGoods>)>;
  
  virtual void CreateDigitalGoods(const WTF::String& payment_method, CreateDigitalGoodsCallback callback) = 0;
};



class PLATFORM_EXPORT DigitalGoodsProxy
    : public DigitalGoods {
 public:
  using InterfaceType = DigitalGoods;

  explicit DigitalGoodsProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetDetails(const WTF::Vector<WTF::String>& item_ids, GetDetailsCallback callback) final;
  
  void ListPurchases(ListPurchasesCallback callback) final;
  
  void ListPurchaseHistory(ListPurchaseHistoryCallback callback) final;
  
  void Consume(const WTF::String& purchase_token, ConsumeCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class PLATFORM_EXPORT DigitalGoodsFactoryProxy
    : public DigitalGoodsFactory {
 public:
  using InterfaceType = DigitalGoodsFactory;

  explicit DigitalGoodsFactoryProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void CreateDigitalGoods(const WTF::String& payment_method, CreateDigitalGoodsCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT DigitalGoodsStubDispatch {
 public:
  static bool Accept(DigitalGoods* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      DigitalGoods* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<DigitalGoods>>
class DigitalGoodsStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  DigitalGoodsStub() = default;
  ~DigitalGoodsStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DigitalGoodsStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DigitalGoodsStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT DigitalGoodsFactoryStubDispatch {
 public:
  static bool Accept(DigitalGoodsFactory* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      DigitalGoodsFactory* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<DigitalGoodsFactory>>
class DigitalGoodsFactoryStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  DigitalGoodsFactoryStub() = default;
  ~DigitalGoodsFactoryStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DigitalGoodsFactoryStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DigitalGoodsFactoryStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT DigitalGoodsRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT DigitalGoodsFactoryRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT DigitalGoodsResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT DigitalGoodsFactoryResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace payments

namespace mojo {

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_DIGITAL_GOODS_DIGITAL_GOODS_MOJOM_BLINK_H_