// third_party/blink/public/mojom/digital_goods/digital_goods.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DIGITAL_GOODS_DIGITAL_GOODS_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DIGITAL_GOODS_DIGITAL_GOODS_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/digital_goods/digital_goods.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace payments {
namespace mojom {


class BLINK_COMMON_EXPORT DigitalGoodsInterceptorForTesting : public DigitalGoods {
  virtual DigitalGoods* GetForwardingInterface() = 0;
  void GetDetails(const std::vector<std::string>& item_ids, GetDetailsCallback callback) override;
  void ListPurchases(ListPurchasesCallback callback) override;
  void ListPurchaseHistory(ListPurchaseHistoryCallback callback) override;
  void Consume(const std::string& purchase_token, ConsumeCallback callback) override;
};
class BLINK_COMMON_EXPORT DigitalGoodsAsyncWaiter {
 public:
  explicit DigitalGoodsAsyncWaiter(DigitalGoods* proxy);

  DigitalGoodsAsyncWaiter(const DigitalGoodsAsyncWaiter&) = delete;
  DigitalGoodsAsyncWaiter& operator=(const DigitalGoodsAsyncWaiter&) = delete;

  ~DigitalGoodsAsyncWaiter();
  void GetDetails(
      const std::vector<std::string>& item_ids, ::payments::mojom::BillingResponseCode* out_code, std::vector<::payments::mojom::ItemDetailsPtr>* out_item_details_list);
  void ListPurchases(
      ::payments::mojom::BillingResponseCode* out_code, std::vector<::payments::mojom::PurchaseReferencePtr>* out_purchase_reference_list);
  void ListPurchaseHistory(
      ::payments::mojom::BillingResponseCode* out_code, std::vector<::payments::mojom::PurchaseReferencePtr>* out_purchase_reference_list);
  void Consume(
      const std::string& purchase_token, ::payments::mojom::BillingResponseCode* out_code);

 private:
  DigitalGoods* const proxy_;
};


class BLINK_COMMON_EXPORT DigitalGoodsFactoryInterceptorForTesting : public DigitalGoodsFactory {
  virtual DigitalGoodsFactory* GetForwardingInterface() = 0;
  void CreateDigitalGoods(const std::string& payment_method, CreateDigitalGoodsCallback callback) override;
};
class BLINK_COMMON_EXPORT DigitalGoodsFactoryAsyncWaiter {
 public:
  explicit DigitalGoodsFactoryAsyncWaiter(DigitalGoodsFactory* proxy);

  DigitalGoodsFactoryAsyncWaiter(const DigitalGoodsFactoryAsyncWaiter&) = delete;
  DigitalGoodsFactoryAsyncWaiter& operator=(const DigitalGoodsFactoryAsyncWaiter&) = delete;

  ~DigitalGoodsFactoryAsyncWaiter();
  void CreateDigitalGoods(
      const std::string& payment_method, ::payments::mojom::CreateDigitalGoodsResponseCode* out_code, ::mojo::PendingRemote<DigitalGoods>* out_digital_goods);

 private:
  DigitalGoodsFactory* const proxy_;
};




}  // namespace mojom
}  // namespace payments

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_DIGITAL_GOODS_DIGITAL_GOODS_MOJOM_TEST_UTILS_H_