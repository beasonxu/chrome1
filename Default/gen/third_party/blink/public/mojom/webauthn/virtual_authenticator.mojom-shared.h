// third_party/blink/public/mojom/webauthn/virtual_authenticator.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBAUTHN_VIRTUAL_AUTHENTICATOR_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBAUTHN_VIRTUAL_AUTHENTICATOR_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/webauthn/virtual_authenticator.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"
#include "third_party/blink/public/mojom/webauthn/authenticator.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace test {
namespace mojom {
class VirtualAuthenticatorOptionsDataView;

class RegisteredKeyDataView;



}  // namespace mojom
}  // namespace test
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::test::mojom::VirtualAuthenticatorOptionsDataView> {
  using Data = ::blink::test::mojom::internal::VirtualAuthenticatorOptions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::test::mojom::RegisteredKeyDataView> {
  using Data = ::blink::test::mojom::internal::RegisteredKey_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace test {
namespace mojom {


enum class ClientToAuthenticatorProtocol : int32_t {
  
  U2F = 0,
  
  CTAP2 = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, ClientToAuthenticatorProtocol value);
inline bool IsKnownEnumValue(ClientToAuthenticatorProtocol value) {
  return internal::ClientToAuthenticatorProtocol_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class Ctap2Version : int32_t {
  
  CTAP2_0 = 0,
  
  CTAP2_1 = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, Ctap2Version value);
inline bool IsKnownEnumValue(Ctap2Version value) {
  return internal::Ctap2Version_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class VirtualAuthenticatorInterfaceBase {};

using VirtualAuthenticatorPtrDataView =
    mojo::InterfacePtrDataView<VirtualAuthenticatorInterfaceBase>;
using VirtualAuthenticatorRequestDataView =
    mojo::InterfaceRequestDataView<VirtualAuthenticatorInterfaceBase>;
using VirtualAuthenticatorAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<VirtualAuthenticatorInterfaceBase>;
using VirtualAuthenticatorAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<VirtualAuthenticatorInterfaceBase>;
class VirtualAuthenticatorManagerInterfaceBase {};

using VirtualAuthenticatorManagerPtrDataView =
    mojo::InterfacePtrDataView<VirtualAuthenticatorManagerInterfaceBase>;
using VirtualAuthenticatorManagerRequestDataView =
    mojo::InterfaceRequestDataView<VirtualAuthenticatorManagerInterfaceBase>;
using VirtualAuthenticatorManagerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<VirtualAuthenticatorManagerInterfaceBase>;
using VirtualAuthenticatorManagerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<VirtualAuthenticatorManagerInterfaceBase>;


class VirtualAuthenticatorOptionsDataView {
 public:
  VirtualAuthenticatorOptionsDataView() = default;

  VirtualAuthenticatorOptionsDataView(
      internal::VirtualAuthenticatorOptions_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadProtocol(UserType* output) const {
    auto data_value = data_->protocol;
    return mojo::internal::Deserialize<::blink::test::mojom::ClientToAuthenticatorProtocol>(
        data_value, output);
  }
  ClientToAuthenticatorProtocol protocol() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::test::mojom::ClientToAuthenticatorProtocol>(data_->protocol));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadCtap2Version(UserType* output) const {
    auto data_value = data_->ctap2_version;
    return mojo::internal::Deserialize<::blink::test::mojom::Ctap2Version>(
        data_value, output);
  }
  Ctap2Version ctap2_version() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::test::mojom::Ctap2Version>(data_->ctap2_version));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadTransport(UserType* output) const {
    auto data_value = data_->transport;
    return mojo::internal::Deserialize<::blink::mojom::AuthenticatorTransport>(
        data_value, output);
  }
  ::blink::mojom::AuthenticatorTransport transport() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::AuthenticatorTransport>(data_->transport));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadAttachment(UserType* output) const {
    auto data_value = data_->attachment;
    return mojo::internal::Deserialize<::blink::mojom::AuthenticatorAttachment>(
        data_value, output);
  }
  ::blink::mojom::AuthenticatorAttachment attachment() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::AuthenticatorAttachment>(data_->attachment));
  }
  bool has_resident_key() const {
    return data_->has_resident_key;
  }
  bool has_user_verification() const {
    return data_->has_user_verification;
  }
  bool is_user_present() const {
    return data_->is_user_present;
  }
  bool has_large_blob() const {
    return data_->has_large_blob;
  }
  bool has_cred_blob() const {
    return data_->has_cred_blob;
  }
  bool has_min_pin_length() const {
    return data_->has_min_pin_length;
  }
 private:
  internal::VirtualAuthenticatorOptions_Data* data_ = nullptr;
};



class RegisteredKeyDataView {
 public:
  RegisteredKeyDataView() = default;

  RegisteredKeyDataView(
      internal::RegisteredKey_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeyHandleDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeyHandle(UserType* output) {
    
    auto* pointer = data_->key_handle.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
  inline void GetRpIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRpId(UserType* output) {
    
    auto* pointer = data_->rp_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPrivateKeyDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrivateKey(UserType* output) {
    
    auto* pointer = data_->private_key.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
  int32_t counter() const {
    return data_->counter;
  }
 private:
  internal::RegisteredKey_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace test
}  // namespace blink

namespace std {

template <>
struct hash<::blink::test::mojom::ClientToAuthenticatorProtocol>
    : public mojo::internal::EnumHashImpl<::blink::test::mojom::ClientToAuthenticatorProtocol> {};

template <>
struct hash<::blink::test::mojom::Ctap2Version>
    : public mojo::internal::EnumHashImpl<::blink::test::mojom::Ctap2Version> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::test::mojom::ClientToAuthenticatorProtocol, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::test::mojom::ClientToAuthenticatorProtocol, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::test::mojom::ClientToAuthenticatorProtocol>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::test::mojom::Ctap2Version, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::test::mojom::Ctap2Version, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::test::mojom::Ctap2Version>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::test::mojom::VirtualAuthenticatorOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::test::mojom::VirtualAuthenticatorOptionsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::test::mojom::internal::VirtualAuthenticatorOptions_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::blink::test::mojom::ClientToAuthenticatorProtocol>(
        Traits::protocol(input), &fragment->protocol);
    mojo::internal::Serialize<::blink::test::mojom::Ctap2Version>(
        Traits::ctap2_version(input), &fragment->ctap2_version);
    mojo::internal::Serialize<::blink::mojom::AuthenticatorTransport>(
        Traits::transport(input), &fragment->transport);
    mojo::internal::Serialize<::blink::mojom::AuthenticatorAttachment>(
        Traits::attachment(input), &fragment->attachment);
    fragment->has_resident_key = Traits::has_resident_key(input);
    fragment->has_user_verification = Traits::has_user_verification(input);
    fragment->is_user_present = Traits::is_user_present(input);
    fragment->has_large_blob = Traits::has_large_blob(input);
    fragment->has_cred_blob = Traits::has_cred_blob(input);
    fragment->has_min_pin_length = Traits::has_min_pin_length(input);
  }

  static bool Deserialize(::blink::test::mojom::internal::VirtualAuthenticatorOptions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::test::mojom::VirtualAuthenticatorOptionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::test::mojom::RegisteredKeyDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::test::mojom::RegisteredKeyDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::test::mojom::internal::RegisteredKey_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::key_handle(input)) in_key_handle = Traits::key_handle(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->key_handle)::BaseType>
        key_handle_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams key_handle_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_key_handle, key_handle_fragment, &key_handle_validate_params);
    fragment->key_handle.Set(
        key_handle_fragment.is_null() ? nullptr : key_handle_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->key_handle.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null key_handle in RegisteredKey struct");
    decltype(Traits::rp_id(input)) in_rp_id = Traits::rp_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->rp_id)::BaseType> rp_id_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_rp_id, rp_id_fragment);
    fragment->rp_id.Set(
        rp_id_fragment.is_null() ? nullptr : rp_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->rp_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null rp_id in RegisteredKey struct");
    decltype(Traits::private_key(input)) in_private_key = Traits::private_key(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->private_key)::BaseType>
        private_key_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams private_key_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_private_key, private_key_fragment, &private_key_validate_params);
    fragment->private_key.Set(
        private_key_fragment.is_null() ? nullptr : private_key_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->private_key.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null private_key in RegisteredKey struct");
    fragment->counter = Traits::counter(input);
  }

  static bool Deserialize(::blink::test::mojom::internal::RegisteredKey_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::test::mojom::RegisteredKeyDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace test {
namespace mojom {



inline void RegisteredKeyDataView::GetKeyHandleDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->key_handle.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}
inline void RegisteredKeyDataView::GetRpIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->rp_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void RegisteredKeyDataView::GetPrivateKeyDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->private_key.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}



}  // namespace mojom
}  // namespace test
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::test::mojom::ClientToAuthenticatorProtocol> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::test::mojom::ClientToAuthenticatorProtocol value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::test::mojom::Ctap2Version> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::test::mojom::Ctap2Version value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBAUTHN_VIRTUAL_AUTHENTICATOR_MOJOM_SHARED_H_