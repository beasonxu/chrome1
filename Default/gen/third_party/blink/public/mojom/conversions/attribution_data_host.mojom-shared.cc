// third_party/blink/public/mojom/conversions/attribution_data_host.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/conversions/attribution_data_host.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/conversions/attribution_data_host.mojom-params-data.h"
namespace blink {
namespace mojom {

namespace internal {


// static
bool AttributionDebugKey_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AttributionDebugKey_Data* object =
      static_cast<const AttributionDebugKey_Data*>(data);

  return true;
}

AttributionDebugKey_Data::AttributionDebugKey_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AttributionFilterData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AttributionFilterData_Data* object =
      static_cast<const AttributionFilterData_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->filter_values, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams filter_values_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr))));
  if (!mojo::internal::ValidateContainer(object->filter_values, validation_context,
                                         &filter_values_validate_params)) {
    return false;
  }

  return true;
}

AttributionFilterData_Data::AttributionFilterData_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AttributionAggregatableTriggerData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AttributionAggregatableTriggerData_Data* object =
      static_cast<const AttributionAggregatableTriggerData_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->key_piece, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->key_piece, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->source_keys, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams source_keys_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->source_keys, validation_context,
                                         &source_keys_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->filters, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->filters, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->not_filters, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->not_filters, validation_context))
    return false;

  return true;
}

AttributionAggregatableTriggerData_Data::AttributionAggregatableTriggerData_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AttributionSourceData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 72, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AttributionSourceData_Data* object =
      static_cast<const AttributionSourceData_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->destination, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->destination, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->reporting_origin, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->reporting_origin, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->expiry, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->debug_key, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->filter_data, 7, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->filter_data, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->aggregation_keys, 8, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams aggregation_keys_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->aggregation_keys, validation_context,
                                         &aggregation_keys_validate_params)) {
    return false;
  }

  return true;
}

AttributionSourceData_Data::AttributionSourceData_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AttributionTriggerDedupKey_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AttributionTriggerDedupKey_Data* object =
      static_cast<const AttributionTriggerDedupKey_Data*>(data);

  return true;
}

AttributionTriggerDedupKey_Data::AttributionTriggerDedupKey_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool EventTriggerData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 48, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const EventTriggerData_Data* object =
      static_cast<const EventTriggerData_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->dedup_key, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->filters, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->filters, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->not_filters, 5, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->not_filters, validation_context))
    return false;

  return true;
}

EventTriggerData_Data::EventTriggerData_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AttributionTriggerData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 64, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AttributionTriggerData_Data* object =
      static_cast<const AttributionTriggerData_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->reporting_origin, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->reporting_origin, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->event_triggers, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams event_triggers_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->event_triggers, validation_context,
                                         &event_triggers_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->filters, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->filters, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->not_filters, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->not_filters, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->aggregatable_trigger_data, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams aggregatable_trigger_data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->aggregatable_trigger_data, validation_context,
                                         &aggregatable_trigger_data_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->aggregatable_values, 6, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams aggregatable_values_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->aggregatable_values, validation_context,
                                         &aggregatable_values_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->debug_key, validation_context))
    return false;

  return true;
}

AttributionTriggerData_Data::AttributionTriggerData_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AttributionDataHost_SourceDataAvailable_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AttributionDataHost_SourceDataAvailable_Params_Data* object =
      static_cast<const AttributionDataHost_SourceDataAvailable_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->data, validation_context))
    return false;

  return true;
}

AttributionDataHost_SourceDataAvailable_Params_Data::AttributionDataHost_SourceDataAvailable_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AttributionDataHost_TriggerDataAvailable_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AttributionDataHost_TriggerDataAvailable_Params_Data* object =
      static_cast<const AttributionDataHost_TriggerDataAvailable_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->data, validation_context))
    return false;

  return true;
}

AttributionDataHost_TriggerDataAvailable_Params_Data::AttributionDataHost_TriggerDataAvailable_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink