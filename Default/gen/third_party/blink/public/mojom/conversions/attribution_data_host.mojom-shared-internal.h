// third_party/blink/public/mojom/conversions/attribution_data_host.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONVERSIONS_ATTRIBUTION_DATA_HOST_MOJOM_SHARED_INTERNAL_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONVERSIONS_ATTRIBUTION_DATA_HOST_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/int128.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace blink {
namespace mojom {
namespace internal {
class AttributionDebugKey_Data;
class AttributionFilterData_Data;
class AttributionAggregatableTriggerData_Data;
class AttributionSourceData_Data;
class AttributionTriggerDedupKey_Data;
class EventTriggerData_Data;
class AttributionTriggerData_Data;

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AttributionDebugKey_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t value;

 private:
  friend class mojo::internal::MessageFragment<AttributionDebugKey_Data>;

  AttributionDebugKey_Data();
  ~AttributionDebugKey_Data() = delete;
};
static_assert(sizeof(AttributionDebugKey_Data) == 16,
              "Bad sizeof(AttributionDebugKey_Data)");
// Used by AttributionDebugKey::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AttributionDebugKey_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AttributionDebugKey_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AttributionDebugKey_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AttributionDebugKey_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AttributionDebugKey_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AttributionFilterData_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>>>> filter_values;

 private:
  friend class mojo::internal::MessageFragment<AttributionFilterData_Data>;

  AttributionFilterData_Data();
  ~AttributionFilterData_Data() = delete;
};
static_assert(sizeof(AttributionFilterData_Data) == 16,
              "Bad sizeof(AttributionFilterData_Data)");
// Used by AttributionFilterData::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AttributionFilterData_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AttributionFilterData_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AttributionFilterData_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AttributionFilterData_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AttributionFilterData_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AttributionAggregatableTriggerData_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Uint128_Data> key_piece;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> source_keys;
  mojo::internal::Pointer<internal::AttributionFilterData_Data> filters;
  mojo::internal::Pointer<internal::AttributionFilterData_Data> not_filters;

 private:
  friend class mojo::internal::MessageFragment<AttributionAggregatableTriggerData_Data>;

  AttributionAggregatableTriggerData_Data();
  ~AttributionAggregatableTriggerData_Data() = delete;
};
static_assert(sizeof(AttributionAggregatableTriggerData_Data) == 40,
              "Bad sizeof(AttributionAggregatableTriggerData_Data)");
// Used by AttributionAggregatableTriggerData::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AttributionAggregatableTriggerData_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AttributionAggregatableTriggerData_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AttributionAggregatableTriggerData_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AttributionAggregatableTriggerData_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AttributionAggregatableTriggerData_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AttributionSourceData_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> destination;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> reporting_origin;
  uint64_t source_event_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> expiry;
  int64_t priority;
  mojo::internal::Pointer<internal::AttributionDebugKey_Data> debug_key;
  mojo::internal::Pointer<internal::AttributionFilterData_Data> filter_data;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, mojo::internal::Pointer<::mojo_base::mojom::internal::Uint128_Data>>> aggregation_keys;

 private:
  friend class mojo::internal::MessageFragment<AttributionSourceData_Data>;

  AttributionSourceData_Data();
  ~AttributionSourceData_Data() = delete;
};
static_assert(sizeof(AttributionSourceData_Data) == 72,
              "Bad sizeof(AttributionSourceData_Data)");
// Used by AttributionSourceData::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AttributionSourceData_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AttributionSourceData_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AttributionSourceData_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AttributionSourceData_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AttributionSourceData_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AttributionTriggerDedupKey_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t value;

 private:
  friend class mojo::internal::MessageFragment<AttributionTriggerDedupKey_Data>;

  AttributionTriggerDedupKey_Data();
  ~AttributionTriggerDedupKey_Data() = delete;
};
static_assert(sizeof(AttributionTriggerDedupKey_Data) == 16,
              "Bad sizeof(AttributionTriggerDedupKey_Data)");
// Used by AttributionTriggerDedupKey::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AttributionTriggerDedupKey_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AttributionTriggerDedupKey_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AttributionTriggerDedupKey_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AttributionTriggerDedupKey_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AttributionTriggerDedupKey_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) EventTriggerData_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t data;
  int64_t priority;
  mojo::internal::Pointer<internal::AttributionTriggerDedupKey_Data> dedup_key;
  mojo::internal::Pointer<internal::AttributionFilterData_Data> filters;
  mojo::internal::Pointer<internal::AttributionFilterData_Data> not_filters;

 private:
  friend class mojo::internal::MessageFragment<EventTriggerData_Data>;

  EventTriggerData_Data();
  ~EventTriggerData_Data() = delete;
};
static_assert(sizeof(EventTriggerData_Data) == 48,
              "Bad sizeof(EventTriggerData_Data)");
// Used by EventTriggerData::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct EventTriggerData_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  EventTriggerData_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~EventTriggerData_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<EventTriggerData_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    EventTriggerData_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AttributionTriggerData_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> reporting_origin;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::EventTriggerData_Data>>> event_triggers;
  mojo::internal::Pointer<internal::AttributionFilterData_Data> filters;
  mojo::internal::Pointer<internal::AttributionFilterData_Data> not_filters;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::AttributionAggregatableTriggerData_Data>>> aggregatable_trigger_data;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, uint32_t>> aggregatable_values;
  mojo::internal::Pointer<internal::AttributionDebugKey_Data> debug_key;

 private:
  friend class mojo::internal::MessageFragment<AttributionTriggerData_Data>;

  AttributionTriggerData_Data();
  ~AttributionTriggerData_Data() = delete;
};
static_assert(sizeof(AttributionTriggerData_Data) == 64,
              "Bad sizeof(AttributionTriggerData_Data)");
// Used by AttributionTriggerData::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AttributionTriggerData_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AttributionTriggerData_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AttributionTriggerData_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AttributionTriggerData_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AttributionTriggerData_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONVERSIONS_ATTRIBUTION_DATA_HOST_MOJOM_SHARED_INTERNAL_H_