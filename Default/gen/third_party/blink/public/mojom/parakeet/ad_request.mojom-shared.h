// third_party/blink/public/mojom/parakeet/ad_request.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PARAKEET_AD_REQUEST_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PARAKEET_AD_REQUEST_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/parakeet/ad_request.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {
class AdPropertiesDataView;

class AdGeolocationDataView;

class AdTargetingDataView;

class AdRequestConfigDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::AdPropertiesDataView> {
  using Data = ::blink::mojom::internal::AdProperties_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::AdGeolocationDataView> {
  using Data = ::blink::mojom::internal::AdGeolocation_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::AdTargetingDataView> {
  using Data = ::blink::mojom::internal::AdTargeting_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::AdRequestConfigDataView> {
  using Data = ::blink::mojom::internal::AdRequestConfig_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class AdSignals : int32_t {
  
  kCourseGeolocation = 0,
  
  kCourseUserAgent = 1,
  
  kTargeting = 2,
  
  kUserAdInterests = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, AdSignals value);
inline bool IsKnownEnumValue(AdSignals value) {
  return internal::AdSignals_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class AdPropertiesDataView {
 public:
  AdPropertiesDataView() = default;

  AdPropertiesDataView(
      internal::AdProperties_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetWidthDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadWidth(UserType* output) {
    
    auto* pointer = data_->width.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetHeightDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHeight(UserType* output) {
    
    auto* pointer = data_->height.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSlotDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSlot(UserType* output) {
    
    auto* pointer = data_->slot.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetLangDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLang(UserType* output) {
    
    auto* pointer = data_->lang.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetAdTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAdType(UserType* output) {
    
    auto* pointer = data_->ad_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  double bid_floor() const {
    return data_->bid_floor;
  }
 private:
  internal::AdProperties_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AdGeolocationDataView {
 public:
  AdGeolocationDataView() = default;

  AdGeolocationDataView(
      internal::AdGeolocation_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  double latitude() const {
    return data_->latitude;
  }
  double longitude() const {
    return data_->longitude;
  }
 private:
  internal::AdGeolocation_Data* data_ = nullptr;
};



class AdTargetingDataView {
 public:
  AdTargetingDataView() = default;

  AdTargetingDataView(
      internal::AdTargeting_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInterestsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInterests(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<mojo::StringDataView>, UserType>(),
    "Attempting to read the optional `interests` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadInterests` instead "
    "of `ReadInterests if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->interests.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
  inline void GetGeolocationDataView(
      AdGeolocationDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGeolocation(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::AdGeolocationDataView, UserType>(),
    "Attempting to read the optional `geolocation` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadGeolocation` instead "
    "of `ReadGeolocation if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->geolocation.Get();
    return mojo::internal::Deserialize<::blink::mojom::AdGeolocationDataView>(
        pointer, output, message_);
  }
 private:
  internal::AdTargeting_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AdRequestConfigDataView {
 public:
  AdRequestConfigDataView() = default;

  AdRequestConfigDataView(
      internal::AdRequestConfig_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAdRequestUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAdRequestUrl(UserType* output) {
    
    auto* pointer = data_->ad_request_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetAdPropertiesDataView(
      mojo::ArrayDataView<AdPropertiesDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAdProperties(UserType* output) {
    
    auto* pointer = data_->ad_properties.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::AdPropertiesDataView>>(
        pointer, output, message_);
  }
  inline void GetPublisherCodeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPublisherCode(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `publisher_code` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPublisherCode` instead "
    "of `ReadPublisherCode if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->publisher_code.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetTargetingDataView(
      AdTargetingDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTargeting(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::AdTargetingDataView, UserType>(),
    "Attempting to read the optional `targeting` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadTargeting` instead "
    "of `ReadTargeting if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->targeting.Get();
    return mojo::internal::Deserialize<::blink::mojom::AdTargetingDataView>(
        pointer, output, message_);
  }
  inline void GetAnonymizedProxiedSignalsDataView(
      mojo::ArrayDataView<AdSignals>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAnonymizedProxiedSignals(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<::blink::mojom::AdSignals>, UserType>(),
    "Attempting to read the optional `anonymized_proxied_signals` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadAnonymizedProxiedSignals` instead "
    "of `ReadAnonymizedProxiedSignals if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->anonymized_proxied_signals.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::AdSignals>>(
        pointer, output, message_);
  }
  inline void GetFallbackSourceDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFallbackSource(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::UrlDataView, UserType>(),
    "Attempting to read the optional `fallback_source` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFallbackSource` instead "
    "of `ReadFallbackSource if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->fallback_source.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::AdRequestConfig_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::AdSignals>
    : public mojo::internal::EnumHashImpl<::blink::mojom::AdSignals> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AdSignals, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::AdSignals, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::AdSignals>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AdPropertiesDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::AdPropertiesDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::AdProperties_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::width(input)) in_width = Traits::width(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->width)::BaseType> width_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_width, width_fragment);
    fragment->width.Set(
        width_fragment.is_null() ? nullptr : width_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->width.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null width in AdProperties struct");
    decltype(Traits::height(input)) in_height = Traits::height(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->height)::BaseType> height_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_height, height_fragment);
    fragment->height.Set(
        height_fragment.is_null() ? nullptr : height_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->height.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null height in AdProperties struct");
    decltype(Traits::slot(input)) in_slot = Traits::slot(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->slot)::BaseType> slot_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_slot, slot_fragment);
    fragment->slot.Set(
        slot_fragment.is_null() ? nullptr : slot_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->slot.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null slot in AdProperties struct");
    decltype(Traits::lang(input)) in_lang = Traits::lang(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->lang)::BaseType> lang_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_lang, lang_fragment);
    fragment->lang.Set(
        lang_fragment.is_null() ? nullptr : lang_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->lang.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null lang in AdProperties struct");
    decltype(Traits::ad_type(input)) in_ad_type = Traits::ad_type(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ad_type)::BaseType> ad_type_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_ad_type, ad_type_fragment);
    fragment->ad_type.Set(
        ad_type_fragment.is_null() ? nullptr : ad_type_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ad_type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ad_type in AdProperties struct");
    fragment->bid_floor = Traits::bid_floor(input);
  }

  static bool Deserialize(::blink::mojom::internal::AdProperties_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::AdPropertiesDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AdGeolocationDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::AdGeolocationDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::AdGeolocation_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->latitude = Traits::latitude(input);
    fragment->longitude = Traits::longitude(input);
  }

  static bool Deserialize(::blink::mojom::internal::AdGeolocation_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::AdGeolocationDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AdTargetingDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::AdTargetingDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::AdTargeting_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::interests(input)) in_interests = Traits::interests(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->interests)::BaseType>
        interests_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams interests_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_interests, interests_fragment, &interests_validate_params);
    fragment->interests.Set(
        interests_fragment.is_null() ? nullptr : interests_fragment.data());
    decltype(Traits::geolocation(input)) in_geolocation = Traits::geolocation(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->geolocation)::BaseType> geolocation_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::AdGeolocationDataView>(
        in_geolocation, geolocation_fragment);
    fragment->geolocation.Set(
        geolocation_fragment.is_null() ? nullptr : geolocation_fragment.data());
  }

  static bool Deserialize(::blink::mojom::internal::AdTargeting_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::AdTargetingDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AdRequestConfigDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::AdRequestConfigDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::AdRequestConfig_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::ad_request_url(input)) in_ad_request_url = Traits::ad_request_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ad_request_url)::BaseType> ad_request_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_ad_request_url, ad_request_url_fragment);
    fragment->ad_request_url.Set(
        ad_request_url_fragment.is_null() ? nullptr : ad_request_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ad_request_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ad_request_url in AdRequestConfig struct");
    decltype(Traits::ad_properties(input)) in_ad_properties = Traits::ad_properties(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ad_properties)::BaseType>
        ad_properties_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams ad_properties_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::AdPropertiesDataView>>(
        in_ad_properties, ad_properties_fragment, &ad_properties_validate_params);
    fragment->ad_properties.Set(
        ad_properties_fragment.is_null() ? nullptr : ad_properties_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ad_properties.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ad_properties in AdRequestConfig struct");
    decltype(Traits::publisher_code(input)) in_publisher_code = Traits::publisher_code(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->publisher_code)::BaseType> publisher_code_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_publisher_code, publisher_code_fragment);
    fragment->publisher_code.Set(
        publisher_code_fragment.is_null() ? nullptr : publisher_code_fragment.data());
    decltype(Traits::targeting(input)) in_targeting = Traits::targeting(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->targeting)::BaseType> targeting_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::AdTargetingDataView>(
        in_targeting, targeting_fragment);
    fragment->targeting.Set(
        targeting_fragment.is_null() ? nullptr : targeting_fragment.data());
    decltype(Traits::anonymized_proxied_signals(input)) in_anonymized_proxied_signals = Traits::anonymized_proxied_signals(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->anonymized_proxied_signals)::BaseType>
        anonymized_proxied_signals_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams anonymized_proxied_signals_validate_params(
        0, ::blink::mojom::internal::AdSignals_Data::Validate);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::AdSignals>>(
        in_anonymized_proxied_signals, anonymized_proxied_signals_fragment, &anonymized_proxied_signals_validate_params);
    fragment->anonymized_proxied_signals.Set(
        anonymized_proxied_signals_fragment.is_null() ? nullptr : anonymized_proxied_signals_fragment.data());
    decltype(Traits::fallback_source(input)) in_fallback_source = Traits::fallback_source(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->fallback_source)::BaseType> fallback_source_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_fallback_source, fallback_source_fragment);
    fragment->fallback_source.Set(
        fallback_source_fragment.is_null() ? nullptr : fallback_source_fragment.data());
  }

  static bool Deserialize(::blink::mojom::internal::AdRequestConfig_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::AdRequestConfigDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void AdPropertiesDataView::GetWidthDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->width.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void AdPropertiesDataView::GetHeightDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->height.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void AdPropertiesDataView::GetSlotDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->slot.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void AdPropertiesDataView::GetLangDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->lang.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void AdPropertiesDataView::GetAdTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->ad_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void AdTargetingDataView::GetInterestsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->interests.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}
inline void AdTargetingDataView::GetGeolocationDataView(
    AdGeolocationDataView* output) {
  auto pointer = data_->geolocation.Get();
  *output = AdGeolocationDataView(pointer, message_);
}


inline void AdRequestConfigDataView::GetAdRequestUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->ad_request_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void AdRequestConfigDataView::GetAdPropertiesDataView(
    mojo::ArrayDataView<AdPropertiesDataView>* output) {
  auto pointer = data_->ad_properties.Get();
  *output = mojo::ArrayDataView<AdPropertiesDataView>(pointer, message_);
}
inline void AdRequestConfigDataView::GetPublisherCodeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->publisher_code.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void AdRequestConfigDataView::GetTargetingDataView(
    AdTargetingDataView* output) {
  auto pointer = data_->targeting.Get();
  *output = AdTargetingDataView(pointer, message_);
}
inline void AdRequestConfigDataView::GetAnonymizedProxiedSignalsDataView(
    mojo::ArrayDataView<AdSignals>* output) {
  auto pointer = data_->anonymized_proxied_signals.Get();
  *output = mojo::ArrayDataView<AdSignals>(pointer, message_);
}
inline void AdRequestConfigDataView::GetFallbackSourceDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->fallback_source.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::AdSignals> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::AdSignals value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PARAKEET_AD_REQUEST_MOJOM_SHARED_H_