// third_party/blink/public/mojom/native_io/native_io.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_IO_NATIVE_IO_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_IO_NATIVE_IO_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/native_io/native_io.mojom-blink.h"
#include "third_party/blink/renderer/platform/platform_export.h"


namespace blink {
namespace mojom {
namespace blink {


class PLATFORM_EXPORT NativeIOFileHostInterceptorForTesting : public NativeIOFileHost {
  virtual NativeIOFileHost* GetForwardingInterface() = 0;
  void Close(CloseCallback callback) override;
};
class PLATFORM_EXPORT NativeIOFileHostAsyncWaiter {
 public:
  explicit NativeIOFileHostAsyncWaiter(NativeIOFileHost* proxy);

  NativeIOFileHostAsyncWaiter(const NativeIOFileHostAsyncWaiter&) = delete;
  NativeIOFileHostAsyncWaiter& operator=(const NativeIOFileHostAsyncWaiter&) = delete;

  ~NativeIOFileHostAsyncWaiter();
  void Close(
      );

 private:
  NativeIOFileHost* const proxy_;
};


class PLATFORM_EXPORT NativeIOHostInterceptorForTesting : public NativeIOHost {
  virtual NativeIOHost* GetForwardingInterface() = 0;
  void RequestCapacityChange(int64_t capacity_delta, RequestCapacityChangeCallback callback) override;
  void OpenFile(const WTF::String& name, ::mojo::PendingReceiver<NativeIOFileHost> file_host_receiver, OpenFileCallback callback) override;
  void DeleteFile(const WTF::String& name, DeleteFileCallback callback) override;
  void GetAllFileNames(GetAllFileNamesCallback callback) override;
  void RenameFile(const WTF::String& old_name, const WTF::String& new_name, RenameFileCallback callback) override;
};
class PLATFORM_EXPORT NativeIOHostAsyncWaiter {
 public:
  explicit NativeIOHostAsyncWaiter(NativeIOHost* proxy);

  NativeIOHostAsyncWaiter(const NativeIOHostAsyncWaiter&) = delete;
  NativeIOHostAsyncWaiter& operator=(const NativeIOHostAsyncWaiter&) = delete;

  ~NativeIOHostAsyncWaiter();
  void RequestCapacityChange(
      int64_t capacity_delta, int64_t* out_granted_capacity_delta);
  void OpenFile(
      const WTF::String& name, ::mojo::PendingReceiver<NativeIOFileHost> file_host_receiver, ::base::File* out_backing_file, uint64_t* out_backing_file_size, NativeIOErrorPtr* out_open_error);
  void DeleteFile(
      const WTF::String& name, NativeIOErrorPtr* out_delete_error, uint64_t* out_granted_capacity_delta);
  void GetAllFileNames(
      bool* out_success, WTF::Vector<WTF::String>* out_names);
  void RenameFile(
      const WTF::String& old_name, const WTF::String& new_name, NativeIOErrorPtr* out_rename_error);

 private:
  NativeIOHost* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_IO_NATIVE_IO_MOJOM_BLINK_TEST_UTILS_H_