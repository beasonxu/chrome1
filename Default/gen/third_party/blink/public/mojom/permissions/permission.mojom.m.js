// third_party/blink/public/mojom/permissions/permission.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  PermissionStatus as blink_mojom_PermissionStatus,
  PermissionStatusSpec as blink_mojom_PermissionStatusSpec
} from './permission_status.mojom.m.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const PermissionNameSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const PermissionName = {
  
  GEOLOCATION: 0,
  NOTIFICATIONS: 1,
  MIDI: 2,
  PROTECTED_MEDIA_IDENTIFIER: 3,
  DURABLE_STORAGE: 4,
  AUDIO_CAPTURE: 5,
  VIDEO_CAPTURE: 6,
  BACKGROUND_SYNC: 7,
  SENSORS: 8,
  ACCESSIBILITY_EVENTS: 9,
  CLIPBOARD_READ: 10,
  CLIPBOARD_WRITE: 11,
  PAYMENT_HANDLER: 12,
  BACKGROUND_FETCH: 13,
  IDLE_DETECTION: 14,
  PERIODIC_BACKGROUND_SYNC: 15,
  SCREEN_WAKE_LOCK: 16,
  SYSTEM_WAKE_LOCK: 17,
  NFC: 18,
  STORAGE_ACCESS: 19,
  WINDOW_PLACEMENT: 20,
  LOCAL_FONTS: 21,
  DISPLAY_CAPTURE: 22,
  MIN_VALUE: 0,
  MAX_VALUE: 22,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class PermissionObserverPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.PermissionObserver', scope);
  }
}

/** @interface */
export class PermissionObserverInterface {
  
  /**
   * @param { !blink_mojom_PermissionStatus } status
   */

  onPermissionStatusChange(status) {}
}

/**
 * @implements { PermissionObserverInterface }
 */
export class PermissionObserverRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!PermissionObserverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          PermissionObserverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!PermissionObserverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !blink_mojom_PermissionStatus } status
   */

  onPermissionStatusChange(
      status) {
    this.proxy.sendMessage(
        0,
        PermissionObserver_OnPermissionStatusChange_ParamsSpec.$,
        null,
        [
          status
        ]);
  }
}

/**
 * An object which receives request messages for the PermissionObserver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class PermissionObserverReceiver {
  /**
   * @param {!PermissionObserverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!PermissionObserverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        PermissionObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PermissionObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        PermissionObserver_OnPermissionStatusChange_ParamsSpec.$,
        null,
        impl.onPermissionStatusChange.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class PermissionObserver {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.PermissionObserver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!PermissionObserverRemote}
   */
  static getRemote() {
    let remote = new PermissionObserverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the PermissionObserver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class PermissionObserverCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      PermissionObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PermissionObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onPermissionStatusChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        PermissionObserver_OnPermissionStatusChange_ParamsSpec.$,
        null,
        this.onPermissionStatusChange.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class PermissionServicePendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.PermissionService', scope);
  }
}

/** @interface */
export class PermissionServiceInterface {
  
  /**
   * @param { !PermissionDescriptor } permission
   * @return {!Promise<{
        status: !blink_mojom_PermissionStatus,
   *  }>}
   */

  hasPermission(permission) {}
  
  /**
   * @param { !PermissionDescriptor } permission
   * @param { !boolean } userGesture
   * @return {!Promise<{
        status: !blink_mojom_PermissionStatus,
   *  }>}
   */

  requestPermission(permission, userGesture) {}
  
  /**
   * @param { !Array<!PermissionDescriptor> } permission
   * @param { !boolean } userGesture
   * @return {!Promise<{
        statuses: !Array<!blink_mojom_PermissionStatus>,
   *  }>}
   */

  requestPermissions(permission, userGesture) {}
  
  /**
   * @param { !PermissionDescriptor } permission
   * @return {!Promise<{
        status: !blink_mojom_PermissionStatus,
   *  }>}
   */

  revokePermission(permission) {}
  
  /**
   * @param { !PermissionDescriptor } permission
   * @param { !blink_mojom_PermissionStatus } lastKnownStatus
   * @param { !PermissionObserverRemote } observer
   */

  addPermissionObserver(permission, lastKnownStatus, observer) {}
}

/**
 * @implements { PermissionServiceInterface }
 */
export class PermissionServiceRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!PermissionServicePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          PermissionServicePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!PermissionServicePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !PermissionDescriptor } permission
   * @return {!Promise<{
        status: !blink_mojom_PermissionStatus,
   *  }>}
   */

  hasPermission(
      permission) {
    return this.proxy.sendMessage(
        0,
        PermissionService_HasPermission_ParamsSpec.$,
        PermissionService_HasPermission_ResponseParamsSpec.$,
        [
          permission
        ]);
  }

  
  /**
   * @param { !PermissionDescriptor } permission
   * @param { !boolean } userGesture
   * @return {!Promise<{
        status: !blink_mojom_PermissionStatus,
   *  }>}
   */

  requestPermission(
      permission,
      userGesture) {
    return this.proxy.sendMessage(
        1,
        PermissionService_RequestPermission_ParamsSpec.$,
        PermissionService_RequestPermission_ResponseParamsSpec.$,
        [
          permission,
          userGesture
        ]);
  }

  
  /**
   * @param { !Array<!PermissionDescriptor> } permission
   * @param { !boolean } userGesture
   * @return {!Promise<{
        statuses: !Array<!blink_mojom_PermissionStatus>,
   *  }>}
   */

  requestPermissions(
      permission,
      userGesture) {
    return this.proxy.sendMessage(
        2,
        PermissionService_RequestPermissions_ParamsSpec.$,
        PermissionService_RequestPermissions_ResponseParamsSpec.$,
        [
          permission,
          userGesture
        ]);
  }

  
  /**
   * @param { !PermissionDescriptor } permission
   * @return {!Promise<{
        status: !blink_mojom_PermissionStatus,
   *  }>}
   */

  revokePermission(
      permission) {
    return this.proxy.sendMessage(
        3,
        PermissionService_RevokePermission_ParamsSpec.$,
        PermissionService_RevokePermission_ResponseParamsSpec.$,
        [
          permission
        ]);
  }

  
  /**
   * @param { !PermissionDescriptor } permission
   * @param { !blink_mojom_PermissionStatus } lastKnownStatus
   * @param { !PermissionObserverRemote } observer
   */

  addPermissionObserver(
      permission,
      lastKnownStatus,
      observer) {
    this.proxy.sendMessage(
        4,
        PermissionService_AddPermissionObserver_ParamsSpec.$,
        null,
        [
          permission,
          lastKnownStatus,
          observer
        ]);
  }
}

/**
 * An object which receives request messages for the PermissionService
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class PermissionServiceReceiver {
  /**
   * @param {!PermissionServiceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!PermissionServiceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        PermissionServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PermissionServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        PermissionService_HasPermission_ParamsSpec.$,
        PermissionService_HasPermission_ResponseParamsSpec.$,
        impl.hasPermission.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        PermissionService_RequestPermission_ParamsSpec.$,
        PermissionService_RequestPermission_ResponseParamsSpec.$,
        impl.requestPermission.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        PermissionService_RequestPermissions_ParamsSpec.$,
        PermissionService_RequestPermissions_ResponseParamsSpec.$,
        impl.requestPermissions.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        PermissionService_RevokePermission_ParamsSpec.$,
        PermissionService_RevokePermission_ResponseParamsSpec.$,
        impl.revokePermission.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        PermissionService_AddPermissionObserver_ParamsSpec.$,
        null,
        impl.addPermissionObserver.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class PermissionService {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.PermissionService";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!PermissionServiceRemote}
   */
  static getRemote() {
    let remote = new PermissionServiceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the PermissionService
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class PermissionServiceCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      PermissionServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PermissionServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.hasPermission =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        PermissionService_HasPermission_ParamsSpec.$,
        PermissionService_HasPermission_ResponseParamsSpec.$,
        this.hasPermission.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestPermission =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        PermissionService_RequestPermission_ParamsSpec.$,
        PermissionService_RequestPermission_ResponseParamsSpec.$,
        this.requestPermission.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestPermissions =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        PermissionService_RequestPermissions_ParamsSpec.$,
        PermissionService_RequestPermissions_ResponseParamsSpec.$,
        this.requestPermissions.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.revokePermission =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        PermissionService_RevokePermission_ParamsSpec.$,
        PermissionService_RevokePermission_ResponseParamsSpec.$,
        this.revokePermission.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addPermissionObserver =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        PermissionService_AddPermissionObserver_ParamsSpec.$,
        null,
        this.addPermissionObserver.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MidiPermissionDescriptorSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ClipboardPermissionDescriptorSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CameraDevicePermissionDescriptorSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PermissionDescriptorSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PermissionObserver_OnPermissionStatusChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PermissionService_HasPermission_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PermissionService_HasPermission_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PermissionService_RequestPermission_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PermissionService_RequestPermission_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PermissionService_RequestPermissions_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PermissionService_RequestPermissions_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PermissionService_RevokePermission_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PermissionService_RevokePermission_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PermissionService_AddPermissionObserver_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const PermissionDescriptorExtensionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    MidiPermissionDescriptorSpec.$,
    'MidiPermissionDescriptor',
    [
      mojo.internal.StructField(
        'sysex', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MidiPermissionDescriptor {
  constructor() {
    /** @type { !boolean } */
    this.sysex;
  }
}



mojo.internal.Struct(
    ClipboardPermissionDescriptorSpec.$,
    'ClipboardPermissionDescriptor',
    [
      mojo.internal.StructField(
        'allowWithoutGesture', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'allowWithoutSanitization', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class ClipboardPermissionDescriptor {
  constructor() {
    /** @type { !boolean } */
    this.allowWithoutGesture;
    /** @type { !boolean } */
    this.allowWithoutSanitization;
  }
}



mojo.internal.Struct(
    CameraDevicePermissionDescriptorSpec.$,
    'CameraDevicePermissionDescriptor',
    [
      mojo.internal.StructField(
        'panTiltZoom', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CameraDevicePermissionDescriptor {
  constructor() {
    /** @type { !boolean } */
    this.panTiltZoom;
  }
}



mojo.internal.Struct(
    PermissionDescriptorSpec.$,
    'PermissionDescriptor',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        PermissionNameSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'extension', 8,
        0,
        PermissionDescriptorExtensionSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class PermissionDescriptor {
  constructor() {
    /** @type { !PermissionName } */
    this.name;
    /** @type { (PermissionDescriptorExtension|undefined) } */
    this.extension;
  }
}



mojo.internal.Struct(
    PermissionObserver_OnPermissionStatusChange_ParamsSpec.$,
    'PermissionObserver_OnPermissionStatusChange_Params',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        blink_mojom_PermissionStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class PermissionObserver_OnPermissionStatusChange_Params {
  constructor() {
    /** @type { !blink_mojom_PermissionStatus } */
    this.status;
  }
}



mojo.internal.Struct(
    PermissionService_HasPermission_ParamsSpec.$,
    'PermissionService_HasPermission_Params',
    [
      mojo.internal.StructField(
        'permission', 0,
        0,
        PermissionDescriptorSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class PermissionService_HasPermission_Params {
  constructor() {
    /** @type { !PermissionDescriptor } */
    this.permission;
  }
}



mojo.internal.Struct(
    PermissionService_HasPermission_ResponseParamsSpec.$,
    'PermissionService_HasPermission_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        blink_mojom_PermissionStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class PermissionService_HasPermission_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_PermissionStatus } */
    this.status;
  }
}



mojo.internal.Struct(
    PermissionService_RequestPermission_ParamsSpec.$,
    'PermissionService_RequestPermission_Params',
    [
      mojo.internal.StructField(
        'permission', 0,
        0,
        PermissionDescriptorSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'userGesture', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class PermissionService_RequestPermission_Params {
  constructor() {
    /** @type { !PermissionDescriptor } */
    this.permission;
    /** @type { !boolean } */
    this.userGesture;
  }
}



mojo.internal.Struct(
    PermissionService_RequestPermission_ResponseParamsSpec.$,
    'PermissionService_RequestPermission_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        blink_mojom_PermissionStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class PermissionService_RequestPermission_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_PermissionStatus } */
    this.status;
  }
}



mojo.internal.Struct(
    PermissionService_RequestPermissions_ParamsSpec.$,
    'PermissionService_RequestPermissions_Params',
    [
      mojo.internal.StructField(
        'permission', 0,
        0,
        mojo.internal.Array(PermissionDescriptorSpec.$, false),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'userGesture', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class PermissionService_RequestPermissions_Params {
  constructor() {
    /** @type { !Array<!PermissionDescriptor> } */
    this.permission;
    /** @type { !boolean } */
    this.userGesture;
  }
}



mojo.internal.Struct(
    PermissionService_RequestPermissions_ResponseParamsSpec.$,
    'PermissionService_RequestPermissions_ResponseParams',
    [
      mojo.internal.StructField(
        'statuses', 0,
        0,
        mojo.internal.Array(blink_mojom_PermissionStatusSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class PermissionService_RequestPermissions_ResponseParams {
  constructor() {
    /** @type { !Array<!blink_mojom_PermissionStatus> } */
    this.statuses;
  }
}



mojo.internal.Struct(
    PermissionService_RevokePermission_ParamsSpec.$,
    'PermissionService_RevokePermission_Params',
    [
      mojo.internal.StructField(
        'permission', 0,
        0,
        PermissionDescriptorSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class PermissionService_RevokePermission_Params {
  constructor() {
    /** @type { !PermissionDescriptor } */
    this.permission;
  }
}



mojo.internal.Struct(
    PermissionService_RevokePermission_ResponseParamsSpec.$,
    'PermissionService_RevokePermission_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        blink_mojom_PermissionStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class PermissionService_RevokePermission_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_PermissionStatus } */
    this.status;
  }
}



mojo.internal.Struct(
    PermissionService_AddPermissionObserver_ParamsSpec.$,
    'PermissionService_AddPermissionObserver_Params',
    [
      mojo.internal.StructField(
        'permission', 0,
        0,
        PermissionDescriptorSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'lastKnownStatus', 8,
        0,
        blink_mojom_PermissionStatusSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'observer', 12,
        0,
        mojo.internal.InterfaceProxy(PermissionObserverRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class PermissionService_AddPermissionObserver_Params {
  constructor() {
    /** @type { !PermissionDescriptor } */
    this.permission;
    /** @type { !blink_mojom_PermissionStatus } */
    this.lastKnownStatus;
    /** @type { !PermissionObserverRemote } */
    this.observer;
  }
}

mojo.internal.Union(
    PermissionDescriptorExtensionSpec.$, 'PermissionDescriptorExtension',
    {
      'midi': {
        'ordinal': 0,
        'type': MidiPermissionDescriptorSpec.$,
      },
      'clipboard': {
        'ordinal': 1,
        'type': ClipboardPermissionDescriptorSpec.$,
      },
      'cameraDevice': {
        'ordinal': 2,
        'type': CameraDevicePermissionDescriptorSpec.$,
      },
    });

/**
 * @typedef { {
 *   midi: (!MidiPermissionDescriptor|undefined),
 *   clipboard: (!ClipboardPermissionDescriptor|undefined),
 *   cameraDevice: (!CameraDevicePermissionDescriptor|undefined),
 * } }
 */
export const PermissionDescriptorExtension = {};
