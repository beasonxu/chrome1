// third_party/blink/public/mojom/widget/visual_properties.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/widget/visual_properties.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/widget/visual_properties.mojom-params-data.h"
#include "third_party/blink/public/mojom/widget/visual_properties.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/widget/visual_properties.mojom-import-headers.h"
#include "third_party/blink/public/mojom/widget/visual_properties.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WIDGET_VISUAL_PROPERTIES_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WIDGET_VISUAL_PROPERTIES_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
VisualProperties::VisualProperties()
    : screen_infos(),
      auto_resize_enabled(false),
      min_size_for_auto_resize(),
      max_size_for_auto_resize(),
      new_size(),
      visible_viewport_size(),
      compositor_viewport_pixel_rect(),
      browser_controls_params(),
      scroll_focused_node_into_view(),
      local_surface_id(),
      is_fullscreen_granted(),
      display_mode(::blink::mojom::DisplayMode::kUndefined),
      capture_sequence_number(),
      zoom_level(),
      page_scale_factor(1),
      compositing_scale_factor(1),
      root_widget_window_segments(),
      is_pinch_gesture_active(),
      window_controls_overlay_rect() {}

VisualProperties::VisualProperties(
    const ::display::ScreenInfos& screen_infos_in,
    bool auto_resize_enabled_in,
    const ::gfx::Size& min_size_for_auto_resize_in,
    const ::gfx::Size& max_size_for_auto_resize_in,
    const ::gfx::Size& new_size_in,
    const ::gfx::Size& visible_viewport_size_in,
    const ::gfx::Rect& compositor_viewport_pixel_rect_in,
    const ::cc::BrowserControlsParams& browser_controls_params_in,
    bool scroll_focused_node_into_view_in,
    const absl::optional<::viz::LocalSurfaceId>& local_surface_id_in,
    bool is_fullscreen_granted_in,
    ::blink::mojom::DisplayMode display_mode_in,
    uint32_t capture_sequence_number_in,
    double zoom_level_in,
    float page_scale_factor_in,
    float compositing_scale_factor_in,
    std::vector<::gfx::Rect> root_widget_window_segments_in,
    bool is_pinch_gesture_active_in,
    const ::gfx::Rect& window_controls_overlay_rect_in)
    : screen_infos(std::move(screen_infos_in)),
      auto_resize_enabled(std::move(auto_resize_enabled_in)),
      min_size_for_auto_resize(std::move(min_size_for_auto_resize_in)),
      max_size_for_auto_resize(std::move(max_size_for_auto_resize_in)),
      new_size(std::move(new_size_in)),
      visible_viewport_size(std::move(visible_viewport_size_in)),
      compositor_viewport_pixel_rect(std::move(compositor_viewport_pixel_rect_in)),
      browser_controls_params(std::move(browser_controls_params_in)),
      scroll_focused_node_into_view(std::move(scroll_focused_node_into_view_in)),
      local_surface_id(std::move(local_surface_id_in)),
      is_fullscreen_granted(std::move(is_fullscreen_granted_in)),
      display_mode(std::move(display_mode_in)),
      capture_sequence_number(std::move(capture_sequence_number_in)),
      zoom_level(std::move(zoom_level_in)),
      page_scale_factor(std::move(page_scale_factor_in)),
      compositing_scale_factor(std::move(compositing_scale_factor_in)),
      root_widget_window_segments(std::move(root_widget_window_segments_in)),
      is_pinch_gesture_active(std::move(is_pinch_gesture_active_in)),
      window_controls_overlay_rect(std::move(window_controls_overlay_rect_in)) {}

VisualProperties::~VisualProperties() = default;

void VisualProperties::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "screen_infos"), this->screen_infos,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::display::ScreenInfos&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "auto_resize_enabled"), this->auto_resize_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "min_size_for_auto_resize"), this->min_size_for_auto_resize,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Size&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "max_size_for_auto_resize"), this->max_size_for_auto_resize,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Size&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "new_size"), this->new_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Size&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "visible_viewport_size"), this->visible_viewport_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Size&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "compositor_viewport_pixel_rect"), this->compositor_viewport_pixel_rect,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Rect&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "browser_controls_params"), this->browser_controls_params,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::cc::BrowserControlsParams&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "scroll_focused_node_into_view"), this->scroll_focused_node_into_view,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "local_surface_id"), this->local_surface_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::viz::LocalSurfaceId>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_fullscreen_granted"), this->is_fullscreen_granted,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "display_mode"), this->display_mode,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::mojom::DisplayMode>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "capture_sequence_number"), this->capture_sequence_number,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "zoom_level"), this->zoom_level,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type double>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "page_scale_factor"), this->page_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "compositing_scale_factor"), this->compositing_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "root_widget_window_segments"), this->root_widget_window_segments,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::gfx::Rect>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_pinch_gesture_active"), this->is_pinch_gesture_active,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "window_controls_overlay_rect"), this->window_controls_overlay_rect,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Rect&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool VisualProperties::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::VisualProperties::DataView, ::blink::mojom::VisualPropertiesPtr>::Read(
    ::blink::mojom::VisualProperties::DataView input,
    ::blink::mojom::VisualPropertiesPtr* output) {
  bool success = true;
  ::blink::mojom::VisualPropertiesPtr result(::blink::mojom::VisualProperties::New());
  
      if (success && !input.ReadScreenInfos(&result->screen_infos))
        success = false;
      if (success)
        result->auto_resize_enabled = input.auto_resize_enabled();
      if (success && !input.ReadMinSizeForAutoResize(&result->min_size_for_auto_resize))
        success = false;
      if (success && !input.ReadMaxSizeForAutoResize(&result->max_size_for_auto_resize))
        success = false;
      if (success && !input.ReadNewSize(&result->new_size))
        success = false;
      if (success && !input.ReadVisibleViewportSize(&result->visible_viewport_size))
        success = false;
      if (success && !input.ReadCompositorViewportPixelRect(&result->compositor_viewport_pixel_rect))
        success = false;
      if (success && !input.ReadBrowserControlsParams(&result->browser_controls_params))
        success = false;
      if (success)
        result->scroll_focused_node_into_view = input.scroll_focused_node_into_view();
      if (success && !input.ReadLocalSurfaceId(&result->local_surface_id))
        success = false;
      if (success)
        result->is_fullscreen_granted = input.is_fullscreen_granted();
      if (success && !input.ReadDisplayMode(&result->display_mode))
        success = false;
      if (success)
        result->capture_sequence_number = input.capture_sequence_number();
      if (success)
        result->zoom_level = input.zoom_level();
      if (success)
        result->page_scale_factor = input.page_scale_factor();
      if (success)
        result->compositing_scale_factor = input.compositing_scale_factor();
      if (success && !input.ReadRootWidgetWindowSegments(&result->root_widget_window_segments))
        success = false;
      if (success)
        result->is_pinch_gesture_active = input.is_pinch_gesture_active();
      if (success && !input.ReadWindowControlsOverlayRect(&result->window_controls_overlay_rect))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif