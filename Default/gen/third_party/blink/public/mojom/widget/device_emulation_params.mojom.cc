// third_party/blink/public/mojom/widget/device_emulation_params.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/widget/device_emulation_params.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/widget/device_emulation_params.mojom-params-data.h"
#include "third_party/blink/public/mojom/widget/device_emulation_params.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/widget/device_emulation_params.mojom-import-headers.h"
#include "third_party/blink/public/mojom/widget/device_emulation_params.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WIDGET_DEVICE_EMULATION_PARAMS_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WIDGET_DEVICE_EMULATION_PARAMS_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
DeviceEmulationParams::DeviceEmulationParams()
    : screen_type(),
      screen_size(),
      view_position(),
      view_size(),
      device_scale_factor(),
      scale(),
      viewport_offset(),
      viewport_scale(),
      screen_orientation_type(),
      screen_orientation_angle(),
      window_segments() {}

DeviceEmulationParams::DeviceEmulationParams(
    EmulatedScreenType screen_type_in,
    const ::gfx::Size& screen_size_in,
    const absl::optional<::gfx::Point>& view_position_in,
    const ::gfx::Size& view_size_in,
    float device_scale_factor_in,
    float scale_in,
    const ::gfx::PointF& viewport_offset_in,
    float viewport_scale_in,
    ::display::mojom::ScreenOrientation screen_orientation_type_in,
    uint32_t screen_orientation_angle_in,
    std::vector<::gfx::Rect> window_segments_in)
    : screen_type(std::move(screen_type_in)),
      screen_size(std::move(screen_size_in)),
      view_position(std::move(view_position_in)),
      view_size(std::move(view_size_in)),
      device_scale_factor(std::move(device_scale_factor_in)),
      scale(std::move(scale_in)),
      viewport_offset(std::move(viewport_offset_in)),
      viewport_scale(std::move(viewport_scale_in)),
      screen_orientation_type(std::move(screen_orientation_type_in)),
      screen_orientation_angle(std::move(screen_orientation_angle_in)),
      window_segments(std::move(window_segments_in)) {}

DeviceEmulationParams::~DeviceEmulationParams() = default;

void DeviceEmulationParams::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "screen_type"), this->screen_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type EmulatedScreenType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "screen_size"), this->screen_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Size&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "view_position"), this->view_position,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::gfx::Point>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "view_size"), this->view_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Size&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "device_scale_factor"), this->device_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "scale"), this->scale,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_offset"), this->viewport_offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::PointF&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_scale"), this->viewport_scale,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "screen_orientation_type"), this->screen_orientation_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::display::mojom::ScreenOrientation>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "screen_orientation_angle"), this->screen_orientation_angle,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "window_segments"), this->window_segments,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::gfx::Rect>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DeviceEmulationParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::DeviceEmulationParams::DataView, ::blink::mojom::DeviceEmulationParamsPtr>::Read(
    ::blink::mojom::DeviceEmulationParams::DataView input,
    ::blink::mojom::DeviceEmulationParamsPtr* output) {
  bool success = true;
  ::blink::mojom::DeviceEmulationParamsPtr result(::blink::mojom::DeviceEmulationParams::New());
  
      if (success && !input.ReadScreenType(&result->screen_type))
        success = false;
      if (success && !input.ReadScreenSize(&result->screen_size))
        success = false;
      if (success && !input.ReadViewPosition(&result->view_position))
        success = false;
      if (success && !input.ReadViewSize(&result->view_size))
        success = false;
      if (success)
        result->device_scale_factor = input.device_scale_factor();
      if (success)
        result->scale = input.scale();
      if (success && !input.ReadViewportOffset(&result->viewport_offset))
        success = false;
      if (success)
        result->viewport_scale = input.viewport_scale();
      if (success && !input.ReadScreenOrientationType(&result->screen_orientation_type))
        success = false;
      if (success)
        result->screen_orientation_angle = input.screen_orientation_angle();
      if (success && !input.ReadWindowSegments(&result->window_segments))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif