// third_party/blink/public/mojom/frame_sinks/embedded_frame_sink.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_SINKS_EMBEDDED_FRAME_SINK_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_SINKS_EMBEDDED_FRAME_SINK_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) SurfaceEmbedder_SetLocalSurfaceId_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::LocalSurfaceId_Data> local_surface_id;

 private:
  friend class mojo::internal::MessageFragment<SurfaceEmbedder_SetLocalSurfaceId_Params_Data>;

  SurfaceEmbedder_SetLocalSurfaceId_Params_Data();
  ~SurfaceEmbedder_SetLocalSurfaceId_Params_Data() = delete;
};
static_assert(sizeof(SurfaceEmbedder_SetLocalSurfaceId_Params_Data) == 16,
              "Bad sizeof(SurfaceEmbedder_SetLocalSurfaceId_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) EmbeddedFrameSinkClient_BindSurfaceEmbedder_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data embedder;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<EmbeddedFrameSinkClient_BindSurfaceEmbedder_Params_Data>;

  EmbeddedFrameSinkClient_BindSurfaceEmbedder_Params_Data();
  ~EmbeddedFrameSinkClient_BindSurfaceEmbedder_Params_Data() = delete;
};
static_assert(sizeof(EmbeddedFrameSinkClient_BindSurfaceEmbedder_Params_Data) == 16,
              "Bad sizeof(EmbeddedFrameSinkClient_BindSurfaceEmbedder_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> parent_frame_sink_id;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> frame_sink_id;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_Params_Data>;

  EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_Params_Data();
  ~EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_Params_Data() = delete;
};
static_assert(sizeof(EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_Params_Data) == 32,
              "Bad sizeof(EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkBundleId_Data> bundle_id;
  mojo::internal::Handle_Data receiver;
  mojo::internal::Interface_Data client;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_Params_Data>;

  EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_Params_Data();
  ~EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_Params_Data() = delete;
};
static_assert(sizeof(EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_Params_Data) == 32,
              "Bad sizeof(EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) EmbeddedFrameSinkProvider_CreateCompositorFrameSink_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> frame_sink_id;
  mojo::internal::Interface_Data client;
  mojo::internal::Handle_Data sink;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<EmbeddedFrameSinkProvider_CreateCompositorFrameSink_Params_Data>;

  EmbeddedFrameSinkProvider_CreateCompositorFrameSink_Params_Data();
  ~EmbeddedFrameSinkProvider_CreateCompositorFrameSink_Params_Data() = delete;
};
static_assert(sizeof(EmbeddedFrameSinkProvider_CreateCompositorFrameSink_Params_Data) == 32,
              "Bad sizeof(EmbeddedFrameSinkProvider_CreateCompositorFrameSink_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> frame_sink_id;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkBundleId_Data> bundle_id;
  mojo::internal::Interface_Data client;
  mojo::internal::Handle_Data sink;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_Params_Data>;

  EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_Params_Data();
  ~EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_Params_Data() = delete;
};
static_assert(sizeof(EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_Params_Data) == 40,
              "Bad sizeof(EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> parent_frame_sink_id;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> frame_sink_id;
  mojo::internal::Interface_Data surface_client;
  mojo::internal::Interface_Data client;
  mojo::internal::Handle_Data sink;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_Params_Data>;

  EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_Params_Data();
  ~EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_Params_Data() = delete;
};
static_assert(sizeof(EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_Params_Data) == 48,
              "Bad sizeof(EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) EmbeddedFrameSinkProvider_ConnectToEmbedder_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> frame_sink_id;
  mojo::internal::Handle_Data embedder;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<EmbeddedFrameSinkProvider_ConnectToEmbedder_Params_Data>;

  EmbeddedFrameSinkProvider_ConnectToEmbedder_Params_Data();
  ~EmbeddedFrameSinkProvider_ConnectToEmbedder_Params_Data() = delete;
};
static_assert(sizeof(EmbeddedFrameSinkProvider_ConnectToEmbedder_Params_Data) == 24,
              "Bad sizeof(EmbeddedFrameSinkProvider_ConnectToEmbedder_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> frame_sink_id;

 private:
  friend class mojo::internal::MessageFragment<EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_Params_Data>;

  EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_Params_Data();
  ~EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_Params_Data() = delete;
};
static_assert(sizeof(EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_Params_Data) == 16,
              "Bad sizeof(EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> frame_sink_id;

 private:
  friend class mojo::internal::MessageFragment<EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_Params_Data>;

  EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_Params_Data();
  ~EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_Params_Data() = delete;
};
static_assert(sizeof(EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_Params_Data) == 16,
              "Bad sizeof(EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_Params_Data)");

}  // namespace internal


class SurfaceEmbedder_SetLocalSurfaceId_ParamsDataView {
 public:
  SurfaceEmbedder_SetLocalSurfaceId_ParamsDataView() = default;

  SurfaceEmbedder_SetLocalSurfaceId_ParamsDataView(
      internal::SurfaceEmbedder_SetLocalSurfaceId_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLocalSurfaceIdDataView(
      ::viz::mojom::LocalSurfaceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocalSurfaceId(UserType* output) {
    
    auto* pointer = data_->local_surface_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::LocalSurfaceIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::SurfaceEmbedder_SetLocalSurfaceId_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EmbeddedFrameSinkClient_BindSurfaceEmbedder_ParamsDataView {
 public:
  EmbeddedFrameSinkClient_BindSurfaceEmbedder_ParamsDataView() = default;

  EmbeddedFrameSinkClient_BindSurfaceEmbedder_ParamsDataView(
      internal::EmbeddedFrameSinkClient_BindSurfaceEmbedder_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeEmbedder() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::SurfaceEmbedderInterfaceBase>>(
            &data_->embedder, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::EmbeddedFrameSinkClient_BindSurfaceEmbedder_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_ParamsDataView {
 public:
  EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_ParamsDataView() = default;

  EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_ParamsDataView(
      internal::EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParentFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParentFrameSinkId(UserType* output) {
    
    auto* pointer = data_->parent_frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, message_);
  }
  inline void GetFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameSinkId(UserType* output) {
    
    auto* pointer = data_->frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::EmbeddedFrameSinkClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_ParamsDataView {
 public:
  EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_ParamsDataView() = default;

  EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_ParamsDataView(
      internal::EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBundleIdDataView(
      ::viz::mojom::FrameSinkBundleIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBundleId(UserType* output) {
    
    auto* pointer = data_->bundle_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkBundleIdDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::viz::mojom::FrameSinkBundleInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::viz::mojom::FrameSinkBundleClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EmbeddedFrameSinkProvider_CreateCompositorFrameSink_ParamsDataView {
 public:
  EmbeddedFrameSinkProvider_CreateCompositorFrameSink_ParamsDataView() = default;

  EmbeddedFrameSinkProvider_CreateCompositorFrameSink_ParamsDataView(
      internal::EmbeddedFrameSinkProvider_CreateCompositorFrameSink_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameSinkId(UserType* output) {
    
    auto* pointer = data_->frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::viz::mojom::CompositorFrameSinkClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeSink() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::viz::mojom::CompositorFrameSinkInterfaceBase>>(
            &data_->sink, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::EmbeddedFrameSinkProvider_CreateCompositorFrameSink_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_ParamsDataView {
 public:
  EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_ParamsDataView() = default;

  EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_ParamsDataView(
      internal::EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameSinkId(UserType* output) {
    
    auto* pointer = data_->frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, message_);
  }
  inline void GetBundleIdDataView(
      ::viz::mojom::FrameSinkBundleIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBundleId(UserType* output) {
    
    auto* pointer = data_->bundle_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkBundleIdDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::viz::mojom::CompositorFrameSinkClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeSink() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::viz::mojom::CompositorFrameSinkInterfaceBase>>(
            &data_->sink, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_ParamsDataView {
 public:
  EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_ParamsDataView() = default;

  EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_ParamsDataView(
      internal::EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParentFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParentFrameSinkId(UserType* output) {
    
    auto* pointer = data_->parent_frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, message_);
  }
  inline void GetFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameSinkId(UserType* output) {
    
    auto* pointer = data_->frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeSurfaceClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::EmbeddedFrameSinkClientInterfaceBase>>(
            &data_->surface_client, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::viz::mojom::CompositorFrameSinkClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeSink() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::viz::mojom::CompositorFrameSinkInterfaceBase>>(
            &data_->sink, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EmbeddedFrameSinkProvider_ConnectToEmbedder_ParamsDataView {
 public:
  EmbeddedFrameSinkProvider_ConnectToEmbedder_ParamsDataView() = default;

  EmbeddedFrameSinkProvider_ConnectToEmbedder_ParamsDataView(
      internal::EmbeddedFrameSinkProvider_ConnectToEmbedder_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameSinkId(UserType* output) {
    
    auto* pointer = data_->frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeEmbedder() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::SurfaceEmbedderInterfaceBase>>(
            &data_->embedder, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::EmbeddedFrameSinkProvider_ConnectToEmbedder_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_ParamsDataView {
 public:
  EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_ParamsDataView() = default;

  EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_ParamsDataView(
      internal::EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameSinkId(UserType* output) {
    
    auto* pointer = data_->frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_ParamsDataView {
 public:
  EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_ParamsDataView() = default;

  EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_ParamsDataView(
      internal::EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameSinkId(UserType* output) {
    
    auto* pointer = data_->frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void SurfaceEmbedder_SetLocalSurfaceId_ParamsDataView::GetLocalSurfaceIdDataView(
    ::viz::mojom::LocalSurfaceIdDataView* output) {
  auto pointer = data_->local_surface_id.Get();
  *output = ::viz::mojom::LocalSurfaceIdDataView(pointer, message_);
}




inline void EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_ParamsDataView::GetParentFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->parent_frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, message_);
}
inline void EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSink_ParamsDataView::GetFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, message_);
}


inline void EmbeddedFrameSinkProvider_RegisterEmbeddedFrameSinkBundle_ParamsDataView::GetBundleIdDataView(
    ::viz::mojom::FrameSinkBundleIdDataView* output) {
  auto pointer = data_->bundle_id.Get();
  *output = ::viz::mojom::FrameSinkBundleIdDataView(pointer, message_);
}


inline void EmbeddedFrameSinkProvider_CreateCompositorFrameSink_ParamsDataView::GetFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, message_);
}


inline void EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_ParamsDataView::GetFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, message_);
}
inline void EmbeddedFrameSinkProvider_CreateBundledCompositorFrameSink_ParamsDataView::GetBundleIdDataView(
    ::viz::mojom::FrameSinkBundleIdDataView* output) {
  auto pointer = data_->bundle_id.Get();
  *output = ::viz::mojom::FrameSinkBundleIdDataView(pointer, message_);
}


inline void EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_ParamsDataView::GetParentFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->parent_frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, message_);
}
inline void EmbeddedFrameSinkProvider_CreateSimpleCompositorFrameSink_ParamsDataView::GetFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, message_);
}


inline void EmbeddedFrameSinkProvider_ConnectToEmbedder_ParamsDataView::GetFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, message_);
}


inline void EmbeddedFrameSinkProvider_RegisterFrameSinkHierarchy_ParamsDataView::GetFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, message_);
}


inline void EmbeddedFrameSinkProvider_UnregisterFrameSinkHierarchy_ParamsDataView::GetFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_SINKS_EMBEDDED_FRAME_SINK_MOJOM_PARAMS_DATA_H_