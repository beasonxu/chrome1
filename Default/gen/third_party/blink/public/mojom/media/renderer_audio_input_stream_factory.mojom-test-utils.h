// third_party/blink/public/mojom/media/renderer_audio_input_stream_factory.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIA_RENDERER_AUDIO_INPUT_STREAM_FACTORY_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIA_RENDERER_AUDIO_INPUT_STREAM_FACTORY_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/media/renderer_audio_input_stream_factory.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT RendererAudioInputStreamFactoryInterceptorForTesting : public RendererAudioInputStreamFactory {
  virtual RendererAudioInputStreamFactory* GetForwardingInterface() = 0;
  void CreateStream(::mojo::PendingRemote<RendererAudioInputStreamFactoryClient> client, const ::base::UnguessableToken& session_id, const ::media::AudioParameters& params, bool automatic_gain_control, uint32_t shared_memory_count, ::media::mojom::AudioProcessingConfigPtr processing_config) override;
  void AssociateInputAndOutputForAec(const ::base::UnguessableToken& input_stream_id, const std::string& output_device_id) override;
};
class BLINK_COMMON_EXPORT RendererAudioInputStreamFactoryAsyncWaiter {
 public:
  explicit RendererAudioInputStreamFactoryAsyncWaiter(RendererAudioInputStreamFactory* proxy);

  RendererAudioInputStreamFactoryAsyncWaiter(const RendererAudioInputStreamFactoryAsyncWaiter&) = delete;
  RendererAudioInputStreamFactoryAsyncWaiter& operator=(const RendererAudioInputStreamFactoryAsyncWaiter&) = delete;

  ~RendererAudioInputStreamFactoryAsyncWaiter();

 private:
  RendererAudioInputStreamFactory* const proxy_;
};


class BLINK_COMMON_EXPORT RendererAudioInputStreamFactoryClientInterceptorForTesting : public RendererAudioInputStreamFactoryClient {
  virtual RendererAudioInputStreamFactoryClient* GetForwardingInterface() = 0;
  void StreamCreated(::mojo::PendingRemote<::media::mojom::AudioInputStream> stream, ::mojo::PendingReceiver<::media::mojom::AudioInputStreamClient> client_request, ::media::mojom::ReadOnlyAudioDataPipePtr data_pipe, bool initially_muted, const absl::optional<::base::UnguessableToken>& stream_id) override;
};
class BLINK_COMMON_EXPORT RendererAudioInputStreamFactoryClientAsyncWaiter {
 public:
  explicit RendererAudioInputStreamFactoryClientAsyncWaiter(RendererAudioInputStreamFactoryClient* proxy);

  RendererAudioInputStreamFactoryClientAsyncWaiter(const RendererAudioInputStreamFactoryClientAsyncWaiter&) = delete;
  RendererAudioInputStreamFactoryClientAsyncWaiter& operator=(const RendererAudioInputStreamFactoryClientAsyncWaiter&) = delete;

  ~RendererAudioInputStreamFactoryClientAsyncWaiter();

 private:
  RendererAudioInputStreamFactoryClient* const proxy_;
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIA_RENDERER_AUDIO_INPUT_STREAM_FACTORY_MOJOM_TEST_UTILS_H_