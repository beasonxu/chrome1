// third_party/blink/public/mojom/media/renderer_audio_output_stream_factory.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIA_RENDERER_AUDIO_OUTPUT_STREAM_FACTORY_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIA_RENDERER_AUDIO_OUTPUT_STREAM_FACTORY_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data stream_provider_receiver;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> session_id;
  mojo::internal::Pointer<mojo::internal::String_Data> device_id;

 private:
  friend class mojo::internal::MessageFragment<RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data>;

  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data();
  ~RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data() = delete;
};
static_assert(sizeof(RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data) == 32,
              "Bad sizeof(RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t state;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::media::mojom::internal::AudioParameters_Data> output_params;
  mojo::internal::Pointer<mojo::internal::String_Data> matched_device_id;

 private:
  friend class mojo::internal::MessageFragment<RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data>;

  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data();
  ~RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data() = delete;
};
static_assert(sizeof(RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data) == 32,
              "Bad sizeof(RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data)");

}  // namespace internal


class RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ParamsDataView {
 public:
  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ParamsDataView() = default;

  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ParamsDataView(
      internal::RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeStreamProviderReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::AudioOutputStreamProviderInterfaceBase>>(
            &data_->stream_provider_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetSessionIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSessionId(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::UnguessableTokenDataView, UserType>(),
    "Attempting to read the optional `session_id` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSessionId` instead "
    "of `ReadSessionId if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetDeviceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParamsDataView {
 public:
  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParamsDataView() = default;

  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParamsDataView(
      internal::RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::media::mojom::OutputDeviceStatus>(
        data_value, output);
  }
  ::media::mojom::OutputDeviceStatus state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media::mojom::OutputDeviceStatus>(data_->state));
  }
  inline void GetOutputParamsDataView(
      ::media::mojom::AudioParametersDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOutputParams(UserType* output) {
    
    auto* pointer = data_->output_params.Get();
    return mojo::internal::Deserialize<::media::mojom::AudioParametersDataView>(
        pointer, output, message_);
  }
  inline void GetMatchedDeviceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMatchedDeviceId(UserType* output) {
    
    auto* pointer = data_->matched_device_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ParamsDataView::GetSessionIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ParamsDataView::GetDeviceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParamsDataView::GetOutputParamsDataView(
    ::media::mojom::AudioParametersDataView* output) {
  auto pointer = data_->output_params.Get();
  *output = ::media::mojom::AudioParametersDataView(pointer, message_);
}
inline void RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParamsDataView::GetMatchedDeviceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->matched_device_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIA_RENDERER_AUDIO_OUTPUT_STREAM_FACTORY_MOJOM_PARAMS_DATA_H_