// third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('blink.mojom');





/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.WindowStateSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.WindowState = {
  
  kNormal: 0,
  kFullscreen: 1,
  kMaximized: 2,
  kMinimized: 3,
  MIN_VALUE: 0,
  MAX_VALUE: 3,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.VisibilityStateSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.VisibilityState = {
  
  kHidden: 0,
  kShown: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.CrosWindowManagementStatusSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.CrosWindowManagementStatus = {
  
  kSuccess: 0,
  kWindowNotFound: 1,
  kWindowNoWindowState: 2,
  kWindowNoWidget: 3,
  MIN_VALUE: 0,
  MAX_VALUE: 3,
};





/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.CrosWindowManagementFactoryPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.CrosWindowManagementFactory.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.mojom.CrosWindowManagementFactoryInterface }
 */
blink.mojom.CrosWindowManagementFactoryRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.CrosWindowManagementFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.CrosWindowManagementFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.CrosWindowManagementFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   * @param { !Object } observerRemote
   */

  create(
      receiver,
      observerRemote) {
    this.proxy.sendMessage(
        0,
        blink.mojom.CrosWindowManagementFactory_Create_ParamsSpec.$,
        null,
        [
          receiver,
          observerRemote
        ]);
  }
};

/**
 * An object which receives request messages for the CrosWindowManagementFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.CrosWindowManagementFactoryReceiver = class {
  /**
   * @param {!blink.mojom.CrosWindowManagementFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.CrosWindowManagementFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.CrosWindowManagementFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.CrosWindowManagementFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.CrosWindowManagementFactory_Create_ParamsSpec.$,
        null,
        impl.create.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.CrosWindowManagementFactory = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.CrosWindowManagementFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.CrosWindowManagementFactoryRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.CrosWindowManagementFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the CrosWindowManagementFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.CrosWindowManagementFactoryCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.CrosWindowManagementFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.CrosWindowManagementFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.create =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.CrosWindowManagementFactory_Create_ParamsSpec.$,
        null,
        this.create.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.CrosWindowManagementPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.CrosWindowManagement.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.mojom.CrosWindowManagementInterface }
 */
blink.mojom.CrosWindowManagementRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.CrosWindowManagementPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.CrosWindowManagementPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.CrosWindowManagementPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        result: !Array<!blink.mojom.CrosWindowInfo>,
   *  }>}
   */

  getAllWindows() {
    return this.proxy.sendMessage(
        0,
        blink.mojom.CrosWindowManagement_GetAllWindows_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_GetAllWindows_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.UnguessableToken } id
   * @param { !number } x
   * @param { !number } y
   * @return {!Promise<{
        value: !blink.mojom.CrosWindowManagementStatus,
   *  }>}
   */

  moveTo(
      id,
      x,
      y) {
    return this.proxy.sendMessage(
        1,
        blink.mojom.CrosWindowManagement_MoveTo_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_MoveTo_ResponseParamsSpec.$,
        [
          id,
          x,
          y
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.UnguessableToken } id
   * @param { !number } deltaX
   * @param { !number } deltaY
   * @return {!Promise<{
        value: !blink.mojom.CrosWindowManagementStatus,
   *  }>}
   */

  moveBy(
      id,
      deltaX,
      deltaY) {
    return this.proxy.sendMessage(
        2,
        blink.mojom.CrosWindowManagement_MoveBy_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_MoveBy_ResponseParamsSpec.$,
        [
          id,
          deltaX,
          deltaY
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.UnguessableToken } id
   * @param { !number } width
   * @param { !number } height
   * @return {!Promise<{
        value: !blink.mojom.CrosWindowManagementStatus,
   *  }>}
   */

  resizeTo(
      id,
      width,
      height) {
    return this.proxy.sendMessage(
        3,
        blink.mojom.CrosWindowManagement_ResizeTo_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_ResizeTo_ResponseParamsSpec.$,
        [
          id,
          width,
          height
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.UnguessableToken } id
   * @param { !number } deltaWidth
   * @param { !number } deltaHeight
   * @return {!Promise<{
        value: !blink.mojom.CrosWindowManagementStatus,
   *  }>}
   */

  resizeBy(
      id,
      deltaWidth,
      deltaHeight) {
    return this.proxy.sendMessage(
        4,
        blink.mojom.CrosWindowManagement_ResizeBy_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_ResizeBy_ResponseParamsSpec.$,
        [
          id,
          deltaWidth,
          deltaHeight
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.UnguessableToken } id
   * @param { !boolean } fullscreen
   * @return {!Promise<{
        value: !blink.mojom.CrosWindowManagementStatus,
   *  }>}
   */

  setFullscreen(
      id,
      fullscreen) {
    return this.proxy.sendMessage(
        5,
        blink.mojom.CrosWindowManagement_SetFullscreen_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_SetFullscreen_ResponseParamsSpec.$,
        [
          id,
          fullscreen
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.UnguessableToken } id
   * @return {!Promise<{
        value: !blink.mojom.CrosWindowManagementStatus,
   *  }>}
   */

  maximize(
      id) {
    return this.proxy.sendMessage(
        6,
        blink.mojom.CrosWindowManagement_Maximize_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Maximize_ResponseParamsSpec.$,
        [
          id
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.UnguessableToken } id
   * @return {!Promise<{
        value: !blink.mojom.CrosWindowManagementStatus,
   *  }>}
   */

  minimize(
      id) {
    return this.proxy.sendMessage(
        7,
        blink.mojom.CrosWindowManagement_Minimize_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Minimize_ResponseParamsSpec.$,
        [
          id
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.UnguessableToken } id
   * @return {!Promise<{
        value: !blink.mojom.CrosWindowManagementStatus,
   *  }>}
   */

  focus(
      id) {
    return this.proxy.sendMessage(
        8,
        blink.mojom.CrosWindowManagement_Focus_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Focus_ResponseParamsSpec.$,
        [
          id
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.UnguessableToken } id
   * @return {!Promise<{
        value: !blink.mojom.CrosWindowManagementStatus,
   *  }>}
   */

  close(
      id) {
    return this.proxy.sendMessage(
        9,
        blink.mojom.CrosWindowManagement_Close_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Close_ResponseParamsSpec.$,
        [
          id
        ]);
  }

  
  /**
   * @return {!Promise<{
        screens: !Array<!blink.mojom.CrosScreenInfo>,
   *  }>}
   */

  getAllScreens() {
    return this.proxy.sendMessage(
        10,
        blink.mojom.CrosWindowManagement_GetAllScreens_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_GetAllScreens_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the CrosWindowManagement
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.CrosWindowManagementReceiver = class {
  /**
   * @param {!blink.mojom.CrosWindowManagementInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.CrosWindowManagementRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.CrosWindowManagementRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.CrosWindowManagementRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.CrosWindowManagement_GetAllWindows_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_GetAllWindows_ResponseParamsSpec.$,
        impl.getAllWindows.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.CrosWindowManagement_MoveTo_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_MoveTo_ResponseParamsSpec.$,
        impl.moveTo.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.mojom.CrosWindowManagement_MoveBy_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_MoveBy_ResponseParamsSpec.$,
        impl.moveBy.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        blink.mojom.CrosWindowManagement_ResizeTo_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_ResizeTo_ResponseParamsSpec.$,
        impl.resizeTo.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        blink.mojom.CrosWindowManagement_ResizeBy_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_ResizeBy_ResponseParamsSpec.$,
        impl.resizeBy.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        blink.mojom.CrosWindowManagement_SetFullscreen_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_SetFullscreen_ResponseParamsSpec.$,
        impl.setFullscreen.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        blink.mojom.CrosWindowManagement_Maximize_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Maximize_ResponseParamsSpec.$,
        impl.maximize.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        blink.mojom.CrosWindowManagement_Minimize_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Minimize_ResponseParamsSpec.$,
        impl.minimize.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        blink.mojom.CrosWindowManagement_Focus_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Focus_ResponseParamsSpec.$,
        impl.focus.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        blink.mojom.CrosWindowManagement_Close_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Close_ResponseParamsSpec.$,
        impl.close.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        blink.mojom.CrosWindowManagement_GetAllScreens_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_GetAllScreens_ResponseParamsSpec.$,
        impl.getAllScreens.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.CrosWindowManagement = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.CrosWindowManagement";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.CrosWindowManagementRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.CrosWindowManagementRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the CrosWindowManagement
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.CrosWindowManagementCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.CrosWindowManagementRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.CrosWindowManagementRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAllWindows =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.CrosWindowManagement_GetAllWindows_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_GetAllWindows_ResponseParamsSpec.$,
        this.getAllWindows.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.moveTo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.CrosWindowManagement_MoveTo_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_MoveTo_ResponseParamsSpec.$,
        this.moveTo.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.moveBy =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.mojom.CrosWindowManagement_MoveBy_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_MoveBy_ResponseParamsSpec.$,
        this.moveBy.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.resizeTo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        blink.mojom.CrosWindowManagement_ResizeTo_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_ResizeTo_ResponseParamsSpec.$,
        this.resizeTo.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.resizeBy =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        blink.mojom.CrosWindowManagement_ResizeBy_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_ResizeBy_ResponseParamsSpec.$,
        this.resizeBy.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setFullscreen =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        blink.mojom.CrosWindowManagement_SetFullscreen_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_SetFullscreen_ResponseParamsSpec.$,
        this.setFullscreen.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.maximize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        blink.mojom.CrosWindowManagement_Maximize_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Maximize_ResponseParamsSpec.$,
        this.maximize.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.minimize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        blink.mojom.CrosWindowManagement_Minimize_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Minimize_ResponseParamsSpec.$,
        this.minimize.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.focus =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        blink.mojom.CrosWindowManagement_Focus_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Focus_ResponseParamsSpec.$,
        this.focus.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.close =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        blink.mojom.CrosWindowManagement_Close_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_Close_ResponseParamsSpec.$,
        this.close.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAllScreens =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        blink.mojom.CrosWindowManagement_GetAllScreens_ParamsSpec.$,
        blink.mojom.CrosWindowManagement_GetAllScreens_ResponseParamsSpec.$,
        this.getAllScreens.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.CrosWindowManagementStartObserverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.CrosWindowManagementStartObserver.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.mojom.CrosWindowManagementStartObserverInterface }
 */
blink.mojom.CrosWindowManagementStartObserverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.CrosWindowManagementStartObserverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.CrosWindowManagementStartObserverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.CrosWindowManagementStartObserverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  dispatchStartEvent() {
    this.proxy.sendMessage(
        0,
        blink.mojom.CrosWindowManagementStartObserver_DispatchStartEvent_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !blink.mojom.AcceleratorEvent } event
   */

  dispatchAcceleratorEvent(
      event) {
    this.proxy.sendMessage(
        1,
        blink.mojom.CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsSpec.$,
        null,
        [
          event
        ]);
  }
};

/**
 * An object which receives request messages for the CrosWindowManagementStartObserver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.CrosWindowManagementStartObserverReceiver = class {
  /**
   * @param {!blink.mojom.CrosWindowManagementStartObserverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.CrosWindowManagementStartObserverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.CrosWindowManagementStartObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.CrosWindowManagementStartObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.CrosWindowManagementStartObserver_DispatchStartEvent_ParamsSpec.$,
        null,
        impl.dispatchStartEvent.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsSpec.$,
        null,
        impl.dispatchAcceleratorEvent.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.CrosWindowManagementStartObserver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.CrosWindowManagementStartObserver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.CrosWindowManagementStartObserverRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.CrosWindowManagementStartObserverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the CrosWindowManagementStartObserver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.CrosWindowManagementStartObserverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.CrosWindowManagementStartObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.CrosWindowManagementStartObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.dispatchStartEvent =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.CrosWindowManagementStartObserver_DispatchStartEvent_ParamsSpec.$,
        null,
        this.dispatchStartEvent.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.dispatchAcceleratorEvent =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsSpec.$,
        null,
        this.dispatchAcceleratorEvent.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowInfoSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosScreenInfoSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.AcceleratorEventSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagementFactory_Create_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_GetAllWindows_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_GetAllWindows_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_MoveTo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_MoveTo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_MoveBy_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_MoveBy_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_ResizeTo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_ResizeTo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_ResizeBy_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_ResizeBy_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_SetFullscreen_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_SetFullscreen_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_Maximize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_Maximize_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_Minimize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_Minimize_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_Focus_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_Focus_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_Close_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_Close_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_GetAllScreens_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagement_GetAllScreens_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagementStartObserver_DispatchStartEvent_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.CrosWindowInfoSpec.$,
    'CrosWindowInfo',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'appId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'bounds', 16,
        0,
        gfx.mojom.RectSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'title', 24,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'windowState', 32,
        0,
        blink.mojom.WindowStateSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'isFocused', 36,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'visibilityState', 40,
        0,
        blink.mojom.VisibilityStateSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 56],]);





/** @record */
blink.mojom.CrosWindowInfo = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.id;
    /** @export { !string } */
    this.appId;
    /** @export { !gfx.mojom.Rect } */
    this.bounds;
    /** @export { !string } */
    this.title;
    /** @export { !blink.mojom.WindowState } */
    this.windowState;
    /** @export { !boolean } */
    this.isFocused;
    /** @export { !blink.mojom.VisibilityState } */
    this.visibilityState;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosScreenInfoSpec.$,
    'CrosScreenInfo',
    [
      mojo.internal.StructField(
        'workArea', 0,
        0,
        gfx.mojom.RectSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'bounds', 8,
        0,
        gfx.mojom.RectSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'isPrimary', 16,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
blink.mojom.CrosScreenInfo = class {
  constructor() {
    /** @export { !gfx.mojom.Rect } */
    this.workArea;
    /** @export { !gfx.mojom.Rect } */
    this.bounds;
    /** @export { !boolean } */
    this.isPrimary;
  }
};




/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.AcceleratorEventSpec.TypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.AcceleratorEvent_Type = {
  
  kDown: 0,
  kUp: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};


mojo.internal.Struct(
    blink.mojom.AcceleratorEventSpec.$,
    'AcceleratorEvent',
    [
      mojo.internal.StructField(
        'type', 0,
        0,
        blink.mojom.AcceleratorEventSpec.TypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'acceleratorName', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'repeat', 4,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.AcceleratorEvent = class {
  constructor() {
    /** @export { !blink.mojom.AcceleratorEvent_Type } */
    this.type;
    /** @export { !boolean } */
    this.repeat;
    /** @export { !string } */
    this.acceleratorName;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagementFactory_Create_ParamsSpec.$,
    'CrosWindowManagementFactory_Create_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(blink.mojom.CrosWindowManagementPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'observerRemote', 4,
        0,
        mojo.internal.AssociatedInterfaceProxy(blink.mojom.CrosWindowManagementStartObserverRemote),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.CrosWindowManagementFactory_Create_Params = class {
  constructor() {
    /** @export { !Object } */
    this.receiver;
    /** @export { !Object } */
    this.observerRemote;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_GetAllWindows_ParamsSpec.$,
    'CrosWindowManagement_GetAllWindows_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.mojom.CrosWindowManagement_GetAllWindows_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_GetAllWindows_ResponseParamsSpec.$,
    'CrosWindowManagement_GetAllWindows_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        mojo.internal.Array(blink.mojom.CrosWindowInfoSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_GetAllWindows_ResponseParams = class {
  constructor() {
    /** @export { !Array<!blink.mojom.CrosWindowInfo> } */
    this.result;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_MoveTo_ParamsSpec.$,
    'CrosWindowManagement_MoveTo_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'x', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'y', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.CrosWindowManagement_MoveTo_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.id;
    /** @export { !number } */
    this.x;
    /** @export { !number } */
    this.y;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_MoveTo_ResponseParamsSpec.$,
    'CrosWindowManagement_MoveTo_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        blink.mojom.CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_MoveTo_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.CrosWindowManagementStatus } */
    this.value;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_MoveBy_ParamsSpec.$,
    'CrosWindowManagement_MoveBy_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'deltaX', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'deltaY', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.CrosWindowManagement_MoveBy_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.id;
    /** @export { !number } */
    this.deltaX;
    /** @export { !number } */
    this.deltaY;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_MoveBy_ResponseParamsSpec.$,
    'CrosWindowManagement_MoveBy_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        blink.mojom.CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_MoveBy_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.CrosWindowManagementStatus } */
    this.value;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_ResizeTo_ParamsSpec.$,
    'CrosWindowManagement_ResizeTo_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'width', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'height', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.CrosWindowManagement_ResizeTo_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.id;
    /** @export { !number } */
    this.width;
    /** @export { !number } */
    this.height;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_ResizeTo_ResponseParamsSpec.$,
    'CrosWindowManagement_ResizeTo_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        blink.mojom.CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_ResizeTo_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.CrosWindowManagementStatus } */
    this.value;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_ResizeBy_ParamsSpec.$,
    'CrosWindowManagement_ResizeBy_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'deltaWidth', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'deltaHeight', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.CrosWindowManagement_ResizeBy_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.id;
    /** @export { !number } */
    this.deltaWidth;
    /** @export { !number } */
    this.deltaHeight;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_ResizeBy_ResponseParamsSpec.$,
    'CrosWindowManagement_ResizeBy_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        blink.mojom.CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_ResizeBy_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.CrosWindowManagementStatus } */
    this.value;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_SetFullscreen_ParamsSpec.$,
    'CrosWindowManagement_SetFullscreen_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fullscreen', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.CrosWindowManagement_SetFullscreen_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.id;
    /** @export { !boolean } */
    this.fullscreen;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_SetFullscreen_ResponseParamsSpec.$,
    'CrosWindowManagement_SetFullscreen_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        blink.mojom.CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_SetFullscreen_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.CrosWindowManagementStatus } */
    this.value;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_Maximize_ParamsSpec.$,
    'CrosWindowManagement_Maximize_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_Maximize_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.id;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_Maximize_ResponseParamsSpec.$,
    'CrosWindowManagement_Maximize_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        blink.mojom.CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_Maximize_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.CrosWindowManagementStatus } */
    this.value;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_Minimize_ParamsSpec.$,
    'CrosWindowManagement_Minimize_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_Minimize_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.id;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_Minimize_ResponseParamsSpec.$,
    'CrosWindowManagement_Minimize_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        blink.mojom.CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_Minimize_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.CrosWindowManagementStatus } */
    this.value;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_Focus_ParamsSpec.$,
    'CrosWindowManagement_Focus_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_Focus_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.id;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_Focus_ResponseParamsSpec.$,
    'CrosWindowManagement_Focus_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        blink.mojom.CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_Focus_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.CrosWindowManagementStatus } */
    this.value;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_Close_ParamsSpec.$,
    'CrosWindowManagement_Close_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_Close_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.id;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_Close_ResponseParamsSpec.$,
    'CrosWindowManagement_Close_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        blink.mojom.CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_Close_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.CrosWindowManagementStatus } */
    this.value;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_GetAllScreens_ParamsSpec.$,
    'CrosWindowManagement_GetAllScreens_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.mojom.CrosWindowManagement_GetAllScreens_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagement_GetAllScreens_ResponseParamsSpec.$,
    'CrosWindowManagement_GetAllScreens_ResponseParams',
    [
      mojo.internal.StructField(
        'screens', 0,
        0,
        mojo.internal.Array(blink.mojom.CrosScreenInfoSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagement_GetAllScreens_ResponseParams = class {
  constructor() {
    /** @export { !Array<!blink.mojom.CrosScreenInfo> } */
    this.screens;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagementStartObserver_DispatchStartEvent_ParamsSpec.$,
    'CrosWindowManagementStartObserver_DispatchStartEvent_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.mojom.CrosWindowManagementStartObserver_DispatchStartEvent_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsSpec.$,
    'CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params',
    [
      mojo.internal.StructField(
        'event', 0,
        0,
        blink.mojom.AcceleratorEventSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params = class {
  constructor() {
    /** @export { !blink.mojom.AcceleratorEvent } */
    this.event;
  }
};


