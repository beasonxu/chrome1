// third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_WINDOW_MANAGEMENT_CROS_WINDOW_MANAGEMENT_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_WINDOW_MANAGEMENT_CROS_WINDOW_MANAGEMENT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagementFactory_Create_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedEndpointHandle_Data receiver;
  mojo::internal::AssociatedInterface_Data observer_remote;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagementFactory_Create_Params_Data>;

  CrosWindowManagementFactory_Create_Params_Data();
  ~CrosWindowManagementFactory_Create_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagementFactory_Create_Params_Data) == 24,
              "Bad sizeof(CrosWindowManagementFactory_Create_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_GetAllWindows_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_GetAllWindows_Params_Data>;

  CrosWindowManagement_GetAllWindows_Params_Data();
  ~CrosWindowManagement_GetAllWindows_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_GetAllWindows_Params_Data) == 8,
              "Bad sizeof(CrosWindowManagement_GetAllWindows_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_GetAllWindows_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::CrosWindowInfo_Data>>> result;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_GetAllWindows_ResponseParams_Data>;

  CrosWindowManagement_GetAllWindows_ResponseParams_Data();
  ~CrosWindowManagement_GetAllWindows_ResponseParams_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_GetAllWindows_ResponseParams_Data) == 16,
              "Bad sizeof(CrosWindowManagement_GetAllWindows_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_MoveTo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;
  int32_t x;
  int32_t y;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_MoveTo_Params_Data>;

  CrosWindowManagement_MoveTo_Params_Data();
  ~CrosWindowManagement_MoveTo_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_MoveTo_Params_Data) == 24,
              "Bad sizeof(CrosWindowManagement_MoveTo_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_MoveTo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_MoveTo_ResponseParams_Data>;

  CrosWindowManagement_MoveTo_ResponseParams_Data();
  ~CrosWindowManagement_MoveTo_ResponseParams_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_MoveTo_ResponseParams_Data) == 16,
              "Bad sizeof(CrosWindowManagement_MoveTo_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_MoveBy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;
  int32_t delta_x;
  int32_t delta_y;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_MoveBy_Params_Data>;

  CrosWindowManagement_MoveBy_Params_Data();
  ~CrosWindowManagement_MoveBy_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_MoveBy_Params_Data) == 24,
              "Bad sizeof(CrosWindowManagement_MoveBy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_MoveBy_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_MoveBy_ResponseParams_Data>;

  CrosWindowManagement_MoveBy_ResponseParams_Data();
  ~CrosWindowManagement_MoveBy_ResponseParams_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_MoveBy_ResponseParams_Data) == 16,
              "Bad sizeof(CrosWindowManagement_MoveBy_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_ResizeTo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;
  int32_t width;
  int32_t height;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_ResizeTo_Params_Data>;

  CrosWindowManagement_ResizeTo_Params_Data();
  ~CrosWindowManagement_ResizeTo_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_ResizeTo_Params_Data) == 24,
              "Bad sizeof(CrosWindowManagement_ResizeTo_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_ResizeTo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_ResizeTo_ResponseParams_Data>;

  CrosWindowManagement_ResizeTo_ResponseParams_Data();
  ~CrosWindowManagement_ResizeTo_ResponseParams_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_ResizeTo_ResponseParams_Data) == 16,
              "Bad sizeof(CrosWindowManagement_ResizeTo_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_ResizeBy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;
  int32_t delta_width;
  int32_t delta_height;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_ResizeBy_Params_Data>;

  CrosWindowManagement_ResizeBy_Params_Data();
  ~CrosWindowManagement_ResizeBy_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_ResizeBy_Params_Data) == 24,
              "Bad sizeof(CrosWindowManagement_ResizeBy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_ResizeBy_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_ResizeBy_ResponseParams_Data>;

  CrosWindowManagement_ResizeBy_ResponseParams_Data();
  ~CrosWindowManagement_ResizeBy_ResponseParams_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_ResizeBy_ResponseParams_Data) == 16,
              "Bad sizeof(CrosWindowManagement_ResizeBy_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_SetFullscreen_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;
  uint8_t fullscreen : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_SetFullscreen_Params_Data>;

  CrosWindowManagement_SetFullscreen_Params_Data();
  ~CrosWindowManagement_SetFullscreen_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_SetFullscreen_Params_Data) == 24,
              "Bad sizeof(CrosWindowManagement_SetFullscreen_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_SetFullscreen_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_SetFullscreen_ResponseParams_Data>;

  CrosWindowManagement_SetFullscreen_ResponseParams_Data();
  ~CrosWindowManagement_SetFullscreen_ResponseParams_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_SetFullscreen_ResponseParams_Data) == 16,
              "Bad sizeof(CrosWindowManagement_SetFullscreen_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_Maximize_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_Maximize_Params_Data>;

  CrosWindowManagement_Maximize_Params_Data();
  ~CrosWindowManagement_Maximize_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_Maximize_Params_Data) == 16,
              "Bad sizeof(CrosWindowManagement_Maximize_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_Maximize_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_Maximize_ResponseParams_Data>;

  CrosWindowManagement_Maximize_ResponseParams_Data();
  ~CrosWindowManagement_Maximize_ResponseParams_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_Maximize_ResponseParams_Data) == 16,
              "Bad sizeof(CrosWindowManagement_Maximize_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_Minimize_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_Minimize_Params_Data>;

  CrosWindowManagement_Minimize_Params_Data();
  ~CrosWindowManagement_Minimize_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_Minimize_Params_Data) == 16,
              "Bad sizeof(CrosWindowManagement_Minimize_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_Minimize_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_Minimize_ResponseParams_Data>;

  CrosWindowManagement_Minimize_ResponseParams_Data();
  ~CrosWindowManagement_Minimize_ResponseParams_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_Minimize_ResponseParams_Data) == 16,
              "Bad sizeof(CrosWindowManagement_Minimize_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_Focus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_Focus_Params_Data>;

  CrosWindowManagement_Focus_Params_Data();
  ~CrosWindowManagement_Focus_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_Focus_Params_Data) == 16,
              "Bad sizeof(CrosWindowManagement_Focus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_Focus_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_Focus_ResponseParams_Data>;

  CrosWindowManagement_Focus_ResponseParams_Data();
  ~CrosWindowManagement_Focus_ResponseParams_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_Focus_ResponseParams_Data) == 16,
              "Bad sizeof(CrosWindowManagement_Focus_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_Close_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_Close_Params_Data>;

  CrosWindowManagement_Close_Params_Data();
  ~CrosWindowManagement_Close_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_Close_Params_Data) == 16,
              "Bad sizeof(CrosWindowManagement_Close_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_Close_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_Close_ResponseParams_Data>;

  CrosWindowManagement_Close_ResponseParams_Data();
  ~CrosWindowManagement_Close_ResponseParams_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_Close_ResponseParams_Data) == 16,
              "Bad sizeof(CrosWindowManagement_Close_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_GetAllScreens_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_GetAllScreens_Params_Data>;

  CrosWindowManagement_GetAllScreens_Params_Data();
  ~CrosWindowManagement_GetAllScreens_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_GetAllScreens_Params_Data) == 8,
              "Bad sizeof(CrosWindowManagement_GetAllScreens_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagement_GetAllScreens_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::CrosScreenInfo_Data>>> screens;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagement_GetAllScreens_ResponseParams_Data>;

  CrosWindowManagement_GetAllScreens_ResponseParams_Data();
  ~CrosWindowManagement_GetAllScreens_ResponseParams_Data() = delete;
};
static_assert(sizeof(CrosWindowManagement_GetAllScreens_ResponseParams_Data) == 16,
              "Bad sizeof(CrosWindowManagement_GetAllScreens_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data>;

  CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data();
  ~CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data) == 8,
              "Bad sizeof(CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::AcceleratorEvent_Data> event;

 private:
  friend class mojo::internal::MessageFragment<CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data>;

  CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data();
  ~CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data() = delete;
};
static_assert(sizeof(CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data) == 16,
              "Bad sizeof(CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data)");

}  // namespace internal


class CrosWindowManagementFactory_Create_ParamsDataView {
 public:
  CrosWindowManagementFactory_Create_ParamsDataView() = default;

  CrosWindowManagementFactory_Create_ParamsDataView(
      internal::CrosWindowManagementFactory_Create_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::CrosWindowManagementAssociatedRequestDataView>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeObserverRemote() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::CrosWindowManagementStartObserverAssociatedPtrInfoDataView>(
            &data_->observer_remote, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CrosWindowManagementFactory_Create_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagement_GetAllWindows_ParamsDataView {
 public:
  CrosWindowManagement_GetAllWindows_ParamsDataView() = default;

  CrosWindowManagement_GetAllWindows_ParamsDataView(
      internal::CrosWindowManagement_GetAllWindows_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CrosWindowManagement_GetAllWindows_Params_Data* data_ = nullptr;
};



class CrosWindowManagement_GetAllWindows_ResponseParamsDataView {
 public:
  CrosWindowManagement_GetAllWindows_ResponseParamsDataView() = default;

  CrosWindowManagement_GetAllWindows_ResponseParamsDataView(
      internal::CrosWindowManagement_GetAllWindows_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      mojo::ArrayDataView<CrosWindowInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::CrosWindowInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CrosWindowManagement_GetAllWindows_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagement_MoveTo_ParamsDataView {
 public:
  CrosWindowManagement_MoveTo_ParamsDataView() = default;

  CrosWindowManagement_MoveTo_ParamsDataView(
      internal::CrosWindowManagement_MoveTo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  int32_t x() const {
    return data_->x;
  }
  int32_t y() const {
    return data_->y;
  }
 private:
  internal::CrosWindowManagement_MoveTo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagement_MoveTo_ResponseParamsDataView {
 public:
  CrosWindowManagement_MoveTo_ResponseParamsDataView() = default;

  CrosWindowManagement_MoveTo_ResponseParamsDataView(
      internal::CrosWindowManagement_MoveTo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) const {
    auto data_value = data_->value;
    return mojo::internal::Deserialize<::blink::mojom::CrosWindowManagementStatus>(
        data_value, output);
  }
  CrosWindowManagementStatus value() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CrosWindowManagementStatus>(data_->value));
  }
 private:
  internal::CrosWindowManagement_MoveTo_ResponseParams_Data* data_ = nullptr;
};



class CrosWindowManagement_MoveBy_ParamsDataView {
 public:
  CrosWindowManagement_MoveBy_ParamsDataView() = default;

  CrosWindowManagement_MoveBy_ParamsDataView(
      internal::CrosWindowManagement_MoveBy_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  int32_t delta_x() const {
    return data_->delta_x;
  }
  int32_t delta_y() const {
    return data_->delta_y;
  }
 private:
  internal::CrosWindowManagement_MoveBy_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagement_MoveBy_ResponseParamsDataView {
 public:
  CrosWindowManagement_MoveBy_ResponseParamsDataView() = default;

  CrosWindowManagement_MoveBy_ResponseParamsDataView(
      internal::CrosWindowManagement_MoveBy_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) const {
    auto data_value = data_->value;
    return mojo::internal::Deserialize<::blink::mojom::CrosWindowManagementStatus>(
        data_value, output);
  }
  CrosWindowManagementStatus value() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CrosWindowManagementStatus>(data_->value));
  }
 private:
  internal::CrosWindowManagement_MoveBy_ResponseParams_Data* data_ = nullptr;
};



class CrosWindowManagement_ResizeTo_ParamsDataView {
 public:
  CrosWindowManagement_ResizeTo_ParamsDataView() = default;

  CrosWindowManagement_ResizeTo_ParamsDataView(
      internal::CrosWindowManagement_ResizeTo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  int32_t width() const {
    return data_->width;
  }
  int32_t height() const {
    return data_->height;
  }
 private:
  internal::CrosWindowManagement_ResizeTo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagement_ResizeTo_ResponseParamsDataView {
 public:
  CrosWindowManagement_ResizeTo_ResponseParamsDataView() = default;

  CrosWindowManagement_ResizeTo_ResponseParamsDataView(
      internal::CrosWindowManagement_ResizeTo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) const {
    auto data_value = data_->value;
    return mojo::internal::Deserialize<::blink::mojom::CrosWindowManagementStatus>(
        data_value, output);
  }
  CrosWindowManagementStatus value() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CrosWindowManagementStatus>(data_->value));
  }
 private:
  internal::CrosWindowManagement_ResizeTo_ResponseParams_Data* data_ = nullptr;
};



class CrosWindowManagement_ResizeBy_ParamsDataView {
 public:
  CrosWindowManagement_ResizeBy_ParamsDataView() = default;

  CrosWindowManagement_ResizeBy_ParamsDataView(
      internal::CrosWindowManagement_ResizeBy_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  int32_t delta_width() const {
    return data_->delta_width;
  }
  int32_t delta_height() const {
    return data_->delta_height;
  }
 private:
  internal::CrosWindowManagement_ResizeBy_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagement_ResizeBy_ResponseParamsDataView {
 public:
  CrosWindowManagement_ResizeBy_ResponseParamsDataView() = default;

  CrosWindowManagement_ResizeBy_ResponseParamsDataView(
      internal::CrosWindowManagement_ResizeBy_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) const {
    auto data_value = data_->value;
    return mojo::internal::Deserialize<::blink::mojom::CrosWindowManagementStatus>(
        data_value, output);
  }
  CrosWindowManagementStatus value() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CrosWindowManagementStatus>(data_->value));
  }
 private:
  internal::CrosWindowManagement_ResizeBy_ResponseParams_Data* data_ = nullptr;
};



class CrosWindowManagement_SetFullscreen_ParamsDataView {
 public:
  CrosWindowManagement_SetFullscreen_ParamsDataView() = default;

  CrosWindowManagement_SetFullscreen_ParamsDataView(
      internal::CrosWindowManagement_SetFullscreen_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  bool fullscreen() const {
    return data_->fullscreen;
  }
 private:
  internal::CrosWindowManagement_SetFullscreen_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagement_SetFullscreen_ResponseParamsDataView {
 public:
  CrosWindowManagement_SetFullscreen_ResponseParamsDataView() = default;

  CrosWindowManagement_SetFullscreen_ResponseParamsDataView(
      internal::CrosWindowManagement_SetFullscreen_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) const {
    auto data_value = data_->value;
    return mojo::internal::Deserialize<::blink::mojom::CrosWindowManagementStatus>(
        data_value, output);
  }
  CrosWindowManagementStatus value() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CrosWindowManagementStatus>(data_->value));
  }
 private:
  internal::CrosWindowManagement_SetFullscreen_ResponseParams_Data* data_ = nullptr;
};



class CrosWindowManagement_Maximize_ParamsDataView {
 public:
  CrosWindowManagement_Maximize_ParamsDataView() = default;

  CrosWindowManagement_Maximize_ParamsDataView(
      internal::CrosWindowManagement_Maximize_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::CrosWindowManagement_Maximize_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagement_Maximize_ResponseParamsDataView {
 public:
  CrosWindowManagement_Maximize_ResponseParamsDataView() = default;

  CrosWindowManagement_Maximize_ResponseParamsDataView(
      internal::CrosWindowManagement_Maximize_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) const {
    auto data_value = data_->value;
    return mojo::internal::Deserialize<::blink::mojom::CrosWindowManagementStatus>(
        data_value, output);
  }
  CrosWindowManagementStatus value() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CrosWindowManagementStatus>(data_->value));
  }
 private:
  internal::CrosWindowManagement_Maximize_ResponseParams_Data* data_ = nullptr;
};



class CrosWindowManagement_Minimize_ParamsDataView {
 public:
  CrosWindowManagement_Minimize_ParamsDataView() = default;

  CrosWindowManagement_Minimize_ParamsDataView(
      internal::CrosWindowManagement_Minimize_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::CrosWindowManagement_Minimize_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagement_Minimize_ResponseParamsDataView {
 public:
  CrosWindowManagement_Minimize_ResponseParamsDataView() = default;

  CrosWindowManagement_Minimize_ResponseParamsDataView(
      internal::CrosWindowManagement_Minimize_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) const {
    auto data_value = data_->value;
    return mojo::internal::Deserialize<::blink::mojom::CrosWindowManagementStatus>(
        data_value, output);
  }
  CrosWindowManagementStatus value() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CrosWindowManagementStatus>(data_->value));
  }
 private:
  internal::CrosWindowManagement_Minimize_ResponseParams_Data* data_ = nullptr;
};



class CrosWindowManagement_Focus_ParamsDataView {
 public:
  CrosWindowManagement_Focus_ParamsDataView() = default;

  CrosWindowManagement_Focus_ParamsDataView(
      internal::CrosWindowManagement_Focus_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::CrosWindowManagement_Focus_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagement_Focus_ResponseParamsDataView {
 public:
  CrosWindowManagement_Focus_ResponseParamsDataView() = default;

  CrosWindowManagement_Focus_ResponseParamsDataView(
      internal::CrosWindowManagement_Focus_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) const {
    auto data_value = data_->value;
    return mojo::internal::Deserialize<::blink::mojom::CrosWindowManagementStatus>(
        data_value, output);
  }
  CrosWindowManagementStatus value() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CrosWindowManagementStatus>(data_->value));
  }
 private:
  internal::CrosWindowManagement_Focus_ResponseParams_Data* data_ = nullptr;
};



class CrosWindowManagement_Close_ParamsDataView {
 public:
  CrosWindowManagement_Close_ParamsDataView() = default;

  CrosWindowManagement_Close_ParamsDataView(
      internal::CrosWindowManagement_Close_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::CrosWindowManagement_Close_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagement_Close_ResponseParamsDataView {
 public:
  CrosWindowManagement_Close_ResponseParamsDataView() = default;

  CrosWindowManagement_Close_ResponseParamsDataView(
      internal::CrosWindowManagement_Close_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) const {
    auto data_value = data_->value;
    return mojo::internal::Deserialize<::blink::mojom::CrosWindowManagementStatus>(
        data_value, output);
  }
  CrosWindowManagementStatus value() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CrosWindowManagementStatus>(data_->value));
  }
 private:
  internal::CrosWindowManagement_Close_ResponseParams_Data* data_ = nullptr;
};



class CrosWindowManagement_GetAllScreens_ParamsDataView {
 public:
  CrosWindowManagement_GetAllScreens_ParamsDataView() = default;

  CrosWindowManagement_GetAllScreens_ParamsDataView(
      internal::CrosWindowManagement_GetAllScreens_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CrosWindowManagement_GetAllScreens_Params_Data* data_ = nullptr;
};



class CrosWindowManagement_GetAllScreens_ResponseParamsDataView {
 public:
  CrosWindowManagement_GetAllScreens_ResponseParamsDataView() = default;

  CrosWindowManagement_GetAllScreens_ResponseParamsDataView(
      internal::CrosWindowManagement_GetAllScreens_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetScreensDataView(
      mojo::ArrayDataView<CrosScreenInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScreens(UserType* output) {
    
    auto* pointer = data_->screens.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::CrosScreenInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CrosWindowManagement_GetAllScreens_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosWindowManagementStartObserver_DispatchStartEvent_ParamsDataView {
 public:
  CrosWindowManagementStartObserver_DispatchStartEvent_ParamsDataView() = default;

  CrosWindowManagementStartObserver_DispatchStartEvent_ParamsDataView(
      internal::CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data* data_ = nullptr;
};



class CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsDataView {
 public:
  CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsDataView() = default;

  CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsDataView(
      internal::CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEventDataView(
      AcceleratorEventDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEvent(UserType* output) {
    
    auto* pointer = data_->event.Get();
    return mojo::internal::Deserialize<::blink::mojom::AcceleratorEventDataView>(
        pointer, output, message_);
  }
 private:
  internal::CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};






inline void CrosWindowManagement_GetAllWindows_ResponseParamsDataView::GetResultDataView(
    mojo::ArrayDataView<CrosWindowInfoDataView>* output) {
  auto pointer = data_->result.Get();
  *output = mojo::ArrayDataView<CrosWindowInfoDataView>(pointer, message_);
}


inline void CrosWindowManagement_MoveTo_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}




inline void CrosWindowManagement_MoveBy_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}




inline void CrosWindowManagement_ResizeTo_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}




inline void CrosWindowManagement_ResizeBy_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}




inline void CrosWindowManagement_SetFullscreen_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}




inline void CrosWindowManagement_Maximize_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}




inline void CrosWindowManagement_Minimize_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}




inline void CrosWindowManagement_Focus_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}




inline void CrosWindowManagement_Close_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}






inline void CrosWindowManagement_GetAllScreens_ResponseParamsDataView::GetScreensDataView(
    mojo::ArrayDataView<CrosScreenInfoDataView>* output) {
  auto pointer = data_->screens.Get();
  *output = mojo::ArrayDataView<CrosScreenInfoDataView>(pointer, message_);
}




inline void CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsDataView::GetEventDataView(
    AcceleratorEventDataView* output) {
  auto pointer = data_->event.Get();
  *output = AcceleratorEventDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_WINDOW_MANAGEMENT_CROS_WINDOW_MANAGEMENT_MOJOM_PARAMS_DATA_H_