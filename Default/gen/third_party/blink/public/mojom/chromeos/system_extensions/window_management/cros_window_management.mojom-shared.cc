// third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* WindowStateToStringHelper(WindowState value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case WindowState::kNormal:
      return "kNormal";
    case WindowState::kFullscreen:
      return "kFullscreen";
    case WindowState::kMaximized:
      return "kMaximized";
    case WindowState::kMinimized:
      return "kMinimized";
    default:
      return nullptr;
  }
}

std::string WindowStateToString(WindowState value) {
  const char *str = WindowStateToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown WindowState value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, WindowState value) {
  return os << WindowStateToString(value);
}

static NOINLINE const char* VisibilityStateToStringHelper(VisibilityState value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case VisibilityState::kHidden:
      return "kHidden";
    case VisibilityState::kShown:
      return "kShown";
    default:
      return nullptr;
  }
}

std::string VisibilityStateToString(VisibilityState value) {
  const char *str = VisibilityStateToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown VisibilityState value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, VisibilityState value) {
  return os << VisibilityStateToString(value);
}

static NOINLINE const char* CrosWindowManagementStatusToStringHelper(CrosWindowManagementStatus value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case CrosWindowManagementStatus::kSuccess:
      return "kSuccess";
    case CrosWindowManagementStatus::kWindowNotFound:
      return "kWindowNotFound";
    case CrosWindowManagementStatus::kWindowNoWindowState:
      return "kWindowNoWindowState";
    case CrosWindowManagementStatus::kWindowNoWidget:
      return "kWindowNoWidget";
    default:
      return nullptr;
  }
}

std::string CrosWindowManagementStatusToString(CrosWindowManagementStatus value) {
  const char *str = CrosWindowManagementStatusToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown CrosWindowManagementStatus value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, CrosWindowManagementStatus value) {
  return os << CrosWindowManagementStatusToString(value);
}

static NOINLINE const char* AcceleratorEvent_TypeToStringHelper(AcceleratorEvent_Type value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case AcceleratorEvent_Type::kDown:
      return "kDown";
    case AcceleratorEvent_Type::kUp:
      return "kUp";
    default:
      return nullptr;
  }
}

std::string AcceleratorEvent_TypeToString(AcceleratorEvent_Type value) {
  const char *str = AcceleratorEvent_TypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown AcceleratorEvent_Type value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, AcceleratorEvent_Type value) {
  return os << AcceleratorEvent_TypeToString(value);
}

namespace internal {


// static
bool CrosWindowInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 56, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowInfo_Data* object =
      static_cast<const CrosWindowInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->id, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->app_id, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams app_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->app_id, validation_context,
                                         &app_id_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->bounds, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->bounds, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->title, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams title_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->title, validation_context,
                                         &title_validate_params)) {
    return false;
  }


  if (!::blink::mojom::internal::WindowState_Data
        ::Validate(object->window_state, validation_context))
    return false;


  if (!::blink::mojom::internal::VisibilityState_Data
        ::Validate(object->visibility_state, validation_context))
    return false;

  return true;
}

CrosWindowInfo_Data::CrosWindowInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosScreenInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosScreenInfo_Data* object =
      static_cast<const CrosScreenInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->work_area, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->work_area, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->bounds, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->bounds, validation_context))
    return false;

  return true;
}

CrosScreenInfo_Data::CrosScreenInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AcceleratorEvent_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AcceleratorEvent_Data* object =
      static_cast<const AcceleratorEvent_Data*>(data);


  if (!::blink::mojom::internal::AcceleratorEvent_Type_Data
        ::Validate(object->type, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->accelerator_name, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams accelerator_name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->accelerator_name, validation_context,
                                         &accelerator_name_validate_params)) {
    return false;
  }

  return true;
}

AcceleratorEvent_Data::AcceleratorEvent_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagementFactory_Create_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagementFactory_Create_Params_Data* object =
      static_cast<const CrosWindowManagementFactory_Create_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->observer_remote, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->observer_remote,
                                                 validation_context)) {
    return false;
  }

  return true;
}

CrosWindowManagementFactory_Create_Params_Data::CrosWindowManagementFactory_Create_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_GetAllWindows_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_GetAllWindows_Params_Data* object =
      static_cast<const CrosWindowManagement_GetAllWindows_Params_Data*>(data);

  return true;
}

CrosWindowManagement_GetAllWindows_Params_Data::CrosWindowManagement_GetAllWindows_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_GetAllWindows_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_GetAllWindows_ResponseParams_Data* object =
      static_cast<const CrosWindowManagement_GetAllWindows_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->result, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams result_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->result, validation_context,
                                         &result_validate_params)) {
    return false;
  }

  return true;
}

CrosWindowManagement_GetAllWindows_ResponseParams_Data::CrosWindowManagement_GetAllWindows_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_MoveTo_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_MoveTo_Params_Data* object =
      static_cast<const CrosWindowManagement_MoveTo_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->id, validation_context))
    return false;

  return true;
}

CrosWindowManagement_MoveTo_Params_Data::CrosWindowManagement_MoveTo_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_MoveTo_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_MoveTo_ResponseParams_Data* object =
      static_cast<const CrosWindowManagement_MoveTo_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::CrosWindowManagementStatus_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

CrosWindowManagement_MoveTo_ResponseParams_Data::CrosWindowManagement_MoveTo_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_MoveBy_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_MoveBy_Params_Data* object =
      static_cast<const CrosWindowManagement_MoveBy_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->id, validation_context))
    return false;

  return true;
}

CrosWindowManagement_MoveBy_Params_Data::CrosWindowManagement_MoveBy_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_MoveBy_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_MoveBy_ResponseParams_Data* object =
      static_cast<const CrosWindowManagement_MoveBy_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::CrosWindowManagementStatus_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

CrosWindowManagement_MoveBy_ResponseParams_Data::CrosWindowManagement_MoveBy_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_ResizeTo_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_ResizeTo_Params_Data* object =
      static_cast<const CrosWindowManagement_ResizeTo_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->id, validation_context))
    return false;

  return true;
}

CrosWindowManagement_ResizeTo_Params_Data::CrosWindowManagement_ResizeTo_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_ResizeTo_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_ResizeTo_ResponseParams_Data* object =
      static_cast<const CrosWindowManagement_ResizeTo_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::CrosWindowManagementStatus_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

CrosWindowManagement_ResizeTo_ResponseParams_Data::CrosWindowManagement_ResizeTo_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_ResizeBy_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_ResizeBy_Params_Data* object =
      static_cast<const CrosWindowManagement_ResizeBy_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->id, validation_context))
    return false;

  return true;
}

CrosWindowManagement_ResizeBy_Params_Data::CrosWindowManagement_ResizeBy_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_ResizeBy_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_ResizeBy_ResponseParams_Data* object =
      static_cast<const CrosWindowManagement_ResizeBy_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::CrosWindowManagementStatus_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

CrosWindowManagement_ResizeBy_ResponseParams_Data::CrosWindowManagement_ResizeBy_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_SetFullscreen_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_SetFullscreen_Params_Data* object =
      static_cast<const CrosWindowManagement_SetFullscreen_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->id, validation_context))
    return false;

  return true;
}

CrosWindowManagement_SetFullscreen_Params_Data::CrosWindowManagement_SetFullscreen_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_SetFullscreen_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_SetFullscreen_ResponseParams_Data* object =
      static_cast<const CrosWindowManagement_SetFullscreen_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::CrosWindowManagementStatus_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

CrosWindowManagement_SetFullscreen_ResponseParams_Data::CrosWindowManagement_SetFullscreen_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_Maximize_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_Maximize_Params_Data* object =
      static_cast<const CrosWindowManagement_Maximize_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->id, validation_context))
    return false;

  return true;
}

CrosWindowManagement_Maximize_Params_Data::CrosWindowManagement_Maximize_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_Maximize_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_Maximize_ResponseParams_Data* object =
      static_cast<const CrosWindowManagement_Maximize_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::CrosWindowManagementStatus_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

CrosWindowManagement_Maximize_ResponseParams_Data::CrosWindowManagement_Maximize_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_Minimize_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_Minimize_Params_Data* object =
      static_cast<const CrosWindowManagement_Minimize_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->id, validation_context))
    return false;

  return true;
}

CrosWindowManagement_Minimize_Params_Data::CrosWindowManagement_Minimize_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_Minimize_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_Minimize_ResponseParams_Data* object =
      static_cast<const CrosWindowManagement_Minimize_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::CrosWindowManagementStatus_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

CrosWindowManagement_Minimize_ResponseParams_Data::CrosWindowManagement_Minimize_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_Focus_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_Focus_Params_Data* object =
      static_cast<const CrosWindowManagement_Focus_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->id, validation_context))
    return false;

  return true;
}

CrosWindowManagement_Focus_Params_Data::CrosWindowManagement_Focus_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_Focus_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_Focus_ResponseParams_Data* object =
      static_cast<const CrosWindowManagement_Focus_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::CrosWindowManagementStatus_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

CrosWindowManagement_Focus_ResponseParams_Data::CrosWindowManagement_Focus_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_Close_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_Close_Params_Data* object =
      static_cast<const CrosWindowManagement_Close_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->id, validation_context))
    return false;

  return true;
}

CrosWindowManagement_Close_Params_Data::CrosWindowManagement_Close_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_Close_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_Close_ResponseParams_Data* object =
      static_cast<const CrosWindowManagement_Close_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::CrosWindowManagementStatus_Data
        ::Validate(object->value, validation_context))
    return false;

  return true;
}

CrosWindowManagement_Close_ResponseParams_Data::CrosWindowManagement_Close_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_GetAllScreens_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_GetAllScreens_Params_Data* object =
      static_cast<const CrosWindowManagement_GetAllScreens_Params_Data*>(data);

  return true;
}

CrosWindowManagement_GetAllScreens_Params_Data::CrosWindowManagement_GetAllScreens_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagement_GetAllScreens_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagement_GetAllScreens_ResponseParams_Data* object =
      static_cast<const CrosWindowManagement_GetAllScreens_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->screens, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams screens_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->screens, validation_context,
                                         &screens_validate_params)) {
    return false;
  }

  return true;
}

CrosWindowManagement_GetAllScreens_ResponseParams_Data::CrosWindowManagement_GetAllScreens_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data* object =
      static_cast<const CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data*>(data);

  return true;
}

CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data::CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data* object =
      static_cast<const CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->event, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->event, validation_context))
    return false;

  return true;
}

CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data::CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::WindowState>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::WindowState value) {
  return std::move(context).WriteString(::blink::mojom::WindowStateToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::VisibilityState>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::VisibilityState value) {
  return std::move(context).WriteString(::blink::mojom::VisibilityStateToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::CrosWindowManagementStatus>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::CrosWindowManagementStatus value) {
  return std::move(context).WriteString(::blink::mojom::CrosWindowManagementStatusToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::AcceleratorEvent_Type>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::AcceleratorEvent_Type value) {
  return std::move(context).WriteString(::blink::mojom::AcceleratorEvent_TypeToString(value));
}

} // namespace perfetto