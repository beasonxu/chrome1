// third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }


  var WindowState = {};
  WindowState.kNormal = 0;
  WindowState.kFullscreen = 1;
  WindowState.kMaximized = 2;
  WindowState.kMinimized = 3;
  WindowState.MIN_VALUE = 0;
  WindowState.MAX_VALUE = 3;

  WindowState.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  WindowState.toKnownEnumValue = function(value) {
    return value;
  };

  WindowState.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var VisibilityState = {};
  VisibilityState.kHidden = 0;
  VisibilityState.kShown = 1;
  VisibilityState.MIN_VALUE = 0;
  VisibilityState.MAX_VALUE = 1;

  VisibilityState.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  VisibilityState.toKnownEnumValue = function(value) {
    return value;
  };

  VisibilityState.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var CrosWindowManagementStatus = {};
  CrosWindowManagementStatus.kSuccess = 0;
  CrosWindowManagementStatus.kWindowNotFound = 1;
  CrosWindowManagementStatus.kWindowNoWindowState = 2;
  CrosWindowManagementStatus.kWindowNoWidget = 3;
  CrosWindowManagementStatus.MIN_VALUE = 0;
  CrosWindowManagementStatus.MAX_VALUE = 3;

  CrosWindowManagementStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  CrosWindowManagementStatus.toKnownEnumValue = function(value) {
    return value;
  };

  CrosWindowManagementStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function CrosWindowInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowInfo.prototype.initDefaults_ = function() {
    this.id = null;
    this.appId = null;
    this.bounds = null;
    this.title = null;
    this.windowState = 0;
    this.isFocused = false;
    this.visibilityState = 0;
  };
  CrosWindowInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowInfo.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowInfo.appId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowInfo.bounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowInfo.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowInfo.windowState
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 32, WindowState);
    if (err !== validator.validationError.NONE)
        return err;



    // validate CrosWindowInfo.visibilityState
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 40, VisibilityState);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowInfo.encodedSize = codec.kStructHeaderSize + 48;

  CrosWindowInfo.decode = function(decoder) {
    var packed;
    var val = new CrosWindowInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.appId =
        decoder.decodeStruct(codec.String);
    val.bounds =
        decoder.decodeStructPointer(geometry$.Rect);
    val.title =
        decoder.decodeStruct(codec.String);
    val.windowState =
        decoder.decodeStruct(new codec.Enum(WindowState));
    packed = decoder.readUint8();
    val.isFocused = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.visibilityState =
        decoder.decodeStruct(new codec.Enum(VisibilityState));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.id);
    encoder.encodeStruct(codec.String, val.appId);
    encoder.encodeStructPointer(geometry$.Rect, val.bounds);
    encoder.encodeStruct(codec.String, val.title);
    encoder.encodeStruct(codec.Int32, val.windowState);
    packed = 0;
    packed |= (val.isFocused & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.visibilityState);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosScreenInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosScreenInfo.prototype.initDefaults_ = function() {
    this.workArea = null;
    this.bounds = null;
    this.isPrimary = false;
  };
  CrosScreenInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosScreenInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosScreenInfo.workArea
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosScreenInfo.bounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  CrosScreenInfo.encodedSize = codec.kStructHeaderSize + 24;

  CrosScreenInfo.decode = function(decoder) {
    var packed;
    var val = new CrosScreenInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.workArea =
        decoder.decodeStructPointer(geometry$.Rect);
    val.bounds =
        decoder.decodeStructPointer(geometry$.Rect);
    packed = decoder.readUint8();
    val.isPrimary = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosScreenInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosScreenInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Rect, val.workArea);
    encoder.encodeStructPointer(geometry$.Rect, val.bounds);
    packed = 0;
    packed |= (val.isPrimary & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function AcceleratorEvent(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  AcceleratorEvent.Type = {};
  AcceleratorEvent.Type.kDown = 0;
  AcceleratorEvent.Type.kUp = 1;
  AcceleratorEvent.Type.MIN_VALUE = 0;
  AcceleratorEvent.Type.MAX_VALUE = 1;

  AcceleratorEvent.Type.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  AcceleratorEvent.Type.toKnownEnumValue = function(value) {
    return value;
  };

  AcceleratorEvent.Type.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  AcceleratorEvent.prototype.initDefaults_ = function() {
    this.type = 0;
    this.repeat = false;
    this.acceleratorName = null;
  };
  AcceleratorEvent.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AcceleratorEvent.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AcceleratorEvent.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, AcceleratorEvent.Type);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AcceleratorEvent.acceleratorName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  AcceleratorEvent.encodedSize = codec.kStructHeaderSize + 16;

  AcceleratorEvent.decode = function(decoder) {
    var packed;
    var val = new AcceleratorEvent();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(new codec.Enum(AcceleratorEvent.Type));
    packed = decoder.readUint8();
    val.repeat = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.acceleratorName =
        decoder.decodeStruct(codec.String);
    return val;
  };

  AcceleratorEvent.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AcceleratorEvent.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    packed = 0;
    packed |= (val.repeat & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.acceleratorName);
  };
  function CrosWindowManagementFactory_Create_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagementFactory_Create_Params.prototype.initDefaults_ = function() {
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
    this.observerRemote = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  CrosWindowManagementFactory_Create_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagementFactory_Create_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagementFactory_Create_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagementFactory_Create_Params.observerRemote
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagementFactory_Create_Params.encodedSize = codec.kStructHeaderSize + 16;

  CrosWindowManagementFactory_Create_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagementFactory_Create_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.observerRemote =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowManagementFactory_Create_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagementFactory_Create_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.observerRemote);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosWindowManagement_GetAllWindows_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_GetAllWindows_Params.prototype.initDefaults_ = function() {
  };
  CrosWindowManagement_GetAllWindows_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_GetAllWindows_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_GetAllWindows_Params.encodedSize = codec.kStructHeaderSize + 0;

  CrosWindowManagement_GetAllWindows_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_GetAllWindows_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CrosWindowManagement_GetAllWindows_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_GetAllWindows_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CrosWindowManagement_GetAllWindows_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_GetAllWindows_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  CrosWindowManagement_GetAllWindows_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_GetAllWindows_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_GetAllWindows_ResponseParams.result
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(CrosWindowInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_GetAllWindows_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_GetAllWindows_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_GetAllWindows_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeArrayPointer(new codec.PointerTo(CrosWindowInfo));
    return val;
  };

  CrosWindowManagement_GetAllWindows_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_GetAllWindows_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(CrosWindowInfo), val.result);
  };
  function CrosWindowManagement_MoveTo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_MoveTo_Params.prototype.initDefaults_ = function() {
    this.id = null;
    this.x = 0;
    this.y = 0;
  };
  CrosWindowManagement_MoveTo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_MoveTo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_MoveTo_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  CrosWindowManagement_MoveTo_Params.encodedSize = codec.kStructHeaderSize + 16;

  CrosWindowManagement_MoveTo_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_MoveTo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.x =
        decoder.decodeStruct(codec.Int32);
    val.y =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  CrosWindowManagement_MoveTo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_MoveTo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.id);
    encoder.encodeStruct(codec.Int32, val.x);
    encoder.encodeStruct(codec.Int32, val.y);
  };
  function CrosWindowManagement_MoveTo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_MoveTo_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  CrosWindowManagement_MoveTo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_MoveTo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_MoveTo_ResponseParams.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CrosWindowManagementStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_MoveTo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_MoveTo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_MoveTo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(CrosWindowManagementStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowManagement_MoveTo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_MoveTo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosWindowManagement_MoveBy_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_MoveBy_Params.prototype.initDefaults_ = function() {
    this.id = null;
    this.deltaX = 0;
    this.deltaY = 0;
  };
  CrosWindowManagement_MoveBy_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_MoveBy_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_MoveBy_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  CrosWindowManagement_MoveBy_Params.encodedSize = codec.kStructHeaderSize + 16;

  CrosWindowManagement_MoveBy_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_MoveBy_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.deltaX =
        decoder.decodeStruct(codec.Int32);
    val.deltaY =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  CrosWindowManagement_MoveBy_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_MoveBy_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.id);
    encoder.encodeStruct(codec.Int32, val.deltaX);
    encoder.encodeStruct(codec.Int32, val.deltaY);
  };
  function CrosWindowManagement_MoveBy_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_MoveBy_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  CrosWindowManagement_MoveBy_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_MoveBy_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_MoveBy_ResponseParams.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CrosWindowManagementStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_MoveBy_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_MoveBy_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_MoveBy_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(CrosWindowManagementStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowManagement_MoveBy_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_MoveBy_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosWindowManagement_ResizeTo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_ResizeTo_Params.prototype.initDefaults_ = function() {
    this.id = null;
    this.width = 0;
    this.height = 0;
  };
  CrosWindowManagement_ResizeTo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_ResizeTo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_ResizeTo_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  CrosWindowManagement_ResizeTo_Params.encodedSize = codec.kStructHeaderSize + 16;

  CrosWindowManagement_ResizeTo_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_ResizeTo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.width =
        decoder.decodeStruct(codec.Int32);
    val.height =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  CrosWindowManagement_ResizeTo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_ResizeTo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.id);
    encoder.encodeStruct(codec.Int32, val.width);
    encoder.encodeStruct(codec.Int32, val.height);
  };
  function CrosWindowManagement_ResizeTo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_ResizeTo_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  CrosWindowManagement_ResizeTo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_ResizeTo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_ResizeTo_ResponseParams.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CrosWindowManagementStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_ResizeTo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_ResizeTo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_ResizeTo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(CrosWindowManagementStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowManagement_ResizeTo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_ResizeTo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosWindowManagement_ResizeBy_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_ResizeBy_Params.prototype.initDefaults_ = function() {
    this.id = null;
    this.deltaWidth = 0;
    this.deltaHeight = 0;
  };
  CrosWindowManagement_ResizeBy_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_ResizeBy_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_ResizeBy_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  CrosWindowManagement_ResizeBy_Params.encodedSize = codec.kStructHeaderSize + 16;

  CrosWindowManagement_ResizeBy_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_ResizeBy_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.deltaWidth =
        decoder.decodeStruct(codec.Int32);
    val.deltaHeight =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  CrosWindowManagement_ResizeBy_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_ResizeBy_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.id);
    encoder.encodeStruct(codec.Int32, val.deltaWidth);
    encoder.encodeStruct(codec.Int32, val.deltaHeight);
  };
  function CrosWindowManagement_ResizeBy_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_ResizeBy_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  CrosWindowManagement_ResizeBy_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_ResizeBy_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_ResizeBy_ResponseParams.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CrosWindowManagementStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_ResizeBy_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_ResizeBy_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_ResizeBy_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(CrosWindowManagementStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowManagement_ResizeBy_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_ResizeBy_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosWindowManagement_SetFullscreen_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_SetFullscreen_Params.prototype.initDefaults_ = function() {
    this.id = null;
    this.fullscreen = false;
  };
  CrosWindowManagement_SetFullscreen_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_SetFullscreen_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_SetFullscreen_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  CrosWindowManagement_SetFullscreen_Params.encodedSize = codec.kStructHeaderSize + 16;

  CrosWindowManagement_SetFullscreen_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_SetFullscreen_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    packed = decoder.readUint8();
    val.fullscreen = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowManagement_SetFullscreen_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_SetFullscreen_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.id);
    packed = 0;
    packed |= (val.fullscreen & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosWindowManagement_SetFullscreen_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_SetFullscreen_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  CrosWindowManagement_SetFullscreen_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_SetFullscreen_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_SetFullscreen_ResponseParams.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CrosWindowManagementStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_SetFullscreen_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_SetFullscreen_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_SetFullscreen_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(CrosWindowManagementStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowManagement_SetFullscreen_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_SetFullscreen_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosWindowManagement_Maximize_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_Maximize_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  CrosWindowManagement_Maximize_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_Maximize_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_Maximize_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_Maximize_Params.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_Maximize_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_Maximize_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    return val;
  };

  CrosWindowManagement_Maximize_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_Maximize_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.id);
  };
  function CrosWindowManagement_Maximize_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_Maximize_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  CrosWindowManagement_Maximize_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_Maximize_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_Maximize_ResponseParams.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CrosWindowManagementStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_Maximize_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_Maximize_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_Maximize_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(CrosWindowManagementStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowManagement_Maximize_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_Maximize_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosWindowManagement_Minimize_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_Minimize_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  CrosWindowManagement_Minimize_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_Minimize_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_Minimize_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_Minimize_Params.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_Minimize_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_Minimize_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    return val;
  };

  CrosWindowManagement_Minimize_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_Minimize_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.id);
  };
  function CrosWindowManagement_Minimize_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_Minimize_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  CrosWindowManagement_Minimize_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_Minimize_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_Minimize_ResponseParams.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CrosWindowManagementStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_Minimize_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_Minimize_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_Minimize_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(CrosWindowManagementStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowManagement_Minimize_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_Minimize_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosWindowManagement_Focus_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_Focus_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  CrosWindowManagement_Focus_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_Focus_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_Focus_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_Focus_Params.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_Focus_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_Focus_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    return val;
  };

  CrosWindowManagement_Focus_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_Focus_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.id);
  };
  function CrosWindowManagement_Focus_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_Focus_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  CrosWindowManagement_Focus_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_Focus_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_Focus_ResponseParams.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CrosWindowManagementStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_Focus_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_Focus_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_Focus_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(CrosWindowManagementStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowManagement_Focus_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_Focus_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosWindowManagement_Close_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_Close_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  CrosWindowManagement_Close_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_Close_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_Close_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_Close_Params.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_Close_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_Close_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    return val;
  };

  CrosWindowManagement_Close_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_Close_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.id);
  };
  function CrosWindowManagement_Close_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_Close_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  CrosWindowManagement_Close_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_Close_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_Close_ResponseParams.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CrosWindowManagementStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_Close_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_Close_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_Close_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(CrosWindowManagementStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CrosWindowManagement_Close_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_Close_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CrosWindowManagement_GetAllScreens_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_GetAllScreens_Params.prototype.initDefaults_ = function() {
  };
  CrosWindowManagement_GetAllScreens_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_GetAllScreens_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_GetAllScreens_Params.encodedSize = codec.kStructHeaderSize + 0;

  CrosWindowManagement_GetAllScreens_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_GetAllScreens_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CrosWindowManagement_GetAllScreens_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_GetAllScreens_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CrosWindowManagement_GetAllScreens_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagement_GetAllScreens_ResponseParams.prototype.initDefaults_ = function() {
    this.screens = null;
  };
  CrosWindowManagement_GetAllScreens_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagement_GetAllScreens_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagement_GetAllScreens_ResponseParams.screens
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(CrosScreenInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagement_GetAllScreens_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagement_GetAllScreens_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagement_GetAllScreens_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.screens =
        decoder.decodeArrayPointer(new codec.PointerTo(CrosScreenInfo));
    return val;
  };

  CrosWindowManagement_GetAllScreens_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagement_GetAllScreens_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(CrosScreenInfo), val.screens);
  };
  function CrosWindowManagementStartObserver_DispatchStartEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagementStartObserver_DispatchStartEvent_Params.prototype.initDefaults_ = function() {
  };
  CrosWindowManagementStartObserver_DispatchStartEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagementStartObserver_DispatchStartEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagementStartObserver_DispatchStartEvent_Params.encodedSize = codec.kStructHeaderSize + 0;

  CrosWindowManagementStartObserver_DispatchStartEvent_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagementStartObserver_DispatchStartEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CrosWindowManagementStartObserver_DispatchStartEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagementStartObserver_DispatchStartEvent_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params.prototype.initDefaults_ = function() {
    this.event = null;
  };
  CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, AcceleratorEvent, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params.decode = function(decoder) {
    var packed;
    var val = new CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event =
        decoder.decodeStructPointer(AcceleratorEvent);
    return val;
  };

  CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(AcceleratorEvent, val.event);
  };
  var kCrosWindowManagementFactory_Create_Name = 0;

  function CrosWindowManagementFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CrosWindowManagementFactory,
                                                   handleOrPtrInfo);
  }

  function CrosWindowManagementFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CrosWindowManagementFactory, associatedInterfacePtrInfo);
  }

  CrosWindowManagementFactoryAssociatedPtr.prototype =
      Object.create(CrosWindowManagementFactoryPtr.prototype);
  CrosWindowManagementFactoryAssociatedPtr.prototype.constructor =
      CrosWindowManagementFactoryAssociatedPtr;

  function CrosWindowManagementFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  CrosWindowManagementFactoryPtr.prototype.create = function() {
    return CrosWindowManagementFactoryProxy.prototype.create
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementFactoryProxy.prototype.create = function(receiver, observerRemote) {
    var params_ = new CrosWindowManagementFactory_Create_Params();
    params_.receiver = receiver;
    params_.observerRemote = observerRemote;
    var builder = new codec.MessageV2Builder(
        kCrosWindowManagementFactory_Create_Name,
        codec.align(CrosWindowManagementFactory_Create_Params.encodedSize));
    builder.setPayload(CrosWindowManagementFactory_Create_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function CrosWindowManagementFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  CrosWindowManagementFactoryStub.prototype.create = function(receiver, observerRemote) {
    return this.delegate_ && this.delegate_.create && this.delegate_.create(receiver, observerRemote);
  }

  CrosWindowManagementFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCrosWindowManagementFactory_Create_Name:
      var params = reader.decodeStruct(CrosWindowManagementFactory_Create_Params);
      this.create(params.receiver, params.observerRemote);
      return true;
    default:
      return false;
    }
  };

  CrosWindowManagementFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateCrosWindowManagementFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCrosWindowManagementFactory_Create_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CrosWindowManagementFactory_Create_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCrosWindowManagementFactoryResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var CrosWindowManagementFactory = {
    name: 'blink.mojom.CrosWindowManagementFactory',
    kVersion: 0,
    ptrClass: CrosWindowManagementFactoryPtr,
    proxyClass: CrosWindowManagementFactoryProxy,
    stubClass: CrosWindowManagementFactoryStub,
    validateRequest: validateCrosWindowManagementFactoryRequest,
    validateResponse: null,
  };
  CrosWindowManagementFactoryStub.prototype.validator = validateCrosWindowManagementFactoryRequest;
  CrosWindowManagementFactoryProxy.prototype.validator = null;
  var kCrosWindowManagement_GetAllWindows_Name = 0;
  var kCrosWindowManagement_MoveTo_Name = 1;
  var kCrosWindowManagement_MoveBy_Name = 2;
  var kCrosWindowManagement_ResizeTo_Name = 3;
  var kCrosWindowManagement_ResizeBy_Name = 4;
  var kCrosWindowManagement_SetFullscreen_Name = 5;
  var kCrosWindowManagement_Maximize_Name = 6;
  var kCrosWindowManagement_Minimize_Name = 7;
  var kCrosWindowManagement_Focus_Name = 8;
  var kCrosWindowManagement_Close_Name = 9;
  var kCrosWindowManagement_GetAllScreens_Name = 10;

  function CrosWindowManagementPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CrosWindowManagement,
                                                   handleOrPtrInfo);
  }

  function CrosWindowManagementAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CrosWindowManagement, associatedInterfacePtrInfo);
  }

  CrosWindowManagementAssociatedPtr.prototype =
      Object.create(CrosWindowManagementPtr.prototype);
  CrosWindowManagementAssociatedPtr.prototype.constructor =
      CrosWindowManagementAssociatedPtr;

  function CrosWindowManagementProxy(receiver) {
    this.receiver_ = receiver;
  }
  CrosWindowManagementPtr.prototype.getAllWindows = function() {
    return CrosWindowManagementProxy.prototype.getAllWindows
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementProxy.prototype.getAllWindows = function() {
    var params_ = new CrosWindowManagement_GetAllWindows_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosWindowManagement_GetAllWindows_Name,
          codec.align(CrosWindowManagement_GetAllWindows_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosWindowManagement_GetAllWindows_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosWindowManagement_GetAllWindows_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CrosWindowManagementPtr.prototype.moveTo = function() {
    return CrosWindowManagementProxy.prototype.moveTo
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementProxy.prototype.moveTo = function(id, x, y) {
    var params_ = new CrosWindowManagement_MoveTo_Params();
    params_.id = id;
    params_.x = x;
    params_.y = y;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosWindowManagement_MoveTo_Name,
          codec.align(CrosWindowManagement_MoveTo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosWindowManagement_MoveTo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosWindowManagement_MoveTo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CrosWindowManagementPtr.prototype.moveBy = function() {
    return CrosWindowManagementProxy.prototype.moveBy
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementProxy.prototype.moveBy = function(id, deltaX, deltaY) {
    var params_ = new CrosWindowManagement_MoveBy_Params();
    params_.id = id;
    params_.deltaX = deltaX;
    params_.deltaY = deltaY;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosWindowManagement_MoveBy_Name,
          codec.align(CrosWindowManagement_MoveBy_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosWindowManagement_MoveBy_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosWindowManagement_MoveBy_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CrosWindowManagementPtr.prototype.resizeTo = function() {
    return CrosWindowManagementProxy.prototype.resizeTo
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementProxy.prototype.resizeTo = function(id, width, height) {
    var params_ = new CrosWindowManagement_ResizeTo_Params();
    params_.id = id;
    params_.width = width;
    params_.height = height;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosWindowManagement_ResizeTo_Name,
          codec.align(CrosWindowManagement_ResizeTo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosWindowManagement_ResizeTo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosWindowManagement_ResizeTo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CrosWindowManagementPtr.prototype.resizeBy = function() {
    return CrosWindowManagementProxy.prototype.resizeBy
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementProxy.prototype.resizeBy = function(id, deltaWidth, deltaHeight) {
    var params_ = new CrosWindowManagement_ResizeBy_Params();
    params_.id = id;
    params_.deltaWidth = deltaWidth;
    params_.deltaHeight = deltaHeight;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosWindowManagement_ResizeBy_Name,
          codec.align(CrosWindowManagement_ResizeBy_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosWindowManagement_ResizeBy_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosWindowManagement_ResizeBy_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CrosWindowManagementPtr.prototype.setFullscreen = function() {
    return CrosWindowManagementProxy.prototype.setFullscreen
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementProxy.prototype.setFullscreen = function(id, fullscreen) {
    var params_ = new CrosWindowManagement_SetFullscreen_Params();
    params_.id = id;
    params_.fullscreen = fullscreen;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosWindowManagement_SetFullscreen_Name,
          codec.align(CrosWindowManagement_SetFullscreen_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosWindowManagement_SetFullscreen_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosWindowManagement_SetFullscreen_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CrosWindowManagementPtr.prototype.maximize = function() {
    return CrosWindowManagementProxy.prototype.maximize
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementProxy.prototype.maximize = function(id) {
    var params_ = new CrosWindowManagement_Maximize_Params();
    params_.id = id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosWindowManagement_Maximize_Name,
          codec.align(CrosWindowManagement_Maximize_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosWindowManagement_Maximize_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosWindowManagement_Maximize_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CrosWindowManagementPtr.prototype.minimize = function() {
    return CrosWindowManagementProxy.prototype.minimize
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementProxy.prototype.minimize = function(id) {
    var params_ = new CrosWindowManagement_Minimize_Params();
    params_.id = id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosWindowManagement_Minimize_Name,
          codec.align(CrosWindowManagement_Minimize_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosWindowManagement_Minimize_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosWindowManagement_Minimize_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CrosWindowManagementPtr.prototype.focus = function() {
    return CrosWindowManagementProxy.prototype.focus
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementProxy.prototype.focus = function(id) {
    var params_ = new CrosWindowManagement_Focus_Params();
    params_.id = id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosWindowManagement_Focus_Name,
          codec.align(CrosWindowManagement_Focus_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosWindowManagement_Focus_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosWindowManagement_Focus_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CrosWindowManagementPtr.prototype.close = function() {
    return CrosWindowManagementProxy.prototype.close
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementProxy.prototype.close = function(id) {
    var params_ = new CrosWindowManagement_Close_Params();
    params_.id = id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosWindowManagement_Close_Name,
          codec.align(CrosWindowManagement_Close_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosWindowManagement_Close_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosWindowManagement_Close_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CrosWindowManagementPtr.prototype.getAllScreens = function() {
    return CrosWindowManagementProxy.prototype.getAllScreens
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementProxy.prototype.getAllScreens = function() {
    var params_ = new CrosWindowManagement_GetAllScreens_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosWindowManagement_GetAllScreens_Name,
          codec.align(CrosWindowManagement_GetAllScreens_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosWindowManagement_GetAllScreens_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosWindowManagement_GetAllScreens_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function CrosWindowManagementStub(delegate) {
    this.delegate_ = delegate;
  }
  CrosWindowManagementStub.prototype.getAllWindows = function() {
    return this.delegate_ && this.delegate_.getAllWindows && this.delegate_.getAllWindows();
  }
  CrosWindowManagementStub.prototype.moveTo = function(id, x, y) {
    return this.delegate_ && this.delegate_.moveTo && this.delegate_.moveTo(id, x, y);
  }
  CrosWindowManagementStub.prototype.moveBy = function(id, deltaX, deltaY) {
    return this.delegate_ && this.delegate_.moveBy && this.delegate_.moveBy(id, deltaX, deltaY);
  }
  CrosWindowManagementStub.prototype.resizeTo = function(id, width, height) {
    return this.delegate_ && this.delegate_.resizeTo && this.delegate_.resizeTo(id, width, height);
  }
  CrosWindowManagementStub.prototype.resizeBy = function(id, deltaWidth, deltaHeight) {
    return this.delegate_ && this.delegate_.resizeBy && this.delegate_.resizeBy(id, deltaWidth, deltaHeight);
  }
  CrosWindowManagementStub.prototype.setFullscreen = function(id, fullscreen) {
    return this.delegate_ && this.delegate_.setFullscreen && this.delegate_.setFullscreen(id, fullscreen);
  }
  CrosWindowManagementStub.prototype.maximize = function(id) {
    return this.delegate_ && this.delegate_.maximize && this.delegate_.maximize(id);
  }
  CrosWindowManagementStub.prototype.minimize = function(id) {
    return this.delegate_ && this.delegate_.minimize && this.delegate_.minimize(id);
  }
  CrosWindowManagementStub.prototype.focus = function(id) {
    return this.delegate_ && this.delegate_.focus && this.delegate_.focus(id);
  }
  CrosWindowManagementStub.prototype.close = function(id) {
    return this.delegate_ && this.delegate_.close && this.delegate_.close(id);
  }
  CrosWindowManagementStub.prototype.getAllScreens = function() {
    return this.delegate_ && this.delegate_.getAllScreens && this.delegate_.getAllScreens();
  }

  CrosWindowManagementStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  CrosWindowManagementStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCrosWindowManagement_GetAllWindows_Name:
      var params = reader.decodeStruct(CrosWindowManagement_GetAllWindows_Params);
      this.getAllWindows().then(function(response) {
        var responseParams =
            new CrosWindowManagement_GetAllWindows_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kCrosWindowManagement_GetAllWindows_Name,
            codec.align(CrosWindowManagement_GetAllWindows_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosWindowManagement_GetAllWindows_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCrosWindowManagement_MoveTo_Name:
      var params = reader.decodeStruct(CrosWindowManagement_MoveTo_Params);
      this.moveTo(params.id, params.x, params.y).then(function(response) {
        var responseParams =
            new CrosWindowManagement_MoveTo_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kCrosWindowManagement_MoveTo_Name,
            codec.align(CrosWindowManagement_MoveTo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosWindowManagement_MoveTo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCrosWindowManagement_MoveBy_Name:
      var params = reader.decodeStruct(CrosWindowManagement_MoveBy_Params);
      this.moveBy(params.id, params.deltaX, params.deltaY).then(function(response) {
        var responseParams =
            new CrosWindowManagement_MoveBy_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kCrosWindowManagement_MoveBy_Name,
            codec.align(CrosWindowManagement_MoveBy_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosWindowManagement_MoveBy_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCrosWindowManagement_ResizeTo_Name:
      var params = reader.decodeStruct(CrosWindowManagement_ResizeTo_Params);
      this.resizeTo(params.id, params.width, params.height).then(function(response) {
        var responseParams =
            new CrosWindowManagement_ResizeTo_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kCrosWindowManagement_ResizeTo_Name,
            codec.align(CrosWindowManagement_ResizeTo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosWindowManagement_ResizeTo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCrosWindowManagement_ResizeBy_Name:
      var params = reader.decodeStruct(CrosWindowManagement_ResizeBy_Params);
      this.resizeBy(params.id, params.deltaWidth, params.deltaHeight).then(function(response) {
        var responseParams =
            new CrosWindowManagement_ResizeBy_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kCrosWindowManagement_ResizeBy_Name,
            codec.align(CrosWindowManagement_ResizeBy_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosWindowManagement_ResizeBy_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCrosWindowManagement_SetFullscreen_Name:
      var params = reader.decodeStruct(CrosWindowManagement_SetFullscreen_Params);
      this.setFullscreen(params.id, params.fullscreen).then(function(response) {
        var responseParams =
            new CrosWindowManagement_SetFullscreen_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kCrosWindowManagement_SetFullscreen_Name,
            codec.align(CrosWindowManagement_SetFullscreen_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosWindowManagement_SetFullscreen_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCrosWindowManagement_Maximize_Name:
      var params = reader.decodeStruct(CrosWindowManagement_Maximize_Params);
      this.maximize(params.id).then(function(response) {
        var responseParams =
            new CrosWindowManagement_Maximize_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kCrosWindowManagement_Maximize_Name,
            codec.align(CrosWindowManagement_Maximize_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosWindowManagement_Maximize_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCrosWindowManagement_Minimize_Name:
      var params = reader.decodeStruct(CrosWindowManagement_Minimize_Params);
      this.minimize(params.id).then(function(response) {
        var responseParams =
            new CrosWindowManagement_Minimize_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kCrosWindowManagement_Minimize_Name,
            codec.align(CrosWindowManagement_Minimize_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosWindowManagement_Minimize_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCrosWindowManagement_Focus_Name:
      var params = reader.decodeStruct(CrosWindowManagement_Focus_Params);
      this.focus(params.id).then(function(response) {
        var responseParams =
            new CrosWindowManagement_Focus_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kCrosWindowManagement_Focus_Name,
            codec.align(CrosWindowManagement_Focus_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosWindowManagement_Focus_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCrosWindowManagement_Close_Name:
      var params = reader.decodeStruct(CrosWindowManagement_Close_Params);
      this.close(params.id).then(function(response) {
        var responseParams =
            new CrosWindowManagement_Close_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kCrosWindowManagement_Close_Name,
            codec.align(CrosWindowManagement_Close_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosWindowManagement_Close_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCrosWindowManagement_GetAllScreens_Name:
      var params = reader.decodeStruct(CrosWindowManagement_GetAllScreens_Params);
      this.getAllScreens().then(function(response) {
        var responseParams =
            new CrosWindowManagement_GetAllScreens_ResponseParams();
        responseParams.screens = response.screens;
        var builder = new codec.MessageV1Builder(
            kCrosWindowManagement_GetAllScreens_Name,
            codec.align(CrosWindowManagement_GetAllScreens_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosWindowManagement_GetAllScreens_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateCrosWindowManagementRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCrosWindowManagement_GetAllWindows_Name:
        if (message.expectsResponse())
          paramsClass = CrosWindowManagement_GetAllWindows_Params;
      break;
      case kCrosWindowManagement_MoveTo_Name:
        if (message.expectsResponse())
          paramsClass = CrosWindowManagement_MoveTo_Params;
      break;
      case kCrosWindowManagement_MoveBy_Name:
        if (message.expectsResponse())
          paramsClass = CrosWindowManagement_MoveBy_Params;
      break;
      case kCrosWindowManagement_ResizeTo_Name:
        if (message.expectsResponse())
          paramsClass = CrosWindowManagement_ResizeTo_Params;
      break;
      case kCrosWindowManagement_ResizeBy_Name:
        if (message.expectsResponse())
          paramsClass = CrosWindowManagement_ResizeBy_Params;
      break;
      case kCrosWindowManagement_SetFullscreen_Name:
        if (message.expectsResponse())
          paramsClass = CrosWindowManagement_SetFullscreen_Params;
      break;
      case kCrosWindowManagement_Maximize_Name:
        if (message.expectsResponse())
          paramsClass = CrosWindowManagement_Maximize_Params;
      break;
      case kCrosWindowManagement_Minimize_Name:
        if (message.expectsResponse())
          paramsClass = CrosWindowManagement_Minimize_Params;
      break;
      case kCrosWindowManagement_Focus_Name:
        if (message.expectsResponse())
          paramsClass = CrosWindowManagement_Focus_Params;
      break;
      case kCrosWindowManagement_Close_Name:
        if (message.expectsResponse())
          paramsClass = CrosWindowManagement_Close_Params;
      break;
      case kCrosWindowManagement_GetAllScreens_Name:
        if (message.expectsResponse())
          paramsClass = CrosWindowManagement_GetAllScreens_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCrosWindowManagementResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kCrosWindowManagement_GetAllWindows_Name:
        if (message.isResponse())
          paramsClass = CrosWindowManagement_GetAllWindows_ResponseParams;
        break;
      case kCrosWindowManagement_MoveTo_Name:
        if (message.isResponse())
          paramsClass = CrosWindowManagement_MoveTo_ResponseParams;
        break;
      case kCrosWindowManagement_MoveBy_Name:
        if (message.isResponse())
          paramsClass = CrosWindowManagement_MoveBy_ResponseParams;
        break;
      case kCrosWindowManagement_ResizeTo_Name:
        if (message.isResponse())
          paramsClass = CrosWindowManagement_ResizeTo_ResponseParams;
        break;
      case kCrosWindowManagement_ResizeBy_Name:
        if (message.isResponse())
          paramsClass = CrosWindowManagement_ResizeBy_ResponseParams;
        break;
      case kCrosWindowManagement_SetFullscreen_Name:
        if (message.isResponse())
          paramsClass = CrosWindowManagement_SetFullscreen_ResponseParams;
        break;
      case kCrosWindowManagement_Maximize_Name:
        if (message.isResponse())
          paramsClass = CrosWindowManagement_Maximize_ResponseParams;
        break;
      case kCrosWindowManagement_Minimize_Name:
        if (message.isResponse())
          paramsClass = CrosWindowManagement_Minimize_ResponseParams;
        break;
      case kCrosWindowManagement_Focus_Name:
        if (message.isResponse())
          paramsClass = CrosWindowManagement_Focus_ResponseParams;
        break;
      case kCrosWindowManagement_Close_Name:
        if (message.isResponse())
          paramsClass = CrosWindowManagement_Close_ResponseParams;
        break;
      case kCrosWindowManagement_GetAllScreens_Name:
        if (message.isResponse())
          paramsClass = CrosWindowManagement_GetAllScreens_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var CrosWindowManagement = {
    name: 'blink.mojom.CrosWindowManagement',
    kVersion: 0,
    ptrClass: CrosWindowManagementPtr,
    proxyClass: CrosWindowManagementProxy,
    stubClass: CrosWindowManagementStub,
    validateRequest: validateCrosWindowManagementRequest,
    validateResponse: validateCrosWindowManagementResponse,
  };
  CrosWindowManagementStub.prototype.validator = validateCrosWindowManagementRequest;
  CrosWindowManagementProxy.prototype.validator = validateCrosWindowManagementResponse;
  var kCrosWindowManagementStartObserver_DispatchStartEvent_Name = 0;
  var kCrosWindowManagementStartObserver_DispatchAcceleratorEvent_Name = 1;

  function CrosWindowManagementStartObserverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CrosWindowManagementStartObserver,
                                                   handleOrPtrInfo);
  }

  function CrosWindowManagementStartObserverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CrosWindowManagementStartObserver, associatedInterfacePtrInfo);
  }

  CrosWindowManagementStartObserverAssociatedPtr.prototype =
      Object.create(CrosWindowManagementStartObserverPtr.prototype);
  CrosWindowManagementStartObserverAssociatedPtr.prototype.constructor =
      CrosWindowManagementStartObserverAssociatedPtr;

  function CrosWindowManagementStartObserverProxy(receiver) {
    this.receiver_ = receiver;
  }
  CrosWindowManagementStartObserverPtr.prototype.dispatchStartEvent = function() {
    return CrosWindowManagementStartObserverProxy.prototype.dispatchStartEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementStartObserverProxy.prototype.dispatchStartEvent = function() {
    var params_ = new CrosWindowManagementStartObserver_DispatchStartEvent_Params();
    var builder = new codec.MessageV0Builder(
        kCrosWindowManagementStartObserver_DispatchStartEvent_Name,
        codec.align(CrosWindowManagementStartObserver_DispatchStartEvent_Params.encodedSize));
    builder.encodeStruct(CrosWindowManagementStartObserver_DispatchStartEvent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CrosWindowManagementStartObserverPtr.prototype.dispatchAcceleratorEvent = function() {
    return CrosWindowManagementStartObserverProxy.prototype.dispatchAcceleratorEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosWindowManagementStartObserverProxy.prototype.dispatchAcceleratorEvent = function(event) {
    var params_ = new CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params();
    params_.event = event;
    var builder = new codec.MessageV0Builder(
        kCrosWindowManagementStartObserver_DispatchAcceleratorEvent_Name,
        codec.align(CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params.encodedSize));
    builder.encodeStruct(CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function CrosWindowManagementStartObserverStub(delegate) {
    this.delegate_ = delegate;
  }
  CrosWindowManagementStartObserverStub.prototype.dispatchStartEvent = function() {
    return this.delegate_ && this.delegate_.dispatchStartEvent && this.delegate_.dispatchStartEvent();
  }
  CrosWindowManagementStartObserverStub.prototype.dispatchAcceleratorEvent = function(event) {
    return this.delegate_ && this.delegate_.dispatchAcceleratorEvent && this.delegate_.dispatchAcceleratorEvent(event);
  }

  CrosWindowManagementStartObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCrosWindowManagementStartObserver_DispatchStartEvent_Name:
      var params = reader.decodeStruct(CrosWindowManagementStartObserver_DispatchStartEvent_Params);
      this.dispatchStartEvent();
      return true;
    case kCrosWindowManagementStartObserver_DispatchAcceleratorEvent_Name:
      var params = reader.decodeStruct(CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params);
      this.dispatchAcceleratorEvent(params.event);
      return true;
    default:
      return false;
    }
  };

  CrosWindowManagementStartObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateCrosWindowManagementStartObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCrosWindowManagementStartObserver_DispatchStartEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CrosWindowManagementStartObserver_DispatchStartEvent_Params;
      break;
      case kCrosWindowManagementStartObserver_DispatchAcceleratorEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCrosWindowManagementStartObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var CrosWindowManagementStartObserver = {
    name: 'blink.mojom.CrosWindowManagementStartObserver',
    kVersion: 0,
    ptrClass: CrosWindowManagementStartObserverPtr,
    proxyClass: CrosWindowManagementStartObserverProxy,
    stubClass: CrosWindowManagementStartObserverStub,
    validateRequest: validateCrosWindowManagementStartObserverRequest,
    validateResponse: null,
  };
  CrosWindowManagementStartObserverStub.prototype.validator = validateCrosWindowManagementStartObserverRequest;
  CrosWindowManagementStartObserverProxy.prototype.validator = null;
  exports.WindowState = WindowState;
  exports.VisibilityState = VisibilityState;
  exports.CrosWindowManagementStatus = CrosWindowManagementStatus;
  exports.CrosWindowInfo = CrosWindowInfo;
  exports.CrosScreenInfo = CrosScreenInfo;
  exports.AcceleratorEvent = AcceleratorEvent;
  exports.CrosWindowManagementFactory = CrosWindowManagementFactory;
  exports.CrosWindowManagementFactoryPtr = CrosWindowManagementFactoryPtr;
  exports.CrosWindowManagementFactoryAssociatedPtr = CrosWindowManagementFactoryAssociatedPtr;
  exports.CrosWindowManagement = CrosWindowManagement;
  exports.CrosWindowManagementPtr = CrosWindowManagementPtr;
  exports.CrosWindowManagementAssociatedPtr = CrosWindowManagementAssociatedPtr;
  exports.CrosWindowManagementStartObserver = CrosWindowManagementStartObserver;
  exports.CrosWindowManagementStartObserverPtr = CrosWindowManagementStartObserverPtr;
  exports.CrosWindowManagementStartObserverAssociatedPtr = CrosWindowManagementStartObserverAssociatedPtr;
})();