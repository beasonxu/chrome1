// third_party/blink/public/mojom/chromeos/system_extensions/hid/cros_hid.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('blink.mojom');








/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.CrosHIDPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.CrosHID.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.mojom.CrosHIDInterface }
 */
blink.mojom.CrosHIDRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.CrosHIDPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.CrosHIDPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.CrosHIDPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Array<!blink.mojom.HidDeviceFilter> } filters
   * @return {!Promise<{
        devices: !Array<!device.mojom.HidDeviceInfo>,
   *  }>}
   */

  accessDevices(
      filters) {
    return this.proxy.sendMessage(
        0,
        blink.mojom.CrosHID_AccessDevices_ParamsSpec.$,
        blink.mojom.CrosHID_AccessDevices_ResponseParamsSpec.$,
        [
          filters
        ]);
  }

  
  /**
   * @param { !string } deviceGuid
   * @param { !device.mojom.HidConnectionClientRemote } client
   * @return {!Promise<{
        connection: ?device.mojom.HidConnectionRemote,
   *  }>}
   */

  connect(
      deviceGuid,
      client) {
    return this.proxy.sendMessage(
        1,
        blink.mojom.CrosHID_Connect_ParamsSpec.$,
        blink.mojom.CrosHID_Connect_ResponseParamsSpec.$,
        [
          deviceGuid,
          client
        ]);
  }
};

/**
 * An object which receives request messages for the CrosHID
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.CrosHIDReceiver = class {
  /**
   * @param {!blink.mojom.CrosHIDInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.CrosHIDRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.CrosHIDRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.CrosHIDRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.CrosHID_AccessDevices_ParamsSpec.$,
        blink.mojom.CrosHID_AccessDevices_ResponseParamsSpec.$,
        impl.accessDevices.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.CrosHID_Connect_ParamsSpec.$,
        blink.mojom.CrosHID_Connect_ResponseParamsSpec.$,
        impl.connect.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.CrosHID = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.CrosHID";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.CrosHIDRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.CrosHIDRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the CrosHID
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.CrosHIDCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.CrosHIDRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.CrosHIDRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.accessDevices =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.CrosHID_AccessDevices_ParamsSpec.$,
        blink.mojom.CrosHID_AccessDevices_ResponseParamsSpec.$,
        this.accessDevices.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.connect =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.CrosHID_Connect_ParamsSpec.$,
        blink.mojom.CrosHID_Connect_ResponseParamsSpec.$,
        this.connect.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosHID_AccessDevices_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosHID_AccessDevices_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosHID_Connect_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CrosHID_Connect_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.CrosHID_AccessDevices_ParamsSpec.$,
    'CrosHID_AccessDevices_Params',
    [
      mojo.internal.StructField(
        'filters', 0,
        0,
        mojo.internal.Array(blink.mojom.HidDeviceFilterSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosHID_AccessDevices_Params = class {
  constructor() {
    /** @export { !Array<!blink.mojom.HidDeviceFilter> } */
    this.filters;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosHID_AccessDevices_ResponseParamsSpec.$,
    'CrosHID_AccessDevices_ResponseParams',
    [
      mojo.internal.StructField(
        'devices', 0,
        0,
        mojo.internal.Array(device.mojom.HidDeviceInfoSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosHID_AccessDevices_ResponseParams = class {
  constructor() {
    /** @export { !Array<!device.mojom.HidDeviceInfo> } */
    this.devices;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosHID_Connect_ParamsSpec.$,
    'CrosHID_Connect_Params',
    [
      mojo.internal.StructField(
        'deviceGuid', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'client', 8,
        0,
        mojo.internal.InterfaceProxy(device.mojom.HidConnectionClientRemote),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.CrosHID_Connect_Params = class {
  constructor() {
    /** @export { !string } */
    this.deviceGuid;
    /** @export { !device.mojom.HidConnectionClientRemote } */
    this.client;
  }
};




mojo.internal.Struct(
    blink.mojom.CrosHID_Connect_ResponseParamsSpec.$,
    'CrosHID_Connect_ResponseParams',
    [
      mojo.internal.StructField(
        'connection', 0,
        0,
        mojo.internal.InterfaceProxy(device.mojom.HidConnectionRemote),
        null,
        true /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.CrosHID_Connect_ResponseParams = class {
  constructor() {
    /** @export { (device.mojom.HidConnectionRemote|undefined) } */
    this.connection;
  }
};


