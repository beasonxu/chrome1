// third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-params-data.h"
#include "third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_WINDOW_MANAGEMENT_CROS_WINDOW_MANAGEMENT_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_WINDOW_MANAGEMENT_CROS_WINDOW_MANAGEMENT_MOJOM_BLINK_JUMBO_H_
#endif



namespace blink {
namespace mojom {
namespace blink {
CrosWindowInfo::CrosWindowInfo()
    : id(),
      app_id(),
      bounds(),
      title(),
      window_state(),
      is_focused(),
      visibility_state() {}

CrosWindowInfo::CrosWindowInfo(
    const ::base::UnguessableToken& id_in,
    const WTF::String& app_id_in,
    const ::gfx::Rect& bounds_in,
    const WTF::String& title_in,
    WindowState window_state_in,
    bool is_focused_in,
    VisibilityState visibility_state_in)
    : id(std::move(id_in)),
      app_id(std::move(app_id_in)),
      bounds(std::move(bounds_in)),
      title(std::move(title_in)),
      window_state(std::move(window_state_in)),
      is_focused(std::move(is_focused_in)),
      visibility_state(std::move(visibility_state_in)) {}

CrosWindowInfo::~CrosWindowInfo() = default;

void CrosWindowInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "id"), this->id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::base::UnguessableToken&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "app_id"), this->app_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bounds"), this->bounds,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Rect&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "title"), this->title,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "window_state"), this->window_state,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type WindowState>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_focused"), this->is_focused,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "visibility_state"), this->visibility_state,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type VisibilityState>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool CrosWindowInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CrosScreenInfo::CrosScreenInfo()
    : work_area(),
      bounds(),
      is_primary() {}

CrosScreenInfo::CrosScreenInfo(
    const ::gfx::Rect& work_area_in,
    const ::gfx::Rect& bounds_in,
    bool is_primary_in)
    : work_area(std::move(work_area_in)),
      bounds(std::move(bounds_in)),
      is_primary(std::move(is_primary_in)) {}

CrosScreenInfo::~CrosScreenInfo() = default;

void CrosScreenInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "work_area"), this->work_area,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Rect&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bounds"), this->bounds,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Rect&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_primary"), this->is_primary,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool CrosScreenInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AcceleratorEvent::AcceleratorEvent()
    : type(),
      accelerator_name(),
      repeat() {}

AcceleratorEvent::AcceleratorEvent(
    AcceleratorEvent::Type type_in,
    const WTF::String& accelerator_name_in,
    bool repeat_in)
    : type(std::move(type_in)),
      accelerator_name(std::move(accelerator_name_in)),
      repeat(std::move(repeat_in)) {}

AcceleratorEvent::~AcceleratorEvent() = default;
size_t AcceleratorEvent::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->type);
  seed = mojo::internal::WTFHash(seed, this->accelerator_name);
  seed = mojo::internal::WTFHash(seed, this->repeat);
  return seed;
}

void AcceleratorEvent::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type AcceleratorEvent::Type>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "accelerator_name"), this->accelerator_name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "repeat"), this->repeat,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AcceleratorEvent::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char CrosWindowManagementFactory::Name_[] = "blink.mojom.CrosWindowManagementFactory";

CrosWindowManagementFactory::IPCStableHashFunction CrosWindowManagementFactory::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kCrosWindowManagementFactory_Create_Name: {
      return &CrosWindowManagementFactory::Create_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* CrosWindowManagementFactory::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kCrosWindowManagementFactory_Create_Name:
            return "Receive blink::mojom::CrosWindowManagementFactory::Create";
    }
  } else {
    switch (message.name()) {
      case internal::kCrosWindowManagementFactory_Create_Name:
            return "Receive reply blink::mojom::CrosWindowManagementFactory::Create";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t CrosWindowManagementFactory::Create_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagementFactory::Create");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

CrosWindowManagementFactoryProxy::CrosWindowManagementFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void CrosWindowManagementFactoryProxy::Create(
    ::mojo::PendingAssociatedReceiver<CrosWindowManagement> in_receiver, ::mojo::PendingAssociatedRemote<CrosWindowManagementStartObserver> in_observer_remote) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosWindowManagementFactory::Create", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingAssociatedReceiver<CrosWindowManagement>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("observer_remote"), in_observer_remote,
                        "<value of type ::mojo::PendingAssociatedRemote<CrosWindowManagementStartObserver>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagementFactory_Create_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagementFactory_Create_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CrosWindowManagementAssociatedRequestDataView>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid receiver in CrosWindowManagementFactory.Create request");
  mojo::internal::Serialize<::blink::mojom::CrosWindowManagementStartObserverAssociatedPtrInfoDataView>(
      in_observer_remote, &params->observer_remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->observer_remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid observer_remote in CrosWindowManagementFactory.Create request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagementFactory::Name_);
  message.set_method_name("Create");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool CrosWindowManagementFactoryStubDispatch::Accept(
    CrosWindowManagementFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kCrosWindowManagementFactory_Create_Name: {

      DCHECK(message->is_serialized());
      internal::CrosWindowManagementFactory_Create_Params_Data* params =
          reinterpret_cast<internal::CrosWindowManagementFactory_Create_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedReceiver<CrosWindowManagement> p_receiver{};
      ::mojo::PendingAssociatedRemote<CrosWindowManagementStartObserver> p_observer_remote{};
      CrosWindowManagementFactory_Create_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success) {
        p_observer_remote =
            input_data_view.TakeObserverRemote<decltype(p_observer_remote)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagementFactory::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Create(
std::move(p_receiver), 
std::move(p_observer_remote));
      return true;
    }
  }
  return false;
}

// static
bool CrosWindowManagementFactoryStubDispatch::AcceptWithResponder(
    CrosWindowManagementFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kCrosWindowManagementFactory_Create_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kCrosWindowManagementFactoryValidationInfo[] = {
    {&internal::CrosWindowManagementFactory_Create_Params_Data::Validate,
     nullptr /* no response */},
};

bool CrosWindowManagementFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::CrosWindowManagementFactory::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kCrosWindowManagementFactoryValidationInfo);
}

const char CrosWindowManagement::Name_[] = "blink.mojom.CrosWindowManagement";

CrosWindowManagement::IPCStableHashFunction CrosWindowManagement::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kCrosWindowManagement_GetAllWindows_Name: {
      return &CrosWindowManagement::GetAllWindows_Sym::IPCStableHash;
    }
    case internal::kCrosWindowManagement_MoveTo_Name: {
      return &CrosWindowManagement::MoveTo_Sym::IPCStableHash;
    }
    case internal::kCrosWindowManagement_MoveBy_Name: {
      return &CrosWindowManagement::MoveBy_Sym::IPCStableHash;
    }
    case internal::kCrosWindowManagement_ResizeTo_Name: {
      return &CrosWindowManagement::ResizeTo_Sym::IPCStableHash;
    }
    case internal::kCrosWindowManagement_ResizeBy_Name: {
      return &CrosWindowManagement::ResizeBy_Sym::IPCStableHash;
    }
    case internal::kCrosWindowManagement_SetFullscreen_Name: {
      return &CrosWindowManagement::SetFullscreen_Sym::IPCStableHash;
    }
    case internal::kCrosWindowManagement_Maximize_Name: {
      return &CrosWindowManagement::Maximize_Sym::IPCStableHash;
    }
    case internal::kCrosWindowManagement_Minimize_Name: {
      return &CrosWindowManagement::Minimize_Sym::IPCStableHash;
    }
    case internal::kCrosWindowManagement_Focus_Name: {
      return &CrosWindowManagement::Focus_Sym::IPCStableHash;
    }
    case internal::kCrosWindowManagement_Close_Name: {
      return &CrosWindowManagement::Close_Sym::IPCStableHash;
    }
    case internal::kCrosWindowManagement_GetAllScreens_Name: {
      return &CrosWindowManagement::GetAllScreens_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* CrosWindowManagement::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kCrosWindowManagement_GetAllWindows_Name:
            return "Receive blink::mojom::CrosWindowManagement::GetAllWindows";
      case internal::kCrosWindowManagement_MoveTo_Name:
            return "Receive blink::mojom::CrosWindowManagement::MoveTo";
      case internal::kCrosWindowManagement_MoveBy_Name:
            return "Receive blink::mojom::CrosWindowManagement::MoveBy";
      case internal::kCrosWindowManagement_ResizeTo_Name:
            return "Receive blink::mojom::CrosWindowManagement::ResizeTo";
      case internal::kCrosWindowManagement_ResizeBy_Name:
            return "Receive blink::mojom::CrosWindowManagement::ResizeBy";
      case internal::kCrosWindowManagement_SetFullscreen_Name:
            return "Receive blink::mojom::CrosWindowManagement::SetFullscreen";
      case internal::kCrosWindowManagement_Maximize_Name:
            return "Receive blink::mojom::CrosWindowManagement::Maximize";
      case internal::kCrosWindowManagement_Minimize_Name:
            return "Receive blink::mojom::CrosWindowManagement::Minimize";
      case internal::kCrosWindowManagement_Focus_Name:
            return "Receive blink::mojom::CrosWindowManagement::Focus";
      case internal::kCrosWindowManagement_Close_Name:
            return "Receive blink::mojom::CrosWindowManagement::Close";
      case internal::kCrosWindowManagement_GetAllScreens_Name:
            return "Receive blink::mojom::CrosWindowManagement::GetAllScreens";
    }
  } else {
    switch (message.name()) {
      case internal::kCrosWindowManagement_GetAllWindows_Name:
            return "Receive reply blink::mojom::CrosWindowManagement::GetAllWindows";
      case internal::kCrosWindowManagement_MoveTo_Name:
            return "Receive reply blink::mojom::CrosWindowManagement::MoveTo";
      case internal::kCrosWindowManagement_MoveBy_Name:
            return "Receive reply blink::mojom::CrosWindowManagement::MoveBy";
      case internal::kCrosWindowManagement_ResizeTo_Name:
            return "Receive reply blink::mojom::CrosWindowManagement::ResizeTo";
      case internal::kCrosWindowManagement_ResizeBy_Name:
            return "Receive reply blink::mojom::CrosWindowManagement::ResizeBy";
      case internal::kCrosWindowManagement_SetFullscreen_Name:
            return "Receive reply blink::mojom::CrosWindowManagement::SetFullscreen";
      case internal::kCrosWindowManagement_Maximize_Name:
            return "Receive reply blink::mojom::CrosWindowManagement::Maximize";
      case internal::kCrosWindowManagement_Minimize_Name:
            return "Receive reply blink::mojom::CrosWindowManagement::Minimize";
      case internal::kCrosWindowManagement_Focus_Name:
            return "Receive reply blink::mojom::CrosWindowManagement::Focus";
      case internal::kCrosWindowManagement_Close_Name:
            return "Receive reply blink::mojom::CrosWindowManagement::Close";
      case internal::kCrosWindowManagement_GetAllScreens_Name:
            return "Receive reply blink::mojom::CrosWindowManagement::GetAllScreens";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t CrosWindowManagement::GetAllWindows_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagement::GetAllWindows");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosWindowManagement::MoveTo_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagement::MoveTo");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosWindowManagement::MoveBy_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagement::MoveBy");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosWindowManagement::ResizeTo_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagement::ResizeTo");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosWindowManagement::ResizeBy_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagement::ResizeBy");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosWindowManagement::SetFullscreen_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagement::SetFullscreen");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosWindowManagement::Maximize_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagement::Maximize");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosWindowManagement::Minimize_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagement::Minimize");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosWindowManagement::Focus_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagement::Focus");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosWindowManagement::Close_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagement::Close");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosWindowManagement::GetAllScreens_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagement::GetAllScreens");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class CrosWindowManagement_GetAllWindows_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosWindowManagement_GetAllWindows_ForwardToCallback(
      CrosWindowManagement::GetAllWindowsCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosWindowManagement_GetAllWindows_ForwardToCallback(const CrosWindowManagement_GetAllWindows_ForwardToCallback&) = delete;
  CrosWindowManagement_GetAllWindows_ForwardToCallback& operator=(const CrosWindowManagement_GetAllWindows_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosWindowManagement::GetAllWindowsCallback callback_;
};

class CrosWindowManagement_MoveTo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosWindowManagement_MoveTo_ForwardToCallback(
      CrosWindowManagement::MoveToCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosWindowManagement_MoveTo_ForwardToCallback(const CrosWindowManagement_MoveTo_ForwardToCallback&) = delete;
  CrosWindowManagement_MoveTo_ForwardToCallback& operator=(const CrosWindowManagement_MoveTo_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosWindowManagement::MoveToCallback callback_;
};

class CrosWindowManagement_MoveBy_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosWindowManagement_MoveBy_ForwardToCallback(
      CrosWindowManagement::MoveByCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosWindowManagement_MoveBy_ForwardToCallback(const CrosWindowManagement_MoveBy_ForwardToCallback&) = delete;
  CrosWindowManagement_MoveBy_ForwardToCallback& operator=(const CrosWindowManagement_MoveBy_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosWindowManagement::MoveByCallback callback_;
};

class CrosWindowManagement_ResizeTo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosWindowManagement_ResizeTo_ForwardToCallback(
      CrosWindowManagement::ResizeToCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosWindowManagement_ResizeTo_ForwardToCallback(const CrosWindowManagement_ResizeTo_ForwardToCallback&) = delete;
  CrosWindowManagement_ResizeTo_ForwardToCallback& operator=(const CrosWindowManagement_ResizeTo_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosWindowManagement::ResizeToCallback callback_;
};

class CrosWindowManagement_ResizeBy_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosWindowManagement_ResizeBy_ForwardToCallback(
      CrosWindowManagement::ResizeByCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosWindowManagement_ResizeBy_ForwardToCallback(const CrosWindowManagement_ResizeBy_ForwardToCallback&) = delete;
  CrosWindowManagement_ResizeBy_ForwardToCallback& operator=(const CrosWindowManagement_ResizeBy_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosWindowManagement::ResizeByCallback callback_;
};

class CrosWindowManagement_SetFullscreen_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosWindowManagement_SetFullscreen_ForwardToCallback(
      CrosWindowManagement::SetFullscreenCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosWindowManagement_SetFullscreen_ForwardToCallback(const CrosWindowManagement_SetFullscreen_ForwardToCallback&) = delete;
  CrosWindowManagement_SetFullscreen_ForwardToCallback& operator=(const CrosWindowManagement_SetFullscreen_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosWindowManagement::SetFullscreenCallback callback_;
};

class CrosWindowManagement_Maximize_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosWindowManagement_Maximize_ForwardToCallback(
      CrosWindowManagement::MaximizeCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosWindowManagement_Maximize_ForwardToCallback(const CrosWindowManagement_Maximize_ForwardToCallback&) = delete;
  CrosWindowManagement_Maximize_ForwardToCallback& operator=(const CrosWindowManagement_Maximize_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosWindowManagement::MaximizeCallback callback_;
};

class CrosWindowManagement_Minimize_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosWindowManagement_Minimize_ForwardToCallback(
      CrosWindowManagement::MinimizeCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosWindowManagement_Minimize_ForwardToCallback(const CrosWindowManagement_Minimize_ForwardToCallback&) = delete;
  CrosWindowManagement_Minimize_ForwardToCallback& operator=(const CrosWindowManagement_Minimize_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosWindowManagement::MinimizeCallback callback_;
};

class CrosWindowManagement_Focus_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosWindowManagement_Focus_ForwardToCallback(
      CrosWindowManagement::FocusCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosWindowManagement_Focus_ForwardToCallback(const CrosWindowManagement_Focus_ForwardToCallback&) = delete;
  CrosWindowManagement_Focus_ForwardToCallback& operator=(const CrosWindowManagement_Focus_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosWindowManagement::FocusCallback callback_;
};

class CrosWindowManagement_Close_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosWindowManagement_Close_ForwardToCallback(
      CrosWindowManagement::CloseCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosWindowManagement_Close_ForwardToCallback(const CrosWindowManagement_Close_ForwardToCallback&) = delete;
  CrosWindowManagement_Close_ForwardToCallback& operator=(const CrosWindowManagement_Close_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosWindowManagement::CloseCallback callback_;
};

class CrosWindowManagement_GetAllScreens_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosWindowManagement_GetAllScreens_ForwardToCallback(
      CrosWindowManagement::GetAllScreensCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosWindowManagement_GetAllScreens_ForwardToCallback(const CrosWindowManagement_GetAllScreens_ForwardToCallback&) = delete;
  CrosWindowManagement_GetAllScreens_ForwardToCallback& operator=(const CrosWindowManagement_GetAllScreens_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosWindowManagement::GetAllScreensCallback callback_;
};

CrosWindowManagementProxy::CrosWindowManagementProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void CrosWindowManagementProxy::GetAllWindows(
    GetAllWindowsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::CrosWindowManagement::GetAllWindows");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_GetAllWindows_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_GetAllWindows_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("GetAllWindows");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosWindowManagement_GetAllWindows_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CrosWindowManagementProxy::MoveTo(
    const ::base::UnguessableToken& in_id, int32_t in_x, int32_t in_y, MoveToCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosWindowManagement::MoveTo", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type const ::base::UnguessableToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("x"), in_x,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("y"), in_y,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_MoveTo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_MoveTo_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in CrosWindowManagement.MoveTo request");
  params->x = in_x;
  params->y = in_y;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("MoveTo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosWindowManagement_MoveTo_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CrosWindowManagementProxy::MoveBy(
    const ::base::UnguessableToken& in_id, int32_t in_delta_x, int32_t in_delta_y, MoveByCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosWindowManagement::MoveBy", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type const ::base::UnguessableToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("delta_x"), in_delta_x,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("delta_y"), in_delta_y,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_MoveBy_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_MoveBy_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in CrosWindowManagement.MoveBy request");
  params->delta_x = in_delta_x;
  params->delta_y = in_delta_y;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("MoveBy");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosWindowManagement_MoveBy_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CrosWindowManagementProxy::ResizeTo(
    const ::base::UnguessableToken& in_id, int32_t in_width, int32_t in_height, ResizeToCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosWindowManagement::ResizeTo", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type const ::base::UnguessableToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("width"), in_width,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("height"), in_height,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_ResizeTo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_ResizeTo_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in CrosWindowManagement.ResizeTo request");
  params->width = in_width;
  params->height = in_height;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("ResizeTo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosWindowManagement_ResizeTo_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CrosWindowManagementProxy::ResizeBy(
    const ::base::UnguessableToken& in_id, int32_t in_delta_width, int32_t in_delta_height, ResizeByCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosWindowManagement::ResizeBy", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type const ::base::UnguessableToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("delta_width"), in_delta_width,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("delta_height"), in_delta_height,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_ResizeBy_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_ResizeBy_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in CrosWindowManagement.ResizeBy request");
  params->delta_width = in_delta_width;
  params->delta_height = in_delta_height;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("ResizeBy");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosWindowManagement_ResizeBy_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CrosWindowManagementProxy::SetFullscreen(
    const ::base::UnguessableToken& in_id, bool in_fullscreen, SetFullscreenCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosWindowManagement::SetFullscreen", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type const ::base::UnguessableToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("fullscreen"), in_fullscreen,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_SetFullscreen_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_SetFullscreen_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in CrosWindowManagement.SetFullscreen request");
  params->fullscreen = in_fullscreen;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("SetFullscreen");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosWindowManagement_SetFullscreen_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CrosWindowManagementProxy::Maximize(
    const ::base::UnguessableToken& in_id, MaximizeCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosWindowManagement::Maximize", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type const ::base::UnguessableToken&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_Maximize_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_Maximize_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in CrosWindowManagement.Maximize request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("Maximize");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosWindowManagement_Maximize_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CrosWindowManagementProxy::Minimize(
    const ::base::UnguessableToken& in_id, MinimizeCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosWindowManagement::Minimize", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type const ::base::UnguessableToken&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_Minimize_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_Minimize_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in CrosWindowManagement.Minimize request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("Minimize");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosWindowManagement_Minimize_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CrosWindowManagementProxy::Focus(
    const ::base::UnguessableToken& in_id, FocusCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosWindowManagement::Focus", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type const ::base::UnguessableToken&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_Focus_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_Focus_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in CrosWindowManagement.Focus request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("Focus");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosWindowManagement_Focus_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CrosWindowManagementProxy::Close(
    const ::base::UnguessableToken& in_id, CloseCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosWindowManagement::Close", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type const ::base::UnguessableToken&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_Close_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_Close_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in CrosWindowManagement.Close request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("Close");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosWindowManagement_Close_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CrosWindowManagementProxy::GetAllScreens(
    GetAllScreensCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::CrosWindowManagement::GetAllScreens");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_GetAllScreens_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_GetAllScreens_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("GetAllScreens");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosWindowManagement_GetAllScreens_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class CrosWindowManagement_GetAllWindows_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosWindowManagement::GetAllWindowsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosWindowManagement_GetAllWindows_ProxyToResponder> proxy(
        new CrosWindowManagement_GetAllWindows_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosWindowManagement_GetAllWindows_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosWindowManagement_GetAllWindows_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosWindowManagement_GetAllWindows_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosWindowManagement::GetAllWindowsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      WTF::Vector<CrosWindowInfoPtr> in_result);
};

bool CrosWindowManagement_GetAllWindows_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosWindowManagement_GetAllWindows_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosWindowManagement_GetAllWindows_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  WTF::Vector<CrosWindowInfoPtr> p_result{};
  CrosWindowManagement_GetAllWindows_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosWindowManagement::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void CrosWindowManagement_GetAllWindows_ProxyToResponder::Run(
    WTF::Vector<CrosWindowInfoPtr> in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosWindowManagement::GetAllWindows", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type WTF::Vector<CrosWindowInfoPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_GetAllWindows_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_GetAllWindows_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->result)::BaseType>
      result_fragment(params.message());
  const mojo::internal::ContainerValidateParams result_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::CrosWindowInfoDataView>>(
      in_result, result_fragment, &result_validate_params);
  params->result.Set(
      result_fragment.is_null() ? nullptr : result_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->result.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null result in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("GetAllWindows");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CrosWindowManagement_MoveTo_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosWindowManagement::MoveToCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosWindowManagement_MoveTo_ProxyToResponder> proxy(
        new CrosWindowManagement_MoveTo_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosWindowManagement_MoveTo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosWindowManagement_MoveTo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosWindowManagement_MoveTo_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosWindowManagement::MoveToCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      CrosWindowManagementStatus in_value);
};

bool CrosWindowManagement_MoveTo_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosWindowManagement_MoveTo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosWindowManagement_MoveTo_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  CrosWindowManagementStatus p_value{};
  CrosWindowManagement_MoveTo_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosWindowManagement::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void CrosWindowManagement_MoveTo_ProxyToResponder::Run(
    CrosWindowManagementStatus in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosWindowManagement::MoveTo", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type CrosWindowManagementStatus>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_MoveTo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_MoveTo_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CrosWindowManagementStatus>(
      in_value, &params->value);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("MoveTo");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CrosWindowManagement_MoveBy_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosWindowManagement::MoveByCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosWindowManagement_MoveBy_ProxyToResponder> proxy(
        new CrosWindowManagement_MoveBy_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosWindowManagement_MoveBy_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosWindowManagement_MoveBy_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosWindowManagement_MoveBy_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosWindowManagement::MoveByCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      CrosWindowManagementStatus in_value);
};

bool CrosWindowManagement_MoveBy_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosWindowManagement_MoveBy_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosWindowManagement_MoveBy_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  CrosWindowManagementStatus p_value{};
  CrosWindowManagement_MoveBy_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosWindowManagement::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void CrosWindowManagement_MoveBy_ProxyToResponder::Run(
    CrosWindowManagementStatus in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosWindowManagement::MoveBy", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type CrosWindowManagementStatus>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_MoveBy_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_MoveBy_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CrosWindowManagementStatus>(
      in_value, &params->value);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("MoveBy");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CrosWindowManagement_ResizeTo_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosWindowManagement::ResizeToCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosWindowManagement_ResizeTo_ProxyToResponder> proxy(
        new CrosWindowManagement_ResizeTo_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosWindowManagement_ResizeTo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosWindowManagement_ResizeTo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosWindowManagement_ResizeTo_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosWindowManagement::ResizeToCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      CrosWindowManagementStatus in_value);
};

bool CrosWindowManagement_ResizeTo_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosWindowManagement_ResizeTo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosWindowManagement_ResizeTo_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  CrosWindowManagementStatus p_value{};
  CrosWindowManagement_ResizeTo_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosWindowManagement::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void CrosWindowManagement_ResizeTo_ProxyToResponder::Run(
    CrosWindowManagementStatus in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosWindowManagement::ResizeTo", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type CrosWindowManagementStatus>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_ResizeTo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_ResizeTo_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CrosWindowManagementStatus>(
      in_value, &params->value);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("ResizeTo");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CrosWindowManagement_ResizeBy_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosWindowManagement::ResizeByCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosWindowManagement_ResizeBy_ProxyToResponder> proxy(
        new CrosWindowManagement_ResizeBy_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosWindowManagement_ResizeBy_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosWindowManagement_ResizeBy_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosWindowManagement_ResizeBy_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosWindowManagement::ResizeByCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      CrosWindowManagementStatus in_value);
};

bool CrosWindowManagement_ResizeBy_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosWindowManagement_ResizeBy_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosWindowManagement_ResizeBy_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  CrosWindowManagementStatus p_value{};
  CrosWindowManagement_ResizeBy_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosWindowManagement::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void CrosWindowManagement_ResizeBy_ProxyToResponder::Run(
    CrosWindowManagementStatus in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosWindowManagement::ResizeBy", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type CrosWindowManagementStatus>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_ResizeBy_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_ResizeBy_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CrosWindowManagementStatus>(
      in_value, &params->value);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("ResizeBy");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CrosWindowManagement_SetFullscreen_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosWindowManagement::SetFullscreenCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosWindowManagement_SetFullscreen_ProxyToResponder> proxy(
        new CrosWindowManagement_SetFullscreen_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosWindowManagement_SetFullscreen_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosWindowManagement_SetFullscreen_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosWindowManagement_SetFullscreen_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosWindowManagement::SetFullscreenCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      CrosWindowManagementStatus in_value);
};

bool CrosWindowManagement_SetFullscreen_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosWindowManagement_SetFullscreen_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosWindowManagement_SetFullscreen_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  CrosWindowManagementStatus p_value{};
  CrosWindowManagement_SetFullscreen_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosWindowManagement::Name_, 5, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void CrosWindowManagement_SetFullscreen_ProxyToResponder::Run(
    CrosWindowManagementStatus in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosWindowManagement::SetFullscreen", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type CrosWindowManagementStatus>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_SetFullscreen_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_SetFullscreen_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CrosWindowManagementStatus>(
      in_value, &params->value);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("SetFullscreen");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CrosWindowManagement_Maximize_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosWindowManagement::MaximizeCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosWindowManagement_Maximize_ProxyToResponder> proxy(
        new CrosWindowManagement_Maximize_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosWindowManagement_Maximize_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosWindowManagement_Maximize_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosWindowManagement_Maximize_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosWindowManagement::MaximizeCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      CrosWindowManagementStatus in_value);
};

bool CrosWindowManagement_Maximize_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosWindowManagement_Maximize_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosWindowManagement_Maximize_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  CrosWindowManagementStatus p_value{};
  CrosWindowManagement_Maximize_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosWindowManagement::Name_, 6, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void CrosWindowManagement_Maximize_ProxyToResponder::Run(
    CrosWindowManagementStatus in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosWindowManagement::Maximize", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type CrosWindowManagementStatus>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_Maximize_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_Maximize_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CrosWindowManagementStatus>(
      in_value, &params->value);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("Maximize");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CrosWindowManagement_Minimize_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosWindowManagement::MinimizeCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosWindowManagement_Minimize_ProxyToResponder> proxy(
        new CrosWindowManagement_Minimize_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosWindowManagement_Minimize_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosWindowManagement_Minimize_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosWindowManagement_Minimize_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosWindowManagement::MinimizeCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      CrosWindowManagementStatus in_value);
};

bool CrosWindowManagement_Minimize_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosWindowManagement_Minimize_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosWindowManagement_Minimize_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  CrosWindowManagementStatus p_value{};
  CrosWindowManagement_Minimize_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosWindowManagement::Name_, 7, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void CrosWindowManagement_Minimize_ProxyToResponder::Run(
    CrosWindowManagementStatus in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosWindowManagement::Minimize", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type CrosWindowManagementStatus>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_Minimize_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_Minimize_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CrosWindowManagementStatus>(
      in_value, &params->value);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("Minimize");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CrosWindowManagement_Focus_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosWindowManagement::FocusCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosWindowManagement_Focus_ProxyToResponder> proxy(
        new CrosWindowManagement_Focus_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosWindowManagement_Focus_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosWindowManagement_Focus_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosWindowManagement_Focus_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosWindowManagement::FocusCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      CrosWindowManagementStatus in_value);
};

bool CrosWindowManagement_Focus_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosWindowManagement_Focus_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosWindowManagement_Focus_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  CrosWindowManagementStatus p_value{};
  CrosWindowManagement_Focus_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosWindowManagement::Name_, 8, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void CrosWindowManagement_Focus_ProxyToResponder::Run(
    CrosWindowManagementStatus in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosWindowManagement::Focus", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type CrosWindowManagementStatus>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_Focus_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_Focus_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CrosWindowManagementStatus>(
      in_value, &params->value);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("Focus");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CrosWindowManagement_Close_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosWindowManagement::CloseCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosWindowManagement_Close_ProxyToResponder> proxy(
        new CrosWindowManagement_Close_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosWindowManagement_Close_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosWindowManagement_Close_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosWindowManagement_Close_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosWindowManagement::CloseCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      CrosWindowManagementStatus in_value);
};

bool CrosWindowManagement_Close_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosWindowManagement_Close_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosWindowManagement_Close_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  CrosWindowManagementStatus p_value{};
  CrosWindowManagement_Close_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosWindowManagement::Name_, 9, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void CrosWindowManagement_Close_ProxyToResponder::Run(
    CrosWindowManagementStatus in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosWindowManagement::Close", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type CrosWindowManagementStatus>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_Close_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_Close_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CrosWindowManagementStatus>(
      in_value, &params->value);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("Close");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CrosWindowManagement_GetAllScreens_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosWindowManagement::GetAllScreensCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosWindowManagement_GetAllScreens_ProxyToResponder> proxy(
        new CrosWindowManagement_GetAllScreens_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosWindowManagement_GetAllScreens_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosWindowManagement_GetAllScreens_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosWindowManagement_GetAllScreens_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosWindowManagement::GetAllScreensCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      WTF::Vector<CrosScreenInfoPtr> in_screens);
};

bool CrosWindowManagement_GetAllScreens_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosWindowManagement_GetAllScreens_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosWindowManagement_GetAllScreens_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  WTF::Vector<CrosScreenInfoPtr> p_screens{};
  CrosWindowManagement_GetAllScreens_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadScreens(&p_screens))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosWindowManagement::Name_, 10, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_screens));
  return true;
}

void CrosWindowManagement_GetAllScreens_ProxyToResponder::Run(
    WTF::Vector<CrosScreenInfoPtr> in_screens) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosWindowManagement::GetAllScreens", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("screens"), in_screens,
                        "<value of type WTF::Vector<CrosScreenInfoPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagement_GetAllScreens_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagement_GetAllScreens_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->screens)::BaseType>
      screens_fragment(params.message());
  const mojo::internal::ContainerValidateParams screens_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::CrosScreenInfoDataView>>(
      in_screens, screens_fragment, &screens_validate_params);
  params->screens.Set(
      screens_fragment.is_null() ? nullptr : screens_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->screens.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null screens in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagement::Name_);
  message.set_method_name("GetAllScreens");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool CrosWindowManagementStubDispatch::Accept(
    CrosWindowManagement* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kCrosWindowManagement_GetAllWindows_Name: {
      break;
    }
    case internal::kCrosWindowManagement_MoveTo_Name: {
      break;
    }
    case internal::kCrosWindowManagement_MoveBy_Name: {
      break;
    }
    case internal::kCrosWindowManagement_ResizeTo_Name: {
      break;
    }
    case internal::kCrosWindowManagement_ResizeBy_Name: {
      break;
    }
    case internal::kCrosWindowManagement_SetFullscreen_Name: {
      break;
    }
    case internal::kCrosWindowManagement_Maximize_Name: {
      break;
    }
    case internal::kCrosWindowManagement_Minimize_Name: {
      break;
    }
    case internal::kCrosWindowManagement_Focus_Name: {
      break;
    }
    case internal::kCrosWindowManagement_Close_Name: {
      break;
    }
    case internal::kCrosWindowManagement_GetAllScreens_Name: {
      break;
    }
  }
  return false;
}

// static
bool CrosWindowManagementStubDispatch::AcceptWithResponder(
    CrosWindowManagement* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kCrosWindowManagement_GetAllWindows_Name: {

      internal::CrosWindowManagement_GetAllWindows_Params_Data* params =
          reinterpret_cast<
              internal::CrosWindowManagement_GetAllWindows_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      CrosWindowManagement_GetAllWindows_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagement::Name_, 0, false);
        return false;
      }
      CrosWindowManagement::GetAllWindowsCallback callback =
          CrosWindowManagement_GetAllWindows_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetAllWindows(std::move(callback));
      return true;
    }
    case internal::kCrosWindowManagement_MoveTo_Name: {

      internal::CrosWindowManagement_MoveTo_Params_Data* params =
          reinterpret_cast<
              internal::CrosWindowManagement_MoveTo_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::base::UnguessableToken p_id{};
      int32_t p_x{};
      int32_t p_y{};
      CrosWindowManagement_MoveTo_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadId(&p_id))
        success = false;
      if (success)
        p_x = input_data_view.x();
      if (success)
        p_y = input_data_view.y();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagement::Name_, 1, false);
        return false;
      }
      CrosWindowManagement::MoveToCallback callback =
          CrosWindowManagement_MoveTo_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->MoveTo(
std::move(p_id), 
std::move(p_x), 
std::move(p_y), std::move(callback));
      return true;
    }
    case internal::kCrosWindowManagement_MoveBy_Name: {

      internal::CrosWindowManagement_MoveBy_Params_Data* params =
          reinterpret_cast<
              internal::CrosWindowManagement_MoveBy_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::base::UnguessableToken p_id{};
      int32_t p_delta_x{};
      int32_t p_delta_y{};
      CrosWindowManagement_MoveBy_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadId(&p_id))
        success = false;
      if (success)
        p_delta_x = input_data_view.delta_x();
      if (success)
        p_delta_y = input_data_view.delta_y();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagement::Name_, 2, false);
        return false;
      }
      CrosWindowManagement::MoveByCallback callback =
          CrosWindowManagement_MoveBy_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->MoveBy(
std::move(p_id), 
std::move(p_delta_x), 
std::move(p_delta_y), std::move(callback));
      return true;
    }
    case internal::kCrosWindowManagement_ResizeTo_Name: {

      internal::CrosWindowManagement_ResizeTo_Params_Data* params =
          reinterpret_cast<
              internal::CrosWindowManagement_ResizeTo_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::base::UnguessableToken p_id{};
      int32_t p_width{};
      int32_t p_height{};
      CrosWindowManagement_ResizeTo_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadId(&p_id))
        success = false;
      if (success)
        p_width = input_data_view.width();
      if (success)
        p_height = input_data_view.height();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagement::Name_, 3, false);
        return false;
      }
      CrosWindowManagement::ResizeToCallback callback =
          CrosWindowManagement_ResizeTo_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ResizeTo(
std::move(p_id), 
std::move(p_width), 
std::move(p_height), std::move(callback));
      return true;
    }
    case internal::kCrosWindowManagement_ResizeBy_Name: {

      internal::CrosWindowManagement_ResizeBy_Params_Data* params =
          reinterpret_cast<
              internal::CrosWindowManagement_ResizeBy_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::base::UnguessableToken p_id{};
      int32_t p_delta_width{};
      int32_t p_delta_height{};
      CrosWindowManagement_ResizeBy_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadId(&p_id))
        success = false;
      if (success)
        p_delta_width = input_data_view.delta_width();
      if (success)
        p_delta_height = input_data_view.delta_height();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagement::Name_, 4, false);
        return false;
      }
      CrosWindowManagement::ResizeByCallback callback =
          CrosWindowManagement_ResizeBy_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ResizeBy(
std::move(p_id), 
std::move(p_delta_width), 
std::move(p_delta_height), std::move(callback));
      return true;
    }
    case internal::kCrosWindowManagement_SetFullscreen_Name: {

      internal::CrosWindowManagement_SetFullscreen_Params_Data* params =
          reinterpret_cast<
              internal::CrosWindowManagement_SetFullscreen_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::base::UnguessableToken p_id{};
      bool p_fullscreen{};
      CrosWindowManagement_SetFullscreen_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadId(&p_id))
        success = false;
      if (success)
        p_fullscreen = input_data_view.fullscreen();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagement::Name_, 5, false);
        return false;
      }
      CrosWindowManagement::SetFullscreenCallback callback =
          CrosWindowManagement_SetFullscreen_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetFullscreen(
std::move(p_id), 
std::move(p_fullscreen), std::move(callback));
      return true;
    }
    case internal::kCrosWindowManagement_Maximize_Name: {

      internal::CrosWindowManagement_Maximize_Params_Data* params =
          reinterpret_cast<
              internal::CrosWindowManagement_Maximize_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::base::UnguessableToken p_id{};
      CrosWindowManagement_Maximize_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadId(&p_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagement::Name_, 6, false);
        return false;
      }
      CrosWindowManagement::MaximizeCallback callback =
          CrosWindowManagement_Maximize_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Maximize(
std::move(p_id), std::move(callback));
      return true;
    }
    case internal::kCrosWindowManagement_Minimize_Name: {

      internal::CrosWindowManagement_Minimize_Params_Data* params =
          reinterpret_cast<
              internal::CrosWindowManagement_Minimize_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::base::UnguessableToken p_id{};
      CrosWindowManagement_Minimize_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadId(&p_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagement::Name_, 7, false);
        return false;
      }
      CrosWindowManagement::MinimizeCallback callback =
          CrosWindowManagement_Minimize_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Minimize(
std::move(p_id), std::move(callback));
      return true;
    }
    case internal::kCrosWindowManagement_Focus_Name: {

      internal::CrosWindowManagement_Focus_Params_Data* params =
          reinterpret_cast<
              internal::CrosWindowManagement_Focus_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::base::UnguessableToken p_id{};
      CrosWindowManagement_Focus_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadId(&p_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagement::Name_, 8, false);
        return false;
      }
      CrosWindowManagement::FocusCallback callback =
          CrosWindowManagement_Focus_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Focus(
std::move(p_id), std::move(callback));
      return true;
    }
    case internal::kCrosWindowManagement_Close_Name: {

      internal::CrosWindowManagement_Close_Params_Data* params =
          reinterpret_cast<
              internal::CrosWindowManagement_Close_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::base::UnguessableToken p_id{};
      CrosWindowManagement_Close_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadId(&p_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagement::Name_, 9, false);
        return false;
      }
      CrosWindowManagement::CloseCallback callback =
          CrosWindowManagement_Close_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Close(
std::move(p_id), std::move(callback));
      return true;
    }
    case internal::kCrosWindowManagement_GetAllScreens_Name: {

      internal::CrosWindowManagement_GetAllScreens_Params_Data* params =
          reinterpret_cast<
              internal::CrosWindowManagement_GetAllScreens_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      CrosWindowManagement_GetAllScreens_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagement::Name_, 10, false);
        return false;
      }
      CrosWindowManagement::GetAllScreensCallback callback =
          CrosWindowManagement_GetAllScreens_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetAllScreens(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kCrosWindowManagementValidationInfo[] = {
    {&internal::CrosWindowManagement_GetAllWindows_Params_Data::Validate,
     &internal::CrosWindowManagement_GetAllWindows_ResponseParams_Data::Validate},
    {&internal::CrosWindowManagement_MoveTo_Params_Data::Validate,
     &internal::CrosWindowManagement_MoveTo_ResponseParams_Data::Validate},
    {&internal::CrosWindowManagement_MoveBy_Params_Data::Validate,
     &internal::CrosWindowManagement_MoveBy_ResponseParams_Data::Validate},
    {&internal::CrosWindowManagement_ResizeTo_Params_Data::Validate,
     &internal::CrosWindowManagement_ResizeTo_ResponseParams_Data::Validate},
    {&internal::CrosWindowManagement_ResizeBy_Params_Data::Validate,
     &internal::CrosWindowManagement_ResizeBy_ResponseParams_Data::Validate},
    {&internal::CrosWindowManagement_SetFullscreen_Params_Data::Validate,
     &internal::CrosWindowManagement_SetFullscreen_ResponseParams_Data::Validate},
    {&internal::CrosWindowManagement_Maximize_Params_Data::Validate,
     &internal::CrosWindowManagement_Maximize_ResponseParams_Data::Validate},
    {&internal::CrosWindowManagement_Minimize_Params_Data::Validate,
     &internal::CrosWindowManagement_Minimize_ResponseParams_Data::Validate},
    {&internal::CrosWindowManagement_Focus_Params_Data::Validate,
     &internal::CrosWindowManagement_Focus_ResponseParams_Data::Validate},
    {&internal::CrosWindowManagement_Close_Params_Data::Validate,
     &internal::CrosWindowManagement_Close_ResponseParams_Data::Validate},
    {&internal::CrosWindowManagement_GetAllScreens_Params_Data::Validate,
     &internal::CrosWindowManagement_GetAllScreens_ResponseParams_Data::Validate},
};

bool CrosWindowManagementRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::CrosWindowManagement::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kCrosWindowManagementValidationInfo);
}

bool CrosWindowManagementResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::CrosWindowManagement::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kCrosWindowManagementValidationInfo);
}
const char CrosWindowManagementStartObserver::Name_[] = "blink.mojom.CrosWindowManagementStartObserver";

CrosWindowManagementStartObserver::IPCStableHashFunction CrosWindowManagementStartObserver::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kCrosWindowManagementStartObserver_DispatchStartEvent_Name: {
      return &CrosWindowManagementStartObserver::DispatchStartEvent_Sym::IPCStableHash;
    }
    case internal::kCrosWindowManagementStartObserver_DispatchAcceleratorEvent_Name: {
      return &CrosWindowManagementStartObserver::DispatchAcceleratorEvent_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* CrosWindowManagementStartObserver::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kCrosWindowManagementStartObserver_DispatchStartEvent_Name:
            return "Receive blink::mojom::CrosWindowManagementStartObserver::DispatchStartEvent";
      case internal::kCrosWindowManagementStartObserver_DispatchAcceleratorEvent_Name:
            return "Receive blink::mojom::CrosWindowManagementStartObserver::DispatchAcceleratorEvent";
    }
  } else {
    switch (message.name()) {
      case internal::kCrosWindowManagementStartObserver_DispatchStartEvent_Name:
            return "Receive reply blink::mojom::CrosWindowManagementStartObserver::DispatchStartEvent";
      case internal::kCrosWindowManagementStartObserver_DispatchAcceleratorEvent_Name:
            return "Receive reply blink::mojom::CrosWindowManagementStartObserver::DispatchAcceleratorEvent";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t CrosWindowManagementStartObserver::DispatchStartEvent_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagementStartObserver::DispatchStartEvent");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosWindowManagementStartObserver::DispatchAcceleratorEvent_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosWindowManagementStartObserver::DispatchAcceleratorEvent");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

CrosWindowManagementStartObserverProxy::CrosWindowManagementStartObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void CrosWindowManagementStartObserverProxy::DispatchStartEvent(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::CrosWindowManagementStartObserver::DispatchStartEvent");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagementStartObserver_DispatchStartEvent_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagementStartObserver::Name_);
  message.set_method_name("DispatchStartEvent");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void CrosWindowManagementStartObserverProxy::DispatchAcceleratorEvent(
    AcceleratorEventPtr in_event) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosWindowManagementStartObserver::DispatchAcceleratorEvent", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("event"), in_event,
                        "<value of type AcceleratorEventPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosWindowManagementStartObserver_DispatchAcceleratorEvent_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->event)::BaseType> event_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::AcceleratorEventDataView>(
      in_event, event_fragment);
  params->event.Set(
      event_fragment.is_null() ? nullptr : event_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->event.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null event in CrosWindowManagementStartObserver.DispatchAcceleratorEvent request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosWindowManagementStartObserver::Name_);
  message.set_method_name("DispatchAcceleratorEvent");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool CrosWindowManagementStartObserverStubDispatch::Accept(
    CrosWindowManagementStartObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kCrosWindowManagementStartObserver_DispatchStartEvent_Name: {

      DCHECK(message->is_serialized());
      internal::CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data* params =
          reinterpret_cast<internal::CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      CrosWindowManagementStartObserver_DispatchStartEvent_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagementStartObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DispatchStartEvent();
      return true;
    }
    case internal::kCrosWindowManagementStartObserver_DispatchAcceleratorEvent_Name: {

      DCHECK(message->is_serialized());
      internal::CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data* params =
          reinterpret_cast<internal::CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      AcceleratorEventPtr p_event{};
      CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadEvent(&p_event))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosWindowManagementStartObserver::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DispatchAcceleratorEvent(
std::move(p_event));
      return true;
    }
  }
  return false;
}

// static
bool CrosWindowManagementStartObserverStubDispatch::AcceptWithResponder(
    CrosWindowManagementStartObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kCrosWindowManagementStartObserver_DispatchStartEvent_Name: {
      break;
    }
    case internal::kCrosWindowManagementStartObserver_DispatchAcceleratorEvent_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kCrosWindowManagementStartObserverValidationInfo[] = {
    {&internal::CrosWindowManagementStartObserver_DispatchStartEvent_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params_Data::Validate,
     nullptr /* no response */},
};

bool CrosWindowManagementStartObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::CrosWindowManagementStartObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kCrosWindowManagementStartObserverValidationInfo);
}



}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::blink::CrosWindowInfo::DataView, ::blink::mojom::blink::CrosWindowInfoPtr>::Read(
    ::blink::mojom::blink::CrosWindowInfo::DataView input,
    ::blink::mojom::blink::CrosWindowInfoPtr* output) {
  bool success = true;
  ::blink::mojom::blink::CrosWindowInfoPtr result(::blink::mojom::blink::CrosWindowInfo::New());
  
      if (success && !input.ReadId(&result->id))
        success = false;
      if (success && !input.ReadAppId(&result->app_id))
        success = false;
      if (success && !input.ReadBounds(&result->bounds))
        success = false;
      if (success && !input.ReadTitle(&result->title))
        success = false;
      if (success && !input.ReadWindowState(&result->window_state))
        success = false;
      if (success)
        result->is_focused = input.is_focused();
      if (success && !input.ReadVisibilityState(&result->visibility_state))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::CrosScreenInfo::DataView, ::blink::mojom::blink::CrosScreenInfoPtr>::Read(
    ::blink::mojom::blink::CrosScreenInfo::DataView input,
    ::blink::mojom::blink::CrosScreenInfoPtr* output) {
  bool success = true;
  ::blink::mojom::blink::CrosScreenInfoPtr result(::blink::mojom::blink::CrosScreenInfo::New());
  
      if (success && !input.ReadWorkArea(&result->work_area))
        success = false;
      if (success && !input.ReadBounds(&result->bounds))
        success = false;
      if (success)
        result->is_primary = input.is_primary();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::AcceleratorEvent::DataView, ::blink::mojom::blink::AcceleratorEventPtr>::Read(
    ::blink::mojom::blink::AcceleratorEvent::DataView input,
    ::blink::mojom::blink::AcceleratorEventPtr* output) {
  bool success = true;
  ::blink::mojom::blink::AcceleratorEventPtr result(::blink::mojom::blink::AcceleratorEvent::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadAcceleratorName(&result->accelerator_name))
        success = false;
      if (success)
        result->repeat = input.repeat();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {


void CrosWindowManagementFactoryInterceptorForTesting::Create(::mojo::PendingAssociatedReceiver<CrosWindowManagement> receiver, ::mojo::PendingAssociatedRemote<CrosWindowManagementStartObserver> observer_remote) {
  GetForwardingInterface()->Create(std::move(receiver), std::move(observer_remote));
}
CrosWindowManagementFactoryAsyncWaiter::CrosWindowManagementFactoryAsyncWaiter(
    CrosWindowManagementFactory* proxy) : proxy_(proxy) {}

CrosWindowManagementFactoryAsyncWaiter::~CrosWindowManagementFactoryAsyncWaiter() = default;




void CrosWindowManagementInterceptorForTesting::GetAllWindows(GetAllWindowsCallback callback) {
  GetForwardingInterface()->GetAllWindows(std::move(callback));
}
void CrosWindowManagementInterceptorForTesting::MoveTo(const ::base::UnguessableToken& id, int32_t x, int32_t y, MoveToCallback callback) {
  GetForwardingInterface()->MoveTo(std::move(id), std::move(x), std::move(y), std::move(callback));
}
void CrosWindowManagementInterceptorForTesting::MoveBy(const ::base::UnguessableToken& id, int32_t delta_x, int32_t delta_y, MoveByCallback callback) {
  GetForwardingInterface()->MoveBy(std::move(id), std::move(delta_x), std::move(delta_y), std::move(callback));
}
void CrosWindowManagementInterceptorForTesting::ResizeTo(const ::base::UnguessableToken& id, int32_t width, int32_t height, ResizeToCallback callback) {
  GetForwardingInterface()->ResizeTo(std::move(id), std::move(width), std::move(height), std::move(callback));
}
void CrosWindowManagementInterceptorForTesting::ResizeBy(const ::base::UnguessableToken& id, int32_t delta_width, int32_t delta_height, ResizeByCallback callback) {
  GetForwardingInterface()->ResizeBy(std::move(id), std::move(delta_width), std::move(delta_height), std::move(callback));
}
void CrosWindowManagementInterceptorForTesting::SetFullscreen(const ::base::UnguessableToken& id, bool fullscreen, SetFullscreenCallback callback) {
  GetForwardingInterface()->SetFullscreen(std::move(id), std::move(fullscreen), std::move(callback));
}
void CrosWindowManagementInterceptorForTesting::Maximize(const ::base::UnguessableToken& id, MaximizeCallback callback) {
  GetForwardingInterface()->Maximize(std::move(id), std::move(callback));
}
void CrosWindowManagementInterceptorForTesting::Minimize(const ::base::UnguessableToken& id, MinimizeCallback callback) {
  GetForwardingInterface()->Minimize(std::move(id), std::move(callback));
}
void CrosWindowManagementInterceptorForTesting::Focus(const ::base::UnguessableToken& id, FocusCallback callback) {
  GetForwardingInterface()->Focus(std::move(id), std::move(callback));
}
void CrosWindowManagementInterceptorForTesting::Close(const ::base::UnguessableToken& id, CloseCallback callback) {
  GetForwardingInterface()->Close(std::move(id), std::move(callback));
}
void CrosWindowManagementInterceptorForTesting::GetAllScreens(GetAllScreensCallback callback) {
  GetForwardingInterface()->GetAllScreens(std::move(callback));
}
CrosWindowManagementAsyncWaiter::CrosWindowManagementAsyncWaiter(
    CrosWindowManagement* proxy) : proxy_(proxy) {}

CrosWindowManagementAsyncWaiter::~CrosWindowManagementAsyncWaiter() = default;

void CrosWindowManagementAsyncWaiter::GetAllWindows(
    WTF::Vector<CrosWindowInfoPtr>* out_result) {
  base::RunLoop loop;
  proxy_->GetAllWindows(
      base::BindOnce(
          [](base::RunLoop* loop,
             WTF::Vector<CrosWindowInfoPtr>* out_result
,
             WTF::Vector<CrosWindowInfoPtr> result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void CrosWindowManagementAsyncWaiter::MoveTo(
    const ::base::UnguessableToken& id, int32_t x, int32_t y, CrosWindowManagementStatus* out_value) {
  base::RunLoop loop;
  proxy_->MoveTo(std::move(id),std::move(x),std::move(y),
      base::BindOnce(
          [](base::RunLoop* loop,
             CrosWindowManagementStatus* out_value
,
             CrosWindowManagementStatus value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}
void CrosWindowManagementAsyncWaiter::MoveBy(
    const ::base::UnguessableToken& id, int32_t delta_x, int32_t delta_y, CrosWindowManagementStatus* out_value) {
  base::RunLoop loop;
  proxy_->MoveBy(std::move(id),std::move(delta_x),std::move(delta_y),
      base::BindOnce(
          [](base::RunLoop* loop,
             CrosWindowManagementStatus* out_value
,
             CrosWindowManagementStatus value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}
void CrosWindowManagementAsyncWaiter::ResizeTo(
    const ::base::UnguessableToken& id, int32_t width, int32_t height, CrosWindowManagementStatus* out_value) {
  base::RunLoop loop;
  proxy_->ResizeTo(std::move(id),std::move(width),std::move(height),
      base::BindOnce(
          [](base::RunLoop* loop,
             CrosWindowManagementStatus* out_value
,
             CrosWindowManagementStatus value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}
void CrosWindowManagementAsyncWaiter::ResizeBy(
    const ::base::UnguessableToken& id, int32_t delta_width, int32_t delta_height, CrosWindowManagementStatus* out_value) {
  base::RunLoop loop;
  proxy_->ResizeBy(std::move(id),std::move(delta_width),std::move(delta_height),
      base::BindOnce(
          [](base::RunLoop* loop,
             CrosWindowManagementStatus* out_value
,
             CrosWindowManagementStatus value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}
void CrosWindowManagementAsyncWaiter::SetFullscreen(
    const ::base::UnguessableToken& id, bool fullscreen, CrosWindowManagementStatus* out_value) {
  base::RunLoop loop;
  proxy_->SetFullscreen(std::move(id),std::move(fullscreen),
      base::BindOnce(
          [](base::RunLoop* loop,
             CrosWindowManagementStatus* out_value
,
             CrosWindowManagementStatus value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}
void CrosWindowManagementAsyncWaiter::Maximize(
    const ::base::UnguessableToken& id, CrosWindowManagementStatus* out_value) {
  base::RunLoop loop;
  proxy_->Maximize(std::move(id),
      base::BindOnce(
          [](base::RunLoop* loop,
             CrosWindowManagementStatus* out_value
,
             CrosWindowManagementStatus value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}
void CrosWindowManagementAsyncWaiter::Minimize(
    const ::base::UnguessableToken& id, CrosWindowManagementStatus* out_value) {
  base::RunLoop loop;
  proxy_->Minimize(std::move(id),
      base::BindOnce(
          [](base::RunLoop* loop,
             CrosWindowManagementStatus* out_value
,
             CrosWindowManagementStatus value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}
void CrosWindowManagementAsyncWaiter::Focus(
    const ::base::UnguessableToken& id, CrosWindowManagementStatus* out_value) {
  base::RunLoop loop;
  proxy_->Focus(std::move(id),
      base::BindOnce(
          [](base::RunLoop* loop,
             CrosWindowManagementStatus* out_value
,
             CrosWindowManagementStatus value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}
void CrosWindowManagementAsyncWaiter::Close(
    const ::base::UnguessableToken& id, CrosWindowManagementStatus* out_value) {
  base::RunLoop loop;
  proxy_->Close(std::move(id),
      base::BindOnce(
          [](base::RunLoop* loop,
             CrosWindowManagementStatus* out_value
,
             CrosWindowManagementStatus value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}
void CrosWindowManagementAsyncWaiter::GetAllScreens(
    WTF::Vector<CrosScreenInfoPtr>* out_screens) {
  base::RunLoop loop;
  proxy_->GetAllScreens(
      base::BindOnce(
          [](base::RunLoop* loop,
             WTF::Vector<CrosScreenInfoPtr>* out_screens
,
             WTF::Vector<CrosScreenInfoPtr> screens) {*out_screens = std::move(screens);
            loop->Quit();
          },
          &loop,
          out_screens));
  loop.Run();
}



void CrosWindowManagementStartObserverInterceptorForTesting::DispatchStartEvent() {
  GetForwardingInterface()->DispatchStartEvent();
}
void CrosWindowManagementStartObserverInterceptorForTesting::DispatchAcceleratorEvent(AcceleratorEventPtr event) {
  GetForwardingInterface()->DispatchAcceleratorEvent(std::move(event));
}
CrosWindowManagementStartObserverAsyncWaiter::CrosWindowManagementStartObserverAsyncWaiter(
    CrosWindowManagementStartObserver* proxy) : proxy_(proxy) {}

CrosWindowManagementStartObserverAsyncWaiter::~CrosWindowManagementStartObserverAsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif