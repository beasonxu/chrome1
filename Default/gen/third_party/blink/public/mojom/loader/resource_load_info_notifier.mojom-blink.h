// third_party/blink/public/mojom/loader/resource_load_info_notifier.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_RESOURCE_LOAD_INFO_NOTIFIER_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_RESOURCE_LOAD_INFO_NOTIFIER_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/loader/resource_load_info_notifier.mojom-shared.h"
#include "third_party/blink/public/mojom/loader/resource_load_info_notifier.mojom-blink-forward.h"
#include "services/network/public/mojom/fetch_api.mojom-blink-forward.h"
#include "services/network/public/mojom/url_loader.mojom-blink-forward.h"
#include "services/network/public/mojom/url_loader_completion_status.mojom-blink.h"
#include "services/network/public/mojom/url_request.mojom-blink-forward.h"
#include "services/network/public/mojom/url_response_head.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/loader/resource_load_info.mojom-blink-forward.h"
#include "url/mojom/scheme_host_port.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace blink {
namespace mojom {
namespace blink {

class ResourceLoadInfoNotifierProxy;

template <typename ImplRefTraits>
class ResourceLoadInfoNotifierStub;

class ResourceLoadInfoNotifierRequestValidator;


class PLATFORM_EXPORT ResourceLoadInfoNotifier
    : public ResourceLoadInfoNotifierInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = ResourceLoadInfoNotifierInterfaceBase;
  using Proxy_ = ResourceLoadInfoNotifierProxy;

  template <typename ImplRefTraits>
  using Stub_ = ResourceLoadInfoNotifierStub<ImplRefTraits>;

  using RequestValidator_ = ResourceLoadInfoNotifierRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kNotifyUpdateUserGestureCarryoverInfoMinVersion = 0,
    kNotifyResourceRedirectReceivedMinVersion = 0,
    kNotifyResourceResponseReceivedMinVersion = 0,
    kNotifyResourceTransferSizeUpdatedMinVersion = 0,
    kNotifyResourceLoadCompletedMinVersion = 0,
    kNotifyResourceLoadCanceledMinVersion = 0,
    kCloneMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct NotifyUpdateUserGestureCarryoverInfo_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct NotifyResourceRedirectReceived_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct NotifyResourceResponseReceived_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct NotifyResourceTransferSizeUpdated_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct NotifyResourceLoadCompleted_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct NotifyResourceLoadCanceled_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Clone_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~ResourceLoadInfoNotifier() = default;

  
  virtual void NotifyUpdateUserGestureCarryoverInfo() = 0;

  
  virtual void NotifyResourceRedirectReceived(::network::mojom::blink::URLRequestRedirectInfoPtr redirect_info, ::network::mojom::blink::URLResponseHeadPtr redirect_response) = 0;

  
  virtual void NotifyResourceResponseReceived(int64_t request_id, ::url::mojom::blink::SchemeHostPortPtr final_response_url, ::network::mojom::blink::URLResponseHeadPtr head, ::network::mojom::blink::RequestDestination request_destination) = 0;

  
  virtual void NotifyResourceTransferSizeUpdated(int64_t request_id, int32_t transfer_size_diff) = 0;

  
  virtual void NotifyResourceLoadCompleted(::blink::mojom::blink::ResourceLoadInfoPtr resource_load_info, const ::network::URLLoaderCompletionStatus& status) = 0;

  
  virtual void NotifyResourceLoadCanceled(int64_t request_id) = 0;

  
  virtual void Clone(::mojo::PendingReceiver<ResourceLoadInfoNotifier> pending_resource_load_info_notifier) = 0;
};



class PLATFORM_EXPORT ResourceLoadInfoNotifierProxy
    : public ResourceLoadInfoNotifier {
 public:
  using InterfaceType = ResourceLoadInfoNotifier;

  explicit ResourceLoadInfoNotifierProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void NotifyUpdateUserGestureCarryoverInfo() final;
  
  void NotifyResourceRedirectReceived(::network::mojom::blink::URLRequestRedirectInfoPtr redirect_info, ::network::mojom::blink::URLResponseHeadPtr redirect_response) final;
  
  void NotifyResourceResponseReceived(int64_t request_id, ::url::mojom::blink::SchemeHostPortPtr final_response_url, ::network::mojom::blink::URLResponseHeadPtr head, ::network::mojom::blink::RequestDestination request_destination) final;
  
  void NotifyResourceTransferSizeUpdated(int64_t request_id, int32_t transfer_size_diff) final;
  
  void NotifyResourceLoadCompleted(::blink::mojom::blink::ResourceLoadInfoPtr resource_load_info, const ::network::URLLoaderCompletionStatus& status) final;
  
  void NotifyResourceLoadCanceled(int64_t request_id) final;
  
  void Clone(::mojo::PendingReceiver<ResourceLoadInfoNotifier> pending_resource_load_info_notifier) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT ResourceLoadInfoNotifierStubDispatch {
 public:
  static bool Accept(ResourceLoadInfoNotifier* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      ResourceLoadInfoNotifier* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<ResourceLoadInfoNotifier>>
class ResourceLoadInfoNotifierStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ResourceLoadInfoNotifierStub() = default;
  ~ResourceLoadInfoNotifierStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ResourceLoadInfoNotifierStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ResourceLoadInfoNotifierStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT ResourceLoadInfoNotifierRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_RESOURCE_LOAD_INFO_NOTIFIER_MOJOM_BLINK_H_