// third_party/blink/public/mojom/loader/resource_load_info.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_RESOURCE_LOAD_INFO_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_RESOURCE_LOAD_INFO_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/loader/resource_load_info.mojom-shared-internal.h"
#include "services/network/public/mojom/fetch_api.mojom-shared.h"
#include "services/network/public/mojom/ip_address.mojom-shared.h"
#include "services/network/public/mojom/ip_endpoint.mojom-shared.h"
#include "services/network/public/mojom/load_timing_info.mojom-shared.h"
#include "services/network/public/mojom/network_param.mojom-shared.h"
#include "services/network/public/mojom/request_priority.mojom-shared.h"
#include "url/mojom/origin.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {
class CommonNetworkInfoDataView;

class RedirectInfoDataView;

class ResourceLoadInfoDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::CommonNetworkInfoDataView> {
  using Data = ::blink::mojom::internal::CommonNetworkInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::RedirectInfoDataView> {
  using Data = ::blink::mojom::internal::RedirectInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::ResourceLoadInfoDataView> {
  using Data = ::blink::mojom::internal::ResourceLoadInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class ResourceType : int32_t {
  
  kMainFrame = 0,
  
  kSubFrame = 1,
  
  kStylesheet = 2,
  
  kScript = 3,
  
  kImage = 4,
  
  kFontResource = 5,
  
  kSubResource = 6,
  
  kObject = 7,
  
  kMedia = 8,
  
  kWorker = 9,
  
  kSharedWorker = 10,
  
  kPrefetch = 11,
  
  kFavicon = 12,
  
  kXhr = 13,
  
  kPing = 14,
  
  kServiceWorker = 15,
  
  kCspReport = 16,
  
  kPluginResource = 17,
  
  kNavigationPreloadMainFrame = 19,
  
  kNavigationPreloadSubFrame = 20,
  kMinValue = 0,
  kMaxValue = 20,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, ResourceType value);
inline bool IsKnownEnumValue(ResourceType value) {
  return internal::ResourceType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class CommonNetworkInfoDataView {
 public:
  CommonNetworkInfoDataView() = default;

  CommonNetworkInfoDataView(
      internal::CommonNetworkInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool network_accessed() const {
    return data_->network_accessed;
  }
  bool always_access_network() const {
    return data_->always_access_network;
  }
  inline void GetRemoteEndpointDataView(
      ::network::mojom::IPEndPointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRemoteEndpoint(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::IPEndPointDataView, UserType>(),
    "Attempting to read the optional `remote_endpoint` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadRemoteEndpoint` instead "
    "of `ReadRemoteEndpoint if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->remote_endpoint.Get();
    return mojo::internal::Deserialize<::network::mojom::IPEndPointDataView>(
        pointer, output, message_);
  }
 private:
  internal::CommonNetworkInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RedirectInfoDataView {
 public:
  RedirectInfoDataView() = default;

  RedirectInfoDataView(
      internal::RedirectInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOriginOfNewUrlDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOriginOfNewUrl(UserType* output) {
    
    auto* pointer = data_->origin_of_new_url.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetNetworkInfoDataView(
      CommonNetworkInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkInfo(UserType* output) {
    
    auto* pointer = data_->network_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::CommonNetworkInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::RedirectInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ResourceLoadInfoDataView {
 public:
  ResourceLoadInfoDataView() = default;

  ResourceLoadInfoDataView(
      internal::ResourceLoadInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t request_id() const {
    return data_->request_id;
  }
  inline void GetFinalUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFinalUrl(UserType* output) {
    
    auto* pointer = data_->final_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetReferrerDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReferrer(UserType* output) {
    
    auto* pointer = data_->referrer.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetOriginalUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOriginalUrl(UserType* output) {
    
    auto* pointer = data_->original_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetMethodDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMethod(UserType* output) {
    
    auto* pointer = data_->method.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadRequestDestination(UserType* output) const {
    auto data_value = data_->request_destination;
    return mojo::internal::Deserialize<::network::mojom::RequestDestination>(
        data_value, output);
  }
  ::network::mojom::RequestDestination request_destination() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::RequestDestination>(data_->request_destination));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadRequestPriority(UserType* output) const {
    auto data_value = data_->request_priority;
    return mojo::internal::Deserialize<::network::mojom::RequestPriority>(
        data_value, output);
  }
  ::network::mojom::RequestPriority request_priority() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::RequestPriority>(data_->request_priority));
  }
  inline void GetMimeTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMimeType(UserType* output) {
    
    auto* pointer = data_->mime_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool was_cached() const {
    return data_->was_cached;
  }
  bool was_in_network_service_memory_cache() const {
    return data_->was_in_network_service_memory_cache;
  }
  inline void GetNetworkInfoDataView(
      CommonNetworkInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkInfo(UserType* output) {
    
    auto* pointer = data_->network_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::CommonNetworkInfoDataView>(
        pointer, output, message_);
  }
  int32_t net_error() const {
    return data_->net_error;
  }
  inline void GetLoadTimingInfoDataView(
      ::network::mojom::LoadTimingInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLoadTimingInfo(UserType* output) {
    
    auto* pointer = data_->load_timing_info.Get();
    return mojo::internal::Deserialize<::network::mojom::LoadTimingInfoDataView>(
        pointer, output, message_);
  }
  int64_t raw_body_bytes() const {
    return data_->raw_body_bytes;
  }
  int64_t total_received_bytes() const {
    return data_->total_received_bytes;
  }
  inline void GetRedirectInfoChainDataView(
      mojo::ArrayDataView<RedirectInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRedirectInfoChain(UserType* output) {
    
    auto* pointer = data_->redirect_info_chain.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::RedirectInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ResourceLoadInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::ResourceType>
    : public mojo::internal::EnumHashImpl<::blink::mojom::ResourceType> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ResourceType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::ResourceType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::ResourceType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::CommonNetworkInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::CommonNetworkInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::CommonNetworkInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->network_accessed = Traits::network_accessed(input);
    fragment->always_access_network = Traits::always_access_network(input);
    decltype(Traits::remote_endpoint(input)) in_remote_endpoint = Traits::remote_endpoint(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->remote_endpoint)::BaseType> remote_endpoint_fragment(
            fragment.message());
    mojo::internal::Serialize<::network::mojom::IPEndPointDataView>(
        in_remote_endpoint, remote_endpoint_fragment);
    fragment->remote_endpoint.Set(
        remote_endpoint_fragment.is_null() ? nullptr : remote_endpoint_fragment.data());
  }

  static bool Deserialize(::blink::mojom::internal::CommonNetworkInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::CommonNetworkInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::RedirectInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::RedirectInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::RedirectInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::origin_of_new_url(input)) in_origin_of_new_url = Traits::origin_of_new_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->origin_of_new_url)::BaseType> origin_of_new_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::OriginDataView>(
        in_origin_of_new_url, origin_of_new_url_fragment);
    fragment->origin_of_new_url.Set(
        origin_of_new_url_fragment.is_null() ? nullptr : origin_of_new_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->origin_of_new_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null origin_of_new_url in RedirectInfo struct");
    decltype(Traits::network_info(input)) in_network_info = Traits::network_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->network_info)::BaseType> network_info_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::CommonNetworkInfoDataView>(
        in_network_info, network_info_fragment);
    fragment->network_info.Set(
        network_info_fragment.is_null() ? nullptr : network_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->network_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null network_info in RedirectInfo struct");
  }

  static bool Deserialize(::blink::mojom::internal::RedirectInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::RedirectInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ResourceLoadInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::ResourceLoadInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::ResourceLoadInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->request_id = Traits::request_id(input);
    decltype(Traits::final_url(input)) in_final_url = Traits::final_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->final_url)::BaseType> final_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_final_url, final_url_fragment);
    fragment->final_url.Set(
        final_url_fragment.is_null() ? nullptr : final_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->final_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null final_url in ResourceLoadInfo struct");
    decltype(Traits::referrer(input)) in_referrer = Traits::referrer(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->referrer)::BaseType> referrer_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_referrer, referrer_fragment);
    fragment->referrer.Set(
        referrer_fragment.is_null() ? nullptr : referrer_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->referrer.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null referrer in ResourceLoadInfo struct");
    decltype(Traits::original_url(input)) in_original_url = Traits::original_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->original_url)::BaseType> original_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_original_url, original_url_fragment);
    fragment->original_url.Set(
        original_url_fragment.is_null() ? nullptr : original_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->original_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null original_url in ResourceLoadInfo struct");
    decltype(Traits::method(input)) in_method = Traits::method(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->method)::BaseType> method_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_method, method_fragment);
    fragment->method.Set(
        method_fragment.is_null() ? nullptr : method_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->method.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null method in ResourceLoadInfo struct");
    mojo::internal::Serialize<::network::mojom::RequestDestination>(
        Traits::request_destination(input), &fragment->request_destination);
    mojo::internal::Serialize<::network::mojom::RequestPriority>(
        Traits::request_priority(input), &fragment->request_priority);
    decltype(Traits::mime_type(input)) in_mime_type = Traits::mime_type(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->mime_type)::BaseType> mime_type_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_mime_type, mime_type_fragment);
    fragment->mime_type.Set(
        mime_type_fragment.is_null() ? nullptr : mime_type_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->mime_type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null mime_type in ResourceLoadInfo struct");
    fragment->was_cached = Traits::was_cached(input);
    fragment->was_in_network_service_memory_cache = Traits::was_in_network_service_memory_cache(input);
    decltype(Traits::network_info(input)) in_network_info = Traits::network_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->network_info)::BaseType> network_info_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::CommonNetworkInfoDataView>(
        in_network_info, network_info_fragment);
    fragment->network_info.Set(
        network_info_fragment.is_null() ? nullptr : network_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->network_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null network_info in ResourceLoadInfo struct");
    fragment->net_error = Traits::net_error(input);
    decltype(Traits::load_timing_info(input)) in_load_timing_info = Traits::load_timing_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->load_timing_info)::BaseType> load_timing_info_fragment(
            fragment.message());
    mojo::internal::Serialize<::network::mojom::LoadTimingInfoDataView>(
        in_load_timing_info, load_timing_info_fragment);
    fragment->load_timing_info.Set(
        load_timing_info_fragment.is_null() ? nullptr : load_timing_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->load_timing_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null load_timing_info in ResourceLoadInfo struct");
    fragment->raw_body_bytes = Traits::raw_body_bytes(input);
    fragment->total_received_bytes = Traits::total_received_bytes(input);
    decltype(Traits::redirect_info_chain(input)) in_redirect_info_chain = Traits::redirect_info_chain(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->redirect_info_chain)::BaseType>
        redirect_info_chain_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams redirect_info_chain_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::RedirectInfoDataView>>(
        in_redirect_info_chain, redirect_info_chain_fragment, &redirect_info_chain_validate_params);
    fragment->redirect_info_chain.Set(
        redirect_info_chain_fragment.is_null() ? nullptr : redirect_info_chain_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->redirect_info_chain.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null redirect_info_chain in ResourceLoadInfo struct");
  }

  static bool Deserialize(::blink::mojom::internal::ResourceLoadInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::ResourceLoadInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void CommonNetworkInfoDataView::GetRemoteEndpointDataView(
    ::network::mojom::IPEndPointDataView* output) {
  auto pointer = data_->remote_endpoint.Get();
  *output = ::network::mojom::IPEndPointDataView(pointer, message_);
}


inline void RedirectInfoDataView::GetOriginOfNewUrlDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin_of_new_url.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void RedirectInfoDataView::GetNetworkInfoDataView(
    CommonNetworkInfoDataView* output) {
  auto pointer = data_->network_info.Get();
  *output = CommonNetworkInfoDataView(pointer, message_);
}


inline void ResourceLoadInfoDataView::GetFinalUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->final_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ResourceLoadInfoDataView::GetReferrerDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->referrer.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ResourceLoadInfoDataView::GetOriginalUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->original_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ResourceLoadInfoDataView::GetMethodDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->method.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ResourceLoadInfoDataView::GetMimeTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->mime_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ResourceLoadInfoDataView::GetNetworkInfoDataView(
    CommonNetworkInfoDataView* output) {
  auto pointer = data_->network_info.Get();
  *output = CommonNetworkInfoDataView(pointer, message_);
}
inline void ResourceLoadInfoDataView::GetLoadTimingInfoDataView(
    ::network::mojom::LoadTimingInfoDataView* output) {
  auto pointer = data_->load_timing_info.Get();
  *output = ::network::mojom::LoadTimingInfoDataView(pointer, message_);
}
inline void ResourceLoadInfoDataView::GetRedirectInfoChainDataView(
    mojo::ArrayDataView<RedirectInfoDataView>* output) {
  auto pointer = data_->redirect_info_chain.Get();
  *output = mojo::ArrayDataView<RedirectInfoDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::ResourceType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::ResourceType value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_RESOURCE_LOAD_INFO_MOJOM_SHARED_H_