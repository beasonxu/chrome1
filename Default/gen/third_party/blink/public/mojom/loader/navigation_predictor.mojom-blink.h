// third_party/blink/public/mojom/loader/navigation_predictor.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_NAVIGATION_PREDICTOR_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_NAVIGATION_PREDICTOR_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/loader/navigation_predictor.mojom-shared.h"
#include "third_party/blink/public/mojom/loader/navigation_predictor.mojom-blink-forward.h"
#include "url/mojom/url.mojom-blink.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace blink {
namespace mojom {
namespace blink {

class AnchorElementMetricsHostProxy;

template <typename ImplRefTraits>
class AnchorElementMetricsHostStub;

class AnchorElementMetricsHostRequestValidator;


class PLATFORM_EXPORT AnchorElementMetricsHost
    : public AnchorElementMetricsHostInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = AnchorElementMetricsHostInterfaceBase;
  using Proxy_ = AnchorElementMetricsHostProxy;

  template <typename ImplRefTraits>
  using Stub_ = AnchorElementMetricsHostStub<ImplRefTraits>;

  using RequestValidator_ = AnchorElementMetricsHostRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kReportAnchorElementClickMinVersion = 0,
    kReportNewAnchorElementsMinVersion = 0,
    kReportAnchorElementsEnteredViewportMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct ReportAnchorElementClick_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ReportNewAnchorElements_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ReportAnchorElementsEnteredViewport_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~AnchorElementMetricsHost() = default;

  
  virtual void ReportAnchorElementClick(AnchorElementClickPtr clicked) = 0;

  
  virtual void ReportNewAnchorElements(WTF::Vector<AnchorElementMetricsPtr> metrics) = 0;

  
  virtual void ReportAnchorElementsEnteredViewport(WTF::Vector<AnchorElementEnteredViewportPtr> elements) = 0;
};



class PLATFORM_EXPORT AnchorElementMetricsHostProxy
    : public AnchorElementMetricsHost {
 public:
  using InterfaceType = AnchorElementMetricsHost;

  explicit AnchorElementMetricsHostProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void ReportAnchorElementClick(AnchorElementClickPtr clicked) final;
  
  void ReportNewAnchorElements(WTF::Vector<AnchorElementMetricsPtr> metrics) final;
  
  void ReportAnchorElementsEnteredViewport(WTF::Vector<AnchorElementEnteredViewportPtr> elements) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT AnchorElementMetricsHostStubDispatch {
 public:
  static bool Accept(AnchorElementMetricsHost* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AnchorElementMetricsHost* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AnchorElementMetricsHost>>
class AnchorElementMetricsHostStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AnchorElementMetricsHostStub() = default;
  ~AnchorElementMetricsHostStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AnchorElementMetricsHostStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AnchorElementMetricsHostStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT AnchorElementMetricsHostRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};







class PLATFORM_EXPORT AnchorElementEnteredViewport {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AnchorElementEnteredViewport, T>::value>;
  using DataView = AnchorElementEnteredViewportDataView;
  using Data_ = internal::AnchorElementEnteredViewport_Data;

  template <typename... Args>
  static AnchorElementEnteredViewportPtr New(Args&&... args) {
    return AnchorElementEnteredViewportPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AnchorElementEnteredViewportPtr From(const U& u) {
    return mojo::TypeConverter<AnchorElementEnteredViewportPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AnchorElementEnteredViewport>::Convert(*this);
  }


  AnchorElementEnteredViewport();

  AnchorElementEnteredViewport(
      uint32_t anchor_id,
      uint64_t navigation_start_to_entered_viewport_ms);


  ~AnchorElementEnteredViewport();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AnchorElementEnteredViewportPtr>
  AnchorElementEnteredViewportPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AnchorElementEnteredViewport::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AnchorElementEnteredViewport::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AnchorElementEnteredViewport::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AnchorElementEnteredViewport::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AnchorElementEnteredViewport_UnserializedMessageContext<
            UserType, AnchorElementEnteredViewport::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AnchorElementEnteredViewport::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return AnchorElementEnteredViewport::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AnchorElementEnteredViewport_UnserializedMessageContext<
            UserType, AnchorElementEnteredViewport::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AnchorElementEnteredViewport::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint32_t anchor_id;
  
  uint64_t navigation_start_to_entered_viewport_ms;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AnchorElementEnteredViewport::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AnchorElementEnteredViewport::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AnchorElementEnteredViewport::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AnchorElementEnteredViewport::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







class PLATFORM_EXPORT AnchorElementMetrics {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AnchorElementMetrics, T>::value>;
  using DataView = AnchorElementMetricsDataView;
  using Data_ = internal::AnchorElementMetrics_Data;

  template <typename... Args>
  static AnchorElementMetricsPtr New(Args&&... args) {
    return AnchorElementMetricsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AnchorElementMetricsPtr From(const U& u) {
    return mojo::TypeConverter<AnchorElementMetricsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AnchorElementMetrics>::Convert(*this);
  }


  AnchorElementMetrics();

  AnchorElementMetrics(
      uint32_t anchor_id,
      float ratio_area,
      float ratio_visible_area,
      float ratio_distance_top_to_visible_top,
      float ratio_distance_center_to_visible_top,
      float ratio_distance_root_top,
      float ratio_distance_root_bottom,
      bool is_in_iframe,
      bool contains_image,
      bool is_same_host,
      bool is_url_incremented_by_one,
      bool has_text_sibling,
      uint32_t font_size_px,
      uint32_t font_weight,
      const ::blink::KURL& source_url,
      const ::blink::KURL& target_url,
      const ::gfx::Size& viewport_size);


  ~AnchorElementMetrics();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AnchorElementMetricsPtr>
  AnchorElementMetricsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AnchorElementMetrics::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AnchorElementMetrics::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AnchorElementMetrics::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AnchorElementMetrics::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AnchorElementMetrics_UnserializedMessageContext<
            UserType, AnchorElementMetrics::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AnchorElementMetrics::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return AnchorElementMetrics::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AnchorElementMetrics_UnserializedMessageContext<
            UserType, AnchorElementMetrics::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AnchorElementMetrics::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint32_t anchor_id;
  
  float ratio_area;
  
  float ratio_visible_area;
  
  float ratio_distance_top_to_visible_top;
  
  float ratio_distance_center_to_visible_top;
  
  float ratio_distance_root_top;
  
  float ratio_distance_root_bottom;
  
  bool is_in_iframe;
  
  bool contains_image;
  
  bool is_same_host;
  
  bool is_url_incremented_by_one;
  
  bool has_text_sibling;
  
  uint32_t font_size_px;
  
  uint32_t font_weight;
  
  ::blink::KURL source_url;
  
  ::blink::KURL target_url;
  
  ::gfx::Size viewport_size;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AnchorElementMetrics::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AnchorElementMetrics::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AnchorElementMetrics::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AnchorElementMetrics::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class PLATFORM_EXPORT AnchorElementClick {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AnchorElementClick, T>::value>;
  using DataView = AnchorElementClickDataView;
  using Data_ = internal::AnchorElementClick_Data;

  template <typename... Args>
  static AnchorElementClickPtr New(Args&&... args) {
    return AnchorElementClickPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AnchorElementClickPtr From(const U& u) {
    return mojo::TypeConverter<AnchorElementClickPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AnchorElementClick>::Convert(*this);
  }


  AnchorElementClick();

  AnchorElementClick(
      uint32_t anchor_id,
      const ::blink::KURL& target_url);


  ~AnchorElementClick();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AnchorElementClickPtr>
  AnchorElementClickPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AnchorElementClick::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AnchorElementClick::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AnchorElementClick::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AnchorElementClick::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AnchorElementClick_UnserializedMessageContext<
            UserType, AnchorElementClick::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AnchorElementClick::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return AnchorElementClick::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AnchorElementClick_UnserializedMessageContext<
            UserType, AnchorElementClick::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AnchorElementClick::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint32_t anchor_id;
  
  ::blink::KURL target_url;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AnchorElementClick::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AnchorElementClick::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AnchorElementClick::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AnchorElementClick::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}


template <typename StructPtrType>
AnchorElementMetricsPtr AnchorElementMetrics::Clone() const {
  return New(
      mojo::Clone(anchor_id),
      mojo::Clone(ratio_area),
      mojo::Clone(ratio_visible_area),
      mojo::Clone(ratio_distance_top_to_visible_top),
      mojo::Clone(ratio_distance_center_to_visible_top),
      mojo::Clone(ratio_distance_root_top),
      mojo::Clone(ratio_distance_root_bottom),
      mojo::Clone(is_in_iframe),
      mojo::Clone(contains_image),
      mojo::Clone(is_same_host),
      mojo::Clone(is_url_incremented_by_one),
      mojo::Clone(has_text_sibling),
      mojo::Clone(font_size_px),
      mojo::Clone(font_weight),
      mojo::Clone(source_url),
      mojo::Clone(target_url),
      mojo::Clone(viewport_size)
  );
}

template <typename T, AnchorElementMetrics::EnableIfSame<T>*>
bool AnchorElementMetrics::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->anchor_id, other_struct.anchor_id))
    return false;
  if (!mojo::Equals(this->ratio_area, other_struct.ratio_area))
    return false;
  if (!mojo::Equals(this->ratio_visible_area, other_struct.ratio_visible_area))
    return false;
  if (!mojo::Equals(this->ratio_distance_top_to_visible_top, other_struct.ratio_distance_top_to_visible_top))
    return false;
  if (!mojo::Equals(this->ratio_distance_center_to_visible_top, other_struct.ratio_distance_center_to_visible_top))
    return false;
  if (!mojo::Equals(this->ratio_distance_root_top, other_struct.ratio_distance_root_top))
    return false;
  if (!mojo::Equals(this->ratio_distance_root_bottom, other_struct.ratio_distance_root_bottom))
    return false;
  if (!mojo::Equals(this->is_in_iframe, other_struct.is_in_iframe))
    return false;
  if (!mojo::Equals(this->contains_image, other_struct.contains_image))
    return false;
  if (!mojo::Equals(this->is_same_host, other_struct.is_same_host))
    return false;
  if (!mojo::Equals(this->is_url_incremented_by_one, other_struct.is_url_incremented_by_one))
    return false;
  if (!mojo::Equals(this->has_text_sibling, other_struct.has_text_sibling))
    return false;
  if (!mojo::Equals(this->font_size_px, other_struct.font_size_px))
    return false;
  if (!mojo::Equals(this->font_weight, other_struct.font_weight))
    return false;
  if (!mojo::Equals(this->source_url, other_struct.source_url))
    return false;
  if (!mojo::Equals(this->target_url, other_struct.target_url))
    return false;
  if (!mojo::Equals(this->viewport_size, other_struct.viewport_size))
    return false;
  return true;
}

template <typename T, AnchorElementMetrics::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.anchor_id < rhs.anchor_id)
    return true;
  if (rhs.anchor_id < lhs.anchor_id)
    return false;
  if (lhs.ratio_area < rhs.ratio_area)
    return true;
  if (rhs.ratio_area < lhs.ratio_area)
    return false;
  if (lhs.ratio_visible_area < rhs.ratio_visible_area)
    return true;
  if (rhs.ratio_visible_area < lhs.ratio_visible_area)
    return false;
  if (lhs.ratio_distance_top_to_visible_top < rhs.ratio_distance_top_to_visible_top)
    return true;
  if (rhs.ratio_distance_top_to_visible_top < lhs.ratio_distance_top_to_visible_top)
    return false;
  if (lhs.ratio_distance_center_to_visible_top < rhs.ratio_distance_center_to_visible_top)
    return true;
  if (rhs.ratio_distance_center_to_visible_top < lhs.ratio_distance_center_to_visible_top)
    return false;
  if (lhs.ratio_distance_root_top < rhs.ratio_distance_root_top)
    return true;
  if (rhs.ratio_distance_root_top < lhs.ratio_distance_root_top)
    return false;
  if (lhs.ratio_distance_root_bottom < rhs.ratio_distance_root_bottom)
    return true;
  if (rhs.ratio_distance_root_bottom < lhs.ratio_distance_root_bottom)
    return false;
  if (lhs.is_in_iframe < rhs.is_in_iframe)
    return true;
  if (rhs.is_in_iframe < lhs.is_in_iframe)
    return false;
  if (lhs.contains_image < rhs.contains_image)
    return true;
  if (rhs.contains_image < lhs.contains_image)
    return false;
  if (lhs.is_same_host < rhs.is_same_host)
    return true;
  if (rhs.is_same_host < lhs.is_same_host)
    return false;
  if (lhs.is_url_incremented_by_one < rhs.is_url_incremented_by_one)
    return true;
  if (rhs.is_url_incremented_by_one < lhs.is_url_incremented_by_one)
    return false;
  if (lhs.has_text_sibling < rhs.has_text_sibling)
    return true;
  if (rhs.has_text_sibling < lhs.has_text_sibling)
    return false;
  if (lhs.font_size_px < rhs.font_size_px)
    return true;
  if (rhs.font_size_px < lhs.font_size_px)
    return false;
  if (lhs.font_weight < rhs.font_weight)
    return true;
  if (rhs.font_weight < lhs.font_weight)
    return false;
  if (lhs.source_url < rhs.source_url)
    return true;
  if (rhs.source_url < lhs.source_url)
    return false;
  if (lhs.target_url < rhs.target_url)
    return true;
  if (rhs.target_url < lhs.target_url)
    return false;
  if (lhs.viewport_size < rhs.viewport_size)
    return true;
  if (rhs.viewport_size < lhs.viewport_size)
    return false;
  return false;
}
template <typename StructPtrType>
AnchorElementClickPtr AnchorElementClick::Clone() const {
  return New(
      mojo::Clone(anchor_id),
      mojo::Clone(target_url)
  );
}

template <typename T, AnchorElementClick::EnableIfSame<T>*>
bool AnchorElementClick::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->anchor_id, other_struct.anchor_id))
    return false;
  if (!mojo::Equals(this->target_url, other_struct.target_url))
    return false;
  return true;
}

template <typename T, AnchorElementClick::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.anchor_id < rhs.anchor_id)
    return true;
  if (rhs.anchor_id < lhs.anchor_id)
    return false;
  if (lhs.target_url < rhs.target_url)
    return true;
  if (rhs.target_url < lhs.target_url)
    return false;
  return false;
}
template <typename StructPtrType>
AnchorElementEnteredViewportPtr AnchorElementEnteredViewport::Clone() const {
  return New(
      mojo::Clone(anchor_id),
      mojo::Clone(navigation_start_to_entered_viewport_ms)
  );
}

template <typename T, AnchorElementEnteredViewport::EnableIfSame<T>*>
bool AnchorElementEnteredViewport::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->anchor_id, other_struct.anchor_id))
    return false;
  if (!mojo::Equals(this->navigation_start_to_entered_viewport_ms, other_struct.navigation_start_to_entered_viewport_ms))
    return false;
  return true;
}

template <typename T, AnchorElementEnteredViewport::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.anchor_id < rhs.anchor_id)
    return true;
  if (rhs.anchor_id < lhs.anchor_id)
    return false;
  if (lhs.navigation_start_to_entered_viewport_ms < rhs.navigation_start_to_entered_viewport_ms)
    return true;
  if (rhs.navigation_start_to_entered_viewport_ms < lhs.navigation_start_to_entered_viewport_ms)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::AnchorElementMetrics::DataView,
                                         ::blink::mojom::blink::AnchorElementMetricsPtr> {
  static bool IsNull(const ::blink::mojom::blink::AnchorElementMetricsPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::AnchorElementMetricsPtr* output) { output->reset(); }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::anchor_id) anchor_id(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->anchor_id;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::ratio_area) ratio_area(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->ratio_area;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::ratio_visible_area) ratio_visible_area(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->ratio_visible_area;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::ratio_distance_top_to_visible_top) ratio_distance_top_to_visible_top(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->ratio_distance_top_to_visible_top;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::ratio_distance_center_to_visible_top) ratio_distance_center_to_visible_top(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->ratio_distance_center_to_visible_top;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::ratio_distance_root_top) ratio_distance_root_top(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->ratio_distance_root_top;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::ratio_distance_root_bottom) ratio_distance_root_bottom(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->ratio_distance_root_bottom;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::is_in_iframe) is_in_iframe(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->is_in_iframe;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::contains_image) contains_image(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->contains_image;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::is_same_host) is_same_host(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->is_same_host;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::is_url_incremented_by_one) is_url_incremented_by_one(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->is_url_incremented_by_one;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::has_text_sibling) has_text_sibling(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->has_text_sibling;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::font_size_px) font_size_px(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->font_size_px;
  }

  static decltype(::blink::mojom::blink::AnchorElementMetrics::font_weight) font_weight(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->font_weight;
  }

  static const decltype(::blink::mojom::blink::AnchorElementMetrics::source_url)& source_url(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->source_url;
  }

  static const decltype(::blink::mojom::blink::AnchorElementMetrics::target_url)& target_url(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->target_url;
  }

  static const decltype(::blink::mojom::blink::AnchorElementMetrics::viewport_size)& viewport_size(
      const ::blink::mojom::blink::AnchorElementMetricsPtr& input) {
    return input->viewport_size;
  }

  static bool Read(::blink::mojom::blink::AnchorElementMetrics::DataView input, ::blink::mojom::blink::AnchorElementMetricsPtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::AnchorElementClick::DataView,
                                         ::blink::mojom::blink::AnchorElementClickPtr> {
  static bool IsNull(const ::blink::mojom::blink::AnchorElementClickPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::AnchorElementClickPtr* output) { output->reset(); }

  static decltype(::blink::mojom::blink::AnchorElementClick::anchor_id) anchor_id(
      const ::blink::mojom::blink::AnchorElementClickPtr& input) {
    return input->anchor_id;
  }

  static const decltype(::blink::mojom::blink::AnchorElementClick::target_url)& target_url(
      const ::blink::mojom::blink::AnchorElementClickPtr& input) {
    return input->target_url;
  }

  static bool Read(::blink::mojom::blink::AnchorElementClick::DataView input, ::blink::mojom::blink::AnchorElementClickPtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::AnchorElementEnteredViewport::DataView,
                                         ::blink::mojom::blink::AnchorElementEnteredViewportPtr> {
  static bool IsNull(const ::blink::mojom::blink::AnchorElementEnteredViewportPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::AnchorElementEnteredViewportPtr* output) { output->reset(); }

  static decltype(::blink::mojom::blink::AnchorElementEnteredViewport::anchor_id) anchor_id(
      const ::blink::mojom::blink::AnchorElementEnteredViewportPtr& input) {
    return input->anchor_id;
  }

  static decltype(::blink::mojom::blink::AnchorElementEnteredViewport::navigation_start_to_entered_viewport_ms) navigation_start_to_entered_viewport_ms(
      const ::blink::mojom::blink::AnchorElementEnteredViewportPtr& input) {
    return input->navigation_start_to_entered_viewport_ms;
  }

  static bool Read(::blink::mojom::blink::AnchorElementEnteredViewport::DataView input, ::blink::mojom::blink::AnchorElementEnteredViewportPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_NAVIGATION_PREDICTOR_MOJOM_BLINK_H_