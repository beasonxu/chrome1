// third_party/blink/public/mojom/render_accessibility.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_RENDER_ACCESSIBILITY_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_RENDER_ACCESSIBILITY_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/render_accessibility.mojom-shared.h"
#include "third_party/blink/public/mojom/render_accessibility.mojom-blink-forward.h"
#include "ui/accessibility/ax_enums.mojom-blink-forward.h"
#include "ui/accessibility/mojom/ax_action_data.mojom-blink-forward.h"
#include "ui/accessibility/mojom/ax_event.mojom-blink.h"
#include "ui/accessibility/mojom/ax_relative_bounds.mojom-blink.h"
#include "ui/accessibility/mojom/ax_tree_id.mojom-blink-forward.h"
#include "ui/accessibility/mojom/ax_tree_update.mojom-blink.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-blink.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace blink {
namespace mojom {
namespace blink {

class RenderAccessibilityHostProxy;

template <typename ImplRefTraits>
class RenderAccessibilityHostStub;

class RenderAccessibilityHostRequestValidator;
class RenderAccessibilityHostResponseValidator;


class PLATFORM_EXPORT RenderAccessibilityHost
    : public RenderAccessibilityHostInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = RenderAccessibilityHostInterfaceBase;
  using Proxy_ = RenderAccessibilityHostProxy;

  template <typename ImplRefTraits>
  using Stub_ = RenderAccessibilityHostStub<ImplRefTraits>;

  using RequestValidator_ = RenderAccessibilityHostRequestValidator;
  using ResponseValidator_ = RenderAccessibilityHostResponseValidator;
  enum MethodMinVersions : uint32_t {
    kHandleAXEventsMinVersion = 0,
    kHandleAXLocationChangesMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct HandleAXEvents_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct HandleAXLocationChanges_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~RenderAccessibilityHost() = default;


  using HandleAXEventsCallback = base::OnceCallback<void()>;
  
  virtual void HandleAXEvents(AXUpdatesAndEventsPtr events_and_updates, int32_t reset_token, HandleAXEventsCallback callback) = 0;

  
  virtual void HandleAXLocationChanges(WTF::Vector<LocationChangesPtr> changes) = 0;
};

class RenderAccessibilityProxy;

template <typename ImplRefTraits>
class RenderAccessibilityStub;

class RenderAccessibilityRequestValidator;
class RenderAccessibilityResponseValidator;


class PLATFORM_EXPORT RenderAccessibility
    : public RenderAccessibilityInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = RenderAccessibilityInterfaceBase;
  using Proxy_ = RenderAccessibilityProxy;

  template <typename ImplRefTraits>
  using Stub_ = RenderAccessibilityStub<ImplRefTraits>;

  using RequestValidator_ = RenderAccessibilityRequestValidator;
  using ResponseValidator_ = RenderAccessibilityResponseValidator;
  enum MethodMinVersions : uint32_t {
    kSetModeMinVersion = 0,
    kFatalErrorMinVersion = 0,
    kHitTestMinVersion = 0,
    kPerformActionMinVersion = 0,
    kResetMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct SetMode_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct FatalError_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct HitTest_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct PerformAction_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Reset_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~RenderAccessibility() = default;

  
  virtual void SetMode(uint32_t ax_mode) = 0;

  
  virtual void FatalError() = 0;


  using HitTestCallback = base::OnceCallback<void(HitTestResponsePtr)>;
  
  virtual void HitTest(const ::gfx::Point& point, ::ax::mojom::blink::Event event_to_fire, int32_t request_id, HitTestCallback callback) = 0;

  
  virtual void PerformAction(::ax::mojom::blink::AXActionDataPtr action_data) = 0;

  
  virtual void Reset(int32_t reset_token) = 0;
};



class PLATFORM_EXPORT RenderAccessibilityHostProxy
    : public RenderAccessibilityHost {
 public:
  using InterfaceType = RenderAccessibilityHost;

  explicit RenderAccessibilityHostProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void HandleAXEvents(AXUpdatesAndEventsPtr events_and_updates, int32_t reset_token, HandleAXEventsCallback callback) final;
  
  void HandleAXLocationChanges(WTF::Vector<LocationChangesPtr> changes) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class PLATFORM_EXPORT RenderAccessibilityProxy
    : public RenderAccessibility {
 public:
  using InterfaceType = RenderAccessibility;

  explicit RenderAccessibilityProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void SetMode(uint32_t ax_mode) final;
  
  void FatalError() final;
  
  void HitTest(const ::gfx::Point& point, ::ax::mojom::blink::Event event_to_fire, int32_t request_id, HitTestCallback callback) final;
  
  void PerformAction(::ax::mojom::blink::AXActionDataPtr action_data) final;
  
  void Reset(int32_t reset_token) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT RenderAccessibilityHostStubDispatch {
 public:
  static bool Accept(RenderAccessibilityHost* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      RenderAccessibilityHost* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<RenderAccessibilityHost>>
class RenderAccessibilityHostStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  RenderAccessibilityHostStub() = default;
  ~RenderAccessibilityHostStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return RenderAccessibilityHostStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return RenderAccessibilityHostStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT RenderAccessibilityStubDispatch {
 public:
  static bool Accept(RenderAccessibility* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      RenderAccessibility* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<RenderAccessibility>>
class RenderAccessibilityStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  RenderAccessibilityStub() = default;
  ~RenderAccessibilityStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return RenderAccessibilityStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return RenderAccessibilityStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT RenderAccessibilityHostRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT RenderAccessibilityRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT RenderAccessibilityHostResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT RenderAccessibilityResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};










class PLATFORM_EXPORT LocationChanges {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<LocationChanges, T>::value>;
  using DataView = LocationChangesDataView;
  using Data_ = internal::LocationChanges_Data;

  template <typename... Args>
  static LocationChangesPtr New(Args&&... args) {
    return LocationChangesPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static LocationChangesPtr From(const U& u) {
    return mojo::TypeConverter<LocationChangesPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, LocationChanges>::Convert(*this);
  }


  LocationChanges();

  LocationChanges(
      int32_t id,
      const ::ui::AXRelativeBounds& new_location);


  ~LocationChanges();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = LocationChangesPtr>
  LocationChangesPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, LocationChanges::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, LocationChanges::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        LocationChanges::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        LocationChanges::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::LocationChanges_UnserializedMessageContext<
            UserType, LocationChanges::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<LocationChanges::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return LocationChanges::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::LocationChanges_UnserializedMessageContext<
            UserType, LocationChanges::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<LocationChanges::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t id;
  
  ::ui::AXRelativeBounds new_location;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, LocationChanges::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, LocationChanges::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, LocationChanges::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, LocationChanges::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class PLATFORM_EXPORT HitTestResponse {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<HitTestResponse, T>::value>;
  using DataView = HitTestResponseDataView;
  using Data_ = internal::HitTestResponse_Data;

  template <typename... Args>
  static HitTestResponsePtr New(Args&&... args) {
    return HitTestResponsePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static HitTestResponsePtr From(const U& u) {
    return mojo::TypeConverter<HitTestResponsePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HitTestResponse>::Convert(*this);
  }


  HitTestResponse();

  HitTestResponse(
      const ::blink::FrameToken& hit_frame_token,
      const ::gfx::Point& hit_frame_transformed_point,
      int32_t hit_node_id);


  ~HitTestResponse();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = HitTestResponsePtr>
  HitTestResponsePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, HitTestResponse::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, HitTestResponse::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        HitTestResponse::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        HitTestResponse::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::HitTestResponse_UnserializedMessageContext<
            UserType, HitTestResponse::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<HitTestResponse::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return HitTestResponse::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::HitTestResponse_UnserializedMessageContext<
            UserType, HitTestResponse::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<HitTestResponse::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::blink::FrameToken hit_frame_token;
  
  ::gfx::Point hit_frame_transformed_point;
  
  int32_t hit_node_id;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, HitTestResponse::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, HitTestResponse::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, HitTestResponse::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, HitTestResponse::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class PLATFORM_EXPORT AXUpdatesAndEvents {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AXUpdatesAndEvents, T>::value>;
  using DataView = AXUpdatesAndEventsDataView;
  using Data_ = internal::AXUpdatesAndEvents_Data;

  template <typename... Args>
  static AXUpdatesAndEventsPtr New(Args&&... args) {
    return AXUpdatesAndEventsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AXUpdatesAndEventsPtr From(const U& u) {
    return mojo::TypeConverter<AXUpdatesAndEventsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AXUpdatesAndEvents>::Convert(*this);
  }


  AXUpdatesAndEvents();

  AXUpdatesAndEvents(
      WTF::Vector<::ax::mojom::blink::AXTreeUpdatePtr> updates,
      WTF::Vector<::ax::mojom::blink::AXEventPtr> events);

AXUpdatesAndEvents(const AXUpdatesAndEvents&) = delete;
AXUpdatesAndEvents& operator=(const AXUpdatesAndEvents&) = delete;

  ~AXUpdatesAndEvents();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AXUpdatesAndEventsPtr>
  AXUpdatesAndEventsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AXUpdatesAndEvents::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AXUpdatesAndEvents::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AXUpdatesAndEvents::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AXUpdatesAndEvents::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AXUpdatesAndEvents_UnserializedMessageContext<
            UserType, AXUpdatesAndEvents::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AXUpdatesAndEvents::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return AXUpdatesAndEvents::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AXUpdatesAndEvents_UnserializedMessageContext<
            UserType, AXUpdatesAndEvents::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AXUpdatesAndEvents::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  WTF::Vector<::ax::mojom::blink::AXTreeUpdatePtr> updates;
  
  WTF::Vector<::ax::mojom::blink::AXEventPtr> events;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AXUpdatesAndEvents::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AXUpdatesAndEvents::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AXUpdatesAndEvents::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AXUpdatesAndEvents::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
LocationChangesPtr LocationChanges::Clone() const {
  return New(
      mojo::Clone(id),
      mojo::Clone(new_location)
  );
}

template <typename T, LocationChanges::EnableIfSame<T>*>
bool LocationChanges::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->id, other_struct.id))
    return false;
  if (!mojo::Equals(this->new_location, other_struct.new_location))
    return false;
  return true;
}

template <typename T, LocationChanges::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.id < rhs.id)
    return true;
  if (rhs.id < lhs.id)
    return false;
  if (lhs.new_location < rhs.new_location)
    return true;
  if (rhs.new_location < lhs.new_location)
    return false;
  return false;
}
template <typename StructPtrType>
HitTestResponsePtr HitTestResponse::Clone() const {
  return New(
      mojo::Clone(hit_frame_token),
      mojo::Clone(hit_frame_transformed_point),
      mojo::Clone(hit_node_id)
  );
}

template <typename T, HitTestResponse::EnableIfSame<T>*>
bool HitTestResponse::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->hit_frame_token, other_struct.hit_frame_token))
    return false;
  if (!mojo::Equals(this->hit_frame_transformed_point, other_struct.hit_frame_transformed_point))
    return false;
  if (!mojo::Equals(this->hit_node_id, other_struct.hit_node_id))
    return false;
  return true;
}

template <typename T, HitTestResponse::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.hit_frame_token < rhs.hit_frame_token)
    return true;
  if (rhs.hit_frame_token < lhs.hit_frame_token)
    return false;
  if (lhs.hit_frame_transformed_point < rhs.hit_frame_transformed_point)
    return true;
  if (rhs.hit_frame_transformed_point < lhs.hit_frame_transformed_point)
    return false;
  if (lhs.hit_node_id < rhs.hit_node_id)
    return true;
  if (rhs.hit_node_id < lhs.hit_node_id)
    return false;
  return false;
}
template <typename StructPtrType>
AXUpdatesAndEventsPtr AXUpdatesAndEvents::Clone() const {
  return New(
      mojo::Clone(updates),
      mojo::Clone(events)
  );
}

template <typename T, AXUpdatesAndEvents::EnableIfSame<T>*>
bool AXUpdatesAndEvents::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->updates, other_struct.updates))
    return false;
  if (!mojo::Equals(this->events, other_struct.events))
    return false;
  return true;
}

template <typename T, AXUpdatesAndEvents::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.updates < rhs.updates)
    return true;
  if (rhs.updates < lhs.updates)
    return false;
  if (lhs.events < rhs.events)
    return true;
  if (rhs.events < lhs.events)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::LocationChanges::DataView,
                                         ::blink::mojom::blink::LocationChangesPtr> {
  static bool IsNull(const ::blink::mojom::blink::LocationChangesPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::LocationChangesPtr* output) { output->reset(); }

  static decltype(::blink::mojom::blink::LocationChanges::id) id(
      const ::blink::mojom::blink::LocationChangesPtr& input) {
    return input->id;
  }

  static const decltype(::blink::mojom::blink::LocationChanges::new_location)& new_location(
      const ::blink::mojom::blink::LocationChangesPtr& input) {
    return input->new_location;
  }

  static bool Read(::blink::mojom::blink::LocationChanges::DataView input, ::blink::mojom::blink::LocationChangesPtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::HitTestResponse::DataView,
                                         ::blink::mojom::blink::HitTestResponsePtr> {
  static bool IsNull(const ::blink::mojom::blink::HitTestResponsePtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::HitTestResponsePtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::HitTestResponse::hit_frame_token)& hit_frame_token(
      const ::blink::mojom::blink::HitTestResponsePtr& input) {
    return input->hit_frame_token;
  }

  static const decltype(::blink::mojom::blink::HitTestResponse::hit_frame_transformed_point)& hit_frame_transformed_point(
      const ::blink::mojom::blink::HitTestResponsePtr& input) {
    return input->hit_frame_transformed_point;
  }

  static decltype(::blink::mojom::blink::HitTestResponse::hit_node_id) hit_node_id(
      const ::blink::mojom::blink::HitTestResponsePtr& input) {
    return input->hit_node_id;
  }

  static bool Read(::blink::mojom::blink::HitTestResponse::DataView input, ::blink::mojom::blink::HitTestResponsePtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::AXUpdatesAndEvents::DataView,
                                         ::blink::mojom::blink::AXUpdatesAndEventsPtr> {
  static bool IsNull(const ::blink::mojom::blink::AXUpdatesAndEventsPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::AXUpdatesAndEventsPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::AXUpdatesAndEvents::updates)& updates(
      const ::blink::mojom::blink::AXUpdatesAndEventsPtr& input) {
    return input->updates;
  }

  static const decltype(::blink::mojom::blink::AXUpdatesAndEvents::events)& events(
      const ::blink::mojom::blink::AXUpdatesAndEventsPtr& input) {
    return input->events;
  }

  static bool Read(::blink::mojom::blink::AXUpdatesAndEvents::DataView input, ::blink::mojom::blink::AXUpdatesAndEventsPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_RENDER_ACCESSIBILITY_MOJOM_BLINK_H_