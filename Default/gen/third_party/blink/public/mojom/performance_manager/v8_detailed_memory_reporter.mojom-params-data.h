// third_party/blink/public/mojom/performance_manager/v8_detailed_memory_reporter.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERFORMANCE_MANAGER_V8_DETAILED_MEMORY_REPORTER_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERFORMANCE_MANAGER_V8_DETAILED_MEMORY_REPORTER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) V8DetailedMemoryReporter_GetV8MemoryUsage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t mode;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<V8DetailedMemoryReporter_GetV8MemoryUsage_Params_Data>;

  V8DetailedMemoryReporter_GetV8MemoryUsage_Params_Data();
  ~V8DetailedMemoryReporter_GetV8MemoryUsage_Params_Data() = delete;
};
static_assert(sizeof(V8DetailedMemoryReporter_GetV8MemoryUsage_Params_Data) == 16,
              "Bad sizeof(V8DetailedMemoryReporter_GetV8MemoryUsage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PerProcessV8MemoryUsage_Data> memory_usage;

 private:
  friend class mojo::internal::MessageFragment<V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParams_Data>;

  V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParams_Data();
  ~V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParams_Data() = delete;
};
static_assert(sizeof(V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParams_Data) == 16,
              "Bad sizeof(V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParams_Data)");

}  // namespace internal


class V8DetailedMemoryReporter_GetV8MemoryUsage_ParamsDataView {
 public:
  V8DetailedMemoryReporter_GetV8MemoryUsage_ParamsDataView() = default;

  V8DetailedMemoryReporter_GetV8MemoryUsage_ParamsDataView(
      internal::V8DetailedMemoryReporter_GetV8MemoryUsage_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadMode(UserType* output) const {
    auto data_value = data_->mode;
    return mojo::internal::Deserialize<::blink::mojom::V8DetailedMemoryReporter_Mode>(
        data_value, output);
  }
  V8DetailedMemoryReporter_Mode mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::V8DetailedMemoryReporter_Mode>(data_->mode));
  }
 private:
  internal::V8DetailedMemoryReporter_GetV8MemoryUsage_Params_Data* data_ = nullptr;
};



class V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParamsDataView {
 public:
  V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParamsDataView() = default;

  V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParamsDataView(
      internal::V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMemoryUsageDataView(
      PerProcessV8MemoryUsageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMemoryUsage(UserType* output) {
    
    auto* pointer = data_->memory_usage.Get();
    return mojo::internal::Deserialize<::blink::mojom::PerProcessV8MemoryUsageDataView>(
        pointer, output, message_);
  }
 private:
  internal::V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void V8DetailedMemoryReporter_GetV8MemoryUsage_ResponseParamsDataView::GetMemoryUsageDataView(
    PerProcessV8MemoryUsageDataView* output) {
  auto pointer = data_->memory_usage.Get();
  *output = PerProcessV8MemoryUsageDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERFORMANCE_MANAGER_V8_DETAILED_MEMORY_REPORTER_MOJOM_PARAMS_DATA_H_