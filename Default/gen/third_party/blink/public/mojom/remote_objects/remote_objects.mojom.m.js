// third_party/blink/public/mojom/remote_objects/remote_objects.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  BigBuffer as mojoBase_mojom_BigBuffer,
  BigBufferSpec as mojoBase_mojom_BigBufferSpec
} from '../../../../../mojo/public/mojom/base/big_buffer.mojom.m.js';

import {
  String16 as mojoBase_mojom_String16,
  String16Spec as mojoBase_mojom_String16Spec
} from '../../../../../mojo/public/mojom/base/string16.mojom.m.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const SingletonJavaScriptValueSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const SingletonJavaScriptValue = {
  
  kNull: 0,
  kUndefined: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};

/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const RemoteArrayTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const RemoteArrayType = {
  
  kInt8Array: 1,
  kUint8Array: 2,
  kInt16Array: 3,
  kUint16Array: 4,
  kInt32Array: 5,
  kUint32Array: 6,
  kFloat32Array: 7,
  kFloat64Array: 8,
  MIN_VALUE: 1,
  MAX_VALUE: 8,
};

/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const RemoteInvocationErrorSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const RemoteInvocationError = {
  
  OK: 0,
  METHOD_NOT_FOUND: 1,
  OBJECT_GET_CLASS_BLOCKED: 2,
  EXCEPTION_THROWN: 3,
  NON_ASSIGNABLE_TYPES: 4,
  MIN_VALUE: 0,
  MAX_VALUE: 4,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class RemoteObjectHostPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.RemoteObjectHost', scope);
  }
}

/** @interface */
export class RemoteObjectHostInterface {
  
  /**
   * @param { !number } objectId
   * @param { !RemoteObjectPendingReceiver } receiver
   */

  getObject(objectId, receiver) {}
  
  /**
   * @param { !number } objectId
   */

  acquireObject(objectId) {}
  
  /**
   * @param { !number } objectId
   */

  releaseObject(objectId) {}
}

/**
 * @implements { RemoteObjectHostInterface }
 */
export class RemoteObjectHostRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RemoteObjectHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RemoteObjectHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RemoteObjectHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } objectId
   * @param { !RemoteObjectPendingReceiver } receiver
   */

  getObject(
      objectId,
      receiver) {
    this.proxy.sendMessage(
        0,
        RemoteObjectHost_GetObject_ParamsSpec.$,
        null,
        [
          objectId,
          receiver
        ]);
  }

  
  /**
   * @param { !number } objectId
   */

  acquireObject(
      objectId) {
    this.proxy.sendMessage(
        1,
        RemoteObjectHost_AcquireObject_ParamsSpec.$,
        null,
        [
          objectId
        ]);
  }

  
  /**
   * @param { !number } objectId
   */

  releaseObject(
      objectId) {
    this.proxy.sendMessage(
        2,
        RemoteObjectHost_ReleaseObject_ParamsSpec.$,
        null,
        [
          objectId
        ]);
  }
}

/**
 * An object which receives request messages for the RemoteObjectHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class RemoteObjectHostReceiver {
  /**
   * @param {!RemoteObjectHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RemoteObjectHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RemoteObjectHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoteObjectHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        RemoteObjectHost_GetObject_ParamsSpec.$,
        null,
        impl.getObject.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        RemoteObjectHost_AcquireObject_ParamsSpec.$,
        null,
        impl.acquireObject.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        RemoteObjectHost_ReleaseObject_ParamsSpec.$,
        null,
        impl.releaseObject.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class RemoteObjectHost {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.RemoteObjectHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RemoteObjectHostRemote}
   */
  static getRemote() {
    let remote = new RemoteObjectHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the RemoteObjectHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class RemoteObjectHostCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RemoteObjectHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoteObjectHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getObject =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        RemoteObjectHost_GetObject_ParamsSpec.$,
        null,
        this.getObject.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.acquireObject =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        RemoteObjectHost_AcquireObject_ParamsSpec.$,
        null,
        this.acquireObject.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.releaseObject =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        RemoteObjectHost_ReleaseObject_ParamsSpec.$,
        null,
        this.releaseObject.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class RemoteObjectPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.RemoteObject', scope);
  }
}

/** @interface */
export class RemoteObjectInterface {
  
  /**
   * @param { !string } name
   * @return {!Promise<{
        methodExists: !boolean,
   *  }>}
   */

  hasMethod(name) {}
  
  /**
   * @return {!Promise<{
        methodNames: !Array<!string>,
   *  }>}
   */

  getMethods() {}
  
  /**
   * @param { !string } name
   * @param { !Array<!RemoteInvocationArgument> } arguments_
   * @return {!Promise<{
        result: !RemoteInvocationResult,
   *  }>}
   */

  invokeMethod(name, arguments_) {}
  
  /**
   */

  notifyReleasedObject() {}
}

/**
 * @implements { RemoteObjectInterface }
 */
export class RemoteObjectRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RemoteObjectPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RemoteObjectPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RemoteObjectPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } name
   * @return {!Promise<{
        methodExists: !boolean,
   *  }>}
   */

  hasMethod(
      name) {
    return this.proxy.sendMessage(
        0,
        RemoteObject_HasMethod_ParamsSpec.$,
        RemoteObject_HasMethod_ResponseParamsSpec.$,
        [
          name
        ]);
  }

  
  /**
   * @return {!Promise<{
        methodNames: !Array<!string>,
   *  }>}
   */

  getMethods() {
    return this.proxy.sendMessage(
        1,
        RemoteObject_GetMethods_ParamsSpec.$,
        RemoteObject_GetMethods_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !string } name
   * @param { !Array<!RemoteInvocationArgument> } arguments_
   * @return {!Promise<{
        result: !RemoteInvocationResult,
   *  }>}
   */

  invokeMethod(
      name,
      arguments) {
    return this.proxy.sendMessage(
        2,
        RemoteObject_InvokeMethod_ParamsSpec.$,
        RemoteObject_InvokeMethod_ResponseParamsSpec.$,
        [
          name,
          arguments
        ]);
  }

  
  /**
   */

  notifyReleasedObject() {
    this.proxy.sendMessage(
        3,
        RemoteObject_NotifyReleasedObject_ParamsSpec.$,
        null,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the RemoteObject
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class RemoteObjectReceiver {
  /**
   * @param {!RemoteObjectInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RemoteObjectRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RemoteObjectRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoteObjectRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        RemoteObject_HasMethod_ParamsSpec.$,
        RemoteObject_HasMethod_ResponseParamsSpec.$,
        impl.hasMethod.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        RemoteObject_GetMethods_ParamsSpec.$,
        RemoteObject_GetMethods_ResponseParamsSpec.$,
        impl.getMethods.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        RemoteObject_InvokeMethod_ParamsSpec.$,
        RemoteObject_InvokeMethod_ResponseParamsSpec.$,
        impl.invokeMethod.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        RemoteObject_NotifyReleasedObject_ParamsSpec.$,
        null,
        impl.notifyReleasedObject.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class RemoteObject {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.RemoteObject";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RemoteObjectRemote}
   */
  static getRemote() {
    let remote = new RemoteObjectRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the RemoteObject
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class RemoteObjectCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RemoteObjectRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoteObjectRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.hasMethod =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        RemoteObject_HasMethod_ParamsSpec.$,
        RemoteObject_HasMethod_ResponseParamsSpec.$,
        this.hasMethod.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getMethods =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        RemoteObject_GetMethods_ParamsSpec.$,
        RemoteObject_GetMethods_ResponseParamsSpec.$,
        this.getMethods.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.invokeMethod =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        RemoteObject_InvokeMethod_ParamsSpec.$,
        RemoteObject_InvokeMethod_ResponseParamsSpec.$,
        this.invokeMethod.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.notifyReleasedObject =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        RemoteObject_NotifyReleasedObject_ParamsSpec.$,
        null,
        this.notifyReleasedObject.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class RemoteObjectGatewayFactoryPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.RemoteObjectGatewayFactory', scope);
  }
}

/** @interface */
export class RemoteObjectGatewayFactoryInterface {
  
  /**
   * @param { !RemoteObjectHostRemote } host
   * @param { !RemoteObjectGatewayPendingReceiver } gateway
   */

  createRemoteObjectGateway(host, gateway) {}
}

/**
 * @implements { RemoteObjectGatewayFactoryInterface }
 */
export class RemoteObjectGatewayFactoryRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RemoteObjectGatewayFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RemoteObjectGatewayFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RemoteObjectGatewayFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !RemoteObjectHostRemote } host
   * @param { !RemoteObjectGatewayPendingReceiver } gateway
   */

  createRemoteObjectGateway(
      host,
      gateway) {
    this.proxy.sendMessage(
        0,
        RemoteObjectGatewayFactory_CreateRemoteObjectGateway_ParamsSpec.$,
        null,
        [
          host,
          gateway
        ]);
  }
}

/**
 * An object which receives request messages for the RemoteObjectGatewayFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class RemoteObjectGatewayFactoryReceiver {
  /**
   * @param {!RemoteObjectGatewayFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RemoteObjectGatewayFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RemoteObjectGatewayFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoteObjectGatewayFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        RemoteObjectGatewayFactory_CreateRemoteObjectGateway_ParamsSpec.$,
        null,
        impl.createRemoteObjectGateway.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class RemoteObjectGatewayFactory {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.RemoteObjectGatewayFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RemoteObjectGatewayFactoryRemote}
   */
  static getRemote() {
    let remote = new RemoteObjectGatewayFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the RemoteObjectGatewayFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class RemoteObjectGatewayFactoryCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RemoteObjectGatewayFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoteObjectGatewayFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createRemoteObjectGateway =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        RemoteObjectGatewayFactory_CreateRemoteObjectGateway_ParamsSpec.$,
        null,
        this.createRemoteObjectGateway.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class RemoteObjectGatewayPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.RemoteObjectGateway', scope);
  }
}

/** @interface */
export class RemoteObjectGatewayInterface {
  
  /**
   * @param { !string } name
   * @param { !number } objectId
   */

  addNamedObject(name, objectId) {}
  
  /**
   * @param { !string } name
   */

  removeNamedObject(name) {}
}

/**
 * @implements { RemoteObjectGatewayInterface }
 */
export class RemoteObjectGatewayRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RemoteObjectGatewayPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RemoteObjectGatewayPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RemoteObjectGatewayPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } name
   * @param { !number } objectId
   */

  addNamedObject(
      name,
      objectId) {
    this.proxy.sendMessage(
        0,
        RemoteObjectGateway_AddNamedObject_ParamsSpec.$,
        null,
        [
          name,
          objectId
        ]);
  }

  
  /**
   * @param { !string } name
   */

  removeNamedObject(
      name) {
    this.proxy.sendMessage(
        1,
        RemoteObjectGateway_RemoveNamedObject_ParamsSpec.$,
        null,
        [
          name
        ]);
  }
}

/**
 * An object which receives request messages for the RemoteObjectGateway
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class RemoteObjectGatewayReceiver {
  /**
   * @param {!RemoteObjectGatewayInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RemoteObjectGatewayRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RemoteObjectGatewayRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoteObjectGatewayRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        RemoteObjectGateway_AddNamedObject_ParamsSpec.$,
        null,
        impl.addNamedObject.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        RemoteObjectGateway_RemoveNamedObject_ParamsSpec.$,
        null,
        impl.removeNamedObject.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class RemoteObjectGateway {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.RemoteObjectGateway";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RemoteObjectGatewayRemote}
   */
  static getRemote() {
    let remote = new RemoteObjectGatewayRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the RemoteObjectGateway
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class RemoteObjectGatewayCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RemoteObjectGatewayRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoteObjectGatewayRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addNamedObject =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        RemoteObjectGateway_AddNamedObject_ParamsSpec.$,
        null,
        this.addNamedObject.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.removeNamedObject =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        RemoteObjectGateway_RemoveNamedObject_ParamsSpec.$,
        null,
        this.removeNamedObject.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteTypedArraySpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteInvocationResultSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObjectHost_GetObject_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObjectHost_AcquireObject_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObjectHost_ReleaseObject_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObject_HasMethod_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObject_HasMethod_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObject_GetMethods_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObject_GetMethods_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObject_InvokeMethod_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObject_InvokeMethod_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObject_NotifyReleasedObject_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObjectGatewayFactory_CreateRemoteObjectGateway_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObjectGateway_AddNamedObject_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoteObjectGateway_RemoveNamedObject_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const RemoteInvocationArgumentSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const RemoteInvocationResultValueSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    RemoteTypedArraySpec.$,
    'RemoteTypedArray',
    [
      mojo.internal.StructField(
        'type', 0,
        0,
        RemoteArrayTypeSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'buffer', 8,
        0,
        mojoBase_mojom_BigBufferSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class RemoteTypedArray {
  constructor() {
    /** @type { !RemoteArrayType } */
    this.type;
    /** @type { !mojoBase_mojom_BigBuffer } */
    this.buffer;
  }
}



mojo.internal.Struct(
    RemoteInvocationResultSpec.$,
    'RemoteInvocationResult',
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        RemoteInvocationErrorSpec.$,
        RemoteInvocationError.OK,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'value', 8,
        0,
        RemoteInvocationResultValueSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class RemoteInvocationResult {
  constructor() {
    /** @type { !RemoteInvocationError } */
    this.error;
    /** @type { (RemoteInvocationResultValue|undefined) } */
    this.value;
  }
}



mojo.internal.Struct(
    RemoteObjectHost_GetObject_ParamsSpec.$,
    'RemoteObjectHost_GetObject_Params',
    [
      mojo.internal.StructField(
        'objectId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'receiver', 4,
        0,
        mojo.internal.InterfaceRequest(RemoteObjectPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemoteObjectHost_GetObject_Params {
  constructor() {
    /** @type { !number } */
    this.objectId;
    /** @type { !RemoteObjectPendingReceiver } */
    this.receiver;
  }
}



mojo.internal.Struct(
    RemoteObjectHost_AcquireObject_ParamsSpec.$,
    'RemoteObjectHost_AcquireObject_Params',
    [
      mojo.internal.StructField(
        'objectId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemoteObjectHost_AcquireObject_Params {
  constructor() {
    /** @type { !number } */
    this.objectId;
  }
}



mojo.internal.Struct(
    RemoteObjectHost_ReleaseObject_ParamsSpec.$,
    'RemoteObjectHost_ReleaseObject_Params',
    [
      mojo.internal.StructField(
        'objectId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemoteObjectHost_ReleaseObject_Params {
  constructor() {
    /** @type { !number } */
    this.objectId;
  }
}



mojo.internal.Struct(
    RemoteObject_HasMethod_ParamsSpec.$,
    'RemoteObject_HasMethod_Params',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemoteObject_HasMethod_Params {
  constructor() {
    /** @type { !string } */
    this.name;
  }
}



mojo.internal.Struct(
    RemoteObject_HasMethod_ResponseParamsSpec.$,
    'RemoteObject_HasMethod_ResponseParams',
    [
      mojo.internal.StructField(
        'methodExists', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemoteObject_HasMethod_ResponseParams {
  constructor() {
    /** @type { !boolean } */
    this.methodExists;
  }
}



mojo.internal.Struct(
    RemoteObject_GetMethods_ParamsSpec.$,
    'RemoteObject_GetMethods_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class RemoteObject_GetMethods_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    RemoteObject_GetMethods_ResponseParamsSpec.$,
    'RemoteObject_GetMethods_ResponseParams',
    [
      mojo.internal.StructField(
        'methodNames', 0,
        0,
        mojo.internal.Array(mojo.internal.String, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemoteObject_GetMethods_ResponseParams {
  constructor() {
    /** @type { !Array<!string> } */
    this.methodNames;
  }
}



mojo.internal.Struct(
    RemoteObject_InvokeMethod_ParamsSpec.$,
    'RemoteObject_InvokeMethod_Params',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'arguments', 8,
        0,
        mojo.internal.Array(RemoteInvocationArgumentSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class RemoteObject_InvokeMethod_Params {
  constructor() {
    /** @type { !string } */
    this.name;
    /** @type { !Array<!RemoteInvocationArgument> } */
    this.arguments;
  }
}



mojo.internal.Struct(
    RemoteObject_InvokeMethod_ResponseParamsSpec.$,
    'RemoteObject_InvokeMethod_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        RemoteInvocationResultSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemoteObject_InvokeMethod_ResponseParams {
  constructor() {
    /** @type { !RemoteInvocationResult } */
    this.result;
  }
}



mojo.internal.Struct(
    RemoteObject_NotifyReleasedObject_ParamsSpec.$,
    'RemoteObject_NotifyReleasedObject_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class RemoteObject_NotifyReleasedObject_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    RemoteObjectGatewayFactory_CreateRemoteObjectGateway_ParamsSpec.$,
    'RemoteObjectGatewayFactory_CreateRemoteObjectGateway_Params',
    [
      mojo.internal.StructField(
        'host', 0,
        0,
        mojo.internal.InterfaceProxy(RemoteObjectHostRemote),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'gateway', 8,
        0,
        mojo.internal.InterfaceRequest(RemoteObjectGatewayPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class RemoteObjectGatewayFactory_CreateRemoteObjectGateway_Params {
  constructor() {
    /** @type { !RemoteObjectHostRemote } */
    this.host;
    /** @type { !RemoteObjectGatewayPendingReceiver } */
    this.gateway;
  }
}



mojo.internal.Struct(
    RemoteObjectGateway_AddNamedObject_ParamsSpec.$,
    'RemoteObjectGateway_AddNamedObject_Params',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'objectId', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class RemoteObjectGateway_AddNamedObject_Params {
  constructor() {
    /** @type { !string } */
    this.name;
    /** @type { !number } */
    this.objectId;
  }
}



mojo.internal.Struct(
    RemoteObjectGateway_RemoveNamedObject_ParamsSpec.$,
    'RemoteObjectGateway_RemoveNamedObject_Params',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemoteObjectGateway_RemoveNamedObject_Params {
  constructor() {
    /** @type { !string } */
    this.name;
  }
}

mojo.internal.Union(
    RemoteInvocationArgumentSpec.$, 'RemoteInvocationArgument',
    {
      'numberValue': {
        'ordinal': 0,
        'type': mojo.internal.Double,
      },
      'booleanValue': {
        'ordinal': 1,
        'type': mojo.internal.Bool,
      },
      'stringValue': {
        'ordinal': 2,
        'type': mojoBase_mojom_String16Spec.$,
      },
      'singletonValue': {
        'ordinal': 3,
        'type': SingletonJavaScriptValueSpec.$,
      },
      'arrayValue': {
        'ordinal': 4,
        'type': mojo.internal.Array(RemoteInvocationArgumentSpec.$, false),
      },
      'typedArrayValue': {
        'ordinal': 5,
        'type': RemoteTypedArraySpec.$,
      },
      'objectIdValue': {
        'ordinal': 6,
        'type': mojo.internal.Int32,
      },
    });

/**
 * @typedef { {
 *   numberValue: (!number|undefined),
 *   booleanValue: (!boolean|undefined),
 *   stringValue: (!mojoBase_mojom_String16|undefined),
 *   singletonValue: (!SingletonJavaScriptValue|undefined),
 *   arrayValue: (!Array<!RemoteInvocationArgument>|undefined),
 *   typedArrayValue: (!RemoteTypedArray|undefined),
 *   objectIdValue: (!number|undefined),
 * } }
 */
export const RemoteInvocationArgument = {};
mojo.internal.Union(
    RemoteInvocationResultValueSpec.$, 'RemoteInvocationResultValue',
    {
      'numberValue': {
        'ordinal': 0,
        'type': mojo.internal.Double,
      },
      'booleanValue': {
        'ordinal': 1,
        'type': mojo.internal.Bool,
      },
      'stringValue': {
        'ordinal': 2,
        'type': mojoBase_mojom_String16Spec.$,
      },
      'singletonValue': {
        'ordinal': 3,
        'type': SingletonJavaScriptValueSpec.$,
      },
      'objectId': {
        'ordinal': 4,
        'type': mojo.internal.Int32,
      },
    });

/**
 * @typedef { {
 *   numberValue: (!number|undefined),
 *   booleanValue: (!boolean|undefined),
 *   stringValue: (!mojoBase_mojom_String16|undefined),
 *   singletonValue: (!SingletonJavaScriptValue|undefined),
 *   objectId: (!number|undefined),
 * } }
 */
export const RemoteInvocationResultValue = {};
