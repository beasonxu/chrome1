// third_party/blink/public/mojom/shared_storage/shared_storage.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SHARED_STORAGE_SHARED_STORAGE_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SHARED_STORAGE_SHARED_STORAGE_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/shared_storage/shared_storage.mojom-shared.h"
#include "third_party/blink/public/mojom/shared_storage/shared_storage.mojom-blink-forward.h"
#include "mojo/public/mojom/base/string16.mojom-blink.h"
#include "url/mojom/url.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/platform/mojo/shared_storage_mojom_traits.h"
#include "third_party/blink/renderer/platform/platform_export.h"




namespace blink {
namespace mojom {
namespace blink {

class SharedStorageDocumentServiceProxy;

template <typename ImplRefTraits>
class SharedStorageDocumentServiceStub;

class SharedStorageDocumentServiceRequestValidator;
class SharedStorageDocumentServiceResponseValidator;


class PLATFORM_EXPORT SharedStorageDocumentService
    : public SharedStorageDocumentServiceInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = SharedStorageDocumentServiceInterfaceBase;
  using Proxy_ = SharedStorageDocumentServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = SharedStorageDocumentServiceStub<ImplRefTraits>;

  using RequestValidator_ = SharedStorageDocumentServiceRequestValidator;
  using ResponseValidator_ = SharedStorageDocumentServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kAddModuleOnWorkletMinVersion = 0,
    kRunOperationOnWorkletMinVersion = 0,
    kRunURLSelectionOperationOnWorkletMinVersion = 0,
    kSharedStorageSetMinVersion = 0,
    kSharedStorageAppendMinVersion = 0,
    kSharedStorageDeleteMinVersion = 0,
    kSharedStorageClearMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct AddModuleOnWorklet_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct RunOperationOnWorklet_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct RunURLSelectionOperationOnWorklet_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SharedStorageSet_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SharedStorageAppend_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SharedStorageDelete_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SharedStorageClear_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~SharedStorageDocumentService() = default;


  using AddModuleOnWorkletCallback = base::OnceCallback<void(bool, const WTF::String&)>;
  
  virtual void AddModuleOnWorklet(const ::blink::KURL& script_source_url, AddModuleOnWorkletCallback callback) = 0;


  using RunOperationOnWorkletCallback = base::OnceCallback<void(bool, const WTF::String&)>;
  
  virtual void RunOperationOnWorklet(const WTF::String& name, const WTF::Vector<uint8_t>& serialized_data, RunOperationOnWorkletCallback callback) = 0;


  using RunURLSelectionOperationOnWorkletCallback = base::OnceCallback<void(bool, const WTF::String&, const ::blink::KURL&)>;
  
  virtual void RunURLSelectionOperationOnWorklet(const WTF::String& name, WTF::Vector<SharedStorageUrlWithMetadataPtr> urls_with_metadata, const WTF::Vector<uint8_t>& serialized_data, RunURLSelectionOperationOnWorkletCallback callback) = 0;


  using SharedStorageSetCallback = base::OnceCallback<void(bool, const WTF::String&)>;
  
  virtual void SharedStorageSet(const ::WTF::String& key, const ::WTF::String& value, bool ignore_if_present, SharedStorageSetCallback callback) = 0;


  using SharedStorageAppendCallback = base::OnceCallback<void(bool, const WTF::String&)>;
  
  virtual void SharedStorageAppend(const ::WTF::String& key, const ::WTF::String& value, SharedStorageAppendCallback callback) = 0;


  using SharedStorageDeleteCallback = base::OnceCallback<void(bool, const WTF::String&)>;
  
  virtual void SharedStorageDelete(const ::WTF::String& key, SharedStorageDeleteCallback callback) = 0;


  using SharedStorageClearCallback = base::OnceCallback<void(bool, const WTF::String&)>;
  
  virtual void SharedStorageClear(SharedStorageClearCallback callback) = 0;
};



class PLATFORM_EXPORT SharedStorageDocumentServiceProxy
    : public SharedStorageDocumentService {
 public:
  using InterfaceType = SharedStorageDocumentService;

  explicit SharedStorageDocumentServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void AddModuleOnWorklet(const ::blink::KURL& script_source_url, AddModuleOnWorkletCallback callback) final;
  
  void RunOperationOnWorklet(const WTF::String& name, const WTF::Vector<uint8_t>& serialized_data, RunOperationOnWorkletCallback callback) final;
  
  void RunURLSelectionOperationOnWorklet(const WTF::String& name, WTF::Vector<SharedStorageUrlWithMetadataPtr> urls_with_metadata, const WTF::Vector<uint8_t>& serialized_data, RunURLSelectionOperationOnWorkletCallback callback) final;
  
  void SharedStorageSet(const ::WTF::String& key, const ::WTF::String& value, bool ignore_if_present, SharedStorageSetCallback callback) final;
  
  void SharedStorageAppend(const ::WTF::String& key, const ::WTF::String& value, SharedStorageAppendCallback callback) final;
  
  void SharedStorageDelete(const ::WTF::String& key, SharedStorageDeleteCallback callback) final;
  
  void SharedStorageClear(SharedStorageClearCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT SharedStorageDocumentServiceStubDispatch {
 public:
  static bool Accept(SharedStorageDocumentService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      SharedStorageDocumentService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<SharedStorageDocumentService>>
class SharedStorageDocumentServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SharedStorageDocumentServiceStub() = default;
  ~SharedStorageDocumentServiceStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SharedStorageDocumentServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SharedStorageDocumentServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT SharedStorageDocumentServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT SharedStorageDocumentServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};










class PLATFORM_EXPORT SharedStorageKeyArgument {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SharedStorageKeyArgument, T>::value>;
  using DataView = SharedStorageKeyArgumentDataView;
  using Data_ = internal::SharedStorageKeyArgument_Data;

  template <typename... Args>
  static SharedStorageKeyArgumentPtr New(Args&&... args) {
    return SharedStorageKeyArgumentPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SharedStorageKeyArgumentPtr From(const U& u) {
    return mojo::TypeConverter<SharedStorageKeyArgumentPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SharedStorageKeyArgument>::Convert(*this);
  }


  SharedStorageKeyArgument();

  explicit SharedStorageKeyArgument(
      const ::WTF::String& data);


  ~SharedStorageKeyArgument();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SharedStorageKeyArgumentPtr>
  SharedStorageKeyArgumentPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SharedStorageKeyArgument::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, SharedStorageKeyArgument::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SharedStorageKeyArgument::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SharedStorageKeyArgument::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SharedStorageKeyArgument_UnserializedMessageContext<
            UserType, SharedStorageKeyArgument::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<SharedStorageKeyArgument::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return SharedStorageKeyArgument::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SharedStorageKeyArgument_UnserializedMessageContext<
            UserType, SharedStorageKeyArgument::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SharedStorageKeyArgument::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::WTF::String data;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SharedStorageKeyArgument::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SharedStorageKeyArgument::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SharedStorageKeyArgument::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SharedStorageKeyArgument::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class PLATFORM_EXPORT SharedStorageValueArgument {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SharedStorageValueArgument, T>::value>;
  using DataView = SharedStorageValueArgumentDataView;
  using Data_ = internal::SharedStorageValueArgument_Data;

  template <typename... Args>
  static SharedStorageValueArgumentPtr New(Args&&... args) {
    return SharedStorageValueArgumentPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SharedStorageValueArgumentPtr From(const U& u) {
    return mojo::TypeConverter<SharedStorageValueArgumentPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SharedStorageValueArgument>::Convert(*this);
  }


  SharedStorageValueArgument();

  explicit SharedStorageValueArgument(
      const ::WTF::String& data);


  ~SharedStorageValueArgument();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SharedStorageValueArgumentPtr>
  SharedStorageValueArgumentPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SharedStorageValueArgument::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, SharedStorageValueArgument::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SharedStorageValueArgument::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SharedStorageValueArgument::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SharedStorageValueArgument_UnserializedMessageContext<
            UserType, SharedStorageValueArgument::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<SharedStorageValueArgument::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return SharedStorageValueArgument::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SharedStorageValueArgument_UnserializedMessageContext<
            UserType, SharedStorageValueArgument::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SharedStorageValueArgument::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::WTF::String data;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SharedStorageValueArgument::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SharedStorageValueArgument::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SharedStorageValueArgument::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SharedStorageValueArgument::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class PLATFORM_EXPORT SharedStorageUrlWithMetadata {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SharedStorageUrlWithMetadata, T>::value>;
  using DataView = SharedStorageUrlWithMetadataDataView;
  using Data_ = internal::SharedStorageUrlWithMetadata_Data;

  template <typename... Args>
  static SharedStorageUrlWithMetadataPtr New(Args&&... args) {
    return SharedStorageUrlWithMetadataPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SharedStorageUrlWithMetadataPtr From(const U& u) {
    return mojo::TypeConverter<SharedStorageUrlWithMetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SharedStorageUrlWithMetadata>::Convert(*this);
  }


  SharedStorageUrlWithMetadata();

  SharedStorageUrlWithMetadata(
      const ::blink::KURL& url,
      const WTF::HashMap<WTF::String, ::blink::KURL>& reporting_metadata);


  ~SharedStorageUrlWithMetadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SharedStorageUrlWithMetadataPtr>
  SharedStorageUrlWithMetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SharedStorageUrlWithMetadata::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, SharedStorageUrlWithMetadata::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SharedStorageUrlWithMetadata::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SharedStorageUrlWithMetadata::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SharedStorageUrlWithMetadata_UnserializedMessageContext<
            UserType, SharedStorageUrlWithMetadata::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<SharedStorageUrlWithMetadata::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return SharedStorageUrlWithMetadata::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SharedStorageUrlWithMetadata_UnserializedMessageContext<
            UserType, SharedStorageUrlWithMetadata::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SharedStorageUrlWithMetadata::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::blink::KURL url;
  
  WTF::HashMap<WTF::String, ::blink::KURL> reporting_metadata;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SharedStorageUrlWithMetadata::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SharedStorageUrlWithMetadata::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SharedStorageUrlWithMetadata::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SharedStorageUrlWithMetadata::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
SharedStorageKeyArgumentPtr SharedStorageKeyArgument::Clone() const {
  return New(
      mojo::Clone(data)
  );
}

template <typename T, SharedStorageKeyArgument::EnableIfSame<T>*>
bool SharedStorageKeyArgument::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->data, other_struct.data))
    return false;
  return true;
}

template <typename T, SharedStorageKeyArgument::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.data < rhs.data)
    return true;
  if (rhs.data < lhs.data)
    return false;
  return false;
}
template <typename StructPtrType>
SharedStorageValueArgumentPtr SharedStorageValueArgument::Clone() const {
  return New(
      mojo::Clone(data)
  );
}

template <typename T, SharedStorageValueArgument::EnableIfSame<T>*>
bool SharedStorageValueArgument::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->data, other_struct.data))
    return false;
  return true;
}

template <typename T, SharedStorageValueArgument::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.data < rhs.data)
    return true;
  if (rhs.data < lhs.data)
    return false;
  return false;
}
template <typename StructPtrType>
SharedStorageUrlWithMetadataPtr SharedStorageUrlWithMetadata::Clone() const {
  return New(
      mojo::Clone(url),
      mojo::Clone(reporting_metadata)
  );
}

template <typename T, SharedStorageUrlWithMetadata::EnableIfSame<T>*>
bool SharedStorageUrlWithMetadata::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->url, other_struct.url))
    return false;
  if (!mojo::Equals(this->reporting_metadata, other_struct.reporting_metadata))
    return false;
  return true;
}

template <typename T, SharedStorageUrlWithMetadata::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.url < rhs.url)
    return true;
  if (rhs.url < lhs.url)
    return false;
  if (lhs.reporting_metadata < rhs.reporting_metadata)
    return true;
  if (rhs.reporting_metadata < lhs.reporting_metadata)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::SharedStorageKeyArgument::DataView,
                                         ::blink::mojom::blink::SharedStorageKeyArgumentPtr> {
  static bool IsNull(const ::blink::mojom::blink::SharedStorageKeyArgumentPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::SharedStorageKeyArgumentPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::SharedStorageKeyArgument::data)& data(
      const ::blink::mojom::blink::SharedStorageKeyArgumentPtr& input) {
    return input->data;
  }

  static bool Read(::blink::mojom::blink::SharedStorageKeyArgument::DataView input, ::blink::mojom::blink::SharedStorageKeyArgumentPtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::SharedStorageValueArgument::DataView,
                                         ::blink::mojom::blink::SharedStorageValueArgumentPtr> {
  static bool IsNull(const ::blink::mojom::blink::SharedStorageValueArgumentPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::SharedStorageValueArgumentPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::SharedStorageValueArgument::data)& data(
      const ::blink::mojom::blink::SharedStorageValueArgumentPtr& input) {
    return input->data;
  }

  static bool Read(::blink::mojom::blink::SharedStorageValueArgument::DataView input, ::blink::mojom::blink::SharedStorageValueArgumentPtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::SharedStorageUrlWithMetadata::DataView,
                                         ::blink::mojom::blink::SharedStorageUrlWithMetadataPtr> {
  static bool IsNull(const ::blink::mojom::blink::SharedStorageUrlWithMetadataPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::SharedStorageUrlWithMetadataPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::SharedStorageUrlWithMetadata::url)& url(
      const ::blink::mojom::blink::SharedStorageUrlWithMetadataPtr& input) {
    return input->url;
  }

  static const decltype(::blink::mojom::blink::SharedStorageUrlWithMetadata::reporting_metadata)& reporting_metadata(
      const ::blink::mojom::blink::SharedStorageUrlWithMetadataPtr& input) {
    return input->reporting_metadata;
  }

  static bool Read(::blink::mojom::blink::SharedStorageUrlWithMetadata::DataView input, ::blink::mojom::blink::SharedStorageUrlWithMetadataPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SHARED_STORAGE_SHARED_STORAGE_MOJOM_BLINK_H_