// third_party/blink/public/mojom/shared_storage/shared_storage.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/shared_storage/shared_storage.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/shared_storage/shared_storage.mojom-params-data.h"
namespace blink {
namespace mojom {

namespace internal {


// static
bool SharedStorageKeyArgument_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageKeyArgument_Data* object =
      static_cast<const SharedStorageKeyArgument_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->data, validation_context))
    return false;

  return true;
}

SharedStorageKeyArgument_Data::SharedStorageKeyArgument_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageValueArgument_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageValueArgument_Data* object =
      static_cast<const SharedStorageValueArgument_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->data, validation_context))
    return false;

  return true;
}

SharedStorageValueArgument_Data::SharedStorageValueArgument_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageUrlWithMetadata_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageUrlWithMetadata_Data* object =
      static_cast<const SharedStorageUrlWithMetadata_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->reporting_metadata, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams reporting_metadata_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->reporting_metadata, validation_context,
                                         &reporting_metadata_validate_params)) {
    return false;
  }

  return true;
}

SharedStorageUrlWithMetadata_Data::SharedStorageUrlWithMetadata_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_AddModuleOnWorklet_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_AddModuleOnWorklet_Params_Data* object =
      static_cast<const SharedStorageDocumentService_AddModuleOnWorklet_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->script_source_url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->script_source_url, validation_context))
    return false;

  return true;
}

SharedStorageDocumentService_AddModuleOnWorklet_Params_Data::SharedStorageDocumentService_AddModuleOnWorklet_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams_Data* object =
      static_cast<const SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->error_message, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams error_message_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error_message, validation_context,
                                         &error_message_validate_params)) {
    return false;
  }

  return true;
}

SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams_Data::SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_RunOperationOnWorklet_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_RunOperationOnWorklet_Params_Data* object =
      static_cast<const SharedStorageDocumentService_RunOperationOnWorklet_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->name, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->name, validation_context,
                                         &name_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->serialized_data, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams serialized_data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->serialized_data, validation_context,
                                         &serialized_data_validate_params)) {
    return false;
  }

  return true;
}

SharedStorageDocumentService_RunOperationOnWorklet_Params_Data::SharedStorageDocumentService_RunOperationOnWorklet_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams_Data* object =
      static_cast<const SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->error_message, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams error_message_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error_message, validation_context,
                                         &error_message_validate_params)) {
    return false;
  }

  return true;
}

SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams_Data::SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params_Data* object =
      static_cast<const SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->name, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->name, validation_context,
                                         &name_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->urls_with_metadata, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams urls_with_metadata_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->urls_with_metadata, validation_context,
                                         &urls_with_metadata_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->serialized_data, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams serialized_data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->serialized_data, validation_context,
                                         &serialized_data_validate_params)) {
    return false;
  }

  return true;
}

SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params_Data::SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams_Data* object =
      static_cast<const SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->error_message, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams error_message_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error_message, validation_context,
                                         &error_message_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->opaque_url, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->opaque_url, validation_context))
    return false;

  return true;
}

SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams_Data::SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_SharedStorageSet_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_SharedStorageSet_Params_Data* object =
      static_cast<const SharedStorageDocumentService_SharedStorageSet_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->key, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->key, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->value, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->value, validation_context))
    return false;

  return true;
}

SharedStorageDocumentService_SharedStorageSet_Params_Data::SharedStorageDocumentService_SharedStorageSet_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_SharedStorageSet_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_SharedStorageSet_ResponseParams_Data* object =
      static_cast<const SharedStorageDocumentService_SharedStorageSet_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->error_message, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams error_message_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error_message, validation_context,
                                         &error_message_validate_params)) {
    return false;
  }

  return true;
}

SharedStorageDocumentService_SharedStorageSet_ResponseParams_Data::SharedStorageDocumentService_SharedStorageSet_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_SharedStorageAppend_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_SharedStorageAppend_Params_Data* object =
      static_cast<const SharedStorageDocumentService_SharedStorageAppend_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->key, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->key, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->value, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->value, validation_context))
    return false;

  return true;
}

SharedStorageDocumentService_SharedStorageAppend_Params_Data::SharedStorageDocumentService_SharedStorageAppend_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_SharedStorageAppend_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_SharedStorageAppend_ResponseParams_Data* object =
      static_cast<const SharedStorageDocumentService_SharedStorageAppend_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->error_message, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams error_message_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error_message, validation_context,
                                         &error_message_validate_params)) {
    return false;
  }

  return true;
}

SharedStorageDocumentService_SharedStorageAppend_ResponseParams_Data::SharedStorageDocumentService_SharedStorageAppend_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_SharedStorageDelete_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_SharedStorageDelete_Params_Data* object =
      static_cast<const SharedStorageDocumentService_SharedStorageDelete_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->key, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->key, validation_context))
    return false;

  return true;
}

SharedStorageDocumentService_SharedStorageDelete_Params_Data::SharedStorageDocumentService_SharedStorageDelete_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_SharedStorageDelete_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_SharedStorageDelete_ResponseParams_Data* object =
      static_cast<const SharedStorageDocumentService_SharedStorageDelete_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->error_message, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams error_message_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error_message, validation_context,
                                         &error_message_validate_params)) {
    return false;
  }

  return true;
}

SharedStorageDocumentService_SharedStorageDelete_ResponseParams_Data::SharedStorageDocumentService_SharedStorageDelete_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_SharedStorageClear_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_SharedStorageClear_Params_Data* object =
      static_cast<const SharedStorageDocumentService_SharedStorageClear_Params_Data*>(data);

  return true;
}

SharedStorageDocumentService_SharedStorageClear_Params_Data::SharedStorageDocumentService_SharedStorageClear_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SharedStorageDocumentService_SharedStorageClear_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SharedStorageDocumentService_SharedStorageClear_ResponseParams_Data* object =
      static_cast<const SharedStorageDocumentService_SharedStorageClear_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->error_message, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams error_message_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error_message, validation_context,
                                         &error_message_validate_params)) {
    return false;
  }

  return true;
}

SharedStorageDocumentService_SharedStorageClear_ResponseParams_Data::SharedStorageDocumentService_SharedStorageClear_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink