// third_party/blink/public/mojom/shared_storage/shared_storage.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SHARED_STORAGE_SHARED_STORAGE_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SHARED_STORAGE_SHARED_STORAGE_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/shared_storage/shared_storage.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT SharedStorageDocumentServiceInterceptorForTesting : public SharedStorageDocumentService {
  virtual SharedStorageDocumentService* GetForwardingInterface() = 0;
  void AddModuleOnWorklet(const ::GURL& script_source_url, AddModuleOnWorkletCallback callback) override;
  void RunOperationOnWorklet(const std::string& name, const std::vector<uint8_t>& serialized_data, RunOperationOnWorkletCallback callback) override;
  void RunURLSelectionOperationOnWorklet(const std::string& name, std::vector<SharedStorageUrlWithMetadataPtr> urls_with_metadata, const std::vector<uint8_t>& serialized_data, RunURLSelectionOperationOnWorkletCallback callback) override;
  void SharedStorageSet(const ::std::u16string& key, const ::std::u16string& value, bool ignore_if_present, SharedStorageSetCallback callback) override;
  void SharedStorageAppend(const ::std::u16string& key, const ::std::u16string& value, SharedStorageAppendCallback callback) override;
  void SharedStorageDelete(const ::std::u16string& key, SharedStorageDeleteCallback callback) override;
  void SharedStorageClear(SharedStorageClearCallback callback) override;
};
class BLINK_COMMON_EXPORT SharedStorageDocumentServiceAsyncWaiter {
 public:
  explicit SharedStorageDocumentServiceAsyncWaiter(SharedStorageDocumentService* proxy);

  SharedStorageDocumentServiceAsyncWaiter(const SharedStorageDocumentServiceAsyncWaiter&) = delete;
  SharedStorageDocumentServiceAsyncWaiter& operator=(const SharedStorageDocumentServiceAsyncWaiter&) = delete;

  ~SharedStorageDocumentServiceAsyncWaiter();
  void AddModuleOnWorklet(
      const ::GURL& script_source_url, bool* out_success, std::string* out_error_message);
  void RunOperationOnWorklet(
      const std::string& name, const std::vector<uint8_t>& serialized_data, bool* out_success, std::string* out_error_message);
  void RunURLSelectionOperationOnWorklet(
      const std::string& name, std::vector<SharedStorageUrlWithMetadataPtr> urls_with_metadata, const std::vector<uint8_t>& serialized_data, bool* out_success, std::string* out_error_message, ::GURL* out_opaque_url);
  void SharedStorageSet(
      const ::std::u16string& key, const ::std::u16string& value, bool ignore_if_present, bool* out_success, std::string* out_error_message);
  void SharedStorageAppend(
      const ::std::u16string& key, const ::std::u16string& value, bool* out_success, std::string* out_error_message);
  void SharedStorageDelete(
      const ::std::u16string& key, bool* out_success, std::string* out_error_message);
  void SharedStorageClear(
      bool* out_success, std::string* out_error_message);

 private:
  SharedStorageDocumentService* const proxy_;
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SHARED_STORAGE_SHARED_STORAGE_MOJOM_TEST_UTILS_H_