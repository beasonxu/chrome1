// third_party/blink/public/mojom/timing/resource_timing.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_TIMING_RESOURCE_TIMING_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_TIMING_RESOURCE_TIMING_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/timing/resource_timing.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "services/network/public/mojom/fetch_api.mojom-shared.h"
#include "services/network/public/mojom/load_timing_info.mojom-shared.h"
#include "third_party/blink/public/mojom/fetch/fetch_api_request.mojom-shared.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {
class ServerTimingInfoDataView;

class ResourceTimingInfoDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::ServerTimingInfoDataView> {
  using Data = ::blink::mojom::internal::ServerTimingInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::ResourceTimingInfoDataView> {
  using Data = ::blink::mojom::internal::ResourceTimingInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class CacheState : int32_t {
  
  kNone = 0,
  
  kLocal = 1,
  
  kValidated = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, CacheState value);
inline bool IsKnownEnumValue(CacheState value) {
  return internal::CacheState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class ServerTimingInfoDataView {
 public:
  ServerTimingInfoDataView() = default;

  ServerTimingInfoDataView(
      internal::ServerTimingInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  double duration() const {
    return data_->duration;
  }
  inline void GetDescriptionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDescription(UserType* output) {
    
    auto* pointer = data_->description.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServerTimingInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ResourceTimingInfoDataView {
 public:
  ResourceTimingInfoDataView() = default;

  ResourceTimingInfoDataView(
      internal::ResourceTimingInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetStartTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStartTime(UserType* output) {
    
    auto* pointer = data_->start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  inline void GetAlpnNegotiatedProtocolDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAlpnNegotiatedProtocol(UserType* output) {
    
    auto* pointer = data_->alpn_negotiated_protocol.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetConnectionInfoDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConnectionInfo(UserType* output) {
    
    auto* pointer = data_->connection_info.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetTimingDataView(
      ::network::mojom::LoadTimingInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTiming(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::LoadTimingInfoDataView, UserType>(),
    "Attempting to read the optional `timing` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadTiming` instead "
    "of `ReadTiming if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->timing.Get();
    return mojo::internal::Deserialize<::network::mojom::LoadTimingInfoDataView>(
        pointer, output, message_);
  }
  inline void GetLastRedirectEndTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLastRedirectEndTime(UserType* output) {
    
    auto* pointer = data_->last_redirect_end_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  inline void GetResponseEndDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResponseEnd(UserType* output) {
    
    auto* pointer = data_->response_end.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadContextType(UserType* output) const {
    auto data_value = data_->context_type;
    return mojo::internal::Deserialize<::blink::mojom::RequestContextType>(
        data_value, output);
  }
  ::blink::mojom::RequestContextType context_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::RequestContextType>(data_->context_type));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadRequestDestination(UserType* output) const {
    auto data_value = data_->request_destination;
    return mojo::internal::Deserialize<::network::mojom::RequestDestination>(
        data_value, output);
  }
  ::network::mojom::RequestDestination request_destination() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::RequestDestination>(data_->request_destination));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadCacheState(UserType* output) const {
    auto data_value = data_->cache_state;
    return mojo::internal::Deserialize<::blink::mojom::CacheState>(
        data_value, output);
  }
  CacheState cache_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CacheState>(data_->cache_state));
  }
  uint64_t encoded_body_size() const {
    return data_->encoded_body_size;
  }
  uint64_t decoded_body_size() const {
    return data_->decoded_body_size;
  }
  bool did_reuse_connection() const {
    return data_->did_reuse_connection;
  }
  bool is_secure_transport() const {
    return data_->is_secure_transport;
  }
  bool allow_timing_details() const {
    return data_->allow_timing_details;
  }
  bool allow_redirect_details() const {
    return data_->allow_redirect_details;
  }
  bool allow_negative_values() const {
    return data_->allow_negative_values;
  }
  inline void GetServerTimingDataView(
      mojo::ArrayDataView<ServerTimingInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadServerTiming(UserType* output) {
    
    auto* pointer = data_->server_timing.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::ServerTimingInfoDataView>>(
        pointer, output, message_);
  }
  bool render_blocking_status() const {
    return data_->render_blocking_status;
  }
 private:
  internal::ResourceTimingInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::CacheState>
    : public mojo::internal::EnumHashImpl<::blink::mojom::CacheState> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::CacheState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::CacheState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::CacheState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ServerTimingInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::ServerTimingInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::ServerTimingInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::name(input)) in_name = Traits::name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name)::BaseType> name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, name_fragment);
    fragment->name.Set(
        name_fragment.is_null() ? nullptr : name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in ServerTimingInfo struct");
    fragment->duration = Traits::duration(input);
    decltype(Traits::description(input)) in_description = Traits::description(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->description)::BaseType> description_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_description, description_fragment);
    fragment->description.Set(
        description_fragment.is_null() ? nullptr : description_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->description.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null description in ServerTimingInfo struct");
  }

  static bool Deserialize(::blink::mojom::internal::ServerTimingInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::ServerTimingInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ResourceTimingInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::ResourceTimingInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::ResourceTimingInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::name(input)) in_name = Traits::name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name)::BaseType> name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, name_fragment);
    fragment->name.Set(
        name_fragment.is_null() ? nullptr : name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in ResourceTimingInfo struct");
    decltype(Traits::start_time(input)) in_start_time = Traits::start_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->start_time)::BaseType> start_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_start_time, start_time_fragment);
    fragment->start_time.Set(
        start_time_fragment.is_null() ? nullptr : start_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->start_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null start_time in ResourceTimingInfo struct");
    decltype(Traits::alpn_negotiated_protocol(input)) in_alpn_negotiated_protocol = Traits::alpn_negotiated_protocol(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->alpn_negotiated_protocol)::BaseType> alpn_negotiated_protocol_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_alpn_negotiated_protocol, alpn_negotiated_protocol_fragment);
    fragment->alpn_negotiated_protocol.Set(
        alpn_negotiated_protocol_fragment.is_null() ? nullptr : alpn_negotiated_protocol_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->alpn_negotiated_protocol.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null alpn_negotiated_protocol in ResourceTimingInfo struct");
    decltype(Traits::connection_info(input)) in_connection_info = Traits::connection_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->connection_info)::BaseType> connection_info_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_connection_info, connection_info_fragment);
    fragment->connection_info.Set(
        connection_info_fragment.is_null() ? nullptr : connection_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->connection_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null connection_info in ResourceTimingInfo struct");
    decltype(Traits::timing(input)) in_timing = Traits::timing(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->timing)::BaseType> timing_fragment(
            fragment.message());
    mojo::internal::Serialize<::network::mojom::LoadTimingInfoDataView>(
        in_timing, timing_fragment);
    fragment->timing.Set(
        timing_fragment.is_null() ? nullptr : timing_fragment.data());
    decltype(Traits::last_redirect_end_time(input)) in_last_redirect_end_time = Traits::last_redirect_end_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->last_redirect_end_time)::BaseType> last_redirect_end_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_last_redirect_end_time, last_redirect_end_time_fragment);
    fragment->last_redirect_end_time.Set(
        last_redirect_end_time_fragment.is_null() ? nullptr : last_redirect_end_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->last_redirect_end_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_redirect_end_time in ResourceTimingInfo struct");
    decltype(Traits::response_end(input)) in_response_end = Traits::response_end(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->response_end)::BaseType> response_end_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_response_end, response_end_fragment);
    fragment->response_end.Set(
        response_end_fragment.is_null() ? nullptr : response_end_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->response_end.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null response_end in ResourceTimingInfo struct");
    mojo::internal::Serialize<::blink::mojom::RequestContextType>(
        Traits::context_type(input), &fragment->context_type);
    mojo::internal::Serialize<::network::mojom::RequestDestination>(
        Traits::request_destination(input), &fragment->request_destination);
    mojo::internal::Serialize<::blink::mojom::CacheState>(
        Traits::cache_state(input), &fragment->cache_state);
    fragment->encoded_body_size = Traits::encoded_body_size(input);
    fragment->decoded_body_size = Traits::decoded_body_size(input);
    fragment->did_reuse_connection = Traits::did_reuse_connection(input);
    fragment->is_secure_transport = Traits::is_secure_transport(input);
    fragment->allow_timing_details = Traits::allow_timing_details(input);
    fragment->allow_redirect_details = Traits::allow_redirect_details(input);
    fragment->allow_negative_values = Traits::allow_negative_values(input);
    decltype(Traits::server_timing(input)) in_server_timing = Traits::server_timing(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->server_timing)::BaseType>
        server_timing_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams server_timing_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::ServerTimingInfoDataView>>(
        in_server_timing, server_timing_fragment, &server_timing_validate_params);
    fragment->server_timing.Set(
        server_timing_fragment.is_null() ? nullptr : server_timing_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->server_timing.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null server_timing in ResourceTimingInfo struct");
    fragment->render_blocking_status = Traits::render_blocking_status(input);
  }

  static bool Deserialize(::blink::mojom::internal::ResourceTimingInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::ResourceTimingInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void ServerTimingInfoDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ServerTimingInfoDataView::GetDescriptionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->description.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ResourceTimingInfoDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ResourceTimingInfoDataView::GetStartTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->start_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void ResourceTimingInfoDataView::GetAlpnNegotiatedProtocolDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->alpn_negotiated_protocol.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ResourceTimingInfoDataView::GetConnectionInfoDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->connection_info.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ResourceTimingInfoDataView::GetTimingDataView(
    ::network::mojom::LoadTimingInfoDataView* output) {
  auto pointer = data_->timing.Get();
  *output = ::network::mojom::LoadTimingInfoDataView(pointer, message_);
}
inline void ResourceTimingInfoDataView::GetLastRedirectEndTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->last_redirect_end_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void ResourceTimingInfoDataView::GetResponseEndDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->response_end.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void ResourceTimingInfoDataView::GetServerTimingDataView(
    mojo::ArrayDataView<ServerTimingInfoDataView>* output) {
  auto pointer = data_->server_timing.Get();
  *output = mojo::ArrayDataView<ServerTimingInfoDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::CacheState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::CacheState value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_TIMING_RESOURCE_TIMING_MOJOM_SHARED_H_