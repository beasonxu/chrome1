// third_party/blink/public/mojom/timing/performance_mark_or_measure.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/timing/performance_mark_or_measure.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/timing/performance_mark_or_measure.mojom-params-data.h"
#include "third_party/blink/public/mojom/timing/performance_mark_or_measure.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/timing/performance_mark_or_measure.mojom-import-headers.h"
#include "third_party/blink/public/mojom/timing/performance_mark_or_measure.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_TIMING_PERFORMANCE_MARK_OR_MEASURE_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_TIMING_PERFORMANCE_MARK_OR_MEASURE_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
PerformanceMarkOrMeasure::PerformanceMarkOrMeasure()
    : name(),
      entry_type(),
      start_time(),
      duration(),
      detail() {}

PerformanceMarkOrMeasure::PerformanceMarkOrMeasure(
    const std::string& name_in,
    PerformanceMarkOrMeasure::EntryType entry_type_in,
    double start_time_in,
    double duration_in,
    absl::optional<::mojo_base::BigBuffer> detail_in)
    : name(std::move(name_in)),
      entry_type(std::move(entry_type_in)),
      start_time(std::move(start_time_in)),
      duration(std::move(duration_in)),
      detail(std::move(detail_in)) {}

PerformanceMarkOrMeasure::~PerformanceMarkOrMeasure() = default;

void PerformanceMarkOrMeasure::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "entry_type"), this->entry_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type PerformanceMarkOrMeasure::EntryType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "start_time"), this->start_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type double>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "duration"), this->duration,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type double>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "detail"), this->detail,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type absl::optional<::mojo_base::BigBuffer>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool PerformanceMarkOrMeasure::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::PerformanceMarkOrMeasure::DataView, ::blink::mojom::PerformanceMarkOrMeasurePtr>::Read(
    ::blink::mojom::PerformanceMarkOrMeasure::DataView input,
    ::blink::mojom::PerformanceMarkOrMeasurePtr* output) {
  bool success = true;
  ::blink::mojom::PerformanceMarkOrMeasurePtr result(::blink::mojom::PerformanceMarkOrMeasure::New());
  
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadEntryType(&result->entry_type))
        success = false;
      if (success)
        result->start_time = input.start_time();
      if (success)
        result->duration = input.duration();
      if (success && !input.ReadDetail(&result->detail))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif