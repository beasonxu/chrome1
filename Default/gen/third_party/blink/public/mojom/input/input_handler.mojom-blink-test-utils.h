// third_party/blink/public/mojom/input/input_handler.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_HANDLER_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_HANDLER_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/input/input_handler.mojom-blink.h"
#include "third_party/blink/renderer/platform/platform_export.h"


namespace blink {
namespace mojom {
namespace blink {


class PLATFORM_EXPORT WidgetInputHandlerHostInterceptorForTesting : public WidgetInputHandlerHost {
  virtual WidgetInputHandlerHost* GetForwardingInterface() = 0;
  void SetTouchActionFromMain(::cc::TouchAction touch_action) override;
  void SetPanAction(PanAction pan_action) override;
  void DidOverscroll(DidOverscrollParamsPtr params) override;
  void DidStartScrollingViewport() override;
  void ImeCancelComposition() override;
  void ImeCompositionRangeChanged(const ::gfx::Range& range, const WTF::Vector<::gfx::Rect>& bounds) override;
  void SetMouseCapture(bool capture) override;
  void RequestMouseLock(bool from_user_gesture, bool unadjusted_movement, RequestMouseLockCallback callback) override;
};
class PLATFORM_EXPORT WidgetInputHandlerHostAsyncWaiter {
 public:
  explicit WidgetInputHandlerHostAsyncWaiter(WidgetInputHandlerHost* proxy);

  WidgetInputHandlerHostAsyncWaiter(const WidgetInputHandlerHostAsyncWaiter&) = delete;
  WidgetInputHandlerHostAsyncWaiter& operator=(const WidgetInputHandlerHostAsyncWaiter&) = delete;

  ~WidgetInputHandlerHostAsyncWaiter();
  void RequestMouseLock(
      bool from_user_gesture, bool unadjusted_movement, ::blink::mojom::blink::PointerLockResult* out_result, ::mojo::PendingRemote<::blink::mojom::blink::PointerLockContext>* out_context);

 private:
  WidgetInputHandlerHost* const proxy_;
};


class PLATFORM_EXPORT FrameWidgetInputHandlerInterceptorForTesting : public FrameWidgetInputHandler {
  virtual FrameWidgetInputHandler* GetForwardingInterface() = 0;
  void AddImeTextSpansToExistingText(uint32_t start, uint32_t end, const WTF::Vector<::ui::ImeTextSpan>& ime_text_spans) override;
  void ClearImeTextSpansByType(uint32_t start, uint32_t end, ::ui::ImeTextSpan::Type type) override;
  void SetCompositionFromExistingText(int32_t start, int32_t end, const WTF::Vector<::ui::ImeTextSpan>& ime_text_spans) override;
  void ExtendSelectionAndDelete(int32_t before, int32_t after) override;
  void DeleteSurroundingText(int32_t before, int32_t after) override;
  void DeleteSurroundingTextInCodePoints(int32_t before, int32_t after) override;
  void SetEditableSelectionOffsets(int32_t start, int32_t end) override;
  void HandleStylusWritingGestureAction(::blink::mojom::blink::StylusWritingGestureDataPtr gesture_data) override;
  void ExecuteEditCommand(const WTF::String& command, const ::WTF::String& value) override;
  void Undo() override;
  void Redo() override;
  void Cut() override;
  void Copy() override;
  void CopyToFindPboard() override;
  void Paste() override;
  void PasteAndMatchStyle() override;
  void Delete() override;
  void SelectAll() override;
  void CollapseSelection() override;
  void Replace(const ::WTF::String& word) override;
  void ReplaceMisspelling(const ::WTF::String& word) override;
  void SelectRange(const ::gfx::Point& base, const ::gfx::Point& extent) override;
  void AdjustSelectionByCharacterOffset(int32_t start, int32_t end, ::blink::mojom::blink::SelectionMenuBehavior behavior) override;
  void SelectAroundCaret(SelectionGranularity granularity, bool should_show_handle, bool should_show_context_menu, SelectAroundCaretCallback callback) override;
  void MoveRangeSelectionExtent(const ::gfx::Point& extent) override;
  void ScrollFocusedEditableNodeIntoView() override;
  void WaitForPageScaleAnimationForTesting(WaitForPageScaleAnimationForTestingCallback callback) override;
  void MoveCaret(const ::gfx::Point& point) override;
};
class PLATFORM_EXPORT FrameWidgetInputHandlerAsyncWaiter {
 public:
  explicit FrameWidgetInputHandlerAsyncWaiter(FrameWidgetInputHandler* proxy);

  FrameWidgetInputHandlerAsyncWaiter(const FrameWidgetInputHandlerAsyncWaiter&) = delete;
  FrameWidgetInputHandlerAsyncWaiter& operator=(const FrameWidgetInputHandlerAsyncWaiter&) = delete;

  ~FrameWidgetInputHandlerAsyncWaiter();
  void SelectAroundCaret(
      SelectionGranularity granularity, bool should_show_handle, bool should_show_context_menu, SelectAroundCaretResultPtr* out_result);
  void WaitForPageScaleAnimationForTesting(
      );

 private:
  FrameWidgetInputHandler* const proxy_;
};


class PLATFORM_EXPORT WidgetInputHandlerInterceptorForTesting : public WidgetInputHandler {
  virtual WidgetInputHandler* GetForwardingInterface() = 0;
  void SetFocus(FocusState state) override;
  void MouseCaptureLost() override;
  void SetEditCommandsForNextKeyEvent(WTF::Vector<EditCommandPtr> commands) override;
  void CursorVisibilityChanged(bool visible) override;
  void ImeSetComposition(const ::WTF::String& text, const WTF::Vector<::ui::ImeTextSpan>& ime_text_spans, const ::gfx::Range& range, int32_t start, int32_t end, ImeSetCompositionCallback callback) override;
  void ImeCommitText(const ::WTF::String& text, const WTF::Vector<::ui::ImeTextSpan>& ime_text_spans, const ::gfx::Range& range, int32_t relative_cursor_position, ImeCommitTextCallback callback) override;
  void ImeFinishComposingText(bool keep_selection) override;
  void RequestTextInputStateUpdate() override;
  void RequestCompositionUpdates(bool immediate_request, bool monitor_request) override;
  void DispatchEvent(::std::unique_ptr<::blink::WebCoalescedInputEvent> event, DispatchEventCallback callback) override;
  void DispatchNonBlockingEvent(::std::unique_ptr<::blink::WebCoalescedInputEvent> event) override;
  void WaitForInputProcessed(WaitForInputProcessedCallback callback) override;
  void AttachSynchronousCompositor(::mojo::PendingRemote<::blink::mojom::blink::SynchronousCompositorControlHost> control_host, ::mojo::PendingAssociatedRemote<::blink::mojom::blink::SynchronousCompositorHost> host, ::mojo::PendingAssociatedReceiver<::blink::mojom::blink::SynchronousCompositor> compositor_request) override;
  void GetFrameWidgetInputHandler(::mojo::PendingAssociatedReceiver<FrameWidgetInputHandler> interface_request) override;
};
class PLATFORM_EXPORT WidgetInputHandlerAsyncWaiter {
 public:
  explicit WidgetInputHandlerAsyncWaiter(WidgetInputHandler* proxy);

  WidgetInputHandlerAsyncWaiter(const WidgetInputHandlerAsyncWaiter&) = delete;
  WidgetInputHandlerAsyncWaiter& operator=(const WidgetInputHandlerAsyncWaiter&) = delete;

  ~WidgetInputHandlerAsyncWaiter();
  void ImeSetComposition(
      const ::WTF::String& text, const WTF::Vector<::ui::ImeTextSpan>& ime_text_spans, const ::gfx::Range& range, int32_t start, int32_t end);
  void ImeCommitText(
      const ::WTF::String& text, const WTF::Vector<::ui::ImeTextSpan>& ime_text_spans, const ::gfx::Range& range, int32_t relative_cursor_position);
  void DispatchEvent(
      ::std::unique_ptr<::blink::WebCoalescedInputEvent> event, ::blink::mojom::blink::InputEventResultSource* out_source, ::ui::LatencyInfo* out_updated_latency, ::blink::mojom::blink::InputEventResultState* out_state, DidOverscrollParamsPtr* out_overscroll, TouchActionOptionalPtr* out_touch_action);
  void WaitForInputProcessed(
      );

 private:
  WidgetInputHandler* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_HANDLER_MOJOM_BLINK_TEST_UTILS_H_