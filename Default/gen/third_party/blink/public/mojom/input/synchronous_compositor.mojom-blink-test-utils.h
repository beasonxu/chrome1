// third_party/blink/public/mojom/input/synchronous_compositor.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_SYNCHRONOUS_COMPOSITOR_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_SYNCHRONOUS_COMPOSITOR_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/input/synchronous_compositor.mojom-blink.h"
#include "third_party/blink/renderer/platform/platform_export.h"


namespace blink {
namespace mojom {
namespace blink {


class PLATFORM_EXPORT SynchronousCompositorInterceptorForTesting : public SynchronousCompositor {
  virtual SynchronousCompositor* GetForwardingInterface() = 0;
  void DemandDrawHwAsync(SyncCompositorDemandDrawHwParamsPtr draw_params) override;
  void DemandDrawHw(SyncCompositorDemandDrawHwParamsPtr draw_params, DemandDrawHwCallback callback) override;
  void SetSharedMemory(::base::WritableSharedMemoryRegion shm_region, SetSharedMemoryCallback callback) override;
  void DemandDrawSw(SyncCompositorDemandDrawSwParamsPtr draw_params, DemandDrawSwCallback callback) override;
  void WillSkipDraw() override;
  void ZeroSharedMemory() override;
  void ZoomBy(float delta, const ::gfx::Point& anchor, ZoomByCallback callback) override;
  void SetMemoryPolicy(uint32_t bytes_limit) override;
  void ReclaimResources(uint32_t layer_tree_frame_sink_id, WTF::Vector<::viz::ReturnedResource> resources) override;
  void OnCompositorFrameTransitionDirectiveProcessed(uint32_t layer_tree_frame_sink_id, uint32_t sequence_id) override;
  void SetScroll(const ::gfx::PointF& offset) override;
  void BeginFrame(const ::viz::BeginFrameArgs& args, const WTF::HashMap<uint32_t, ::viz::FrameTimingDetails>& timing_details) override;
  void SetBeginFrameSourcePaused(bool paused) override;
};
class PLATFORM_EXPORT SynchronousCompositorAsyncWaiter {
 public:
  explicit SynchronousCompositorAsyncWaiter(SynchronousCompositor* proxy);

  SynchronousCompositorAsyncWaiter(const SynchronousCompositorAsyncWaiter&) = delete;
  SynchronousCompositorAsyncWaiter& operator=(const SynchronousCompositorAsyncWaiter&) = delete;

  ~SynchronousCompositorAsyncWaiter();
  void DemandDrawHw(
      SyncCompositorDemandDrawHwParamsPtr draw_params, SyncCompositorCommonRendererParamsPtr* out_result, uint32_t* out_layer_tree_frame_sink_id, uint32_t* out_metadata_version, absl::optional<::viz::LocalSurfaceId>* out_local_surface_id, absl::optional<::viz::CompositorFrame>* out_frame, absl::optional<::viz::HitTestRegionList>* out_hit_test_region_list);
  void SetSharedMemory(
      ::base::WritableSharedMemoryRegion shm_region, bool* out_success, SyncCompositorCommonRendererParamsPtr* out_result);
  void DemandDrawSw(
      SyncCompositorDemandDrawSwParamsPtr draw_params, SyncCompositorCommonRendererParamsPtr* out_result, uint32_t* out_metadata_version, absl::optional<::viz::CompositorFrameMetadata>* out_meta_data);
  void ZoomBy(
      float delta, const ::gfx::Point& anchor, SyncCompositorCommonRendererParamsPtr* out_result);

 private:
  SynchronousCompositor* const proxy_;
};


class PLATFORM_EXPORT SynchronousCompositorHostInterceptorForTesting : public SynchronousCompositorHost {
  virtual SynchronousCompositorHost* GetForwardingInterface() = 0;
  void LayerTreeFrameSinkCreated() override;
  void UpdateState(SyncCompositorCommonRendererParamsPtr params) override;
  void SetNeedsBeginFrames(bool needs_begin_frames) override;
};
class PLATFORM_EXPORT SynchronousCompositorHostAsyncWaiter {
 public:
  explicit SynchronousCompositorHostAsyncWaiter(SynchronousCompositorHost* proxy);

  SynchronousCompositorHostAsyncWaiter(const SynchronousCompositorHostAsyncWaiter&) = delete;
  SynchronousCompositorHostAsyncWaiter& operator=(const SynchronousCompositorHostAsyncWaiter&) = delete;

  ~SynchronousCompositorHostAsyncWaiter();

 private:
  SynchronousCompositorHost* const proxy_;
};


class PLATFORM_EXPORT SynchronousCompositorControlHostInterceptorForTesting : public SynchronousCompositorControlHost {
  virtual SynchronousCompositorControlHost* GetForwardingInterface() = 0;
  void ReturnFrame(uint32_t layer_tree_frame_sink_id, uint32_t metadata_version, const absl::optional<::viz::LocalSurfaceId>& local_surface_id, absl::optional<::viz::CompositorFrame> frame, absl::optional<::viz::HitTestRegionList> hit_test_region_list) override;
  void BeginFrameResponse(SyncCompositorCommonRendererParamsPtr params) override;
};
class PLATFORM_EXPORT SynchronousCompositorControlHostAsyncWaiter {
 public:
  explicit SynchronousCompositorControlHostAsyncWaiter(SynchronousCompositorControlHost* proxy);

  SynchronousCompositorControlHostAsyncWaiter(const SynchronousCompositorControlHostAsyncWaiter&) = delete;
  SynchronousCompositorControlHostAsyncWaiter& operator=(const SynchronousCompositorControlHostAsyncWaiter&) = delete;

  ~SynchronousCompositorControlHostAsyncWaiter();

 private:
  SynchronousCompositorControlHost* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_SYNCHRONOUS_COMPOSITOR_MOJOM_BLINK_TEST_UTILS_H_