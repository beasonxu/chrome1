// third_party/blink/public/mojom/input/input_messages.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_MESSAGES_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_MESSAGES_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TextSuggestionBackend_ApplySpellCheckSuggestion_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> suggestion;

 private:
  friend class mojo::internal::MessageFragment<TextSuggestionBackend_ApplySpellCheckSuggestion_Params_Data>;

  TextSuggestionBackend_ApplySpellCheckSuggestion_Params_Data();
  ~TextSuggestionBackend_ApplySpellCheckSuggestion_Params_Data() = delete;
};
static_assert(sizeof(TextSuggestionBackend_ApplySpellCheckSuggestion_Params_Data) == 16,
              "Bad sizeof(TextSuggestionBackend_ApplySpellCheckSuggestion_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TextSuggestionBackend_ApplyTextSuggestion_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t marker_tag;
  int32_t suggestion_index;

 private:
  friend class mojo::internal::MessageFragment<TextSuggestionBackend_ApplyTextSuggestion_Params_Data>;

  TextSuggestionBackend_ApplyTextSuggestion_Params_Data();
  ~TextSuggestionBackend_ApplyTextSuggestion_Params_Data() = delete;
};
static_assert(sizeof(TextSuggestionBackend_ApplyTextSuggestion_Params_Data) == 16,
              "Bad sizeof(TextSuggestionBackend_ApplyTextSuggestion_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TextSuggestionBackend_DeleteActiveSuggestionRange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<TextSuggestionBackend_DeleteActiveSuggestionRange_Params_Data>;

  TextSuggestionBackend_DeleteActiveSuggestionRange_Params_Data();
  ~TextSuggestionBackend_DeleteActiveSuggestionRange_Params_Data() = delete;
};
static_assert(sizeof(TextSuggestionBackend_DeleteActiveSuggestionRange_Params_Data) == 8,
              "Bad sizeof(TextSuggestionBackend_DeleteActiveSuggestionRange_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TextSuggestionBackend_OnNewWordAddedToDictionary_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> suggestion;

 private:
  friend class mojo::internal::MessageFragment<TextSuggestionBackend_OnNewWordAddedToDictionary_Params_Data>;

  TextSuggestionBackend_OnNewWordAddedToDictionary_Params_Data();
  ~TextSuggestionBackend_OnNewWordAddedToDictionary_Params_Data() = delete;
};
static_assert(sizeof(TextSuggestionBackend_OnNewWordAddedToDictionary_Params_Data) == 16,
              "Bad sizeof(TextSuggestionBackend_OnNewWordAddedToDictionary_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TextSuggestionBackend_OnSuggestionMenuClosed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<TextSuggestionBackend_OnSuggestionMenuClosed_Params_Data>;

  TextSuggestionBackend_OnSuggestionMenuClosed_Params_Data();
  ~TextSuggestionBackend_OnSuggestionMenuClosed_Params_Data() = delete;
};
static_assert(sizeof(TextSuggestionBackend_OnSuggestionMenuClosed_Params_Data) == 8,
              "Bad sizeof(TextSuggestionBackend_OnSuggestionMenuClosed_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TextSuggestionBackend_SuggestionMenuTimeoutCallback_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t max_number_of_suggestions;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<TextSuggestionBackend_SuggestionMenuTimeoutCallback_Params_Data>;

  TextSuggestionBackend_SuggestionMenuTimeoutCallback_Params_Data();
  ~TextSuggestionBackend_SuggestionMenuTimeoutCallback_Params_Data() = delete;
};
static_assert(sizeof(TextSuggestionBackend_SuggestionMenuTimeoutCallback_Params_Data) == 16,
              "Bad sizeof(TextSuggestionBackend_SuggestionMenuTimeoutCallback_Params_Data)");

}  // namespace internal


class TextSuggestionBackend_ApplySpellCheckSuggestion_ParamsDataView {
 public:
  TextSuggestionBackend_ApplySpellCheckSuggestion_ParamsDataView() = default;

  TextSuggestionBackend_ApplySpellCheckSuggestion_ParamsDataView(
      internal::TextSuggestionBackend_ApplySpellCheckSuggestion_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSuggestionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSuggestion(UserType* output) {
    
    auto* pointer = data_->suggestion.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::TextSuggestionBackend_ApplySpellCheckSuggestion_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TextSuggestionBackend_ApplyTextSuggestion_ParamsDataView {
 public:
  TextSuggestionBackend_ApplyTextSuggestion_ParamsDataView() = default;

  TextSuggestionBackend_ApplyTextSuggestion_ParamsDataView(
      internal::TextSuggestionBackend_ApplyTextSuggestion_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t marker_tag() const {
    return data_->marker_tag;
  }
  int32_t suggestion_index() const {
    return data_->suggestion_index;
  }
 private:
  internal::TextSuggestionBackend_ApplyTextSuggestion_Params_Data* data_ = nullptr;
};



class TextSuggestionBackend_DeleteActiveSuggestionRange_ParamsDataView {
 public:
  TextSuggestionBackend_DeleteActiveSuggestionRange_ParamsDataView() = default;

  TextSuggestionBackend_DeleteActiveSuggestionRange_ParamsDataView(
      internal::TextSuggestionBackend_DeleteActiveSuggestionRange_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::TextSuggestionBackend_DeleteActiveSuggestionRange_Params_Data* data_ = nullptr;
};



class TextSuggestionBackend_OnNewWordAddedToDictionary_ParamsDataView {
 public:
  TextSuggestionBackend_OnNewWordAddedToDictionary_ParamsDataView() = default;

  TextSuggestionBackend_OnNewWordAddedToDictionary_ParamsDataView(
      internal::TextSuggestionBackend_OnNewWordAddedToDictionary_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSuggestionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSuggestion(UserType* output) {
    
    auto* pointer = data_->suggestion.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::TextSuggestionBackend_OnNewWordAddedToDictionary_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TextSuggestionBackend_OnSuggestionMenuClosed_ParamsDataView {
 public:
  TextSuggestionBackend_OnSuggestionMenuClosed_ParamsDataView() = default;

  TextSuggestionBackend_OnSuggestionMenuClosed_ParamsDataView(
      internal::TextSuggestionBackend_OnSuggestionMenuClosed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::TextSuggestionBackend_OnSuggestionMenuClosed_Params_Data* data_ = nullptr;
};



class TextSuggestionBackend_SuggestionMenuTimeoutCallback_ParamsDataView {
 public:
  TextSuggestionBackend_SuggestionMenuTimeoutCallback_ParamsDataView() = default;

  TextSuggestionBackend_SuggestionMenuTimeoutCallback_ParamsDataView(
      internal::TextSuggestionBackend_SuggestionMenuTimeoutCallback_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t max_number_of_suggestions() const {
    return data_->max_number_of_suggestions;
  }
 private:
  internal::TextSuggestionBackend_SuggestionMenuTimeoutCallback_Params_Data* data_ = nullptr;
};


inline void TextSuggestionBackend_ApplySpellCheckSuggestion_ParamsDataView::GetSuggestionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->suggestion.Get();
  *output = mojo::StringDataView(pointer, message_);
}






inline void TextSuggestionBackend_OnNewWordAddedToDictionary_ParamsDataView::GetSuggestionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->suggestion.Get();
  *output = mojo::StringDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_MESSAGES_MOJOM_PARAMS_DATA_H_