// third_party/blink/public/mojom/input/input_event.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_EVENT_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_EVENT_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/input/input_event.mojom-shared-internal.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {


}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class Button : int32_t {
  
  kNoButton = -1,
  
  kLeft = 0,
  
  kMiddle = 1,
  
  kRight = 2,
  
  kBarrel = 2,
  
  kBack = 3,
  
  kForward = 4,
  
  kEraser = 5,
  kMinValue = -1,
  kMaxValue = 5,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, Button value);
inline bool IsKnownEnumValue(Button value) {
  return internal::Button_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class DispatchType : int32_t {
  
  kBlocking = 0,
  
  kEventNonBlocking = 1,
  
  kListenersNonBlockingPassive = 2,
  
  kListenersForcedNonBlockingDueToFling = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, DispatchType value);
inline bool IsKnownEnumValue(DispatchType value) {
  return internal::DispatchType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class EventType : int32_t {
  
  kUndefined = -1,
  
  kTypeFirst = -1,
  
  kMouseDown = 0,
  
  kMouseTypeFirst = 0,
  
  kMouseUp = 1,
  
  kMouseMove = 2,
  
  kMouseEnter = 3,
  
  kMouseLeave = 4,
  
  kContextMenu = 5,
  
  kMouseTypeLast = 5,
  
  kMouseWheel = 6,
  
  kRawKeyDown = 7,
  
  kKeyboardTypeFirst = 7,
  
  kKeyDown = 8,
  
  kKeyUp = 9,
  
  kChar = 10,
  
  kKeyboardTypeLast = 10,
  
  kGestureScrollBegin = 11,
  
  kGestureTypeFirst = 11,
  
  kGestureScrollEnd = 12,
  
  kGestureScrollUpdate = 13,
  
  kGestureFlingStart = 14,
  
  kGestureFlingCancel = 15,
  
  kGesturePinchBegin = 16,
  
  kGesturePinchTypeFirst = 16,
  
  kGesturePinchEnd = 17,
  
  kGesturePinchUpdate = 18,
  
  kGesturePinchTypeLast = 18,
  
  kGestureTapDown = 19,
  
  kGestureShowPress = 20,
  
  kGestureTap = 21,
  
  kGestureTapCancel = 22,
  
  kGestureShortPress = 23,
  
  kGestureLongPress = 24,
  
  kGestureLongTap = 25,
  
  kGestureTwoFingerTap = 26,
  
  kGestureTapUnconfirmed = 27,
  
  kGestureDoubleTap = 28,
  
  kGestureTypeLast = 28,
  
  kTouchStart = 29,
  
  kTouchTypeFirst = 29,
  
  kTouchMove = 30,
  
  kTouchEnd = 31,
  
  kTouchCancel = 32,
  
  kTouchScrollStarted = 33,
  
  kTouchTypeLast = 33,
  
  kPointerDown = 34,
  
  kPointerTypeFirst = 34,
  
  kPointerUp = 35,
  
  kPointerMove = 36,
  
  kPointerRawUpdate = 37,
  
  kPointerCancel = 38,
  
  kPointerCausedUaAction = 39,
  
  kPointerTypeLast = 39,
  
  kTypeLast = 39,
  kMinValue = -1,
  kMaxValue = 39,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, EventType value);
inline bool IsKnownEnumValue(EventType value) {
  return internal::EventType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::Button>
    : public mojo::internal::EnumHashImpl<::blink::mojom::Button> {};

template <>
struct hash<::blink::mojom::DispatchType>
    : public mojo::internal::EnumHashImpl<::blink::mojom::DispatchType> {};

template <>
struct hash<::blink::mojom::EventType>
    : public mojo::internal::EnumHashImpl<::blink::mojom::EventType> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::Button, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::Button, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::Button>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::DispatchType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::DispatchType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::DispatchType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::EventType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::EventType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::EventType>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {


}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::Button> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::Button value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::DispatchType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::DispatchType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::EventType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::EventType value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_EVENT_MOJOM_SHARED_H_