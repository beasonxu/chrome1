// third_party/blink/public/mojom/input/input_event_result.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/input/input_event_result.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/input/input_event_result.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* InputEventResultSourceToStringHelper(InputEventResultSource value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case InputEventResultSource::kUnknown:
      return "kUnknown";
    case InputEventResultSource::kCompositorThread:
      return "kCompositorThread";
    case InputEventResultSource::kMainThread:
      return "kMainThread";
    case InputEventResultSource::kBrowser:
      return "kBrowser";
    default:
      return nullptr;
  }
}

std::string InputEventResultSourceToString(InputEventResultSource value) {
  const char *str = InputEventResultSourceToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown InputEventResultSource value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, InputEventResultSource value) {
  return os << InputEventResultSourceToString(value);
}

static NOINLINE const char* InputEventResultStateToStringHelper(InputEventResultState value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case InputEventResultState::kUnknown:
      return "kUnknown";
    case InputEventResultState::kConsumed:
      return "kConsumed";
    case InputEventResultState::kNotConsumed:
      return "kNotConsumed";
    case InputEventResultState::kNoConsumerExists:
      return "kNoConsumerExists";
    case InputEventResultState::kIgnored:
      return "kIgnored";
    case InputEventResultState::kSetNonBlocking:
      return "kSetNonBlocking";
    case InputEventResultState::kSetNonBlockingDueToFling:
      return "kSetNonBlockingDueToFling";
    default:
      return nullptr;
  }
}

std::string InputEventResultStateToString(InputEventResultState value) {
  const char *str = InputEventResultStateToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown InputEventResultState value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, InputEventResultState value) {
  return os << InputEventResultStateToString(value);
}

namespace internal {

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::InputEventResultSource>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::InputEventResultSource value) {
  return std::move(context).WriteString(::blink::mojom::InputEventResultSourceToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::InputEventResultState>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::InputEventResultState value) {
  return std::move(context).WriteString(::blink::mojom::InputEventResultStateToString(value));
}

} // namespace perfetto