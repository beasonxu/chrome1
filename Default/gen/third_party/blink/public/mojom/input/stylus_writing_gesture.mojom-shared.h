// third_party/blink/public/mojom/input/stylus_writing_gesture.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_STYLUS_WRITING_GESTURE_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_STYLUS_WRITING_GESTURE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/input/stylus_writing_gesture.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {
class StylusWritingGestureDataDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::StylusWritingGestureDataDataView> {
  using Data = ::blink::mojom::internal::StylusWritingGestureData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class StylusWritingGestureAction : int32_t {
  
  DELETE_TEXT = 0,
  
  ADD_SPACE_OR_TEXT = 1,
  
  REMOVE_SPACES = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, StylusWritingGestureAction value);
inline bool IsKnownEnumValue(StylusWritingGestureAction value) {
  return internal::StylusWritingGestureAction_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class StylusWritingGestureDataDataView {
 public:
  StylusWritingGestureDataDataView() = default;

  StylusWritingGestureDataDataView(
      internal::StylusWritingGestureData_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadAction(UserType* output) const {
    auto data_value = data_->action;
    return mojo::internal::Deserialize<::blink::mojom::StylusWritingGestureAction>(
        data_value, output);
  }
  StylusWritingGestureAction action() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::StylusWritingGestureAction>(data_->action));
  }
  inline void GetStartPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStartPoint(UserType* output) {
    
    auto* pointer = data_->start_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
  inline void GetEndPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEndPoint(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::gfx::mojom::PointDataView, UserType>(),
    "Attempting to read the optional `end_point` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadEndPoint` instead "
    "of `ReadEndPoint if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->end_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
  inline void GetTextAlternativeDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTextAlternative(UserType* output) {
    
    auto* pointer = data_->text_alternative.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetTextToInsertDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTextToInsert(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::String16DataView, UserType>(),
    "Attempting to read the optional `text_to_insert` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadTextToInsert` instead "
    "of `ReadTextToInsert if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->text_to_insert.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
 private:
  internal::StylusWritingGestureData_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::StylusWritingGestureAction>
    : public mojo::internal::EnumHashImpl<::blink::mojom::StylusWritingGestureAction> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::StylusWritingGestureAction, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::StylusWritingGestureAction, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::StylusWritingGestureAction>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::StylusWritingGestureDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::StylusWritingGestureDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::StylusWritingGestureData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::blink::mojom::StylusWritingGestureAction>(
        Traits::action(input), &fragment->action);
    decltype(Traits::start_point(input)) in_start_point = Traits::start_point(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->start_point)::BaseType> start_point_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointDataView>(
        in_start_point, start_point_fragment);
    fragment->start_point.Set(
        start_point_fragment.is_null() ? nullptr : start_point_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->start_point.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null start_point in StylusWritingGestureData struct");
    decltype(Traits::end_point(input)) in_end_point = Traits::end_point(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->end_point)::BaseType> end_point_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointDataView>(
        in_end_point, end_point_fragment);
    fragment->end_point.Set(
        end_point_fragment.is_null() ? nullptr : end_point_fragment.data());
    decltype(Traits::text_alternative(input)) in_text_alternative = Traits::text_alternative(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->text_alternative)::BaseType> text_alternative_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_text_alternative, text_alternative_fragment);
    fragment->text_alternative.Set(
        text_alternative_fragment.is_null() ? nullptr : text_alternative_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->text_alternative.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null text_alternative in StylusWritingGestureData struct");
    decltype(Traits::text_to_insert(input)) in_text_to_insert = Traits::text_to_insert(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->text_to_insert)::BaseType> text_to_insert_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_text_to_insert, text_to_insert_fragment);
    fragment->text_to_insert.Set(
        text_to_insert_fragment.is_null() ? nullptr : text_to_insert_fragment.data());
  }

  static bool Deserialize(::blink::mojom::internal::StylusWritingGestureData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::StylusWritingGestureDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void StylusWritingGestureDataDataView::GetStartPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->start_point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}
inline void StylusWritingGestureDataDataView::GetEndPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->end_point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}
inline void StylusWritingGestureDataDataView::GetTextAlternativeDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->text_alternative.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void StylusWritingGestureDataDataView::GetTextToInsertDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->text_to_insert.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::StylusWritingGestureAction> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::StylusWritingGestureAction value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_STYLUS_WRITING_GESTURE_MOJOM_SHARED_H_