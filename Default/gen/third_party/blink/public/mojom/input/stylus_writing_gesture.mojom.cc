// third_party/blink/public/mojom/input/stylus_writing_gesture.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/input/stylus_writing_gesture.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/input/stylus_writing_gesture.mojom-params-data.h"
#include "third_party/blink/public/mojom/input/stylus_writing_gesture.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/input/stylus_writing_gesture.mojom-import-headers.h"
#include "third_party/blink/public/mojom/input/stylus_writing_gesture.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_STYLUS_WRITING_GESTURE_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_STYLUS_WRITING_GESTURE_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
StylusWritingGestureData::StylusWritingGestureData()
    : action(),
      start_point(),
      end_point(),
      text_alternative(),
      text_to_insert() {}

StylusWritingGestureData::StylusWritingGestureData(
    StylusWritingGestureAction action_in,
    const ::gfx::Point& start_point_in,
    const absl::optional<::gfx::Point>& end_point_in,
    const ::std::u16string& text_alternative_in,
    const absl::optional<::std::u16string>& text_to_insert_in)
    : action(std::move(action_in)),
      start_point(std::move(start_point_in)),
      end_point(std::move(end_point_in)),
      text_alternative(std::move(text_alternative_in)),
      text_to_insert(std::move(text_to_insert_in)) {}

StylusWritingGestureData::~StylusWritingGestureData() = default;

void StylusWritingGestureData::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "action"), this->action,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type StylusWritingGestureAction>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "start_point"), this->start_point,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Point&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "end_point"), this->end_point,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::gfx::Point>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_alternative"), this->text_alternative,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::std::u16string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_to_insert"), this->text_to_insert,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::std::u16string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StylusWritingGestureData::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::StylusWritingGestureData::DataView, ::blink::mojom::StylusWritingGestureDataPtr>::Read(
    ::blink::mojom::StylusWritingGestureData::DataView input,
    ::blink::mojom::StylusWritingGestureDataPtr* output) {
  bool success = true;
  ::blink::mojom::StylusWritingGestureDataPtr result(::blink::mojom::StylusWritingGestureData::New());
  
      if (success && !input.ReadAction(&result->action))
        success = false;
      if (success && !input.ReadStartPoint(&result->start_point))
        success = false;
      if (success && !input.ReadEndPoint(&result->end_point))
        success = false;
      if (success && !input.ReadTextAlternative(&result->text_alternative))
        success = false;
      if (success && !input.ReadTextToInsert(&result->text_to_insert))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif