// third_party/blink/public/mojom/handwriting/handwriting.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_HANDWRITING_HANDWRITING_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_HANDWRITING_HANDWRITING_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace handwriting {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HandwritingRecognizer_GetPrediction_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::HandwritingStroke_Data>>> strokes;
  mojo::internal::Pointer<internal::HandwritingHints_Data> hints;

 private:
  friend class mojo::internal::MessageFragment<HandwritingRecognizer_GetPrediction_Params_Data>;

  HandwritingRecognizer_GetPrediction_Params_Data();
  ~HandwritingRecognizer_GetPrediction_Params_Data() = delete;
};
static_assert(sizeof(HandwritingRecognizer_GetPrediction_Params_Data) == 24,
              "Bad sizeof(HandwritingRecognizer_GetPrediction_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HandwritingRecognizer_GetPrediction_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::HandwritingPrediction_Data>>> prediction;

 private:
  friend class mojo::internal::MessageFragment<HandwritingRecognizer_GetPrediction_ResponseParams_Data>;

  HandwritingRecognizer_GetPrediction_ResponseParams_Data();
  ~HandwritingRecognizer_GetPrediction_ResponseParams_Data() = delete;
};
static_assert(sizeof(HandwritingRecognizer_GetPrediction_ResponseParams_Data) == 16,
              "Bad sizeof(HandwritingRecognizer_GetPrediction_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HandwritingRecognitionService_CreateHandwritingRecognizer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::HandwritingModelConstraint_Data> constraint;

 private:
  friend class mojo::internal::MessageFragment<HandwritingRecognitionService_CreateHandwritingRecognizer_Params_Data>;

  HandwritingRecognitionService_CreateHandwritingRecognizer_Params_Data();
  ~HandwritingRecognitionService_CreateHandwritingRecognizer_Params_Data() = delete;
};
static_assert(sizeof(HandwritingRecognitionService_CreateHandwritingRecognizer_Params_Data) == 16,
              "Bad sizeof(HandwritingRecognitionService_CreateHandwritingRecognizer_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HandwritingRecognitionService_CreateHandwritingRecognizer_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  mojo::internal::Interface_Data handwriting_recognizer;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<HandwritingRecognitionService_CreateHandwritingRecognizer_ResponseParams_Data>;

  HandwritingRecognitionService_CreateHandwritingRecognizer_ResponseParams_Data();
  ~HandwritingRecognitionService_CreateHandwritingRecognizer_ResponseParams_Data() = delete;
};
static_assert(sizeof(HandwritingRecognitionService_CreateHandwritingRecognizer_ResponseParams_Data) == 24,
              "Bad sizeof(HandwritingRecognitionService_CreateHandwritingRecognizer_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HandwritingRecognitionService_QueryHandwritingRecognizer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::HandwritingModelConstraint_Data> constraint;

 private:
  friend class mojo::internal::MessageFragment<HandwritingRecognitionService_QueryHandwritingRecognizer_Params_Data>;

  HandwritingRecognitionService_QueryHandwritingRecognizer_Params_Data();
  ~HandwritingRecognitionService_QueryHandwritingRecognizer_Params_Data() = delete;
};
static_assert(sizeof(HandwritingRecognitionService_QueryHandwritingRecognizer_Params_Data) == 16,
              "Bad sizeof(HandwritingRecognitionService_QueryHandwritingRecognizer_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::QueryHandwritingRecognizerResult_Data> result;

 private:
  friend class mojo::internal::MessageFragment<HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParams_Data>;

  HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParams_Data();
  ~HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParams_Data() = delete;
};
static_assert(sizeof(HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParams_Data) == 16,
              "Bad sizeof(HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParams_Data)");

}  // namespace internal


class HandwritingRecognizer_GetPrediction_ParamsDataView {
 public:
  HandwritingRecognizer_GetPrediction_ParamsDataView() = default;

  HandwritingRecognizer_GetPrediction_ParamsDataView(
      internal::HandwritingRecognizer_GetPrediction_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStrokesDataView(
      mojo::ArrayDataView<HandwritingStrokeDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStrokes(UserType* output) {
    
    auto* pointer = data_->strokes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::handwriting::mojom::HandwritingStrokeDataView>>(
        pointer, output, message_);
  }
  inline void GetHintsDataView(
      HandwritingHintsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHints(UserType* output) {
    
    auto* pointer = data_->hints.Get();
    return mojo::internal::Deserialize<::handwriting::mojom::HandwritingHintsDataView>(
        pointer, output, message_);
  }
 private:
  internal::HandwritingRecognizer_GetPrediction_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HandwritingRecognizer_GetPrediction_ResponseParamsDataView {
 public:
  HandwritingRecognizer_GetPrediction_ResponseParamsDataView() = default;

  HandwritingRecognizer_GetPrediction_ResponseParamsDataView(
      internal::HandwritingRecognizer_GetPrediction_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPredictionDataView(
      mojo::ArrayDataView<HandwritingPredictionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrediction(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<::handwriting::mojom::HandwritingPredictionDataView>, UserType>(),
    "Attempting to read the optional `prediction` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPrediction` instead "
    "of `ReadPrediction if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->prediction.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::handwriting::mojom::HandwritingPredictionDataView>>(
        pointer, output, message_);
  }
 private:
  internal::HandwritingRecognizer_GetPrediction_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HandwritingRecognitionService_CreateHandwritingRecognizer_ParamsDataView {
 public:
  HandwritingRecognitionService_CreateHandwritingRecognizer_ParamsDataView() = default;

  HandwritingRecognitionService_CreateHandwritingRecognizer_ParamsDataView(
      internal::HandwritingRecognitionService_CreateHandwritingRecognizer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetConstraintDataView(
      HandwritingModelConstraintDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConstraint(UserType* output) {
    
    auto* pointer = data_->constraint.Get();
    return mojo::internal::Deserialize<::handwriting::mojom::HandwritingModelConstraintDataView>(
        pointer, output, message_);
  }
 private:
  internal::HandwritingRecognitionService_CreateHandwritingRecognizer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HandwritingRecognitionService_CreateHandwritingRecognizer_ResponseParamsDataView {
 public:
  HandwritingRecognitionService_CreateHandwritingRecognizer_ResponseParamsDataView() = default;

  HandwritingRecognitionService_CreateHandwritingRecognizer_ResponseParamsDataView(
      internal::HandwritingRecognitionService_CreateHandwritingRecognizer_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::handwriting::mojom::CreateHandwritingRecognizerResult>(
        data_value, output);
  }
  CreateHandwritingRecognizerResult result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::handwriting::mojom::CreateHandwritingRecognizerResult>(data_->result));
  }
  template <typename UserType>
  UserType TakeHandwritingRecognizer() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::handwriting::mojom::HandwritingRecognizerInterfaceBase>>(
            &data_->handwriting_recognizer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::HandwritingRecognitionService_CreateHandwritingRecognizer_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HandwritingRecognitionService_QueryHandwritingRecognizer_ParamsDataView {
 public:
  HandwritingRecognitionService_QueryHandwritingRecognizer_ParamsDataView() = default;

  HandwritingRecognitionService_QueryHandwritingRecognizer_ParamsDataView(
      internal::HandwritingRecognitionService_QueryHandwritingRecognizer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetConstraintDataView(
      HandwritingModelConstraintDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConstraint(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::handwriting::mojom::HandwritingModelConstraintDataView, UserType>(),
    "Attempting to read the optional `constraint` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadConstraint` instead "
    "of `ReadConstraint if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->constraint.Get();
    return mojo::internal::Deserialize<::handwriting::mojom::HandwritingModelConstraintDataView>(
        pointer, output, message_);
  }
 private:
  internal::HandwritingRecognitionService_QueryHandwritingRecognizer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParamsDataView {
 public:
  HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParamsDataView() = default;

  HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParamsDataView(
      internal::HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      QueryHandwritingRecognizerResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::handwriting::mojom::QueryHandwritingRecognizerResultDataView, UserType>(),
    "Attempting to read the optional `result` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadResult` instead "
    "of `ReadResult if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::handwriting::mojom::QueryHandwritingRecognizerResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void HandwritingRecognizer_GetPrediction_ParamsDataView::GetStrokesDataView(
    mojo::ArrayDataView<HandwritingStrokeDataView>* output) {
  auto pointer = data_->strokes.Get();
  *output = mojo::ArrayDataView<HandwritingStrokeDataView>(pointer, message_);
}
inline void HandwritingRecognizer_GetPrediction_ParamsDataView::GetHintsDataView(
    HandwritingHintsDataView* output) {
  auto pointer = data_->hints.Get();
  *output = HandwritingHintsDataView(pointer, message_);
}


inline void HandwritingRecognizer_GetPrediction_ResponseParamsDataView::GetPredictionDataView(
    mojo::ArrayDataView<HandwritingPredictionDataView>* output) {
  auto pointer = data_->prediction.Get();
  *output = mojo::ArrayDataView<HandwritingPredictionDataView>(pointer, message_);
}


inline void HandwritingRecognitionService_CreateHandwritingRecognizer_ParamsDataView::GetConstraintDataView(
    HandwritingModelConstraintDataView* output) {
  auto pointer = data_->constraint.Get();
  *output = HandwritingModelConstraintDataView(pointer, message_);
}




inline void HandwritingRecognitionService_QueryHandwritingRecognizer_ParamsDataView::GetConstraintDataView(
    HandwritingModelConstraintDataView* output) {
  auto pointer = data_->constraint.Get();
  *output = HandwritingModelConstraintDataView(pointer, message_);
}


inline void HandwritingRecognitionService_QueryHandwritingRecognizer_ResponseParamsDataView::GetResultDataView(
    QueryHandwritingRecognizerResultDataView* output) {
  auto pointer = data_->result.Get();
  *output = QueryHandwritingRecognizerResultDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace handwriting

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_HANDWRITING_HANDWRITING_MOJOM_PARAMS_DATA_H_