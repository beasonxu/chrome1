// third_party/blink/public/mojom/font_unique_name_lookup/font_unique_name_lookup.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FONT_UNIQUE_NAME_LOOKUP_FONT_UNIQUE_NAME_LOOKUP_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FONT_UNIQUE_NAME_LOOKUP_FONT_UNIQUE_NAME_LOOKUP_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_Params_Data>;

  FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_Params_Data();
  ~FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_Params_Data() = delete;
};
static_assert(sizeof(FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_Params_Data) == 8,
              "Bad sizeof(FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t sync_available : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> font_lookup_table;

 private:
  friend class mojo::internal::MessageFragment<FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParams_Data>;

  FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParams_Data();
  ~FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParams_Data() = delete;
};
static_assert(sizeof(FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParams_Data) == 24,
              "Bad sizeof(FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FontUniqueNameLookup_GetUniqueNameLookupTable_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FontUniqueNameLookup_GetUniqueNameLookupTable_Params_Data>;

  FontUniqueNameLookup_GetUniqueNameLookupTable_Params_Data();
  ~FontUniqueNameLookup_GetUniqueNameLookupTable_Params_Data() = delete;
};
static_assert(sizeof(FontUniqueNameLookup_GetUniqueNameLookupTable_Params_Data) == 8,
              "Bad sizeof(FontUniqueNameLookup_GetUniqueNameLookupTable_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> font_lookup_table;

 private:
  friend class mojo::internal::MessageFragment<FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParams_Data>;

  FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParams_Data();
  ~FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParams_Data() = delete;
};
static_assert(sizeof(FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParams_Data) == 16,
              "Bad sizeof(FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParams_Data)");

}  // namespace internal


class FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ParamsDataView {
 public:
  FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ParamsDataView() = default;

  FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ParamsDataView(
      internal::FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_Params_Data* data_ = nullptr;
};



class FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParamsDataView {
 public:
  FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParamsDataView() = default;

  FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParamsDataView(
      internal::FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool sync_available() const {
    return data_->sync_available;
  }
  inline void GetFontLookupTableDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFontLookupTable(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView, UserType>(),
    "Attempting to read the optional `font_lookup_table` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFontLookupTable` instead "
    "of `ReadFontLookupTable if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->font_lookup_table.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, message_);
  }
 private:
  internal::FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FontUniqueNameLookup_GetUniqueNameLookupTable_ParamsDataView {
 public:
  FontUniqueNameLookup_GetUniqueNameLookupTable_ParamsDataView() = default;

  FontUniqueNameLookup_GetUniqueNameLookupTable_ParamsDataView(
      internal::FontUniqueNameLookup_GetUniqueNameLookupTable_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FontUniqueNameLookup_GetUniqueNameLookupTable_Params_Data* data_ = nullptr;
};



class FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParamsDataView {
 public:
  FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParamsDataView() = default;

  FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParamsDataView(
      internal::FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFontLookupTableDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFontLookupTable(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView, UserType>(),
    "Attempting to read the optional `font_lookup_table` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFontLookupTable` instead "
    "of `ReadFontLookupTable if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->font_lookup_table.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, message_);
  }
 private:
  internal::FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void FontUniqueNameLookup_GetUniqueNameLookupTableIfAvailable_ResponseParamsDataView::GetFontLookupTableDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->font_lookup_table.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, message_);
}




inline void FontUniqueNameLookup_GetUniqueNameLookupTable_ResponseParamsDataView::GetFontLookupTableDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->font_lookup_table.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FONT_UNIQUE_NAME_LOOKUP_FONT_UNIQUE_NAME_LOOKUP_MOJOM_PARAMS_DATA_H_