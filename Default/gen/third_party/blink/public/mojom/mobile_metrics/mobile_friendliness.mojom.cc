// third_party/blink/public/mojom/mobile_metrics/mobile_friendliness.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/mobile_metrics/mobile_friendliness.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/mobile_metrics/mobile_friendliness.mojom-params-data.h"
#include "third_party/blink/public/mojom/mobile_metrics/mobile_friendliness.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/mobile_metrics/mobile_friendliness.mojom-import-headers.h"
#include "third_party/blink/public/mojom/mobile_metrics/mobile_friendliness.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_MOBILE_METRICS_MOBILE_FRIENDLINESS_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_MOBILE_METRICS_MOBILE_FRIENDLINESS_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
MobileFriendliness::MobileFriendliness()
    : viewport_device_width(),
      viewport_initial_scale_x10(),
      viewport_hardcoded_width(),
      allow_user_zoom(),
      small_text_ratio(),
      text_content_outside_viewport_percentage(0),
      bad_tap_targets_ratio() {}

MobileFriendliness::MobileFriendliness(
    bool viewport_device_width_in,
    int32_t viewport_initial_scale_x10_in,
    int32_t viewport_hardcoded_width_in,
    bool allow_user_zoom_in,
    int32_t small_text_ratio_in,
    int32_t text_content_outside_viewport_percentage_in,
    int32_t bad_tap_targets_ratio_in)
    : viewport_device_width(std::move(viewport_device_width_in)),
      viewport_initial_scale_x10(std::move(viewport_initial_scale_x10_in)),
      viewport_hardcoded_width(std::move(viewport_hardcoded_width_in)),
      allow_user_zoom(std::move(allow_user_zoom_in)),
      small_text_ratio(std::move(small_text_ratio_in)),
      text_content_outside_viewport_percentage(std::move(text_content_outside_viewport_percentage_in)),
      bad_tap_targets_ratio(std::move(bad_tap_targets_ratio_in)) {}

MobileFriendliness::~MobileFriendliness() = default;

void MobileFriendliness::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_device_width"), this->viewport_device_width,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_initial_scale_x10"), this->viewport_initial_scale_x10,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_hardcoded_width"), this->viewport_hardcoded_width,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allow_user_zoom"), this->allow_user_zoom,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "small_text_ratio"), this->small_text_ratio,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_content_outside_viewport_percentage"), this->text_content_outside_viewport_percentage,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bad_tap_targets_ratio"), this->bad_tap_targets_ratio,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool MobileFriendliness::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::MobileFriendliness::DataView, ::blink::mojom::MobileFriendlinessPtr>::Read(
    ::blink::mojom::MobileFriendliness::DataView input,
    ::blink::mojom::MobileFriendlinessPtr* output) {
  bool success = true;
  ::blink::mojom::MobileFriendlinessPtr result(::blink::mojom::MobileFriendliness::New());
  
      if (success)
        result->viewport_device_width = input.viewport_device_width();
      if (success)
        result->viewport_initial_scale_x10 = input.viewport_initial_scale_x10();
      if (success)
        result->viewport_hardcoded_width = input.viewport_hardcoded_width();
      if (success)
        result->allow_user_zoom = input.allow_user_zoom();
      if (success)
        result->small_text_ratio = input.small_text_ratio();
      if (success)
        result->text_content_outside_viewport_percentage = input.text_content_outside_viewport_percentage();
      if (success)
        result->bad_tap_targets_ratio = input.bad_tap_targets_ratio();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif