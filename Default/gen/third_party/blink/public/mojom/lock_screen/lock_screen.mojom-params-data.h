// third_party/blink/public/mojom/lock_screen/lock_screen.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOCK_SCREEN_LOCK_SCREEN_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOCK_SCREEN_LOCK_SCREEN_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LockScreenService_GetKeys_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LockScreenService_GetKeys_Params_Data>;

  LockScreenService_GetKeys_Params_Data();
  ~LockScreenService_GetKeys_Params_Data() = delete;
};
static_assert(sizeof(LockScreenService_GetKeys_Params_Data) == 8,
              "Bad sizeof(LockScreenService_GetKeys_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LockScreenService_GetKeys_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> keys;

 private:
  friend class mojo::internal::MessageFragment<LockScreenService_GetKeys_ResponseParams_Data>;

  LockScreenService_GetKeys_ResponseParams_Data();
  ~LockScreenService_GetKeys_ResponseParams_Data() = delete;
};
static_assert(sizeof(LockScreenService_GetKeys_ResponseParams_Data) == 16,
              "Bad sizeof(LockScreenService_GetKeys_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LockScreenService_SetData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> key;
  mojo::internal::Pointer<mojo::internal::String_Data> data;

 private:
  friend class mojo::internal::MessageFragment<LockScreenService_SetData_Params_Data>;

  LockScreenService_SetData_Params_Data();
  ~LockScreenService_SetData_Params_Data() = delete;
};
static_assert(sizeof(LockScreenService_SetData_Params_Data) == 24,
              "Bad sizeof(LockScreenService_SetData_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LockScreenService_SetData_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LockScreenService_SetData_ResponseParams_Data>;

  LockScreenService_SetData_ResponseParams_Data();
  ~LockScreenService_SetData_ResponseParams_Data() = delete;
};
static_assert(sizeof(LockScreenService_SetData_ResponseParams_Data) == 16,
              "Bad sizeof(LockScreenService_SetData_ResponseParams_Data)");

}  // namespace internal


class LockScreenService_GetKeys_ParamsDataView {
 public:
  LockScreenService_GetKeys_ParamsDataView() = default;

  LockScreenService_GetKeys_ParamsDataView(
      internal::LockScreenService_GetKeys_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LockScreenService_GetKeys_Params_Data* data_ = nullptr;
};



class LockScreenService_GetKeys_ResponseParamsDataView {
 public:
  LockScreenService_GetKeys_ResponseParamsDataView() = default;

  LockScreenService_GetKeys_ResponseParamsDataView(
      internal::LockScreenService_GetKeys_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeysDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeys(UserType* output) {
    
    auto* pointer = data_->keys.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::LockScreenService_GetKeys_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LockScreenService_SetData_ParamsDataView {
 public:
  LockScreenService_SetData_ParamsDataView() = default;

  LockScreenService_SetData_ParamsDataView(
      internal::LockScreenService_SetData_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = data_->key.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetDataDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::LockScreenService_SetData_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LockScreenService_SetData_ResponseParamsDataView {
 public:
  LockScreenService_SetData_ResponseParamsDataView() = default;

  LockScreenService_SetData_ResponseParamsDataView(
      internal::LockScreenService_SetData_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::LockScreenServiceStatus>(
        data_value, output);
  }
  LockScreenServiceStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::LockScreenServiceStatus>(data_->status));
  }
 private:
  internal::LockScreenService_SetData_ResponseParams_Data* data_ = nullptr;
};




inline void LockScreenService_GetKeys_ResponseParamsDataView::GetKeysDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->keys.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}


inline void LockScreenService_SetData_ParamsDataView::GetKeyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->key.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void LockScreenService_SetData_ParamsDataView::GetDataDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->data.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOCK_SCREEN_LOCK_SCREEN_MOJOM_PARAMS_DATA_H_