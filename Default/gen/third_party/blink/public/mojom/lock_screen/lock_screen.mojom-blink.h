// third_party/blink/public/mojom/lock_screen/lock_screen.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOCK_SCREEN_LOCK_SCREEN_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOCK_SCREEN_LOCK_SCREEN_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/lock_screen/lock_screen.mojom-shared.h"
#include "third_party/blink/public/mojom/lock_screen/lock_screen.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace WTF {
struct blink_mojom_internal_LockScreenServiceStatus_DataHashFn {
  static unsigned GetHash(const ::blink::mojom::LockScreenServiceStatus& value) {
    using utype = std::underlying_type<::blink::mojom::LockScreenServiceStatus>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::blink::mojom::LockScreenServiceStatus& left, const ::blink::mojom::LockScreenServiceStatus& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::blink::mojom::LockScreenServiceStatus>
    : public GenericHashTraits<::blink::mojom::LockScreenServiceStatus> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::blink::mojom::LockScreenServiceStatus EmptyValue() { return static_cast<::blink::mojom::LockScreenServiceStatus>(-1000000); }
  static void ConstructDeletedValue(::blink::mojom::LockScreenServiceStatus& slot, bool) {
    slot = static_cast<::blink::mojom::LockScreenServiceStatus>(-1000001);
  }
  static bool IsDeletedValue(const ::blink::mojom::LockScreenServiceStatus& value) {
    return value == static_cast<::blink::mojom::LockScreenServiceStatus>(-1000001);
  }
};
}  // namespace WTF


namespace blink {
namespace mojom {
namespace blink {

class LockScreenServiceProxy;

template <typename ImplRefTraits>
class LockScreenServiceStub;

class LockScreenServiceRequestValidator;
class LockScreenServiceResponseValidator;


class PLATFORM_EXPORT LockScreenService
    : public LockScreenServiceInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = LockScreenServiceInterfaceBase;
  using Proxy_ = LockScreenServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = LockScreenServiceStub<ImplRefTraits>;

  using RequestValidator_ = LockScreenServiceRequestValidator;
  using ResponseValidator_ = LockScreenServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetKeysMinVersion = 0,
    kSetDataMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GetKeys_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetData_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~LockScreenService() = default;


  using GetKeysCallback = base::OnceCallback<void(const WTF::Vector<WTF::String>&)>;
  
  virtual void GetKeys(GetKeysCallback callback) = 0;


  using SetDataCallback = base::OnceCallback<void(LockScreenServiceStatus)>;
  
  virtual void SetData(const WTF::String& key, const WTF::String& data, SetDataCallback callback) = 0;
};



class PLATFORM_EXPORT LockScreenServiceProxy
    : public LockScreenService {
 public:
  using InterfaceType = LockScreenService;

  explicit LockScreenServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetKeys(GetKeysCallback callback) final;
  
  void SetData(const WTF::String& key, const WTF::String& data, SetDataCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT LockScreenServiceStubDispatch {
 public:
  static bool Accept(LockScreenService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      LockScreenService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<LockScreenService>>
class LockScreenServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  LockScreenServiceStub() = default;
  ~LockScreenServiceStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return LockScreenServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return LockScreenServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT LockScreenServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT LockScreenServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOCK_SCREEN_LOCK_SCREEN_MOJOM_BLINK_H_