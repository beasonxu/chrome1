// third_party/blink/public/mojom/frame/viewport_intersection_state.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_VIEWPORT_INTERSECTION_STATE_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_VIEWPORT_INTERSECTION_STATE_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/frame/viewport_intersection_state.mojom-shared.h"
#include "third_party/blink/public/mojom/frame/viewport_intersection_state.mojom-blink-forward.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-blink.h"
#include "ui/gfx/mojom/transform.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"




#include "third_party/blink/renderer/core/core_export.h"




namespace WTF {
struct blink_mojom_internal_FrameOcclusionState_DataHashFn {
  static unsigned GetHash(const ::blink::mojom::FrameOcclusionState& value) {
    using utype = std::underlying_type<::blink::mojom::FrameOcclusionState>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::blink::mojom::FrameOcclusionState& left, const ::blink::mojom::FrameOcclusionState& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::blink::mojom::FrameOcclusionState>
    : public GenericHashTraits<::blink::mojom::FrameOcclusionState> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::blink::mojom::FrameOcclusionState EmptyValue() { return static_cast<::blink::mojom::FrameOcclusionState>(-1000000); }
  static void ConstructDeletedValue(::blink::mojom::FrameOcclusionState& slot, bool) {
    slot = static_cast<::blink::mojom::FrameOcclusionState>(-1000001);
  }
  static bool IsDeletedValue(const ::blink::mojom::FrameOcclusionState& value) {
    return value == static_cast<::blink::mojom::FrameOcclusionState>(-1000001);
  }
};
}  // namespace WTF


namespace blink {
namespace mojom {
namespace blink {








class CORE_EXPORT ViewportIntersectionState {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ViewportIntersectionState, T>::value>;
  using DataView = ViewportIntersectionStateDataView;
  using Data_ = internal::ViewportIntersectionState_Data;

  template <typename... Args>
  static ViewportIntersectionStatePtr New(Args&&... args) {
    return ViewportIntersectionStatePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ViewportIntersectionStatePtr From(const U& u) {
    return mojo::TypeConverter<ViewportIntersectionStatePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ViewportIntersectionState>::Convert(*this);
  }


  ViewportIntersectionState();

  ViewportIntersectionState(
      const ::gfx::Rect& viewport_intersection,
      const ::gfx::Rect& main_frame_intersection,
      const ::gfx::Rect& compositor_visible_rect,
      FrameOcclusionState occlusion_state,
      const ::gfx::Size& main_frame_viewport_size,
      const ::gfx::Point& main_frame_scroll_position,
      const ::gfx::Transform& main_frame_transform);


  ~ViewportIntersectionState();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ViewportIntersectionStatePtr>
  ViewportIntersectionStatePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ViewportIntersectionState::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ViewportIntersectionState::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ViewportIntersectionState::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ViewportIntersectionState::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ViewportIntersectionState_UnserializedMessageContext<
            UserType, ViewportIntersectionState::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ViewportIntersectionState::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return ViewportIntersectionState::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ViewportIntersectionState_UnserializedMessageContext<
            UserType, ViewportIntersectionState::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ViewportIntersectionState::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::gfx::Rect viewport_intersection;
  
  ::gfx::Rect main_frame_intersection;
  
  ::gfx::Rect compositor_visible_rect;
  
  FrameOcclusionState occlusion_state;
  
  ::gfx::Size main_frame_viewport_size;
  
  ::gfx::Point main_frame_scroll_position;
  
  ::gfx::Transform main_frame_transform;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ViewportIntersectionState::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ViewportIntersectionState::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ViewportIntersectionState::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ViewportIntersectionState::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
ViewportIntersectionStatePtr ViewportIntersectionState::Clone() const {
  return New(
      mojo::Clone(viewport_intersection),
      mojo::Clone(main_frame_intersection),
      mojo::Clone(compositor_visible_rect),
      mojo::Clone(occlusion_state),
      mojo::Clone(main_frame_viewport_size),
      mojo::Clone(main_frame_scroll_position),
      mojo::Clone(main_frame_transform)
  );
}

template <typename T, ViewportIntersectionState::EnableIfSame<T>*>
bool ViewportIntersectionState::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->viewport_intersection, other_struct.viewport_intersection))
    return false;
  if (!mojo::Equals(this->main_frame_intersection, other_struct.main_frame_intersection))
    return false;
  if (!mojo::Equals(this->compositor_visible_rect, other_struct.compositor_visible_rect))
    return false;
  if (!mojo::Equals(this->occlusion_state, other_struct.occlusion_state))
    return false;
  if (!mojo::Equals(this->main_frame_viewport_size, other_struct.main_frame_viewport_size))
    return false;
  if (!mojo::Equals(this->main_frame_scroll_position, other_struct.main_frame_scroll_position))
    return false;
  if (!mojo::Equals(this->main_frame_transform, other_struct.main_frame_transform))
    return false;
  return true;
}

template <typename T, ViewportIntersectionState::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.viewport_intersection < rhs.viewport_intersection)
    return true;
  if (rhs.viewport_intersection < lhs.viewport_intersection)
    return false;
  if (lhs.main_frame_intersection < rhs.main_frame_intersection)
    return true;
  if (rhs.main_frame_intersection < lhs.main_frame_intersection)
    return false;
  if (lhs.compositor_visible_rect < rhs.compositor_visible_rect)
    return true;
  if (rhs.compositor_visible_rect < lhs.compositor_visible_rect)
    return false;
  if (lhs.occlusion_state < rhs.occlusion_state)
    return true;
  if (rhs.occlusion_state < lhs.occlusion_state)
    return false;
  if (lhs.main_frame_viewport_size < rhs.main_frame_viewport_size)
    return true;
  if (rhs.main_frame_viewport_size < lhs.main_frame_viewport_size)
    return false;
  if (lhs.main_frame_scroll_position < rhs.main_frame_scroll_position)
    return true;
  if (rhs.main_frame_scroll_position < lhs.main_frame_scroll_position)
    return false;
  if (lhs.main_frame_transform < rhs.main_frame_transform)
    return true;
  if (rhs.main_frame_transform < lhs.main_frame_transform)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct CORE_EXPORT StructTraits<::blink::mojom::blink::ViewportIntersectionState::DataView,
                                         ::blink::mojom::blink::ViewportIntersectionStatePtr> {
  static bool IsNull(const ::blink::mojom::blink::ViewportIntersectionStatePtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::ViewportIntersectionStatePtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::ViewportIntersectionState::viewport_intersection)& viewport_intersection(
      const ::blink::mojom::blink::ViewportIntersectionStatePtr& input) {
    return input->viewport_intersection;
  }

  static const decltype(::blink::mojom::blink::ViewportIntersectionState::main_frame_intersection)& main_frame_intersection(
      const ::blink::mojom::blink::ViewportIntersectionStatePtr& input) {
    return input->main_frame_intersection;
  }

  static const decltype(::blink::mojom::blink::ViewportIntersectionState::compositor_visible_rect)& compositor_visible_rect(
      const ::blink::mojom::blink::ViewportIntersectionStatePtr& input) {
    return input->compositor_visible_rect;
  }

  static decltype(::blink::mojom::blink::ViewportIntersectionState::occlusion_state) occlusion_state(
      const ::blink::mojom::blink::ViewportIntersectionStatePtr& input) {
    return input->occlusion_state;
  }

  static const decltype(::blink::mojom::blink::ViewportIntersectionState::main_frame_viewport_size)& main_frame_viewport_size(
      const ::blink::mojom::blink::ViewportIntersectionStatePtr& input) {
    return input->main_frame_viewport_size;
  }

  static const decltype(::blink::mojom::blink::ViewportIntersectionState::main_frame_scroll_position)& main_frame_scroll_position(
      const ::blink::mojom::blink::ViewportIntersectionStatePtr& input) {
    return input->main_frame_scroll_position;
  }

  static const decltype(::blink::mojom::blink::ViewportIntersectionState::main_frame_transform)& main_frame_transform(
      const ::blink::mojom::blink::ViewportIntersectionStatePtr& input) {
    return input->main_frame_transform;
  }

  static bool Read(::blink::mojom::blink::ViewportIntersectionState::DataView input, ::blink::mojom::blink::ViewportIntersectionStatePtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_VIEWPORT_INTERSECTION_STATE_MOJOM_BLINK_H_