// third_party/blink/public/mojom/frame/remote_frame.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_REMOTE_FRAME_MOJOM_SHARED_INTERNAL_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_REMOTE_FRAME_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "cc/mojom/render_frame_metadata.mojom-shared-internal.h"
#include "cc/mojom/touch_action.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared-internal.h"
#include "services/network/public/mojom/source_location.mojom-shared-internal.h"
#include "services/network/public/mojom/url_request.mojom-shared-internal.h"
#include "services/network/public/mojom/web_sandbox_flags.mojom-shared-internal.h"
#include "services/viz/public/mojom/compositing/frame_sink_id.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/blob/blob_url_store.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/conversions/conversions.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/frame_owner_properties.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/frame_policy.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/frame_replication_state.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/frame_visual_properties.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/fullscreen.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/intrinsic_sizing_info.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/lifecycle.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/policy_container.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/text_autosizer_page_info.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/tree_scope_type.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/triggering_event_info.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/user_activation_notification_type.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/user_activation_update_types.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/viewport_intersection_state.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/input/focus_type.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/input/scroll_direction.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/loader/referrer.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/messaging/transferable_message.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/navigation/navigation_policy.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/permissions_policy/permissions_policy.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/scroll/scroll_into_view_params.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/security_context/insecure_request_policy.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/timing/resource_timing.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-shared-internal.h"
#include "ui/base/mojom/window_open_disposition.mojom-shared-internal.h"
#include "ui/events/mojom/scroll_granularity.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace blink {
namespace mojom {
namespace internal {
class RemoteMainFrameInterfaces_Data;
class RemoteFrameInterfacesFromRenderer_Data;
class RemoteFrameInterfacesFromBrowser_Data;
class OpenURLParams_Data;

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteMainFrameInterfaces_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data main_frame_host;
  mojo::internal::AssociatedEndpointHandle_Data main_frame;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<RemoteMainFrameInterfaces_Data>;

  RemoteMainFrameInterfaces_Data();
  ~RemoteMainFrameInterfaces_Data() = delete;
};
static_assert(sizeof(RemoteMainFrameInterfaces_Data) == 24,
              "Bad sizeof(RemoteMainFrameInterfaces_Data)");
// Used by RemoteMainFrameInterfaces::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct RemoteMainFrameInterfaces_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  RemoteMainFrameInterfaces_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~RemoteMainFrameInterfaces_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<RemoteMainFrameInterfaces_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    RemoteMainFrameInterfaces_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameInterfacesFromRenderer_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data frame;
  mojo::internal::AssociatedEndpointHandle_Data frame_host_receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameInterfacesFromRenderer_Data>;

  RemoteFrameInterfacesFromRenderer_Data();
  ~RemoteFrameInterfacesFromRenderer_Data() = delete;
};
static_assert(sizeof(RemoteFrameInterfacesFromRenderer_Data) == 24,
              "Bad sizeof(RemoteFrameInterfacesFromRenderer_Data)");
// Used by RemoteFrameInterfacesFromRenderer::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct RemoteFrameInterfacesFromRenderer_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  RemoteFrameInterfacesFromRenderer_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~RemoteFrameInterfacesFromRenderer_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<RemoteFrameInterfacesFromRenderer_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    RemoteFrameInterfacesFromRenderer_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameInterfacesFromBrowser_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedEndpointHandle_Data frame_receiver;
  mojo::internal::AssociatedInterface_Data frame_host;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameInterfacesFromBrowser_Data>;

  RemoteFrameInterfacesFromBrowser_Data();
  ~RemoteFrameInterfacesFromBrowser_Data() = delete;
};
static_assert(sizeof(RemoteFrameInterfacesFromBrowser_Data) == 24,
              "Bad sizeof(RemoteFrameInterfacesFromBrowser_Data)");
// Used by RemoteFrameInterfacesFromBrowser::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct RemoteFrameInterfacesFromBrowser_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  RemoteFrameInterfacesFromBrowser_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~RemoteFrameInterfacesFromBrowser_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<RemoteFrameInterfacesFromBrowser_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    RemoteFrameInterfacesFromBrowser_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) OpenURLParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> initiator_origin;
  mojo::internal::Pointer<::blink::mojom::internal::LocalFrameToken_Data> initiator_frame_token;
  mojo::internal::Pointer<::network::mojom::internal::URLRequestBody_Data> post_body;
  mojo::internal::Pointer<mojo::internal::String_Data> extra_headers;
  mojo::internal::Pointer<::blink::mojom::internal::Referrer_Data> referrer;
  uint8_t is_form_submission : 1;
  uint8_t should_replace_current_entry : 1;
  uint8_t user_gesture : 1;
  uint8_t is_unfenced_top_navigation : 1;
  uint8_t pad9_[3];
  int32_t disposition;
  int32_t triggering_event_info;
  mojo::internal::Interface_Data blob_url_token;
  uint8_t pad12_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> href_translate;
  mojo::internal::Pointer<::blink::mojom::internal::Impression_Data> impression;
  mojo::internal::Pointer<::blink::mojom::internal::NavigationDownloadPolicy_Data> download_policy;
  mojo::internal::Pointer<::network::mojom::internal::SourceLocation_Data> source_location;
  mojo::internal::Interface_Data initiator_policy_container_keep_alive_handle;

 private:
  friend class mojo::internal::MessageFragment<OpenURLParams_Data>;

  OpenURLParams_Data();
  ~OpenURLParams_Data() = delete;
};
static_assert(sizeof(OpenURLParams_Data) == 120,
              "Bad sizeof(OpenURLParams_Data)");
// Used by OpenURLParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct OpenURLParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  OpenURLParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~OpenURLParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<OpenURLParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    OpenURLParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_REMOTE_FRAME_MOJOM_SHARED_INTERNAL_H_