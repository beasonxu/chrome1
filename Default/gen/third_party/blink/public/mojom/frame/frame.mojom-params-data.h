// third_party/blink/public/mojom/frame/frame.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) KeepAliveHandleFactory_IssueKeepAliveHandle_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data keep_alive_handle;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<KeepAliveHandleFactory_IssueKeepAliveHandle_Params_Data>;

  KeepAliveHandleFactory_IssueKeepAliveHandle_Params_Data();
  ~KeepAliveHandleFactory_IssueKeepAliveHandle_Params_Data() = delete;
};
static_assert(sizeof(KeepAliveHandleFactory_IssueKeepAliveHandle_Params_Data) == 16,
              "Bad sizeof(KeepAliveHandleFactory_IssueKeepAliveHandle_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_EnterFullscreen_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FullscreenOptions_Data> options;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_EnterFullscreen_Params_Data>;

  LocalFrameHost_EnterFullscreen_Params_Data();
  ~LocalFrameHost_EnterFullscreen_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_EnterFullscreen_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_EnterFullscreen_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_EnterFullscreen_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t granted : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_EnterFullscreen_ResponseParams_Data>;

  LocalFrameHost_EnterFullscreen_ResponseParams_Data();
  ~LocalFrameHost_EnterFullscreen_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_EnterFullscreen_ResponseParams_Data) == 16,
              "Bad sizeof(LocalFrameHost_EnterFullscreen_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_ExitFullscreen_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_ExitFullscreen_Params_Data>;

  LocalFrameHost_ExitFullscreen_Params_Data();
  ~LocalFrameHost_ExitFullscreen_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_ExitFullscreen_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_ExitFullscreen_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_FullscreenStateChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_fullscreen : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::blink::mojom::internal::FullscreenOptions_Data> options;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_FullscreenStateChanged_Params_Data>;

  LocalFrameHost_FullscreenStateChanged_Params_Data();
  ~LocalFrameHost_FullscreenStateChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_FullscreenStateChanged_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_FullscreenStateChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RegisterProtocolHandler_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> scheme;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  uint8_t user_gesture : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_RegisterProtocolHandler_Params_Data>;

  LocalFrameHost_RegisterProtocolHandler_Params_Data();
  ~LocalFrameHost_RegisterProtocolHandler_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RegisterProtocolHandler_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_RegisterProtocolHandler_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_UnregisterProtocolHandler_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> scheme;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  uint8_t user_gesture : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_UnregisterProtocolHandler_Params_Data>;

  LocalFrameHost_UnregisterProtocolHandler_Params_Data();
  ~LocalFrameHost_UnregisterProtocolHandler_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_UnregisterProtocolHandler_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_UnregisterProtocolHandler_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidDisplayInsecureContent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidDisplayInsecureContent_Params_Data>;

  LocalFrameHost_DidDisplayInsecureContent_Params_Data();
  ~LocalFrameHost_DidDisplayInsecureContent_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidDisplayInsecureContent_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DidDisplayInsecureContent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidContainInsecureFormAction_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidContainInsecureFormAction_Params_Data>;

  LocalFrameHost_DidContainInsecureFormAction_Params_Data();
  ~LocalFrameHost_DidContainInsecureFormAction_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidContainInsecureFormAction_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DidContainInsecureFormAction_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_MainDocumentElementAvailable_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t uses_temporary_zoom_level : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_MainDocumentElementAvailable_Params_Data>;

  LocalFrameHost_MainDocumentElementAvailable_Params_Data();
  ~LocalFrameHost_MainDocumentElementAvailable_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_MainDocumentElementAvailable_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_MainDocumentElementAvailable_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_SetNeedsOcclusionTracking_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t needs_tracking : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_SetNeedsOcclusionTracking_Params_Data>;

  LocalFrameHost_SetNeedsOcclusionTracking_Params_Data();
  ~LocalFrameHost_SetNeedsOcclusionTracking_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_SetNeedsOcclusionTracking_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_SetNeedsOcclusionTracking_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_SetVirtualKeyboardOverlayPolicy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t vk_overlays_content : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_SetVirtualKeyboardOverlayPolicy_Params_Data>;

  LocalFrameHost_SetVirtualKeyboardOverlayPolicy_Params_Data();
  ~LocalFrameHost_SetVirtualKeyboardOverlayPolicy_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_SetVirtualKeyboardOverlayPolicy_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_SetVirtualKeyboardOverlayPolicy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_VisibilityChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t visibility;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_VisibilityChanged_Params_Data>;

  LocalFrameHost_VisibilityChanged_Params_Data();
  ~LocalFrameHost_VisibilityChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_VisibilityChanged_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_VisibilityChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidChangeThemeColor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> theme_color;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidChangeThemeColor_Params_Data>;

  LocalFrameHost_DidChangeThemeColor_Params_Data();
  ~LocalFrameHost_DidChangeThemeColor_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidChangeThemeColor_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_DidChangeThemeColor_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidChangeBackgroundColor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> background_color;
  uint8_t color_adjust : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidChangeBackgroundColor_Params_Data>;

  LocalFrameHost_DidChangeBackgroundColor_Params_Data();
  ~LocalFrameHost_DidChangeBackgroundColor_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidChangeBackgroundColor_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_DidChangeBackgroundColor_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidFailLoadWithError_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  int32_t error_code;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidFailLoadWithError_Params_Data>;

  LocalFrameHost_DidFailLoadWithError_Params_Data();
  ~LocalFrameHost_DidFailLoadWithError_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidFailLoadWithError_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_DidFailLoadWithError_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidFocusFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidFocusFrame_Params_Data>;

  LocalFrameHost_DidFocusFrame_Params_Data();
  ~LocalFrameHost_DidFocusFrame_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidFocusFrame_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DidFocusFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidCallFocus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidCallFocus_Params_Data>;

  LocalFrameHost_DidCallFocus_Params_Data();
  ~LocalFrameHost_DidCallFocus_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidCallFocus_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DidCallFocus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t policy_bitmap;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data>;

  LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data();
  ~LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint32_t>> set;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data>;

  LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data();
  ~LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t present : 1;
  uint8_t pad0_[3];
  int32_t disabler_type;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data>;

  LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data();
  ~LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t has_gesture : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data>;

  LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data();
  ~LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> rect_to_scroll;
  mojo::internal::Pointer<::blink::mojom::internal::ScrollIntoViewParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data>;

  LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data();
  ~LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t direction;
  int32_t granularity;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data>;

  LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data();
  ~LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidBlockNavigation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> blocked_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> initiator_url;
  int32_t reason;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidBlockNavigation_Params_Data>;

  LocalFrameHost_DidBlockNavigation_Params_Data();
  ~LocalFrameHost_DidBlockNavigation_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidBlockNavigation_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_DidBlockNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidChangeLoadProgress_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  double load_progress;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidChangeLoadProgress_Params_Data>;

  LocalFrameHost_DidChangeLoadProgress_Params_Data();
  ~LocalFrameHost_DidChangeLoadProgress_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidChangeLoadProgress_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_DidChangeLoadProgress_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidFinishLoad_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> validated_url;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidFinishLoad_Params_Data>;

  LocalFrameHost_DidFinishLoad_Params_Data();
  ~LocalFrameHost_DidFinishLoad_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidFinishLoad_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_DidFinishLoad_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DispatchLoad_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DispatchLoad_Params_Data>;

  LocalFrameHost_DispatchLoad_Params_Data();
  ~LocalFrameHost_DispatchLoad_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DispatchLoad_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DispatchLoad_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_GoToEntryAtOffset_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t offset;
  uint8_t has_user_gesture : 1;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_GoToEntryAtOffset_Params_Data>;

  LocalFrameHost_GoToEntryAtOffset_Params_Data();
  ~LocalFrameHost_GoToEntryAtOffset_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_GoToEntryAtOffset_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_GoToEntryAtOffset_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_NavigateToNavigationApiKey_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> key;
  uint8_t has_user_gesture : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_NavigateToNavigationApiKey_Params_Data>;

  LocalFrameHost_NavigateToNavigationApiKey_Params_Data();
  ~LocalFrameHost_NavigateToNavigationApiKey_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_NavigateToNavigationApiKey_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_NavigateToNavigationApiKey_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_UpdateTitle_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> title;
  int32_t title_direction;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_UpdateTitle_Params_Data>;

  LocalFrameHost_UpdateTitle_Params_Data();
  ~LocalFrameHost_UpdateTitle_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_UpdateTitle_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_UpdateTitle_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_UpdateUserActivationState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t update_type;
  int32_t notification_type;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_UpdateUserActivationState_Params_Data>;

  LocalFrameHost_UpdateUserActivationState_Params_Data();
  ~LocalFrameHost_UpdateUserActivationState_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_UpdateUserActivationState_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_UpdateUserActivationState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::FindInPageResultAXParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data>;

  LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data();
  ~LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data>;

  LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data();
  ~LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DocumentOnLoadCompleted_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DocumentOnLoadCompleted_Params_Data>;

  LocalFrameHost_DocumentOnLoadCompleted_Params_Data();
  ~LocalFrameHost_DocumentOnLoadCompleted_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DocumentOnLoadCompleted_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DocumentOnLoadCompleted_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_ForwardResourceTimingToParent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ResourceTimingInfo_Data> timing;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_ForwardResourceTimingToParent_Params_Data>;

  LocalFrameHost_ForwardResourceTimingToParent_Params_Data();
  ~LocalFrameHost_ForwardResourceTimingToParent_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_ForwardResourceTimingToParent_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_ForwardResourceTimingToParent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidDispatchDOMContentLoadedEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidDispatchDOMContentLoadedEvent_Params_Data>;

  LocalFrameHost_DidDispatchDOMContentLoadedEvent_Params_Data();
  ~LocalFrameHost_DidDispatchDOMContentLoadedEvent_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidDispatchDOMContentLoadedEvent_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DidDispatchDOMContentLoadedEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalAlertDialog_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> alert_message;
  uint8_t disable_third_party_subframe_suppresion : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_RunModalAlertDialog_Params_Data>;

  LocalFrameHost_RunModalAlertDialog_Params_Data();
  ~LocalFrameHost_RunModalAlertDialog_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalAlertDialog_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_RunModalAlertDialog_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalAlertDialog_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_RunModalAlertDialog_ResponseParams_Data>;

  LocalFrameHost_RunModalAlertDialog_ResponseParams_Data();
  ~LocalFrameHost_RunModalAlertDialog_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalAlertDialog_ResponseParams_Data) == 8,
              "Bad sizeof(LocalFrameHost_RunModalAlertDialog_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalConfirmDialog_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> alert_message;
  uint8_t disable_third_party_subframe_suppresion : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_RunModalConfirmDialog_Params_Data>;

  LocalFrameHost_RunModalConfirmDialog_Params_Data();
  ~LocalFrameHost_RunModalConfirmDialog_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalConfirmDialog_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_RunModalConfirmDialog_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data>;

  LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data();
  ~LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data) == 16,
              "Bad sizeof(LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalPromptDialog_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> alert_message;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> default_value;
  uint8_t disable_third_party_subframe_suppresion : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_RunModalPromptDialog_Params_Data>;

  LocalFrameHost_RunModalPromptDialog_Params_Data();
  ~LocalFrameHost_RunModalPromptDialog_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalPromptDialog_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_RunModalPromptDialog_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalPromptDialog_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> result;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_RunModalPromptDialog_ResponseParams_Data>;

  LocalFrameHost_RunModalPromptDialog_ResponseParams_Data();
  ~LocalFrameHost_RunModalPromptDialog_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalPromptDialog_ResponseParams_Data) == 24,
              "Bad sizeof(LocalFrameHost_RunModalPromptDialog_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunBeforeUnloadConfirm_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_reload : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_RunBeforeUnloadConfirm_Params_Data>;

  LocalFrameHost_RunBeforeUnloadConfirm_Params_Data();
  ~LocalFrameHost_RunBeforeUnloadConfirm_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunBeforeUnloadConfirm_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_RunBeforeUnloadConfirm_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data>;

  LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data();
  ~LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data) == 16,
              "Bad sizeof(LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_UpdateFaviconURL_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::blink::mojom::internal::FaviconURL_Data>>> favicon_urls;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_UpdateFaviconURL_Params_Data>;

  LocalFrameHost_UpdateFaviconURL_Params_Data();
  ~LocalFrameHost_UpdateFaviconURL_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_UpdateFaviconURL_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_UpdateFaviconURL_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DownloadURL_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::DownloadURLParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DownloadURL_Params_Data>;

  LocalFrameHost_DownloadURL_Params_Data();
  ~LocalFrameHost_DownloadURL_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DownloadURL_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_DownloadURL_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_FocusedElementChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_editable_element : 1;
  uint8_t pad0_[3];
  int32_t focus_type;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> bounds_in_frame_widget;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_FocusedElementChanged_Params_Data>;

  LocalFrameHost_FocusedElementChanged_Params_Data();
  ~LocalFrameHost_FocusedElementChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_FocusedElementChanged_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_FocusedElementChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_TextSelectionChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::BigString16_Data> text;
  uint32_t offset;
  uint8_t pad1_[4];
  mojo::internal::Pointer<::gfx::mojom::internal::Range_Data> range;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_TextSelectionChanged_Params_Data>;

  LocalFrameHost_TextSelectionChanged_Params_Data();
  ~LocalFrameHost_TextSelectionChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_TextSelectionChanged_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_TextSelectionChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_ShowPopupMenu_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data popup_client;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> bounds;
  int32_t item_height;
  int32_t selected_item;
  double font_size;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::blink::mojom::internal::MenuItem_Data>>> menu_items;
  uint8_t right_aligned : 1;
  uint8_t allow_multiple_selection : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_ShowPopupMenu_Params_Data>;

  LocalFrameHost_ShowPopupMenu_Params_Data();
  ~LocalFrameHost_ShowPopupMenu_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_ShowPopupMenu_Params_Data) == 56,
              "Bad sizeof(LocalFrameHost_ShowPopupMenu_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_CreateNewPopupWidget_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedEndpointHandle_Data popup_host;
  mojo::internal::AssociatedEndpointHandle_Data blink_widget_host;
  mojo::internal::AssociatedInterface_Data blink_widget;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_CreateNewPopupWidget_Params_Data>;

  LocalFrameHost_CreateNewPopupWidget_Params_Data();
  ~LocalFrameHost_CreateNewPopupWidget_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_CreateNewPopupWidget_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_CreateNewPopupWidget_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_ShowContextMenu_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data client;
  mojo::internal::Pointer<::blink::mojom::internal::UntrustworthyContextMenuParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_ShowContextMenu_Params_Data>;

  LocalFrameHost_ShowContextMenu_Params_Data();
  ~LocalFrameHost_ShowContextMenu_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_ShowContextMenu_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_ShowContextMenu_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidLoadResourceFromMemoryCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> http_method;
  mojo::internal::Pointer<mojo::internal::String_Data> mime_type;
  int32_t request_destination;
  uint8_t include_credentials : 1;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidLoadResourceFromMemoryCache_Params_Data>;

  LocalFrameHost_DidLoadResourceFromMemoryCache_Params_Data();
  ~LocalFrameHost_DidLoadResourceFromMemoryCache_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidLoadResourceFromMemoryCache_Params_Data) == 40,
              "Bad sizeof(LocalFrameHost_DidLoadResourceFromMemoryCache_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidChangeFrameOwnerProperties_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::blink::mojom::internal::FrameToken_Data child_frame_token;
  mojo::internal::Pointer<::blink::mojom::internal::FrameOwnerProperties_Data> frame_owner_properties;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidChangeFrameOwnerProperties_Params_Data>;

  LocalFrameHost_DidChangeFrameOwnerProperties_Params_Data();
  ~LocalFrameHost_DidChangeFrameOwnerProperties_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidChangeFrameOwnerProperties_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_DidChangeFrameOwnerProperties_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidChangeOpener_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::LocalFrameToken_Data> opener_frame;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidChangeOpener_Params_Data>;

  LocalFrameHost_DidChangeOpener_Params_Data();
  ~LocalFrameHost_DidChangeOpener_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidChangeOpener_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_DidChangeOpener_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidChangeFramePolicy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::blink::mojom::internal::FrameToken_Data child_frame_token;
  mojo::internal::Pointer<::blink::mojom::internal::FramePolicy_Data> frame_policy;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidChangeFramePolicy_Params_Data>;

  LocalFrameHost_DidChangeFramePolicy_Params_Data();
  ~LocalFrameHost_DidChangeFramePolicy_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidChangeFramePolicy_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_DidChangeFramePolicy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidChangeIframeAttributes_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::blink::mojom::internal::FrameToken_Data child_frame_token;
  mojo::internal::Pointer<internal::IframeAttributes_Data> attributes;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidChangeIframeAttributes_Params_Data>;

  LocalFrameHost_DidChangeIframeAttributes_Params_Data();
  ~LocalFrameHost_DidChangeIframeAttributes_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidChangeIframeAttributes_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_DidChangeIframeAttributes_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_CapturePaintPreviewOfSubframe_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> clip_rect;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> guid;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_CapturePaintPreviewOfSubframe_Params_Data>;

  LocalFrameHost_CapturePaintPreviewOfSubframe_Params_Data();
  ~LocalFrameHost_CapturePaintPreviewOfSubframe_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_CapturePaintPreviewOfSubframe_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_CapturePaintPreviewOfSubframe_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_SetCloseListener_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data listener;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_SetCloseListener_Params_Data>;

  LocalFrameHost_SetCloseListener_Params_Data();
  ~LocalFrameHost_SetCloseListener_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_SetCloseListener_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_SetCloseListener_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_Detach_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_Detach_Params_Data>;

  LocalFrameHost_Detach_Params_Data();
  ~LocalFrameHost_Detach_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_Detach_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_Detach_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_GetKeepAliveHandleFactory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data factory;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_GetKeepAliveHandleFactory_Params_Data>;

  LocalFrameHost_GetKeepAliveHandleFactory_Params_Data();
  ~LocalFrameHost_GetKeepAliveHandleFactory_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_GetKeepAliveHandleFactory_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_GetKeepAliveHandleFactory_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidAddMessageToConsole_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t log_level;
  uint32_t line_number;
  mojo::internal::Pointer<::mojo_base::mojom::internal::BigString16_Data> msg;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> source_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::BigString16_Data> untrusted_stack_trace;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidAddMessageToConsole_Params_Data>;

  LocalFrameHost_DidAddMessageToConsole_Params_Data();
  ~LocalFrameHost_DidAddMessageToConsole_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidAddMessageToConsole_Params_Data) == 40,
              "Bad sizeof(LocalFrameHost_DidAddMessageToConsole_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_FrameSizeChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> size;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_FrameSizeChanged_Params_Data>;

  LocalFrameHost_FrameSizeChanged_Params_Data();
  ~LocalFrameHost_FrameSizeChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_FrameSizeChanged_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_FrameSizeChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidInferColorScheme_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t color_scheme;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidInferColorScheme_Params_Data>;

  LocalFrameHost_DidInferColorScheme_Params_Data();
  ~LocalFrameHost_DidInferColorScheme_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidInferColorScheme_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_DidInferColorScheme_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidChangeSrcDoc_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::blink::mojom::internal::FrameToken_Data child_frame_token;
  mojo::internal::Pointer<mojo::internal::String_Data> srcdoc_value;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_DidChangeSrcDoc_Params_Data>;

  LocalFrameHost_DidChangeSrcDoc_Params_Data();
  ~LocalFrameHost_DidChangeSrcDoc_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidChangeSrcDoc_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_DidChangeSrcDoc_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_ReceivedDelegatedCapability_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t delegated_capability;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_ReceivedDelegatedCapability_Params_Data>;

  LocalFrameHost_ReceivedDelegatedCapability_Params_Data();
  ~LocalFrameHost_ReceivedDelegatedCapability_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_ReceivedDelegatedCapability_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_ReceivedDelegatedCapability_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_CreatePortal_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedEndpointHandle_Data portal;
  mojo::internal::AssociatedInterface_Data client;
  uint8_t pad1_[4];
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameInterfacesFromRenderer_Data> remote_frame_interfaces;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_CreatePortal_Params_Data>;

  LocalFrameHost_CreatePortal_Params_Data();
  ~LocalFrameHost_CreatePortal_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_CreatePortal_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_CreatePortal_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_CreatePortal_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FrameReplicationState_Data> initial_replicated_state;
  mojo::internal::Pointer<::blink::mojom::internal::PortalToken_Data> portal_token;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameToken_Data> frame_token;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_frame_token;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_CreatePortal_ResponseParams_Data>;

  LocalFrameHost_CreatePortal_ResponseParams_Data();
  ~LocalFrameHost_CreatePortal_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_CreatePortal_ResponseParams_Data) == 40,
              "Bad sizeof(LocalFrameHost_CreatePortal_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_AdoptPortal_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::PortalToken_Data> portal_token;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameInterfacesFromRenderer_Data> remote_frame_interfaces;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_AdoptPortal_Params_Data>;

  LocalFrameHost_AdoptPortal_Params_Data();
  ~LocalFrameHost_AdoptPortal_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_AdoptPortal_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_AdoptPortal_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_AdoptPortal_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FrameReplicationState_Data> replicated_state;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameToken_Data> frame_token;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_frame_token;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_AdoptPortal_ResponseParams_Data>;

  LocalFrameHost_AdoptPortal_ResponseParams_Data();
  ~LocalFrameHost_AdoptPortal_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_AdoptPortal_ResponseParams_Data) == 32,
              "Bad sizeof(LocalFrameHost_AdoptPortal_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_CreateFencedFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedEndpointHandle_Data fenced_frame;
  int32_t mode;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameInterfacesFromRenderer_Data> remote_frame_interfaces;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameToken_Data> frame_token;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_frame_token;

 private:
  friend class mojo::internal::MessageFragment<LocalFrameHost_CreateFencedFrame_Params_Data>;

  LocalFrameHost_CreateFencedFrame_Params_Data();
  ~LocalFrameHost_CreateFencedFrame_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_CreateFencedFrame_Params_Data) == 40,
              "Bad sizeof(LocalFrameHost_CreateFencedFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_GetTextSurroundingSelection_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t max_length;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_GetTextSurroundingSelection_Params_Data>;

  LocalFrame_GetTextSurroundingSelection_Params_Data();
  ~LocalFrame_GetTextSurroundingSelection_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_GetTextSurroundingSelection_Params_Data) == 16,
              "Bad sizeof(LocalFrame_GetTextSurroundingSelection_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_GetTextSurroundingSelection_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> content;
  uint32_t start_offset;
  uint32_t end_offset;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_GetTextSurroundingSelection_ResponseParams_Data>;

  LocalFrame_GetTextSurroundingSelection_ResponseParams_Data();
  ~LocalFrame_GetTextSurroundingSelection_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_GetTextSurroundingSelection_ResponseParams_Data) == 24,
              "Bad sizeof(LocalFrame_GetTextSurroundingSelection_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_SendInterventionReport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_SendInterventionReport_Params_Data>;

  LocalFrame_SendInterventionReport_Params_Data();
  ~LocalFrame_SendInterventionReport_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_SendInterventionReport_Params_Data) == 24,
              "Bad sizeof(LocalFrame_SendInterventionReport_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_SetFrameOwnerProperties_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FrameOwnerProperties_Data> properties;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_SetFrameOwnerProperties_Params_Data>;

  LocalFrame_SetFrameOwnerProperties_Params_Data();
  ~LocalFrame_SetFrameOwnerProperties_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_SetFrameOwnerProperties_Params_Data) == 16,
              "Bad sizeof(LocalFrame_SetFrameOwnerProperties_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_NotifyUserActivation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t notification_type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_NotifyUserActivation_Params_Data>;

  LocalFrame_NotifyUserActivation_Params_Data();
  ~LocalFrame_NotifyUserActivation_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_NotifyUserActivation_Params_Data) == 16,
              "Bad sizeof(LocalFrame_NotifyUserActivation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_NotifyVirtualKeyboardOverlayRect_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> keyboard_rect;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_NotifyVirtualKeyboardOverlayRect_Params_Data>;

  LocalFrame_NotifyVirtualKeyboardOverlayRect_Params_Data();
  ~LocalFrame_NotifyVirtualKeyboardOverlayRect_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_NotifyVirtualKeyboardOverlayRect_Params_Data) == 16,
              "Bad sizeof(LocalFrame_NotifyVirtualKeyboardOverlayRect_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_AddMessageToConsole_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t level;
  uint8_t discard_duplicates : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_AddMessageToConsole_Params_Data>;

  LocalFrame_AddMessageToConsole_Params_Data();
  ~LocalFrame_AddMessageToConsole_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_AddMessageToConsole_Params_Data) == 24,
              "Bad sizeof(LocalFrame_AddMessageToConsole_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_AddInspectorIssue_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::InspectorIssueInfo_Data> info;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_AddInspectorIssue_Params_Data>;

  LocalFrame_AddInspectorIssue_Params_Data();
  ~LocalFrame_AddInspectorIssue_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_AddInspectorIssue_Params_Data) == 16,
              "Bad sizeof(LocalFrame_AddInspectorIssue_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_SwapInImmediately_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_SwapInImmediately_Params_Data>;

  LocalFrame_SwapInImmediately_Params_Data();
  ~LocalFrame_SwapInImmediately_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_SwapInImmediately_Params_Data) == 8,
              "Bad sizeof(LocalFrame_SwapInImmediately_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_CheckCompleted_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_CheckCompleted_Params_Data>;

  LocalFrame_CheckCompleted_Params_Data();
  ~LocalFrame_CheckCompleted_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_CheckCompleted_Params_Data) == 8,
              "Bad sizeof(LocalFrame_CheckCompleted_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_StopLoading_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_StopLoading_Params_Data>;

  LocalFrame_StopLoading_Params_Data();
  ~LocalFrame_StopLoading_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_StopLoading_Params_Data) == 8,
              "Bad sizeof(LocalFrame_StopLoading_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_Collapse_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t collapsed : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_Collapse_Params_Data>;

  LocalFrame_Collapse_Params_Data();
  ~LocalFrame_Collapse_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_Collapse_Params_Data) == 16,
              "Bad sizeof(LocalFrame_Collapse_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_EnableViewSourceMode_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_EnableViewSourceMode_Params_Data>;

  LocalFrame_EnableViewSourceMode_Params_Data();
  ~LocalFrame_EnableViewSourceMode_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_EnableViewSourceMode_Params_Data) == 8,
              "Bad sizeof(LocalFrame_EnableViewSourceMode_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_Focus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_Focus_Params_Data>;

  LocalFrame_Focus_Params_Data();
  ~LocalFrame_Focus_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_Focus_Params_Data) == 8,
              "Bad sizeof(LocalFrame_Focus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_ClearFocusedElement_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_ClearFocusedElement_Params_Data>;

  LocalFrame_ClearFocusedElement_Params_Data();
  ~LocalFrame_ClearFocusedElement_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_ClearFocusedElement_Params_Data) == 8,
              "Bad sizeof(LocalFrame_ClearFocusedElement_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_GetResourceSnapshotForWebBundle_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_GetResourceSnapshotForWebBundle_Params_Data>;

  LocalFrame_GetResourceSnapshotForWebBundle_Params_Data();
  ~LocalFrame_GetResourceSnapshotForWebBundle_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_GetResourceSnapshotForWebBundle_Params_Data) == 16,
              "Bad sizeof(LocalFrame_GetResourceSnapshotForWebBundle_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_CopyImageAt_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> window_point;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_CopyImageAt_Params_Data>;

  LocalFrame_CopyImageAt_Params_Data();
  ~LocalFrame_CopyImageAt_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_CopyImageAt_Params_Data) == 16,
              "Bad sizeof(LocalFrame_CopyImageAt_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_SaveImageAt_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> window_point;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_SaveImageAt_Params_Data>;

  LocalFrame_SaveImageAt_Params_Data();
  ~LocalFrame_SaveImageAt_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_SaveImageAt_Params_Data) == 16,
              "Bad sizeof(LocalFrame_SaveImageAt_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_ReportBlinkFeatureUsage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> features;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_ReportBlinkFeatureUsage_Params_Data>;

  LocalFrame_ReportBlinkFeatureUsage_Params_Data();
  ~LocalFrame_ReportBlinkFeatureUsage_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_ReportBlinkFeatureUsage_Params_Data) == 16,
              "Bad sizeof(LocalFrame_ReportBlinkFeatureUsage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_RenderFallbackContent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_RenderFallbackContent_Params_Data>;

  LocalFrame_RenderFallbackContent_Params_Data();
  ~LocalFrame_RenderFallbackContent_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_RenderFallbackContent_Params_Data) == 8,
              "Bad sizeof(LocalFrame_RenderFallbackContent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_RenderFallbackContentWithResourceTiming_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ResourceTimingInfo_Data> timing;
  mojo::internal::Pointer<mojo::internal::String_Data> server_timing_value;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_RenderFallbackContentWithResourceTiming_Params_Data>;

  LocalFrame_RenderFallbackContentWithResourceTiming_Params_Data();
  ~LocalFrame_RenderFallbackContentWithResourceTiming_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_RenderFallbackContentWithResourceTiming_Params_Data) == 24,
              "Bad sizeof(LocalFrame_RenderFallbackContentWithResourceTiming_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_BeforeUnload_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_reload : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_BeforeUnload_Params_Data>;

  LocalFrame_BeforeUnload_Params_Data();
  ~LocalFrame_BeforeUnload_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_BeforeUnload_Params_Data) == 16,
              "Bad sizeof(LocalFrame_BeforeUnload_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_BeforeUnload_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t proceed : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> before_unload_start_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> before_unload_end_time;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_BeforeUnload_ResponseParams_Data>;

  LocalFrame_BeforeUnload_ResponseParams_Data();
  ~LocalFrame_BeforeUnload_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_BeforeUnload_ResponseParams_Data) == 32,
              "Bad sizeof(LocalFrame_BeforeUnload_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_MediaPlayerActionAt_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> location;
  mojo::internal::Pointer<::blink::mojom::internal::MediaPlayerAction_Data> action;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_MediaPlayerActionAt_Params_Data>;

  LocalFrame_MediaPlayerActionAt_Params_Data();
  ~LocalFrame_MediaPlayerActionAt_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_MediaPlayerActionAt_Params_Data) == 24,
              "Bad sizeof(LocalFrame_MediaPlayerActionAt_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_PluginActionAt_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> location;
  int32_t action;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_PluginActionAt_Params_Data>;

  LocalFrame_PluginActionAt_Params_Data();
  ~LocalFrame_PluginActionAt_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_PluginActionAt_Params_Data) == 24,
              "Bad sizeof(LocalFrame_PluginActionAt_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_AdvanceFocusInFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t focus_type;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameToken_Data> source_frame_token;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_AdvanceFocusInFrame_Params_Data>;

  LocalFrame_AdvanceFocusInFrame_Params_Data();
  ~LocalFrame_AdvanceFocusInFrame_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_AdvanceFocusInFrame_Params_Data) == 24,
              "Bad sizeof(LocalFrame_AdvanceFocusInFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_AdvanceFocusForIME_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t focus_type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_AdvanceFocusForIME_Params_Data>;

  LocalFrame_AdvanceFocusForIME_Params_Data();
  ~LocalFrame_AdvanceFocusForIME_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_AdvanceFocusForIME_Params_Data) == 16,
              "Bad sizeof(LocalFrame_AdvanceFocusForIME_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_ReportContentSecurityPolicyViolation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::CSPViolation_Data> violation;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_ReportContentSecurityPolicyViolation_Params_Data>;

  LocalFrame_ReportContentSecurityPolicyViolation_Params_Data();
  ~LocalFrame_ReportContentSecurityPolicyViolation_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_ReportContentSecurityPolicyViolation_Params_Data) == 16,
              "Bad sizeof(LocalFrame_ReportContentSecurityPolicyViolation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_DidUpdateFramePolicy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FramePolicy_Data> frame_policy;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_DidUpdateFramePolicy_Params_Data>;

  LocalFrame_DidUpdateFramePolicy_Params_Data();
  ~LocalFrame_DidUpdateFramePolicy_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_DidUpdateFramePolicy_Params_Data) == 16,
              "Bad sizeof(LocalFrame_DidUpdateFramePolicy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_PostMessageEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameToken_Data> source_frame_token;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> source_origin;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> target_origin;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> message;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_PostMessageEvent_Params_Data>;

  LocalFrame_PostMessageEvent_Params_Data();
  ~LocalFrame_PostMessageEvent_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_PostMessageEvent_Params_Data) == 40,
              "Bad sizeof(LocalFrame_PostMessageEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_JavaScriptMethodExecuteRequest_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> object_name;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> method_name;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ListValue_Data> arguments;
  uint8_t wants_result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_JavaScriptMethodExecuteRequest_Params_Data>;

  LocalFrame_JavaScriptMethodExecuteRequest_Params_Data();
  ~LocalFrame_JavaScriptMethodExecuteRequest_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_JavaScriptMethodExecuteRequest_Params_Data) == 40,
              "Bad sizeof(LocalFrame_JavaScriptMethodExecuteRequest_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_JavaScriptMethodExecuteRequest_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::Value_Data result;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_JavaScriptMethodExecuteRequest_ResponseParams_Data>;

  LocalFrame_JavaScriptMethodExecuteRequest_ResponseParams_Data();
  ~LocalFrame_JavaScriptMethodExecuteRequest_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_JavaScriptMethodExecuteRequest_ResponseParams_Data) == 24,
              "Bad sizeof(LocalFrame_JavaScriptMethodExecuteRequest_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_JavaScriptExecuteRequest_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::BigString16_Data> javascript;
  uint8_t wants_result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_JavaScriptExecuteRequest_Params_Data>;

  LocalFrame_JavaScriptExecuteRequest_Params_Data();
  ~LocalFrame_JavaScriptExecuteRequest_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_JavaScriptExecuteRequest_Params_Data) == 24,
              "Bad sizeof(LocalFrame_JavaScriptExecuteRequest_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_JavaScriptExecuteRequest_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::Value_Data result;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_JavaScriptExecuteRequest_ResponseParams_Data>;

  LocalFrame_JavaScriptExecuteRequest_ResponseParams_Data();
  ~LocalFrame_JavaScriptExecuteRequest_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_JavaScriptExecuteRequest_ResponseParams_Data) == 24,
              "Bad sizeof(LocalFrame_JavaScriptExecuteRequest_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_JavaScriptExecuteRequestForTests_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::BigString16_Data> javascript;
  uint8_t has_user_gesture : 1;
  uint8_t resolve_promises : 1;
  uint8_t pad2_[3];
  int32_t world_id;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_JavaScriptExecuteRequestForTests_Params_Data>;

  LocalFrame_JavaScriptExecuteRequestForTests_Params_Data();
  ~LocalFrame_JavaScriptExecuteRequestForTests_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_JavaScriptExecuteRequestForTests_Params_Data) == 24,
              "Bad sizeof(LocalFrame_JavaScriptExecuteRequestForTests_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_JavaScriptExecuteRequestForTests_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result_type;
  uint8_t pad0_[4];
  ::mojo_base::mojom::internal::Value_Data result;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_JavaScriptExecuteRequestForTests_ResponseParams_Data>;

  LocalFrame_JavaScriptExecuteRequestForTests_ResponseParams_Data();
  ~LocalFrame_JavaScriptExecuteRequestForTests_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_JavaScriptExecuteRequestForTests_ResponseParams_Data) == 32,
              "Bad sizeof(LocalFrame_JavaScriptExecuteRequestForTests_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::BigString16_Data> javascript;
  uint8_t wants_result : 1;
  uint8_t pad1_[3];
  int32_t world_id;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_Params_Data>;

  LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_Params_Data();
  ~LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_Params_Data) == 24,
              "Bad sizeof(LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::Value_Data result;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data>;

  LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data();
  ~LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data) == 24,
              "Bad sizeof(LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_BindReportingObserver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_BindReportingObserver_Params_Data>;

  LocalFrame_BindReportingObserver_Params_Data();
  ~LocalFrame_BindReportingObserver_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_BindReportingObserver_Params_Data) == 16,
              "Bad sizeof(LocalFrame_BindReportingObserver_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_UpdateOpener_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::blink::mojom::internal::FrameToken_Data opener_frame_token;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_UpdateOpener_Params_Data>;

  LocalFrame_UpdateOpener_Params_Data();
  ~LocalFrame_UpdateOpener_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_UpdateOpener_Params_Data) == 24,
              "Bad sizeof(LocalFrame_UpdateOpener_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_GetSavableResourceLinks_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_GetSavableResourceLinks_Params_Data>;

  LocalFrame_GetSavableResourceLinks_Params_Data();
  ~LocalFrame_GetSavableResourceLinks_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_GetSavableResourceLinks_Params_Data) == 8,
              "Bad sizeof(LocalFrame_GetSavableResourceLinks_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_GetSavableResourceLinks_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::GetSavableResourceLinksReply_Data> reply;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_GetSavableResourceLinks_ResponseParams_Data>;

  LocalFrame_GetSavableResourceLinks_ResponseParams_Data();
  ~LocalFrame_GetSavableResourceLinks_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_GetSavableResourceLinks_ResponseParams_Data) == 16,
              "Bad sizeof(LocalFrame_GetSavableResourceLinks_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_MixedContentFound_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> main_resource_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> mixed_content_url;
  int32_t request_context;
  uint8_t was_allowed : 1;
  uint8_t had_redirect : 1;
  uint8_t pad4_[3];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url_before_redirects;
  mojo::internal::Pointer<::network::mojom::internal::SourceLocation_Data> source_location;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_MixedContentFound_Params_Data>;

  LocalFrame_MixedContentFound_Params_Data();
  ~LocalFrame_MixedContentFound_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_MixedContentFound_Params_Data) == 48,
              "Bad sizeof(LocalFrame_MixedContentFound_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_BindDevToolsAgent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data agent_host;
  mojo::internal::AssociatedEndpointHandle_Data agent;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_BindDevToolsAgent_Params_Data>;

  LocalFrame_BindDevToolsAgent_Params_Data();
  ~LocalFrame_BindDevToolsAgent_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_BindDevToolsAgent_Params_Data) == 24,
              "Bad sizeof(LocalFrame_BindDevToolsAgent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_ExtractSmartClipData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_ExtractSmartClipData_Params_Data>;

  LocalFrame_ExtractSmartClipData_Params_Data();
  ~LocalFrame_ExtractSmartClipData_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_ExtractSmartClipData_Params_Data) == 16,
              "Bad sizeof(LocalFrame_ExtractSmartClipData_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_ExtractSmartClipData_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> text;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> html;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> clip_rect;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_ExtractSmartClipData_ResponseParams_Data>;

  LocalFrame_ExtractSmartClipData_ResponseParams_Data();
  ~LocalFrame_ExtractSmartClipData_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_ExtractSmartClipData_ResponseParams_Data) == 32,
              "Bad sizeof(LocalFrame_ExtractSmartClipData_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_HandleRendererDebugURL_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_HandleRendererDebugURL_Params_Data>;

  LocalFrame_HandleRendererDebugURL_Params_Data();
  ~LocalFrame_HandleRendererDebugURL_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_HandleRendererDebugURL_Params_Data) == 16,
              "Bad sizeof(LocalFrame_HandleRendererDebugURL_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_GetCanonicalUrlForSharing_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_GetCanonicalUrlForSharing_Params_Data>;

  LocalFrame_GetCanonicalUrlForSharing_Params_Data();
  ~LocalFrame_GetCanonicalUrlForSharing_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_GetCanonicalUrlForSharing_Params_Data) == 8,
              "Bad sizeof(LocalFrame_GetCanonicalUrlForSharing_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_GetCanonicalUrlForSharing_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> canonical_url;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_GetCanonicalUrlForSharing_ResponseParams_Data>;

  LocalFrame_GetCanonicalUrlForSharing_ResponseParams_Data();
  ~LocalFrame_GetCanonicalUrlForSharing_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_GetCanonicalUrlForSharing_ResponseParams_Data) == 16,
              "Bad sizeof(LocalFrame_GetCanonicalUrlForSharing_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_GetOpenGraphMetadata_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_GetOpenGraphMetadata_Params_Data>;

  LocalFrame_GetOpenGraphMetadata_Params_Data();
  ~LocalFrame_GetOpenGraphMetadata_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_GetOpenGraphMetadata_Params_Data) == 8,
              "Bad sizeof(LocalFrame_GetOpenGraphMetadata_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_GetOpenGraphMetadata_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::OpenGraphMetadata_Data> metadata;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_GetOpenGraphMetadata_ResponseParams_Data>;

  LocalFrame_GetOpenGraphMetadata_ResponseParams_Data();
  ~LocalFrame_GetOpenGraphMetadata_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_GetOpenGraphMetadata_ResponseParams_Data) == 16,
              "Bad sizeof(LocalFrame_GetOpenGraphMetadata_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_SetNavigationApiHistoryEntriesForRestore_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::NavigationApiHistoryEntryArrays_Data> entry_arrays;

 private:
  friend class mojo::internal::MessageFragment<LocalFrame_SetNavigationApiHistoryEntriesForRestore_Params_Data>;

  LocalFrame_SetNavigationApiHistoryEntriesForRestore_Params_Data();
  ~LocalFrame_SetNavigationApiHistoryEntriesForRestore_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_SetNavigationApiHistoryEntriesForRestore_Params_Data) == 16,
              "Bad sizeof(LocalFrame_SetNavigationApiHistoryEntriesForRestore_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HighPriorityLocalFrame_DispatchBeforeUnload_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_reload : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<HighPriorityLocalFrame_DispatchBeforeUnload_Params_Data>;

  HighPriorityLocalFrame_DispatchBeforeUnload_Params_Data();
  ~HighPriorityLocalFrame_DispatchBeforeUnload_Params_Data() = delete;
};
static_assert(sizeof(HighPriorityLocalFrame_DispatchBeforeUnload_Params_Data) == 16,
              "Bad sizeof(HighPriorityLocalFrame_DispatchBeforeUnload_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t proceed : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> before_unload_start_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> before_unload_end_time;

 private:
  friend class mojo::internal::MessageFragment<HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParams_Data>;

  HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParams_Data();
  ~HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParams_Data() = delete;
};
static_assert(sizeof(HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParams_Data) == 32,
              "Bad sizeof(HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_AnimateDoubleTapZoom_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> point;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_AnimateDoubleTapZoom_Params_Data>;

  LocalMainFrame_AnimateDoubleTapZoom_Params_Data();
  ~LocalMainFrame_AnimateDoubleTapZoom_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_AnimateDoubleTapZoom_Params_Data) == 24,
              "Bad sizeof(LocalMainFrame_AnimateDoubleTapZoom_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_SetScaleFactor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  float scale;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_SetScaleFactor_Params_Data>;

  LocalMainFrame_SetScaleFactor_Params_Data();
  ~LocalMainFrame_SetScaleFactor_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_SetScaleFactor_Params_Data) == 16,
              "Bad sizeof(LocalMainFrame_SetScaleFactor_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_ClosePage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_ClosePage_Params_Data>;

  LocalMainFrame_ClosePage_Params_Data();
  ~LocalMainFrame_ClosePage_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_ClosePage_Params_Data) == 8,
              "Bad sizeof(LocalMainFrame_ClosePage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_ClosePage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_ClosePage_ResponseParams_Data>;

  LocalMainFrame_ClosePage_ResponseParams_Data();
  ~LocalMainFrame_ClosePage_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_ClosePage_ResponseParams_Data) == 8,
              "Bad sizeof(LocalMainFrame_ClosePage_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_SetInitialFocus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t reverse : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_SetInitialFocus_Params_Data>;

  LocalMainFrame_SetInitialFocus_Params_Data();
  ~LocalMainFrame_SetInitialFocus_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_SetInitialFocus_Params_Data) == 16,
              "Bad sizeof(LocalMainFrame_SetInitialFocus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_EnablePreferredSizeChangedMode_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_EnablePreferredSizeChangedMode_Params_Data>;

  LocalMainFrame_EnablePreferredSizeChangedMode_Params_Data();
  ~LocalMainFrame_EnablePreferredSizeChangedMode_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_EnablePreferredSizeChangedMode_Params_Data) == 8,
              "Bad sizeof(LocalMainFrame_EnablePreferredSizeChangedMode_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_ZoomToFindInPageRect_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect_in_root_frame;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_ZoomToFindInPageRect_Params_Data>;

  LocalMainFrame_ZoomToFindInPageRect_Params_Data();
  ~LocalMainFrame_ZoomToFindInPageRect_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_ZoomToFindInPageRect_Params_Data) == 16,
              "Bad sizeof(LocalMainFrame_ZoomToFindInPageRect_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_InstallCoopAccessMonitor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::blink::mojom::internal::FrameToken_Data accessed_window;
  mojo::internal::Pointer<::network::mojom::internal::CrossOriginOpenerPolicyReporterParams_Data> coop_reporter_info;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_InstallCoopAccessMonitor_Params_Data>;

  LocalMainFrame_InstallCoopAccessMonitor_Params_Data();
  ~LocalMainFrame_InstallCoopAccessMonitor_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_InstallCoopAccessMonitor_Params_Data) == 32,
              "Bad sizeof(LocalMainFrame_InstallCoopAccessMonitor_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_OnPortalActivated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::PortalToken_Data> portal_token;
  mojo::internal::AssociatedInterface_Data portal;
  mojo::internal::AssociatedEndpointHandle_Data portal_client;
  uint8_t pad2_[4];
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> data;
  uint64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_OnPortalActivated_Params_Data>;

  LocalMainFrame_OnPortalActivated_Params_Data();
  ~LocalMainFrame_OnPortalActivated_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_OnPortalActivated_Params_Data) == 48,
              "Bad sizeof(LocalMainFrame_OnPortalActivated_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_OnPortalActivated_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_OnPortalActivated_ResponseParams_Data>;

  LocalMainFrame_OnPortalActivated_ResponseParams_Data();
  ~LocalMainFrame_OnPortalActivated_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_OnPortalActivated_ResponseParams_Data) == 16,
              "Bad sizeof(LocalMainFrame_OnPortalActivated_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_ForwardMessageFromHost_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> message;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> source_origin;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_ForwardMessageFromHost_Params_Data>;

  LocalMainFrame_ForwardMessageFromHost_Params_Data();
  ~LocalMainFrame_ForwardMessageFromHost_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_ForwardMessageFromHost_Params_Data) == 24,
              "Bad sizeof(LocalMainFrame_ForwardMessageFromHost_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrame_UpdateBrowserControlsState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t constraints;
  int32_t current;
  uint8_t animate : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrame_UpdateBrowserControlsState_Params_Data>;

  LocalMainFrame_UpdateBrowserControlsState_Params_Data();
  ~LocalMainFrame_UpdateBrowserControlsState_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrame_UpdateBrowserControlsState_Params_Data) == 24,
              "Bad sizeof(LocalMainFrame_UpdateBrowserControlsState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_ScaleFactorChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  float scale;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_ScaleFactorChanged_Params_Data>;

  LocalMainFrameHost_ScaleFactorChanged_Params_Data();
  ~LocalMainFrameHost_ScaleFactorChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_ScaleFactorChanged_Params_Data) == 16,
              "Bad sizeof(LocalMainFrameHost_ScaleFactorChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_ContentsPreferredSizeChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> pref_size;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_ContentsPreferredSizeChanged_Params_Data>;

  LocalMainFrameHost_ContentsPreferredSizeChanged_Params_Data();
  ~LocalMainFrameHost_ContentsPreferredSizeChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_ContentsPreferredSizeChanged_Params_Data) == 16,
              "Bad sizeof(LocalMainFrameHost_ContentsPreferredSizeChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_TextAutosizerPageInfoChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::TextAutosizerPageInfo_Data> page_info;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_TextAutosizerPageInfoChanged_Params_Data>;

  LocalMainFrameHost_TextAutosizerPageInfoChanged_Params_Data();
  ~LocalMainFrameHost_TextAutosizerPageInfoChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_TextAutosizerPageInfoChanged_Params_Data) == 16,
              "Bad sizeof(LocalMainFrameHost_TextAutosizerPageInfoChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_FocusPage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_FocusPage_Params_Data>;

  LocalMainFrameHost_FocusPage_Params_Data();
  ~LocalMainFrameHost_FocusPage_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_FocusPage_Params_Data) == 8,
              "Bad sizeof(LocalMainFrameHost_FocusPage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_TakeFocus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t reverse : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_TakeFocus_Params_Data>;

  LocalMainFrameHost_TakeFocus_Params_Data();
  ~LocalMainFrameHost_TakeFocus_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_TakeFocus_Params_Data) == 16,
              "Bad sizeof(LocalMainFrameHost_TakeFocus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_UpdateTargetURL_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_UpdateTargetURL_Params_Data>;

  LocalMainFrameHost_UpdateTargetURL_Params_Data();
  ~LocalMainFrameHost_UpdateTargetURL_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_UpdateTargetURL_Params_Data) == 16,
              "Bad sizeof(LocalMainFrameHost_UpdateTargetURL_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_UpdateTargetURL_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_UpdateTargetURL_ResponseParams_Data>;

  LocalMainFrameHost_UpdateTargetURL_ResponseParams_Data();
  ~LocalMainFrameHost_UpdateTargetURL_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_UpdateTargetURL_ResponseParams_Data) == 8,
              "Bad sizeof(LocalMainFrameHost_UpdateTargetURL_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_RequestClose_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_RequestClose_Params_Data>;

  LocalMainFrameHost_RequestClose_Params_Data();
  ~LocalMainFrameHost_RequestClose_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_RequestClose_Params_Data) == 8,
              "Bad sizeof(LocalMainFrameHost_RequestClose_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_ShowCreatedWindow_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::LocalFrameToken_Data> opener_frame_token;
  int32_t disposition;
  uint8_t opened_by_user_gesture : 1;
  uint8_t pad2_[3];
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_ShowCreatedWindow_Params_Data>;

  LocalMainFrameHost_ShowCreatedWindow_Params_Data();
  ~LocalMainFrameHost_ShowCreatedWindow_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_ShowCreatedWindow_Params_Data) == 32,
              "Bad sizeof(LocalMainFrameHost_ShowCreatedWindow_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_ShowCreatedWindow_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_ShowCreatedWindow_ResponseParams_Data>;

  LocalMainFrameHost_ShowCreatedWindow_ResponseParams_Data();
  ~LocalMainFrameHost_ShowCreatedWindow_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_ShowCreatedWindow_ResponseParams_Data) == 8,
              "Bad sizeof(LocalMainFrameHost_ShowCreatedWindow_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_SetWindowRect_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> bounds;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_SetWindowRect_Params_Data>;

  LocalMainFrameHost_SetWindowRect_Params_Data();
  ~LocalMainFrameHost_SetWindowRect_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_SetWindowRect_Params_Data) == 16,
              "Bad sizeof(LocalMainFrameHost_SetWindowRect_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_SetWindowRect_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_SetWindowRect_ResponseParams_Data>;

  LocalMainFrameHost_SetWindowRect_ResponseParams_Data();
  ~LocalMainFrameHost_SetWindowRect_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_SetWindowRect_ResponseParams_Data) == 8,
              "Bad sizeof(LocalMainFrameHost_SetWindowRect_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_DidFirstVisuallyNonEmptyPaint_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_DidFirstVisuallyNonEmptyPaint_Params_Data>;

  LocalMainFrameHost_DidFirstVisuallyNonEmptyPaint_Params_Data();
  ~LocalMainFrameHost_DidFirstVisuallyNonEmptyPaint_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_DidFirstVisuallyNonEmptyPaint_Params_Data) == 8,
              "Bad sizeof(LocalMainFrameHost_DidFirstVisuallyNonEmptyPaint_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalMainFrameHost_DidAccessInitialMainDocument_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalMainFrameHost_DidAccessInitialMainDocument_Params_Data>;

  LocalMainFrameHost_DidAccessInitialMainDocument_Params_Data();
  ~LocalMainFrameHost_DidAccessInitialMainDocument_Params_Data() = delete;
};
static_assert(sizeof(LocalMainFrameHost_DidAccessInitialMainDocument_Params_Data) == 8,
              "Bad sizeof(LocalMainFrameHost_DidAccessInitialMainDocument_Params_Data)");

}  // namespace internal


class KeepAliveHandleFactory_IssueKeepAliveHandle_ParamsDataView {
 public:
  KeepAliveHandleFactory_IssueKeepAliveHandle_ParamsDataView() = default;

  KeepAliveHandleFactory_IssueKeepAliveHandle_ParamsDataView(
      internal::KeepAliveHandleFactory_IssueKeepAliveHandle_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeKeepAliveHandle() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::KeepAliveHandleInterfaceBase>>(
            &data_->keep_alive_handle, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::KeepAliveHandleFactory_IssueKeepAliveHandle_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_EnterFullscreen_ParamsDataView {
 public:
  LocalFrameHost_EnterFullscreen_ParamsDataView() = default;

  LocalFrameHost_EnterFullscreen_ParamsDataView(
      internal::LocalFrameHost_EnterFullscreen_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOptionsDataView(
      ::blink::mojom::FullscreenOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::blink::mojom::FullscreenOptionsDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_EnterFullscreen_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_EnterFullscreen_ResponseParamsDataView {
 public:
  LocalFrameHost_EnterFullscreen_ResponseParamsDataView() = default;

  LocalFrameHost_EnterFullscreen_ResponseParamsDataView(
      internal::LocalFrameHost_EnterFullscreen_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool granted() const {
    return data_->granted;
  }
 private:
  internal::LocalFrameHost_EnterFullscreen_ResponseParams_Data* data_ = nullptr;
};



class LocalFrameHost_ExitFullscreen_ParamsDataView {
 public:
  LocalFrameHost_ExitFullscreen_ParamsDataView() = default;

  LocalFrameHost_ExitFullscreen_ParamsDataView(
      internal::LocalFrameHost_ExitFullscreen_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_ExitFullscreen_Params_Data* data_ = nullptr;
};



class LocalFrameHost_FullscreenStateChanged_ParamsDataView {
 public:
  LocalFrameHost_FullscreenStateChanged_ParamsDataView() = default;

  LocalFrameHost_FullscreenStateChanged_ParamsDataView(
      internal::LocalFrameHost_FullscreenStateChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool is_fullscreen() const {
    return data_->is_fullscreen;
  }
  inline void GetOptionsDataView(
      ::blink::mojom::FullscreenOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::FullscreenOptionsDataView, UserType>(),
    "Attempting to read the optional `options` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOptions` instead "
    "of `ReadOptions if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::blink::mojom::FullscreenOptionsDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_FullscreenStateChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_RegisterProtocolHandler_ParamsDataView {
 public:
  LocalFrameHost_RegisterProtocolHandler_ParamsDataView() = default;

  LocalFrameHost_RegisterProtocolHandler_ParamsDataView(
      internal::LocalFrameHost_RegisterProtocolHandler_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSchemeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScheme(UserType* output) {
    
    auto* pointer = data_->scheme.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  bool user_gesture() const {
    return data_->user_gesture;
  }
 private:
  internal::LocalFrameHost_RegisterProtocolHandler_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_UnregisterProtocolHandler_ParamsDataView {
 public:
  LocalFrameHost_UnregisterProtocolHandler_ParamsDataView() = default;

  LocalFrameHost_UnregisterProtocolHandler_ParamsDataView(
      internal::LocalFrameHost_UnregisterProtocolHandler_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSchemeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScheme(UserType* output) {
    
    auto* pointer = data_->scheme.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  bool user_gesture() const {
    return data_->user_gesture;
  }
 private:
  internal::LocalFrameHost_UnregisterProtocolHandler_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidDisplayInsecureContent_ParamsDataView {
 public:
  LocalFrameHost_DidDisplayInsecureContent_ParamsDataView() = default;

  LocalFrameHost_DidDisplayInsecureContent_ParamsDataView(
      internal::LocalFrameHost_DidDisplayInsecureContent_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DidDisplayInsecureContent_Params_Data* data_ = nullptr;
};



class LocalFrameHost_DidContainInsecureFormAction_ParamsDataView {
 public:
  LocalFrameHost_DidContainInsecureFormAction_ParamsDataView() = default;

  LocalFrameHost_DidContainInsecureFormAction_ParamsDataView(
      internal::LocalFrameHost_DidContainInsecureFormAction_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DidContainInsecureFormAction_Params_Data* data_ = nullptr;
};



class LocalFrameHost_MainDocumentElementAvailable_ParamsDataView {
 public:
  LocalFrameHost_MainDocumentElementAvailable_ParamsDataView() = default;

  LocalFrameHost_MainDocumentElementAvailable_ParamsDataView(
      internal::LocalFrameHost_MainDocumentElementAvailable_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool uses_temporary_zoom_level() const {
    return data_->uses_temporary_zoom_level;
  }
 private:
  internal::LocalFrameHost_MainDocumentElementAvailable_Params_Data* data_ = nullptr;
};



class LocalFrameHost_SetNeedsOcclusionTracking_ParamsDataView {
 public:
  LocalFrameHost_SetNeedsOcclusionTracking_ParamsDataView() = default;

  LocalFrameHost_SetNeedsOcclusionTracking_ParamsDataView(
      internal::LocalFrameHost_SetNeedsOcclusionTracking_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool needs_tracking() const {
    return data_->needs_tracking;
  }
 private:
  internal::LocalFrameHost_SetNeedsOcclusionTracking_Params_Data* data_ = nullptr;
};



class LocalFrameHost_SetVirtualKeyboardOverlayPolicy_ParamsDataView {
 public:
  LocalFrameHost_SetVirtualKeyboardOverlayPolicy_ParamsDataView() = default;

  LocalFrameHost_SetVirtualKeyboardOverlayPolicy_ParamsDataView(
      internal::LocalFrameHost_SetVirtualKeyboardOverlayPolicy_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool vk_overlays_content() const {
    return data_->vk_overlays_content;
  }
 private:
  internal::LocalFrameHost_SetVirtualKeyboardOverlayPolicy_Params_Data* data_ = nullptr;
};



class LocalFrameHost_VisibilityChanged_ParamsDataView {
 public:
  LocalFrameHost_VisibilityChanged_ParamsDataView() = default;

  LocalFrameHost_VisibilityChanged_ParamsDataView(
      internal::LocalFrameHost_VisibilityChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadVisibility(UserType* output) const {
    auto data_value = data_->visibility;
    return mojo::internal::Deserialize<::blink::mojom::FrameVisibility>(
        data_value, output);
  }
  ::blink::mojom::FrameVisibility visibility() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FrameVisibility>(data_->visibility));
  }
 private:
  internal::LocalFrameHost_VisibilityChanged_Params_Data* data_ = nullptr;
};



class LocalFrameHost_DidChangeThemeColor_ParamsDataView {
 public:
  LocalFrameHost_DidChangeThemeColor_ParamsDataView() = default;

  LocalFrameHost_DidChangeThemeColor_ParamsDataView(
      internal::LocalFrameHost_DidChangeThemeColor_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetThemeColorDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadThemeColor(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::skia::mojom::SkColorDataView, UserType>(),
    "Attempting to read the optional `theme_color` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadThemeColor` instead "
    "of `ReadThemeColor if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->theme_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_DidChangeThemeColor_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidChangeBackgroundColor_ParamsDataView {
 public:
  LocalFrameHost_DidChangeBackgroundColor_ParamsDataView() = default;

  LocalFrameHost_DidChangeBackgroundColor_ParamsDataView(
      internal::LocalFrameHost_DidChangeBackgroundColor_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBackgroundColorDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBackgroundColor(UserType* output) {
    
    auto* pointer = data_->background_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, message_);
  }
  bool color_adjust() const {
    return data_->color_adjust;
  }
 private:
  internal::LocalFrameHost_DidChangeBackgroundColor_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidFailLoadWithError_ParamsDataView {
 public:
  LocalFrameHost_DidFailLoadWithError_ParamsDataView() = default;

  LocalFrameHost_DidFailLoadWithError_ParamsDataView(
      internal::LocalFrameHost_DidFailLoadWithError_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  int32_t error_code() const {
    return data_->error_code;
  }
 private:
  internal::LocalFrameHost_DidFailLoadWithError_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidFocusFrame_ParamsDataView {
 public:
  LocalFrameHost_DidFocusFrame_ParamsDataView() = default;

  LocalFrameHost_DidFocusFrame_ParamsDataView(
      internal::LocalFrameHost_DidFocusFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DidFocusFrame_Params_Data* data_ = nullptr;
};



class LocalFrameHost_DidCallFocus_ParamsDataView {
 public:
  LocalFrameHost_DidCallFocus_ParamsDataView() = default;

  LocalFrameHost_DidCallFocus_ParamsDataView(
      internal::LocalFrameHost_DidCallFocus_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DidCallFocus_Params_Data* data_ = nullptr;
};



class LocalFrameHost_EnforceInsecureRequestPolicy_ParamsDataView {
 public:
  LocalFrameHost_EnforceInsecureRequestPolicy_ParamsDataView() = default;

  LocalFrameHost_EnforceInsecureRequestPolicy_ParamsDataView(
      internal::LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadPolicyBitmap(UserType* output) const {
    auto data_value = data_->policy_bitmap;
    return mojo::internal::Deserialize<::blink::mojom::InsecureRequestPolicy>(
        data_value, output);
  }
  ::blink::mojom::InsecureRequestPolicy policy_bitmap() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::InsecureRequestPolicy>(data_->policy_bitmap));
  }
 private:
  internal::LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data* data_ = nullptr;
};



class LocalFrameHost_EnforceInsecureNavigationsSet_ParamsDataView {
 public:
  LocalFrameHost_EnforceInsecureNavigationsSet_ParamsDataView() = default;

  LocalFrameHost_EnforceInsecureNavigationsSet_ParamsDataView(
      internal::LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSetDataView(
      mojo::ArrayDataView<uint32_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSet(UserType* output) {
    
    auto* pointer = data_->set.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint32_t>>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_SuddenTerminationDisablerChanged_ParamsDataView {
 public:
  LocalFrameHost_SuddenTerminationDisablerChanged_ParamsDataView() = default;

  LocalFrameHost_SuddenTerminationDisablerChanged_ParamsDataView(
      internal::LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool present() const {
    return data_->present;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadDisablerType(UserType* output) const {
    auto data_value = data_->disabler_type;
    return mojo::internal::Deserialize<::blink::mojom::SuddenTerminationDisablerType>(
        data_value, output);
  }
  ::blink::mojom::SuddenTerminationDisablerType disabler_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::SuddenTerminationDisablerType>(data_->disabler_type));
  }
 private:
  internal::LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data* data_ = nullptr;
};



class LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_ParamsDataView {
 public:
  LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_ParamsDataView() = default;

  LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_ParamsDataView(
      internal::LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool has_gesture() const {
    return data_->has_gesture;
  }
 private:
  internal::LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data* data_ = nullptr;
};



class LocalFrameHost_ScrollRectToVisibleInParentFrame_ParamsDataView {
 public:
  LocalFrameHost_ScrollRectToVisibleInParentFrame_ParamsDataView() = default;

  LocalFrameHost_ScrollRectToVisibleInParentFrame_ParamsDataView(
      internal::LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRectToScrollDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRectToScroll(UserType* output) {
    
    auto* pointer = data_->rect_to_scroll.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
  inline void GetParamsDataView(
      ::blink::mojom::ScrollIntoViewParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::blink::mojom::ScrollIntoViewParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_BubbleLogicalScrollInParentFrame_ParamsDataView {
 public:
  LocalFrameHost_BubbleLogicalScrollInParentFrame_ParamsDataView() = default;

  LocalFrameHost_BubbleLogicalScrollInParentFrame_ParamsDataView(
      internal::LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadDirection(UserType* output) const {
    auto data_value = data_->direction;
    return mojo::internal::Deserialize<::blink::mojom::ScrollDirection>(
        data_value, output);
  }
  ::blink::mojom::ScrollDirection direction() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ScrollDirection>(data_->direction));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadGranularity(UserType* output) const {
    auto data_value = data_->granularity;
    return mojo::internal::Deserialize<::ui::mojom::ScrollGranularity>(
        data_value, output);
  }
  ::ui::mojom::ScrollGranularity granularity() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ui::mojom::ScrollGranularity>(data_->granularity));
  }
 private:
  internal::LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data* data_ = nullptr;
};



class LocalFrameHost_DidBlockNavigation_ParamsDataView {
 public:
  LocalFrameHost_DidBlockNavigation_ParamsDataView() = default;

  LocalFrameHost_DidBlockNavigation_ParamsDataView(
      internal::LocalFrameHost_DidBlockNavigation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBlockedUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBlockedUrl(UserType* output) {
    
    auto* pointer = data_->blocked_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetInitiatorUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInitiatorUrl(UserType* output) {
    
    auto* pointer = data_->initiator_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::blink::mojom::NavigationBlockedReason>(
        data_value, output);
  }
  ::blink::mojom::NavigationBlockedReason reason() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::NavigationBlockedReason>(data_->reason));
  }
 private:
  internal::LocalFrameHost_DidBlockNavigation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidChangeLoadProgress_ParamsDataView {
 public:
  LocalFrameHost_DidChangeLoadProgress_ParamsDataView() = default;

  LocalFrameHost_DidChangeLoadProgress_ParamsDataView(
      internal::LocalFrameHost_DidChangeLoadProgress_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  double load_progress() const {
    return data_->load_progress;
  }
 private:
  internal::LocalFrameHost_DidChangeLoadProgress_Params_Data* data_ = nullptr;
};



class LocalFrameHost_DidFinishLoad_ParamsDataView {
 public:
  LocalFrameHost_DidFinishLoad_ParamsDataView() = default;

  LocalFrameHost_DidFinishLoad_ParamsDataView(
      internal::LocalFrameHost_DidFinishLoad_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetValidatedUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValidatedUrl(UserType* output) {
    
    auto* pointer = data_->validated_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_DidFinishLoad_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DispatchLoad_ParamsDataView {
 public:
  LocalFrameHost_DispatchLoad_ParamsDataView() = default;

  LocalFrameHost_DispatchLoad_ParamsDataView(
      internal::LocalFrameHost_DispatchLoad_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DispatchLoad_Params_Data* data_ = nullptr;
};



class LocalFrameHost_GoToEntryAtOffset_ParamsDataView {
 public:
  LocalFrameHost_GoToEntryAtOffset_ParamsDataView() = default;

  LocalFrameHost_GoToEntryAtOffset_ParamsDataView(
      internal::LocalFrameHost_GoToEntryAtOffset_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t offset() const {
    return data_->offset;
  }
  bool has_user_gesture() const {
    return data_->has_user_gesture;
  }
 private:
  internal::LocalFrameHost_GoToEntryAtOffset_Params_Data* data_ = nullptr;
};



class LocalFrameHost_NavigateToNavigationApiKey_ParamsDataView {
 public:
  LocalFrameHost_NavigateToNavigationApiKey_ParamsDataView() = default;

  LocalFrameHost_NavigateToNavigationApiKey_ParamsDataView(
      internal::LocalFrameHost_NavigateToNavigationApiKey_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = data_->key.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool has_user_gesture() const {
    return data_->has_user_gesture;
  }
 private:
  internal::LocalFrameHost_NavigateToNavigationApiKey_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_UpdateTitle_ParamsDataView {
 public:
  LocalFrameHost_UpdateTitle_ParamsDataView() = default;

  LocalFrameHost_UpdateTitle_ParamsDataView(
      internal::LocalFrameHost_UpdateTitle_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTitleDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTitle(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::String16DataView, UserType>(),
    "Attempting to read the optional `title` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadTitle` instead "
    "of `ReadTitle if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->title.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadTitleDirection(UserType* output) const {
    auto data_value = data_->title_direction;
    return mojo::internal::Deserialize<::mojo_base::mojom::TextDirection>(
        data_value, output);
  }
  ::mojo_base::mojom::TextDirection title_direction() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::mojo_base::mojom::TextDirection>(data_->title_direction));
  }
 private:
  internal::LocalFrameHost_UpdateTitle_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_UpdateUserActivationState_ParamsDataView {
 public:
  LocalFrameHost_UpdateUserActivationState_ParamsDataView() = default;

  LocalFrameHost_UpdateUserActivationState_ParamsDataView(
      internal::LocalFrameHost_UpdateUserActivationState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadUpdateType(UserType* output) const {
    auto data_value = data_->update_type;
    return mojo::internal::Deserialize<::blink::mojom::UserActivationUpdateType>(
        data_value, output);
  }
  ::blink::mojom::UserActivationUpdateType update_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::UserActivationUpdateType>(data_->update_type));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadNotificationType(UserType* output) const {
    auto data_value = data_->notification_type;
    return mojo::internal::Deserialize<::blink::mojom::UserActivationNotificationType>(
        data_value, output);
  }
  ::blink::mojom::UserActivationNotificationType notification_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::UserActivationNotificationType>(data_->notification_type));
  }
 private:
  internal::LocalFrameHost_UpdateUserActivationState_Params_Data* data_ = nullptr;
};



class LocalFrameHost_HandleAccessibilityFindInPageResult_ParamsDataView {
 public:
  LocalFrameHost_HandleAccessibilityFindInPageResult_ParamsDataView() = default;

  LocalFrameHost_HandleAccessibilityFindInPageResult_ParamsDataView(
      internal::LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      FindInPageResultAXParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::blink::mojom::FindInPageResultAXParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_HandleAccessibilityFindInPageTermination_ParamsDataView {
 public:
  LocalFrameHost_HandleAccessibilityFindInPageTermination_ParamsDataView() = default;

  LocalFrameHost_HandleAccessibilityFindInPageTermination_ParamsDataView(
      internal::LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data* data_ = nullptr;
};



class LocalFrameHost_DocumentOnLoadCompleted_ParamsDataView {
 public:
  LocalFrameHost_DocumentOnLoadCompleted_ParamsDataView() = default;

  LocalFrameHost_DocumentOnLoadCompleted_ParamsDataView(
      internal::LocalFrameHost_DocumentOnLoadCompleted_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DocumentOnLoadCompleted_Params_Data* data_ = nullptr;
};



class LocalFrameHost_ForwardResourceTimingToParent_ParamsDataView {
 public:
  LocalFrameHost_ForwardResourceTimingToParent_ParamsDataView() = default;

  LocalFrameHost_ForwardResourceTimingToParent_ParamsDataView(
      internal::LocalFrameHost_ForwardResourceTimingToParent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTimingDataView(
      ::blink::mojom::ResourceTimingInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTiming(UserType* output) {
    
    auto* pointer = data_->timing.Get();
    return mojo::internal::Deserialize<::blink::mojom::ResourceTimingInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_ForwardResourceTimingToParent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidDispatchDOMContentLoadedEvent_ParamsDataView {
 public:
  LocalFrameHost_DidDispatchDOMContentLoadedEvent_ParamsDataView() = default;

  LocalFrameHost_DidDispatchDOMContentLoadedEvent_ParamsDataView(
      internal::LocalFrameHost_DidDispatchDOMContentLoadedEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DidDispatchDOMContentLoadedEvent_Params_Data* data_ = nullptr;
};



class LocalFrameHost_RunModalAlertDialog_ParamsDataView {
 public:
  LocalFrameHost_RunModalAlertDialog_ParamsDataView() = default;

  LocalFrameHost_RunModalAlertDialog_ParamsDataView(
      internal::LocalFrameHost_RunModalAlertDialog_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAlertMessageDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAlertMessage(UserType* output) {
    
    auto* pointer = data_->alert_message.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  bool disable_third_party_subframe_suppresion() const {
    return data_->disable_third_party_subframe_suppresion;
  }
 private:
  internal::LocalFrameHost_RunModalAlertDialog_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_RunModalAlertDialog_ResponseParamsDataView {
 public:
  LocalFrameHost_RunModalAlertDialog_ResponseParamsDataView() = default;

  LocalFrameHost_RunModalAlertDialog_ResponseParamsDataView(
      internal::LocalFrameHost_RunModalAlertDialog_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_RunModalAlertDialog_ResponseParams_Data* data_ = nullptr;
};



class LocalFrameHost_RunModalConfirmDialog_ParamsDataView {
 public:
  LocalFrameHost_RunModalConfirmDialog_ParamsDataView() = default;

  LocalFrameHost_RunModalConfirmDialog_ParamsDataView(
      internal::LocalFrameHost_RunModalConfirmDialog_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAlertMessageDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAlertMessage(UserType* output) {
    
    auto* pointer = data_->alert_message.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  bool disable_third_party_subframe_suppresion() const {
    return data_->disable_third_party_subframe_suppresion;
  }
 private:
  internal::LocalFrameHost_RunModalConfirmDialog_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_RunModalConfirmDialog_ResponseParamsDataView {
 public:
  LocalFrameHost_RunModalConfirmDialog_ResponseParamsDataView() = default;

  LocalFrameHost_RunModalConfirmDialog_ResponseParamsDataView(
      internal::LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data* data_ = nullptr;
};



class LocalFrameHost_RunModalPromptDialog_ParamsDataView {
 public:
  LocalFrameHost_RunModalPromptDialog_ParamsDataView() = default;

  LocalFrameHost_RunModalPromptDialog_ParamsDataView(
      internal::LocalFrameHost_RunModalPromptDialog_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAlertMessageDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAlertMessage(UserType* output) {
    
    auto* pointer = data_->alert_message.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetDefaultValueDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDefaultValue(UserType* output) {
    
    auto* pointer = data_->default_value.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  bool disable_third_party_subframe_suppresion() const {
    return data_->disable_third_party_subframe_suppresion;
  }
 private:
  internal::LocalFrameHost_RunModalPromptDialog_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_RunModalPromptDialog_ResponseParamsDataView {
 public:
  LocalFrameHost_RunModalPromptDialog_ResponseParamsDataView() = default;

  LocalFrameHost_RunModalPromptDialog_ResponseParamsDataView(
      internal::LocalFrameHost_RunModalPromptDialog_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetResultDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_RunModalPromptDialog_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_RunBeforeUnloadConfirm_ParamsDataView {
 public:
  LocalFrameHost_RunBeforeUnloadConfirm_ParamsDataView() = default;

  LocalFrameHost_RunBeforeUnloadConfirm_ParamsDataView(
      internal::LocalFrameHost_RunBeforeUnloadConfirm_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_reload() const {
    return data_->is_reload;
  }
 private:
  internal::LocalFrameHost_RunBeforeUnloadConfirm_Params_Data* data_ = nullptr;
};



class LocalFrameHost_RunBeforeUnloadConfirm_ResponseParamsDataView {
 public:
  LocalFrameHost_RunBeforeUnloadConfirm_ResponseParamsDataView() = default;

  LocalFrameHost_RunBeforeUnloadConfirm_ResponseParamsDataView(
      internal::LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data* data_ = nullptr;
};



class LocalFrameHost_UpdateFaviconURL_ParamsDataView {
 public:
  LocalFrameHost_UpdateFaviconURL_ParamsDataView() = default;

  LocalFrameHost_UpdateFaviconURL_ParamsDataView(
      internal::LocalFrameHost_UpdateFaviconURL_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFaviconUrlsDataView(
      mojo::ArrayDataView<::blink::mojom::FaviconURLDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFaviconUrls(UserType* output) {
    
    auto* pointer = data_->favicon_urls.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::FaviconURLDataView>>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_UpdateFaviconURL_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DownloadURL_ParamsDataView {
 public:
  LocalFrameHost_DownloadURL_ParamsDataView() = default;

  LocalFrameHost_DownloadURL_ParamsDataView(
      internal::LocalFrameHost_DownloadURL_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      DownloadURLParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::blink::mojom::DownloadURLParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_DownloadURL_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_FocusedElementChanged_ParamsDataView {
 public:
  LocalFrameHost_FocusedElementChanged_ParamsDataView() = default;

  LocalFrameHost_FocusedElementChanged_ParamsDataView(
      internal::LocalFrameHost_FocusedElementChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool is_editable_element() const {
    return data_->is_editable_element;
  }
  inline void GetBoundsInFrameWidgetDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBoundsInFrameWidget(UserType* output) {
    
    auto* pointer = data_->bounds_in_frame_widget.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadFocusType(UserType* output) const {
    auto data_value = data_->focus_type;
    return mojo::internal::Deserialize<::blink::mojom::FocusType>(
        data_value, output);
  }
  ::blink::mojom::FocusType focus_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FocusType>(data_->focus_type));
  }
 private:
  internal::LocalFrameHost_FocusedElementChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_TextSelectionChanged_ParamsDataView {
 public:
  LocalFrameHost_TextSelectionChanged_ParamsDataView() = default;

  LocalFrameHost_TextSelectionChanged_ParamsDataView(
      internal::LocalFrameHost_TextSelectionChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTextDataView(
      ::mojo_base::mojom::BigString16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadText(UserType* output) {
    
    auto* pointer = data_->text.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::BigString16DataView>(
        pointer, output, message_);
  }
  uint32_t offset() const {
    return data_->offset;
  }
  inline void GetRangeDataView(
      ::gfx::mojom::RangeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRange(UserType* output) {
    
    auto* pointer = data_->range.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RangeDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_TextSelectionChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_ShowPopupMenu_ParamsDataView {
 public:
  LocalFrameHost_ShowPopupMenu_ParamsDataView() = default;

  LocalFrameHost_ShowPopupMenu_ParamsDataView(
      internal::LocalFrameHost_ShowPopupMenu_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePopupClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::PopupMenuClientInterfaceBase>>(
            &data_->popup_client, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetBoundsDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBounds(UserType* output) {
    
    auto* pointer = data_->bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  int32_t item_height() const {
    return data_->item_height;
  }
  double font_size() const {
    return data_->font_size;
  }
  int32_t selected_item() const {
    return data_->selected_item;
  }
  inline void GetMenuItemsDataView(
      mojo::ArrayDataView<::blink::mojom::MenuItemDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMenuItems(UserType* output) {
    
    auto* pointer = data_->menu_items.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::MenuItemDataView>>(
        pointer, output, message_);
  }
  bool right_aligned() const {
    return data_->right_aligned;
  }
  bool allow_multiple_selection() const {
    return data_->allow_multiple_selection;
  }
 private:
  internal::LocalFrameHost_ShowPopupMenu_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_CreateNewPopupWidget_ParamsDataView {
 public:
  LocalFrameHost_CreateNewPopupWidget_ParamsDataView() = default;

  LocalFrameHost_CreateNewPopupWidget_ParamsDataView(
      internal::LocalFrameHost_CreateNewPopupWidget_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePopupHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::PopupWidgetHostAssociatedRequestDataView>(
            &data_->popup_host, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeBlinkWidgetHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::WidgetHostAssociatedRequestDataView>(
            &data_->blink_widget_host, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeBlinkWidget() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::WidgetAssociatedPtrInfoDataView>(
            &data_->blink_widget, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::LocalFrameHost_CreateNewPopupWidget_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_ShowContextMenu_ParamsDataView {
 public:
  LocalFrameHost_ShowContextMenu_ParamsDataView() = default;

  LocalFrameHost_ShowContextMenu_ParamsDataView(
      internal::LocalFrameHost_ShowContextMenu_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::ContextMenuClientAssociatedPtrInfoDataView>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetParamsDataView(
      ::blink::mojom::UntrustworthyContextMenuParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::blink::mojom::UntrustworthyContextMenuParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_ShowContextMenu_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidLoadResourceFromMemoryCache_ParamsDataView {
 public:
  LocalFrameHost_DidLoadResourceFromMemoryCache_ParamsDataView() = default;

  LocalFrameHost_DidLoadResourceFromMemoryCache_ParamsDataView(
      internal::LocalFrameHost_DidLoadResourceFromMemoryCache_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetHttpMethodDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHttpMethod(UserType* output) {
    
    auto* pointer = data_->http_method.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetMimeTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMimeType(UserType* output) {
    
    auto* pointer = data_->mime_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadRequestDestination(UserType* output) const {
    auto data_value = data_->request_destination;
    return mojo::internal::Deserialize<::network::mojom::RequestDestination>(
        data_value, output);
  }
  ::network::mojom::RequestDestination request_destination() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::RequestDestination>(data_->request_destination));
  }
  bool include_credentials() const {
    return data_->include_credentials;
  }
 private:
  internal::LocalFrameHost_DidLoadResourceFromMemoryCache_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidChangeFrameOwnerProperties_ParamsDataView {
 public:
  LocalFrameHost_DidChangeFrameOwnerProperties_ParamsDataView() = default;

  LocalFrameHost_DidChangeFrameOwnerProperties_ParamsDataView(
      internal::LocalFrameHost_DidChangeFrameOwnerProperties_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetChildFrameTokenDataView(
      ::blink::mojom::FrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadChildFrameToken(UserType* output) {
    
    auto* pointer = !data_->child_frame_token.is_null() ? &data_->child_frame_token : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetFrameOwnerPropertiesDataView(
      ::blink::mojom::FrameOwnerPropertiesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameOwnerProperties(UserType* output) {
    
    auto* pointer = data_->frame_owner_properties.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameOwnerPropertiesDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_DidChangeFrameOwnerProperties_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidChangeOpener_ParamsDataView {
 public:
  LocalFrameHost_DidChangeOpener_ParamsDataView() = default;

  LocalFrameHost_DidChangeOpener_ParamsDataView(
      internal::LocalFrameHost_DidChangeOpener_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOpenerFrameDataView(
      ::blink::mojom::LocalFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOpenerFrame(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::LocalFrameTokenDataView, UserType>(),
    "Attempting to read the optional `opener_frame` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOpenerFrame` instead "
    "of `ReadOpenerFrame if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->opener_frame.Get();
    return mojo::internal::Deserialize<::blink::mojom::LocalFrameTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_DidChangeOpener_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidChangeFramePolicy_ParamsDataView {
 public:
  LocalFrameHost_DidChangeFramePolicy_ParamsDataView() = default;

  LocalFrameHost_DidChangeFramePolicy_ParamsDataView(
      internal::LocalFrameHost_DidChangeFramePolicy_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetChildFrameTokenDataView(
      ::blink::mojom::FrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadChildFrameToken(UserType* output) {
    
    auto* pointer = !data_->child_frame_token.is_null() ? &data_->child_frame_token : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetFramePolicyDataView(
      ::blink::mojom::FramePolicyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFramePolicy(UserType* output) {
    
    auto* pointer = data_->frame_policy.Get();
    return mojo::internal::Deserialize<::blink::mojom::FramePolicyDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_DidChangeFramePolicy_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidChangeIframeAttributes_ParamsDataView {
 public:
  LocalFrameHost_DidChangeIframeAttributes_ParamsDataView() = default;

  LocalFrameHost_DidChangeIframeAttributes_ParamsDataView(
      internal::LocalFrameHost_DidChangeIframeAttributes_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetChildFrameTokenDataView(
      ::blink::mojom::FrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadChildFrameToken(UserType* output) {
    
    auto* pointer = !data_->child_frame_token.is_null() ? &data_->child_frame_token : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetAttributesDataView(
      IframeAttributesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAttributes(UserType* output) {
    
    auto* pointer = data_->attributes.Get();
    return mojo::internal::Deserialize<::blink::mojom::IframeAttributesDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_DidChangeIframeAttributes_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_CapturePaintPreviewOfSubframe_ParamsDataView {
 public:
  LocalFrameHost_CapturePaintPreviewOfSubframe_ParamsDataView() = default;

  LocalFrameHost_CapturePaintPreviewOfSubframe_ParamsDataView(
      internal::LocalFrameHost_CapturePaintPreviewOfSubframe_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetClipRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClipRect(UserType* output) {
    
    auto* pointer = data_->clip_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  inline void GetGuidDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGuid(UserType* output) {
    
    auto* pointer = data_->guid.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_CapturePaintPreviewOfSubframe_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_SetCloseListener_ParamsDataView {
 public:
  LocalFrameHost_SetCloseListener_ParamsDataView() = default;

  LocalFrameHost_SetCloseListener_ParamsDataView(
      internal::LocalFrameHost_SetCloseListener_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeListener() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::CloseListenerInterfaceBase>>(
            &data_->listener, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::LocalFrameHost_SetCloseListener_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_Detach_ParamsDataView {
 public:
  LocalFrameHost_Detach_ParamsDataView() = default;

  LocalFrameHost_Detach_ParamsDataView(
      internal::LocalFrameHost_Detach_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_Detach_Params_Data* data_ = nullptr;
};



class LocalFrameHost_GetKeepAliveHandleFactory_ParamsDataView {
 public:
  LocalFrameHost_GetKeepAliveHandleFactory_ParamsDataView() = default;

  LocalFrameHost_GetKeepAliveHandleFactory_ParamsDataView(
      internal::LocalFrameHost_GetKeepAliveHandleFactory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::KeepAliveHandleFactoryInterfaceBase>>(
            &data_->factory, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::LocalFrameHost_GetKeepAliveHandleFactory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidAddMessageToConsole_ParamsDataView {
 public:
  LocalFrameHost_DidAddMessageToConsole_ParamsDataView() = default;

  LocalFrameHost_DidAddMessageToConsole_ParamsDataView(
      internal::LocalFrameHost_DidAddMessageToConsole_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadLogLevel(UserType* output) const {
    auto data_value = data_->log_level;
    return mojo::internal::Deserialize<::blink::mojom::ConsoleMessageLevel>(
        data_value, output);
  }
  ::blink::mojom::ConsoleMessageLevel log_level() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ConsoleMessageLevel>(data_->log_level));
  }
  inline void GetMsgDataView(
      ::mojo_base::mojom::BigString16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMsg(UserType* output) {
    
    auto* pointer = data_->msg.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::BigString16DataView>(
        pointer, output, message_);
  }
  uint32_t line_number() const {
    return data_->line_number;
  }
  inline void GetSourceIdDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceId(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::String16DataView, UserType>(),
    "Attempting to read the optional `source_id` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSourceId` instead "
    "of `ReadSourceId if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->source_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetUntrustedStackTraceDataView(
      ::mojo_base::mojom::BigString16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUntrustedStackTrace(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::BigString16DataView, UserType>(),
    "Attempting to read the optional `untrusted_stack_trace` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUntrustedStackTrace` instead "
    "of `ReadUntrustedStackTrace if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->untrusted_stack_trace.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::BigString16DataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_DidAddMessageToConsole_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_FrameSizeChanged_ParamsDataView {
 public:
  LocalFrameHost_FrameSizeChanged_ParamsDataView() = default;

  LocalFrameHost_FrameSizeChanged_ParamsDataView(
      internal::LocalFrameHost_FrameSizeChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSize(UserType* output) {
    
    auto* pointer = data_->size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_FrameSizeChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_DidInferColorScheme_ParamsDataView {
 public:
  LocalFrameHost_DidInferColorScheme_ParamsDataView() = default;

  LocalFrameHost_DidInferColorScheme_ParamsDataView(
      internal::LocalFrameHost_DidInferColorScheme_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadColorScheme(UserType* output) const {
    auto data_value = data_->color_scheme;
    return mojo::internal::Deserialize<::blink::mojom::PreferredColorScheme>(
        data_value, output);
  }
  ::blink::mojom::PreferredColorScheme color_scheme() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PreferredColorScheme>(data_->color_scheme));
  }
 private:
  internal::LocalFrameHost_DidInferColorScheme_Params_Data* data_ = nullptr;
};



class LocalFrameHost_DidChangeSrcDoc_ParamsDataView {
 public:
  LocalFrameHost_DidChangeSrcDoc_ParamsDataView() = default;

  LocalFrameHost_DidChangeSrcDoc_ParamsDataView(
      internal::LocalFrameHost_DidChangeSrcDoc_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetChildFrameTokenDataView(
      ::blink::mojom::FrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadChildFrameToken(UserType* output) {
    
    auto* pointer = !data_->child_frame_token.is_null() ? &data_->child_frame_token : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetSrcdocValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSrcdocValue(UserType* output) {
    
    auto* pointer = data_->srcdoc_value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_DidChangeSrcDoc_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_ReceivedDelegatedCapability_ParamsDataView {
 public:
  LocalFrameHost_ReceivedDelegatedCapability_ParamsDataView() = default;

  LocalFrameHost_ReceivedDelegatedCapability_ParamsDataView(
      internal::LocalFrameHost_ReceivedDelegatedCapability_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadDelegatedCapability(UserType* output) const {
    auto data_value = data_->delegated_capability;
    return mojo::internal::Deserialize<::blink::mojom::DelegatedCapability>(
        data_value, output);
  }
  ::blink::mojom::DelegatedCapability delegated_capability() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::DelegatedCapability>(data_->delegated_capability));
  }
 private:
  internal::LocalFrameHost_ReceivedDelegatedCapability_Params_Data* data_ = nullptr;
};



class LocalFrameHost_CreatePortal_ParamsDataView {
 public:
  LocalFrameHost_CreatePortal_ParamsDataView() = default;

  LocalFrameHost_CreatePortal_ParamsDataView(
      internal::LocalFrameHost_CreatePortal_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePortal() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::PortalAssociatedRequestDataView>(
            &data_->portal, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::PortalClientAssociatedPtrInfoDataView>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetRemoteFrameInterfacesDataView(
      ::blink::mojom::RemoteFrameInterfacesFromRendererDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRemoteFrameInterfaces(UserType* output) {
    
    auto* pointer = data_->remote_frame_interfaces.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameInterfacesFromRendererDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_CreatePortal_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_CreatePortal_ResponseParamsDataView {
 public:
  LocalFrameHost_CreatePortal_ResponseParamsDataView() = default;

  LocalFrameHost_CreatePortal_ResponseParamsDataView(
      internal::LocalFrameHost_CreatePortal_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInitialReplicatedStateDataView(
      ::blink::mojom::FrameReplicationStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInitialReplicatedState(UserType* output) {
    
    auto* pointer = data_->initial_replicated_state.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameReplicationStateDataView>(
        pointer, output, message_);
  }
  inline void GetPortalTokenDataView(
      ::blink::mojom::PortalTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPortalToken(UserType* output) {
    
    auto* pointer = data_->portal_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::PortalTokenDataView>(
        pointer, output, message_);
  }
  inline void GetFrameTokenDataView(
      ::blink::mojom::RemoteFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameToken(UserType* output) {
    
    auto* pointer = data_->frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetDevtoolsFrameTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevtoolsFrameToken(UserType* output) {
    
    auto* pointer = data_->devtools_frame_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_CreatePortal_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_AdoptPortal_ParamsDataView {
 public:
  LocalFrameHost_AdoptPortal_ParamsDataView() = default;

  LocalFrameHost_AdoptPortal_ParamsDataView(
      internal::LocalFrameHost_AdoptPortal_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPortalTokenDataView(
      ::blink::mojom::PortalTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPortalToken(UserType* output) {
    
    auto* pointer = data_->portal_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::PortalTokenDataView>(
        pointer, output, message_);
  }
  inline void GetRemoteFrameInterfacesDataView(
      ::blink::mojom::RemoteFrameInterfacesFromRendererDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRemoteFrameInterfaces(UserType* output) {
    
    auto* pointer = data_->remote_frame_interfaces.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameInterfacesFromRendererDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_AdoptPortal_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_AdoptPortal_ResponseParamsDataView {
 public:
  LocalFrameHost_AdoptPortal_ResponseParamsDataView() = default;

  LocalFrameHost_AdoptPortal_ResponseParamsDataView(
      internal::LocalFrameHost_AdoptPortal_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReplicatedStateDataView(
      ::blink::mojom::FrameReplicationStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReplicatedState(UserType* output) {
    
    auto* pointer = data_->replicated_state.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameReplicationStateDataView>(
        pointer, output, message_);
  }
  inline void GetFrameTokenDataView(
      ::blink::mojom::RemoteFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameToken(UserType* output) {
    
    auto* pointer = data_->frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetDevtoolsFrameTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevtoolsFrameToken(UserType* output) {
    
    auto* pointer = data_->devtools_frame_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_AdoptPortal_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrameHost_CreateFencedFrame_ParamsDataView {
 public:
  LocalFrameHost_CreateFencedFrame_ParamsDataView() = default;

  LocalFrameHost_CreateFencedFrame_ParamsDataView(
      internal::LocalFrameHost_CreateFencedFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeFencedFrame() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::FencedFrameOwnerHostAssociatedRequestDataView>(
            &data_->fenced_frame, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadMode(UserType* output) const {
    auto data_value = data_->mode;
    return mojo::internal::Deserialize<::blink::mojom::FencedFrameMode>(
        data_value, output);
  }
  ::blink::mojom::FencedFrameMode mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FencedFrameMode>(data_->mode));
  }
  inline void GetRemoteFrameInterfacesDataView(
      ::blink::mojom::RemoteFrameInterfacesFromRendererDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRemoteFrameInterfaces(UserType* output) {
    
    auto* pointer = data_->remote_frame_interfaces.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameInterfacesFromRendererDataView>(
        pointer, output, message_);
  }
  inline void GetFrameTokenDataView(
      ::blink::mojom::RemoteFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameToken(UserType* output) {
    
    auto* pointer = data_->frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetDevtoolsFrameTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevtoolsFrameToken(UserType* output) {
    
    auto* pointer = data_->devtools_frame_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrameHost_CreateFencedFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_GetTextSurroundingSelection_ParamsDataView {
 public:
  LocalFrame_GetTextSurroundingSelection_ParamsDataView() = default;

  LocalFrame_GetTextSurroundingSelection_ParamsDataView(
      internal::LocalFrame_GetTextSurroundingSelection_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t max_length() const {
    return data_->max_length;
  }
 private:
  internal::LocalFrame_GetTextSurroundingSelection_Params_Data* data_ = nullptr;
};



class LocalFrame_GetTextSurroundingSelection_ResponseParamsDataView {
 public:
  LocalFrame_GetTextSurroundingSelection_ResponseParamsDataView() = default;

  LocalFrame_GetTextSurroundingSelection_ResponseParamsDataView(
      internal::LocalFrame_GetTextSurroundingSelection_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetContentDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContent(UserType* output) {
    
    auto* pointer = data_->content.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  uint32_t start_offset() const {
    return data_->start_offset;
  }
  uint32_t end_offset() const {
    return data_->end_offset;
  }
 private:
  internal::LocalFrame_GetTextSurroundingSelection_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_SendInterventionReport_ParamsDataView {
 public:
  LocalFrame_SendInterventionReport_ParamsDataView() = default;

  LocalFrame_SendInterventionReport_ParamsDataView(
      internal::LocalFrame_SendInterventionReport_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_SendInterventionReport_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_SetFrameOwnerProperties_ParamsDataView {
 public:
  LocalFrame_SetFrameOwnerProperties_ParamsDataView() = default;

  LocalFrame_SetFrameOwnerProperties_ParamsDataView(
      internal::LocalFrame_SetFrameOwnerProperties_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPropertiesDataView(
      ::blink::mojom::FrameOwnerPropertiesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProperties(UserType* output) {
    
    auto* pointer = data_->properties.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameOwnerPropertiesDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_SetFrameOwnerProperties_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_NotifyUserActivation_ParamsDataView {
 public:
  LocalFrame_NotifyUserActivation_ParamsDataView() = default;

  LocalFrame_NotifyUserActivation_ParamsDataView(
      internal::LocalFrame_NotifyUserActivation_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadNotificationType(UserType* output) const {
    auto data_value = data_->notification_type;
    return mojo::internal::Deserialize<::blink::mojom::UserActivationNotificationType>(
        data_value, output);
  }
  ::blink::mojom::UserActivationNotificationType notification_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::UserActivationNotificationType>(data_->notification_type));
  }
 private:
  internal::LocalFrame_NotifyUserActivation_Params_Data* data_ = nullptr;
};



class LocalFrame_NotifyVirtualKeyboardOverlayRect_ParamsDataView {
 public:
  LocalFrame_NotifyVirtualKeyboardOverlayRect_ParamsDataView() = default;

  LocalFrame_NotifyVirtualKeyboardOverlayRect_ParamsDataView(
      internal::LocalFrame_NotifyVirtualKeyboardOverlayRect_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeyboardRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeyboardRect(UserType* output) {
    
    auto* pointer = data_->keyboard_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_NotifyVirtualKeyboardOverlayRect_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_AddMessageToConsole_ParamsDataView {
 public:
  LocalFrame_AddMessageToConsole_ParamsDataView() = default;

  LocalFrame_AddMessageToConsole_ParamsDataView(
      internal::LocalFrame_AddMessageToConsole_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadLevel(UserType* output) const {
    auto data_value = data_->level;
    return mojo::internal::Deserialize<::blink::mojom::ConsoleMessageLevel>(
        data_value, output);
  }
  ::blink::mojom::ConsoleMessageLevel level() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ConsoleMessageLevel>(data_->level));
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool discard_duplicates() const {
    return data_->discard_duplicates;
  }
 private:
  internal::LocalFrame_AddMessageToConsole_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_AddInspectorIssue_ParamsDataView {
 public:
  LocalFrame_AddInspectorIssue_ParamsDataView() = default;

  LocalFrame_AddInspectorIssue_ParamsDataView(
      internal::LocalFrame_AddInspectorIssue_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      ::blink::mojom::InspectorIssueInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInfo(UserType* output) {
    
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<::blink::mojom::InspectorIssueInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_AddInspectorIssue_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_SwapInImmediately_ParamsDataView {
 public:
  LocalFrame_SwapInImmediately_ParamsDataView() = default;

  LocalFrame_SwapInImmediately_ParamsDataView(
      internal::LocalFrame_SwapInImmediately_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_SwapInImmediately_Params_Data* data_ = nullptr;
};



class LocalFrame_CheckCompleted_ParamsDataView {
 public:
  LocalFrame_CheckCompleted_ParamsDataView() = default;

  LocalFrame_CheckCompleted_ParamsDataView(
      internal::LocalFrame_CheckCompleted_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_CheckCompleted_Params_Data* data_ = nullptr;
};



class LocalFrame_StopLoading_ParamsDataView {
 public:
  LocalFrame_StopLoading_ParamsDataView() = default;

  LocalFrame_StopLoading_ParamsDataView(
      internal::LocalFrame_StopLoading_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_StopLoading_Params_Data* data_ = nullptr;
};



class LocalFrame_Collapse_ParamsDataView {
 public:
  LocalFrame_Collapse_ParamsDataView() = default;

  LocalFrame_Collapse_ParamsDataView(
      internal::LocalFrame_Collapse_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool collapsed() const {
    return data_->collapsed;
  }
 private:
  internal::LocalFrame_Collapse_Params_Data* data_ = nullptr;
};



class LocalFrame_EnableViewSourceMode_ParamsDataView {
 public:
  LocalFrame_EnableViewSourceMode_ParamsDataView() = default;

  LocalFrame_EnableViewSourceMode_ParamsDataView(
      internal::LocalFrame_EnableViewSourceMode_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_EnableViewSourceMode_Params_Data* data_ = nullptr;
};



class LocalFrame_Focus_ParamsDataView {
 public:
  LocalFrame_Focus_ParamsDataView() = default;

  LocalFrame_Focus_ParamsDataView(
      internal::LocalFrame_Focus_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_Focus_Params_Data* data_ = nullptr;
};



class LocalFrame_ClearFocusedElement_ParamsDataView {
 public:
  LocalFrame_ClearFocusedElement_ParamsDataView() = default;

  LocalFrame_ClearFocusedElement_ParamsDataView(
      internal::LocalFrame_ClearFocusedElement_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_ClearFocusedElement_Params_Data* data_ = nullptr;
};



class LocalFrame_GetResourceSnapshotForWebBundle_ParamsDataView {
 public:
  LocalFrame_GetResourceSnapshotForWebBundle_ParamsDataView() = default;

  LocalFrame_GetResourceSnapshotForWebBundle_ParamsDataView(
      internal::LocalFrame_GetResourceSnapshotForWebBundle_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::data_decoder::mojom::ResourceSnapshotForWebBundleInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::LocalFrame_GetResourceSnapshotForWebBundle_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_CopyImageAt_ParamsDataView {
 public:
  LocalFrame_CopyImageAt_ParamsDataView() = default;

  LocalFrame_CopyImageAt_ParamsDataView(
      internal::LocalFrame_CopyImageAt_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetWindowPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadWindowPoint(UserType* output) {
    
    auto* pointer = data_->window_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_CopyImageAt_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_SaveImageAt_ParamsDataView {
 public:
  LocalFrame_SaveImageAt_ParamsDataView() = default;

  LocalFrame_SaveImageAt_ParamsDataView(
      internal::LocalFrame_SaveImageAt_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetWindowPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadWindowPoint(UserType* output) {
    
    auto* pointer = data_->window_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_SaveImageAt_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_ReportBlinkFeatureUsage_ParamsDataView {
 public:
  LocalFrame_ReportBlinkFeatureUsage_ParamsDataView() = default;

  LocalFrame_ReportBlinkFeatureUsage_ParamsDataView(
      internal::LocalFrame_ReportBlinkFeatureUsage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFeaturesDataView(
      mojo::ArrayDataView<::blink::mojom::WebFeature>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFeatures(UserType* output) {
    
    auto* pointer = data_->features.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::WebFeature>>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_ReportBlinkFeatureUsage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_RenderFallbackContent_ParamsDataView {
 public:
  LocalFrame_RenderFallbackContent_ParamsDataView() = default;

  LocalFrame_RenderFallbackContent_ParamsDataView(
      internal::LocalFrame_RenderFallbackContent_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_RenderFallbackContent_Params_Data* data_ = nullptr;
};



class LocalFrame_RenderFallbackContentWithResourceTiming_ParamsDataView {
 public:
  LocalFrame_RenderFallbackContentWithResourceTiming_ParamsDataView() = default;

  LocalFrame_RenderFallbackContentWithResourceTiming_ParamsDataView(
      internal::LocalFrame_RenderFallbackContentWithResourceTiming_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTimingDataView(
      ::blink::mojom::ResourceTimingInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTiming(UserType* output) {
    
    auto* pointer = data_->timing.Get();
    return mojo::internal::Deserialize<::blink::mojom::ResourceTimingInfoDataView>(
        pointer, output, message_);
  }
  inline void GetServerTimingValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadServerTimingValue(UserType* output) {
    
    auto* pointer = data_->server_timing_value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_RenderFallbackContentWithResourceTiming_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_BeforeUnload_ParamsDataView {
 public:
  LocalFrame_BeforeUnload_ParamsDataView() = default;

  LocalFrame_BeforeUnload_ParamsDataView(
      internal::LocalFrame_BeforeUnload_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_reload() const {
    return data_->is_reload;
  }
 private:
  internal::LocalFrame_BeforeUnload_Params_Data* data_ = nullptr;
};



class LocalFrame_BeforeUnload_ResponseParamsDataView {
 public:
  LocalFrame_BeforeUnload_ResponseParamsDataView() = default;

  LocalFrame_BeforeUnload_ResponseParamsDataView(
      internal::LocalFrame_BeforeUnload_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool proceed() const {
    return data_->proceed;
  }
  inline void GetBeforeUnloadStartTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBeforeUnloadStartTime(UserType* output) {
    
    auto* pointer = data_->before_unload_start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  inline void GetBeforeUnloadEndTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBeforeUnloadEndTime(UserType* output) {
    
    auto* pointer = data_->before_unload_end_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_BeforeUnload_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_MediaPlayerActionAt_ParamsDataView {
 public:
  LocalFrame_MediaPlayerActionAt_ParamsDataView() = default;

  LocalFrame_MediaPlayerActionAt_ParamsDataView(
      internal::LocalFrame_MediaPlayerActionAt_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLocationDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocation(UserType* output) {
    
    auto* pointer = data_->location.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
  inline void GetActionDataView(
      ::blink::mojom::MediaPlayerActionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAction(UserType* output) {
    
    auto* pointer = data_->action.Get();
    return mojo::internal::Deserialize<::blink::mojom::MediaPlayerActionDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_MediaPlayerActionAt_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_PluginActionAt_ParamsDataView {
 public:
  LocalFrame_PluginActionAt_ParamsDataView() = default;

  LocalFrame_PluginActionAt_ParamsDataView(
      internal::LocalFrame_PluginActionAt_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLocationDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocation(UserType* output) {
    
    auto* pointer = data_->location.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadAction(UserType* output) const {
    auto data_value = data_->action;
    return mojo::internal::Deserialize<::blink::mojom::PluginActionType>(
        data_value, output);
  }
  PluginActionType action() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PluginActionType>(data_->action));
  }
 private:
  internal::LocalFrame_PluginActionAt_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_AdvanceFocusInFrame_ParamsDataView {
 public:
  LocalFrame_AdvanceFocusInFrame_ParamsDataView() = default;

  LocalFrame_AdvanceFocusInFrame_ParamsDataView(
      internal::LocalFrame_AdvanceFocusInFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadFocusType(UserType* output) const {
    auto data_value = data_->focus_type;
    return mojo::internal::Deserialize<::blink::mojom::FocusType>(
        data_value, output);
  }
  ::blink::mojom::FocusType focus_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FocusType>(data_->focus_type));
  }
  inline void GetSourceFrameTokenDataView(
      ::blink::mojom::RemoteFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceFrameToken(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::RemoteFrameTokenDataView, UserType>(),
    "Attempting to read the optional `source_frame_token` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSourceFrameToken` instead "
    "of `ReadSourceFrameToken if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->source_frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_AdvanceFocusInFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_AdvanceFocusForIME_ParamsDataView {
 public:
  LocalFrame_AdvanceFocusForIME_ParamsDataView() = default;

  LocalFrame_AdvanceFocusForIME_ParamsDataView(
      internal::LocalFrame_AdvanceFocusForIME_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadFocusType(UserType* output) const {
    auto data_value = data_->focus_type;
    return mojo::internal::Deserialize<::blink::mojom::FocusType>(
        data_value, output);
  }
  ::blink::mojom::FocusType focus_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FocusType>(data_->focus_type));
  }
 private:
  internal::LocalFrame_AdvanceFocusForIME_Params_Data* data_ = nullptr;
};



class LocalFrame_ReportContentSecurityPolicyViolation_ParamsDataView {
 public:
  LocalFrame_ReportContentSecurityPolicyViolation_ParamsDataView() = default;

  LocalFrame_ReportContentSecurityPolicyViolation_ParamsDataView(
      internal::LocalFrame_ReportContentSecurityPolicyViolation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetViolationDataView(
      ::network::mojom::CSPViolationDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadViolation(UserType* output) {
    
    auto* pointer = data_->violation.Get();
    return mojo::internal::Deserialize<::network::mojom::CSPViolationDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_ReportContentSecurityPolicyViolation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_DidUpdateFramePolicy_ParamsDataView {
 public:
  LocalFrame_DidUpdateFramePolicy_ParamsDataView() = default;

  LocalFrame_DidUpdateFramePolicy_ParamsDataView(
      internal::LocalFrame_DidUpdateFramePolicy_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFramePolicyDataView(
      ::blink::mojom::FramePolicyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFramePolicy(UserType* output) {
    
    auto* pointer = data_->frame_policy.Get();
    return mojo::internal::Deserialize<::blink::mojom::FramePolicyDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_DidUpdateFramePolicy_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_PostMessageEvent_ParamsDataView {
 public:
  LocalFrame_PostMessageEvent_ParamsDataView() = default;

  LocalFrame_PostMessageEvent_ParamsDataView(
      internal::LocalFrame_PostMessageEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSourceFrameTokenDataView(
      ::blink::mojom::RemoteFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceFrameToken(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::RemoteFrameTokenDataView, UserType>(),
    "Attempting to read the optional `source_frame_token` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSourceFrameToken` instead "
    "of `ReadSourceFrameToken if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->source_frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetSourceOriginDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceOrigin(UserType* output) {
    
    auto* pointer = data_->source_origin.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetTargetOriginDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTargetOrigin(UserType* output) {
    
    auto* pointer = data_->target_origin.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_PostMessageEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_JavaScriptMethodExecuteRequest_ParamsDataView {
 public:
  LocalFrame_JavaScriptMethodExecuteRequest_ParamsDataView() = default;

  LocalFrame_JavaScriptMethodExecuteRequest_ParamsDataView(
      internal::LocalFrame_JavaScriptMethodExecuteRequest_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetObjectNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadObjectName(UserType* output) {
    
    auto* pointer = data_->object_name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetMethodNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMethodName(UserType* output) {
    
    auto* pointer = data_->method_name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetArgumentsDataView(
      ::mojo_base::mojom::ListValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadArguments(UserType* output) {
    
    auto* pointer = data_->arguments.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ListValueDataView>(
        pointer, output, message_);
  }
  bool wants_result() const {
    return data_->wants_result;
  }
 private:
  internal::LocalFrame_JavaScriptMethodExecuteRequest_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_JavaScriptMethodExecuteRequest_ResponseParamsDataView {
 public:
  LocalFrame_JavaScriptMethodExecuteRequest_ResponseParamsDataView() = default;

  LocalFrame_JavaScriptMethodExecuteRequest_ResponseParamsDataView(
      internal::LocalFrame_JavaScriptMethodExecuteRequest_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::mojo_base::mojom::ValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::ValueDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_JavaScriptMethodExecuteRequest_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_JavaScriptExecuteRequest_ParamsDataView {
 public:
  LocalFrame_JavaScriptExecuteRequest_ParamsDataView() = default;

  LocalFrame_JavaScriptExecuteRequest_ParamsDataView(
      internal::LocalFrame_JavaScriptExecuteRequest_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetJavascriptDataView(
      ::mojo_base::mojom::BigString16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadJavascript(UserType* output) {
    
    auto* pointer = data_->javascript.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::BigString16DataView>(
        pointer, output, message_);
  }
  bool wants_result() const {
    return data_->wants_result;
  }
 private:
  internal::LocalFrame_JavaScriptExecuteRequest_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_JavaScriptExecuteRequest_ResponseParamsDataView {
 public:
  LocalFrame_JavaScriptExecuteRequest_ResponseParamsDataView() = default;

  LocalFrame_JavaScriptExecuteRequest_ResponseParamsDataView(
      internal::LocalFrame_JavaScriptExecuteRequest_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::mojo_base::mojom::ValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::ValueDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_JavaScriptExecuteRequest_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_JavaScriptExecuteRequestForTests_ParamsDataView {
 public:
  LocalFrame_JavaScriptExecuteRequestForTests_ParamsDataView() = default;

  LocalFrame_JavaScriptExecuteRequestForTests_ParamsDataView(
      internal::LocalFrame_JavaScriptExecuteRequestForTests_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetJavascriptDataView(
      ::mojo_base::mojom::BigString16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadJavascript(UserType* output) {
    
    auto* pointer = data_->javascript.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::BigString16DataView>(
        pointer, output, message_);
  }
  bool has_user_gesture() const {
    return data_->has_user_gesture;
  }
  bool resolve_promises() const {
    return data_->resolve_promises;
  }
  int32_t world_id() const {
    return data_->world_id;
  }
 private:
  internal::LocalFrame_JavaScriptExecuteRequestForTests_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_JavaScriptExecuteRequestForTests_ResponseParamsDataView {
 public:
  LocalFrame_JavaScriptExecuteRequestForTests_ResponseParamsDataView() = default;

  LocalFrame_JavaScriptExecuteRequestForTests_ResponseParamsDataView(
      internal::LocalFrame_JavaScriptExecuteRequestForTests_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResultType(UserType* output) const {
    auto data_value = data_->result_type;
    return mojo::internal::Deserialize<::blink::mojom::JavaScriptExecutionResultType>(
        data_value, output);
  }
  JavaScriptExecutionResultType result_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::JavaScriptExecutionResultType>(data_->result_type));
  }
  inline void GetResultDataView(
      ::mojo_base::mojom::ValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::ValueDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_JavaScriptExecuteRequestForTests_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ParamsDataView {
 public:
  LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ParamsDataView() = default;

  LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ParamsDataView(
      internal::LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetJavascriptDataView(
      ::mojo_base::mojom::BigString16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadJavascript(UserType* output) {
    
    auto* pointer = data_->javascript.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::BigString16DataView>(
        pointer, output, message_);
  }
  bool wants_result() const {
    return data_->wants_result;
  }
  int32_t world_id() const {
    return data_->world_id;
  }
 private:
  internal::LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParamsDataView {
 public:
  LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParamsDataView() = default;

  LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParamsDataView(
      internal::LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::mojo_base::mojom::ValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::ValueDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_BindReportingObserver_ParamsDataView {
 public:
  LocalFrame_BindReportingObserver_ParamsDataView() = default;

  LocalFrame_BindReportingObserver_ParamsDataView(
      internal::LocalFrame_BindReportingObserver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::ReportingObserverInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::LocalFrame_BindReportingObserver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_UpdateOpener_ParamsDataView {
 public:
  LocalFrame_UpdateOpener_ParamsDataView() = default;

  LocalFrame_UpdateOpener_ParamsDataView(
      internal::LocalFrame_UpdateOpener_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOpenerFrameTokenDataView(
      ::blink::mojom::FrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOpenerFrameToken(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::FrameTokenDataView, UserType>(),
    "Attempting to read the optional `opener_frame_token` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOpenerFrameToken` instead "
    "of `ReadOpenerFrameToken if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->opener_frame_token.is_null() ? &data_->opener_frame_token : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FrameTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_UpdateOpener_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_GetSavableResourceLinks_ParamsDataView {
 public:
  LocalFrame_GetSavableResourceLinks_ParamsDataView() = default;

  LocalFrame_GetSavableResourceLinks_ParamsDataView(
      internal::LocalFrame_GetSavableResourceLinks_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_GetSavableResourceLinks_Params_Data* data_ = nullptr;
};



class LocalFrame_GetSavableResourceLinks_ResponseParamsDataView {
 public:
  LocalFrame_GetSavableResourceLinks_ResponseParamsDataView() = default;

  LocalFrame_GetSavableResourceLinks_ResponseParamsDataView(
      internal::LocalFrame_GetSavableResourceLinks_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReplyDataView(
      GetSavableResourceLinksReplyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReply(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::GetSavableResourceLinksReplyDataView, UserType>(),
    "Attempting to read the optional `reply` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadReply` instead "
    "of `ReadReply if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->reply.Get();
    return mojo::internal::Deserialize<::blink::mojom::GetSavableResourceLinksReplyDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_GetSavableResourceLinks_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_MixedContentFound_ParamsDataView {
 public:
  LocalFrame_MixedContentFound_ParamsDataView() = default;

  LocalFrame_MixedContentFound_ParamsDataView(
      internal::LocalFrame_MixedContentFound_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMainResourceUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMainResourceUrl(UserType* output) {
    
    auto* pointer = data_->main_resource_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetMixedContentUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMixedContentUrl(UserType* output) {
    
    auto* pointer = data_->mixed_content_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadRequestContext(UserType* output) const {
    auto data_value = data_->request_context;
    return mojo::internal::Deserialize<::blink::mojom::RequestContextType>(
        data_value, output);
  }
  ::blink::mojom::RequestContextType request_context() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::RequestContextType>(data_->request_context));
  }
  bool was_allowed() const {
    return data_->was_allowed;
  }
  inline void GetUrlBeforeRedirectsDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrlBeforeRedirects(UserType* output) {
    
    auto* pointer = data_->url_before_redirects.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  bool had_redirect() const {
    return data_->had_redirect;
  }
  inline void GetSourceLocationDataView(
      ::network::mojom::SourceLocationDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceLocation(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::SourceLocationDataView, UserType>(),
    "Attempting to read the optional `source_location` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSourceLocation` instead "
    "of `ReadSourceLocation if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->source_location.Get();
    return mojo::internal::Deserialize<::network::mojom::SourceLocationDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_MixedContentFound_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_BindDevToolsAgent_ParamsDataView {
 public:
  LocalFrame_BindDevToolsAgent_ParamsDataView() = default;

  LocalFrame_BindDevToolsAgent_ParamsDataView(
      internal::LocalFrame_BindDevToolsAgent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeAgentHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::DevToolsAgentHostAssociatedPtrInfoDataView>(
            &data_->agent_host, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeAgent() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::DevToolsAgentAssociatedRequestDataView>(
            &data_->agent, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::LocalFrame_BindDevToolsAgent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_ExtractSmartClipData_ParamsDataView {
 public:
  LocalFrame_ExtractSmartClipData_ParamsDataView() = default;

  LocalFrame_ExtractSmartClipData_ParamsDataView(
      internal::LocalFrame_ExtractSmartClipData_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRect(UserType* output) {
    
    auto* pointer = data_->rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_ExtractSmartClipData_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_ExtractSmartClipData_ResponseParamsDataView {
 public:
  LocalFrame_ExtractSmartClipData_ResponseParamsDataView() = default;

  LocalFrame_ExtractSmartClipData_ResponseParamsDataView(
      internal::LocalFrame_ExtractSmartClipData_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTextDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadText(UserType* output) {
    
    auto* pointer = data_->text.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetHtmlDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHtml(UserType* output) {
    
    auto* pointer = data_->html.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetClipRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClipRect(UserType* output) {
    
    auto* pointer = data_->clip_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_ExtractSmartClipData_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_HandleRendererDebugURL_ParamsDataView {
 public:
  LocalFrame_HandleRendererDebugURL_ParamsDataView() = default;

  LocalFrame_HandleRendererDebugURL_ParamsDataView(
      internal::LocalFrame_HandleRendererDebugURL_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_HandleRendererDebugURL_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_GetCanonicalUrlForSharing_ParamsDataView {
 public:
  LocalFrame_GetCanonicalUrlForSharing_ParamsDataView() = default;

  LocalFrame_GetCanonicalUrlForSharing_ParamsDataView(
      internal::LocalFrame_GetCanonicalUrlForSharing_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_GetCanonicalUrlForSharing_Params_Data* data_ = nullptr;
};



class LocalFrame_GetCanonicalUrlForSharing_ResponseParamsDataView {
 public:
  LocalFrame_GetCanonicalUrlForSharing_ResponseParamsDataView() = default;

  LocalFrame_GetCanonicalUrlForSharing_ResponseParamsDataView(
      internal::LocalFrame_GetCanonicalUrlForSharing_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCanonicalUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCanonicalUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::UrlDataView, UserType>(),
    "Attempting to read the optional `canonical_url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadCanonicalUrl` instead "
    "of `ReadCanonicalUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->canonical_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_GetCanonicalUrlForSharing_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_GetOpenGraphMetadata_ParamsDataView {
 public:
  LocalFrame_GetOpenGraphMetadata_ParamsDataView() = default;

  LocalFrame_GetOpenGraphMetadata_ParamsDataView(
      internal::LocalFrame_GetOpenGraphMetadata_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_GetOpenGraphMetadata_Params_Data* data_ = nullptr;
};



class LocalFrame_GetOpenGraphMetadata_ResponseParamsDataView {
 public:
  LocalFrame_GetOpenGraphMetadata_ResponseParamsDataView() = default;

  LocalFrame_GetOpenGraphMetadata_ResponseParamsDataView(
      internal::LocalFrame_GetOpenGraphMetadata_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMetadataDataView(
      ::blink::mojom::OpenGraphMetadataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMetadata(UserType* output) {
    
    auto* pointer = data_->metadata.Get();
    return mojo::internal::Deserialize<::blink::mojom::OpenGraphMetadataDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_GetOpenGraphMetadata_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalFrame_SetNavigationApiHistoryEntriesForRestore_ParamsDataView {
 public:
  LocalFrame_SetNavigationApiHistoryEntriesForRestore_ParamsDataView() = default;

  LocalFrame_SetNavigationApiHistoryEntriesForRestore_ParamsDataView(
      internal::LocalFrame_SetNavigationApiHistoryEntriesForRestore_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEntryArraysDataView(
      ::blink::mojom::NavigationApiHistoryEntryArraysDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEntryArrays(UserType* output) {
    
    auto* pointer = data_->entry_arrays.Get();
    return mojo::internal::Deserialize<::blink::mojom::NavigationApiHistoryEntryArraysDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalFrame_SetNavigationApiHistoryEntriesForRestore_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HighPriorityLocalFrame_DispatchBeforeUnload_ParamsDataView {
 public:
  HighPriorityLocalFrame_DispatchBeforeUnload_ParamsDataView() = default;

  HighPriorityLocalFrame_DispatchBeforeUnload_ParamsDataView(
      internal::HighPriorityLocalFrame_DispatchBeforeUnload_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_reload() const {
    return data_->is_reload;
  }
 private:
  internal::HighPriorityLocalFrame_DispatchBeforeUnload_Params_Data* data_ = nullptr;
};



class HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParamsDataView {
 public:
  HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParamsDataView() = default;

  HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParamsDataView(
      internal::HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool proceed() const {
    return data_->proceed;
  }
  inline void GetBeforeUnloadStartTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBeforeUnloadStartTime(UserType* output) {
    
    auto* pointer = data_->before_unload_start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  inline void GetBeforeUnloadEndTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBeforeUnloadEndTime(UserType* output) {
    
    auto* pointer = data_->before_unload_end_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
 private:
  internal::HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalMainFrame_AnimateDoubleTapZoom_ParamsDataView {
 public:
  LocalMainFrame_AnimateDoubleTapZoom_ParamsDataView() = default;

  LocalMainFrame_AnimateDoubleTapZoom_ParamsDataView(
      internal::LocalMainFrame_AnimateDoubleTapZoom_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPoint(UserType* output) {
    
    auto* pointer = data_->point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
  inline void GetRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRect(UserType* output) {
    
    auto* pointer = data_->rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalMainFrame_AnimateDoubleTapZoom_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalMainFrame_SetScaleFactor_ParamsDataView {
 public:
  LocalMainFrame_SetScaleFactor_ParamsDataView() = default;

  LocalMainFrame_SetScaleFactor_ParamsDataView(
      internal::LocalMainFrame_SetScaleFactor_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  float scale() const {
    return data_->scale;
  }
 private:
  internal::LocalMainFrame_SetScaleFactor_Params_Data* data_ = nullptr;
};



class LocalMainFrame_ClosePage_ParamsDataView {
 public:
  LocalMainFrame_ClosePage_ParamsDataView() = default;

  LocalMainFrame_ClosePage_ParamsDataView(
      internal::LocalMainFrame_ClosePage_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalMainFrame_ClosePage_Params_Data* data_ = nullptr;
};



class LocalMainFrame_ClosePage_ResponseParamsDataView {
 public:
  LocalMainFrame_ClosePage_ResponseParamsDataView() = default;

  LocalMainFrame_ClosePage_ResponseParamsDataView(
      internal::LocalMainFrame_ClosePage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalMainFrame_ClosePage_ResponseParams_Data* data_ = nullptr;
};



class LocalMainFrame_SetInitialFocus_ParamsDataView {
 public:
  LocalMainFrame_SetInitialFocus_ParamsDataView() = default;

  LocalMainFrame_SetInitialFocus_ParamsDataView(
      internal::LocalMainFrame_SetInitialFocus_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool reverse() const {
    return data_->reverse;
  }
 private:
  internal::LocalMainFrame_SetInitialFocus_Params_Data* data_ = nullptr;
};



class LocalMainFrame_EnablePreferredSizeChangedMode_ParamsDataView {
 public:
  LocalMainFrame_EnablePreferredSizeChangedMode_ParamsDataView() = default;

  LocalMainFrame_EnablePreferredSizeChangedMode_ParamsDataView(
      internal::LocalMainFrame_EnablePreferredSizeChangedMode_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalMainFrame_EnablePreferredSizeChangedMode_Params_Data* data_ = nullptr;
};



class LocalMainFrame_ZoomToFindInPageRect_ParamsDataView {
 public:
  LocalMainFrame_ZoomToFindInPageRect_ParamsDataView() = default;

  LocalMainFrame_ZoomToFindInPageRect_ParamsDataView(
      internal::LocalMainFrame_ZoomToFindInPageRect_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRectInRootFrameDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRectInRootFrame(UserType* output) {
    
    auto* pointer = data_->rect_in_root_frame.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalMainFrame_ZoomToFindInPageRect_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalMainFrame_InstallCoopAccessMonitor_ParamsDataView {
 public:
  LocalMainFrame_InstallCoopAccessMonitor_ParamsDataView() = default;

  LocalMainFrame_InstallCoopAccessMonitor_ParamsDataView(
      internal::LocalMainFrame_InstallCoopAccessMonitor_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAccessedWindowDataView(
      ::blink::mojom::FrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAccessedWindow(UserType* output) {
    
    auto* pointer = !data_->accessed_window.is_null() ? &data_->accessed_window : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetCoopReporterInfoDataView(
      ::network::mojom::CrossOriginOpenerPolicyReporterParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCoopReporterInfo(UserType* output) {
    
    auto* pointer = data_->coop_reporter_info.Get();
    return mojo::internal::Deserialize<::network::mojom::CrossOriginOpenerPolicyReporterParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalMainFrame_InstallCoopAccessMonitor_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalMainFrame_OnPortalActivated_ParamsDataView {
 public:
  LocalMainFrame_OnPortalActivated_ParamsDataView() = default;

  LocalMainFrame_OnPortalActivated_ParamsDataView(
      internal::LocalMainFrame_OnPortalActivated_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPortalTokenDataView(
      ::blink::mojom::PortalTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPortalToken(UserType* output) {
    
    auto* pointer = data_->portal_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::PortalTokenDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakePortal() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::PortalAssociatedPtrInfoDataView>(
            &data_->portal, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakePortalClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::PortalClientAssociatedRequestDataView>(
            &data_->portal_client, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetDataDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, message_);
  }
  uint64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::LocalMainFrame_OnPortalActivated_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalMainFrame_OnPortalActivated_ResponseParamsDataView {
 public:
  LocalMainFrame_OnPortalActivated_ResponseParamsDataView() = default;

  LocalMainFrame_OnPortalActivated_ResponseParamsDataView(
      internal::LocalMainFrame_OnPortalActivated_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::blink::mojom::PortalActivateResult>(
        data_value, output);
  }
  ::blink::mojom::PortalActivateResult result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PortalActivateResult>(data_->result));
  }
 private:
  internal::LocalMainFrame_OnPortalActivated_ResponseParams_Data* data_ = nullptr;
};



class LocalMainFrame_ForwardMessageFromHost_ParamsDataView {
 public:
  LocalMainFrame_ForwardMessageFromHost_ParamsDataView() = default;

  LocalMainFrame_ForwardMessageFromHost_ParamsDataView(
      internal::LocalMainFrame_ForwardMessageFromHost_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, message_);
  }
  inline void GetSourceOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceOrigin(UserType* output) {
    
    auto* pointer = data_->source_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalMainFrame_ForwardMessageFromHost_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalMainFrame_UpdateBrowserControlsState_ParamsDataView {
 public:
  LocalMainFrame_UpdateBrowserControlsState_ParamsDataView() = default;

  LocalMainFrame_UpdateBrowserControlsState_ParamsDataView(
      internal::LocalMainFrame_UpdateBrowserControlsState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadConstraints(UserType* output) const {
    auto data_value = data_->constraints;
    return mojo::internal::Deserialize<::cc::mojom::BrowserControlsState>(
        data_value, output);
  }
  ::cc::mojom::BrowserControlsState constraints() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::cc::mojom::BrowserControlsState>(data_->constraints));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadCurrent(UserType* output) const {
    auto data_value = data_->current;
    return mojo::internal::Deserialize<::cc::mojom::BrowserControlsState>(
        data_value, output);
  }
  ::cc::mojom::BrowserControlsState current() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::cc::mojom::BrowserControlsState>(data_->current));
  }
  bool animate() const {
    return data_->animate;
  }
 private:
  internal::LocalMainFrame_UpdateBrowserControlsState_Params_Data* data_ = nullptr;
};



class LocalMainFrameHost_ScaleFactorChanged_ParamsDataView {
 public:
  LocalMainFrameHost_ScaleFactorChanged_ParamsDataView() = default;

  LocalMainFrameHost_ScaleFactorChanged_ParamsDataView(
      internal::LocalMainFrameHost_ScaleFactorChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  float scale() const {
    return data_->scale;
  }
 private:
  internal::LocalMainFrameHost_ScaleFactorChanged_Params_Data* data_ = nullptr;
};



class LocalMainFrameHost_ContentsPreferredSizeChanged_ParamsDataView {
 public:
  LocalMainFrameHost_ContentsPreferredSizeChanged_ParamsDataView() = default;

  LocalMainFrameHost_ContentsPreferredSizeChanged_ParamsDataView(
      internal::LocalMainFrameHost_ContentsPreferredSizeChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPrefSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrefSize(UserType* output) {
    
    auto* pointer = data_->pref_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalMainFrameHost_ContentsPreferredSizeChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalMainFrameHost_TextAutosizerPageInfoChanged_ParamsDataView {
 public:
  LocalMainFrameHost_TextAutosizerPageInfoChanged_ParamsDataView() = default;

  LocalMainFrameHost_TextAutosizerPageInfoChanged_ParamsDataView(
      internal::LocalMainFrameHost_TextAutosizerPageInfoChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPageInfoDataView(
      ::blink::mojom::TextAutosizerPageInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPageInfo(UserType* output) {
    
    auto* pointer = data_->page_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::TextAutosizerPageInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalMainFrameHost_TextAutosizerPageInfoChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalMainFrameHost_FocusPage_ParamsDataView {
 public:
  LocalMainFrameHost_FocusPage_ParamsDataView() = default;

  LocalMainFrameHost_FocusPage_ParamsDataView(
      internal::LocalMainFrameHost_FocusPage_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalMainFrameHost_FocusPage_Params_Data* data_ = nullptr;
};



class LocalMainFrameHost_TakeFocus_ParamsDataView {
 public:
  LocalMainFrameHost_TakeFocus_ParamsDataView() = default;

  LocalMainFrameHost_TakeFocus_ParamsDataView(
      internal::LocalMainFrameHost_TakeFocus_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool reverse() const {
    return data_->reverse;
  }
 private:
  internal::LocalMainFrameHost_TakeFocus_Params_Data* data_ = nullptr;
};



class LocalMainFrameHost_UpdateTargetURL_ParamsDataView {
 public:
  LocalMainFrameHost_UpdateTargetURL_ParamsDataView() = default;

  LocalMainFrameHost_UpdateTargetURL_ParamsDataView(
      internal::LocalMainFrameHost_UpdateTargetURL_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalMainFrameHost_UpdateTargetURL_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalMainFrameHost_UpdateTargetURL_ResponseParamsDataView {
 public:
  LocalMainFrameHost_UpdateTargetURL_ResponseParamsDataView() = default;

  LocalMainFrameHost_UpdateTargetURL_ResponseParamsDataView(
      internal::LocalMainFrameHost_UpdateTargetURL_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalMainFrameHost_UpdateTargetURL_ResponseParams_Data* data_ = nullptr;
};



class LocalMainFrameHost_RequestClose_ParamsDataView {
 public:
  LocalMainFrameHost_RequestClose_ParamsDataView() = default;

  LocalMainFrameHost_RequestClose_ParamsDataView(
      internal::LocalMainFrameHost_RequestClose_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalMainFrameHost_RequestClose_Params_Data* data_ = nullptr;
};



class LocalMainFrameHost_ShowCreatedWindow_ParamsDataView {
 public:
  LocalMainFrameHost_ShowCreatedWindow_ParamsDataView() = default;

  LocalMainFrameHost_ShowCreatedWindow_ParamsDataView(
      internal::LocalMainFrameHost_ShowCreatedWindow_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOpenerFrameTokenDataView(
      ::blink::mojom::LocalFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOpenerFrameToken(UserType* output) {
    
    auto* pointer = data_->opener_frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::LocalFrameTokenDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadDisposition(UserType* output) const {
    auto data_value = data_->disposition;
    return mojo::internal::Deserialize<::ui::mojom::WindowOpenDisposition>(
        data_value, output);
  }
  ::ui::mojom::WindowOpenDisposition disposition() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ui::mojom::WindowOpenDisposition>(data_->disposition));
  }
  inline void GetRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRect(UserType* output) {
    
    auto* pointer = data_->rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  bool opened_by_user_gesture() const {
    return data_->opened_by_user_gesture;
  }
 private:
  internal::LocalMainFrameHost_ShowCreatedWindow_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalMainFrameHost_ShowCreatedWindow_ResponseParamsDataView {
 public:
  LocalMainFrameHost_ShowCreatedWindow_ResponseParamsDataView() = default;

  LocalMainFrameHost_ShowCreatedWindow_ResponseParamsDataView(
      internal::LocalMainFrameHost_ShowCreatedWindow_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalMainFrameHost_ShowCreatedWindow_ResponseParams_Data* data_ = nullptr;
};



class LocalMainFrameHost_SetWindowRect_ParamsDataView {
 public:
  LocalMainFrameHost_SetWindowRect_ParamsDataView() = default;

  LocalMainFrameHost_SetWindowRect_ParamsDataView(
      internal::LocalMainFrameHost_SetWindowRect_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBoundsDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBounds(UserType* output) {
    
    auto* pointer = data_->bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalMainFrameHost_SetWindowRect_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalMainFrameHost_SetWindowRect_ResponseParamsDataView {
 public:
  LocalMainFrameHost_SetWindowRect_ResponseParamsDataView() = default;

  LocalMainFrameHost_SetWindowRect_ResponseParamsDataView(
      internal::LocalMainFrameHost_SetWindowRect_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalMainFrameHost_SetWindowRect_ResponseParams_Data* data_ = nullptr;
};



class LocalMainFrameHost_DidFirstVisuallyNonEmptyPaint_ParamsDataView {
 public:
  LocalMainFrameHost_DidFirstVisuallyNonEmptyPaint_ParamsDataView() = default;

  LocalMainFrameHost_DidFirstVisuallyNonEmptyPaint_ParamsDataView(
      internal::LocalMainFrameHost_DidFirstVisuallyNonEmptyPaint_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalMainFrameHost_DidFirstVisuallyNonEmptyPaint_Params_Data* data_ = nullptr;
};



class LocalMainFrameHost_DidAccessInitialMainDocument_ParamsDataView {
 public:
  LocalMainFrameHost_DidAccessInitialMainDocument_ParamsDataView() = default;

  LocalMainFrameHost_DidAccessInitialMainDocument_ParamsDataView(
      internal::LocalMainFrameHost_DidAccessInitialMainDocument_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalMainFrameHost_DidAccessInitialMainDocument_Params_Data* data_ = nullptr;
};




inline void LocalFrameHost_EnterFullscreen_ParamsDataView::GetOptionsDataView(
    ::blink::mojom::FullscreenOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = ::blink::mojom::FullscreenOptionsDataView(pointer, message_);
}






inline void LocalFrameHost_FullscreenStateChanged_ParamsDataView::GetOptionsDataView(
    ::blink::mojom::FullscreenOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = ::blink::mojom::FullscreenOptionsDataView(pointer, message_);
}


inline void LocalFrameHost_RegisterProtocolHandler_ParamsDataView::GetSchemeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->scheme.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void LocalFrameHost_RegisterProtocolHandler_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void LocalFrameHost_UnregisterProtocolHandler_ParamsDataView::GetSchemeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->scheme.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void LocalFrameHost_UnregisterProtocolHandler_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}














inline void LocalFrameHost_DidChangeThemeColor_ParamsDataView::GetThemeColorDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->theme_color.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, message_);
}


inline void LocalFrameHost_DidChangeBackgroundColor_ParamsDataView::GetBackgroundColorDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->background_color.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, message_);
}


inline void LocalFrameHost_DidFailLoadWithError_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}








inline void LocalFrameHost_EnforceInsecureNavigationsSet_ParamsDataView::GetSetDataView(
    mojo::ArrayDataView<uint32_t>* output) {
  auto pointer = data_->set.Get();
  *output = mojo::ArrayDataView<uint32_t>(pointer, message_);
}






inline void LocalFrameHost_ScrollRectToVisibleInParentFrame_ParamsDataView::GetRectToScrollDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->rect_to_scroll.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}
inline void LocalFrameHost_ScrollRectToVisibleInParentFrame_ParamsDataView::GetParamsDataView(
    ::blink::mojom::ScrollIntoViewParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::blink::mojom::ScrollIntoViewParamsDataView(pointer, message_);
}




inline void LocalFrameHost_DidBlockNavigation_ParamsDataView::GetBlockedUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->blocked_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void LocalFrameHost_DidBlockNavigation_ParamsDataView::GetInitiatorUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->initiator_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}




inline void LocalFrameHost_DidFinishLoad_ParamsDataView::GetValidatedUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->validated_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}






inline void LocalFrameHost_NavigateToNavigationApiKey_ParamsDataView::GetKeyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->key.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void LocalFrameHost_UpdateTitle_ParamsDataView::GetTitleDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->title.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}




inline void LocalFrameHost_HandleAccessibilityFindInPageResult_ParamsDataView::GetParamsDataView(
    FindInPageResultAXParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = FindInPageResultAXParamsDataView(pointer, message_);
}






inline void LocalFrameHost_ForwardResourceTimingToParent_ParamsDataView::GetTimingDataView(
    ::blink::mojom::ResourceTimingInfoDataView* output) {
  auto pointer = data_->timing.Get();
  *output = ::blink::mojom::ResourceTimingInfoDataView(pointer, message_);
}




inline void LocalFrameHost_RunModalAlertDialog_ParamsDataView::GetAlertMessageDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->alert_message.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}




inline void LocalFrameHost_RunModalConfirmDialog_ParamsDataView::GetAlertMessageDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->alert_message.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}




inline void LocalFrameHost_RunModalPromptDialog_ParamsDataView::GetAlertMessageDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->alert_message.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void LocalFrameHost_RunModalPromptDialog_ParamsDataView::GetDefaultValueDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->default_value.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}


inline void LocalFrameHost_RunModalPromptDialog_ResponseParamsDataView::GetResultDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->result.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}






inline void LocalFrameHost_UpdateFaviconURL_ParamsDataView::GetFaviconUrlsDataView(
    mojo::ArrayDataView<::blink::mojom::FaviconURLDataView>* output) {
  auto pointer = data_->favicon_urls.Get();
  *output = mojo::ArrayDataView<::blink::mojom::FaviconURLDataView>(pointer, message_);
}


inline void LocalFrameHost_DownloadURL_ParamsDataView::GetParamsDataView(
    DownloadURLParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = DownloadURLParamsDataView(pointer, message_);
}


inline void LocalFrameHost_FocusedElementChanged_ParamsDataView::GetBoundsInFrameWidgetDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->bounds_in_frame_widget.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void LocalFrameHost_TextSelectionChanged_ParamsDataView::GetTextDataView(
    ::mojo_base::mojom::BigString16DataView* output) {
  auto pointer = data_->text.Get();
  *output = ::mojo_base::mojom::BigString16DataView(pointer, message_);
}
inline void LocalFrameHost_TextSelectionChanged_ParamsDataView::GetRangeDataView(
    ::gfx::mojom::RangeDataView* output) {
  auto pointer = data_->range.Get();
  *output = ::gfx::mojom::RangeDataView(pointer, message_);
}


inline void LocalFrameHost_ShowPopupMenu_ParamsDataView::GetBoundsDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->bounds.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void LocalFrameHost_ShowPopupMenu_ParamsDataView::GetMenuItemsDataView(
    mojo::ArrayDataView<::blink::mojom::MenuItemDataView>* output) {
  auto pointer = data_->menu_items.Get();
  *output = mojo::ArrayDataView<::blink::mojom::MenuItemDataView>(pointer, message_);
}




inline void LocalFrameHost_ShowContextMenu_ParamsDataView::GetParamsDataView(
    ::blink::mojom::UntrustworthyContextMenuParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::blink::mojom::UntrustworthyContextMenuParamsDataView(pointer, message_);
}


inline void LocalFrameHost_DidLoadResourceFromMemoryCache_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void LocalFrameHost_DidLoadResourceFromMemoryCache_ParamsDataView::GetHttpMethodDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->http_method.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void LocalFrameHost_DidLoadResourceFromMemoryCache_ParamsDataView::GetMimeTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->mime_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void LocalFrameHost_DidChangeFrameOwnerProperties_ParamsDataView::GetChildFrameTokenDataView(
    ::blink::mojom::FrameTokenDataView* output) {
  auto pointer = &data_->child_frame_token;
  *output = ::blink::mojom::FrameTokenDataView(pointer, message_);
}
inline void LocalFrameHost_DidChangeFrameOwnerProperties_ParamsDataView::GetFrameOwnerPropertiesDataView(
    ::blink::mojom::FrameOwnerPropertiesDataView* output) {
  auto pointer = data_->frame_owner_properties.Get();
  *output = ::blink::mojom::FrameOwnerPropertiesDataView(pointer, message_);
}


inline void LocalFrameHost_DidChangeOpener_ParamsDataView::GetOpenerFrameDataView(
    ::blink::mojom::LocalFrameTokenDataView* output) {
  auto pointer = data_->opener_frame.Get();
  *output = ::blink::mojom::LocalFrameTokenDataView(pointer, message_);
}


inline void LocalFrameHost_DidChangeFramePolicy_ParamsDataView::GetChildFrameTokenDataView(
    ::blink::mojom::FrameTokenDataView* output) {
  auto pointer = &data_->child_frame_token;
  *output = ::blink::mojom::FrameTokenDataView(pointer, message_);
}
inline void LocalFrameHost_DidChangeFramePolicy_ParamsDataView::GetFramePolicyDataView(
    ::blink::mojom::FramePolicyDataView* output) {
  auto pointer = data_->frame_policy.Get();
  *output = ::blink::mojom::FramePolicyDataView(pointer, message_);
}


inline void LocalFrameHost_DidChangeIframeAttributes_ParamsDataView::GetChildFrameTokenDataView(
    ::blink::mojom::FrameTokenDataView* output) {
  auto pointer = &data_->child_frame_token;
  *output = ::blink::mojom::FrameTokenDataView(pointer, message_);
}
inline void LocalFrameHost_DidChangeIframeAttributes_ParamsDataView::GetAttributesDataView(
    IframeAttributesDataView* output) {
  auto pointer = data_->attributes.Get();
  *output = IframeAttributesDataView(pointer, message_);
}


inline void LocalFrameHost_CapturePaintPreviewOfSubframe_ParamsDataView::GetClipRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->clip_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void LocalFrameHost_CapturePaintPreviewOfSubframe_ParamsDataView::GetGuidDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->guid.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}








inline void LocalFrameHost_DidAddMessageToConsole_ParamsDataView::GetMsgDataView(
    ::mojo_base::mojom::BigString16DataView* output) {
  auto pointer = data_->msg.Get();
  *output = ::mojo_base::mojom::BigString16DataView(pointer, message_);
}
inline void LocalFrameHost_DidAddMessageToConsole_ParamsDataView::GetSourceIdDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->source_id.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void LocalFrameHost_DidAddMessageToConsole_ParamsDataView::GetUntrustedStackTraceDataView(
    ::mojo_base::mojom::BigString16DataView* output) {
  auto pointer = data_->untrusted_stack_trace.Get();
  *output = ::mojo_base::mojom::BigString16DataView(pointer, message_);
}


inline void LocalFrameHost_FrameSizeChanged_ParamsDataView::GetSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}




inline void LocalFrameHost_DidChangeSrcDoc_ParamsDataView::GetChildFrameTokenDataView(
    ::blink::mojom::FrameTokenDataView* output) {
  auto pointer = &data_->child_frame_token;
  *output = ::blink::mojom::FrameTokenDataView(pointer, message_);
}
inline void LocalFrameHost_DidChangeSrcDoc_ParamsDataView::GetSrcdocValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->srcdoc_value.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void LocalFrameHost_CreatePortal_ParamsDataView::GetRemoteFrameInterfacesDataView(
    ::blink::mojom::RemoteFrameInterfacesFromRendererDataView* output) {
  auto pointer = data_->remote_frame_interfaces.Get();
  *output = ::blink::mojom::RemoteFrameInterfacesFromRendererDataView(pointer, message_);
}


inline void LocalFrameHost_CreatePortal_ResponseParamsDataView::GetInitialReplicatedStateDataView(
    ::blink::mojom::FrameReplicationStateDataView* output) {
  auto pointer = data_->initial_replicated_state.Get();
  *output = ::blink::mojom::FrameReplicationStateDataView(pointer, message_);
}
inline void LocalFrameHost_CreatePortal_ResponseParamsDataView::GetPortalTokenDataView(
    ::blink::mojom::PortalTokenDataView* output) {
  auto pointer = data_->portal_token.Get();
  *output = ::blink::mojom::PortalTokenDataView(pointer, message_);
}
inline void LocalFrameHost_CreatePortal_ResponseParamsDataView::GetFrameTokenDataView(
    ::blink::mojom::RemoteFrameTokenDataView* output) {
  auto pointer = data_->frame_token.Get();
  *output = ::blink::mojom::RemoteFrameTokenDataView(pointer, message_);
}
inline void LocalFrameHost_CreatePortal_ResponseParamsDataView::GetDevtoolsFrameTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_frame_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void LocalFrameHost_AdoptPortal_ParamsDataView::GetPortalTokenDataView(
    ::blink::mojom::PortalTokenDataView* output) {
  auto pointer = data_->portal_token.Get();
  *output = ::blink::mojom::PortalTokenDataView(pointer, message_);
}
inline void LocalFrameHost_AdoptPortal_ParamsDataView::GetRemoteFrameInterfacesDataView(
    ::blink::mojom::RemoteFrameInterfacesFromRendererDataView* output) {
  auto pointer = data_->remote_frame_interfaces.Get();
  *output = ::blink::mojom::RemoteFrameInterfacesFromRendererDataView(pointer, message_);
}


inline void LocalFrameHost_AdoptPortal_ResponseParamsDataView::GetReplicatedStateDataView(
    ::blink::mojom::FrameReplicationStateDataView* output) {
  auto pointer = data_->replicated_state.Get();
  *output = ::blink::mojom::FrameReplicationStateDataView(pointer, message_);
}
inline void LocalFrameHost_AdoptPortal_ResponseParamsDataView::GetFrameTokenDataView(
    ::blink::mojom::RemoteFrameTokenDataView* output) {
  auto pointer = data_->frame_token.Get();
  *output = ::blink::mojom::RemoteFrameTokenDataView(pointer, message_);
}
inline void LocalFrameHost_AdoptPortal_ResponseParamsDataView::GetDevtoolsFrameTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_frame_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void LocalFrameHost_CreateFencedFrame_ParamsDataView::GetRemoteFrameInterfacesDataView(
    ::blink::mojom::RemoteFrameInterfacesFromRendererDataView* output) {
  auto pointer = data_->remote_frame_interfaces.Get();
  *output = ::blink::mojom::RemoteFrameInterfacesFromRendererDataView(pointer, message_);
}
inline void LocalFrameHost_CreateFencedFrame_ParamsDataView::GetFrameTokenDataView(
    ::blink::mojom::RemoteFrameTokenDataView* output) {
  auto pointer = data_->frame_token.Get();
  *output = ::blink::mojom::RemoteFrameTokenDataView(pointer, message_);
}
inline void LocalFrameHost_CreateFencedFrame_ParamsDataView::GetDevtoolsFrameTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_frame_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}




inline void LocalFrame_GetTextSurroundingSelection_ResponseParamsDataView::GetContentDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->content.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}


inline void LocalFrame_SendInterventionReport_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void LocalFrame_SendInterventionReport_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void LocalFrame_SetFrameOwnerProperties_ParamsDataView::GetPropertiesDataView(
    ::blink::mojom::FrameOwnerPropertiesDataView* output) {
  auto pointer = data_->properties.Get();
  *output = ::blink::mojom::FrameOwnerPropertiesDataView(pointer, message_);
}




inline void LocalFrame_NotifyVirtualKeyboardOverlayRect_ParamsDataView::GetKeyboardRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->keyboard_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void LocalFrame_AddMessageToConsole_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void LocalFrame_AddInspectorIssue_ParamsDataView::GetInfoDataView(
    ::blink::mojom::InspectorIssueInfoDataView* output) {
  auto pointer = data_->info.Get();
  *output = ::blink::mojom::InspectorIssueInfoDataView(pointer, message_);
}


















inline void LocalFrame_CopyImageAt_ParamsDataView::GetWindowPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->window_point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}


inline void LocalFrame_SaveImageAt_ParamsDataView::GetWindowPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->window_point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}


inline void LocalFrame_ReportBlinkFeatureUsage_ParamsDataView::GetFeaturesDataView(
    mojo::ArrayDataView<::blink::mojom::WebFeature>* output) {
  auto pointer = data_->features.Get();
  *output = mojo::ArrayDataView<::blink::mojom::WebFeature>(pointer, message_);
}




inline void LocalFrame_RenderFallbackContentWithResourceTiming_ParamsDataView::GetTimingDataView(
    ::blink::mojom::ResourceTimingInfoDataView* output) {
  auto pointer = data_->timing.Get();
  *output = ::blink::mojom::ResourceTimingInfoDataView(pointer, message_);
}
inline void LocalFrame_RenderFallbackContentWithResourceTiming_ParamsDataView::GetServerTimingValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->server_timing_value.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void LocalFrame_BeforeUnload_ResponseParamsDataView::GetBeforeUnloadStartTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->before_unload_start_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void LocalFrame_BeforeUnload_ResponseParamsDataView::GetBeforeUnloadEndTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->before_unload_end_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}


inline void LocalFrame_MediaPlayerActionAt_ParamsDataView::GetLocationDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->location.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}
inline void LocalFrame_MediaPlayerActionAt_ParamsDataView::GetActionDataView(
    ::blink::mojom::MediaPlayerActionDataView* output) {
  auto pointer = data_->action.Get();
  *output = ::blink::mojom::MediaPlayerActionDataView(pointer, message_);
}


inline void LocalFrame_PluginActionAt_ParamsDataView::GetLocationDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->location.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}


inline void LocalFrame_AdvanceFocusInFrame_ParamsDataView::GetSourceFrameTokenDataView(
    ::blink::mojom::RemoteFrameTokenDataView* output) {
  auto pointer = data_->source_frame_token.Get();
  *output = ::blink::mojom::RemoteFrameTokenDataView(pointer, message_);
}




inline void LocalFrame_ReportContentSecurityPolicyViolation_ParamsDataView::GetViolationDataView(
    ::network::mojom::CSPViolationDataView* output) {
  auto pointer = data_->violation.Get();
  *output = ::network::mojom::CSPViolationDataView(pointer, message_);
}


inline void LocalFrame_DidUpdateFramePolicy_ParamsDataView::GetFramePolicyDataView(
    ::blink::mojom::FramePolicyDataView* output) {
  auto pointer = data_->frame_policy.Get();
  *output = ::blink::mojom::FramePolicyDataView(pointer, message_);
}


inline void LocalFrame_PostMessageEvent_ParamsDataView::GetSourceFrameTokenDataView(
    ::blink::mojom::RemoteFrameTokenDataView* output) {
  auto pointer = data_->source_frame_token.Get();
  *output = ::blink::mojom::RemoteFrameTokenDataView(pointer, message_);
}
inline void LocalFrame_PostMessageEvent_ParamsDataView::GetSourceOriginDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->source_origin.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void LocalFrame_PostMessageEvent_ParamsDataView::GetTargetOriginDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->target_origin.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void LocalFrame_PostMessageEvent_ParamsDataView::GetMessageDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, message_);
}


inline void LocalFrame_JavaScriptMethodExecuteRequest_ParamsDataView::GetObjectNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->object_name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void LocalFrame_JavaScriptMethodExecuteRequest_ParamsDataView::GetMethodNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->method_name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void LocalFrame_JavaScriptMethodExecuteRequest_ParamsDataView::GetArgumentsDataView(
    ::mojo_base::mojom::ListValueDataView* output) {
  auto pointer = data_->arguments.Get();
  *output = ::mojo_base::mojom::ListValueDataView(pointer, message_);
}


inline void LocalFrame_JavaScriptMethodExecuteRequest_ResponseParamsDataView::GetResultDataView(
    ::mojo_base::mojom::ValueDataView* output) {
  auto pointer = &data_->result;
  *output = ::mojo_base::mojom::ValueDataView(pointer, message_);
}


inline void LocalFrame_JavaScriptExecuteRequest_ParamsDataView::GetJavascriptDataView(
    ::mojo_base::mojom::BigString16DataView* output) {
  auto pointer = data_->javascript.Get();
  *output = ::mojo_base::mojom::BigString16DataView(pointer, message_);
}


inline void LocalFrame_JavaScriptExecuteRequest_ResponseParamsDataView::GetResultDataView(
    ::mojo_base::mojom::ValueDataView* output) {
  auto pointer = &data_->result;
  *output = ::mojo_base::mojom::ValueDataView(pointer, message_);
}


inline void LocalFrame_JavaScriptExecuteRequestForTests_ParamsDataView::GetJavascriptDataView(
    ::mojo_base::mojom::BigString16DataView* output) {
  auto pointer = data_->javascript.Get();
  *output = ::mojo_base::mojom::BigString16DataView(pointer, message_);
}


inline void LocalFrame_JavaScriptExecuteRequestForTests_ResponseParamsDataView::GetResultDataView(
    ::mojo_base::mojom::ValueDataView* output) {
  auto pointer = &data_->result;
  *output = ::mojo_base::mojom::ValueDataView(pointer, message_);
}


inline void LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ParamsDataView::GetJavascriptDataView(
    ::mojo_base::mojom::BigString16DataView* output) {
  auto pointer = data_->javascript.Get();
  *output = ::mojo_base::mojom::BigString16DataView(pointer, message_);
}


inline void LocalFrame_JavaScriptExecuteRequestInIsolatedWorld_ResponseParamsDataView::GetResultDataView(
    ::mojo_base::mojom::ValueDataView* output) {
  auto pointer = &data_->result;
  *output = ::mojo_base::mojom::ValueDataView(pointer, message_);
}




inline void LocalFrame_UpdateOpener_ParamsDataView::GetOpenerFrameTokenDataView(
    ::blink::mojom::FrameTokenDataView* output) {
  auto pointer = &data_->opener_frame_token;
  *output = ::blink::mojom::FrameTokenDataView(pointer, message_);
}




inline void LocalFrame_GetSavableResourceLinks_ResponseParamsDataView::GetReplyDataView(
    GetSavableResourceLinksReplyDataView* output) {
  auto pointer = data_->reply.Get();
  *output = GetSavableResourceLinksReplyDataView(pointer, message_);
}


inline void LocalFrame_MixedContentFound_ParamsDataView::GetMainResourceUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->main_resource_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void LocalFrame_MixedContentFound_ParamsDataView::GetMixedContentUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->mixed_content_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void LocalFrame_MixedContentFound_ParamsDataView::GetUrlBeforeRedirectsDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url_before_redirects.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void LocalFrame_MixedContentFound_ParamsDataView::GetSourceLocationDataView(
    ::network::mojom::SourceLocationDataView* output) {
  auto pointer = data_->source_location.Get();
  *output = ::network::mojom::SourceLocationDataView(pointer, message_);
}




inline void LocalFrame_ExtractSmartClipData_ParamsDataView::GetRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void LocalFrame_ExtractSmartClipData_ResponseParamsDataView::GetTextDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->text.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void LocalFrame_ExtractSmartClipData_ResponseParamsDataView::GetHtmlDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->html.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void LocalFrame_ExtractSmartClipData_ResponseParamsDataView::GetClipRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->clip_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void LocalFrame_HandleRendererDebugURL_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}




inline void LocalFrame_GetCanonicalUrlForSharing_ResponseParamsDataView::GetCanonicalUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->canonical_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}




inline void LocalFrame_GetOpenGraphMetadata_ResponseParamsDataView::GetMetadataDataView(
    ::blink::mojom::OpenGraphMetadataDataView* output) {
  auto pointer = data_->metadata.Get();
  *output = ::blink::mojom::OpenGraphMetadataDataView(pointer, message_);
}


inline void LocalFrame_SetNavigationApiHistoryEntriesForRestore_ParamsDataView::GetEntryArraysDataView(
    ::blink::mojom::NavigationApiHistoryEntryArraysDataView* output) {
  auto pointer = data_->entry_arrays.Get();
  *output = ::blink::mojom::NavigationApiHistoryEntryArraysDataView(pointer, message_);
}




inline void HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParamsDataView::GetBeforeUnloadStartTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->before_unload_start_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void HighPriorityLocalFrame_DispatchBeforeUnload_ResponseParamsDataView::GetBeforeUnloadEndTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->before_unload_end_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}


inline void LocalMainFrame_AnimateDoubleTapZoom_ParamsDataView::GetPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}
inline void LocalMainFrame_AnimateDoubleTapZoom_ParamsDataView::GetRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}












inline void LocalMainFrame_ZoomToFindInPageRect_ParamsDataView::GetRectInRootFrameDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect_in_root_frame.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void LocalMainFrame_InstallCoopAccessMonitor_ParamsDataView::GetAccessedWindowDataView(
    ::blink::mojom::FrameTokenDataView* output) {
  auto pointer = &data_->accessed_window;
  *output = ::blink::mojom::FrameTokenDataView(pointer, message_);
}
inline void LocalMainFrame_InstallCoopAccessMonitor_ParamsDataView::GetCoopReporterInfoDataView(
    ::network::mojom::CrossOriginOpenerPolicyReporterParamsDataView* output) {
  auto pointer = data_->coop_reporter_info.Get();
  *output = ::network::mojom::CrossOriginOpenerPolicyReporterParamsDataView(pointer, message_);
}


inline void LocalMainFrame_OnPortalActivated_ParamsDataView::GetPortalTokenDataView(
    ::blink::mojom::PortalTokenDataView* output) {
  auto pointer = data_->portal_token.Get();
  *output = ::blink::mojom::PortalTokenDataView(pointer, message_);
}
inline void LocalMainFrame_OnPortalActivated_ParamsDataView::GetDataDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->data.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, message_);
}




inline void LocalMainFrame_ForwardMessageFromHost_ParamsDataView::GetMessageDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, message_);
}
inline void LocalMainFrame_ForwardMessageFromHost_ParamsDataView::GetSourceOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->source_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}






inline void LocalMainFrameHost_ContentsPreferredSizeChanged_ParamsDataView::GetPrefSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->pref_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}


inline void LocalMainFrameHost_TextAutosizerPageInfoChanged_ParamsDataView::GetPageInfoDataView(
    ::blink::mojom::TextAutosizerPageInfoDataView* output) {
  auto pointer = data_->page_info.Get();
  *output = ::blink::mojom::TextAutosizerPageInfoDataView(pointer, message_);
}






inline void LocalMainFrameHost_UpdateTargetURL_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}






inline void LocalMainFrameHost_ShowCreatedWindow_ParamsDataView::GetOpenerFrameTokenDataView(
    ::blink::mojom::LocalFrameTokenDataView* output) {
  auto pointer = data_->opener_frame_token.Get();
  *output = ::blink::mojom::LocalFrameTokenDataView(pointer, message_);
}
inline void LocalMainFrameHost_ShowCreatedWindow_ParamsDataView::GetRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}




inline void LocalMainFrameHost_SetWindowRect_ParamsDataView::GetBoundsDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->bounds.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}







}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_PARAMS_DATA_H_