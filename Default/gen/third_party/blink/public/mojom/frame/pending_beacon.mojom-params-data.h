// third_party/blink/public/mojom/frame/pending_beacon.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_PENDING_BEACON_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_PENDING_BEACON_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PendingBeaconHost_CreateBeacon_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  int32_t method;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> timeout;

 private:
  friend class mojo::internal::MessageFragment<PendingBeaconHost_CreateBeacon_Params_Data>;

  PendingBeaconHost_CreateBeacon_Params_Data();
  ~PendingBeaconHost_CreateBeacon_Params_Data() = delete;
};
static_assert(sizeof(PendingBeaconHost_CreateBeacon_Params_Data) == 32,
              "Bad sizeof(PendingBeaconHost_CreateBeacon_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PendingBeacon_Deactivate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PendingBeacon_Deactivate_Params_Data>;

  PendingBeacon_Deactivate_Params_Data();
  ~PendingBeacon_Deactivate_Params_Data() = delete;
};
static_assert(sizeof(PendingBeacon_Deactivate_Params_Data) == 8,
              "Bad sizeof(PendingBeacon_Deactivate_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PendingBeacon_SetRequestData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::URLRequestBody_Data> request_body;
  mojo::internal::Pointer<mojo::internal::String_Data> content_type;

 private:
  friend class mojo::internal::MessageFragment<PendingBeacon_SetRequestData_Params_Data>;

  PendingBeacon_SetRequestData_Params_Data();
  ~PendingBeacon_SetRequestData_Params_Data() = delete;
};
static_assert(sizeof(PendingBeacon_SetRequestData_Params_Data) == 24,
              "Bad sizeof(PendingBeacon_SetRequestData_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PendingBeacon_SetRequestURL_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<PendingBeacon_SetRequestURL_Params_Data>;

  PendingBeacon_SetRequestURL_Params_Data();
  ~PendingBeacon_SetRequestURL_Params_Data() = delete;
};
static_assert(sizeof(PendingBeacon_SetRequestURL_Params_Data) == 16,
              "Bad sizeof(PendingBeacon_SetRequestURL_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PendingBeacon_SendNow_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PendingBeacon_SendNow_Params_Data>;

  PendingBeacon_SendNow_Params_Data();
  ~PendingBeacon_SendNow_Params_Data() = delete;
};
static_assert(sizeof(PendingBeacon_SendNow_Params_Data) == 8,
              "Bad sizeof(PendingBeacon_SendNow_Params_Data)");

}  // namespace internal


class PendingBeaconHost_CreateBeacon_ParamsDataView {
 public:
  PendingBeaconHost_CreateBeacon_ParamsDataView() = default;

  PendingBeaconHost_CreateBeacon_ParamsDataView(
      internal::PendingBeaconHost_CreateBeacon_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::PendingBeaconInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadMethod(UserType* output) const {
    auto data_value = data_->method;
    return mojo::internal::Deserialize<::blink::mojom::BeaconMethod>(
        data_value, output);
  }
  BeaconMethod method() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::BeaconMethod>(data_->method));
  }
  inline void GetTimeoutDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTimeout(UserType* output) {
    
    auto* pointer = data_->timeout.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::PendingBeaconHost_CreateBeacon_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PendingBeacon_Deactivate_ParamsDataView {
 public:
  PendingBeacon_Deactivate_ParamsDataView() = default;

  PendingBeacon_Deactivate_ParamsDataView(
      internal::PendingBeacon_Deactivate_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PendingBeacon_Deactivate_Params_Data* data_ = nullptr;
};



class PendingBeacon_SetRequestData_ParamsDataView {
 public:
  PendingBeacon_SetRequestData_ParamsDataView() = default;

  PendingBeacon_SetRequestData_ParamsDataView(
      internal::PendingBeacon_SetRequestData_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestBodyDataView(
      ::network::mojom::URLRequestBodyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequestBody(UserType* output) {
    
    auto* pointer = data_->request_body.Get();
    return mojo::internal::Deserialize<::network::mojom::URLRequestBodyDataView>(
        pointer, output, message_);
  }
  inline void GetContentTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContentType(UserType* output) {
    
    auto* pointer = data_->content_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PendingBeacon_SetRequestData_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PendingBeacon_SetRequestURL_ParamsDataView {
 public:
  PendingBeacon_SetRequestURL_ParamsDataView() = default;

  PendingBeacon_SetRequestURL_ParamsDataView(
      internal::PendingBeacon_SetRequestURL_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::PendingBeacon_SetRequestURL_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PendingBeacon_SendNow_ParamsDataView {
 public:
  PendingBeacon_SendNow_ParamsDataView() = default;

  PendingBeacon_SendNow_ParamsDataView(
      internal::PendingBeacon_SendNow_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PendingBeacon_SendNow_Params_Data* data_ = nullptr;
};


inline void PendingBeaconHost_CreateBeacon_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void PendingBeaconHost_CreateBeacon_ParamsDataView::GetTimeoutDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->timeout.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}




inline void PendingBeacon_SetRequestData_ParamsDataView::GetRequestBodyDataView(
    ::network::mojom::URLRequestBodyDataView* output) {
  auto pointer = data_->request_body.Get();
  *output = ::network::mojom::URLRequestBodyDataView(pointer, message_);
}
inline void PendingBeacon_SetRequestData_ParamsDataView::GetContentTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->content_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void PendingBeacon_SetRequestURL_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_PENDING_BEACON_MOJOM_PARAMS_DATA_H_