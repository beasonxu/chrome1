// third_party/blink/public/mojom/frame/frame_visual_properties.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_VISUAL_PROPERTIES_MOJOM_SHARED_INTERNAL_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_VISUAL_PROPERTIES_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "cc/mojom/browser_controls_params.mojom-shared-internal.h"
#include "services/viz/public/mojom/compositing/local_surface_id.mojom-shared-internal.h"
#include "ui/display/mojom/screen_infos.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace blink {
namespace mojom {
namespace internal {
class FrameVisualProperties_Data;

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameVisualProperties_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::display::mojom::internal::ScreenInfos_Data> screen_infos;
  uint8_t auto_resize_enabled : 1;
  uint8_t is_pinch_gesture_active : 1;
  uint8_t pad2_[3];
  uint32_t capture_sequence_number;
  double zoom_level;
  float page_scale_factor;
  float compositing_scale_factor;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> visible_viewport_size;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> min_size_for_auto_resize;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> max_size_for_auto_resize;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data>>> root_widget_window_segments;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> compositor_viewport;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect_in_local_root;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> local_frame_size;
  mojo::internal::Pointer<::viz::mojom::internal::LocalSurfaceId_Data> local_surface_id;

 private:
  friend class mojo::internal::MessageFragment<FrameVisualProperties_Data>;

  FrameVisualProperties_Data();
  ~FrameVisualProperties_Data() = delete;
};
static_assert(sizeof(FrameVisualProperties_Data) == 104,
              "Bad sizeof(FrameVisualProperties_Data)");
// Used by FrameVisualProperties::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FrameVisualProperties_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FrameVisualProperties_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FrameVisualProperties_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<FrameVisualProperties_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FrameVisualProperties_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_VISUAL_PROPERTIES_MOJOM_SHARED_INTERNAL_H_