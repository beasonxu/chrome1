// third_party/blink/public/mojom/frame/policy_container.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_POLICY_CONTAINER_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_POLICY_CONTAINER_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/frame/policy_container.mojom-blink.h"
#include "third_party/blink/renderer/core/core_export.h"


namespace blink {
namespace mojom {
namespace blink {


class CORE_EXPORT PolicyContainerHostInterceptorForTesting : public PolicyContainerHost {
  virtual PolicyContainerHost* GetForwardingInterface() = 0;
  void SetReferrerPolicy(::network::mojom::blink::ReferrerPolicy referrer_policy) override;
  void AddContentSecurityPolicies(WTF::Vector<::network::mojom::blink::ContentSecurityPolicyPtr> content_security_policies) override;
  void IssueKeepAliveHandle(::mojo::PendingReceiver<PolicyContainerHostKeepAliveHandle> receiver) override;
};
class CORE_EXPORT PolicyContainerHostAsyncWaiter {
 public:
  explicit PolicyContainerHostAsyncWaiter(PolicyContainerHost* proxy);

  PolicyContainerHostAsyncWaiter(const PolicyContainerHostAsyncWaiter&) = delete;
  PolicyContainerHostAsyncWaiter& operator=(const PolicyContainerHostAsyncWaiter&) = delete;

  ~PolicyContainerHostAsyncWaiter();

 private:
  PolicyContainerHost* const proxy_;
};


class CORE_EXPORT PolicyContainerHostKeepAliveHandleInterceptorForTesting : public PolicyContainerHostKeepAliveHandle {
  virtual PolicyContainerHostKeepAliveHandle* GetForwardingInterface() = 0;
};
class CORE_EXPORT PolicyContainerHostKeepAliveHandleAsyncWaiter {
 public:
  explicit PolicyContainerHostKeepAliveHandleAsyncWaiter(PolicyContainerHostKeepAliveHandle* proxy);

  PolicyContainerHostKeepAliveHandleAsyncWaiter(const PolicyContainerHostKeepAliveHandleAsyncWaiter&) = delete;
  PolicyContainerHostKeepAliveHandleAsyncWaiter& operator=(const PolicyContainerHostKeepAliveHandleAsyncWaiter&) = delete;

  ~PolicyContainerHostKeepAliveHandleAsyncWaiter();

 private:
  PolicyContainerHostKeepAliveHandle* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_POLICY_CONTAINER_MOJOM_BLINK_TEST_UTILS_H_