// third_party/blink/public/mojom/frame/back_forward_cache_controller.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_BACK_FORWARD_CACHE_CONTROLLER_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_BACK_FORWARD_CACHE_CONTROLLER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BackForwardCacheControllerHost_EvictFromBackForwardCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t reason;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<BackForwardCacheControllerHost_EvictFromBackForwardCache_Params_Data>;

  BackForwardCacheControllerHost_EvictFromBackForwardCache_Params_Data();
  ~BackForwardCacheControllerHost_EvictFromBackForwardCache_Params_Data() = delete;
};
static_assert(sizeof(BackForwardCacheControllerHost_EvictFromBackForwardCache_Params_Data) == 16,
              "Bad sizeof(BackForwardCacheControllerHost_EvictFromBackForwardCache_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BackForwardCacheControllerHost_DidChangeBackForwardCacheDisablingFeatures_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t features_mask;

 private:
  friend class mojo::internal::MessageFragment<BackForwardCacheControllerHost_DidChangeBackForwardCacheDisablingFeatures_Params_Data>;

  BackForwardCacheControllerHost_DidChangeBackForwardCacheDisablingFeatures_Params_Data();
  ~BackForwardCacheControllerHost_DidChangeBackForwardCacheDisablingFeatures_Params_Data() = delete;
};
static_assert(sizeof(BackForwardCacheControllerHost_DidChangeBackForwardCacheDisablingFeatures_Params_Data) == 16,
              "Bad sizeof(BackForwardCacheControllerHost_DidChangeBackForwardCacheDisablingFeatures_Params_Data)");

}  // namespace internal


class BackForwardCacheControllerHost_EvictFromBackForwardCache_ParamsDataView {
 public:
  BackForwardCacheControllerHost_EvictFromBackForwardCache_ParamsDataView() = default;

  BackForwardCacheControllerHost_EvictFromBackForwardCache_ParamsDataView(
      internal::BackForwardCacheControllerHost_EvictFromBackForwardCache_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::blink::mojom::RendererEvictionReason>(
        data_value, output);
  }
  ::blink::mojom::RendererEvictionReason reason() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::RendererEvictionReason>(data_->reason));
  }
 private:
  internal::BackForwardCacheControllerHost_EvictFromBackForwardCache_Params_Data* data_ = nullptr;
};



class BackForwardCacheControllerHost_DidChangeBackForwardCacheDisablingFeatures_ParamsDataView {
 public:
  BackForwardCacheControllerHost_DidChangeBackForwardCacheDisablingFeatures_ParamsDataView() = default;

  BackForwardCacheControllerHost_DidChangeBackForwardCacheDisablingFeatures_ParamsDataView(
      internal::BackForwardCacheControllerHost_DidChangeBackForwardCacheDisablingFeatures_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t features_mask() const {
    return data_->features_mask;
  }
 private:
  internal::BackForwardCacheControllerHost_DidChangeBackForwardCacheDisablingFeatures_Params_Data* data_ = nullptr;
};





}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_BACK_FORWARD_CACHE_CONTROLLER_MOJOM_PARAMS_DATA_H_