// third_party/blink/public/mojom/frame/viewport_intersection_state.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_VIEWPORT_INTERSECTION_STATE_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_VIEWPORT_INTERSECTION_STATE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/frame/viewport_intersection_state.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "ui/gfx/mojom/transform.mojom-shared.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {
class ViewportIntersectionStateDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::ViewportIntersectionStateDataView> {
  using Data = ::blink::mojom::internal::ViewportIntersectionState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class FrameOcclusionState : int32_t {
  
  kUnknown = 0,
  
  kPossiblyOccluded = 1,
  
  kGuaranteedNotOccluded = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, FrameOcclusionState value);
inline bool IsKnownEnumValue(FrameOcclusionState value) {
  return internal::FrameOcclusionState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class ViewportIntersectionStateDataView {
 public:
  ViewportIntersectionStateDataView() = default;

  ViewportIntersectionStateDataView(
      internal::ViewportIntersectionState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetViewportIntersectionDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadViewportIntersection(UserType* output) {
    
    auto* pointer = data_->viewport_intersection.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  inline void GetMainFrameIntersectionDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMainFrameIntersection(UserType* output) {
    
    auto* pointer = data_->main_frame_intersection.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  inline void GetCompositorVisibleRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCompositorVisibleRect(UserType* output) {
    
    auto* pointer = data_->compositor_visible_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadOcclusionState(UserType* output) const {
    auto data_value = data_->occlusion_state;
    return mojo::internal::Deserialize<::blink::mojom::FrameOcclusionState>(
        data_value, output);
  }
  FrameOcclusionState occlusion_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FrameOcclusionState>(data_->occlusion_state));
  }
  inline void GetMainFrameViewportSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMainFrameViewportSize(UserType* output) {
    
    auto* pointer = data_->main_frame_viewport_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  inline void GetMainFrameScrollPositionDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMainFrameScrollPosition(UserType* output) {
    
    auto* pointer = data_->main_frame_scroll_position.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
  inline void GetMainFrameTransformDataView(
      ::gfx::mojom::TransformDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMainFrameTransform(UserType* output) {
    
    auto* pointer = data_->main_frame_transform.Get();
    return mojo::internal::Deserialize<::gfx::mojom::TransformDataView>(
        pointer, output, message_);
  }
 private:
  internal::ViewportIntersectionState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::FrameOcclusionState>
    : public mojo::internal::EnumHashImpl<::blink::mojom::FrameOcclusionState> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FrameOcclusionState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::FrameOcclusionState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::FrameOcclusionState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ViewportIntersectionStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::ViewportIntersectionStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::ViewportIntersectionState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::viewport_intersection(input)) in_viewport_intersection = Traits::viewport_intersection(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->viewport_intersection)::BaseType> viewport_intersection_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_viewport_intersection, viewport_intersection_fragment);
    fragment->viewport_intersection.Set(
        viewport_intersection_fragment.is_null() ? nullptr : viewport_intersection_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->viewport_intersection.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null viewport_intersection in ViewportIntersectionState struct");
    decltype(Traits::main_frame_intersection(input)) in_main_frame_intersection = Traits::main_frame_intersection(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->main_frame_intersection)::BaseType> main_frame_intersection_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_main_frame_intersection, main_frame_intersection_fragment);
    fragment->main_frame_intersection.Set(
        main_frame_intersection_fragment.is_null() ? nullptr : main_frame_intersection_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->main_frame_intersection.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null main_frame_intersection in ViewportIntersectionState struct");
    decltype(Traits::compositor_visible_rect(input)) in_compositor_visible_rect = Traits::compositor_visible_rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->compositor_visible_rect)::BaseType> compositor_visible_rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_compositor_visible_rect, compositor_visible_rect_fragment);
    fragment->compositor_visible_rect.Set(
        compositor_visible_rect_fragment.is_null() ? nullptr : compositor_visible_rect_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->compositor_visible_rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null compositor_visible_rect in ViewportIntersectionState struct");
    mojo::internal::Serialize<::blink::mojom::FrameOcclusionState>(
        Traits::occlusion_state(input), &fragment->occlusion_state);
    decltype(Traits::main_frame_viewport_size(input)) in_main_frame_viewport_size = Traits::main_frame_viewport_size(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->main_frame_viewport_size)::BaseType> main_frame_viewport_size_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_main_frame_viewport_size, main_frame_viewport_size_fragment);
    fragment->main_frame_viewport_size.Set(
        main_frame_viewport_size_fragment.is_null() ? nullptr : main_frame_viewport_size_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->main_frame_viewport_size.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null main_frame_viewport_size in ViewportIntersectionState struct");
    decltype(Traits::main_frame_scroll_position(input)) in_main_frame_scroll_position = Traits::main_frame_scroll_position(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->main_frame_scroll_position)::BaseType> main_frame_scroll_position_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointDataView>(
        in_main_frame_scroll_position, main_frame_scroll_position_fragment);
    fragment->main_frame_scroll_position.Set(
        main_frame_scroll_position_fragment.is_null() ? nullptr : main_frame_scroll_position_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->main_frame_scroll_position.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null main_frame_scroll_position in ViewportIntersectionState struct");
    decltype(Traits::main_frame_transform(input)) in_main_frame_transform = Traits::main_frame_transform(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->main_frame_transform)::BaseType> main_frame_transform_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::TransformDataView>(
        in_main_frame_transform, main_frame_transform_fragment);
    fragment->main_frame_transform.Set(
        main_frame_transform_fragment.is_null() ? nullptr : main_frame_transform_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->main_frame_transform.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null main_frame_transform in ViewportIntersectionState struct");
  }

  static bool Deserialize(::blink::mojom::internal::ViewportIntersectionState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::ViewportIntersectionStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void ViewportIntersectionStateDataView::GetViewportIntersectionDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->viewport_intersection.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void ViewportIntersectionStateDataView::GetMainFrameIntersectionDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->main_frame_intersection.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void ViewportIntersectionStateDataView::GetCompositorVisibleRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->compositor_visible_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void ViewportIntersectionStateDataView::GetMainFrameViewportSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->main_frame_viewport_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}
inline void ViewportIntersectionStateDataView::GetMainFrameScrollPositionDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->main_frame_scroll_position.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}
inline void ViewportIntersectionStateDataView::GetMainFrameTransformDataView(
    ::gfx::mojom::TransformDataView* output) {
  auto pointer = data_->main_frame_transform.Get();
  *output = ::gfx::mojom::TransformDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::FrameOcclusionState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::FrameOcclusionState value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_VIEWPORT_INTERSECTION_STATE_MOJOM_SHARED_H_