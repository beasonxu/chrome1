// third_party/blink/public/mojom/frame/pending_beacon.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_PENDING_BEACON_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_PENDING_BEACON_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/frame/pending_beacon.mojom-shared.h"
#include "third_party/blink/public/mojom/frame/pending_beacon.mojom-blink-forward.h"
#include "mojo/public/mojom/base/time.mojom-blink.h"
#include "services/network/public/mojom/url_request.mojom-blink.h"
#include "url/mojom/url.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/core/core_export.h"




namespace WTF {
struct blink_mojom_internal_BeaconMethod_DataHashFn {
  static unsigned GetHash(const ::blink::mojom::BeaconMethod& value) {
    using utype = std::underlying_type<::blink::mojom::BeaconMethod>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::blink::mojom::BeaconMethod& left, const ::blink::mojom::BeaconMethod& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::blink::mojom::BeaconMethod>
    : public GenericHashTraits<::blink::mojom::BeaconMethod> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::blink::mojom::BeaconMethod EmptyValue() { return static_cast<::blink::mojom::BeaconMethod>(-1000000); }
  static void ConstructDeletedValue(::blink::mojom::BeaconMethod& slot, bool) {
    slot = static_cast<::blink::mojom::BeaconMethod>(-1000001);
  }
  static bool IsDeletedValue(const ::blink::mojom::BeaconMethod& value) {
    return value == static_cast<::blink::mojom::BeaconMethod>(-1000001);
  }
};
}  // namespace WTF


namespace blink {
namespace mojom {
namespace blink {

class PendingBeaconHostProxy;

template <typename ImplRefTraits>
class PendingBeaconHostStub;

class PendingBeaconHostRequestValidator;


class CORE_EXPORT PendingBeaconHost
    : public PendingBeaconHostInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = PendingBeaconHostInterfaceBase;
  using Proxy_ = PendingBeaconHostProxy;

  template <typename ImplRefTraits>
  using Stub_ = PendingBeaconHostStub<ImplRefTraits>;

  using RequestValidator_ = PendingBeaconHostRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kCreateBeaconMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct CreateBeacon_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~PendingBeaconHost() = default;

  
  virtual void CreateBeacon(::mojo::PendingReceiver<PendingBeacon> receiver, const ::blink::KURL& url, BeaconMethod method, ::base::TimeDelta timeout) = 0;
};

class PendingBeaconProxy;

template <typename ImplRefTraits>
class PendingBeaconStub;

class PendingBeaconRequestValidator;


class CORE_EXPORT PendingBeacon
    : public PendingBeaconInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = PendingBeaconInterfaceBase;
  using Proxy_ = PendingBeaconProxy;

  template <typename ImplRefTraits>
  using Stub_ = PendingBeaconStub<ImplRefTraits>;

  using RequestValidator_ = PendingBeaconRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kDeactivateMinVersion = 0,
    kSetRequestDataMinVersion = 0,
    kSetRequestURLMinVersion = 0,
    kSendNowMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Deactivate_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetRequestData_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetRequestURL_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SendNow_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~PendingBeacon() = default;

  
  virtual void Deactivate() = 0;

  
  virtual void SetRequestData(::scoped_refptr<::network::ResourceRequestBody> request_body, const WTF::String& content_type) = 0;

  
  virtual void SetRequestURL(const ::blink::KURL& url) = 0;

  
  virtual void SendNow() = 0;
};



class CORE_EXPORT PendingBeaconHostProxy
    : public PendingBeaconHost {
 public:
  using InterfaceType = PendingBeaconHost;

  explicit PendingBeaconHostProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void CreateBeacon(::mojo::PendingReceiver<PendingBeacon> receiver, const ::blink::KURL& url, BeaconMethod method, ::base::TimeDelta timeout) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class CORE_EXPORT PendingBeaconProxy
    : public PendingBeacon {
 public:
  using InterfaceType = PendingBeacon;

  explicit PendingBeaconProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void Deactivate() final;
  
  void SetRequestData(::scoped_refptr<::network::ResourceRequestBody> request_body, const WTF::String& content_type) final;
  
  void SetRequestURL(const ::blink::KURL& url) final;
  
  void SendNow() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class CORE_EXPORT PendingBeaconHostStubDispatch {
 public:
  static bool Accept(PendingBeaconHost* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PendingBeaconHost* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PendingBeaconHost>>
class PendingBeaconHostStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PendingBeaconHostStub() = default;
  ~PendingBeaconHostStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PendingBeaconHostStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PendingBeaconHostStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class CORE_EXPORT PendingBeaconStubDispatch {
 public:
  static bool Accept(PendingBeacon* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PendingBeacon* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PendingBeacon>>
class PendingBeaconStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PendingBeaconStub() = default;
  ~PendingBeaconStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PendingBeaconStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PendingBeaconStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class CORE_EXPORT PendingBeaconHostRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class CORE_EXPORT PendingBeaconRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_PENDING_BEACON_MOJOM_BLINK_H_