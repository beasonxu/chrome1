// third_party/blink/public/mojom/frame/frame_policy.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/frame/frame_policy.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/frame/frame_policy.mojom-params-data.h"
#include "third_party/blink/public/mojom/frame/frame_policy.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/frame/frame_policy.mojom-import-headers.h"
#include "third_party/blink/public/mojom/frame/frame_policy.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_POLICY_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_POLICY_MOJOM_JUMBO_H_
#include "third_party/blink/common/permissions_policy/permissions_policy_mojom_traits.h"
#endif



namespace blink {
namespace mojom {
FramePolicy::FramePolicy()
    : sandbox_flags(),
      container_policy(),
      required_document_policy(),
      is_fenced(false),
      fenced_frame_mode() {}

FramePolicy::FramePolicy(
    ::network::mojom::WebSandboxFlags sandbox_flags_in,
    std::vector<::blink::ParsedPermissionsPolicyDeclaration> container_policy_in,
    const base::flat_map<::blink::mojom::DocumentPolicyFeature, ::blink::PolicyValue>& required_document_policy_in,
    bool is_fenced_in,
    ::blink::mojom::FencedFrameMode fenced_frame_mode_in)
    : sandbox_flags(std::move(sandbox_flags_in)),
      container_policy(std::move(container_policy_in)),
      required_document_policy(std::move(required_document_policy_in)),
      is_fenced(std::move(is_fenced_in)),
      fenced_frame_mode(std::move(fenced_frame_mode_in)) {}

FramePolicy::~FramePolicy() = default;

void FramePolicy::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sandbox_flags"), this->sandbox_flags,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::WebSandboxFlags>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "container_policy"), this->container_policy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::blink::ParsedPermissionsPolicyDeclaration>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "required_document_policy"), this->required_document_policy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const base::flat_map<::blink::mojom::DocumentPolicyFeature, ::blink::PolicyValue>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_fenced"), this->is_fenced,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fenced_frame_mode"), this->fenced_frame_mode,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::mojom::FencedFrameMode>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool FramePolicy::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::FramePolicy::DataView, ::blink::mojom::FramePolicyPtr>::Read(
    ::blink::mojom::FramePolicy::DataView input,
    ::blink::mojom::FramePolicyPtr* output) {
  bool success = true;
  ::blink::mojom::FramePolicyPtr result(::blink::mojom::FramePolicy::New());
  
      if (success && !input.ReadSandboxFlags(&result->sandbox_flags))
        success = false;
      if (success && !input.ReadContainerPolicy(&result->container_policy))
        success = false;
      if (success && !input.ReadRequiredDocumentPolicy(&result->required_document_policy))
        success = false;
      if (success)
        result->is_fenced = input.is_fenced();
      if (success && !input.ReadFencedFrameMode(&result->fenced_frame_mode))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif