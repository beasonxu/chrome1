// third_party/blink/public/mojom/file_system_access/file_system_access_capacity_allocation_host.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');







goog.provide('blink.mojom.FileSystemAccessCapacityAllocationHost');
goog.provide('blink.mojom.FileSystemAccessCapacityAllocationHostReceiver');
goog.provide('blink.mojom.FileSystemAccessCapacityAllocationHostCallbackRouter');
goog.provide('blink.mojom.FileSystemAccessCapacityAllocationHostInterface');
goog.provide('blink.mojom.FileSystemAccessCapacityAllocationHostRemote');
goog.provide('blink.mojom.FileSystemAccessCapacityAllocationHostPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.FileSystemAccessCapacityAllocationHostPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.FileSystemAccessCapacityAllocationHost.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.FileSystemAccessCapacityAllocationHostInterface = class {
  
  /**
   * @param { !bigint } capacityDelta
   * @return {!Promise<{
        grantedCapacityDelta: !bigint,
   *  }>}
   */

  requestCapacityChange(capacityDelta) {}
};

/**
 * @export
 * @implements { blink.mojom.FileSystemAccessCapacityAllocationHostInterface }
 */
blink.mojom.FileSystemAccessCapacityAllocationHostRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.FileSystemAccessCapacityAllocationHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.FileSystemAccessCapacityAllocationHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.FileSystemAccessCapacityAllocationHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !bigint } capacityDelta
   * @return {!Promise<{
        grantedCapacityDelta: !bigint,
   *  }>}
   */

  requestCapacityChange(
      capacityDelta) {
    return this.proxy.sendMessage(
        0,
        blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ParamsSpec.$,
        blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParamsSpec.$,
        [
          capacityDelta
        ]);
  }
};

/**
 * An object which receives request messages for the FileSystemAccessCapacityAllocationHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.FileSystemAccessCapacityAllocationHostReceiver = class {
  /**
   * @param {!blink.mojom.FileSystemAccessCapacityAllocationHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.FileSystemAccessCapacityAllocationHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.FileSystemAccessCapacityAllocationHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FileSystemAccessCapacityAllocationHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ParamsSpec.$,
        blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParamsSpec.$,
        impl.requestCapacityChange.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.FileSystemAccessCapacityAllocationHost = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.FileSystemAccessCapacityAllocationHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.FileSystemAccessCapacityAllocationHostRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.FileSystemAccessCapacityAllocationHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the FileSystemAccessCapacityAllocationHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.FileSystemAccessCapacityAllocationHostCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.FileSystemAccessCapacityAllocationHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FileSystemAccessCapacityAllocationHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestCapacityChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ParamsSpec.$,
        blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParamsSpec.$,
        this.requestCapacityChange.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ParamsSpec.$,
    'FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params',
    [
      mojo.internal.StructField(
        'capacityDelta', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params');

/** @record */
blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params = class {
  constructor() {
    /** @export { !bigint } */
    this.capacityDelta;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParamsSpec.$,
    'FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams',
    [
      mojo.internal.StructField(
        'grantedCapacityDelta', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams');

/** @record */
blink.mojom.FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams = class {
  constructor() {
    /** @export { !bigint } */
    this.grantedCapacityDelta;
  }
};


