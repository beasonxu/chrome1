// third_party/blink/public/mojom/file_system_access/file_system_access_manager.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_MANAGER_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_MANAGER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessManager_GetSandboxedFileSystem_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessManager_GetSandboxedFileSystem_Params_Data>;

  FileSystemAccessManager_GetSandboxedFileSystem_Params_Data();
  ~FileSystemAccessManager_GetSandboxedFileSystem_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessManager_GetSandboxedFileSystem_Params_Data) == 8,
              "Bad sizeof(FileSystemAccessManager_GetSandboxedFileSystem_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  mojo::internal::Interface_Data directory;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams_Data>;

  FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams_Data();
  ~FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams_Data) == 24,
              "Bad sizeof(FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessManager_ChooseEntries_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::FilePickerOptions_Data options;
  mojo::internal::Pointer<internal::CommonFilePickerOptions_Data> common_options;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessManager_ChooseEntries_Params_Data>;

  FileSystemAccessManager_ChooseEntries_Params_Data();
  ~FileSystemAccessManager_ChooseEntries_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessManager_ChooseEntries_Params_Data) == 32,
              "Bad sizeof(FileSystemAccessManager_ChooseEntries_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessManager_ChooseEntries_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessEntry_Data>>> entries;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessManager_ChooseEntries_ResponseParams_Data>;

  FileSystemAccessManager_ChooseEntries_ResponseParams_Data();
  ~FileSystemAccessManager_ChooseEntries_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessManager_ChooseEntries_ResponseParams_Data) == 24,
              "Bad sizeof(FileSystemAccessManager_ChooseEntries_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessManager_GetFileHandleFromToken_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data token;
  mojo::internal::Handle_Data file_handle;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessManager_GetFileHandleFromToken_Params_Data>;

  FileSystemAccessManager_GetFileHandleFromToken_Params_Data();
  ~FileSystemAccessManager_GetFileHandleFromToken_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessManager_GetFileHandleFromToken_Params_Data) == 24,
              "Bad sizeof(FileSystemAccessManager_GetFileHandleFromToken_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessManager_GetDirectoryHandleFromToken_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data token;
  mojo::internal::Handle_Data directory_handle;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessManager_GetDirectoryHandleFromToken_Params_Data>;

  FileSystemAccessManager_GetDirectoryHandleFromToken_Params_Data();
  ~FileSystemAccessManager_GetDirectoryHandleFromToken_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessManager_GetDirectoryHandleFromToken_Params_Data) == 24,
              "Bad sizeof(FileSystemAccessManager_GetDirectoryHandleFromToken_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessManager_GetEntryFromDataTransferToken_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data token;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessManager_GetEntryFromDataTransferToken_Params_Data>;

  FileSystemAccessManager_GetEntryFromDataTransferToken_Params_Data();
  ~FileSystemAccessManager_GetEntryFromDataTransferToken_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessManager_GetEntryFromDataTransferToken_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessManager_GetEntryFromDataTransferToken_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessEntry_Data> entry;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParams_Data>;

  FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParams_Data();
  ~FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParams_Data)");

}  // namespace internal


class FileSystemAccessManager_GetSandboxedFileSystem_ParamsDataView {
 public:
  FileSystemAccessManager_GetSandboxedFileSystem_ParamsDataView() = default;

  FileSystemAccessManager_GetSandboxedFileSystem_ParamsDataView(
      internal::FileSystemAccessManager_GetSandboxedFileSystem_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FileSystemAccessManager_GetSandboxedFileSystem_Params_Data* data_ = nullptr;
};



class FileSystemAccessManager_GetSandboxedFileSystem_ResponseParamsDataView {
 public:
  FileSystemAccessManager_GetSandboxedFileSystem_ResponseParamsDataView() = default;

  FileSystemAccessManager_GetSandboxedFileSystem_ResponseParamsDataView(
      internal::FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeDirectory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessDirectoryHandleInterfaceBase>>(
            &data_->directory, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessManager_ChooseEntries_ParamsDataView {
 public:
  FileSystemAccessManager_ChooseEntries_ParamsDataView() = default;

  FileSystemAccessManager_ChooseEntries_ParamsDataView(
      internal::FileSystemAccessManager_ChooseEntries_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOptionsDataView(
      FilePickerOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
    auto* pointer = !data_->options.is_null() ? &data_->options : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FilePickerOptionsDataView>(
        pointer, output, message_);
  }
  inline void GetCommonOptionsDataView(
      CommonFilePickerOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCommonOptions(UserType* output) {
    
    auto* pointer = data_->common_options.Get();
    return mojo::internal::Deserialize<::blink::mojom::CommonFilePickerOptionsDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessManager_ChooseEntries_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessManager_ChooseEntries_ResponseParamsDataView {
 public:
  FileSystemAccessManager_ChooseEntries_ResponseParamsDataView() = default;

  FileSystemAccessManager_ChooseEntries_ResponseParamsDataView(
      internal::FileSystemAccessManager_ChooseEntries_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  inline void GetEntriesDataView(
      mojo::ArrayDataView<::blink::mojom::FileSystemAccessEntryDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEntries(UserType* output) {
    
    auto* pointer = data_->entries.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::FileSystemAccessEntryDataView>>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessManager_ChooseEntries_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessManager_GetFileHandleFromToken_ParamsDataView {
 public:
  FileSystemAccessManager_GetFileHandleFromToken_ParamsDataView() = default;

  FileSystemAccessManager_GetFileHandleFromToken_ParamsDataView(
      internal::FileSystemAccessManager_GetFileHandleFromToken_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
            &data_->token, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeFileHandle() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::FileSystemAccessFileHandleInterfaceBase>>(
            &data_->file_handle, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessManager_GetFileHandleFromToken_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessManager_GetDirectoryHandleFromToken_ParamsDataView {
 public:
  FileSystemAccessManager_GetDirectoryHandleFromToken_ParamsDataView() = default;

  FileSystemAccessManager_GetDirectoryHandleFromToken_ParamsDataView(
      internal::FileSystemAccessManager_GetDirectoryHandleFromToken_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
            &data_->token, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeDirectoryHandle() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::FileSystemAccessDirectoryHandleInterfaceBase>>(
            &data_->directory_handle, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessManager_GetDirectoryHandleFromToken_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessManager_GetEntryFromDataTransferToken_ParamsDataView {
 public:
  FileSystemAccessManager_GetEntryFromDataTransferToken_ParamsDataView() = default;

  FileSystemAccessManager_GetEntryFromDataTransferToken_ParamsDataView(
      internal::FileSystemAccessManager_GetEntryFromDataTransferToken_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessDataTransferTokenInterfaceBase>>(
            &data_->token, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessManager_GetEntryFromDataTransferToken_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParamsDataView {
 public:
  FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParamsDataView() = default;

  FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParamsDataView(
      internal::FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEntryDataView(
      ::blink::mojom::FileSystemAccessEntryDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEntry(UserType* output) {
    
    auto* pointer = data_->entry.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessEntryDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void FileSystemAccessManager_GetSandboxedFileSystem_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}


inline void FileSystemAccessManager_ChooseEntries_ParamsDataView::GetOptionsDataView(
    FilePickerOptionsDataView* output) {
  auto pointer = &data_->options;
  *output = FilePickerOptionsDataView(pointer, message_);
}
inline void FileSystemAccessManager_ChooseEntries_ParamsDataView::GetCommonOptionsDataView(
    CommonFilePickerOptionsDataView* output) {
  auto pointer = data_->common_options.Get();
  *output = CommonFilePickerOptionsDataView(pointer, message_);
}


inline void FileSystemAccessManager_ChooseEntries_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}
inline void FileSystemAccessManager_ChooseEntries_ResponseParamsDataView::GetEntriesDataView(
    mojo::ArrayDataView<::blink::mojom::FileSystemAccessEntryDataView>* output) {
  auto pointer = data_->entries.Get();
  *output = mojo::ArrayDataView<::blink::mojom::FileSystemAccessEntryDataView>(pointer, message_);
}








inline void FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParamsDataView::GetEntryDataView(
    ::blink::mojom::FileSystemAccessEntryDataView* output) {
  auto pointer = data_->entry.Get();
  *output = ::blink::mojom::FileSystemAccessEntryDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_MANAGER_MOJOM_PARAMS_DATA_H_