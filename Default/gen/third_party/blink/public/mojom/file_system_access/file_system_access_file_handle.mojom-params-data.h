// third_party/blink/public/mojom/file_system_access/file_system_access_file_handle.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_FILE_HANDLE_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_FILE_HANDLE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_GetPermissionStatus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t writable : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_GetPermissionStatus_Params_Data>;

  FileSystemAccessFileHandle_GetPermissionStatus_Params_Data();
  ~FileSystemAccessFileHandle_GetPermissionStatus_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_GetPermissionStatus_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessFileHandle_GetPermissionStatus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_GetPermissionStatus_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_GetPermissionStatus_ResponseParams_Data>;

  FileSystemAccessFileHandle_GetPermissionStatus_ResponseParams_Data();
  ~FileSystemAccessFileHandle_GetPermissionStatus_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_GetPermissionStatus_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessFileHandle_GetPermissionStatus_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_RequestPermission_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t writable : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_RequestPermission_Params_Data>;

  FileSystemAccessFileHandle_RequestPermission_Params_Data();
  ~FileSystemAccessFileHandle_RequestPermission_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_RequestPermission_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessFileHandle_RequestPermission_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_RequestPermission_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_RequestPermission_ResponseParams_Data>;

  FileSystemAccessFileHandle_RequestPermission_ResponseParams_Data();
  ~FileSystemAccessFileHandle_RequestPermission_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_RequestPermission_ResponseParams_Data) == 24,
              "Bad sizeof(FileSystemAccessFileHandle_RequestPermission_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_AsBlob_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_AsBlob_Params_Data>;

  FileSystemAccessFileHandle_AsBlob_Params_Data();
  ~FileSystemAccessFileHandle_AsBlob_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_AsBlob_Params_Data) == 8,
              "Bad sizeof(FileSystemAccessFileHandle_AsBlob_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_AsBlob_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FileInfo_Data> info;
  mojo::internal::Pointer<::blink::mojom::internal::SerializedBlob_Data> blob;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_AsBlob_ResponseParams_Data>;

  FileSystemAccessFileHandle_AsBlob_ResponseParams_Data();
  ~FileSystemAccessFileHandle_AsBlob_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_AsBlob_ResponseParams_Data) == 32,
              "Bad sizeof(FileSystemAccessFileHandle_AsBlob_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_CreateFileWriter_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t keep_existing_data : 1;
  uint8_t auto_close : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_CreateFileWriter_Params_Data>;

  FileSystemAccessFileHandle_CreateFileWriter_Params_Data();
  ~FileSystemAccessFileHandle_CreateFileWriter_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_CreateFileWriter_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessFileHandle_CreateFileWriter_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_CreateFileWriter_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  mojo::internal::Interface_Data writer;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_CreateFileWriter_ResponseParams_Data>;

  FileSystemAccessFileHandle_CreateFileWriter_ResponseParams_Data();
  ~FileSystemAccessFileHandle_CreateFileWriter_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_CreateFileWriter_ResponseParams_Data) == 24,
              "Bad sizeof(FileSystemAccessFileHandle_CreateFileWriter_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_Rename_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> new_entry_name;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_Rename_Params_Data>;

  FileSystemAccessFileHandle_Rename_Params_Data();
  ~FileSystemAccessFileHandle_Rename_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_Rename_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessFileHandle_Rename_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_Rename_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_Rename_ResponseParams_Data>;

  FileSystemAccessFileHandle_Rename_ResponseParams_Data();
  ~FileSystemAccessFileHandle_Rename_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_Rename_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessFileHandle_Rename_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_Move_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data destination_directory;
  mojo::internal::Pointer<mojo::internal::String_Data> new_entry_name;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_Move_Params_Data>;

  FileSystemAccessFileHandle_Move_Params_Data();
  ~FileSystemAccessFileHandle_Move_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_Move_Params_Data) == 24,
              "Bad sizeof(FileSystemAccessFileHandle_Move_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_Move_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_Move_ResponseParams_Data>;

  FileSystemAccessFileHandle_Move_ResponseParams_Data();
  ~FileSystemAccessFileHandle_Move_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_Move_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessFileHandle_Move_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_Remove_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_Remove_Params_Data>;

  FileSystemAccessFileHandle_Remove_Params_Data();
  ~FileSystemAccessFileHandle_Remove_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_Remove_Params_Data) == 8,
              "Bad sizeof(FileSystemAccessFileHandle_Remove_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_Remove_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_Remove_ResponseParams_Data>;

  FileSystemAccessFileHandle_Remove_ResponseParams_Data();
  ~FileSystemAccessFileHandle_Remove_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_Remove_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessFileHandle_Remove_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_OpenAccessHandle_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_OpenAccessHandle_Params_Data>;

  FileSystemAccessFileHandle_OpenAccessHandle_Params_Data();
  ~FileSystemAccessFileHandle_OpenAccessHandle_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_OpenAccessHandle_Params_Data) == 8,
              "Bad sizeof(FileSystemAccessFileHandle_OpenAccessHandle_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_OpenAccessHandle_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  internal::FileSystemAccessAccessHandleFile_Data file;
  mojo::internal::Interface_Data access_handle_host;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_OpenAccessHandle_ResponseParams_Data>;

  FileSystemAccessFileHandle_OpenAccessHandle_ResponseParams_Data();
  ~FileSystemAccessFileHandle_OpenAccessHandle_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_OpenAccessHandle_ResponseParams_Data) == 40,
              "Bad sizeof(FileSystemAccessFileHandle_OpenAccessHandle_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_IsSameEntry_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data other;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_IsSameEntry_Params_Data>;

  FileSystemAccessFileHandle_IsSameEntry_Params_Data();
  ~FileSystemAccessFileHandle_IsSameEntry_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_IsSameEntry_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessFileHandle_IsSameEntry_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_IsSameEntry_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  uint8_t is_same : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_IsSameEntry_ResponseParams_Data>;

  FileSystemAccessFileHandle_IsSameEntry_ResponseParams_Data();
  ~FileSystemAccessFileHandle_IsSameEntry_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_IsSameEntry_ResponseParams_Data) == 24,
              "Bad sizeof(FileSystemAccessFileHandle_IsSameEntry_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessFileHandle_Transfer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data token;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessFileHandle_Transfer_Params_Data>;

  FileSystemAccessFileHandle_Transfer_Params_Data();
  ~FileSystemAccessFileHandle_Transfer_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessFileHandle_Transfer_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessFileHandle_Transfer_Params_Data)");

}  // namespace internal


class FileSystemAccessFileHandle_GetPermissionStatus_ParamsDataView {
 public:
  FileSystemAccessFileHandle_GetPermissionStatus_ParamsDataView() = default;

  FileSystemAccessFileHandle_GetPermissionStatus_ParamsDataView(
      internal::FileSystemAccessFileHandle_GetPermissionStatus_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool writable() const {
    return data_->writable;
  }
 private:
  internal::FileSystemAccessFileHandle_GetPermissionStatus_Params_Data* data_ = nullptr;
};



class FileSystemAccessFileHandle_GetPermissionStatus_ResponseParamsDataView {
 public:
  FileSystemAccessFileHandle_GetPermissionStatus_ResponseParamsDataView() = default;

  FileSystemAccessFileHandle_GetPermissionStatus_ResponseParamsDataView(
      internal::FileSystemAccessFileHandle_GetPermissionStatus_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::PermissionStatus>(
        data_value, output);
  }
  ::blink::mojom::PermissionStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PermissionStatus>(data_->status));
  }
 private:
  internal::FileSystemAccessFileHandle_GetPermissionStatus_ResponseParams_Data* data_ = nullptr;
};



class FileSystemAccessFileHandle_RequestPermission_ParamsDataView {
 public:
  FileSystemAccessFileHandle_RequestPermission_ParamsDataView() = default;

  FileSystemAccessFileHandle_RequestPermission_ParamsDataView(
      internal::FileSystemAccessFileHandle_RequestPermission_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool writable() const {
    return data_->writable;
  }
 private:
  internal::FileSystemAccessFileHandle_RequestPermission_Params_Data* data_ = nullptr;
};



class FileSystemAccessFileHandle_RequestPermission_ResponseParamsDataView {
 public:
  FileSystemAccessFileHandle_RequestPermission_ResponseParamsDataView() = default;

  FileSystemAccessFileHandle_RequestPermission_ResponseParamsDataView(
      internal::FileSystemAccessFileHandle_RequestPermission_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::PermissionStatus>(
        data_value, output);
  }
  ::blink::mojom::PermissionStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PermissionStatus>(data_->status));
  }
 private:
  internal::FileSystemAccessFileHandle_RequestPermission_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessFileHandle_AsBlob_ParamsDataView {
 public:
  FileSystemAccessFileHandle_AsBlob_ParamsDataView() = default;

  FileSystemAccessFileHandle_AsBlob_ParamsDataView(
      internal::FileSystemAccessFileHandle_AsBlob_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FileSystemAccessFileHandle_AsBlob_Params_Data* data_ = nullptr;
};



class FileSystemAccessFileHandle_AsBlob_ResponseParamsDataView {
 public:
  FileSystemAccessFileHandle_AsBlob_ResponseParamsDataView() = default;

  FileSystemAccessFileHandle_AsBlob_ResponseParamsDataView(
      internal::FileSystemAccessFileHandle_AsBlob_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  inline void GetInfoDataView(
      ::mojo_base::mojom::FileInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInfo(UserType* output) {
    
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileInfoDataView>(
        pointer, output, message_);
  }
  inline void GetBlobDataView(
      ::blink::mojom::SerializedBlobDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBlob(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::SerializedBlobDataView, UserType>(),
    "Attempting to read the optional `blob` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadBlob` instead "
    "of `ReadBlob if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->blob.Get();
    return mojo::internal::Deserialize<::blink::mojom::SerializedBlobDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessFileHandle_AsBlob_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessFileHandle_CreateFileWriter_ParamsDataView {
 public:
  FileSystemAccessFileHandle_CreateFileWriter_ParamsDataView() = default;

  FileSystemAccessFileHandle_CreateFileWriter_ParamsDataView(
      internal::FileSystemAccessFileHandle_CreateFileWriter_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool keep_existing_data() const {
    return data_->keep_existing_data;
  }
  bool auto_close() const {
    return data_->auto_close;
  }
 private:
  internal::FileSystemAccessFileHandle_CreateFileWriter_Params_Data* data_ = nullptr;
};



class FileSystemAccessFileHandle_CreateFileWriter_ResponseParamsDataView {
 public:
  FileSystemAccessFileHandle_CreateFileWriter_ResponseParamsDataView() = default;

  FileSystemAccessFileHandle_CreateFileWriter_ResponseParamsDataView(
      internal::FileSystemAccessFileHandle_CreateFileWriter_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeWriter() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessFileWriterInterfaceBase>>(
            &data_->writer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessFileHandle_CreateFileWriter_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessFileHandle_Rename_ParamsDataView {
 public:
  FileSystemAccessFileHandle_Rename_ParamsDataView() = default;

  FileSystemAccessFileHandle_Rename_ParamsDataView(
      internal::FileSystemAccessFileHandle_Rename_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNewEntryNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewEntryName(UserType* output) {
    
    auto* pointer = data_->new_entry_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessFileHandle_Rename_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessFileHandle_Rename_ResponseParamsDataView {
 public:
  FileSystemAccessFileHandle_Rename_ResponseParamsDataView() = default;

  FileSystemAccessFileHandle_Rename_ResponseParamsDataView(
      internal::FileSystemAccessFileHandle_Rename_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessFileHandle_Rename_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessFileHandle_Move_ParamsDataView {
 public:
  FileSystemAccessFileHandle_Move_ParamsDataView() = default;

  FileSystemAccessFileHandle_Move_ParamsDataView(
      internal::FileSystemAccessFileHandle_Move_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeDestinationDirectory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
            &data_->destination_directory, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetNewEntryNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewEntryName(UserType* output) {
    
    auto* pointer = data_->new_entry_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessFileHandle_Move_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessFileHandle_Move_ResponseParamsDataView {
 public:
  FileSystemAccessFileHandle_Move_ResponseParamsDataView() = default;

  FileSystemAccessFileHandle_Move_ResponseParamsDataView(
      internal::FileSystemAccessFileHandle_Move_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessFileHandle_Move_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessFileHandle_Remove_ParamsDataView {
 public:
  FileSystemAccessFileHandle_Remove_ParamsDataView() = default;

  FileSystemAccessFileHandle_Remove_ParamsDataView(
      internal::FileSystemAccessFileHandle_Remove_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FileSystemAccessFileHandle_Remove_Params_Data* data_ = nullptr;
};



class FileSystemAccessFileHandle_Remove_ResponseParamsDataView {
 public:
  FileSystemAccessFileHandle_Remove_ResponseParamsDataView() = default;

  FileSystemAccessFileHandle_Remove_ResponseParamsDataView(
      internal::FileSystemAccessFileHandle_Remove_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessFileHandle_Remove_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessFileHandle_OpenAccessHandle_ParamsDataView {
 public:
  FileSystemAccessFileHandle_OpenAccessHandle_ParamsDataView() = default;

  FileSystemAccessFileHandle_OpenAccessHandle_ParamsDataView(
      internal::FileSystemAccessFileHandle_OpenAccessHandle_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FileSystemAccessFileHandle_OpenAccessHandle_Params_Data* data_ = nullptr;
};



class FileSystemAccessFileHandle_OpenAccessHandle_ResponseParamsDataView {
 public:
  FileSystemAccessFileHandle_OpenAccessHandle_ResponseParamsDataView() = default;

  FileSystemAccessFileHandle_OpenAccessHandle_ResponseParamsDataView(
      internal::FileSystemAccessFileHandle_OpenAccessHandle_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  inline void GetFileDataView(
      FileSystemAccessAccessHandleFileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFile(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::FileSystemAccessAccessHandleFileDataView, UserType>(),
    "Attempting to read the optional `file` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFile` instead "
    "of `ReadFile if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->file.is_null() ? &data_->file : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessAccessHandleFileDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeAccessHandleHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessAccessHandleHostInterfaceBase>>(
            &data_->access_handle_host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessFileHandle_OpenAccessHandle_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessFileHandle_IsSameEntry_ParamsDataView {
 public:
  FileSystemAccessFileHandle_IsSameEntry_ParamsDataView() = default;

  FileSystemAccessFileHandle_IsSameEntry_ParamsDataView(
      internal::FileSystemAccessFileHandle_IsSameEntry_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeOther() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
            &data_->other, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessFileHandle_IsSameEntry_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessFileHandle_IsSameEntry_ResponseParamsDataView {
 public:
  FileSystemAccessFileHandle_IsSameEntry_ResponseParamsDataView() = default;

  FileSystemAccessFileHandle_IsSameEntry_ResponseParamsDataView(
      internal::FileSystemAccessFileHandle_IsSameEntry_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  bool is_same() const {
    return data_->is_same;
  }
 private:
  internal::FileSystemAccessFileHandle_IsSameEntry_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessFileHandle_Transfer_ParamsDataView {
 public:
  FileSystemAccessFileHandle_Transfer_ParamsDataView() = default;

  FileSystemAccessFileHandle_Transfer_ParamsDataView(
      internal::FileSystemAccessFileHandle_Transfer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
            &data_->token, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessFileHandle_Transfer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};








inline void FileSystemAccessFileHandle_RequestPermission_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}




inline void FileSystemAccessFileHandle_AsBlob_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}
inline void FileSystemAccessFileHandle_AsBlob_ResponseParamsDataView::GetInfoDataView(
    ::mojo_base::mojom::FileInfoDataView* output) {
  auto pointer = data_->info.Get();
  *output = ::mojo_base::mojom::FileInfoDataView(pointer, message_);
}
inline void FileSystemAccessFileHandle_AsBlob_ResponseParamsDataView::GetBlobDataView(
    ::blink::mojom::SerializedBlobDataView* output) {
  auto pointer = data_->blob.Get();
  *output = ::blink::mojom::SerializedBlobDataView(pointer, message_);
}




inline void FileSystemAccessFileHandle_CreateFileWriter_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}


inline void FileSystemAccessFileHandle_Rename_ParamsDataView::GetNewEntryNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->new_entry_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void FileSystemAccessFileHandle_Rename_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}


inline void FileSystemAccessFileHandle_Move_ParamsDataView::GetNewEntryNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->new_entry_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void FileSystemAccessFileHandle_Move_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}




inline void FileSystemAccessFileHandle_Remove_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}




inline void FileSystemAccessFileHandle_OpenAccessHandle_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}
inline void FileSystemAccessFileHandle_OpenAccessHandle_ResponseParamsDataView::GetFileDataView(
    FileSystemAccessAccessHandleFileDataView* output) {
  auto pointer = &data_->file;
  *output = FileSystemAccessAccessHandleFileDataView(pointer, message_);
}




inline void FileSystemAccessFileHandle_IsSameEntry_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_FILE_HANDLE_MOJOM_PARAMS_DATA_H_