// third_party/blink/public/mojom/file_system_access/file_system_access_file_handle.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_FILE_HANDLE_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_FILE_HANDLE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/file_system_access/file_system_access_file_handle.mojom-shared-internal.h"
#include "mojo/public/mojom/base/file_info.mojom-shared.h"
#include "mojo/public/mojom/base/file.mojom-shared.h"
#include "third_party/blink/public/mojom/blob/blob.mojom-shared.h"
#include "third_party/blink/public/mojom/blob/serialized_blob.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_access_handle_host.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_error.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_file_delegate_host.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_file_writer.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_capacity_allocation_host.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_transfer_token.mojom-shared.h"
#include "third_party/blink/public/mojom/permissions/permission_status.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class FileSystemAccessRegularFileDataView;

class FileSystemAccessAccessHandleFileDataView;


}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::FileSystemAccessRegularFileDataView> {
  using Data = ::blink::mojom::internal::FileSystemAccessRegularFile_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::FileSystemAccessAccessHandleFileDataView> {
  using Data = ::blink::mojom::internal::FileSystemAccessAccessHandleFile_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {
// Interface base classes. They are used for type safety check.
class FileSystemAccessFileHandleInterfaceBase {};

using FileSystemAccessFileHandlePtrDataView =
    mojo::InterfacePtrDataView<FileSystemAccessFileHandleInterfaceBase>;
using FileSystemAccessFileHandleRequestDataView =
    mojo::InterfaceRequestDataView<FileSystemAccessFileHandleInterfaceBase>;
using FileSystemAccessFileHandleAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<FileSystemAccessFileHandleInterfaceBase>;
using FileSystemAccessFileHandleAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<FileSystemAccessFileHandleInterfaceBase>;


class FileSystemAccessRegularFileDataView {
 public:
  FileSystemAccessRegularFileDataView() = default;

  FileSystemAccessRegularFileDataView(
      internal::FileSystemAccessRegularFile_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOsFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOsFile(UserType* output) {
    
    auto* pointer = data_->os_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, message_);
  }
  int64_t file_size() const {
    return data_->file_size;
  }
  template <typename UserType>
  UserType TakeCapacityAllocationHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessCapacityAllocationHostInterfaceBase>>(
            &data_->capacity_allocation_host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessRegularFile_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessAccessHandleFileDataView {
 public:
  using Tag = internal::FileSystemAccessAccessHandleFile_Data::FileSystemAccessAccessHandleFile_Tag;

  FileSystemAccessAccessHandleFileDataView() = default;

  FileSystemAccessAccessHandleFileDataView(
      internal::FileSystemAccessAccessHandleFile_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_regular_file() const { return data_->tag == Tag::kRegularFile; }
  inline void GetRegularFileDataView(
      FileSystemAccessRegularFileDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadRegularFile(UserType* output) const {
    
    CHECK(is_regular_file());
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessRegularFileDataView>(
        data_->data.f_regular_file.Get(), output, message_);
  }
  bool is_incognito_file_delegate() const { return data_->tag == Tag::kIncognitoFileDelegate; }
  template <typename UserType>
  UserType TakeIncognitoFileDelegate() {
    CHECK(is_incognito_file_delegate());
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessFileDelegateHostInterfaceBase>>(
            &data_->data.f_incognito_file_delegate, &result, message_);
    CHECK(ret);
    return result;
  }

 private:
  internal::FileSystemAccessAccessHandleFile_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FileSystemAccessRegularFileDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::FileSystemAccessRegularFileDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::FileSystemAccessRegularFile_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::os_file(input)) in_os_file = Traits::os_file(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->os_file)::BaseType> os_file_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::FileDataView>(
        in_os_file, os_file_fragment);
    fragment->os_file.Set(
        os_file_fragment.is_null() ? nullptr : os_file_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->os_file.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null os_file in FileSystemAccessRegularFile struct");
    fragment->file_size = Traits::file_size(input);
    decltype(Traits::capacity_allocation_host(input)) in_capacity_allocation_host = Traits::capacity_allocation_host(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessCapacityAllocationHostInterfaceBase>>(
        in_capacity_allocation_host, &fragment->capacity_allocation_host, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->capacity_allocation_host),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid capacity_allocation_host in FileSystemAccessRegularFile struct");
  }

  static bool Deserialize(::blink::mojom::internal::FileSystemAccessRegularFile_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::FileSystemAccessRegularFileDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FileSystemAccessAccessHandleFileDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::blink::mojom::FileSystemAccessAccessHandleFileDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::blink::mojom::internal::FileSystemAccessAccessHandleFile_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::blink::mojom::FileSystemAccessAccessHandleFileDataView::Tag::kRegularFile: {
        decltype(Traits::regular_file(input))
            in_regular_file = Traits::regular_file(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_regular_file)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::blink::mojom::FileSystemAccessRegularFileDataView>(
            in_regular_file, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null regular_file in FileSystemAccessAccessHandleFile union");
        fragment->data.f_regular_file.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::blink::mojom::FileSystemAccessAccessHandleFileDataView::Tag::kIncognitoFileDelegate: {
        decltype(Traits::incognito_file_delegate(input))
            in_incognito_file_delegate = Traits::incognito_file_delegate(input);
        mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessFileDelegateHostInterfaceBase>>(
            in_incognito_file_delegate, &fragment->data.f_incognito_file_delegate, &fragment.message());
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            !mojo::internal::IsHandleOrInterfaceValid(fragment->data.f_incognito_file_delegate),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
            "invalid incognito_file_delegate in FileSystemAccessAccessHandleFile union");
        break;
      }
    }
  }

  static bool Deserialize(::blink::mojom::internal::FileSystemAccessAccessHandleFile_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::FileSystemAccessAccessHandleFileDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void FileSystemAccessRegularFileDataView::GetOsFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->os_file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, message_);
}


inline void FileSystemAccessAccessHandleFileDataView::GetRegularFileDataView(
    FileSystemAccessRegularFileDataView* output) const {
  CHECK(is_regular_file());
  *output = FileSystemAccessRegularFileDataView(data_->data.f_regular_file.Get(), message_);
}


}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_FILE_HANDLE_MOJOM_SHARED_H_