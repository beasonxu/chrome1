// third_party/blink/public/mojom/file_system_access/file_system_access_manager.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_MANAGER_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_MANAGER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/file_system_access/file_system_access_manager.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_directory_handle.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_file_handle.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_error.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_transfer_token.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_data_transfer_token.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class ChooseFileSystemEntryAcceptsOptionDataView;

class AcceptsTypesInfoDataView;

class OpenFilePickerOptionsDataView;

class SaveFilePickerOptionsDataView;

class DirectoryPickerOptionsDataView;

class CommonFilePickerOptionsDataView;

class FilePickerOptionsDataView;


}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::ChooseFileSystemEntryAcceptsOptionDataView> {
  using Data = ::blink::mojom::internal::ChooseFileSystemEntryAcceptsOption_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::AcceptsTypesInfoDataView> {
  using Data = ::blink::mojom::internal::AcceptsTypesInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::OpenFilePickerOptionsDataView> {
  using Data = ::blink::mojom::internal::OpenFilePickerOptions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::SaveFilePickerOptionsDataView> {
  using Data = ::blink::mojom::internal::SaveFilePickerOptions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::DirectoryPickerOptionsDataView> {
  using Data = ::blink::mojom::internal::DirectoryPickerOptions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::CommonFilePickerOptionsDataView> {
  using Data = ::blink::mojom::internal::CommonFilePickerOptions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::FilePickerOptionsDataView> {
  using Data = ::blink::mojom::internal::FilePickerOptions_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class WellKnownDirectory : int32_t {
  
  kDefault = 0,
  
  kDirDesktop = 1,
  
  kDirDocuments = 2,
  
  kDirDownloads = 3,
  
  kDirMusic = 4,
  
  kDirPictures = 5,
  
  kDirVideos = 6,
  kMinValue = 0,
  kMaxValue = 6,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, WellKnownDirectory value);
inline bool IsKnownEnumValue(WellKnownDirectory value) {
  return internal::WellKnownDirectory_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class FileSystemAccessManagerInterfaceBase {};

using FileSystemAccessManagerPtrDataView =
    mojo::InterfacePtrDataView<FileSystemAccessManagerInterfaceBase>;
using FileSystemAccessManagerRequestDataView =
    mojo::InterfaceRequestDataView<FileSystemAccessManagerInterfaceBase>;
using FileSystemAccessManagerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<FileSystemAccessManagerInterfaceBase>;
using FileSystemAccessManagerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<FileSystemAccessManagerInterfaceBase>;


class ChooseFileSystemEntryAcceptsOptionDataView {
 public:
  ChooseFileSystemEntryAcceptsOptionDataView() = default;

  ChooseFileSystemEntryAcceptsOptionDataView(
      internal::ChooseFileSystemEntryAcceptsOption_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDescriptionDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDescription(UserType* output) {
    
    auto* pointer = data_->description.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetMimeTypesDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMimeTypes(UserType* output) {
    
    auto* pointer = data_->mime_types.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
  inline void GetExtensionsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadExtensions(UserType* output) {
    
    auto* pointer = data_->extensions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ChooseFileSystemEntryAcceptsOption_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AcceptsTypesInfoDataView {
 public:
  AcceptsTypesInfoDataView() = default;

  AcceptsTypesInfoDataView(
      internal::AcceptsTypesInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAcceptsDataView(
      mojo::ArrayDataView<ChooseFileSystemEntryAcceptsOptionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAccepts(UserType* output) {
    
    auto* pointer = data_->accepts.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::ChooseFileSystemEntryAcceptsOptionDataView>>(
        pointer, output, message_);
  }
  bool include_accepts_all() const {
    return data_->include_accepts_all;
  }
 private:
  internal::AcceptsTypesInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class OpenFilePickerOptionsDataView {
 public:
  OpenFilePickerOptionsDataView() = default;

  OpenFilePickerOptionsDataView(
      internal::OpenFilePickerOptions_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAcceptsTypesInfoDataView(
      AcceptsTypesInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAcceptsTypesInfo(UserType* output) {
    
    auto* pointer = data_->accepts_types_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::AcceptsTypesInfoDataView>(
        pointer, output, message_);
  }
  bool can_select_multiple_files() const {
    return data_->can_select_multiple_files;
  }
 private:
  internal::OpenFilePickerOptions_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SaveFilePickerOptionsDataView {
 public:
  SaveFilePickerOptionsDataView() = default;

  SaveFilePickerOptionsDataView(
      internal::SaveFilePickerOptions_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAcceptsTypesInfoDataView(
      AcceptsTypesInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAcceptsTypesInfo(UserType* output) {
    
    auto* pointer = data_->accepts_types_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::AcceptsTypesInfoDataView>(
        pointer, output, message_);
  }
  inline void GetSuggestedNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSuggestedName(UserType* output) {
    
    auto* pointer = data_->suggested_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::SaveFilePickerOptions_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DirectoryPickerOptionsDataView {
 public:
  DirectoryPickerOptionsDataView() = default;

  DirectoryPickerOptionsDataView(
      internal::DirectoryPickerOptions_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool request_writable() const {
    return data_->request_writable;
  }
 private:
  internal::DirectoryPickerOptions_Data* data_ = nullptr;
};



class CommonFilePickerOptionsDataView {
 public:
  CommonFilePickerOptionsDataView() = default;

  CommonFilePickerOptionsDataView(
      internal::CommonFilePickerOptions_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStartingDirectoryIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStartingDirectoryId(UserType* output) {
    
    auto* pointer = data_->starting_directory_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadWellKnownStartingDirectory(UserType* output) const {
    auto data_value = data_->well_known_starting_directory;
    return mojo::internal::Deserialize<::blink::mojom::WellKnownDirectory>(
        data_value, output);
  }
  WellKnownDirectory well_known_starting_directory() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::WellKnownDirectory>(data_->well_known_starting_directory));
  }
  template <typename UserType>
  UserType TakeStartingDirectoryToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
            &data_->starting_directory_token, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CommonFilePickerOptions_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FilePickerOptionsDataView {
 public:
  using Tag = internal::FilePickerOptions_Data::FilePickerOptions_Tag;

  FilePickerOptionsDataView() = default;

  FilePickerOptionsDataView(
      internal::FilePickerOptions_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_open_file_picker_options() const { return data_->tag == Tag::kOpenFilePickerOptions; }
  inline void GetOpenFilePickerOptionsDataView(
      OpenFilePickerOptionsDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadOpenFilePickerOptions(UserType* output) const {
    
    CHECK(is_open_file_picker_options());
    return mojo::internal::Deserialize<::blink::mojom::OpenFilePickerOptionsDataView>(
        data_->data.f_open_file_picker_options.Get(), output, message_);
  }
  bool is_save_file_picker_options() const { return data_->tag == Tag::kSaveFilePickerOptions; }
  inline void GetSaveFilePickerOptionsDataView(
      SaveFilePickerOptionsDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadSaveFilePickerOptions(UserType* output) const {
    
    CHECK(is_save_file_picker_options());
    return mojo::internal::Deserialize<::blink::mojom::SaveFilePickerOptionsDataView>(
        data_->data.f_save_file_picker_options.Get(), output, message_);
  }
  bool is_directory_picker_options() const { return data_->tag == Tag::kDirectoryPickerOptions; }
  inline void GetDirectoryPickerOptionsDataView(
      DirectoryPickerOptionsDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadDirectoryPickerOptions(UserType* output) const {
    
    CHECK(is_directory_picker_options());
    return mojo::internal::Deserialize<::blink::mojom::DirectoryPickerOptionsDataView>(
        data_->data.f_directory_picker_options.Get(), output, message_);
  }

 private:
  internal::FilePickerOptions_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::WellKnownDirectory>
    : public mojo::internal::EnumHashImpl<::blink::mojom::WellKnownDirectory> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::WellKnownDirectory, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::WellKnownDirectory, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::WellKnownDirectory>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ChooseFileSystemEntryAcceptsOptionDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::ChooseFileSystemEntryAcceptsOptionDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::ChooseFileSystemEntryAcceptsOption_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::description(input)) in_description = Traits::description(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->description)::BaseType> description_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_description, description_fragment);
    fragment->description.Set(
        description_fragment.is_null() ? nullptr : description_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->description.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null description in ChooseFileSystemEntryAcceptsOption struct");
    decltype(Traits::mime_types(input)) in_mime_types = Traits::mime_types(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->mime_types)::BaseType>
        mime_types_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams mime_types_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_mime_types, mime_types_fragment, &mime_types_validate_params);
    fragment->mime_types.Set(
        mime_types_fragment.is_null() ? nullptr : mime_types_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->mime_types.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null mime_types in ChooseFileSystemEntryAcceptsOption struct");
    decltype(Traits::extensions(input)) in_extensions = Traits::extensions(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->extensions)::BaseType>
        extensions_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams extensions_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_extensions, extensions_fragment, &extensions_validate_params);
    fragment->extensions.Set(
        extensions_fragment.is_null() ? nullptr : extensions_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->extensions.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null extensions in ChooseFileSystemEntryAcceptsOption struct");
  }

  static bool Deserialize(::blink::mojom::internal::ChooseFileSystemEntryAcceptsOption_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::ChooseFileSystemEntryAcceptsOptionDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AcceptsTypesInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::AcceptsTypesInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::AcceptsTypesInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::accepts(input)) in_accepts = Traits::accepts(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->accepts)::BaseType>
        accepts_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams accepts_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::ChooseFileSystemEntryAcceptsOptionDataView>>(
        in_accepts, accepts_fragment, &accepts_validate_params);
    fragment->accepts.Set(
        accepts_fragment.is_null() ? nullptr : accepts_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->accepts.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null accepts in AcceptsTypesInfo struct");
    fragment->include_accepts_all = Traits::include_accepts_all(input);
  }

  static bool Deserialize(::blink::mojom::internal::AcceptsTypesInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::AcceptsTypesInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::OpenFilePickerOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::OpenFilePickerOptionsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::OpenFilePickerOptions_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::accepts_types_info(input)) in_accepts_types_info = Traits::accepts_types_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->accepts_types_info)::BaseType> accepts_types_info_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::AcceptsTypesInfoDataView>(
        in_accepts_types_info, accepts_types_info_fragment);
    fragment->accepts_types_info.Set(
        accepts_types_info_fragment.is_null() ? nullptr : accepts_types_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->accepts_types_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null accepts_types_info in OpenFilePickerOptions struct");
    fragment->can_select_multiple_files = Traits::can_select_multiple_files(input);
  }

  static bool Deserialize(::blink::mojom::internal::OpenFilePickerOptions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::OpenFilePickerOptionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::SaveFilePickerOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::SaveFilePickerOptionsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::SaveFilePickerOptions_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::accepts_types_info(input)) in_accepts_types_info = Traits::accepts_types_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->accepts_types_info)::BaseType> accepts_types_info_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::AcceptsTypesInfoDataView>(
        in_accepts_types_info, accepts_types_info_fragment);
    fragment->accepts_types_info.Set(
        accepts_types_info_fragment.is_null() ? nullptr : accepts_types_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->accepts_types_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null accepts_types_info in SaveFilePickerOptions struct");
    decltype(Traits::suggested_name(input)) in_suggested_name = Traits::suggested_name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->suggested_name)::BaseType> suggested_name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_suggested_name, suggested_name_fragment);
    fragment->suggested_name.Set(
        suggested_name_fragment.is_null() ? nullptr : suggested_name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->suggested_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null suggested_name in SaveFilePickerOptions struct");
  }

  static bool Deserialize(::blink::mojom::internal::SaveFilePickerOptions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::SaveFilePickerOptionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::DirectoryPickerOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::DirectoryPickerOptionsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::DirectoryPickerOptions_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->request_writable = Traits::request_writable(input);
  }

  static bool Deserialize(::blink::mojom::internal::DirectoryPickerOptions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::DirectoryPickerOptionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::CommonFilePickerOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::CommonFilePickerOptionsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::CommonFilePickerOptions_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::starting_directory_id(input)) in_starting_directory_id = Traits::starting_directory_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->starting_directory_id)::BaseType> starting_directory_id_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_starting_directory_id, starting_directory_id_fragment);
    fragment->starting_directory_id.Set(
        starting_directory_id_fragment.is_null() ? nullptr : starting_directory_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->starting_directory_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null starting_directory_id in CommonFilePickerOptions struct");
    mojo::internal::Serialize<::blink::mojom::WellKnownDirectory>(
        Traits::well_known_starting_directory(input), &fragment->well_known_starting_directory);
    decltype(Traits::starting_directory_token(input)) in_starting_directory_token = Traits::starting_directory_token(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
        in_starting_directory_token, &fragment->starting_directory_token, &fragment.message());
  }

  static bool Deserialize(::blink::mojom::internal::CommonFilePickerOptions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::CommonFilePickerOptionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FilePickerOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::blink::mojom::FilePickerOptionsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::blink::mojom::internal::FilePickerOptions_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::blink::mojom::FilePickerOptionsDataView::Tag::kOpenFilePickerOptions: {
        decltype(Traits::open_file_picker_options(input))
            in_open_file_picker_options = Traits::open_file_picker_options(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_open_file_picker_options)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::blink::mojom::OpenFilePickerOptionsDataView>(
            in_open_file_picker_options, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null open_file_picker_options in FilePickerOptions union");
        fragment->data.f_open_file_picker_options.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::blink::mojom::FilePickerOptionsDataView::Tag::kSaveFilePickerOptions: {
        decltype(Traits::save_file_picker_options(input))
            in_save_file_picker_options = Traits::save_file_picker_options(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_save_file_picker_options)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::blink::mojom::SaveFilePickerOptionsDataView>(
            in_save_file_picker_options, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null save_file_picker_options in FilePickerOptions union");
        fragment->data.f_save_file_picker_options.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::blink::mojom::FilePickerOptionsDataView::Tag::kDirectoryPickerOptions: {
        decltype(Traits::directory_picker_options(input))
            in_directory_picker_options = Traits::directory_picker_options(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_directory_picker_options)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::blink::mojom::DirectoryPickerOptionsDataView>(
            in_directory_picker_options, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null directory_picker_options in FilePickerOptions union");
        fragment->data.f_directory_picker_options.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
    }
  }

  static bool Deserialize(::blink::mojom::internal::FilePickerOptions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::FilePickerOptionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void ChooseFileSystemEntryAcceptsOptionDataView::GetDescriptionDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->description.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void ChooseFileSystemEntryAcceptsOptionDataView::GetMimeTypesDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->mime_types.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}
inline void ChooseFileSystemEntryAcceptsOptionDataView::GetExtensionsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->extensions.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}


inline void AcceptsTypesInfoDataView::GetAcceptsDataView(
    mojo::ArrayDataView<ChooseFileSystemEntryAcceptsOptionDataView>* output) {
  auto pointer = data_->accepts.Get();
  *output = mojo::ArrayDataView<ChooseFileSystemEntryAcceptsOptionDataView>(pointer, message_);
}


inline void OpenFilePickerOptionsDataView::GetAcceptsTypesInfoDataView(
    AcceptsTypesInfoDataView* output) {
  auto pointer = data_->accepts_types_info.Get();
  *output = AcceptsTypesInfoDataView(pointer, message_);
}


inline void SaveFilePickerOptionsDataView::GetAcceptsTypesInfoDataView(
    AcceptsTypesInfoDataView* output) {
  auto pointer = data_->accepts_types_info.Get();
  *output = AcceptsTypesInfoDataView(pointer, message_);
}
inline void SaveFilePickerOptionsDataView::GetSuggestedNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->suggested_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void CommonFilePickerOptionsDataView::GetStartingDirectoryIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->starting_directory_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void FilePickerOptionsDataView::GetOpenFilePickerOptionsDataView(
    OpenFilePickerOptionsDataView* output) const {
  CHECK(is_open_file_picker_options());
  *output = OpenFilePickerOptionsDataView(data_->data.f_open_file_picker_options.Get(), message_);
}
inline void FilePickerOptionsDataView::GetSaveFilePickerOptionsDataView(
    SaveFilePickerOptionsDataView* output) const {
  CHECK(is_save_file_picker_options());
  *output = SaveFilePickerOptionsDataView(data_->data.f_save_file_picker_options.Get(), message_);
}
inline void FilePickerOptionsDataView::GetDirectoryPickerOptionsDataView(
    DirectoryPickerOptionsDataView* output) const {
  CHECK(is_directory_picker_options());
  *output = DirectoryPickerOptionsDataView(data_->data.f_directory_picker_options.Get(), message_);
}


}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::WellKnownDirectory> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::WellKnownDirectory value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_MANAGER_MOJOM_SHARED_H_