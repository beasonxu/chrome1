// third_party/blink/public/mojom/file_system_access/file_system_access_manager.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_MANAGER_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_MANAGER_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/file_system_access/file_system_access_manager.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_manager.mojom-blink-forward.h"
#include "mojo/public/mojom/base/string16.mojom-blink.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_directory_handle.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_file_handle.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_error.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_transfer_token.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_data_transfer_token.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace WTF {
struct blink_mojom_internal_WellKnownDirectory_DataHashFn {
  static unsigned GetHash(const ::blink::mojom::WellKnownDirectory& value) {
    using utype = std::underlying_type<::blink::mojom::WellKnownDirectory>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::blink::mojom::WellKnownDirectory& left, const ::blink::mojom::WellKnownDirectory& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::blink::mojom::WellKnownDirectory>
    : public GenericHashTraits<::blink::mojom::WellKnownDirectory> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::blink::mojom::WellKnownDirectory EmptyValue() { return static_cast<::blink::mojom::WellKnownDirectory>(-1000000); }
  static void ConstructDeletedValue(::blink::mojom::WellKnownDirectory& slot, bool) {
    slot = static_cast<::blink::mojom::WellKnownDirectory>(-1000001);
  }
  static bool IsDeletedValue(const ::blink::mojom::WellKnownDirectory& value) {
    return value == static_cast<::blink::mojom::WellKnownDirectory>(-1000001);
  }
};
}  // namespace WTF


namespace blink {
namespace mojom {
namespace blink {

class FileSystemAccessManagerProxy;

template <typename ImplRefTraits>
class FileSystemAccessManagerStub;

class FileSystemAccessManagerRequestValidator;
class FileSystemAccessManagerResponseValidator;


class PLATFORM_EXPORT FileSystemAccessManager
    : public FileSystemAccessManagerInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = FileSystemAccessManagerInterfaceBase;
  using Proxy_ = FileSystemAccessManagerProxy;

  template <typename ImplRefTraits>
  using Stub_ = FileSystemAccessManagerStub<ImplRefTraits>;

  using RequestValidator_ = FileSystemAccessManagerRequestValidator;
  using ResponseValidator_ = FileSystemAccessManagerResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetSandboxedFileSystemMinVersion = 0,
    kChooseEntriesMinVersion = 0,
    kGetFileHandleFromTokenMinVersion = 0,
    kGetDirectoryHandleFromTokenMinVersion = 0,
    kGetEntryFromDataTransferTokenMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GetSandboxedFileSystem_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ChooseEntries_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetFileHandleFromToken_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetDirectoryHandleFromToken_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetEntryFromDataTransferToken_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~FileSystemAccessManager() = default;


  using GetSandboxedFileSystemCallback = base::OnceCallback<void(::blink::mojom::blink::FileSystemAccessErrorPtr, ::mojo::PendingRemote<::blink::mojom::blink::FileSystemAccessDirectoryHandle>)>;
  
  virtual void GetSandboxedFileSystem(GetSandboxedFileSystemCallback callback) = 0;


  using ChooseEntriesCallback = base::OnceCallback<void(::blink::mojom::blink::FileSystemAccessErrorPtr, WTF::Vector<::blink::mojom::blink::FileSystemAccessEntryPtr>)>;
  
  virtual void ChooseEntries(FilePickerOptionsPtr options, CommonFilePickerOptionsPtr common_options, ChooseEntriesCallback callback) = 0;

  
  virtual void GetFileHandleFromToken(::mojo::PendingRemote<::blink::mojom::blink::FileSystemAccessTransferToken> token, ::mojo::PendingReceiver<::blink::mojom::blink::FileSystemAccessFileHandle> file_handle) = 0;

  
  virtual void GetDirectoryHandleFromToken(::mojo::PendingRemote<::blink::mojom::blink::FileSystemAccessTransferToken> token, ::mojo::PendingReceiver<::blink::mojom::blink::FileSystemAccessDirectoryHandle> directory_handle) = 0;


  using GetEntryFromDataTransferTokenCallback = base::OnceCallback<void(::blink::mojom::blink::FileSystemAccessEntryPtr)>;
  
  virtual void GetEntryFromDataTransferToken(::mojo::PendingRemote<::blink::mojom::blink::FileSystemAccessDataTransferToken> token, GetEntryFromDataTransferTokenCallback callback) = 0;
};



class PLATFORM_EXPORT FileSystemAccessManagerProxy
    : public FileSystemAccessManager {
 public:
  using InterfaceType = FileSystemAccessManager;

  explicit FileSystemAccessManagerProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetSandboxedFileSystem(GetSandboxedFileSystemCallback callback) final;
  
  void ChooseEntries(FilePickerOptionsPtr options, CommonFilePickerOptionsPtr common_options, ChooseEntriesCallback callback) final;
  
  void GetFileHandleFromToken(::mojo::PendingRemote<::blink::mojom::blink::FileSystemAccessTransferToken> token, ::mojo::PendingReceiver<::blink::mojom::blink::FileSystemAccessFileHandle> file_handle) final;
  
  void GetDirectoryHandleFromToken(::mojo::PendingRemote<::blink::mojom::blink::FileSystemAccessTransferToken> token, ::mojo::PendingReceiver<::blink::mojom::blink::FileSystemAccessDirectoryHandle> directory_handle) final;
  
  void GetEntryFromDataTransferToken(::mojo::PendingRemote<::blink::mojom::blink::FileSystemAccessDataTransferToken> token, GetEntryFromDataTransferTokenCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT FileSystemAccessManagerStubDispatch {
 public:
  static bool Accept(FileSystemAccessManager* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      FileSystemAccessManager* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<FileSystemAccessManager>>
class FileSystemAccessManagerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  FileSystemAccessManagerStub() = default;
  ~FileSystemAccessManagerStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return FileSystemAccessManagerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return FileSystemAccessManagerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT FileSystemAccessManagerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT FileSystemAccessManagerResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};









class PLATFORM_EXPORT DirectoryPickerOptions {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<DirectoryPickerOptions, T>::value>;
  using DataView = DirectoryPickerOptionsDataView;
  using Data_ = internal::DirectoryPickerOptions_Data;

  template <typename... Args>
  static DirectoryPickerOptionsPtr New(Args&&... args) {
    return DirectoryPickerOptionsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static DirectoryPickerOptionsPtr From(const U& u) {
    return mojo::TypeConverter<DirectoryPickerOptionsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, DirectoryPickerOptions>::Convert(*this);
  }


  DirectoryPickerOptions();

  explicit DirectoryPickerOptions(
      bool request_writable);


  ~DirectoryPickerOptions();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = DirectoryPickerOptionsPtr>
  DirectoryPickerOptionsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, DirectoryPickerOptions::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, DirectoryPickerOptions::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        DirectoryPickerOptions::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        DirectoryPickerOptions::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::DirectoryPickerOptions_UnserializedMessageContext<
            UserType, DirectoryPickerOptions::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<DirectoryPickerOptions::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return DirectoryPickerOptions::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::DirectoryPickerOptions_UnserializedMessageContext<
            UserType, DirectoryPickerOptions::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<DirectoryPickerOptions::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  bool request_writable;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, DirectoryPickerOptions::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, DirectoryPickerOptions::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, DirectoryPickerOptions::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, DirectoryPickerOptions::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class PLATFORM_EXPORT FilePickerOptions {
 public:
  using DataView = FilePickerOptionsDataView;
  using Data_ = internal::FilePickerOptions_Data;
  using Tag = Data_::FilePickerOptions_Tag;

  template <typename... Args>
  static FilePickerOptionsPtr New(Args&&... args) {
    static_assert(
        sizeof...(args) < 0,
        "Do not use Union::New(); to create a union of a given subtype, use "
        "New<SubType>(), not New() followed by set_<sub_type>(). To represent "
        "an empty union, mark the field or parameter as nullable in the mojom "
        "definition.");
  }
  // Construct an instance holding |open_file_picker_options|.
  static FilePickerOptionsPtr
  NewOpenFilePickerOptions(
      OpenFilePickerOptionsPtr open_file_picker_options) {
    auto result = FilePickerOptionsPtr(absl::in_place);
    result->set_open_file_picker_options(std::move(open_file_picker_options));
    return result;
  }
  // Construct an instance holding |save_file_picker_options|.
  static FilePickerOptionsPtr
  NewSaveFilePickerOptions(
      SaveFilePickerOptionsPtr save_file_picker_options) {
    auto result = FilePickerOptionsPtr(absl::in_place);
    result->set_save_file_picker_options(std::move(save_file_picker_options));
    return result;
  }
  // Construct an instance holding |directory_picker_options|.
  static FilePickerOptionsPtr
  NewDirectoryPickerOptions(
      DirectoryPickerOptionsPtr directory_picker_options) {
    auto result = FilePickerOptionsPtr(absl::in_place);
    result->set_directory_picker_options(std::move(directory_picker_options));
    return result;
  }

  template <typename U>
  static FilePickerOptionsPtr From(const U& u) {
    return mojo::TypeConverter<FilePickerOptionsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FilePickerOptions>::Convert(*this);
  }

  FilePickerOptions();
  ~FilePickerOptions();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = FilePickerOptionsPtr>
  FilePickerOptionsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, FilePickerOptions>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, FilePickerOptions>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
  bool is_open_file_picker_options() const { return tag_ == Tag::kOpenFilePickerOptions; }

  
  OpenFilePickerOptionsPtr& get_open_file_picker_options() const {
    CHECK(tag_ == Tag::kOpenFilePickerOptions);
    return *(data_.open_file_picker_options);
  }

  
  void set_open_file_picker_options(
      OpenFilePickerOptionsPtr open_file_picker_options);
  
  bool is_save_file_picker_options() const { return tag_ == Tag::kSaveFilePickerOptions; }

  
  SaveFilePickerOptionsPtr& get_save_file_picker_options() const {
    CHECK(tag_ == Tag::kSaveFilePickerOptions);
    return *(data_.save_file_picker_options);
  }

  
  void set_save_file_picker_options(
      SaveFilePickerOptionsPtr save_file_picker_options);
  
  bool is_directory_picker_options() const { return tag_ == Tag::kDirectoryPickerOptions; }

  
  DirectoryPickerOptionsPtr& get_directory_picker_options() const {
    CHECK(tag_ == Tag::kDirectoryPickerOptions);
    return *(data_.directory_picker_options);
  }

  
  void set_directory_picker_options(
      DirectoryPickerOptionsPtr directory_picker_options);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        FilePickerOptions::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<FilePickerOptions::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() = default;
    ~Union_() = default;
    OpenFilePickerOptionsPtr* open_file_picker_options;
    SaveFilePickerOptionsPtr* save_file_picker_options;
    DirectoryPickerOptionsPtr* directory_picker_options;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





class PLATFORM_EXPORT ChooseFileSystemEntryAcceptsOption {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ChooseFileSystemEntryAcceptsOption, T>::value>;
  using DataView = ChooseFileSystemEntryAcceptsOptionDataView;
  using Data_ = internal::ChooseFileSystemEntryAcceptsOption_Data;

  template <typename... Args>
  static ChooseFileSystemEntryAcceptsOptionPtr New(Args&&... args) {
    return ChooseFileSystemEntryAcceptsOptionPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ChooseFileSystemEntryAcceptsOptionPtr From(const U& u) {
    return mojo::TypeConverter<ChooseFileSystemEntryAcceptsOptionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ChooseFileSystemEntryAcceptsOption>::Convert(*this);
  }


  ChooseFileSystemEntryAcceptsOption();

  ChooseFileSystemEntryAcceptsOption(
      const ::WTF::String& description,
      WTF::Vector<WTF::String> mime_types,
      WTF::Vector<WTF::String> extensions);


  ~ChooseFileSystemEntryAcceptsOption();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ChooseFileSystemEntryAcceptsOptionPtr>
  ChooseFileSystemEntryAcceptsOptionPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ChooseFileSystemEntryAcceptsOption::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ChooseFileSystemEntryAcceptsOption::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ChooseFileSystemEntryAcceptsOption::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ChooseFileSystemEntryAcceptsOption::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ChooseFileSystemEntryAcceptsOption_UnserializedMessageContext<
            UserType, ChooseFileSystemEntryAcceptsOption::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ChooseFileSystemEntryAcceptsOption::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return ChooseFileSystemEntryAcceptsOption::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ChooseFileSystemEntryAcceptsOption_UnserializedMessageContext<
            UserType, ChooseFileSystemEntryAcceptsOption::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ChooseFileSystemEntryAcceptsOption::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::WTF::String description;
  
  WTF::Vector<WTF::String> mime_types;
  
  WTF::Vector<WTF::String> extensions;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ChooseFileSystemEntryAcceptsOption::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ChooseFileSystemEntryAcceptsOption::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ChooseFileSystemEntryAcceptsOption::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ChooseFileSystemEntryAcceptsOption::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class PLATFORM_EXPORT AcceptsTypesInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AcceptsTypesInfo, T>::value>;
  using DataView = AcceptsTypesInfoDataView;
  using Data_ = internal::AcceptsTypesInfo_Data;

  template <typename... Args>
  static AcceptsTypesInfoPtr New(Args&&... args) {
    return AcceptsTypesInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AcceptsTypesInfoPtr From(const U& u) {
    return mojo::TypeConverter<AcceptsTypesInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AcceptsTypesInfo>::Convert(*this);
  }


  AcceptsTypesInfo();

  AcceptsTypesInfo(
      WTF::Vector<ChooseFileSystemEntryAcceptsOptionPtr> accepts,
      bool include_accepts_all);

AcceptsTypesInfo(const AcceptsTypesInfo&) = delete;
AcceptsTypesInfo& operator=(const AcceptsTypesInfo&) = delete;

  ~AcceptsTypesInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AcceptsTypesInfoPtr>
  AcceptsTypesInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AcceptsTypesInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AcceptsTypesInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AcceptsTypesInfo::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AcceptsTypesInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AcceptsTypesInfo_UnserializedMessageContext<
            UserType, AcceptsTypesInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AcceptsTypesInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return AcceptsTypesInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AcceptsTypesInfo_UnserializedMessageContext<
            UserType, AcceptsTypesInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AcceptsTypesInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  WTF::Vector<ChooseFileSystemEntryAcceptsOptionPtr> accepts;
  
  bool include_accepts_all;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AcceptsTypesInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AcceptsTypesInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AcceptsTypesInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AcceptsTypesInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class PLATFORM_EXPORT OpenFilePickerOptions {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<OpenFilePickerOptions, T>::value>;
  using DataView = OpenFilePickerOptionsDataView;
  using Data_ = internal::OpenFilePickerOptions_Data;

  template <typename... Args>
  static OpenFilePickerOptionsPtr New(Args&&... args) {
    return OpenFilePickerOptionsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static OpenFilePickerOptionsPtr From(const U& u) {
    return mojo::TypeConverter<OpenFilePickerOptionsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, OpenFilePickerOptions>::Convert(*this);
  }


  OpenFilePickerOptions();

  OpenFilePickerOptions(
      AcceptsTypesInfoPtr accepts_types_info,
      bool can_select_multiple_files);

OpenFilePickerOptions(const OpenFilePickerOptions&) = delete;
OpenFilePickerOptions& operator=(const OpenFilePickerOptions&) = delete;

  ~OpenFilePickerOptions();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = OpenFilePickerOptionsPtr>
  OpenFilePickerOptionsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, OpenFilePickerOptions::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, OpenFilePickerOptions::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        OpenFilePickerOptions::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        OpenFilePickerOptions::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::OpenFilePickerOptions_UnserializedMessageContext<
            UserType, OpenFilePickerOptions::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<OpenFilePickerOptions::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return OpenFilePickerOptions::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::OpenFilePickerOptions_UnserializedMessageContext<
            UserType, OpenFilePickerOptions::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<OpenFilePickerOptions::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  AcceptsTypesInfoPtr accepts_types_info;
  
  bool can_select_multiple_files;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, OpenFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, OpenFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, OpenFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, OpenFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class PLATFORM_EXPORT SaveFilePickerOptions {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SaveFilePickerOptions, T>::value>;
  using DataView = SaveFilePickerOptionsDataView;
  using Data_ = internal::SaveFilePickerOptions_Data;

  template <typename... Args>
  static SaveFilePickerOptionsPtr New(Args&&... args) {
    return SaveFilePickerOptionsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SaveFilePickerOptionsPtr From(const U& u) {
    return mojo::TypeConverter<SaveFilePickerOptionsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SaveFilePickerOptions>::Convert(*this);
  }


  SaveFilePickerOptions();

  SaveFilePickerOptions(
      AcceptsTypesInfoPtr accepts_types_info,
      const WTF::String& suggested_name);

SaveFilePickerOptions(const SaveFilePickerOptions&) = delete;
SaveFilePickerOptions& operator=(const SaveFilePickerOptions&) = delete;

  ~SaveFilePickerOptions();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SaveFilePickerOptionsPtr>
  SaveFilePickerOptionsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SaveFilePickerOptions::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, SaveFilePickerOptions::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SaveFilePickerOptions::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SaveFilePickerOptions::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SaveFilePickerOptions_UnserializedMessageContext<
            UserType, SaveFilePickerOptions::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<SaveFilePickerOptions::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return SaveFilePickerOptions::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SaveFilePickerOptions_UnserializedMessageContext<
            UserType, SaveFilePickerOptions::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SaveFilePickerOptions::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  AcceptsTypesInfoPtr accepts_types_info;
  
  WTF::String suggested_name;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SaveFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SaveFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SaveFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SaveFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class PLATFORM_EXPORT CommonFilePickerOptions {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CommonFilePickerOptions, T>::value>;
  using DataView = CommonFilePickerOptionsDataView;
  using Data_ = internal::CommonFilePickerOptions_Data;

  template <typename... Args>
  static CommonFilePickerOptionsPtr New(Args&&... args) {
    return CommonFilePickerOptionsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CommonFilePickerOptionsPtr From(const U& u) {
    return mojo::TypeConverter<CommonFilePickerOptionsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CommonFilePickerOptions>::Convert(*this);
  }


  CommonFilePickerOptions();

  CommonFilePickerOptions(
      const WTF::String& starting_directory_id,
      WellKnownDirectory well_known_starting_directory,
      ::mojo::PendingRemote<::blink::mojom::blink::FileSystemAccessTransferToken> starting_directory_token);

CommonFilePickerOptions(const CommonFilePickerOptions&) = delete;
CommonFilePickerOptions& operator=(const CommonFilePickerOptions&) = delete;

  ~CommonFilePickerOptions();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CommonFilePickerOptionsPtr>
  CommonFilePickerOptionsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CommonFilePickerOptions::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, CommonFilePickerOptions::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CommonFilePickerOptions::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CommonFilePickerOptions_UnserializedMessageContext<
            UserType, CommonFilePickerOptions::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<CommonFilePickerOptions::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return CommonFilePickerOptions::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CommonFilePickerOptions_UnserializedMessageContext<
            UserType, CommonFilePickerOptions::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CommonFilePickerOptions::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  WTF::String starting_directory_id;
  
  WellKnownDirectory well_known_starting_directory;
  
  ::mojo::PendingRemote<::blink::mojom::blink::FileSystemAccessTransferToken> starting_directory_token;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CommonFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CommonFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CommonFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CommonFilePickerOptions::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename UnionPtrType>
FilePickerOptionsPtr FilePickerOptions::Clone() const {
  switch (tag_) {
    case Tag::kOpenFilePickerOptions:
      return NewOpenFilePickerOptions(
          mojo::Clone(*data_.open_file_picker_options));
    case Tag::kSaveFilePickerOptions:
      return NewSaveFilePickerOptions(
          mojo::Clone(*data_.save_file_picker_options));
    case Tag::kDirectoryPickerOptions:
      return NewDirectoryPickerOptions(
          mojo::Clone(*data_.directory_picker_options));
  }
  return nullptr;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, FilePickerOptions>::value>::type*>
bool FilePickerOptions::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::kOpenFilePickerOptions:
      return mojo::Equals(*(data_.open_file_picker_options), *(other.data_.open_file_picker_options));
    case Tag::kSaveFilePickerOptions:
      return mojo::Equals(*(data_.save_file_picker_options), *(other.data_.save_file_picker_options));
    case Tag::kDirectoryPickerOptions:
      return mojo::Equals(*(data_.directory_picker_options), *(other.data_.directory_picker_options));
  }

  return false;
}
template <typename StructPtrType>
ChooseFileSystemEntryAcceptsOptionPtr ChooseFileSystemEntryAcceptsOption::Clone() const {
  return New(
      mojo::Clone(description),
      mojo::Clone(mime_types),
      mojo::Clone(extensions)
  );
}

template <typename T, ChooseFileSystemEntryAcceptsOption::EnableIfSame<T>*>
bool ChooseFileSystemEntryAcceptsOption::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->description, other_struct.description))
    return false;
  if (!mojo::Equals(this->mime_types, other_struct.mime_types))
    return false;
  if (!mojo::Equals(this->extensions, other_struct.extensions))
    return false;
  return true;
}

template <typename T, ChooseFileSystemEntryAcceptsOption::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.description < rhs.description)
    return true;
  if (rhs.description < lhs.description)
    return false;
  if (lhs.mime_types < rhs.mime_types)
    return true;
  if (rhs.mime_types < lhs.mime_types)
    return false;
  if (lhs.extensions < rhs.extensions)
    return true;
  if (rhs.extensions < lhs.extensions)
    return false;
  return false;
}
template <typename StructPtrType>
AcceptsTypesInfoPtr AcceptsTypesInfo::Clone() const {
  return New(
      mojo::Clone(accepts),
      mojo::Clone(include_accepts_all)
  );
}

template <typename T, AcceptsTypesInfo::EnableIfSame<T>*>
bool AcceptsTypesInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->accepts, other_struct.accepts))
    return false;
  if (!mojo::Equals(this->include_accepts_all, other_struct.include_accepts_all))
    return false;
  return true;
}

template <typename T, AcceptsTypesInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.accepts < rhs.accepts)
    return true;
  if (rhs.accepts < lhs.accepts)
    return false;
  if (lhs.include_accepts_all < rhs.include_accepts_all)
    return true;
  if (rhs.include_accepts_all < lhs.include_accepts_all)
    return false;
  return false;
}
template <typename StructPtrType>
OpenFilePickerOptionsPtr OpenFilePickerOptions::Clone() const {
  return New(
      mojo::Clone(accepts_types_info),
      mojo::Clone(can_select_multiple_files)
  );
}

template <typename T, OpenFilePickerOptions::EnableIfSame<T>*>
bool OpenFilePickerOptions::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->accepts_types_info, other_struct.accepts_types_info))
    return false;
  if (!mojo::Equals(this->can_select_multiple_files, other_struct.can_select_multiple_files))
    return false;
  return true;
}

template <typename T, OpenFilePickerOptions::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.accepts_types_info < rhs.accepts_types_info)
    return true;
  if (rhs.accepts_types_info < lhs.accepts_types_info)
    return false;
  if (lhs.can_select_multiple_files < rhs.can_select_multiple_files)
    return true;
  if (rhs.can_select_multiple_files < lhs.can_select_multiple_files)
    return false;
  return false;
}
template <typename StructPtrType>
SaveFilePickerOptionsPtr SaveFilePickerOptions::Clone() const {
  return New(
      mojo::Clone(accepts_types_info),
      mojo::Clone(suggested_name)
  );
}

template <typename T, SaveFilePickerOptions::EnableIfSame<T>*>
bool SaveFilePickerOptions::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->accepts_types_info, other_struct.accepts_types_info))
    return false;
  if (!mojo::Equals(this->suggested_name, other_struct.suggested_name))
    return false;
  return true;
}

template <typename T, SaveFilePickerOptions::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.accepts_types_info < rhs.accepts_types_info)
    return true;
  if (rhs.accepts_types_info < lhs.accepts_types_info)
    return false;
  if (lhs.suggested_name < rhs.suggested_name)
    return true;
  if (rhs.suggested_name < lhs.suggested_name)
    return false;
  return false;
}
template <typename StructPtrType>
DirectoryPickerOptionsPtr DirectoryPickerOptions::Clone() const {
  return New(
      mojo::Clone(request_writable)
  );
}

template <typename T, DirectoryPickerOptions::EnableIfSame<T>*>
bool DirectoryPickerOptions::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->request_writable, other_struct.request_writable))
    return false;
  return true;
}

template <typename T, DirectoryPickerOptions::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.request_writable < rhs.request_writable)
    return true;
  if (rhs.request_writable < lhs.request_writable)
    return false;
  return false;
}
template <typename StructPtrType>
CommonFilePickerOptionsPtr CommonFilePickerOptions::Clone() const {
  return New(
      mojo::Clone(starting_directory_id),
      mojo::Clone(well_known_starting_directory),
      mojo::Clone(starting_directory_token)
  );
}

template <typename T, CommonFilePickerOptions::EnableIfSame<T>*>
bool CommonFilePickerOptions::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->starting_directory_id, other_struct.starting_directory_id))
    return false;
  if (!mojo::Equals(this->well_known_starting_directory, other_struct.well_known_starting_directory))
    return false;
  if (!mojo::Equals(this->starting_directory_token, other_struct.starting_directory_token))
    return false;
  return true;
}

template <typename T, CommonFilePickerOptions::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.starting_directory_id < rhs.starting_directory_id)
    return true;
  if (rhs.starting_directory_id < lhs.starting_directory_id)
    return false;
  if (lhs.well_known_starting_directory < rhs.well_known_starting_directory)
    return true;
  if (rhs.well_known_starting_directory < lhs.well_known_starting_directory)
    return false;
  if (lhs.starting_directory_token < rhs.starting_directory_token)
    return true;
  if (rhs.starting_directory_token < lhs.starting_directory_token)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::ChooseFileSystemEntryAcceptsOption::DataView,
                                         ::blink::mojom::blink::ChooseFileSystemEntryAcceptsOptionPtr> {
  static bool IsNull(const ::blink::mojom::blink::ChooseFileSystemEntryAcceptsOptionPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::ChooseFileSystemEntryAcceptsOptionPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::ChooseFileSystemEntryAcceptsOption::description)& description(
      const ::blink::mojom::blink::ChooseFileSystemEntryAcceptsOptionPtr& input) {
    return input->description;
  }

  static const decltype(::blink::mojom::blink::ChooseFileSystemEntryAcceptsOption::mime_types)& mime_types(
      const ::blink::mojom::blink::ChooseFileSystemEntryAcceptsOptionPtr& input) {
    return input->mime_types;
  }

  static const decltype(::blink::mojom::blink::ChooseFileSystemEntryAcceptsOption::extensions)& extensions(
      const ::blink::mojom::blink::ChooseFileSystemEntryAcceptsOptionPtr& input) {
    return input->extensions;
  }

  static bool Read(::blink::mojom::blink::ChooseFileSystemEntryAcceptsOption::DataView input, ::blink::mojom::blink::ChooseFileSystemEntryAcceptsOptionPtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::AcceptsTypesInfo::DataView,
                                         ::blink::mojom::blink::AcceptsTypesInfoPtr> {
  static bool IsNull(const ::blink::mojom::blink::AcceptsTypesInfoPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::AcceptsTypesInfoPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::AcceptsTypesInfo::accepts)& accepts(
      const ::blink::mojom::blink::AcceptsTypesInfoPtr& input) {
    return input->accepts;
  }

  static decltype(::blink::mojom::blink::AcceptsTypesInfo::include_accepts_all) include_accepts_all(
      const ::blink::mojom::blink::AcceptsTypesInfoPtr& input) {
    return input->include_accepts_all;
  }

  static bool Read(::blink::mojom::blink::AcceptsTypesInfo::DataView input, ::blink::mojom::blink::AcceptsTypesInfoPtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::OpenFilePickerOptions::DataView,
                                         ::blink::mojom::blink::OpenFilePickerOptionsPtr> {
  static bool IsNull(const ::blink::mojom::blink::OpenFilePickerOptionsPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::OpenFilePickerOptionsPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::OpenFilePickerOptions::accepts_types_info)& accepts_types_info(
      const ::blink::mojom::blink::OpenFilePickerOptionsPtr& input) {
    return input->accepts_types_info;
  }

  static decltype(::blink::mojom::blink::OpenFilePickerOptions::can_select_multiple_files) can_select_multiple_files(
      const ::blink::mojom::blink::OpenFilePickerOptionsPtr& input) {
    return input->can_select_multiple_files;
  }

  static bool Read(::blink::mojom::blink::OpenFilePickerOptions::DataView input, ::blink::mojom::blink::OpenFilePickerOptionsPtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::SaveFilePickerOptions::DataView,
                                         ::blink::mojom::blink::SaveFilePickerOptionsPtr> {
  static bool IsNull(const ::blink::mojom::blink::SaveFilePickerOptionsPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::SaveFilePickerOptionsPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::SaveFilePickerOptions::accepts_types_info)& accepts_types_info(
      const ::blink::mojom::blink::SaveFilePickerOptionsPtr& input) {
    return input->accepts_types_info;
  }

  static const decltype(::blink::mojom::blink::SaveFilePickerOptions::suggested_name)& suggested_name(
      const ::blink::mojom::blink::SaveFilePickerOptionsPtr& input) {
    return input->suggested_name;
  }

  static bool Read(::blink::mojom::blink::SaveFilePickerOptions::DataView input, ::blink::mojom::blink::SaveFilePickerOptionsPtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::DirectoryPickerOptions::DataView,
                                         ::blink::mojom::blink::DirectoryPickerOptionsPtr> {
  static bool IsNull(const ::blink::mojom::blink::DirectoryPickerOptionsPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::DirectoryPickerOptionsPtr* output) { output->reset(); }

  static decltype(::blink::mojom::blink::DirectoryPickerOptions::request_writable) request_writable(
      const ::blink::mojom::blink::DirectoryPickerOptionsPtr& input) {
    return input->request_writable;
  }

  static bool Read(::blink::mojom::blink::DirectoryPickerOptions::DataView input, ::blink::mojom::blink::DirectoryPickerOptionsPtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::CommonFilePickerOptions::DataView,
                                         ::blink::mojom::blink::CommonFilePickerOptionsPtr> {
  static bool IsNull(const ::blink::mojom::blink::CommonFilePickerOptionsPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::CommonFilePickerOptionsPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::CommonFilePickerOptions::starting_directory_id)& starting_directory_id(
      const ::blink::mojom::blink::CommonFilePickerOptionsPtr& input) {
    return input->starting_directory_id;
  }

  static decltype(::blink::mojom::blink::CommonFilePickerOptions::well_known_starting_directory) well_known_starting_directory(
      const ::blink::mojom::blink::CommonFilePickerOptionsPtr& input) {
    return input->well_known_starting_directory;
  }

  static  decltype(::blink::mojom::blink::CommonFilePickerOptions::starting_directory_token)& starting_directory_token(
       ::blink::mojom::blink::CommonFilePickerOptionsPtr& input) {
    return input->starting_directory_token;
  }

  static bool Read(::blink::mojom::blink::CommonFilePickerOptions::DataView input, ::blink::mojom::blink::CommonFilePickerOptionsPtr* output);
};


template <>
struct PLATFORM_EXPORT UnionTraits<::blink::mojom::blink::FilePickerOptions::DataView,
                                        ::blink::mojom::blink::FilePickerOptionsPtr> {
  static bool IsNull(const ::blink::mojom::blink::FilePickerOptionsPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::FilePickerOptionsPtr* output) { output->reset(); }

  static ::blink::mojom::blink::FilePickerOptions::Tag GetTag(const ::blink::mojom::blink::FilePickerOptionsPtr& input) {
    return input->which();
  }

  static const ::blink::mojom::blink::OpenFilePickerOptionsPtr& open_file_picker_options(const ::blink::mojom::blink::FilePickerOptionsPtr& input) {
    return input->get_open_file_picker_options();
  }

  static const ::blink::mojom::blink::SaveFilePickerOptionsPtr& save_file_picker_options(const ::blink::mojom::blink::FilePickerOptionsPtr& input) {
    return input->get_save_file_picker_options();
  }

  static const ::blink::mojom::blink::DirectoryPickerOptionsPtr& directory_picker_options(const ::blink::mojom::blink::FilePickerOptionsPtr& input) {
    return input->get_directory_picker_options();
  }

  static bool Read(::blink::mojom::blink::FilePickerOptions::DataView input, ::blink::mojom::blink::FilePickerOptionsPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_MANAGER_MOJOM_BLINK_H_