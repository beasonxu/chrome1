// third_party/blink/public/mojom/file_system_access/file_system_access_manager.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('blink.mojom');





/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.WellKnownDirectorySpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.WellKnownDirectory = {
  
  kDefault: 0,
  kDirDesktop: 1,
  kDirDocuments: 2,
  kDirDownloads: 3,
  kDirMusic: 4,
  kDirPictures: 5,
  kDirVideos: 6,
  MIN_VALUE: 0,
  MAX_VALUE: 6,
};





/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.FileSystemAccessManagerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.FileSystemAccessManager.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.mojom.FileSystemAccessManagerInterface }
 */
blink.mojom.FileSystemAccessManagerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.FileSystemAccessManagerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.FileSystemAccessManagerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.FileSystemAccessManagerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        result: !blink.mojom.FileSystemAccessError,
        directory: ?blink.mojom.FileSystemAccessDirectoryHandleRemote,
   *  }>}
   */

  getSandboxedFileSystem() {
    return this.proxy.sendMessage(
        0,
        blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_ParamsSpec.$,
        blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !blink.mojom.FilePickerOptions } options
   * @param { !blink.mojom.CommonFilePickerOptions } commonOptions
   * @return {!Promise<{
        result: !blink.mojom.FileSystemAccessError,
        entries: !Array<!blink.mojom.FileSystemAccessEntry>,
   *  }>}
   */

  chooseEntries(
      options,
      commonOptions) {
    return this.proxy.sendMessage(
        1,
        blink.mojom.FileSystemAccessManager_ChooseEntries_ParamsSpec.$,
        blink.mojom.FileSystemAccessManager_ChooseEntries_ResponseParamsSpec.$,
        [
          options,
          commonOptions
        ]);
  }

  
  /**
   * @param { !blink.mojom.FileSystemAccessTransferTokenRemote } token
   * @param { !blink.mojom.FileSystemAccessFileHandlePendingReceiver } fileHandle
   */

  getFileHandleFromToken(
      token,
      fileHandle) {
    this.proxy.sendMessage(
        2,
        blink.mojom.FileSystemAccessManager_GetFileHandleFromToken_ParamsSpec.$,
        null,
        [
          token,
          fileHandle
        ]);
  }

  
  /**
   * @param { !blink.mojom.FileSystemAccessTransferTokenRemote } token
   * @param { !blink.mojom.FileSystemAccessDirectoryHandlePendingReceiver } directoryHandle
   */

  getDirectoryHandleFromToken(
      token,
      directoryHandle) {
    this.proxy.sendMessage(
        3,
        blink.mojom.FileSystemAccessManager_GetDirectoryHandleFromToken_ParamsSpec.$,
        null,
        [
          token,
          directoryHandle
        ]);
  }

  
  /**
   * @param { !blink.mojom.FileSystemAccessDataTransferTokenRemote } token
   * @return {!Promise<{
        entry: !blink.mojom.FileSystemAccessEntry,
   *  }>}
   */

  getEntryFromDataTransferToken(
      token) {
    return this.proxy.sendMessage(
        4,
        blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_ParamsSpec.$,
        blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParamsSpec.$,
        [
          token
        ]);
  }
};

/**
 * An object which receives request messages for the FileSystemAccessManager
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.FileSystemAccessManagerReceiver = class {
  /**
   * @param {!blink.mojom.FileSystemAccessManagerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.FileSystemAccessManagerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.FileSystemAccessManagerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FileSystemAccessManagerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_ParamsSpec.$,
        blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_ResponseParamsSpec.$,
        impl.getSandboxedFileSystem.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.FileSystemAccessManager_ChooseEntries_ParamsSpec.$,
        blink.mojom.FileSystemAccessManager_ChooseEntries_ResponseParamsSpec.$,
        impl.chooseEntries.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.mojom.FileSystemAccessManager_GetFileHandleFromToken_ParamsSpec.$,
        null,
        impl.getFileHandleFromToken.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        blink.mojom.FileSystemAccessManager_GetDirectoryHandleFromToken_ParamsSpec.$,
        null,
        impl.getDirectoryHandleFromToken.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_ParamsSpec.$,
        blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParamsSpec.$,
        impl.getEntryFromDataTransferToken.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.FileSystemAccessManager = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.FileSystemAccessManager";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.FileSystemAccessManagerRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.FileSystemAccessManagerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the FileSystemAccessManager
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.FileSystemAccessManagerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.FileSystemAccessManagerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FileSystemAccessManagerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getSandboxedFileSystem =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_ParamsSpec.$,
        blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_ResponseParamsSpec.$,
        this.getSandboxedFileSystem.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.chooseEntries =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.FileSystemAccessManager_ChooseEntries_ParamsSpec.$,
        blink.mojom.FileSystemAccessManager_ChooseEntries_ResponseParamsSpec.$,
        this.chooseEntries.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getFileHandleFromToken =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.mojom.FileSystemAccessManager_GetFileHandleFromToken_ParamsSpec.$,
        null,
        this.getFileHandleFromToken.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getDirectoryHandleFromToken =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        blink.mojom.FileSystemAccessManager_GetDirectoryHandleFromToken_ParamsSpec.$,
        null,
        this.getDirectoryHandleFromToken.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getEntryFromDataTransferToken =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_ParamsSpec.$,
        blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParamsSpec.$,
        this.getEntryFromDataTransferToken.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.ChooseFileSystemEntryAcceptsOptionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.AcceptsTypesInfoSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.OpenFilePickerOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SaveFilePickerOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.DirectoryPickerOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CommonFilePickerOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemAccessManager_ChooseEntries_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemAccessManager_ChooseEntries_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemAccessManager_GetFileHandleFromToken_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemAccessManager_GetDirectoryHandleFromToken_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType} }
 * @export
 */
blink.mojom.FilePickerOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.ChooseFileSystemEntryAcceptsOptionSpec.$,
    'ChooseFileSystemEntryAcceptsOption',
    [
      mojo.internal.StructField(
        'description', 0,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'mimeTypes', 8,
        0,
        mojo.internal.Array(mojo.internal.String, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'extensions', 16,
        0,
        mojo.internal.Array(mojo.internal.String, false),
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
blink.mojom.ChooseFileSystemEntryAcceptsOption = class {
  constructor() {
    /** @export { !mojoBase.mojom.String16 } */
    this.description;
    /** @export { !Array<!string> } */
    this.mimeTypes;
    /** @export { !Array<!string> } */
    this.extensions;
  }
};




mojo.internal.Struct(
    blink.mojom.AcceptsTypesInfoSpec.$,
    'AcceptsTypesInfo',
    [
      mojo.internal.StructField(
        'accepts', 0,
        0,
        mojo.internal.Array(blink.mojom.ChooseFileSystemEntryAcceptsOptionSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'includeAcceptsAll', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.AcceptsTypesInfo = class {
  constructor() {
    /** @export { !Array<!blink.mojom.ChooseFileSystemEntryAcceptsOption> } */
    this.accepts;
    /** @export { !boolean } */
    this.includeAcceptsAll;
  }
};




mojo.internal.Struct(
    blink.mojom.OpenFilePickerOptionsSpec.$,
    'OpenFilePickerOptions',
    [
      mojo.internal.StructField(
        'acceptsTypesInfo', 0,
        0,
        blink.mojom.AcceptsTypesInfoSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'canSelectMultipleFiles', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.OpenFilePickerOptions = class {
  constructor() {
    /** @export { !blink.mojom.AcceptsTypesInfo } */
    this.acceptsTypesInfo;
    /** @export { !boolean } */
    this.canSelectMultipleFiles;
  }
};




mojo.internal.Struct(
    blink.mojom.SaveFilePickerOptionsSpec.$,
    'SaveFilePickerOptions',
    [
      mojo.internal.StructField(
        'acceptsTypesInfo', 0,
        0,
        blink.mojom.AcceptsTypesInfoSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'suggestedName', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.SaveFilePickerOptions = class {
  constructor() {
    /** @export { !blink.mojom.AcceptsTypesInfo } */
    this.acceptsTypesInfo;
    /** @export { !string } */
    this.suggestedName;
  }
};




mojo.internal.Struct(
    blink.mojom.DirectoryPickerOptionsSpec.$,
    'DirectoryPickerOptions',
    [
      mojo.internal.StructField(
        'requestWritable', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.DirectoryPickerOptions = class {
  constructor() {
    /** @export { !boolean } */
    this.requestWritable;
  }
};




mojo.internal.Struct(
    blink.mojom.CommonFilePickerOptionsSpec.$,
    'CommonFilePickerOptions',
    [
      mojo.internal.StructField(
        'startingDirectoryId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'wellKnownStartingDirectory', 8,
        0,
        blink.mojom.WellKnownDirectorySpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'startingDirectoryToken', 12,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.FileSystemAccessTransferTokenRemote),
        null,
        true /* nullable */),
    ],
    [[0, 32],]);





/** @record */
blink.mojom.CommonFilePickerOptions = class {
  constructor() {
    /** @export { !string } */
    this.startingDirectoryId;
    /** @export { !blink.mojom.WellKnownDirectory } */
    this.wellKnownStartingDirectory;
    /** @export { (blink.mojom.FileSystemAccessTransferTokenRemote|undefined) } */
    this.startingDirectoryToken;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_ParamsSpec.$,
    'FileSystemAccessManager_GetSandboxedFileSystem_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_ResponseParamsSpec.$,
    'FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        blink.mojom.FileSystemAccessErrorSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'directory', 8,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.FileSystemAccessDirectoryHandleRemote),
        null,
        true /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.FileSystemAccessError } */
    this.result;
    /** @export { (blink.mojom.FileSystemAccessDirectoryHandleRemote|undefined) } */
    this.directory;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemAccessManager_ChooseEntries_ParamsSpec.$,
    'FileSystemAccessManager_ChooseEntries_Params',
    [
      mojo.internal.StructField(
        'options', 0,
        0,
        blink.mojom.FilePickerOptionsSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'commonOptions', 16,
        0,
        blink.mojom.CommonFilePickerOptionsSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
blink.mojom.FileSystemAccessManager_ChooseEntries_Params = class {
  constructor() {
    /** @export { !blink.mojom.FilePickerOptions } */
    this.options;
    /** @export { !blink.mojom.CommonFilePickerOptions } */
    this.commonOptions;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemAccessManager_ChooseEntries_ResponseParamsSpec.$,
    'FileSystemAccessManager_ChooseEntries_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        blink.mojom.FileSystemAccessErrorSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'entries', 8,
        0,
        mojo.internal.Array(blink.mojom.FileSystemAccessEntrySpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemAccessManager_ChooseEntries_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.FileSystemAccessError } */
    this.result;
    /** @export { !Array<!blink.mojom.FileSystemAccessEntry> } */
    this.entries;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemAccessManager_GetFileHandleFromToken_ParamsSpec.$,
    'FileSystemAccessManager_GetFileHandleFromToken_Params',
    [
      mojo.internal.StructField(
        'token', 0,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.FileSystemAccessTransferTokenRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fileHandle', 8,
        0,
        mojo.internal.InterfaceRequest(blink.mojom.FileSystemAccessFileHandlePendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemAccessManager_GetFileHandleFromToken_Params = class {
  constructor() {
    /** @export { !blink.mojom.FileSystemAccessTransferTokenRemote } */
    this.token;
    /** @export { !blink.mojom.FileSystemAccessFileHandlePendingReceiver } */
    this.fileHandle;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemAccessManager_GetDirectoryHandleFromToken_ParamsSpec.$,
    'FileSystemAccessManager_GetDirectoryHandleFromToken_Params',
    [
      mojo.internal.StructField(
        'token', 0,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.FileSystemAccessTransferTokenRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'directoryHandle', 8,
        0,
        mojo.internal.InterfaceRequest(blink.mojom.FileSystemAccessDirectoryHandlePendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.FileSystemAccessManager_GetDirectoryHandleFromToken_Params = class {
  constructor() {
    /** @export { !blink.mojom.FileSystemAccessTransferTokenRemote } */
    this.token;
    /** @export { !blink.mojom.FileSystemAccessDirectoryHandlePendingReceiver } */
    this.directoryHandle;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_ParamsSpec.$,
    'FileSystemAccessManager_GetEntryFromDataTransferToken_Params',
    [
      mojo.internal.StructField(
        'token', 0,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.FileSystemAccessDataTransferTokenRemote),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_Params = class {
  constructor() {
    /** @export { !blink.mojom.FileSystemAccessDataTransferTokenRemote } */
    this.token;
  }
};




mojo.internal.Struct(
    blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParamsSpec.$,
    'FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParams',
    [
      mojo.internal.StructField(
        'entry', 0,
        0,
        blink.mojom.FileSystemAccessEntrySpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.FileSystemAccessManager_GetEntryFromDataTransferToken_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.FileSystemAccessEntry } */
    this.entry;
  }
};




mojo.internal.Union(
    blink.mojom.FilePickerOptionsSpec.$, 'FilePickerOptions',
    {
      'openFilePickerOptions': {
        'ordinal': 0,
        'type': blink.mojom.OpenFilePickerOptionsSpec.$,
      },
      'saveFilePickerOptions': {
        'ordinal': 1,
        'type': blink.mojom.SaveFilePickerOptionsSpec.$,
      },
      'directoryPickerOptions': {
        'ordinal': 2,
        'type': blink.mojom.DirectoryPickerOptionsSpec.$,
      },
    });

/**
 * @typedef { {
 *   openFilePickerOptions: (!blink.mojom.OpenFilePickerOptions|undefined),
 *   saveFilePickerOptions: (!blink.mojom.SaveFilePickerOptions|undefined),
 *   directoryPickerOptions: (!blink.mojom.DirectoryPickerOptions|undefined),
 * } }
 */
blink.mojom.FilePickerOptions;
