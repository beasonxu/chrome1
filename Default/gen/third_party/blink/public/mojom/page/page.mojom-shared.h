// third_party/blink/public/mojom/page/page.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_PAGE_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_PAGE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/page/page.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "skia/public/mojom/skcolor.mojom-shared.h"
#include "third_party/blink/public/mojom/frame/frame_replication_state.mojom-shared.h"
#include "third_party/blink/public/mojom/frame/remote_frame.mojom-shared.h"
#include "third_party/blink/public/mojom/navigation/was_activated_option.mojom-shared.h"
#include "third_party/blink/public/mojom/page/page_visibility_state.mojom-shared.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-shared.h"
#include "third_party/blink/public/mojom/webpreferences/web_preferences.mojom-shared.h"
#include "third_party/blink/public/mojom/renderer_preferences.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class PageLifecycleStateDataView;

class PageRestoreParamsDataView;

class PrerenderPageActivationParamsDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::PageLifecycleStateDataView> {
  using Data = ::blink::mojom::internal::PageLifecycleState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::PageRestoreParamsDataView> {
  using Data = ::blink::mojom::internal::PageRestoreParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::PrerenderPageActivationParamsDataView> {
  using Data = ::blink::mojom::internal::PrerenderPageActivationParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class PagehideDispatch : int32_t {
  
  kNotDispatched = 0,
  
  kDispatchedNotPersisted = 1,
  
  kDispatchedPersisted = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, PagehideDispatch value);
inline bool IsKnownEnumValue(PagehideDispatch value) {
  return internal::PagehideDispatch_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class PageBroadcastInterfaceBase {};

using PageBroadcastPtrDataView =
    mojo::InterfacePtrDataView<PageBroadcastInterfaceBase>;
using PageBroadcastRequestDataView =
    mojo::InterfaceRequestDataView<PageBroadcastInterfaceBase>;
using PageBroadcastAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageBroadcastInterfaceBase>;
using PageBroadcastAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageBroadcastInterfaceBase>;


class PageLifecycleStateDataView {
 public:
  PageLifecycleStateDataView() = default;

  PageLifecycleStateDataView(
      internal::PageLifecycleState_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_frozen() const {
    return data_->is_frozen;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadVisibility(UserType* output) const {
    auto data_value = data_->visibility;
    return mojo::internal::Deserialize<::blink::mojom::PageVisibilityState>(
        data_value, output);
  }
  ::blink::mojom::PageVisibilityState visibility() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PageVisibilityState>(data_->visibility));
  }
  bool is_in_back_forward_cache() const {
    return data_->is_in_back_forward_cache;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadPagehideDispatch(UserType* output) const {
    auto data_value = data_->pagehide_dispatch;
    return mojo::internal::Deserialize<::blink::mojom::PagehideDispatch>(
        data_value, output);
  }
  PagehideDispatch pagehide_dispatch() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PagehideDispatch>(data_->pagehide_dispatch));
  }
  bool eviction_enabled() const {
    return data_->eviction_enabled;
  }
  bool should_dispatch_pageshow_for_debugging() const {
    return data_->should_dispatch_pageshow_for_debugging;
  }
 private:
  internal::PageLifecycleState_Data* data_ = nullptr;
};



class PageRestoreParamsDataView {
 public:
  PageRestoreParamsDataView() = default;

  PageRestoreParamsDataView(
      internal::PageRestoreParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNavigationStartDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNavigationStart(UserType* output) {
    
    auto* pointer = data_->navigation_start.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  int32_t pending_history_list_offset() const {
    return data_->pending_history_list_offset;
  }
  int32_t current_history_list_length() const {
    return data_->current_history_list_length;
  }
 private:
  internal::PageRestoreParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PrerenderPageActivationParamsDataView {
 public:
  PrerenderPageActivationParamsDataView() = default;

  PrerenderPageActivationParamsDataView(
      internal::PrerenderPageActivationParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadWasUserActivated(UserType* output) const {
    auto data_value = data_->was_user_activated;
    return mojo::internal::Deserialize<::blink::mojom::WasActivatedOption>(
        data_value, output);
  }
  ::blink::mojom::WasActivatedOption was_user_activated() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::WasActivatedOption>(data_->was_user_activated));
  }
  inline void GetActivationStartDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadActivationStart(UserType* output) {
    
    auto* pointer = data_->activation_start.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
 private:
  internal::PrerenderPageActivationParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::PagehideDispatch>
    : public mojo::internal::EnumHashImpl<::blink::mojom::PagehideDispatch> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::PagehideDispatch, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::PagehideDispatch, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::PagehideDispatch>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::PageLifecycleStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::PageLifecycleStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::PageLifecycleState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->is_frozen = Traits::is_frozen(input);
    mojo::internal::Serialize<::blink::mojom::PageVisibilityState>(
        Traits::visibility(input), &fragment->visibility);
    fragment->is_in_back_forward_cache = Traits::is_in_back_forward_cache(input);
    mojo::internal::Serialize<::blink::mojom::PagehideDispatch>(
        Traits::pagehide_dispatch(input), &fragment->pagehide_dispatch);
    fragment->eviction_enabled = Traits::eviction_enabled(input);
    fragment->should_dispatch_pageshow_for_debugging = Traits::should_dispatch_pageshow_for_debugging(input);
  }

  static bool Deserialize(::blink::mojom::internal::PageLifecycleState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::PageLifecycleStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::PageRestoreParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::PageRestoreParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::PageRestoreParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::navigation_start(input)) in_navigation_start = Traits::navigation_start(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->navigation_start)::BaseType> navigation_start_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_navigation_start, navigation_start_fragment);
    fragment->navigation_start.Set(
        navigation_start_fragment.is_null() ? nullptr : navigation_start_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->navigation_start.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null navigation_start in PageRestoreParams struct");
    fragment->pending_history_list_offset = Traits::pending_history_list_offset(input);
    fragment->current_history_list_length = Traits::current_history_list_length(input);
  }

  static bool Deserialize(::blink::mojom::internal::PageRestoreParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::PageRestoreParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::PrerenderPageActivationParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::PrerenderPageActivationParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::PrerenderPageActivationParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::blink::mojom::WasActivatedOption>(
        Traits::was_user_activated(input), &fragment->was_user_activated);
    decltype(Traits::activation_start(input)) in_activation_start = Traits::activation_start(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->activation_start)::BaseType> activation_start_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_activation_start, activation_start_fragment);
    fragment->activation_start.Set(
        activation_start_fragment.is_null() ? nullptr : activation_start_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->activation_start.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null activation_start in PrerenderPageActivationParams struct");
  }

  static bool Deserialize(::blink::mojom::internal::PrerenderPageActivationParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::PrerenderPageActivationParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {



inline void PageRestoreParamsDataView::GetNavigationStartDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->navigation_start.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}


inline void PrerenderPageActivationParamsDataView::GetActivationStartDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->activation_start.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::PagehideDispatch> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::PagehideDispatch value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_PAGE_MOJOM_SHARED_H_