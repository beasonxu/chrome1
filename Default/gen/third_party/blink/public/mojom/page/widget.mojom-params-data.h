// third_party/blink/public/mojom/page/widget.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_WIDGET_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_WIDGET_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_DragTargetDragEnter_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::DragData_Data> drag_data;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> point_in_viewport;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> screen_point;
  mojo::internal::Pointer<::blink::mojom::internal::AllowedDragOperations_Data> operations_allowed;
  uint32_t key_modifiers;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_DragTargetDragEnter_Params_Data>;

  FrameWidget_DragTargetDragEnter_Params_Data();
  ~FrameWidget_DragTargetDragEnter_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_DragTargetDragEnter_Params_Data) == 48,
              "Bad sizeof(FrameWidget_DragTargetDragEnter_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_DragTargetDragEnter_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t operation;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_DragTargetDragEnter_ResponseParams_Data>;

  FrameWidget_DragTargetDragEnter_ResponseParams_Data();
  ~FrameWidget_DragTargetDragEnter_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameWidget_DragTargetDragEnter_ResponseParams_Data) == 16,
              "Bad sizeof(FrameWidget_DragTargetDragEnter_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_DragTargetDragOver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> point_in_viewport;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> screen_point;
  mojo::internal::Pointer<::blink::mojom::internal::AllowedDragOperations_Data> operations_allowed;
  uint32_t key_modifiers;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_DragTargetDragOver_Params_Data>;

  FrameWidget_DragTargetDragOver_Params_Data();
  ~FrameWidget_DragTargetDragOver_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_DragTargetDragOver_Params_Data) == 40,
              "Bad sizeof(FrameWidget_DragTargetDragOver_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_DragTargetDragOver_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t operation;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_DragTargetDragOver_ResponseParams_Data>;

  FrameWidget_DragTargetDragOver_ResponseParams_Data();
  ~FrameWidget_DragTargetDragOver_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameWidget_DragTargetDragOver_ResponseParams_Data) == 16,
              "Bad sizeof(FrameWidget_DragTargetDragOver_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_DragTargetDragLeave_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> point_in_viewport;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> screen_point;

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_DragTargetDragLeave_Params_Data>;

  FrameWidget_DragTargetDragLeave_Params_Data();
  ~FrameWidget_DragTargetDragLeave_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_DragTargetDragLeave_Params_Data) == 24,
              "Bad sizeof(FrameWidget_DragTargetDragLeave_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_DragTargetDrop_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::DragData_Data> drag_data;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> point_in_viewport;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> screen_point;
  uint32_t key_modifiers;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_DragTargetDrop_Params_Data>;

  FrameWidget_DragTargetDrop_Params_Data();
  ~FrameWidget_DragTargetDrop_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_DragTargetDrop_Params_Data) == 40,
              "Bad sizeof(FrameWidget_DragTargetDrop_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_DragTargetDrop_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_DragTargetDrop_ResponseParams_Data>;

  FrameWidget_DragTargetDrop_ResponseParams_Data();
  ~FrameWidget_DragTargetDrop_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameWidget_DragTargetDrop_ResponseParams_Data) == 8,
              "Bad sizeof(FrameWidget_DragTargetDrop_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_DragSourceEndedAt_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> point_in_viewport;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> screen_point;
  int32_t drag_operation;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_DragSourceEndedAt_Params_Data>;

  FrameWidget_DragSourceEndedAt_Params_Data();
  ~FrameWidget_DragSourceEndedAt_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_DragSourceEndedAt_Params_Data) == 32,
              "Bad sizeof(FrameWidget_DragSourceEndedAt_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_DragSourceEndedAt_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_DragSourceEndedAt_ResponseParams_Data>;

  FrameWidget_DragSourceEndedAt_ResponseParams_Data();
  ~FrameWidget_DragSourceEndedAt_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameWidget_DragSourceEndedAt_ResponseParams_Data) == 8,
              "Bad sizeof(FrameWidget_DragSourceEndedAt_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_DragSourceSystemDragEnded_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_DragSourceSystemDragEnded_Params_Data>;

  FrameWidget_DragSourceSystemDragEnded_Params_Data();
  ~FrameWidget_DragSourceSystemDragEnded_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_DragSourceSystemDragEnded_Params_Data) == 8,
              "Bad sizeof(FrameWidget_DragSourceSystemDragEnded_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_OnStartStylusWriting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_OnStartStylusWriting_Params_Data>;

  FrameWidget_OnStartStylusWriting_Params_Data();
  ~FrameWidget_OnStartStylusWriting_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_OnStartStylusWriting_Params_Data) == 8,
              "Bad sizeof(FrameWidget_OnStartStylusWriting_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_OnStartStylusWriting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> focused_edit_bounds;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> caret_bounds;

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_OnStartStylusWriting_ResponseParams_Data>;

  FrameWidget_OnStartStylusWriting_ResponseParams_Data();
  ~FrameWidget_OnStartStylusWriting_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameWidget_OnStartStylusWriting_ResponseParams_Data) == 24,
              "Bad sizeof(FrameWidget_OnStartStylusWriting_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_SetBackgroundOpaque_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t opaque : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_SetBackgroundOpaque_Params_Data>;

  FrameWidget_SetBackgroundOpaque_Params_Data();
  ~FrameWidget_SetBackgroundOpaque_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_SetBackgroundOpaque_Params_Data) == 16,
              "Bad sizeof(FrameWidget_SetBackgroundOpaque_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_SetTextDirection_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t direction;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_SetTextDirection_Params_Data>;

  FrameWidget_SetTextDirection_Params_Data();
  ~FrameWidget_SetTextDirection_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_SetTextDirection_Params_Data) == 16,
              "Bad sizeof(FrameWidget_SetTextDirection_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_SetActive_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t active : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_SetActive_Params_Data>;

  FrameWidget_SetActive_Params_Data();
  ~FrameWidget_SetActive_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_SetActive_Params_Data) == 16,
              "Bad sizeof(FrameWidget_SetActive_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_SetInheritedEffectiveTouchActionForSubFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t touch_action;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_SetInheritedEffectiveTouchActionForSubFrame_Params_Data>;

  FrameWidget_SetInheritedEffectiveTouchActionForSubFrame_Params_Data();
  ~FrameWidget_SetInheritedEffectiveTouchActionForSubFrame_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_SetInheritedEffectiveTouchActionForSubFrame_Params_Data) == 16,
              "Bad sizeof(FrameWidget_SetInheritedEffectiveTouchActionForSubFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_UpdateRenderThrottlingStatusForSubFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_throttled : 1;
  uint8_t subtree_throttled : 1;
  uint8_t display_locked : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_UpdateRenderThrottlingStatusForSubFrame_Params_Data>;

  FrameWidget_UpdateRenderThrottlingStatusForSubFrame_Params_Data();
  ~FrameWidget_UpdateRenderThrottlingStatusForSubFrame_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_UpdateRenderThrottlingStatusForSubFrame_Params_Data) == 16,
              "Bad sizeof(FrameWidget_UpdateRenderThrottlingStatusForSubFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_SetIsInertForSubFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t inert : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_SetIsInertForSubFrame_Params_Data>;

  FrameWidget_SetIsInertForSubFrame_Params_Data();
  ~FrameWidget_SetIsInertForSubFrame_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_SetIsInertForSubFrame_Params_Data) == 16,
              "Bad sizeof(FrameWidget_SetIsInertForSubFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_ShowContextMenu_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t source_type;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> location;

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_ShowContextMenu_Params_Data>;

  FrameWidget_ShowContextMenu_Params_Data();
  ~FrameWidget_ShowContextMenu_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_ShowContextMenu_Params_Data) == 24,
              "Bad sizeof(FrameWidget_ShowContextMenu_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_EnableDeviceEmulation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::DeviceEmulationParams_Data> parameters;

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_EnableDeviceEmulation_Params_Data>;

  FrameWidget_EnableDeviceEmulation_Params_Data();
  ~FrameWidget_EnableDeviceEmulation_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_EnableDeviceEmulation_Params_Data) == 16,
              "Bad sizeof(FrameWidget_EnableDeviceEmulation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_DisableDeviceEmulation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_DisableDeviceEmulation_Params_Data>;

  FrameWidget_DisableDeviceEmulation_Params_Data();
  ~FrameWidget_DisableDeviceEmulation_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_DisableDeviceEmulation_Params_Data) == 8,
              "Bad sizeof(FrameWidget_DisableDeviceEmulation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_BindWidgetCompositor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data host;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_BindWidgetCompositor_Params_Data>;

  FrameWidget_BindWidgetCompositor_Params_Data();
  ~FrameWidget_BindWidgetCompositor_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_BindWidgetCompositor_Params_Data) == 16,
              "Bad sizeof(FrameWidget_BindWidgetCompositor_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_BindInputTargetClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data host;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_BindInputTargetClient_Params_Data>;

  FrameWidget_BindInputTargetClient_Params_Data();
  ~FrameWidget_BindInputTargetClient_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_BindInputTargetClient_Params_Data) == 16,
              "Bad sizeof(FrameWidget_BindInputTargetClient_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidget_SetViewportIntersection_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ViewportIntersectionState_Data> intersection_state;
  mojo::internal::Pointer<::blink::mojom::internal::VisualProperties_Data> visual_properties;

 private:
  friend class mojo::internal::MessageFragment<FrameWidget_SetViewportIntersection_Params_Data>;

  FrameWidget_SetViewportIntersection_Params_Data();
  ~FrameWidget_SetViewportIntersection_Params_Data() = delete;
};
static_assert(sizeof(FrameWidget_SetViewportIntersection_Params_Data) == 24,
              "Bad sizeof(FrameWidget_SetViewportIntersection_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> tap_point;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect_to_zoom;

 private:
  friend class mojo::internal::MessageFragment<FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_Params_Data>;

  FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_Params_Data();
  ~FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_Params_Data() = delete;
};
static_assert(sizeof(FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_Params_Data) == 24,
              "Bad sizeof(FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidgetHost_ZoomToFindInPageRectInMainFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect_to_zoom;

 private:
  friend class mojo::internal::MessageFragment<FrameWidgetHost_ZoomToFindInPageRectInMainFrame_Params_Data>;

  FrameWidgetHost_ZoomToFindInPageRectInMainFrame_Params_Data();
  ~FrameWidgetHost_ZoomToFindInPageRectInMainFrame_Params_Data() = delete;
};
static_assert(sizeof(FrameWidgetHost_ZoomToFindInPageRectInMainFrame_Params_Data) == 16,
              "Bad sizeof(FrameWidgetHost_ZoomToFindInPageRectInMainFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidgetHost_SetHasTouchEventConsumers_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::TouchEventConsumers_Data> touch_event_consumers;

 private:
  friend class mojo::internal::MessageFragment<FrameWidgetHost_SetHasTouchEventConsumers_Params_Data>;

  FrameWidgetHost_SetHasTouchEventConsumers_Params_Data();
  ~FrameWidgetHost_SetHasTouchEventConsumers_Params_Data() = delete;
};
static_assert(sizeof(FrameWidgetHost_SetHasTouchEventConsumers_Params_Data) == 16,
              "Bad sizeof(FrameWidgetHost_SetHasTouchEventConsumers_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidgetHost_IntrinsicSizingInfoChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::IntrinsicSizingInfo_Data> sizing_info;

 private:
  friend class mojo::internal::MessageFragment<FrameWidgetHost_IntrinsicSizingInfoChanged_Params_Data>;

  FrameWidgetHost_IntrinsicSizingInfoChanged_Params_Data();
  ~FrameWidgetHost_IntrinsicSizingInfoChanged_Params_Data() = delete;
};
static_assert(sizeof(FrameWidgetHost_IntrinsicSizingInfoChanged_Params_Data) == 16,
              "Bad sizeof(FrameWidgetHost_IntrinsicSizingInfoChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidgetHost_AutoscrollStart_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> position;

 private:
  friend class mojo::internal::MessageFragment<FrameWidgetHost_AutoscrollStart_Params_Data>;

  FrameWidgetHost_AutoscrollStart_Params_Data();
  ~FrameWidgetHost_AutoscrollStart_Params_Data() = delete;
};
static_assert(sizeof(FrameWidgetHost_AutoscrollStart_Params_Data) == 16,
              "Bad sizeof(FrameWidgetHost_AutoscrollStart_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidgetHost_AutoscrollFling_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Vector2dF_Data> velocity;

 private:
  friend class mojo::internal::MessageFragment<FrameWidgetHost_AutoscrollFling_Params_Data>;

  FrameWidgetHost_AutoscrollFling_Params_Data();
  ~FrameWidgetHost_AutoscrollFling_Params_Data() = delete;
};
static_assert(sizeof(FrameWidgetHost_AutoscrollFling_Params_Data) == 16,
              "Bad sizeof(FrameWidgetHost_AutoscrollFling_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidgetHost_AutoscrollEnd_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FrameWidgetHost_AutoscrollEnd_Params_Data>;

  FrameWidgetHost_AutoscrollEnd_Params_Data();
  ~FrameWidgetHost_AutoscrollEnd_Params_Data() = delete;
};
static_assert(sizeof(FrameWidgetHost_AutoscrollEnd_Params_Data) == 8,
              "Bad sizeof(FrameWidgetHost_AutoscrollEnd_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FrameWidgetHost_StartDragging_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::DragData_Data> drag_data;
  mojo::internal::Pointer<::blink::mojom::internal::AllowedDragOperations_Data> operations_allowed;
  mojo::internal::Pointer<::skia::mojom::internal::BitmapN32_Data> image;
  mojo::internal::Pointer<::gfx::mojom::internal::Vector2d_Data> bitmap_offset_in_dip;
  mojo::internal::Pointer<::blink::mojom::internal::DragEventSourceInfo_Data> event_info;

 private:
  friend class mojo::internal::MessageFragment<FrameWidgetHost_StartDragging_Params_Data>;

  FrameWidgetHost_StartDragging_Params_Data();
  ~FrameWidgetHost_StartDragging_Params_Data() = delete;
};
static_assert(sizeof(FrameWidgetHost_StartDragging_Params_Data) == 48,
              "Bad sizeof(FrameWidgetHost_StartDragging_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PopupWidgetHost_RequestClosePopup_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PopupWidgetHost_RequestClosePopup_Params_Data>;

  PopupWidgetHost_RequestClosePopup_Params_Data();
  ~PopupWidgetHost_RequestClosePopup_Params_Data() = delete;
};
static_assert(sizeof(PopupWidgetHost_RequestClosePopup_Params_Data) == 8,
              "Bad sizeof(PopupWidgetHost_RequestClosePopup_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PopupWidgetHost_ShowPopup_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> initial_rect;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> anchor_rect;

 private:
  friend class mojo::internal::MessageFragment<PopupWidgetHost_ShowPopup_Params_Data>;

  PopupWidgetHost_ShowPopup_Params_Data();
  ~PopupWidgetHost_ShowPopup_Params_Data() = delete;
};
static_assert(sizeof(PopupWidgetHost_ShowPopup_Params_Data) == 24,
              "Bad sizeof(PopupWidgetHost_ShowPopup_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PopupWidgetHost_ShowPopup_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PopupWidgetHost_ShowPopup_ResponseParams_Data>;

  PopupWidgetHost_ShowPopup_ResponseParams_Data();
  ~PopupWidgetHost_ShowPopup_ResponseParams_Data() = delete;
};
static_assert(sizeof(PopupWidgetHost_ShowPopup_ResponseParams_Data) == 8,
              "Bad sizeof(PopupWidgetHost_ShowPopup_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PopupWidgetHost_SetPopupBounds_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> bounds;

 private:
  friend class mojo::internal::MessageFragment<PopupWidgetHost_SetPopupBounds_Params_Data>;

  PopupWidgetHost_SetPopupBounds_Params_Data();
  ~PopupWidgetHost_SetPopupBounds_Params_Data() = delete;
};
static_assert(sizeof(PopupWidgetHost_SetPopupBounds_Params_Data) == 16,
              "Bad sizeof(PopupWidgetHost_SetPopupBounds_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PopupWidgetHost_SetPopupBounds_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PopupWidgetHost_SetPopupBounds_ResponseParams_Data>;

  PopupWidgetHost_SetPopupBounds_ResponseParams_Data();
  ~PopupWidgetHost_SetPopupBounds_ResponseParams_Data() = delete;
};
static_assert(sizeof(PopupWidgetHost_SetPopupBounds_ResponseParams_Data) == 8,
              "Bad sizeof(PopupWidgetHost_SetPopupBounds_ResponseParams_Data)");

}  // namespace internal


class FrameWidget_DragTargetDragEnter_ParamsDataView {
 public:
  FrameWidget_DragTargetDragEnter_ParamsDataView() = default;

  FrameWidget_DragTargetDragEnter_ParamsDataView(
      internal::FrameWidget_DragTargetDragEnter_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDragDataDataView(
      ::blink::mojom::DragDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDragData(UserType* output) {
    
    auto* pointer = data_->drag_data.Get();
    return mojo::internal::Deserialize<::blink::mojom::DragDataDataView>(
        pointer, output, message_);
  }
  inline void GetPointInViewportDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPointInViewport(UserType* output) {
    
    auto* pointer = data_->point_in_viewport.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetScreenPointDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScreenPoint(UserType* output) {
    
    auto* pointer = data_->screen_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetOperationsAllowedDataView(
      ::blink::mojom::AllowedDragOperationsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOperationsAllowed(UserType* output) {
    
    auto* pointer = data_->operations_allowed.Get();
    return mojo::internal::Deserialize<::blink::mojom::AllowedDragOperationsDataView>(
        pointer, output, message_);
  }
  uint32_t key_modifiers() const {
    return data_->key_modifiers;
  }
 private:
  internal::FrameWidget_DragTargetDragEnter_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidget_DragTargetDragEnter_ResponseParamsDataView {
 public:
  FrameWidget_DragTargetDragEnter_ResponseParamsDataView() = default;

  FrameWidget_DragTargetDragEnter_ResponseParamsDataView(
      internal::FrameWidget_DragTargetDragEnter_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadOperation(UserType* output) const {
    auto data_value = data_->operation;
    return mojo::internal::Deserialize<::ui::mojom::DragOperation>(
        data_value, output);
  }
  ::ui::mojom::DragOperation operation() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ui::mojom::DragOperation>(data_->operation));
  }
 private:
  internal::FrameWidget_DragTargetDragEnter_ResponseParams_Data* data_ = nullptr;
};



class FrameWidget_DragTargetDragOver_ParamsDataView {
 public:
  FrameWidget_DragTargetDragOver_ParamsDataView() = default;

  FrameWidget_DragTargetDragOver_ParamsDataView(
      internal::FrameWidget_DragTargetDragOver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPointInViewportDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPointInViewport(UserType* output) {
    
    auto* pointer = data_->point_in_viewport.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetScreenPointDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScreenPoint(UserType* output) {
    
    auto* pointer = data_->screen_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetOperationsAllowedDataView(
      ::blink::mojom::AllowedDragOperationsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOperationsAllowed(UserType* output) {
    
    auto* pointer = data_->operations_allowed.Get();
    return mojo::internal::Deserialize<::blink::mojom::AllowedDragOperationsDataView>(
        pointer, output, message_);
  }
  uint32_t key_modifiers() const {
    return data_->key_modifiers;
  }
 private:
  internal::FrameWidget_DragTargetDragOver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidget_DragTargetDragOver_ResponseParamsDataView {
 public:
  FrameWidget_DragTargetDragOver_ResponseParamsDataView() = default;

  FrameWidget_DragTargetDragOver_ResponseParamsDataView(
      internal::FrameWidget_DragTargetDragOver_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadOperation(UserType* output) const {
    auto data_value = data_->operation;
    return mojo::internal::Deserialize<::ui::mojom::DragOperation>(
        data_value, output);
  }
  ::ui::mojom::DragOperation operation() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ui::mojom::DragOperation>(data_->operation));
  }
 private:
  internal::FrameWidget_DragTargetDragOver_ResponseParams_Data* data_ = nullptr;
};



class FrameWidget_DragTargetDragLeave_ParamsDataView {
 public:
  FrameWidget_DragTargetDragLeave_ParamsDataView() = default;

  FrameWidget_DragTargetDragLeave_ParamsDataView(
      internal::FrameWidget_DragTargetDragLeave_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPointInViewportDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPointInViewport(UserType* output) {
    
    auto* pointer = data_->point_in_viewport.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetScreenPointDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScreenPoint(UserType* output) {
    
    auto* pointer = data_->screen_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidget_DragTargetDragLeave_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidget_DragTargetDrop_ParamsDataView {
 public:
  FrameWidget_DragTargetDrop_ParamsDataView() = default;

  FrameWidget_DragTargetDrop_ParamsDataView(
      internal::FrameWidget_DragTargetDrop_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDragDataDataView(
      ::blink::mojom::DragDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDragData(UserType* output) {
    
    auto* pointer = data_->drag_data.Get();
    return mojo::internal::Deserialize<::blink::mojom::DragDataDataView>(
        pointer, output, message_);
  }
  inline void GetPointInViewportDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPointInViewport(UserType* output) {
    
    auto* pointer = data_->point_in_viewport.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetScreenPointDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScreenPoint(UserType* output) {
    
    auto* pointer = data_->screen_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  uint32_t key_modifiers() const {
    return data_->key_modifiers;
  }
 private:
  internal::FrameWidget_DragTargetDrop_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidget_DragTargetDrop_ResponseParamsDataView {
 public:
  FrameWidget_DragTargetDrop_ResponseParamsDataView() = default;

  FrameWidget_DragTargetDrop_ResponseParamsDataView(
      internal::FrameWidget_DragTargetDrop_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameWidget_DragTargetDrop_ResponseParams_Data* data_ = nullptr;
};



class FrameWidget_DragSourceEndedAt_ParamsDataView {
 public:
  FrameWidget_DragSourceEndedAt_ParamsDataView() = default;

  FrameWidget_DragSourceEndedAt_ParamsDataView(
      internal::FrameWidget_DragSourceEndedAt_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPointInViewportDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPointInViewport(UserType* output) {
    
    auto* pointer = data_->point_in_viewport.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetScreenPointDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScreenPoint(UserType* output) {
    
    auto* pointer = data_->screen_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadDragOperation(UserType* output) const {
    auto data_value = data_->drag_operation;
    return mojo::internal::Deserialize<::ui::mojom::DragOperation>(
        data_value, output);
  }
  ::ui::mojom::DragOperation drag_operation() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ui::mojom::DragOperation>(data_->drag_operation));
  }
 private:
  internal::FrameWidget_DragSourceEndedAt_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidget_DragSourceEndedAt_ResponseParamsDataView {
 public:
  FrameWidget_DragSourceEndedAt_ResponseParamsDataView() = default;

  FrameWidget_DragSourceEndedAt_ResponseParamsDataView(
      internal::FrameWidget_DragSourceEndedAt_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameWidget_DragSourceEndedAt_ResponseParams_Data* data_ = nullptr;
};



class FrameWidget_DragSourceSystemDragEnded_ParamsDataView {
 public:
  FrameWidget_DragSourceSystemDragEnded_ParamsDataView() = default;

  FrameWidget_DragSourceSystemDragEnded_ParamsDataView(
      internal::FrameWidget_DragSourceSystemDragEnded_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameWidget_DragSourceSystemDragEnded_Params_Data* data_ = nullptr;
};



class FrameWidget_OnStartStylusWriting_ParamsDataView {
 public:
  FrameWidget_OnStartStylusWriting_ParamsDataView() = default;

  FrameWidget_OnStartStylusWriting_ParamsDataView(
      internal::FrameWidget_OnStartStylusWriting_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameWidget_OnStartStylusWriting_Params_Data* data_ = nullptr;
};



class FrameWidget_OnStartStylusWriting_ResponseParamsDataView {
 public:
  FrameWidget_OnStartStylusWriting_ResponseParamsDataView() = default;

  FrameWidget_OnStartStylusWriting_ResponseParamsDataView(
      internal::FrameWidget_OnStartStylusWriting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFocusedEditBoundsDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFocusedEditBounds(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::gfx::mojom::RectDataView, UserType>(),
    "Attempting to read the optional `focused_edit_bounds` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFocusedEditBounds` instead "
    "of `ReadFocusedEditBounds if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->focused_edit_bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  inline void GetCaretBoundsDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCaretBounds(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::gfx::mojom::RectDataView, UserType>(),
    "Attempting to read the optional `caret_bounds` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadCaretBounds` instead "
    "of `ReadCaretBounds if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->caret_bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidget_OnStartStylusWriting_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidget_SetBackgroundOpaque_ParamsDataView {
 public:
  FrameWidget_SetBackgroundOpaque_ParamsDataView() = default;

  FrameWidget_SetBackgroundOpaque_ParamsDataView(
      internal::FrameWidget_SetBackgroundOpaque_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool opaque() const {
    return data_->opaque;
  }
 private:
  internal::FrameWidget_SetBackgroundOpaque_Params_Data* data_ = nullptr;
};



class FrameWidget_SetTextDirection_ParamsDataView {
 public:
  FrameWidget_SetTextDirection_ParamsDataView() = default;

  FrameWidget_SetTextDirection_ParamsDataView(
      internal::FrameWidget_SetTextDirection_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadDirection(UserType* output) const {
    auto data_value = data_->direction;
    return mojo::internal::Deserialize<::mojo_base::mojom::TextDirection>(
        data_value, output);
  }
  ::mojo_base::mojom::TextDirection direction() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::mojo_base::mojom::TextDirection>(data_->direction));
  }
 private:
  internal::FrameWidget_SetTextDirection_Params_Data* data_ = nullptr;
};



class FrameWidget_SetActive_ParamsDataView {
 public:
  FrameWidget_SetActive_ParamsDataView() = default;

  FrameWidget_SetActive_ParamsDataView(
      internal::FrameWidget_SetActive_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool active() const {
    return data_->active;
  }
 private:
  internal::FrameWidget_SetActive_Params_Data* data_ = nullptr;
};



class FrameWidget_SetInheritedEffectiveTouchActionForSubFrame_ParamsDataView {
 public:
  FrameWidget_SetInheritedEffectiveTouchActionForSubFrame_ParamsDataView() = default;

  FrameWidget_SetInheritedEffectiveTouchActionForSubFrame_ParamsDataView(
      internal::FrameWidget_SetInheritedEffectiveTouchActionForSubFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadTouchAction(UserType* output) const {
    auto data_value = data_->touch_action;
    return mojo::internal::Deserialize<::cc::mojom::TouchAction>(
        data_value, output);
  }
  ::cc::mojom::TouchAction touch_action() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::cc::mojom::TouchAction>(data_->touch_action));
  }
 private:
  internal::FrameWidget_SetInheritedEffectiveTouchActionForSubFrame_Params_Data* data_ = nullptr;
};



class FrameWidget_UpdateRenderThrottlingStatusForSubFrame_ParamsDataView {
 public:
  FrameWidget_UpdateRenderThrottlingStatusForSubFrame_ParamsDataView() = default;

  FrameWidget_UpdateRenderThrottlingStatusForSubFrame_ParamsDataView(
      internal::FrameWidget_UpdateRenderThrottlingStatusForSubFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_throttled() const {
    return data_->is_throttled;
  }
  bool subtree_throttled() const {
    return data_->subtree_throttled;
  }
  bool display_locked() const {
    return data_->display_locked;
  }
 private:
  internal::FrameWidget_UpdateRenderThrottlingStatusForSubFrame_Params_Data* data_ = nullptr;
};



class FrameWidget_SetIsInertForSubFrame_ParamsDataView {
 public:
  FrameWidget_SetIsInertForSubFrame_ParamsDataView() = default;

  FrameWidget_SetIsInertForSubFrame_ParamsDataView(
      internal::FrameWidget_SetIsInertForSubFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool inert() const {
    return data_->inert;
  }
 private:
  internal::FrameWidget_SetIsInertForSubFrame_Params_Data* data_ = nullptr;
};



class FrameWidget_ShowContextMenu_ParamsDataView {
 public:
  FrameWidget_ShowContextMenu_ParamsDataView() = default;

  FrameWidget_ShowContextMenu_ParamsDataView(
      internal::FrameWidget_ShowContextMenu_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadSourceType(UserType* output) const {
    auto data_value = data_->source_type;
    return mojo::internal::Deserialize<::ui::mojom::MenuSourceType>(
        data_value, output);
  }
  ::ui::mojom::MenuSourceType source_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ui::mojom::MenuSourceType>(data_->source_type));
  }
  inline void GetLocationDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocation(UserType* output) {
    
    auto* pointer = data_->location.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidget_ShowContextMenu_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidget_EnableDeviceEmulation_ParamsDataView {
 public:
  FrameWidget_EnableDeviceEmulation_ParamsDataView() = default;

  FrameWidget_EnableDeviceEmulation_ParamsDataView(
      internal::FrameWidget_EnableDeviceEmulation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParametersDataView(
      ::blink::mojom::DeviceEmulationParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParameters(UserType* output) {
    
    auto* pointer = data_->parameters.Get();
    return mojo::internal::Deserialize<::blink::mojom::DeviceEmulationParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidget_EnableDeviceEmulation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidget_DisableDeviceEmulation_ParamsDataView {
 public:
  FrameWidget_DisableDeviceEmulation_ParamsDataView() = default;

  FrameWidget_DisableDeviceEmulation_ParamsDataView(
      internal::FrameWidget_DisableDeviceEmulation_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameWidget_DisableDeviceEmulation_Params_Data* data_ = nullptr;
};



class FrameWidget_BindWidgetCompositor_ParamsDataView {
 public:
  FrameWidget_BindWidgetCompositor_ParamsDataView() = default;

  FrameWidget_BindWidgetCompositor_ParamsDataView(
      internal::FrameWidget_BindWidgetCompositor_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::WidgetCompositorInterfaceBase>>(
            &data_->host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FrameWidget_BindWidgetCompositor_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidget_BindInputTargetClient_ParamsDataView {
 public:
  FrameWidget_BindInputTargetClient_ParamsDataView() = default;

  FrameWidget_BindInputTargetClient_ParamsDataView(
      internal::FrameWidget_BindInputTargetClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::viz::mojom::InputTargetClientInterfaceBase>>(
            &data_->host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FrameWidget_BindInputTargetClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidget_SetViewportIntersection_ParamsDataView {
 public:
  FrameWidget_SetViewportIntersection_ParamsDataView() = default;

  FrameWidget_SetViewportIntersection_ParamsDataView(
      internal::FrameWidget_SetViewportIntersection_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIntersectionStateDataView(
      ::blink::mojom::ViewportIntersectionStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIntersectionState(UserType* output) {
    
    auto* pointer = data_->intersection_state.Get();
    return mojo::internal::Deserialize<::blink::mojom::ViewportIntersectionStateDataView>(
        pointer, output, message_);
  }
  inline void GetVisualPropertiesDataView(
      ::blink::mojom::VisualPropertiesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVisualProperties(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::VisualPropertiesDataView, UserType>(),
    "Attempting to read the optional `visual_properties` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadVisualProperties` instead "
    "of `ReadVisualProperties if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->visual_properties.Get();
    return mojo::internal::Deserialize<::blink::mojom::VisualPropertiesDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidget_SetViewportIntersection_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_ParamsDataView {
 public:
  FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_ParamsDataView() = default;

  FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_ParamsDataView(
      internal::FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTapPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTapPoint(UserType* output) {
    
    auto* pointer = data_->tap_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
  inline void GetRectToZoomDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRectToZoom(UserType* output) {
    
    auto* pointer = data_->rect_to_zoom.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidgetHost_ZoomToFindInPageRectInMainFrame_ParamsDataView {
 public:
  FrameWidgetHost_ZoomToFindInPageRectInMainFrame_ParamsDataView() = default;

  FrameWidgetHost_ZoomToFindInPageRectInMainFrame_ParamsDataView(
      internal::FrameWidgetHost_ZoomToFindInPageRectInMainFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRectToZoomDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRectToZoom(UserType* output) {
    
    auto* pointer = data_->rect_to_zoom.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidgetHost_ZoomToFindInPageRectInMainFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidgetHost_SetHasTouchEventConsumers_ParamsDataView {
 public:
  FrameWidgetHost_SetHasTouchEventConsumers_ParamsDataView() = default;

  FrameWidgetHost_SetHasTouchEventConsumers_ParamsDataView(
      internal::FrameWidgetHost_SetHasTouchEventConsumers_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTouchEventConsumersDataView(
      ::blink::mojom::TouchEventConsumersDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTouchEventConsumers(UserType* output) {
    
    auto* pointer = data_->touch_event_consumers.Get();
    return mojo::internal::Deserialize<::blink::mojom::TouchEventConsumersDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidgetHost_SetHasTouchEventConsumers_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidgetHost_IntrinsicSizingInfoChanged_ParamsDataView {
 public:
  FrameWidgetHost_IntrinsicSizingInfoChanged_ParamsDataView() = default;

  FrameWidgetHost_IntrinsicSizingInfoChanged_ParamsDataView(
      internal::FrameWidgetHost_IntrinsicSizingInfoChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSizingInfoDataView(
      ::blink::mojom::IntrinsicSizingInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSizingInfo(UserType* output) {
    
    auto* pointer = data_->sizing_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::IntrinsicSizingInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidgetHost_IntrinsicSizingInfoChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidgetHost_AutoscrollStart_ParamsDataView {
 public:
  FrameWidgetHost_AutoscrollStart_ParamsDataView() = default;

  FrameWidgetHost_AutoscrollStart_ParamsDataView(
      internal::FrameWidgetHost_AutoscrollStart_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPositionDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPosition(UserType* output) {
    
    auto* pointer = data_->position.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidgetHost_AutoscrollStart_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidgetHost_AutoscrollFling_ParamsDataView {
 public:
  FrameWidgetHost_AutoscrollFling_ParamsDataView() = default;

  FrameWidgetHost_AutoscrollFling_ParamsDataView(
      internal::FrameWidgetHost_AutoscrollFling_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetVelocityDataView(
      ::gfx::mojom::Vector2dFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVelocity(UserType* output) {
    
    auto* pointer = data_->velocity.Get();
    return mojo::internal::Deserialize<::gfx::mojom::Vector2dFDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidgetHost_AutoscrollFling_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameWidgetHost_AutoscrollEnd_ParamsDataView {
 public:
  FrameWidgetHost_AutoscrollEnd_ParamsDataView() = default;

  FrameWidgetHost_AutoscrollEnd_ParamsDataView(
      internal::FrameWidgetHost_AutoscrollEnd_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameWidgetHost_AutoscrollEnd_Params_Data* data_ = nullptr;
};



class FrameWidgetHost_StartDragging_ParamsDataView {
 public:
  FrameWidgetHost_StartDragging_ParamsDataView() = default;

  FrameWidgetHost_StartDragging_ParamsDataView(
      internal::FrameWidgetHost_StartDragging_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDragDataDataView(
      ::blink::mojom::DragDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDragData(UserType* output) {
    
    auto* pointer = data_->drag_data.Get();
    return mojo::internal::Deserialize<::blink::mojom::DragDataDataView>(
        pointer, output, message_);
  }
  inline void GetOperationsAllowedDataView(
      ::blink::mojom::AllowedDragOperationsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOperationsAllowed(UserType* output) {
    
    auto* pointer = data_->operations_allowed.Get();
    return mojo::internal::Deserialize<::blink::mojom::AllowedDragOperationsDataView>(
        pointer, output, message_);
  }
  inline void GetImageDataView(
      ::skia::mojom::BitmapN32DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadImage(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::skia::mojom::BitmapN32DataView, UserType>(),
    "Attempting to read the optional `image` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadImage` instead "
    "of `ReadImage if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->image.Get();
    return mojo::internal::Deserialize<::skia::mojom::BitmapN32DataView>(
        pointer, output, message_);
  }
  inline void GetBitmapOffsetInDipDataView(
      ::gfx::mojom::Vector2dDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBitmapOffsetInDip(UserType* output) {
    
    auto* pointer = data_->bitmap_offset_in_dip.Get();
    return mojo::internal::Deserialize<::gfx::mojom::Vector2dDataView>(
        pointer, output, message_);
  }
  inline void GetEventInfoDataView(
      ::blink::mojom::DragEventSourceInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEventInfo(UserType* output) {
    
    auto* pointer = data_->event_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::DragEventSourceInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameWidgetHost_StartDragging_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PopupWidgetHost_RequestClosePopup_ParamsDataView {
 public:
  PopupWidgetHost_RequestClosePopup_ParamsDataView() = default;

  PopupWidgetHost_RequestClosePopup_ParamsDataView(
      internal::PopupWidgetHost_RequestClosePopup_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PopupWidgetHost_RequestClosePopup_Params_Data* data_ = nullptr;
};



class PopupWidgetHost_ShowPopup_ParamsDataView {
 public:
  PopupWidgetHost_ShowPopup_ParamsDataView() = default;

  PopupWidgetHost_ShowPopup_ParamsDataView(
      internal::PopupWidgetHost_ShowPopup_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInitialRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInitialRect(UserType* output) {
    
    auto* pointer = data_->initial_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  inline void GetAnchorRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAnchorRect(UserType* output) {
    
    auto* pointer = data_->anchor_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::PopupWidgetHost_ShowPopup_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PopupWidgetHost_ShowPopup_ResponseParamsDataView {
 public:
  PopupWidgetHost_ShowPopup_ResponseParamsDataView() = default;

  PopupWidgetHost_ShowPopup_ResponseParamsDataView(
      internal::PopupWidgetHost_ShowPopup_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PopupWidgetHost_ShowPopup_ResponseParams_Data* data_ = nullptr;
};



class PopupWidgetHost_SetPopupBounds_ParamsDataView {
 public:
  PopupWidgetHost_SetPopupBounds_ParamsDataView() = default;

  PopupWidgetHost_SetPopupBounds_ParamsDataView(
      internal::PopupWidgetHost_SetPopupBounds_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBoundsDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBounds(UserType* output) {
    
    auto* pointer = data_->bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::PopupWidgetHost_SetPopupBounds_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PopupWidgetHost_SetPopupBounds_ResponseParamsDataView {
 public:
  PopupWidgetHost_SetPopupBounds_ResponseParamsDataView() = default;

  PopupWidgetHost_SetPopupBounds_ResponseParamsDataView(
      internal::PopupWidgetHost_SetPopupBounds_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PopupWidgetHost_SetPopupBounds_ResponseParams_Data* data_ = nullptr;
};


inline void FrameWidget_DragTargetDragEnter_ParamsDataView::GetDragDataDataView(
    ::blink::mojom::DragDataDataView* output) {
  auto pointer = data_->drag_data.Get();
  *output = ::blink::mojom::DragDataDataView(pointer, message_);
}
inline void FrameWidget_DragTargetDragEnter_ParamsDataView::GetPointInViewportDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->point_in_viewport.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void FrameWidget_DragTargetDragEnter_ParamsDataView::GetScreenPointDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->screen_point.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void FrameWidget_DragTargetDragEnter_ParamsDataView::GetOperationsAllowedDataView(
    ::blink::mojom::AllowedDragOperationsDataView* output) {
  auto pointer = data_->operations_allowed.Get();
  *output = ::blink::mojom::AllowedDragOperationsDataView(pointer, message_);
}




inline void FrameWidget_DragTargetDragOver_ParamsDataView::GetPointInViewportDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->point_in_viewport.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void FrameWidget_DragTargetDragOver_ParamsDataView::GetScreenPointDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->screen_point.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void FrameWidget_DragTargetDragOver_ParamsDataView::GetOperationsAllowedDataView(
    ::blink::mojom::AllowedDragOperationsDataView* output) {
  auto pointer = data_->operations_allowed.Get();
  *output = ::blink::mojom::AllowedDragOperationsDataView(pointer, message_);
}




inline void FrameWidget_DragTargetDragLeave_ParamsDataView::GetPointInViewportDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->point_in_viewport.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void FrameWidget_DragTargetDragLeave_ParamsDataView::GetScreenPointDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->screen_point.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}


inline void FrameWidget_DragTargetDrop_ParamsDataView::GetDragDataDataView(
    ::blink::mojom::DragDataDataView* output) {
  auto pointer = data_->drag_data.Get();
  *output = ::blink::mojom::DragDataDataView(pointer, message_);
}
inline void FrameWidget_DragTargetDrop_ParamsDataView::GetPointInViewportDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->point_in_viewport.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void FrameWidget_DragTargetDrop_ParamsDataView::GetScreenPointDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->screen_point.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}




inline void FrameWidget_DragSourceEndedAt_ParamsDataView::GetPointInViewportDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->point_in_viewport.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void FrameWidget_DragSourceEndedAt_ParamsDataView::GetScreenPointDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->screen_point.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}








inline void FrameWidget_OnStartStylusWriting_ResponseParamsDataView::GetFocusedEditBoundsDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->focused_edit_bounds.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void FrameWidget_OnStartStylusWriting_ResponseParamsDataView::GetCaretBoundsDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->caret_bounds.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}














inline void FrameWidget_ShowContextMenu_ParamsDataView::GetLocationDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->location.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}


inline void FrameWidget_EnableDeviceEmulation_ParamsDataView::GetParametersDataView(
    ::blink::mojom::DeviceEmulationParamsDataView* output) {
  auto pointer = data_->parameters.Get();
  *output = ::blink::mojom::DeviceEmulationParamsDataView(pointer, message_);
}








inline void FrameWidget_SetViewportIntersection_ParamsDataView::GetIntersectionStateDataView(
    ::blink::mojom::ViewportIntersectionStateDataView* output) {
  auto pointer = data_->intersection_state.Get();
  *output = ::blink::mojom::ViewportIntersectionStateDataView(pointer, message_);
}
inline void FrameWidget_SetViewportIntersection_ParamsDataView::GetVisualPropertiesDataView(
    ::blink::mojom::VisualPropertiesDataView* output) {
  auto pointer = data_->visual_properties.Get();
  *output = ::blink::mojom::VisualPropertiesDataView(pointer, message_);
}


inline void FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_ParamsDataView::GetTapPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->tap_point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}
inline void FrameWidgetHost_AnimateDoubleTapZoomInMainFrame_ParamsDataView::GetRectToZoomDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect_to_zoom.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void FrameWidgetHost_ZoomToFindInPageRectInMainFrame_ParamsDataView::GetRectToZoomDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect_to_zoom.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void FrameWidgetHost_SetHasTouchEventConsumers_ParamsDataView::GetTouchEventConsumersDataView(
    ::blink::mojom::TouchEventConsumersDataView* output) {
  auto pointer = data_->touch_event_consumers.Get();
  *output = ::blink::mojom::TouchEventConsumersDataView(pointer, message_);
}


inline void FrameWidgetHost_IntrinsicSizingInfoChanged_ParamsDataView::GetSizingInfoDataView(
    ::blink::mojom::IntrinsicSizingInfoDataView* output) {
  auto pointer = data_->sizing_info.Get();
  *output = ::blink::mojom::IntrinsicSizingInfoDataView(pointer, message_);
}


inline void FrameWidgetHost_AutoscrollStart_ParamsDataView::GetPositionDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->position.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}


inline void FrameWidgetHost_AutoscrollFling_ParamsDataView::GetVelocityDataView(
    ::gfx::mojom::Vector2dFDataView* output) {
  auto pointer = data_->velocity.Get();
  *output = ::gfx::mojom::Vector2dFDataView(pointer, message_);
}




inline void FrameWidgetHost_StartDragging_ParamsDataView::GetDragDataDataView(
    ::blink::mojom::DragDataDataView* output) {
  auto pointer = data_->drag_data.Get();
  *output = ::blink::mojom::DragDataDataView(pointer, message_);
}
inline void FrameWidgetHost_StartDragging_ParamsDataView::GetOperationsAllowedDataView(
    ::blink::mojom::AllowedDragOperationsDataView* output) {
  auto pointer = data_->operations_allowed.Get();
  *output = ::blink::mojom::AllowedDragOperationsDataView(pointer, message_);
}
inline void FrameWidgetHost_StartDragging_ParamsDataView::GetImageDataView(
    ::skia::mojom::BitmapN32DataView* output) {
  auto pointer = data_->image.Get();
  *output = ::skia::mojom::BitmapN32DataView(pointer, message_);
}
inline void FrameWidgetHost_StartDragging_ParamsDataView::GetBitmapOffsetInDipDataView(
    ::gfx::mojom::Vector2dDataView* output) {
  auto pointer = data_->bitmap_offset_in_dip.Get();
  *output = ::gfx::mojom::Vector2dDataView(pointer, message_);
}
inline void FrameWidgetHost_StartDragging_ParamsDataView::GetEventInfoDataView(
    ::blink::mojom::DragEventSourceInfoDataView* output) {
  auto pointer = data_->event_info.Get();
  *output = ::blink::mojom::DragEventSourceInfoDataView(pointer, message_);
}




inline void PopupWidgetHost_ShowPopup_ParamsDataView::GetInitialRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->initial_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void PopupWidgetHost_ShowPopup_ParamsDataView::GetAnchorRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->anchor_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}




inline void PopupWidgetHost_SetPopupBounds_ParamsDataView::GetBoundsDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->bounds.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_WIDGET_MOJOM_PARAMS_DATA_H_