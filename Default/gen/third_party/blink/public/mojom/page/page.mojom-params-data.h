// third_party/blink/public/mojom/page/page.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_PAGE_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_PAGE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PageBroadcast_SetPageLifecycleState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PageLifecycleState_Data> state;
  mojo::internal::Pointer<internal::PageRestoreParams_Data> page_restore_params;

 private:
  friend class mojo::internal::MessageFragment<PageBroadcast_SetPageLifecycleState_Params_Data>;

  PageBroadcast_SetPageLifecycleState_Params_Data();
  ~PageBroadcast_SetPageLifecycleState_Params_Data() = delete;
};
static_assert(sizeof(PageBroadcast_SetPageLifecycleState_Params_Data) == 24,
              "Bad sizeof(PageBroadcast_SetPageLifecycleState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PageBroadcast_SetPageLifecycleState_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PageBroadcast_SetPageLifecycleState_ResponseParams_Data>;

  PageBroadcast_SetPageLifecycleState_ResponseParams_Data();
  ~PageBroadcast_SetPageLifecycleState_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageBroadcast_SetPageLifecycleState_ResponseParams_Data) == 8,
              "Bad sizeof(PageBroadcast_SetPageLifecycleState_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PageBroadcast_AudioStateChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_audio_playing : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<PageBroadcast_AudioStateChanged_Params_Data>;

  PageBroadcast_AudioStateChanged_Params_Data();
  ~PageBroadcast_AudioStateChanged_Params_Data() = delete;
};
static_assert(sizeof(PageBroadcast_AudioStateChanged_Params_Data) == 16,
              "Bad sizeof(PageBroadcast_AudioStateChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PageBroadcast_ActivatePrerenderedPage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PrerenderPageActivationParams_Data> prerender_page_activation_params;

 private:
  friend class mojo::internal::MessageFragment<PageBroadcast_ActivatePrerenderedPage_Params_Data>;

  PageBroadcast_ActivatePrerenderedPage_Params_Data();
  ~PageBroadcast_ActivatePrerenderedPage_Params_Data() = delete;
};
static_assert(sizeof(PageBroadcast_ActivatePrerenderedPage_Params_Data) == 16,
              "Bad sizeof(PageBroadcast_ActivatePrerenderedPage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data>;

  PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data();
  ~PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data) == 8,
              "Bad sizeof(PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PageBroadcast_SetInsidePortal_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_inside_portal : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<PageBroadcast_SetInsidePortal_Params_Data>;

  PageBroadcast_SetInsidePortal_Params_Data();
  ~PageBroadcast_SetInsidePortal_Params_Data() = delete;
};
static_assert(sizeof(PageBroadcast_SetInsidePortal_Params_Data) == 16,
              "Bad sizeof(PageBroadcast_SetInsidePortal_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PageBroadcast_UpdateWebPreferences_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::WebPreferences_Data> preferences;

 private:
  friend class mojo::internal::MessageFragment<PageBroadcast_UpdateWebPreferences_Params_Data>;

  PageBroadcast_UpdateWebPreferences_Params_Data();
  ~PageBroadcast_UpdateWebPreferences_Params_Data() = delete;
};
static_assert(sizeof(PageBroadcast_UpdateWebPreferences_Params_Data) == 16,
              "Bad sizeof(PageBroadcast_UpdateWebPreferences_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PageBroadcast_UpdateRendererPreferences_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::RendererPreferences_Data> preferences;

 private:
  friend class mojo::internal::MessageFragment<PageBroadcast_UpdateRendererPreferences_Params_Data>;

  PageBroadcast_UpdateRendererPreferences_Params_Data();
  ~PageBroadcast_UpdateRendererPreferences_Params_Data() = delete;
};
static_assert(sizeof(PageBroadcast_UpdateRendererPreferences_Params_Data) == 16,
              "Bad sizeof(PageBroadcast_UpdateRendererPreferences_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PageBroadcast_SetHistoryOffsetAndLength_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t offset;
  int32_t length;

 private:
  friend class mojo::internal::MessageFragment<PageBroadcast_SetHistoryOffsetAndLength_Params_Data>;

  PageBroadcast_SetHistoryOffsetAndLength_Params_Data();
  ~PageBroadcast_SetHistoryOffsetAndLength_Params_Data() = delete;
};
static_assert(sizeof(PageBroadcast_SetHistoryOffsetAndLength_Params_Data) == 16,
              "Bad sizeof(PageBroadcast_SetHistoryOffsetAndLength_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PageBroadcast_SetPageBaseBackgroundColor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> color;

 private:
  friend class mojo::internal::MessageFragment<PageBroadcast_SetPageBaseBackgroundColor_Params_Data>;

  PageBroadcast_SetPageBaseBackgroundColor_Params_Data();
  ~PageBroadcast_SetPageBaseBackgroundColor_Params_Data() = delete;
};
static_assert(sizeof(PageBroadcast_SetPageBaseBackgroundColor_Params_Data) == 16,
              "Bad sizeof(PageBroadcast_SetPageBaseBackgroundColor_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PageBroadcast_CreateRemoteMainFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameToken_Data> token;
  ::blink::mojom::internal::FrameToken_Data opener_frame_token;
  mojo::internal::Pointer<::blink::mojom::internal::FrameReplicationState_Data> replication_state;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_frame_token;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameInterfacesFromBrowser_Data> remote_frame_interfaces;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteMainFrameInterfaces_Data> remote_main_frame_interfaces;

 private:
  friend class mojo::internal::MessageFragment<PageBroadcast_CreateRemoteMainFrame_Params_Data>;

  PageBroadcast_CreateRemoteMainFrame_Params_Data();
  ~PageBroadcast_CreateRemoteMainFrame_Params_Data() = delete;
};
static_assert(sizeof(PageBroadcast_CreateRemoteMainFrame_Params_Data) == 64,
              "Bad sizeof(PageBroadcast_CreateRemoteMainFrame_Params_Data)");

}  // namespace internal


class PageBroadcast_SetPageLifecycleState_ParamsDataView {
 public:
  PageBroadcast_SetPageLifecycleState_ParamsDataView() = default;

  PageBroadcast_SetPageLifecycleState_ParamsDataView(
      internal::PageBroadcast_SetPageLifecycleState_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStateDataView(
      PageLifecycleStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) {
    
    auto* pointer = data_->state.Get();
    return mojo::internal::Deserialize<::blink::mojom::PageLifecycleStateDataView>(
        pointer, output, message_);
  }
  inline void GetPageRestoreParamsDataView(
      PageRestoreParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPageRestoreParams(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::PageRestoreParamsDataView, UserType>(),
    "Attempting to read the optional `page_restore_params` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPageRestoreParams` instead "
    "of `ReadPageRestoreParams if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->page_restore_params.Get();
    return mojo::internal::Deserialize<::blink::mojom::PageRestoreParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::PageBroadcast_SetPageLifecycleState_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PageBroadcast_SetPageLifecycleState_ResponseParamsDataView {
 public:
  PageBroadcast_SetPageLifecycleState_ResponseParamsDataView() = default;

  PageBroadcast_SetPageLifecycleState_ResponseParamsDataView(
      internal::PageBroadcast_SetPageLifecycleState_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageBroadcast_SetPageLifecycleState_ResponseParams_Data* data_ = nullptr;
};



class PageBroadcast_AudioStateChanged_ParamsDataView {
 public:
  PageBroadcast_AudioStateChanged_ParamsDataView() = default;

  PageBroadcast_AudioStateChanged_ParamsDataView(
      internal::PageBroadcast_AudioStateChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_audio_playing() const {
    return data_->is_audio_playing;
  }
 private:
  internal::PageBroadcast_AudioStateChanged_Params_Data* data_ = nullptr;
};



class PageBroadcast_ActivatePrerenderedPage_ParamsDataView {
 public:
  PageBroadcast_ActivatePrerenderedPage_ParamsDataView() = default;

  PageBroadcast_ActivatePrerenderedPage_ParamsDataView(
      internal::PageBroadcast_ActivatePrerenderedPage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPrerenderPageActivationParamsDataView(
      PrerenderPageActivationParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrerenderPageActivationParams(UserType* output) {
    
    auto* pointer = data_->prerender_page_activation_params.Get();
    return mojo::internal::Deserialize<::blink::mojom::PrerenderPageActivationParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::PageBroadcast_ActivatePrerenderedPage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PageBroadcast_ActivatePrerenderedPage_ResponseParamsDataView {
 public:
  PageBroadcast_ActivatePrerenderedPage_ResponseParamsDataView() = default;

  PageBroadcast_ActivatePrerenderedPage_ResponseParamsDataView(
      internal::PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data* data_ = nullptr;
};



class PageBroadcast_SetInsidePortal_ParamsDataView {
 public:
  PageBroadcast_SetInsidePortal_ParamsDataView() = default;

  PageBroadcast_SetInsidePortal_ParamsDataView(
      internal::PageBroadcast_SetInsidePortal_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_inside_portal() const {
    return data_->is_inside_portal;
  }
 private:
  internal::PageBroadcast_SetInsidePortal_Params_Data* data_ = nullptr;
};



class PageBroadcast_UpdateWebPreferences_ParamsDataView {
 public:
  PageBroadcast_UpdateWebPreferences_ParamsDataView() = default;

  PageBroadcast_UpdateWebPreferences_ParamsDataView(
      internal::PageBroadcast_UpdateWebPreferences_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPreferencesDataView(
      ::blink::mojom::WebPreferencesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPreferences(UserType* output) {
    
    auto* pointer = data_->preferences.Get();
    return mojo::internal::Deserialize<::blink::mojom::WebPreferencesDataView>(
        pointer, output, message_);
  }
 private:
  internal::PageBroadcast_UpdateWebPreferences_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PageBroadcast_UpdateRendererPreferences_ParamsDataView {
 public:
  PageBroadcast_UpdateRendererPreferences_ParamsDataView() = default;

  PageBroadcast_UpdateRendererPreferences_ParamsDataView(
      internal::PageBroadcast_UpdateRendererPreferences_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPreferencesDataView(
      ::blink::mojom::RendererPreferencesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPreferences(UserType* output) {
    
    auto* pointer = data_->preferences.Get();
    return mojo::internal::Deserialize<::blink::mojom::RendererPreferencesDataView>(
        pointer, output, message_);
  }
 private:
  internal::PageBroadcast_UpdateRendererPreferences_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PageBroadcast_SetHistoryOffsetAndLength_ParamsDataView {
 public:
  PageBroadcast_SetHistoryOffsetAndLength_ParamsDataView() = default;

  PageBroadcast_SetHistoryOffsetAndLength_ParamsDataView(
      internal::PageBroadcast_SetHistoryOffsetAndLength_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t offset() const {
    return data_->offset;
  }
  int32_t length() const {
    return data_->length;
  }
 private:
  internal::PageBroadcast_SetHistoryOffsetAndLength_Params_Data* data_ = nullptr;
};



class PageBroadcast_SetPageBaseBackgroundColor_ParamsDataView {
 public:
  PageBroadcast_SetPageBaseBackgroundColor_ParamsDataView() = default;

  PageBroadcast_SetPageBaseBackgroundColor_ParamsDataView(
      internal::PageBroadcast_SetPageBaseBackgroundColor_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetColorDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadColor(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::skia::mojom::SkColorDataView, UserType>(),
    "Attempting to read the optional `color` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadColor` instead "
    "of `ReadColor if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, message_);
  }
 private:
  internal::PageBroadcast_SetPageBaseBackgroundColor_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PageBroadcast_CreateRemoteMainFrame_ParamsDataView {
 public:
  PageBroadcast_CreateRemoteMainFrame_ParamsDataView() = default;

  PageBroadcast_CreateRemoteMainFrame_ParamsDataView(
      internal::PageBroadcast_CreateRemoteMainFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTokenDataView(
      ::blink::mojom::RemoteFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
    auto* pointer = data_->token.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetOpenerFrameTokenDataView(
      ::blink::mojom::FrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOpenerFrameToken(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::FrameTokenDataView, UserType>(),
    "Attempting to read the optional `opener_frame_token` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOpenerFrameToken` instead "
    "of `ReadOpenerFrameToken if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->opener_frame_token.is_null() ? &data_->opener_frame_token : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetReplicationStateDataView(
      ::blink::mojom::FrameReplicationStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReplicationState(UserType* output) {
    
    auto* pointer = data_->replication_state.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameReplicationStateDataView>(
        pointer, output, message_);
  }
  inline void GetDevtoolsFrameTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevtoolsFrameToken(UserType* output) {
    
    auto* pointer = data_->devtools_frame_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetRemoteFrameInterfacesDataView(
      ::blink::mojom::RemoteFrameInterfacesFromBrowserDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRemoteFrameInterfaces(UserType* output) {
    
    auto* pointer = data_->remote_frame_interfaces.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameInterfacesFromBrowserDataView>(
        pointer, output, message_);
  }
  inline void GetRemoteMainFrameInterfacesDataView(
      ::blink::mojom::RemoteMainFrameInterfacesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRemoteMainFrameInterfaces(UserType* output) {
    
    auto* pointer = data_->remote_main_frame_interfaces.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteMainFrameInterfacesDataView>(
        pointer, output, message_);
  }
 private:
  internal::PageBroadcast_CreateRemoteMainFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void PageBroadcast_SetPageLifecycleState_ParamsDataView::GetStateDataView(
    PageLifecycleStateDataView* output) {
  auto pointer = data_->state.Get();
  *output = PageLifecycleStateDataView(pointer, message_);
}
inline void PageBroadcast_SetPageLifecycleState_ParamsDataView::GetPageRestoreParamsDataView(
    PageRestoreParamsDataView* output) {
  auto pointer = data_->page_restore_params.Get();
  *output = PageRestoreParamsDataView(pointer, message_);
}






inline void PageBroadcast_ActivatePrerenderedPage_ParamsDataView::GetPrerenderPageActivationParamsDataView(
    PrerenderPageActivationParamsDataView* output) {
  auto pointer = data_->prerender_page_activation_params.Get();
  *output = PrerenderPageActivationParamsDataView(pointer, message_);
}






inline void PageBroadcast_UpdateWebPreferences_ParamsDataView::GetPreferencesDataView(
    ::blink::mojom::WebPreferencesDataView* output) {
  auto pointer = data_->preferences.Get();
  *output = ::blink::mojom::WebPreferencesDataView(pointer, message_);
}


inline void PageBroadcast_UpdateRendererPreferences_ParamsDataView::GetPreferencesDataView(
    ::blink::mojom::RendererPreferencesDataView* output) {
  auto pointer = data_->preferences.Get();
  *output = ::blink::mojom::RendererPreferencesDataView(pointer, message_);
}




inline void PageBroadcast_SetPageBaseBackgroundColor_ParamsDataView::GetColorDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->color.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, message_);
}


inline void PageBroadcast_CreateRemoteMainFrame_ParamsDataView::GetTokenDataView(
    ::blink::mojom::RemoteFrameTokenDataView* output) {
  auto pointer = data_->token.Get();
  *output = ::blink::mojom::RemoteFrameTokenDataView(pointer, message_);
}
inline void PageBroadcast_CreateRemoteMainFrame_ParamsDataView::GetOpenerFrameTokenDataView(
    ::blink::mojom::FrameTokenDataView* output) {
  auto pointer = &data_->opener_frame_token;
  *output = ::blink::mojom::FrameTokenDataView(pointer, message_);
}
inline void PageBroadcast_CreateRemoteMainFrame_ParamsDataView::GetReplicationStateDataView(
    ::blink::mojom::FrameReplicationStateDataView* output) {
  auto pointer = data_->replication_state.Get();
  *output = ::blink::mojom::FrameReplicationStateDataView(pointer, message_);
}
inline void PageBroadcast_CreateRemoteMainFrame_ParamsDataView::GetDevtoolsFrameTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_frame_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void PageBroadcast_CreateRemoteMainFrame_ParamsDataView::GetRemoteFrameInterfacesDataView(
    ::blink::mojom::RemoteFrameInterfacesFromBrowserDataView* output) {
  auto pointer = data_->remote_frame_interfaces.Get();
  *output = ::blink::mojom::RemoteFrameInterfacesFromBrowserDataView(pointer, message_);
}
inline void PageBroadcast_CreateRemoteMainFrame_ParamsDataView::GetRemoteMainFrameInterfacesDataView(
    ::blink::mojom::RemoteMainFrameInterfacesDataView* output) {
  auto pointer = data_->remote_main_frame_interfaces.Get();
  *output = ::blink::mojom::RemoteMainFrameInterfacesDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_PAGE_MOJOM_PARAMS_DATA_H_