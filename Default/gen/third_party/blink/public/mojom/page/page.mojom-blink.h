// third_party/blink/public/mojom/page/page.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_PAGE_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_PAGE_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/page/page.mojom-shared.h"
#include "third_party/blink/public/mojom/page/page.mojom-blink-forward.h"
#include "mojo/public/mojom/base/time.mojom-blink.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-blink.h"
#include "skia/public/mojom/skcolor.mojom-blink.h"
#include "third_party/blink/public/mojom/frame/frame_replication_state.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/frame/remote_frame.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/navigation/was_activated_option.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/page/page_visibility_state.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-blink.h"
#include "third_party/blink/public/mojom/webpreferences/web_preferences.mojom-blink.h"
#include "third_party/blink/public/mojom/renderer_preferences.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/core/core_export.h"




namespace WTF {
struct blink_mojom_internal_PagehideDispatch_DataHashFn {
  static unsigned GetHash(const ::blink::mojom::PagehideDispatch& value) {
    using utype = std::underlying_type<::blink::mojom::PagehideDispatch>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::blink::mojom::PagehideDispatch& left, const ::blink::mojom::PagehideDispatch& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::blink::mojom::PagehideDispatch>
    : public GenericHashTraits<::blink::mojom::PagehideDispatch> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::blink::mojom::PagehideDispatch EmptyValue() { return static_cast<::blink::mojom::PagehideDispatch>(-1000000); }
  static void ConstructDeletedValue(::blink::mojom::PagehideDispatch& slot, bool) {
    slot = static_cast<::blink::mojom::PagehideDispatch>(-1000001);
  }
  static bool IsDeletedValue(const ::blink::mojom::PagehideDispatch& value) {
    return value == static_cast<::blink::mojom::PagehideDispatch>(-1000001);
  }
};
}  // namespace WTF


namespace blink {
namespace mojom {
namespace blink {

class PageBroadcastProxy;

template <typename ImplRefTraits>
class PageBroadcastStub;

class PageBroadcastRequestValidator;
class PageBroadcastResponseValidator;


class CORE_EXPORT PageBroadcast
    : public PageBroadcastInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = PageBroadcastInterfaceBase;
  using Proxy_ = PageBroadcastProxy;

  template <typename ImplRefTraits>
  using Stub_ = PageBroadcastStub<ImplRefTraits>;

  using RequestValidator_ = PageBroadcastRequestValidator;
  using ResponseValidator_ = PageBroadcastResponseValidator;
  enum MethodMinVersions : uint32_t {
    kSetPageLifecycleStateMinVersion = 0,
    kAudioStateChangedMinVersion = 0,
    kActivatePrerenderedPageMinVersion = 0,
    kSetInsidePortalMinVersion = 0,
    kUpdateWebPreferencesMinVersion = 0,
    kUpdateRendererPreferencesMinVersion = 0,
    kSetHistoryOffsetAndLengthMinVersion = 0,
    kSetPageBaseBackgroundColorMinVersion = 0,
    kCreateRemoteMainFrameMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct SetPageLifecycleState_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct AudioStateChanged_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ActivatePrerenderedPage_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetInsidePortal_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct UpdateWebPreferences_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct UpdateRendererPreferences_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetHistoryOffsetAndLength_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetPageBaseBackgroundColor_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct CreateRemoteMainFrame_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~PageBroadcast() = default;


  using SetPageLifecycleStateCallback = base::OnceCallback<void()>;
  
  virtual void SetPageLifecycleState(PageLifecycleStatePtr state, PageRestoreParamsPtr page_restore_params, SetPageLifecycleStateCallback callback) = 0;

  
  virtual void AudioStateChanged(bool is_audio_playing) = 0;


  using ActivatePrerenderedPageCallback = base::OnceCallback<void()>;
  
  virtual void ActivatePrerenderedPage(PrerenderPageActivationParamsPtr prerender_page_activation_params, ActivatePrerenderedPageCallback callback) = 0;

  
  virtual void SetInsidePortal(bool is_inside_portal) = 0;

  
  virtual void UpdateWebPreferences(const ::blink::web_pref::WebPreferences& preferences) = 0;

  
  virtual void UpdateRendererPreferences(const ::blink::RendererPreferences& preferences) = 0;

  
  virtual void SetHistoryOffsetAndLength(int32_t offset, int32_t length) = 0;

  
  virtual void SetPageBaseBackgroundColor(absl::optional<::SkColor> color) = 0;

  
  virtual void CreateRemoteMainFrame(const ::blink::RemoteFrameToken& token, const absl::optional<::blink::FrameToken>& opener_frame_token, ::blink::mojom::blink::FrameReplicationStatePtr replication_state, const ::base::UnguessableToken& devtools_frame_token, ::blink::mojom::blink::RemoteFrameInterfacesFromBrowserPtr remote_frame_interfaces, ::blink::mojom::blink::RemoteMainFrameInterfacesPtr remote_main_frame_interfaces) = 0;
};



class CORE_EXPORT PageBroadcastProxy
    : public PageBroadcast {
 public:
  using InterfaceType = PageBroadcast;

  explicit PageBroadcastProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void SetPageLifecycleState(PageLifecycleStatePtr state, PageRestoreParamsPtr page_restore_params, SetPageLifecycleStateCallback callback) final;
  
  void AudioStateChanged(bool is_audio_playing) final;
  
  void ActivatePrerenderedPage(PrerenderPageActivationParamsPtr prerender_page_activation_params, ActivatePrerenderedPageCallback callback) final;
  
  void SetInsidePortal(bool is_inside_portal) final;
  
  void UpdateWebPreferences(const ::blink::web_pref::WebPreferences& preferences) final;
  
  void UpdateRendererPreferences(const ::blink::RendererPreferences& preferences) final;
  
  void SetHistoryOffsetAndLength(int32_t offset, int32_t length) final;
  
  void SetPageBaseBackgroundColor(absl::optional<::SkColor> color) final;
  
  void CreateRemoteMainFrame(const ::blink::RemoteFrameToken& token, const absl::optional<::blink::FrameToken>& opener_frame_token, ::blink::mojom::blink::FrameReplicationStatePtr replication_state, const ::base::UnguessableToken& devtools_frame_token, ::blink::mojom::blink::RemoteFrameInterfacesFromBrowserPtr remote_frame_interfaces, ::blink::mojom::blink::RemoteMainFrameInterfacesPtr remote_main_frame_interfaces) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class CORE_EXPORT PageBroadcastStubDispatch {
 public:
  static bool Accept(PageBroadcast* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PageBroadcast* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PageBroadcast>>
class PageBroadcastStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PageBroadcastStub() = default;
  ~PageBroadcastStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PageBroadcastStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PageBroadcastStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class CORE_EXPORT PageBroadcastRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class CORE_EXPORT PageBroadcastResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};










class CORE_EXPORT PageLifecycleState {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PageLifecycleState, T>::value>;
  using DataView = PageLifecycleStateDataView;
  using Data_ = internal::PageLifecycleState_Data;

  template <typename... Args>
  static PageLifecycleStatePtr New(Args&&... args) {
    return PageLifecycleStatePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PageLifecycleStatePtr From(const U& u) {
    return mojo::TypeConverter<PageLifecycleStatePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PageLifecycleState>::Convert(*this);
  }


  PageLifecycleState();

  PageLifecycleState(
      bool is_frozen,
      ::blink::mojom::blink::PageVisibilityState visibility,
      bool is_in_back_forward_cache,
      PagehideDispatch pagehide_dispatch,
      bool eviction_enabled,
      bool should_dispatch_pageshow_for_debugging);


  ~PageLifecycleState();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PageLifecycleStatePtr>
  PageLifecycleStatePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PageLifecycleState::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PageLifecycleState::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PageLifecycleState::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PageLifecycleState::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PageLifecycleState_UnserializedMessageContext<
            UserType, PageLifecycleState::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PageLifecycleState::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return PageLifecycleState::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PageLifecycleState_UnserializedMessageContext<
            UserType, PageLifecycleState::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PageLifecycleState::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  bool is_frozen;
  
  ::blink::mojom::blink::PageVisibilityState visibility;
  
  bool is_in_back_forward_cache;
  
  PagehideDispatch pagehide_dispatch;
  
  bool eviction_enabled;
  
  bool should_dispatch_pageshow_for_debugging;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PageLifecycleState::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PageLifecycleState::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PageLifecycleState::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PageLifecycleState::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class CORE_EXPORT PageRestoreParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PageRestoreParams, T>::value>;
  using DataView = PageRestoreParamsDataView;
  using Data_ = internal::PageRestoreParams_Data;

  template <typename... Args>
  static PageRestoreParamsPtr New(Args&&... args) {
    return PageRestoreParamsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PageRestoreParamsPtr From(const U& u) {
    return mojo::TypeConverter<PageRestoreParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PageRestoreParams>::Convert(*this);
  }


  PageRestoreParams();

  PageRestoreParams(
      ::base::TimeTicks navigation_start,
      int32_t pending_history_list_offset,
      int32_t current_history_list_length);


  ~PageRestoreParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PageRestoreParamsPtr>
  PageRestoreParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PageRestoreParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PageRestoreParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PageRestoreParams::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PageRestoreParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PageRestoreParams_UnserializedMessageContext<
            UserType, PageRestoreParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PageRestoreParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return PageRestoreParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PageRestoreParams_UnserializedMessageContext<
            UserType, PageRestoreParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PageRestoreParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::base::TimeTicks navigation_start;
  
  int32_t pending_history_list_offset;
  
  int32_t current_history_list_length;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PageRestoreParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PageRestoreParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PageRestoreParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PageRestoreParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class CORE_EXPORT PrerenderPageActivationParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PrerenderPageActivationParams, T>::value>;
  using DataView = PrerenderPageActivationParamsDataView;
  using Data_ = internal::PrerenderPageActivationParams_Data;

  template <typename... Args>
  static PrerenderPageActivationParamsPtr New(Args&&... args) {
    return PrerenderPageActivationParamsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PrerenderPageActivationParamsPtr From(const U& u) {
    return mojo::TypeConverter<PrerenderPageActivationParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrerenderPageActivationParams>::Convert(*this);
  }


  PrerenderPageActivationParams();

  PrerenderPageActivationParams(
      ::blink::mojom::blink::WasActivatedOption was_user_activated,
      ::base::TimeTicks activation_start);


  ~PrerenderPageActivationParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PrerenderPageActivationParamsPtr>
  PrerenderPageActivationParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PrerenderPageActivationParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PrerenderPageActivationParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PrerenderPageActivationParams::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PrerenderPageActivationParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PrerenderPageActivationParams_UnserializedMessageContext<
            UserType, PrerenderPageActivationParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PrerenderPageActivationParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return PrerenderPageActivationParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PrerenderPageActivationParams_UnserializedMessageContext<
            UserType, PrerenderPageActivationParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PrerenderPageActivationParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::blink::mojom::blink::WasActivatedOption was_user_activated;
  
  ::base::TimeTicks activation_start;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PrerenderPageActivationParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PrerenderPageActivationParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PrerenderPageActivationParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PrerenderPageActivationParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
PageLifecycleStatePtr PageLifecycleState::Clone() const {
  return New(
      mojo::Clone(is_frozen),
      mojo::Clone(visibility),
      mojo::Clone(is_in_back_forward_cache),
      mojo::Clone(pagehide_dispatch),
      mojo::Clone(eviction_enabled),
      mojo::Clone(should_dispatch_pageshow_for_debugging)
  );
}

template <typename T, PageLifecycleState::EnableIfSame<T>*>
bool PageLifecycleState::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->is_frozen, other_struct.is_frozen))
    return false;
  if (!mojo::Equals(this->visibility, other_struct.visibility))
    return false;
  if (!mojo::Equals(this->is_in_back_forward_cache, other_struct.is_in_back_forward_cache))
    return false;
  if (!mojo::Equals(this->pagehide_dispatch, other_struct.pagehide_dispatch))
    return false;
  if (!mojo::Equals(this->eviction_enabled, other_struct.eviction_enabled))
    return false;
  if (!mojo::Equals(this->should_dispatch_pageshow_for_debugging, other_struct.should_dispatch_pageshow_for_debugging))
    return false;
  return true;
}

template <typename T, PageLifecycleState::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.is_frozen < rhs.is_frozen)
    return true;
  if (rhs.is_frozen < lhs.is_frozen)
    return false;
  if (lhs.visibility < rhs.visibility)
    return true;
  if (rhs.visibility < lhs.visibility)
    return false;
  if (lhs.is_in_back_forward_cache < rhs.is_in_back_forward_cache)
    return true;
  if (rhs.is_in_back_forward_cache < lhs.is_in_back_forward_cache)
    return false;
  if (lhs.pagehide_dispatch < rhs.pagehide_dispatch)
    return true;
  if (rhs.pagehide_dispatch < lhs.pagehide_dispatch)
    return false;
  if (lhs.eviction_enabled < rhs.eviction_enabled)
    return true;
  if (rhs.eviction_enabled < lhs.eviction_enabled)
    return false;
  if (lhs.should_dispatch_pageshow_for_debugging < rhs.should_dispatch_pageshow_for_debugging)
    return true;
  if (rhs.should_dispatch_pageshow_for_debugging < lhs.should_dispatch_pageshow_for_debugging)
    return false;
  return false;
}
template <typename StructPtrType>
PageRestoreParamsPtr PageRestoreParams::Clone() const {
  return New(
      mojo::Clone(navigation_start),
      mojo::Clone(pending_history_list_offset),
      mojo::Clone(current_history_list_length)
  );
}

template <typename T, PageRestoreParams::EnableIfSame<T>*>
bool PageRestoreParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->navigation_start, other_struct.navigation_start))
    return false;
  if (!mojo::Equals(this->pending_history_list_offset, other_struct.pending_history_list_offset))
    return false;
  if (!mojo::Equals(this->current_history_list_length, other_struct.current_history_list_length))
    return false;
  return true;
}

template <typename T, PageRestoreParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.navigation_start < rhs.navigation_start)
    return true;
  if (rhs.navigation_start < lhs.navigation_start)
    return false;
  if (lhs.pending_history_list_offset < rhs.pending_history_list_offset)
    return true;
  if (rhs.pending_history_list_offset < lhs.pending_history_list_offset)
    return false;
  if (lhs.current_history_list_length < rhs.current_history_list_length)
    return true;
  if (rhs.current_history_list_length < lhs.current_history_list_length)
    return false;
  return false;
}
template <typename StructPtrType>
PrerenderPageActivationParamsPtr PrerenderPageActivationParams::Clone() const {
  return New(
      mojo::Clone(was_user_activated),
      mojo::Clone(activation_start)
  );
}

template <typename T, PrerenderPageActivationParams::EnableIfSame<T>*>
bool PrerenderPageActivationParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->was_user_activated, other_struct.was_user_activated))
    return false;
  if (!mojo::Equals(this->activation_start, other_struct.activation_start))
    return false;
  return true;
}

template <typename T, PrerenderPageActivationParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.was_user_activated < rhs.was_user_activated)
    return true;
  if (rhs.was_user_activated < lhs.was_user_activated)
    return false;
  if (lhs.activation_start < rhs.activation_start)
    return true;
  if (rhs.activation_start < lhs.activation_start)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct CORE_EXPORT StructTraits<::blink::mojom::blink::PageLifecycleState::DataView,
                                         ::blink::mojom::blink::PageLifecycleStatePtr> {
  static bool IsNull(const ::blink::mojom::blink::PageLifecycleStatePtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::PageLifecycleStatePtr* output) { output->reset(); }

  static decltype(::blink::mojom::blink::PageLifecycleState::is_frozen) is_frozen(
      const ::blink::mojom::blink::PageLifecycleStatePtr& input) {
    return input->is_frozen;
  }

  static decltype(::blink::mojom::blink::PageLifecycleState::visibility) visibility(
      const ::blink::mojom::blink::PageLifecycleStatePtr& input) {
    return input->visibility;
  }

  static decltype(::blink::mojom::blink::PageLifecycleState::is_in_back_forward_cache) is_in_back_forward_cache(
      const ::blink::mojom::blink::PageLifecycleStatePtr& input) {
    return input->is_in_back_forward_cache;
  }

  static decltype(::blink::mojom::blink::PageLifecycleState::pagehide_dispatch) pagehide_dispatch(
      const ::blink::mojom::blink::PageLifecycleStatePtr& input) {
    return input->pagehide_dispatch;
  }

  static decltype(::blink::mojom::blink::PageLifecycleState::eviction_enabled) eviction_enabled(
      const ::blink::mojom::blink::PageLifecycleStatePtr& input) {
    return input->eviction_enabled;
  }

  static decltype(::blink::mojom::blink::PageLifecycleState::should_dispatch_pageshow_for_debugging) should_dispatch_pageshow_for_debugging(
      const ::blink::mojom::blink::PageLifecycleStatePtr& input) {
    return input->should_dispatch_pageshow_for_debugging;
  }

  static bool Read(::blink::mojom::blink::PageLifecycleState::DataView input, ::blink::mojom::blink::PageLifecycleStatePtr* output);
};


template <>
struct CORE_EXPORT StructTraits<::blink::mojom::blink::PageRestoreParams::DataView,
                                         ::blink::mojom::blink::PageRestoreParamsPtr> {
  static bool IsNull(const ::blink::mojom::blink::PageRestoreParamsPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::PageRestoreParamsPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::PageRestoreParams::navigation_start)& navigation_start(
      const ::blink::mojom::blink::PageRestoreParamsPtr& input) {
    return input->navigation_start;
  }

  static decltype(::blink::mojom::blink::PageRestoreParams::pending_history_list_offset) pending_history_list_offset(
      const ::blink::mojom::blink::PageRestoreParamsPtr& input) {
    return input->pending_history_list_offset;
  }

  static decltype(::blink::mojom::blink::PageRestoreParams::current_history_list_length) current_history_list_length(
      const ::blink::mojom::blink::PageRestoreParamsPtr& input) {
    return input->current_history_list_length;
  }

  static bool Read(::blink::mojom::blink::PageRestoreParams::DataView input, ::blink::mojom::blink::PageRestoreParamsPtr* output);
};


template <>
struct CORE_EXPORT StructTraits<::blink::mojom::blink::PrerenderPageActivationParams::DataView,
                                         ::blink::mojom::blink::PrerenderPageActivationParamsPtr> {
  static bool IsNull(const ::blink::mojom::blink::PrerenderPageActivationParamsPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::PrerenderPageActivationParamsPtr* output) { output->reset(); }

  static decltype(::blink::mojom::blink::PrerenderPageActivationParams::was_user_activated) was_user_activated(
      const ::blink::mojom::blink::PrerenderPageActivationParamsPtr& input) {
    return input->was_user_activated;
  }

  static const decltype(::blink::mojom::blink::PrerenderPageActivationParams::activation_start)& activation_start(
      const ::blink::mojom::blink::PrerenderPageActivationParamsPtr& input) {
    return input->activation_start;
  }

  static bool Read(::blink::mojom::blink::PrerenderPageActivationParams::DataView input, ::blink::mojom::blink::PrerenderPageActivationParamsPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_PAGE_MOJOM_BLINK_H_