// third_party/blink/public/mojom/quota/quota_manager_host.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  QuotaStatusCode as blink_mojom_QuotaStatusCode,
  QuotaStatusCodeSpec as blink_mojom_QuotaStatusCodeSpec,
  StorageType as blink_mojom_StorageType,
  StorageTypeSpec as blink_mojom_StorageTypeSpec,
  UsageBreakdown as blink_mojom_UsageBreakdown,
  UsageBreakdownSpec as blink_mojom_UsageBreakdownSpec
} from './quota_types.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class QuotaChangeListenerPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.QuotaChangeListener', scope);
  }
}

/** @interface */
export class QuotaChangeListenerInterface {
  
  /**
   */

  onQuotaChange() {}
}

/**
 * @implements { QuotaChangeListenerInterface }
 */
export class QuotaChangeListenerRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!QuotaChangeListenerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          QuotaChangeListenerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!QuotaChangeListenerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  onQuotaChange() {
    this.proxy.sendMessage(
        0,
        QuotaChangeListener_OnQuotaChange_ParamsSpec.$,
        null,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the QuotaChangeListener
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class QuotaChangeListenerReceiver {
  /**
   * @param {!QuotaChangeListenerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!QuotaChangeListenerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        QuotaChangeListenerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!QuotaChangeListenerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        QuotaChangeListener_OnQuotaChange_ParamsSpec.$,
        null,
        impl.onQuotaChange.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class QuotaChangeListener {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.QuotaChangeListener";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!QuotaChangeListenerRemote}
   */
  static getRemote() {
    let remote = new QuotaChangeListenerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the QuotaChangeListener
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class QuotaChangeListenerCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      QuotaChangeListenerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!QuotaChangeListenerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onQuotaChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        QuotaChangeListener_OnQuotaChange_ParamsSpec.$,
        null,
        this.onQuotaChange.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class QuotaManagerHostPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.QuotaManagerHost', scope);
  }
}

/** @interface */
export class QuotaManagerHostInterface {
  
  /**
   * @param { !QuotaChangeListenerRemote } listener
   * @return {!Promise}
   */

  addChangeListener(listener) {}
  
  /**
   * @param { !blink_mojom_StorageType } storageType
   * @return {!Promise<{
        error: !blink_mojom_QuotaStatusCode,
        currentUsage: !bigint,
        currentQuota: !bigint,
        usageBreakdown: !blink_mojom_UsageBreakdown,
   *  }>}
   */

  queryStorageUsageAndQuota(storageType) {}
  
  /**
   * @param { !blink_mojom_StorageType } storageType
   * @param { !bigint } requestedSize
   * @return {!Promise<{
        error: !blink_mojom_QuotaStatusCode,
        currentUsage: !bigint,
        grantedQuota: !bigint,
   *  }>}
   */

  requestStorageQuota(storageType, requestedSize) {}
}

/**
 * @implements { QuotaManagerHostInterface }
 */
export class QuotaManagerHostRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!QuotaManagerHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          QuotaManagerHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!QuotaManagerHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !QuotaChangeListenerRemote } listener
   * @return {!Promise}
   */

  addChangeListener(
      listener) {
    return this.proxy.sendMessage(
        0,
        QuotaManagerHost_AddChangeListener_ParamsSpec.$,
        QuotaManagerHost_AddChangeListener_ResponseParamsSpec.$,
        [
          listener
        ]);
  }

  
  /**
   * @param { !blink_mojom_StorageType } storageType
   * @return {!Promise<{
        error: !blink_mojom_QuotaStatusCode,
        currentUsage: !bigint,
        currentQuota: !bigint,
        usageBreakdown: !blink_mojom_UsageBreakdown,
   *  }>}
   */

  queryStorageUsageAndQuota(
      storageType) {
    return this.proxy.sendMessage(
        1,
        QuotaManagerHost_QueryStorageUsageAndQuota_ParamsSpec.$,
        QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsSpec.$,
        [
          storageType
        ]);
  }

  
  /**
   * @param { !blink_mojom_StorageType } storageType
   * @param { !bigint } requestedSize
   * @return {!Promise<{
        error: !blink_mojom_QuotaStatusCode,
        currentUsage: !bigint,
        grantedQuota: !bigint,
   *  }>}
   */

  requestStorageQuota(
      storageType,
      requestedSize) {
    return this.proxy.sendMessage(
        2,
        QuotaManagerHost_RequestStorageQuota_ParamsSpec.$,
        QuotaManagerHost_RequestStorageQuota_ResponseParamsSpec.$,
        [
          storageType,
          requestedSize
        ]);
  }
}

/**
 * An object which receives request messages for the QuotaManagerHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class QuotaManagerHostReceiver {
  /**
   * @param {!QuotaManagerHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!QuotaManagerHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        QuotaManagerHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!QuotaManagerHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        QuotaManagerHost_AddChangeListener_ParamsSpec.$,
        QuotaManagerHost_AddChangeListener_ResponseParamsSpec.$,
        impl.addChangeListener.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        QuotaManagerHost_QueryStorageUsageAndQuota_ParamsSpec.$,
        QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsSpec.$,
        impl.queryStorageUsageAndQuota.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        QuotaManagerHost_RequestStorageQuota_ParamsSpec.$,
        QuotaManagerHost_RequestStorageQuota_ResponseParamsSpec.$,
        impl.requestStorageQuota.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class QuotaManagerHost {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.QuotaManagerHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!QuotaManagerHostRemote}
   */
  static getRemote() {
    let remote = new QuotaManagerHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the QuotaManagerHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class QuotaManagerHostCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      QuotaManagerHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!QuotaManagerHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addChangeListener =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        QuotaManagerHost_AddChangeListener_ParamsSpec.$,
        QuotaManagerHost_AddChangeListener_ResponseParamsSpec.$,
        this.addChangeListener.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.queryStorageUsageAndQuota =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        QuotaManagerHost_QueryStorageUsageAndQuota_ParamsSpec.$,
        QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsSpec.$,
        this.queryStorageUsageAndQuota.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestStorageQuota =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        QuotaManagerHost_RequestStorageQuota_ParamsSpec.$,
        QuotaManagerHost_RequestStorageQuota_ResponseParamsSpec.$,
        this.requestStorageQuota.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const QuotaChangeListener_OnQuotaChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const QuotaManagerHost_AddChangeListener_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const QuotaManagerHost_AddChangeListener_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const QuotaManagerHost_QueryStorageUsageAndQuota_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const QuotaManagerHost_RequestStorageQuota_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const QuotaManagerHost_RequestStorageQuota_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    QuotaChangeListener_OnQuotaChange_ParamsSpec.$,
    'QuotaChangeListener_OnQuotaChange_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class QuotaChangeListener_OnQuotaChange_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    QuotaManagerHost_AddChangeListener_ParamsSpec.$,
    'QuotaManagerHost_AddChangeListener_Params',
    [
      mojo.internal.StructField(
        'listener', 0,
        0,
        mojo.internal.InterfaceProxy(QuotaChangeListenerRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class QuotaManagerHost_AddChangeListener_Params {
  constructor() {
    /** @type { !QuotaChangeListenerRemote } */
    this.listener;
  }
}



mojo.internal.Struct(
    QuotaManagerHost_AddChangeListener_ResponseParamsSpec.$,
    'QuotaManagerHost_AddChangeListener_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class QuotaManagerHost_AddChangeListener_ResponseParams {
  constructor() {
  }
}



mojo.internal.Struct(
    QuotaManagerHost_QueryStorageUsageAndQuota_ParamsSpec.$,
    'QuotaManagerHost_QueryStorageUsageAndQuota_Params',
    [
      mojo.internal.StructField(
        'storageType', 0,
        0,
        blink_mojom_StorageTypeSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class QuotaManagerHost_QueryStorageUsageAndQuota_Params {
  constructor() {
    /** @type { !blink_mojom_StorageType } */
    this.storageType;
  }
}



mojo.internal.Struct(
    QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsSpec.$,
    'QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams',
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        blink_mojom_QuotaStatusCodeSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'currentUsage', 8,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'currentQuota', 16,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'usageBreakdown', 24,
        0,
        blink_mojom_UsageBreakdownSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_QuotaStatusCode } */
    this.error;
    /** @type { !bigint } */
    this.currentUsage;
    /** @type { !bigint } */
    this.currentQuota;
    /** @type { !blink_mojom_UsageBreakdown } */
    this.usageBreakdown;
  }
}



mojo.internal.Struct(
    QuotaManagerHost_RequestStorageQuota_ParamsSpec.$,
    'QuotaManagerHost_RequestStorageQuota_Params',
    [
      mojo.internal.StructField(
        'storageType', 0,
        0,
        blink_mojom_StorageTypeSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'requestedSize', 8,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class QuotaManagerHost_RequestStorageQuota_Params {
  constructor() {
    /** @type { !blink_mojom_StorageType } */
    this.storageType;
    /** @type { !bigint } */
    this.requestedSize;
  }
}



mojo.internal.Struct(
    QuotaManagerHost_RequestStorageQuota_ResponseParamsSpec.$,
    'QuotaManagerHost_RequestStorageQuota_ResponseParams',
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        blink_mojom_QuotaStatusCodeSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'currentUsage', 8,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'grantedQuota', 16,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class QuotaManagerHost_RequestStorageQuota_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_QuotaStatusCode } */
    this.error;
    /** @type { !bigint } */
    this.currentUsage;
    /** @type { !bigint } */
    this.grantedQuota;
  }
}

