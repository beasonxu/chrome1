// third_party/blink/public/mojom/quota/quota_manager_host.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('blink.mojom');








/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.QuotaChangeListenerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.QuotaChangeListener.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.mojom.QuotaChangeListenerInterface }
 */
blink.mojom.QuotaChangeListenerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.QuotaChangeListenerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.QuotaChangeListenerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.QuotaChangeListenerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  onQuotaChange() {
    this.proxy.sendMessage(
        0,
        blink.mojom.QuotaChangeListener_OnQuotaChange_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the QuotaChangeListener
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.QuotaChangeListenerReceiver = class {
  /**
   * @param {!blink.mojom.QuotaChangeListenerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.QuotaChangeListenerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.QuotaChangeListenerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.QuotaChangeListenerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.QuotaChangeListener_OnQuotaChange_ParamsSpec.$,
        null,
        impl.onQuotaChange.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.QuotaChangeListener = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.QuotaChangeListener";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.QuotaChangeListenerRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.QuotaChangeListenerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the QuotaChangeListener
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.QuotaChangeListenerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.QuotaChangeListenerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.QuotaChangeListenerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onQuotaChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.QuotaChangeListener_OnQuotaChange_ParamsSpec.$,
        null,
        this.onQuotaChange.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.QuotaManagerHostPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.QuotaManagerHost.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.mojom.QuotaManagerHostInterface }
 */
blink.mojom.QuotaManagerHostRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.QuotaManagerHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.QuotaManagerHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.QuotaManagerHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !blink.mojom.QuotaChangeListenerRemote } listener
   * @return {!Promise}
   */

  addChangeListener(
      listener) {
    return this.proxy.sendMessage(
        0,
        blink.mojom.QuotaManagerHost_AddChangeListener_ParamsSpec.$,
        blink.mojom.QuotaManagerHost_AddChangeListener_ResponseParamsSpec.$,
        [
          listener
        ]);
  }

  
  /**
   * @param { !blink.mojom.StorageType } storageType
   * @return {!Promise<{
        error: !blink.mojom.QuotaStatusCode,
        currentUsage: !bigint,
        currentQuota: !bigint,
        usageBreakdown: !blink.mojom.UsageBreakdown,
   *  }>}
   */

  queryStorageUsageAndQuota(
      storageType) {
    return this.proxy.sendMessage(
        1,
        blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_ParamsSpec.$,
        blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsSpec.$,
        [
          storageType
        ]);
  }

  
  /**
   * @param { !blink.mojom.StorageType } storageType
   * @param { !bigint } requestedSize
   * @return {!Promise<{
        error: !blink.mojom.QuotaStatusCode,
        currentUsage: !bigint,
        grantedQuota: !bigint,
   *  }>}
   */

  requestStorageQuota(
      storageType,
      requestedSize) {
    return this.proxy.sendMessage(
        2,
        blink.mojom.QuotaManagerHost_RequestStorageQuota_ParamsSpec.$,
        blink.mojom.QuotaManagerHost_RequestStorageQuota_ResponseParamsSpec.$,
        [
          storageType,
          requestedSize
        ]);
  }
};

/**
 * An object which receives request messages for the QuotaManagerHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.QuotaManagerHostReceiver = class {
  /**
   * @param {!blink.mojom.QuotaManagerHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.QuotaManagerHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.QuotaManagerHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.QuotaManagerHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.QuotaManagerHost_AddChangeListener_ParamsSpec.$,
        blink.mojom.QuotaManagerHost_AddChangeListener_ResponseParamsSpec.$,
        impl.addChangeListener.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_ParamsSpec.$,
        blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsSpec.$,
        impl.queryStorageUsageAndQuota.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.mojom.QuotaManagerHost_RequestStorageQuota_ParamsSpec.$,
        blink.mojom.QuotaManagerHost_RequestStorageQuota_ResponseParamsSpec.$,
        impl.requestStorageQuota.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.QuotaManagerHost = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.QuotaManagerHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.QuotaManagerHostRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.QuotaManagerHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the QuotaManagerHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.QuotaManagerHostCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.QuotaManagerHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.QuotaManagerHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addChangeListener =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.QuotaManagerHost_AddChangeListener_ParamsSpec.$,
        blink.mojom.QuotaManagerHost_AddChangeListener_ResponseParamsSpec.$,
        this.addChangeListener.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.queryStorageUsageAndQuota =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_ParamsSpec.$,
        blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsSpec.$,
        this.queryStorageUsageAndQuota.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestStorageQuota =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.mojom.QuotaManagerHost_RequestStorageQuota_ParamsSpec.$,
        blink.mojom.QuotaManagerHost_RequestStorageQuota_ResponseParamsSpec.$,
        this.requestStorageQuota.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.QuotaChangeListener_OnQuotaChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.QuotaManagerHost_AddChangeListener_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.QuotaManagerHost_AddChangeListener_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.QuotaManagerHost_RequestStorageQuota_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.QuotaManagerHost_RequestStorageQuota_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.QuotaChangeListener_OnQuotaChange_ParamsSpec.$,
    'QuotaChangeListener_OnQuotaChange_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.mojom.QuotaChangeListener_OnQuotaChange_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.QuotaManagerHost_AddChangeListener_ParamsSpec.$,
    'QuotaManagerHost_AddChangeListener_Params',
    [
      mojo.internal.StructField(
        'listener', 0,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.QuotaChangeListenerRemote),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.QuotaManagerHost_AddChangeListener_Params = class {
  constructor() {
    /** @export { !blink.mojom.QuotaChangeListenerRemote } */
    this.listener;
  }
};




mojo.internal.Struct(
    blink.mojom.QuotaManagerHost_AddChangeListener_ResponseParamsSpec.$,
    'QuotaManagerHost_AddChangeListener_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
blink.mojom.QuotaManagerHost_AddChangeListener_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_ParamsSpec.$,
    'QuotaManagerHost_QueryStorageUsageAndQuota_Params',
    [
      mojo.internal.StructField(
        'storageType', 0,
        0,
        blink.mojom.StorageTypeSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_Params = class {
  constructor() {
    /** @export { !blink.mojom.StorageType } */
    this.storageType;
  }
};




mojo.internal.Struct(
    blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsSpec.$,
    'QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams',
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        blink.mojom.QuotaStatusCodeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'currentUsage', 8,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
      mojo.internal.StructField(
        'currentQuota', 16,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
      mojo.internal.StructField(
        'usageBreakdown', 24,
        0,
        blink.mojom.UsageBreakdownSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 40],]);





/** @record */
blink.mojom.QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.QuotaStatusCode } */
    this.error;
    /** @export { !bigint } */
    this.currentUsage;
    /** @export { !bigint } */
    this.currentQuota;
    /** @export { !blink.mojom.UsageBreakdown } */
    this.usageBreakdown;
  }
};




mojo.internal.Struct(
    blink.mojom.QuotaManagerHost_RequestStorageQuota_ParamsSpec.$,
    'QuotaManagerHost_RequestStorageQuota_Params',
    [
      mojo.internal.StructField(
        'storageType', 0,
        0,
        blink.mojom.StorageTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'requestedSize', 8,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.QuotaManagerHost_RequestStorageQuota_Params = class {
  constructor() {
    /** @export { !blink.mojom.StorageType } */
    this.storageType;
    /** @export { !bigint } */
    this.requestedSize;
  }
};




mojo.internal.Struct(
    blink.mojom.QuotaManagerHost_RequestStorageQuota_ResponseParamsSpec.$,
    'QuotaManagerHost_RequestStorageQuota_ResponseParams',
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        blink.mojom.QuotaStatusCodeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'currentUsage', 8,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
      mojo.internal.StructField(
        'grantedQuota', 16,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
blink.mojom.QuotaManagerHost_RequestStorageQuota_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.QuotaStatusCode } */
    this.error;
    /** @export { !bigint } */
    this.currentUsage;
    /** @export { !bigint } */
    this.grantedQuota;
  }
};


