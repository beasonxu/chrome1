// third_party/blink/public/mojom/devtools/devtools_agent.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_AGENT_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_AGENT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DevToolsAgent_AttachDevToolsSession_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data host;
  mojo::internal::AssociatedEndpointHandle_Data session;
  mojo::internal::Handle_Data io_session;
  mojo::internal::Pointer<internal::DevToolsSessionState_Data> reattach_session_state;
  uint8_t client_expects_binary_responses : 1;
  uint8_t client_is_trusted : 1;
  uint8_t pad5_[7];
  mojo::internal::Pointer<mojo::internal::String_Data> session_id;

 private:
  friend class mojo::internal::MessageFragment<DevToolsAgent_AttachDevToolsSession_Params_Data>;

  DevToolsAgent_AttachDevToolsSession_Params_Data();
  ~DevToolsAgent_AttachDevToolsSession_Params_Data() = delete;
};
static_assert(sizeof(DevToolsAgent_AttachDevToolsSession_Params_Data) == 48,
              "Bad sizeof(DevToolsAgent_AttachDevToolsSession_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DevToolsAgent_InspectElement_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> point;

 private:
  friend class mojo::internal::MessageFragment<DevToolsAgent_InspectElement_Params_Data>;

  DevToolsAgent_InspectElement_Params_Data();
  ~DevToolsAgent_InspectElement_Params_Data() = delete;
};
static_assert(sizeof(DevToolsAgent_InspectElement_Params_Data) == 16,
              "Bad sizeof(DevToolsAgent_InspectElement_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DevToolsAgent_ReportChildTargets_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t report : 1;
  uint8_t wait_for_debugger : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<DevToolsAgent_ReportChildTargets_Params_Data>;

  DevToolsAgent_ReportChildTargets_Params_Data();
  ~DevToolsAgent_ReportChildTargets_Params_Data() = delete;
};
static_assert(sizeof(DevToolsAgent_ReportChildTargets_Params_Data) == 16,
              "Bad sizeof(DevToolsAgent_ReportChildTargets_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DevToolsAgent_ReportChildTargets_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<DevToolsAgent_ReportChildTargets_ResponseParams_Data>;

  DevToolsAgent_ReportChildTargets_ResponseParams_Data();
  ~DevToolsAgent_ReportChildTargets_ResponseParams_Data() = delete;
};
static_assert(sizeof(DevToolsAgent_ReportChildTargets_ResponseParams_Data) == 8,
              "Bad sizeof(DevToolsAgent_ReportChildTargets_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DevToolsAgentHost_ChildTargetCreated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data worker_devtools_agent;
  mojo::internal::Handle_Data worker_devtools_agent_host;
  uint8_t waiting_for_debugger : 1;
  uint8_t pad2_[3];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_worker_token;
  int32_t context_type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DevToolsAgentHost_ChildTargetCreated_Params_Data>;

  DevToolsAgentHost_ChildTargetCreated_Params_Data();
  ~DevToolsAgentHost_ChildTargetCreated_Params_Data() = delete;
};
static_assert(sizeof(DevToolsAgentHost_ChildTargetCreated_Params_Data) == 56,
              "Bad sizeof(DevToolsAgentHost_ChildTargetCreated_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DevToolsSession_DispatchProtocolCommand_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t call_id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> method;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyBuffer_Data> message;

 private:
  friend class mojo::internal::MessageFragment<DevToolsSession_DispatchProtocolCommand_Params_Data>;

  DevToolsSession_DispatchProtocolCommand_Params_Data();
  ~DevToolsSession_DispatchProtocolCommand_Params_Data() = delete;
};
static_assert(sizeof(DevToolsSession_DispatchProtocolCommand_Params_Data) == 32,
              "Bad sizeof(DevToolsSession_DispatchProtocolCommand_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DevToolsSessionHost_DispatchProtocolResponse_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::DevToolsMessage_Data> message;
  int32_t call_id;
  uint8_t pad1_[4];
  mojo::internal::Pointer<internal::DevToolsSessionState_Data> updates;

 private:
  friend class mojo::internal::MessageFragment<DevToolsSessionHost_DispatchProtocolResponse_Params_Data>;

  DevToolsSessionHost_DispatchProtocolResponse_Params_Data();
  ~DevToolsSessionHost_DispatchProtocolResponse_Params_Data() = delete;
};
static_assert(sizeof(DevToolsSessionHost_DispatchProtocolResponse_Params_Data) == 32,
              "Bad sizeof(DevToolsSessionHost_DispatchProtocolResponse_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DevToolsSessionHost_DispatchProtocolNotification_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::DevToolsMessage_Data> message;
  mojo::internal::Pointer<internal::DevToolsSessionState_Data> updates;

 private:
  friend class mojo::internal::MessageFragment<DevToolsSessionHost_DispatchProtocolNotification_Params_Data>;

  DevToolsSessionHost_DispatchProtocolNotification_Params_Data();
  ~DevToolsSessionHost_DispatchProtocolNotification_Params_Data() = delete;
};
static_assert(sizeof(DevToolsSessionHost_DispatchProtocolNotification_Params_Data) == 24,
              "Bad sizeof(DevToolsSessionHost_DispatchProtocolNotification_Params_Data)");

}  // namespace internal


class DevToolsAgent_AttachDevToolsSession_ParamsDataView {
 public:
  DevToolsAgent_AttachDevToolsSession_ParamsDataView() = default;

  DevToolsAgent_AttachDevToolsSession_ParamsDataView(
      internal::DevToolsAgent_AttachDevToolsSession_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::DevToolsSessionHostAssociatedPtrInfoDataView>(
            &data_->host, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeSession() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::DevToolsSessionAssociatedRequestDataView>(
            &data_->session, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeIoSession() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::DevToolsSessionInterfaceBase>>(
            &data_->io_session, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetReattachSessionStateDataView(
      DevToolsSessionStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReattachSessionState(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::DevToolsSessionStateDataView, UserType>(),
    "Attempting to read the optional `reattach_session_state` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadReattachSessionState` instead "
    "of `ReadReattachSessionState if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->reattach_session_state.Get();
    return mojo::internal::Deserialize<::blink::mojom::DevToolsSessionStateDataView>(
        pointer, output, message_);
  }
  bool client_expects_binary_responses() const {
    return data_->client_expects_binary_responses;
  }
  bool client_is_trusted() const {
    return data_->client_is_trusted;
  }
  inline void GetSessionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSessionId(UserType* output) {
    
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::DevToolsAgent_AttachDevToolsSession_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DevToolsAgent_InspectElement_ParamsDataView {
 public:
  DevToolsAgent_InspectElement_ParamsDataView() = default;

  DevToolsAgent_InspectElement_ParamsDataView(
      internal::DevToolsAgent_InspectElement_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPoint(UserType* output) {
    
    auto* pointer = data_->point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
 private:
  internal::DevToolsAgent_InspectElement_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DevToolsAgent_ReportChildTargets_ParamsDataView {
 public:
  DevToolsAgent_ReportChildTargets_ParamsDataView() = default;

  DevToolsAgent_ReportChildTargets_ParamsDataView(
      internal::DevToolsAgent_ReportChildTargets_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool report() const {
    return data_->report;
  }
  bool wait_for_debugger() const {
    return data_->wait_for_debugger;
  }
 private:
  internal::DevToolsAgent_ReportChildTargets_Params_Data* data_ = nullptr;
};



class DevToolsAgent_ReportChildTargets_ResponseParamsDataView {
 public:
  DevToolsAgent_ReportChildTargets_ResponseParamsDataView() = default;

  DevToolsAgent_ReportChildTargets_ResponseParamsDataView(
      internal::DevToolsAgent_ReportChildTargets_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DevToolsAgent_ReportChildTargets_ResponseParams_Data* data_ = nullptr;
};



class DevToolsAgentHost_ChildTargetCreated_ParamsDataView {
 public:
  DevToolsAgentHost_ChildTargetCreated_ParamsDataView() = default;

  DevToolsAgentHost_ChildTargetCreated_ParamsDataView(
      internal::DevToolsAgentHost_ChildTargetCreated_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeWorkerDevtoolsAgent() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::DevToolsAgentInterfaceBase>>(
            &data_->worker_devtools_agent, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeWorkerDevtoolsAgentHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::DevToolsAgentHostInterfaceBase>>(
            &data_->worker_devtools_agent_host, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetDevtoolsWorkerTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevtoolsWorkerToken(UserType* output) {
    
    auto* pointer = data_->devtools_worker_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  bool waiting_for_debugger() const {
    return data_->waiting_for_debugger;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadContextType(UserType* output) const {
    auto data_value = data_->context_type;
    return mojo::internal::Deserialize<::blink::mojom::DevToolsExecutionContextType>(
        data_value, output);
  }
  DevToolsExecutionContextType context_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::DevToolsExecutionContextType>(data_->context_type));
  }
 private:
  internal::DevToolsAgentHost_ChildTargetCreated_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DevToolsSession_DispatchProtocolCommand_ParamsDataView {
 public:
  DevToolsSession_DispatchProtocolCommand_ParamsDataView() = default;

  DevToolsSession_DispatchProtocolCommand_ParamsDataView(
      internal::DevToolsSession_DispatchProtocolCommand_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t call_id() const {
    return data_->call_id;
  }
  inline void GetMethodDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMethod(UserType* output) {
    
    auto* pointer = data_->method.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      ::mojo_base::mojom::ReadOnlyBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::DevToolsSession_DispatchProtocolCommand_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DevToolsSessionHost_DispatchProtocolResponse_ParamsDataView {
 public:
  DevToolsSessionHost_DispatchProtocolResponse_ParamsDataView() = default;

  DevToolsSessionHost_DispatchProtocolResponse_ParamsDataView(
      internal::DevToolsSessionHost_DispatchProtocolResponse_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      DevToolsMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::DevToolsMessageDataView>(
        pointer, output, message_);
  }
  int32_t call_id() const {
    return data_->call_id;
  }
  inline void GetUpdatesDataView(
      DevToolsSessionStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUpdates(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::DevToolsSessionStateDataView, UserType>(),
    "Attempting to read the optional `updates` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUpdates` instead "
    "of `ReadUpdates if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->updates.Get();
    return mojo::internal::Deserialize<::blink::mojom::DevToolsSessionStateDataView>(
        pointer, output, message_);
  }
 private:
  internal::DevToolsSessionHost_DispatchProtocolResponse_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DevToolsSessionHost_DispatchProtocolNotification_ParamsDataView {
 public:
  DevToolsSessionHost_DispatchProtocolNotification_ParamsDataView() = default;

  DevToolsSessionHost_DispatchProtocolNotification_ParamsDataView(
      internal::DevToolsSessionHost_DispatchProtocolNotification_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      DevToolsMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::DevToolsMessageDataView>(
        pointer, output, message_);
  }
  inline void GetUpdatesDataView(
      DevToolsSessionStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUpdates(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::DevToolsSessionStateDataView, UserType>(),
    "Attempting to read the optional `updates` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUpdates` instead "
    "of `ReadUpdates if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->updates.Get();
    return mojo::internal::Deserialize<::blink::mojom::DevToolsSessionStateDataView>(
        pointer, output, message_);
  }
 private:
  internal::DevToolsSessionHost_DispatchProtocolNotification_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void DevToolsAgent_AttachDevToolsSession_ParamsDataView::GetReattachSessionStateDataView(
    DevToolsSessionStateDataView* output) {
  auto pointer = data_->reattach_session_state.Get();
  *output = DevToolsSessionStateDataView(pointer, message_);
}
inline void DevToolsAgent_AttachDevToolsSession_ParamsDataView::GetSessionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void DevToolsAgent_InspectElement_ParamsDataView::GetPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}






inline void DevToolsAgentHost_ChildTargetCreated_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void DevToolsAgentHost_ChildTargetCreated_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void DevToolsAgentHost_ChildTargetCreated_ParamsDataView::GetDevtoolsWorkerTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_worker_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void DevToolsSession_DispatchProtocolCommand_ParamsDataView::GetMethodDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->method.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void DevToolsSession_DispatchProtocolCommand_ParamsDataView::GetMessageDataView(
    ::mojo_base::mojom::ReadOnlyBufferDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::mojo_base::mojom::ReadOnlyBufferDataView(pointer, message_);
}


inline void DevToolsSessionHost_DispatchProtocolResponse_ParamsDataView::GetMessageDataView(
    DevToolsMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = DevToolsMessageDataView(pointer, message_);
}
inline void DevToolsSessionHost_DispatchProtocolResponse_ParamsDataView::GetUpdatesDataView(
    DevToolsSessionStateDataView* output) {
  auto pointer = data_->updates.Get();
  *output = DevToolsSessionStateDataView(pointer, message_);
}


inline void DevToolsSessionHost_DispatchProtocolNotification_ParamsDataView::GetMessageDataView(
    DevToolsMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = DevToolsMessageDataView(pointer, message_);
}
inline void DevToolsSessionHost_DispatchProtocolNotification_ParamsDataView::GetUpdatesDataView(
    DevToolsSessionStateDataView* output) {
  auto pointer = data_->updates.Get();
  *output = DevToolsSessionStateDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_AGENT_MOJOM_PARAMS_DATA_H_