// third_party/blink/public/mojom/devtools/devtools_agent.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('gfx.mojom.Point');
goog.require('mojoBase.mojom.ReadOnlyBuffer');
goog.require('mojoBase.mojom.UnguessableToken');
goog.require('url.mojom.Url');
goog.require('mojoBase.mojom.BigBuffer');




goog.provide('blink.mojom.DevToolsExecutionContextType');
goog.provide('blink.mojom.DevToolsExecutionContextTypeSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.DevToolsExecutionContextTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.DevToolsExecutionContextType = {
  
  kDedicatedWorker: 0,
  kWorklet: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};



goog.provide('blink.mojom.DevToolsAgent');
goog.provide('blink.mojom.DevToolsAgentReceiver');
goog.provide('blink.mojom.DevToolsAgentCallbackRouter');
goog.provide('blink.mojom.DevToolsAgentInterface');
goog.provide('blink.mojom.DevToolsAgentRemote');
goog.provide('blink.mojom.DevToolsAgentPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.DevToolsAgentPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.DevToolsAgent.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.DevToolsAgentInterface = class {
  
  /**
   * @param { !Object } host
   * @param { !Object } session
   * @param { !blink.mojom.DevToolsSessionPendingReceiver } ioSession
   * @param { ?blink.mojom.DevToolsSessionState } reattachSessionState
   * @param { !boolean } clientExpectsBinaryResponses
   * @param { !boolean } clientIsTrusted
   * @param { !string } sessionId
   */

  attachDevToolsSession(host, session, ioSession, reattachSessionState, clientExpectsBinaryResponses, clientIsTrusted, sessionId) {}
  
  /**
   * @param { !gfx.mojom.Point } point
   */

  inspectElement(point) {}
  
  /**
   * @param { !boolean } report
   * @param { !boolean } waitForDebugger
   * @return {!Promise}
   */

  reportChildTargets(report, waitForDebugger) {}
};

/**
 * @export
 * @implements { blink.mojom.DevToolsAgentInterface }
 */
blink.mojom.DevToolsAgentRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.DevToolsAgentPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.DevToolsAgentPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.DevToolsAgentPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } host
   * @param { !Object } session
   * @param { !blink.mojom.DevToolsSessionPendingReceiver } ioSession
   * @param { ?blink.mojom.DevToolsSessionState } reattachSessionState
   * @param { !boolean } clientExpectsBinaryResponses
   * @param { !boolean } clientIsTrusted
   * @param { !string } sessionId
   */

  attachDevToolsSession(
      host,
      session,
      ioSession,
      reattachSessionState,
      clientExpectsBinaryResponses,
      clientIsTrusted,
      sessionId) {
    this.proxy.sendMessage(
        0,
        blink.mojom.DevToolsAgent_AttachDevToolsSession_ParamsSpec.$,
        null,
        [
          host,
          session,
          ioSession,
          reattachSessionState,
          clientExpectsBinaryResponses,
          clientIsTrusted,
          sessionId
        ]);
  }

  
  /**
   * @param { !gfx.mojom.Point } point
   */

  inspectElement(
      point) {
    this.proxy.sendMessage(
        1,
        blink.mojom.DevToolsAgent_InspectElement_ParamsSpec.$,
        null,
        [
          point
        ]);
  }

  
  /**
   * @param { !boolean } report
   * @param { !boolean } waitForDebugger
   * @return {!Promise}
   */

  reportChildTargets(
      report,
      waitForDebugger) {
    return this.proxy.sendMessage(
        2,
        blink.mojom.DevToolsAgent_ReportChildTargets_ParamsSpec.$,
        blink.mojom.DevToolsAgent_ReportChildTargets_ResponseParamsSpec.$,
        [
          report,
          waitForDebugger
        ]);
  }
};

/**
 * An object which receives request messages for the DevToolsAgent
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.DevToolsAgentReceiver = class {
  /**
   * @param {!blink.mojom.DevToolsAgentInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.DevToolsAgentRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.DevToolsAgentRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.DevToolsAgentRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.DevToolsAgent_AttachDevToolsSession_ParamsSpec.$,
        null,
        impl.attachDevToolsSession.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.DevToolsAgent_InspectElement_ParamsSpec.$,
        null,
        impl.inspectElement.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.mojom.DevToolsAgent_ReportChildTargets_ParamsSpec.$,
        blink.mojom.DevToolsAgent_ReportChildTargets_ResponseParamsSpec.$,
        impl.reportChildTargets.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.DevToolsAgent = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.DevToolsAgent";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.DevToolsAgentRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.DevToolsAgentRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the DevToolsAgent
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.DevToolsAgentCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.DevToolsAgentRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.DevToolsAgentRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.attachDevToolsSession =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.DevToolsAgent_AttachDevToolsSession_ParamsSpec.$,
        null,
        this.attachDevToolsSession.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.inspectElement =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.DevToolsAgent_InspectElement_ParamsSpec.$,
        null,
        this.inspectElement.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.reportChildTargets =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.mojom.DevToolsAgent_ReportChildTargets_ParamsSpec.$,
        blink.mojom.DevToolsAgent_ReportChildTargets_ResponseParamsSpec.$,
        this.reportChildTargets.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.DevToolsAgentHost');
goog.provide('blink.mojom.DevToolsAgentHostReceiver');
goog.provide('blink.mojom.DevToolsAgentHostCallbackRouter');
goog.provide('blink.mojom.DevToolsAgentHostInterface');
goog.provide('blink.mojom.DevToolsAgentHostRemote');
goog.provide('blink.mojom.DevToolsAgentHostPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.DevToolsAgentHostPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.DevToolsAgentHost.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.DevToolsAgentHostInterface = class {
  
  /**
   * @param { !blink.mojom.DevToolsAgentRemote } workerDevtoolsAgent
   * @param { !blink.mojom.DevToolsAgentHostPendingReceiver } workerDevtoolsAgentHost
   * @param { !url.mojom.Url } url
   * @param { !string } name
   * @param { !mojoBase.mojom.UnguessableToken } devtoolsWorkerToken
   * @param { !boolean } waitingForDebugger
   * @param { !blink.mojom.DevToolsExecutionContextType } contextType
   */

  childTargetCreated(workerDevtoolsAgent, workerDevtoolsAgentHost, url, name, devtoolsWorkerToken, waitingForDebugger, contextType) {}
};

/**
 * @export
 * @implements { blink.mojom.DevToolsAgentHostInterface }
 */
blink.mojom.DevToolsAgentHostRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.DevToolsAgentHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.DevToolsAgentHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.DevToolsAgentHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !blink.mojom.DevToolsAgentRemote } workerDevtoolsAgent
   * @param { !blink.mojom.DevToolsAgentHostPendingReceiver } workerDevtoolsAgentHost
   * @param { !url.mojom.Url } url
   * @param { !string } name
   * @param { !mojoBase.mojom.UnguessableToken } devtoolsWorkerToken
   * @param { !boolean } waitingForDebugger
   * @param { !blink.mojom.DevToolsExecutionContextType } contextType
   */

  childTargetCreated(
      workerDevtoolsAgent,
      workerDevtoolsAgentHost,
      url,
      name,
      devtoolsWorkerToken,
      waitingForDebugger,
      contextType) {
    this.proxy.sendMessage(
        0,
        blink.mojom.DevToolsAgentHost_ChildTargetCreated_ParamsSpec.$,
        null,
        [
          workerDevtoolsAgent,
          workerDevtoolsAgentHost,
          url,
          name,
          devtoolsWorkerToken,
          waitingForDebugger,
          contextType
        ]);
  }
};

/**
 * An object which receives request messages for the DevToolsAgentHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.DevToolsAgentHostReceiver = class {
  /**
   * @param {!blink.mojom.DevToolsAgentHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.DevToolsAgentHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.DevToolsAgentHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.DevToolsAgentHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.DevToolsAgentHost_ChildTargetCreated_ParamsSpec.$,
        null,
        impl.childTargetCreated.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.DevToolsAgentHost = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.DevToolsAgentHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.DevToolsAgentHostRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.DevToolsAgentHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the DevToolsAgentHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.DevToolsAgentHostCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.DevToolsAgentHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.DevToolsAgentHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.childTargetCreated =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.DevToolsAgentHost_ChildTargetCreated_ParamsSpec.$,
        null,
        this.childTargetCreated.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.DevToolsSession');
goog.provide('blink.mojom.DevToolsSessionReceiver');
goog.provide('blink.mojom.DevToolsSessionCallbackRouter');
goog.provide('blink.mojom.DevToolsSessionInterface');
goog.provide('blink.mojom.DevToolsSessionRemote');
goog.provide('blink.mojom.DevToolsSessionPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.DevToolsSessionPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.DevToolsSession.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.DevToolsSessionInterface = class {
  
  /**
   * @param { !number } callId
   * @param { !string } method
   * @param { !mojoBase.mojom.ReadOnlyBuffer } message
   */

  dispatchProtocolCommand(callId, method, message) {}
};

/**
 * @export
 * @implements { blink.mojom.DevToolsSessionInterface }
 */
blink.mojom.DevToolsSessionRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.DevToolsSessionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.DevToolsSessionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.DevToolsSessionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } callId
   * @param { !string } method
   * @param { !mojoBase.mojom.ReadOnlyBuffer } message
   */

  dispatchProtocolCommand(
      callId,
      method,
      message) {
    this.proxy.sendMessage(
        0,
        blink.mojom.DevToolsSession_DispatchProtocolCommand_ParamsSpec.$,
        null,
        [
          callId,
          method,
          message
        ]);
  }
};

/**
 * An object which receives request messages for the DevToolsSession
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.DevToolsSessionReceiver = class {
  /**
   * @param {!blink.mojom.DevToolsSessionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.DevToolsSessionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.DevToolsSessionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.DevToolsSessionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.DevToolsSession_DispatchProtocolCommand_ParamsSpec.$,
        null,
        impl.dispatchProtocolCommand.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.DevToolsSession = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.DevToolsSession";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.DevToolsSessionRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.DevToolsSessionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the DevToolsSession
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.DevToolsSessionCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.DevToolsSessionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.DevToolsSessionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.dispatchProtocolCommand =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.DevToolsSession_DispatchProtocolCommand_ParamsSpec.$,
        null,
        this.dispatchProtocolCommand.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.DevToolsSessionHost');
goog.provide('blink.mojom.DevToolsSessionHostReceiver');
goog.provide('blink.mojom.DevToolsSessionHostCallbackRouter');
goog.provide('blink.mojom.DevToolsSessionHostInterface');
goog.provide('blink.mojom.DevToolsSessionHostRemote');
goog.provide('blink.mojom.DevToolsSessionHostPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.DevToolsSessionHostPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.DevToolsSessionHost.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.DevToolsSessionHostInterface = class {
  
  /**
   * @param { !blink.mojom.DevToolsMessage } message
   * @param { !number } callId
   * @param { ?blink.mojom.DevToolsSessionState } updates
   */

  dispatchProtocolResponse(message, callId, updates) {}
  
  /**
   * @param { !blink.mojom.DevToolsMessage } message
   * @param { ?blink.mojom.DevToolsSessionState } updates
   */

  dispatchProtocolNotification(message, updates) {}
};

/**
 * @export
 * @implements { blink.mojom.DevToolsSessionHostInterface }
 */
blink.mojom.DevToolsSessionHostRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.DevToolsSessionHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.DevToolsSessionHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.DevToolsSessionHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !blink.mojom.DevToolsMessage } message
   * @param { !number } callId
   * @param { ?blink.mojom.DevToolsSessionState } updates
   */

  dispatchProtocolResponse(
      message,
      callId,
      updates) {
    this.proxy.sendMessage(
        0,
        blink.mojom.DevToolsSessionHost_DispatchProtocolResponse_ParamsSpec.$,
        null,
        [
          message,
          callId,
          updates
        ]);
  }

  
  /**
   * @param { !blink.mojom.DevToolsMessage } message
   * @param { ?blink.mojom.DevToolsSessionState } updates
   */

  dispatchProtocolNotification(
      message,
      updates) {
    this.proxy.sendMessage(
        1,
        blink.mojom.DevToolsSessionHost_DispatchProtocolNotification_ParamsSpec.$,
        null,
        [
          message,
          updates
        ]);
  }
};

/**
 * An object which receives request messages for the DevToolsSessionHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.DevToolsSessionHostReceiver = class {
  /**
   * @param {!blink.mojom.DevToolsSessionHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.DevToolsSessionHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.DevToolsSessionHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.DevToolsSessionHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.DevToolsSessionHost_DispatchProtocolResponse_ParamsSpec.$,
        null,
        impl.dispatchProtocolResponse.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.DevToolsSessionHost_DispatchProtocolNotification_ParamsSpec.$,
        null,
        impl.dispatchProtocolNotification.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.DevToolsSessionHost = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.DevToolsSessionHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.DevToolsSessionHostRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.DevToolsSessionHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the DevToolsSessionHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.DevToolsSessionHostCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.DevToolsSessionHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.DevToolsSessionHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.dispatchProtocolResponse =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.DevToolsSessionHost_DispatchProtocolResponse_ParamsSpec.$,
        null,
        this.dispatchProtocolResponse.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.dispatchProtocolNotification =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.DevToolsSessionHost_DispatchProtocolNotification_ParamsSpec.$,
        null,
        this.dispatchProtocolNotification.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.DevToolsMessageSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.DevToolsMessageSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.DevToolsSessionStateSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.DevToolsSessionStateSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.DevToolsAgent_AttachDevToolsSession_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.DevToolsAgent_AttachDevToolsSession_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.DevToolsAgent_InspectElement_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.DevToolsAgent_InspectElement_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.DevToolsAgent_ReportChildTargets_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.DevToolsAgent_ReportChildTargets_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.DevToolsAgent_ReportChildTargets_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.DevToolsAgent_ReportChildTargets_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.DevToolsAgentHost_ChildTargetCreated_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.DevToolsAgentHost_ChildTargetCreated_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.DevToolsSession_DispatchProtocolCommand_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.DevToolsSession_DispatchProtocolCommand_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.DevToolsSessionHost_DispatchProtocolResponse_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.DevToolsSessionHost_DispatchProtocolResponse_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.DevToolsSessionHost_DispatchProtocolNotification_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.DevToolsSessionHost_DispatchProtocolNotification_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.DevToolsMessageSpec.$,
    'DevToolsMessage',
    [
      mojo.internal.StructField(
        'data', 0,
        0,
        mojoBase.mojom.BigBufferSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.DevToolsMessage');

/** @record */
blink.mojom.DevToolsMessage = class {
  constructor() {
    /** @export { !mojoBase.mojom.BigBuffer } */
    this.data;
  }
};




mojo.internal.Struct(
    blink.mojom.DevToolsSessionStateSpec.$,
    'DevToolsSessionState',
    [
      mojo.internal.StructField(
        'entries', 0,
        0,
        mojo.internal.Map(mojo.internal.String, mojo.internal.Array(mojo.internal.Uint8, false), true),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.DevToolsSessionState');

/** @record */
blink.mojom.DevToolsSessionState = class {
  constructor() {
    /** @export { !Object<!string, ?Array<!number>> } */
    this.entries;
  }
};




mojo.internal.Struct(
    blink.mojom.DevToolsAgent_AttachDevToolsSession_ParamsSpec.$,
    'DevToolsAgent_AttachDevToolsSession_Params',
    [
      mojo.internal.StructField(
        'host', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(blink.mojom.DevToolsSessionHostRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'session', 8,
        0,
        mojo.internal.AssociatedInterfaceRequest(blink.mojom.DevToolsSessionPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'ioSession', 12,
        0,
        mojo.internal.InterfaceRequest(blink.mojom.DevToolsSessionPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'reattachSessionState', 16,
        0,
        blink.mojom.DevToolsSessionStateSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'clientExpectsBinaryResponses', 24,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'clientIsTrusted', 24,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'sessionId', 32,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 48],]);



goog.provide('blink.mojom.DevToolsAgent_AttachDevToolsSession_Params');

/** @record */
blink.mojom.DevToolsAgent_AttachDevToolsSession_Params = class {
  constructor() {
    /** @export { !Object } */
    this.host;
    /** @export { !Object } */
    this.session;
    /** @export { !blink.mojom.DevToolsSessionPendingReceiver } */
    this.ioSession;
    /** @export { (blink.mojom.DevToolsSessionState|undefined) } */
    this.reattachSessionState;
    /** @export { !boolean } */
    this.clientExpectsBinaryResponses;
    /** @export { !boolean } */
    this.clientIsTrusted;
    /** @export { !string } */
    this.sessionId;
  }
};




mojo.internal.Struct(
    blink.mojom.DevToolsAgent_InspectElement_ParamsSpec.$,
    'DevToolsAgent_InspectElement_Params',
    [
      mojo.internal.StructField(
        'point', 0,
        0,
        gfx.mojom.PointSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.DevToolsAgent_InspectElement_Params');

/** @record */
blink.mojom.DevToolsAgent_InspectElement_Params = class {
  constructor() {
    /** @export { !gfx.mojom.Point } */
    this.point;
  }
};




mojo.internal.Struct(
    blink.mojom.DevToolsAgent_ReportChildTargets_ParamsSpec.$,
    'DevToolsAgent_ReportChildTargets_Params',
    [
      mojo.internal.StructField(
        'report', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'waitForDebugger', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.DevToolsAgent_ReportChildTargets_Params');

/** @record */
blink.mojom.DevToolsAgent_ReportChildTargets_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.report;
    /** @export { !boolean } */
    this.waitForDebugger;
  }
};




mojo.internal.Struct(
    blink.mojom.DevToolsAgent_ReportChildTargets_ResponseParamsSpec.$,
    'DevToolsAgent_ReportChildTargets_ResponseParams',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.DevToolsAgent_ReportChildTargets_ResponseParams');

/** @record */
blink.mojom.DevToolsAgent_ReportChildTargets_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.DevToolsAgentHost_ChildTargetCreated_ParamsSpec.$,
    'DevToolsAgentHost_ChildTargetCreated_Params',
    [
      mojo.internal.StructField(
        'workerDevtoolsAgent', 0,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.DevToolsAgentRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'workerDevtoolsAgentHost', 8,
        0,
        mojo.internal.InterfaceRequest(blink.mojom.DevToolsAgentHostPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'url', 16,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'name', 24,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'devtoolsWorkerToken', 32,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'waitingForDebugger', 12,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'contextType', 40,
        0,
        blink.mojom.DevToolsExecutionContextTypeSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 56],]);



goog.provide('blink.mojom.DevToolsAgentHost_ChildTargetCreated_Params');

/** @record */
blink.mojom.DevToolsAgentHost_ChildTargetCreated_Params = class {
  constructor() {
    /** @export { !blink.mojom.DevToolsAgentRemote } */
    this.workerDevtoolsAgent;
    /** @export { !blink.mojom.DevToolsAgentHostPendingReceiver } */
    this.workerDevtoolsAgentHost;
    /** @export { !boolean } */
    this.waitingForDebugger;
    /** @export { !url.mojom.Url } */
    this.url;
    /** @export { !string } */
    this.name;
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.devtoolsWorkerToken;
    /** @export { !blink.mojom.DevToolsExecutionContextType } */
    this.contextType;
  }
};




mojo.internal.Struct(
    blink.mojom.DevToolsSession_DispatchProtocolCommand_ParamsSpec.$,
    'DevToolsSession_DispatchProtocolCommand_Params',
    [
      mojo.internal.StructField(
        'callId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'method', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'message', 16,
        0,
        mojoBase.mojom.ReadOnlyBufferSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 32],]);



goog.provide('blink.mojom.DevToolsSession_DispatchProtocolCommand_Params');

/** @record */
blink.mojom.DevToolsSession_DispatchProtocolCommand_Params = class {
  constructor() {
    /** @export { !number } */
    this.callId;
    /** @export { !string } */
    this.method;
    /** @export { !mojoBase.mojom.ReadOnlyBuffer } */
    this.message;
  }
};




mojo.internal.Struct(
    blink.mojom.DevToolsSessionHost_DispatchProtocolResponse_ParamsSpec.$,
    'DevToolsSessionHost_DispatchProtocolResponse_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        blink.mojom.DevToolsMessageSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'callId', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'updates', 16,
        0,
        blink.mojom.DevToolsSessionStateSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 32],]);



goog.provide('blink.mojom.DevToolsSessionHost_DispatchProtocolResponse_Params');

/** @record */
blink.mojom.DevToolsSessionHost_DispatchProtocolResponse_Params = class {
  constructor() {
    /** @export { !blink.mojom.DevToolsMessage } */
    this.message;
    /** @export { !number } */
    this.callId;
    /** @export { (blink.mojom.DevToolsSessionState|undefined) } */
    this.updates;
  }
};




mojo.internal.Struct(
    blink.mojom.DevToolsSessionHost_DispatchProtocolNotification_ParamsSpec.$,
    'DevToolsSessionHost_DispatchProtocolNotification_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        blink.mojom.DevToolsMessageSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'updates', 8,
        0,
        blink.mojom.DevToolsSessionStateSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.DevToolsSessionHost_DispatchProtocolNotification_Params');

/** @record */
blink.mojom.DevToolsSessionHost_DispatchProtocolNotification_Params = class {
  constructor() {
    /** @export { !blink.mojom.DevToolsMessage } */
    this.message;
    /** @export { (blink.mojom.DevToolsSessionState|undefined) } */
    this.updates;
  }
};


