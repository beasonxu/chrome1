// third_party/blink/public/mojom/devtools/devtools_frontend.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_FRONTEND_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_FRONTEND_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DevToolsFrontend_SetupDevToolsFrontend_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> api_script;
  mojo::internal::AssociatedInterface_Data host;

 private:
  friend class mojo::internal::MessageFragment<DevToolsFrontend_SetupDevToolsFrontend_Params_Data>;

  DevToolsFrontend_SetupDevToolsFrontend_Params_Data();
  ~DevToolsFrontend_SetupDevToolsFrontend_Params_Data() = delete;
};
static_assert(sizeof(DevToolsFrontend_SetupDevToolsFrontend_Params_Data) == 24,
              "Bad sizeof(DevToolsFrontend_SetupDevToolsFrontend_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> extension_api;

 private:
  friend class mojo::internal::MessageFragment<DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data>;

  DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data();
  ~DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data() = delete;
};
static_assert(sizeof(DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data) == 16,
              "Bad sizeof(DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::DictionaryValue_Data> message;

 private:
  friend class mojo::internal::MessageFragment<DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data>;

  DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data();
  ~DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data() = delete;
};
static_assert(sizeof(DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data) == 16,
              "Bad sizeof(DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data)");

}  // namespace internal


class DevToolsFrontend_SetupDevToolsFrontend_ParamsDataView {
 public:
  DevToolsFrontend_SetupDevToolsFrontend_ParamsDataView() = default;

  DevToolsFrontend_SetupDevToolsFrontend_ParamsDataView(
      internal::DevToolsFrontend_SetupDevToolsFrontend_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetApiScriptDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadApiScript(UserType* output) {
    
    auto* pointer = data_->api_script.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::DevToolsFrontendHostAssociatedPtrInfoDataView>(
            &data_->host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DevToolsFrontend_SetupDevToolsFrontend_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DevToolsFrontend_SetupDevToolsExtensionAPI_ParamsDataView {
 public:
  DevToolsFrontend_SetupDevToolsExtensionAPI_ParamsDataView() = default;

  DevToolsFrontend_SetupDevToolsExtensionAPI_ParamsDataView(
      internal::DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetExtensionApiDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadExtensionApi(UserType* output) {
    
    auto* pointer = data_->extension_api.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DevToolsFrontendHost_DispatchEmbedderMessage_ParamsDataView {
 public:
  DevToolsFrontendHost_DispatchEmbedderMessage_ParamsDataView() = default;

  DevToolsFrontendHost_DispatchEmbedderMessage_ParamsDataView(
      internal::DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      ::mojo_base::mojom::DictionaryValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::DictionaryValueDataView>(
        pointer, output, message_);
  }
 private:
  internal::DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void DevToolsFrontend_SetupDevToolsFrontend_ParamsDataView::GetApiScriptDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->api_script.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void DevToolsFrontend_SetupDevToolsExtensionAPI_ParamsDataView::GetExtensionApiDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->extension_api.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void DevToolsFrontendHost_DispatchEmbedderMessage_ParamsDataView::GetMessageDataView(
    ::mojo_base::mojom::DictionaryValueDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::mojo_base::mojom::DictionaryValueDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_FRONTEND_MOJOM_PARAMS_DATA_H_