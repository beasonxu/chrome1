// third_party/blink/public/mojom/devtools/devtools_agent.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_AGENT_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_AGENT_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/devtools/devtools_agent.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT DevToolsAgentInterceptorForTesting : public DevToolsAgent {
  virtual DevToolsAgent* GetForwardingInterface() = 0;
  void AttachDevToolsSession(::mojo::PendingAssociatedRemote<DevToolsSessionHost> host, ::mojo::PendingAssociatedReceiver<DevToolsSession> session, ::mojo::PendingReceiver<DevToolsSession> io_session, DevToolsSessionStatePtr reattach_session_state, bool client_expects_binary_responses, bool client_is_trusted, const std::string& session_id) override;
  void InspectElement(const ::gfx::Point& point) override;
  void ReportChildTargets(bool report, bool wait_for_debugger, ReportChildTargetsCallback callback) override;
};
class BLINK_COMMON_EXPORT DevToolsAgentAsyncWaiter {
 public:
  explicit DevToolsAgentAsyncWaiter(DevToolsAgent* proxy);

  DevToolsAgentAsyncWaiter(const DevToolsAgentAsyncWaiter&) = delete;
  DevToolsAgentAsyncWaiter& operator=(const DevToolsAgentAsyncWaiter&) = delete;

  ~DevToolsAgentAsyncWaiter();
  void ReportChildTargets(
      bool report, bool wait_for_debugger);

 private:
  DevToolsAgent* const proxy_;
};


class BLINK_COMMON_EXPORT DevToolsAgentHostInterceptorForTesting : public DevToolsAgentHost {
  virtual DevToolsAgentHost* GetForwardingInterface() = 0;
  void ChildTargetCreated(::mojo::PendingRemote<DevToolsAgent> worker_devtools_agent, ::mojo::PendingReceiver<DevToolsAgentHost> worker_devtools_agent_host, const ::GURL& url, const std::string& name, const ::base::UnguessableToken& devtools_worker_token, bool waiting_for_debugger, DevToolsExecutionContextType context_type) override;
};
class BLINK_COMMON_EXPORT DevToolsAgentHostAsyncWaiter {
 public:
  explicit DevToolsAgentHostAsyncWaiter(DevToolsAgentHost* proxy);

  DevToolsAgentHostAsyncWaiter(const DevToolsAgentHostAsyncWaiter&) = delete;
  DevToolsAgentHostAsyncWaiter& operator=(const DevToolsAgentHostAsyncWaiter&) = delete;

  ~DevToolsAgentHostAsyncWaiter();

 private:
  DevToolsAgentHost* const proxy_;
};


class BLINK_COMMON_EXPORT DevToolsSessionInterceptorForTesting : public DevToolsSession {
  virtual DevToolsSession* GetForwardingInterface() = 0;
  void DispatchProtocolCommand(int32_t call_id, const std::string& method, ::base::span<const ::uint8_t> message) override;
};
class BLINK_COMMON_EXPORT DevToolsSessionAsyncWaiter {
 public:
  explicit DevToolsSessionAsyncWaiter(DevToolsSession* proxy);

  DevToolsSessionAsyncWaiter(const DevToolsSessionAsyncWaiter&) = delete;
  DevToolsSessionAsyncWaiter& operator=(const DevToolsSessionAsyncWaiter&) = delete;

  ~DevToolsSessionAsyncWaiter();

 private:
  DevToolsSession* const proxy_;
};


class BLINK_COMMON_EXPORT DevToolsSessionHostInterceptorForTesting : public DevToolsSessionHost {
  virtual DevToolsSessionHost* GetForwardingInterface() = 0;
  void DispatchProtocolResponse(DevToolsMessagePtr message, int32_t call_id, DevToolsSessionStatePtr updates) override;
  void DispatchProtocolNotification(DevToolsMessagePtr message, DevToolsSessionStatePtr updates) override;
};
class BLINK_COMMON_EXPORT DevToolsSessionHostAsyncWaiter {
 public:
  explicit DevToolsSessionHostAsyncWaiter(DevToolsSessionHost* proxy);

  DevToolsSessionHostAsyncWaiter(const DevToolsSessionHostAsyncWaiter&) = delete;
  DevToolsSessionHostAsyncWaiter& operator=(const DevToolsSessionHostAsyncWaiter&) = delete;

  ~DevToolsSessionHostAsyncWaiter();

 private:
  DevToolsSessionHost* const proxy_;
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_AGENT_MOJOM_TEST_UTILS_H_