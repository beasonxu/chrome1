// third_party/blink/public/mojom/devtools/devtools_agent.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_AGENT_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_AGENT_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/devtools/devtools_agent.mojom-shared-internal.h"
#include "mojo/public/mojom/base/big_buffer.mojom-shared.h"
#include "mojo/public/mojom/base/read_only_buffer.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class DevToolsMessageDataView;

class DevToolsSessionStateDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::DevToolsMessageDataView> {
  using Data = ::blink::mojom::internal::DevToolsMessage_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::DevToolsSessionStateDataView> {
  using Data = ::blink::mojom::internal::DevToolsSessionState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class DevToolsExecutionContextType : int32_t {
  
  kDedicatedWorker = 0,
  
  kWorklet = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, DevToolsExecutionContextType value);
inline bool IsKnownEnumValue(DevToolsExecutionContextType value) {
  return internal::DevToolsExecutionContextType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class DevToolsAgentInterfaceBase {};

using DevToolsAgentPtrDataView =
    mojo::InterfacePtrDataView<DevToolsAgentInterfaceBase>;
using DevToolsAgentRequestDataView =
    mojo::InterfaceRequestDataView<DevToolsAgentInterfaceBase>;
using DevToolsAgentAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<DevToolsAgentInterfaceBase>;
using DevToolsAgentAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<DevToolsAgentInterfaceBase>;
class DevToolsAgentHostInterfaceBase {};

using DevToolsAgentHostPtrDataView =
    mojo::InterfacePtrDataView<DevToolsAgentHostInterfaceBase>;
using DevToolsAgentHostRequestDataView =
    mojo::InterfaceRequestDataView<DevToolsAgentHostInterfaceBase>;
using DevToolsAgentHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<DevToolsAgentHostInterfaceBase>;
using DevToolsAgentHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<DevToolsAgentHostInterfaceBase>;
class DevToolsSessionInterfaceBase {};

using DevToolsSessionPtrDataView =
    mojo::InterfacePtrDataView<DevToolsSessionInterfaceBase>;
using DevToolsSessionRequestDataView =
    mojo::InterfaceRequestDataView<DevToolsSessionInterfaceBase>;
using DevToolsSessionAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<DevToolsSessionInterfaceBase>;
using DevToolsSessionAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<DevToolsSessionInterfaceBase>;
class DevToolsSessionHostInterfaceBase {};

using DevToolsSessionHostPtrDataView =
    mojo::InterfacePtrDataView<DevToolsSessionHostInterfaceBase>;
using DevToolsSessionHostRequestDataView =
    mojo::InterfaceRequestDataView<DevToolsSessionHostInterfaceBase>;
using DevToolsSessionHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<DevToolsSessionHostInterfaceBase>;
using DevToolsSessionHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<DevToolsSessionHostInterfaceBase>;


class DevToolsMessageDataView {
 public:
  DevToolsMessageDataView() = default;

  DevToolsMessageDataView(
      internal::DevToolsMessage_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = !data_->data.is_null() ? &data_->data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::DevToolsMessage_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DevToolsSessionStateDataView {
 public:
  DevToolsSessionStateDataView() = default;

  DevToolsSessionStateDataView(
      internal::DevToolsSessionState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEntriesDataView(
      mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEntries(UserType* output) {
    
    auto* pointer = data_->entries.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>>(
        pointer, output, message_);
  }
 private:
  internal::DevToolsSessionState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::DevToolsExecutionContextType>
    : public mojo::internal::EnumHashImpl<::blink::mojom::DevToolsExecutionContextType> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::DevToolsExecutionContextType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::DevToolsExecutionContextType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::DevToolsExecutionContextType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::DevToolsMessageDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::DevToolsMessageDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::DevToolsMessage_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::data(input)) in_data = Traits::data(input);
    mojo::internal::MessageFragment<decltype(fragment->data)>
        data_fragment(fragment.message());
    data_fragment.Claim(&fragment->data);
    mojo::internal::Serialize<::mojo_base::mojom::BigBufferDataView>(
        in_data, data_fragment, true);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->data.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null data in DevToolsMessage struct");
  }

  static bool Deserialize(::blink::mojom::internal::DevToolsMessage_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::DevToolsMessageDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::DevToolsSessionStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::DevToolsSessionStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::DevToolsSessionState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::entries(input)) in_entries = Traits::entries(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->entries)::BaseType>
        entries_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams entries_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, true, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
    mojo::internal::Serialize<mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>>(
        in_entries, entries_fragment, &entries_validate_params);
    fragment->entries.Set(
        entries_fragment.is_null() ? nullptr : entries_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->entries.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null entries in DevToolsSessionState struct");
  }

  static bool Deserialize(::blink::mojom::internal::DevToolsSessionState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::DevToolsSessionStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void DevToolsMessageDataView::GetDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}


inline void DevToolsSessionStateDataView::GetEntriesDataView(
    mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>* output) {
  auto pointer = data_->entries.Get();
  *output = mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::DevToolsExecutionContextType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::DevToolsExecutionContextType value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_AGENT_MOJOM_SHARED_H_