// third_party/blink/public/mojom/mediastream/media_stream.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/mediastream/media_stream.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/mediastream/media_stream.mojom-params-data.h"
#include "third_party/blink/public/mojom/mediastream/media_stream.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/mediastream/media_stream.mojom-import-headers.h"
#include "third_party/blink/public/mojom/mediastream/media_stream.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIASTREAM_MEDIA_STREAM_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIASTREAM_MEDIA_STREAM_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
StreamSelectionInfo::StreamSelectionInfo()
    : strategy(),
      session_id() {}

StreamSelectionInfo::StreamSelectionInfo(
    StreamSelectionStrategy strategy_in,
    const absl::optional<::base::UnguessableToken>& session_id_in)
    : strategy(std::move(strategy_in)),
      session_id(std::move(session_id_in)) {}

StreamSelectionInfo::~StreamSelectionInfo() = default;

void StreamSelectionInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "strategy"), this->strategy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type StreamSelectionStrategy>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "session_id"), this->session_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::base::UnguessableToken>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StreamSelectionInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
MediaStreamDevice::MediaStreamDevice()
    : type(),
      id(),
      video_facing(),
      group_id(),
      matched_output_device_id(),
      name(),
      input(),
      session_id(),
      display_media_info() {}

MediaStreamDevice::MediaStreamDevice(
    MediaStreamType type_in,
    const std::string& id_in,
    ::media::VideoFacingMode video_facing_in,
    const absl::optional<std::string>& group_id_in,
    const absl::optional<std::string>& matched_output_device_id_in,
    const std::string& name_in,
    const ::media::AudioParameters& input_in,
    const absl::optional<::base::UnguessableToken>& session_id_in,
    ::media::mojom::DisplayMediaInformationPtr display_media_info_in)
    : type(std::move(type_in)),
      id(std::move(id_in)),
      video_facing(std::move(video_facing_in)),
      group_id(std::move(group_id_in)),
      matched_output_device_id(std::move(matched_output_device_id_in)),
      name(std::move(name_in)),
      input(std::move(input_in)),
      session_id(std::move(session_id_in)),
      display_media_info(std::move(display_media_info_in)) {}

MediaStreamDevice::~MediaStreamDevice() = default;

void MediaStreamDevice::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type MediaStreamType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "id"), this->id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "video_facing"), this->video_facing,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::media::VideoFacingMode>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "group_id"), this->group_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "matched_output_device_id"), this->matched_output_device_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "input"), this->input,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::media::AudioParameters&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "session_id"), this->session_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::base::UnguessableToken>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "display_media_info"), this->display_media_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::media::mojom::DisplayMediaInformationPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool MediaStreamDevice::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
TrackControls::TrackControls()
    : requested(),
      stream_type(),
      device_id() {}

TrackControls::TrackControls(
    bool requested_in,
    MediaStreamType stream_type_in,
    const std::string& device_id_in)
    : requested(std::move(requested_in)),
      stream_type(std::move(stream_type_in)),
      device_id(std::move(device_id_in)) {}

TrackControls::~TrackControls() = default;

void TrackControls::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "requested"), this->requested,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "stream_type"), this->stream_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type MediaStreamType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "device_id"), this->device_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool TrackControls::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
StreamControls::StreamControls()
    : audio(),
      video(),
      hotword_enabled(),
      disable_local_echo(),
      exclude_system_audio(),
      request_pan_tilt_zoom_permission(),
      request_all_screens() {}

StreamControls::StreamControls(
    const ::blink::TrackControls& audio_in,
    const ::blink::TrackControls& video_in,
    bool hotword_enabled_in,
    bool disable_local_echo_in,
    bool exclude_system_audio_in,
    bool request_pan_tilt_zoom_permission_in,
    bool request_all_screens_in)
    : audio(std::move(audio_in)),
      video(std::move(video_in)),
      hotword_enabled(std::move(hotword_enabled_in)),
      disable_local_echo(std::move(disable_local_echo_in)),
      exclude_system_audio(std::move(exclude_system_audio_in)),
      request_pan_tilt_zoom_permission(std::move(request_pan_tilt_zoom_permission_in)),
      request_all_screens(std::move(request_all_screens_in)) {}

StreamControls::~StreamControls() = default;

void StreamControls::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "audio"), this->audio,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::TrackControls&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "video"), this->video,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::TrackControls&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "hotword_enabled"), this->hotword_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "disable_local_echo"), this->disable_local_echo,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "exclude_system_audio"), this->exclude_system_audio,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "request_pan_tilt_zoom_permission"), this->request_pan_tilt_zoom_permission,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "request_all_screens"), this->request_all_screens,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StreamControls::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
GetOpenDeviceResponse::GetOpenDeviceResponse()
    : label(),
      device(),
      pan_tilt_zoom_allowed() {}

GetOpenDeviceResponse::GetOpenDeviceResponse(
    const std::string& label_in,
    const ::blink::MediaStreamDevice& device_in,
    bool pan_tilt_zoom_allowed_in)
    : label(std::move(label_in)),
      device(std::move(device_in)),
      pan_tilt_zoom_allowed(std::move(pan_tilt_zoom_allowed_in)) {}

GetOpenDeviceResponse::~GetOpenDeviceResponse() = default;

void GetOpenDeviceResponse::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "label"), this->label,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "device"), this->device,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::MediaStreamDevice&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "pan_tilt_zoom_allowed"), this->pan_tilt_zoom_allowed,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool GetOpenDeviceResponse::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
StreamDevices::StreamDevices()
    : audio_device(),
      video_device() {}

StreamDevices::StreamDevices(
    const absl::optional<::blink::MediaStreamDevice>& audio_device_in,
    const absl::optional<::blink::MediaStreamDevice>& video_device_in)
    : audio_device(std::move(audio_device_in)),
      video_device(std::move(video_device_in)) {}

StreamDevices::~StreamDevices() = default;

void StreamDevices::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "audio_device"), this->audio_device,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::blink::MediaStreamDevice>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "video_device"), this->video_device,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::blink::MediaStreamDevice>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StreamDevices::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
StreamDevicesSet::StreamDevicesSet()
    : stream_devices() {}

StreamDevicesSet::StreamDevicesSet(
    std::vector<StreamDevicesPtr> stream_devices_in)
    : stream_devices(std::move(stream_devices_in)) {}

StreamDevicesSet::~StreamDevicesSet() = default;

void StreamDevicesSet::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "stream_devices"), this->stream_devices,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<StreamDevicesPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StreamDevicesSet::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char MediaStreamDeviceObserver::Name_[] = "blink.mojom.MediaStreamDeviceObserver";

MediaStreamDeviceObserver::IPCStableHashFunction MediaStreamDeviceObserver::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kMediaStreamDeviceObserver_OnDeviceStopped_Name: {
      return &MediaStreamDeviceObserver::OnDeviceStopped_Sym::IPCStableHash;
    }
    case internal::kMediaStreamDeviceObserver_OnDeviceChanged_Name: {
      return &MediaStreamDeviceObserver::OnDeviceChanged_Sym::IPCStableHash;
    }
    case internal::kMediaStreamDeviceObserver_OnDeviceRequestStateChange_Name: {
      return &MediaStreamDeviceObserver::OnDeviceRequestStateChange_Sym::IPCStableHash;
    }
    case internal::kMediaStreamDeviceObserver_OnDeviceCaptureHandleChange_Name: {
      return &MediaStreamDeviceObserver::OnDeviceCaptureHandleChange_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* MediaStreamDeviceObserver::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kMediaStreamDeviceObserver_OnDeviceStopped_Name:
            return "Receive blink::mojom::MediaStreamDeviceObserver::OnDeviceStopped";
      case internal::kMediaStreamDeviceObserver_OnDeviceChanged_Name:
            return "Receive blink::mojom::MediaStreamDeviceObserver::OnDeviceChanged";
      case internal::kMediaStreamDeviceObserver_OnDeviceRequestStateChange_Name:
            return "Receive blink::mojom::MediaStreamDeviceObserver::OnDeviceRequestStateChange";
      case internal::kMediaStreamDeviceObserver_OnDeviceCaptureHandleChange_Name:
            return "Receive blink::mojom::MediaStreamDeviceObserver::OnDeviceCaptureHandleChange";
    }
  } else {
    switch (message.name()) {
      case internal::kMediaStreamDeviceObserver_OnDeviceStopped_Name:
            return "Receive reply blink::mojom::MediaStreamDeviceObserver::OnDeviceStopped";
      case internal::kMediaStreamDeviceObserver_OnDeviceChanged_Name:
            return "Receive reply blink::mojom::MediaStreamDeviceObserver::OnDeviceChanged";
      case internal::kMediaStreamDeviceObserver_OnDeviceRequestStateChange_Name:
            return "Receive reply blink::mojom::MediaStreamDeviceObserver::OnDeviceRequestStateChange";
      case internal::kMediaStreamDeviceObserver_OnDeviceCaptureHandleChange_Name:
            return "Receive reply blink::mojom::MediaStreamDeviceObserver::OnDeviceCaptureHandleChange";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t MediaStreamDeviceObserver::OnDeviceStopped_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDeviceObserver::OnDeviceStopped");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamDeviceObserver::OnDeviceChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDeviceObserver::OnDeviceChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamDeviceObserver::OnDeviceRequestStateChange_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDeviceObserver::OnDeviceRequestStateChange");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamDeviceObserver::OnDeviceCaptureHandleChange_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDeviceObserver::OnDeviceCaptureHandleChange");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

MediaStreamDeviceObserverProxy::MediaStreamDeviceObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void MediaStreamDeviceObserverProxy::OnDeviceStopped(
    const std::string& in_label, const ::blink::MediaStreamDevice& in_device) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDeviceObserver::OnDeviceStopped", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("label"), in_label,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device"), in_device,
                        "<value of type const ::blink::MediaStreamDevice&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDeviceObserver_OnDeviceStopped_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDeviceObserver_OnDeviceStopped_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->label)::BaseType> label_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_label, label_fragment);
  params->label.Set(
      label_fragment.is_null() ? nullptr : label_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->label.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null label in MediaStreamDeviceObserver.OnDeviceStopped request");
  mojo::internal::MessageFragment<
      typename decltype(params->device)::BaseType> device_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::MediaStreamDeviceDataView>(
      in_device, device_fragment);
  params->device.Set(
      device_fragment.is_null() ? nullptr : device_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device in MediaStreamDeviceObserver.OnDeviceStopped request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDeviceObserver::Name_);
  message.set_method_name("OnDeviceStopped");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void MediaStreamDeviceObserverProxy::OnDeviceChanged(
    const std::string& in_label, const ::blink::MediaStreamDevice& in_old_device, const ::blink::MediaStreamDevice& in_new_device) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDeviceObserver::OnDeviceChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("label"), in_label,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("old_device"), in_old_device,
                        "<value of type const ::blink::MediaStreamDevice&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("new_device"), in_new_device,
                        "<value of type const ::blink::MediaStreamDevice&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDeviceObserver_OnDeviceChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDeviceObserver_OnDeviceChanged_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->label)::BaseType> label_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_label, label_fragment);
  params->label.Set(
      label_fragment.is_null() ? nullptr : label_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->label.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null label in MediaStreamDeviceObserver.OnDeviceChanged request");
  mojo::internal::MessageFragment<
      typename decltype(params->old_device)::BaseType> old_device_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::MediaStreamDeviceDataView>(
      in_old_device, old_device_fragment);
  params->old_device.Set(
      old_device_fragment.is_null() ? nullptr : old_device_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->old_device.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null old_device in MediaStreamDeviceObserver.OnDeviceChanged request");
  mojo::internal::MessageFragment<
      typename decltype(params->new_device)::BaseType> new_device_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::MediaStreamDeviceDataView>(
      in_new_device, new_device_fragment);
  params->new_device.Set(
      new_device_fragment.is_null() ? nullptr : new_device_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->new_device.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null new_device in MediaStreamDeviceObserver.OnDeviceChanged request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDeviceObserver::Name_);
  message.set_method_name("OnDeviceChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void MediaStreamDeviceObserverProxy::OnDeviceRequestStateChange(
    const std::string& in_label, const ::blink::MediaStreamDevice& in_device, MediaStreamStateChange in_new_state) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDeviceObserver::OnDeviceRequestStateChange", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("label"), in_label,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device"), in_device,
                        "<value of type const ::blink::MediaStreamDevice&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("new_state"), in_new_state,
                        "<value of type MediaStreamStateChange>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDeviceObserver_OnDeviceRequestStateChange_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDeviceObserver_OnDeviceRequestStateChange_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->label)::BaseType> label_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_label, label_fragment);
  params->label.Set(
      label_fragment.is_null() ? nullptr : label_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->label.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null label in MediaStreamDeviceObserver.OnDeviceRequestStateChange request");
  mojo::internal::MessageFragment<
      typename decltype(params->device)::BaseType> device_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::MediaStreamDeviceDataView>(
      in_device, device_fragment);
  params->device.Set(
      device_fragment.is_null() ? nullptr : device_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device in MediaStreamDeviceObserver.OnDeviceRequestStateChange request");
  mojo::internal::Serialize<::blink::mojom::MediaStreamStateChange>(
      in_new_state, &params->new_state);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDeviceObserver::Name_);
  message.set_method_name("OnDeviceRequestStateChange");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void MediaStreamDeviceObserverProxy::OnDeviceCaptureHandleChange(
    const std::string& in_label, const ::blink::MediaStreamDevice& in_device) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDeviceObserver::OnDeviceCaptureHandleChange", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("label"), in_label,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device"), in_device,
                        "<value of type const ::blink::MediaStreamDevice&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDeviceObserver_OnDeviceCaptureHandleChange_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDeviceObserver_OnDeviceCaptureHandleChange_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->label)::BaseType> label_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_label, label_fragment);
  params->label.Set(
      label_fragment.is_null() ? nullptr : label_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->label.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null label in MediaStreamDeviceObserver.OnDeviceCaptureHandleChange request");
  mojo::internal::MessageFragment<
      typename decltype(params->device)::BaseType> device_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::MediaStreamDeviceDataView>(
      in_device, device_fragment);
  params->device.Set(
      device_fragment.is_null() ? nullptr : device_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device in MediaStreamDeviceObserver.OnDeviceCaptureHandleChange request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDeviceObserver::Name_);
  message.set_method_name("OnDeviceCaptureHandleChange");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool MediaStreamDeviceObserverStubDispatch::Accept(
    MediaStreamDeviceObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kMediaStreamDeviceObserver_OnDeviceStopped_Name: {

      DCHECK(message->is_serialized());
      internal::MediaStreamDeviceObserver_OnDeviceStopped_Params_Data* params =
          reinterpret_cast<internal::MediaStreamDeviceObserver_OnDeviceStopped_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_label{};
      ::blink::MediaStreamDevice p_device{};
      MediaStreamDeviceObserver_OnDeviceStopped_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadLabel(&p_label))
        success = false;
      if (success && !input_data_view.ReadDevice(&p_device))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDeviceObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnDeviceStopped(
std::move(p_label), 
std::move(p_device));
      return true;
    }
    case internal::kMediaStreamDeviceObserver_OnDeviceChanged_Name: {

      DCHECK(message->is_serialized());
      internal::MediaStreamDeviceObserver_OnDeviceChanged_Params_Data* params =
          reinterpret_cast<internal::MediaStreamDeviceObserver_OnDeviceChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_label{};
      ::blink::MediaStreamDevice p_old_device{};
      ::blink::MediaStreamDevice p_new_device{};
      MediaStreamDeviceObserver_OnDeviceChanged_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadLabel(&p_label))
        success = false;
      if (success && !input_data_view.ReadOldDevice(&p_old_device))
        success = false;
      if (success && !input_data_view.ReadNewDevice(&p_new_device))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDeviceObserver::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnDeviceChanged(
std::move(p_label), 
std::move(p_old_device), 
std::move(p_new_device));
      return true;
    }
    case internal::kMediaStreamDeviceObserver_OnDeviceRequestStateChange_Name: {

      DCHECK(message->is_serialized());
      internal::MediaStreamDeviceObserver_OnDeviceRequestStateChange_Params_Data* params =
          reinterpret_cast<internal::MediaStreamDeviceObserver_OnDeviceRequestStateChange_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_label{};
      ::blink::MediaStreamDevice p_device{};
      MediaStreamStateChange p_new_state{};
      MediaStreamDeviceObserver_OnDeviceRequestStateChange_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadLabel(&p_label))
        success = false;
      if (success && !input_data_view.ReadDevice(&p_device))
        success = false;
      if (success && !input_data_view.ReadNewState(&p_new_state))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDeviceObserver::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnDeviceRequestStateChange(
std::move(p_label), 
std::move(p_device), 
std::move(p_new_state));
      return true;
    }
    case internal::kMediaStreamDeviceObserver_OnDeviceCaptureHandleChange_Name: {

      DCHECK(message->is_serialized());
      internal::MediaStreamDeviceObserver_OnDeviceCaptureHandleChange_Params_Data* params =
          reinterpret_cast<internal::MediaStreamDeviceObserver_OnDeviceCaptureHandleChange_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_label{};
      ::blink::MediaStreamDevice p_device{};
      MediaStreamDeviceObserver_OnDeviceCaptureHandleChange_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadLabel(&p_label))
        success = false;
      if (success && !input_data_view.ReadDevice(&p_device))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDeviceObserver::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnDeviceCaptureHandleChange(
std::move(p_label), 
std::move(p_device));
      return true;
    }
  }
  return false;
}

// static
bool MediaStreamDeviceObserverStubDispatch::AcceptWithResponder(
    MediaStreamDeviceObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kMediaStreamDeviceObserver_OnDeviceStopped_Name: {
      break;
    }
    case internal::kMediaStreamDeviceObserver_OnDeviceChanged_Name: {
      break;
    }
    case internal::kMediaStreamDeviceObserver_OnDeviceRequestStateChange_Name: {
      break;
    }
    case internal::kMediaStreamDeviceObserver_OnDeviceCaptureHandleChange_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kMediaStreamDeviceObserverValidationInfo[] = {
    {&internal::MediaStreamDeviceObserver_OnDeviceStopped_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::MediaStreamDeviceObserver_OnDeviceChanged_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::MediaStreamDeviceObserver_OnDeviceRequestStateChange_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::MediaStreamDeviceObserver_OnDeviceCaptureHandleChange_Params_Data::Validate,
     nullptr /* no response */},
};

bool MediaStreamDeviceObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::MediaStreamDeviceObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kMediaStreamDeviceObserverValidationInfo);
}

const char MediaStreamDispatcherHost::Name_[] = "blink.mojom.MediaStreamDispatcherHost";

MediaStreamDispatcherHost::IPCStableHashFunction MediaStreamDispatcherHost::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kMediaStreamDispatcherHost_GenerateStreams_Name: {
      return &MediaStreamDispatcherHost::GenerateStreams_Sym::IPCStableHash;
    }
    case internal::kMediaStreamDispatcherHost_CancelRequest_Name: {
      return &MediaStreamDispatcherHost::CancelRequest_Sym::IPCStableHash;
    }
    case internal::kMediaStreamDispatcherHost_StopStreamDevice_Name: {
      return &MediaStreamDispatcherHost::StopStreamDevice_Sym::IPCStableHash;
    }
    case internal::kMediaStreamDispatcherHost_OpenDevice_Name: {
      return &MediaStreamDispatcherHost::OpenDevice_Sym::IPCStableHash;
    }
    case internal::kMediaStreamDispatcherHost_CloseDevice_Name: {
      return &MediaStreamDispatcherHost::CloseDevice_Sym::IPCStableHash;
    }
    case internal::kMediaStreamDispatcherHost_SetCapturingLinkSecured_Name: {
      return &MediaStreamDispatcherHost::SetCapturingLinkSecured_Sym::IPCStableHash;
    }
    case internal::kMediaStreamDispatcherHost_OnStreamStarted_Name: {
      return &MediaStreamDispatcherHost::OnStreamStarted_Sym::IPCStableHash;
    }
    case internal::kMediaStreamDispatcherHost_GetOpenDevice_Name: {
      return &MediaStreamDispatcherHost::GetOpenDevice_Sym::IPCStableHash;
    }
    case internal::kMediaStreamDispatcherHost_KeepDeviceAliveForTransfer_Name: {
      return &MediaStreamDispatcherHost::KeepDeviceAliveForTransfer_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* MediaStreamDispatcherHost::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kMediaStreamDispatcherHost_GenerateStreams_Name:
            return "Receive blink::mojom::MediaStreamDispatcherHost::GenerateStreams";
      case internal::kMediaStreamDispatcherHost_CancelRequest_Name:
            return "Receive blink::mojom::MediaStreamDispatcherHost::CancelRequest";
      case internal::kMediaStreamDispatcherHost_StopStreamDevice_Name:
            return "Receive blink::mojom::MediaStreamDispatcherHost::StopStreamDevice";
      case internal::kMediaStreamDispatcherHost_OpenDevice_Name:
            return "Receive blink::mojom::MediaStreamDispatcherHost::OpenDevice";
      case internal::kMediaStreamDispatcherHost_CloseDevice_Name:
            return "Receive blink::mojom::MediaStreamDispatcherHost::CloseDevice";
      case internal::kMediaStreamDispatcherHost_SetCapturingLinkSecured_Name:
            return "Receive blink::mojom::MediaStreamDispatcherHost::SetCapturingLinkSecured";
      case internal::kMediaStreamDispatcherHost_OnStreamStarted_Name:
            return "Receive blink::mojom::MediaStreamDispatcherHost::OnStreamStarted";
      case internal::kMediaStreamDispatcherHost_GetOpenDevice_Name:
            return "Receive blink::mojom::MediaStreamDispatcherHost::GetOpenDevice";
      case internal::kMediaStreamDispatcherHost_KeepDeviceAliveForTransfer_Name:
            return "Receive blink::mojom::MediaStreamDispatcherHost::KeepDeviceAliveForTransfer";
    }
  } else {
    switch (message.name()) {
      case internal::kMediaStreamDispatcherHost_GenerateStreams_Name:
            return "Receive reply blink::mojom::MediaStreamDispatcherHost::GenerateStreams";
      case internal::kMediaStreamDispatcherHost_CancelRequest_Name:
            return "Receive reply blink::mojom::MediaStreamDispatcherHost::CancelRequest";
      case internal::kMediaStreamDispatcherHost_StopStreamDevice_Name:
            return "Receive reply blink::mojom::MediaStreamDispatcherHost::StopStreamDevice";
      case internal::kMediaStreamDispatcherHost_OpenDevice_Name:
            return "Receive reply blink::mojom::MediaStreamDispatcherHost::OpenDevice";
      case internal::kMediaStreamDispatcherHost_CloseDevice_Name:
            return "Receive reply blink::mojom::MediaStreamDispatcherHost::CloseDevice";
      case internal::kMediaStreamDispatcherHost_SetCapturingLinkSecured_Name:
            return "Receive reply blink::mojom::MediaStreamDispatcherHost::SetCapturingLinkSecured";
      case internal::kMediaStreamDispatcherHost_OnStreamStarted_Name:
            return "Receive reply blink::mojom::MediaStreamDispatcherHost::OnStreamStarted";
      case internal::kMediaStreamDispatcherHost_GetOpenDevice_Name:
            return "Receive reply blink::mojom::MediaStreamDispatcherHost::GetOpenDevice";
      case internal::kMediaStreamDispatcherHost_KeepDeviceAliveForTransfer_Name:
            return "Receive reply blink::mojom::MediaStreamDispatcherHost::KeepDeviceAliveForTransfer";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t MediaStreamDispatcherHost::GenerateStreams_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDispatcherHost::GenerateStreams");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamDispatcherHost::CancelRequest_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDispatcherHost::CancelRequest");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamDispatcherHost::StopStreamDevice_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDispatcherHost::StopStreamDevice");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamDispatcherHost::OpenDevice_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDispatcherHost::OpenDevice");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamDispatcherHost::CloseDevice_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDispatcherHost::CloseDevice");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamDispatcherHost::SetCapturingLinkSecured_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDispatcherHost::SetCapturingLinkSecured");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamDispatcherHost::OnStreamStarted_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDispatcherHost::OnStreamStarted");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamDispatcherHost::GetOpenDevice_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDispatcherHost::GetOpenDevice");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamDispatcherHost::KeepDeviceAliveForTransfer_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamDispatcherHost::KeepDeviceAliveForTransfer");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class MediaStreamDispatcherHost_GenerateStreams_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaStreamDispatcherHost_GenerateStreams_ForwardToCallback(
      MediaStreamDispatcherHost::GenerateStreamsCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaStreamDispatcherHost_GenerateStreams_ForwardToCallback(const MediaStreamDispatcherHost_GenerateStreams_ForwardToCallback&) = delete;
  MediaStreamDispatcherHost_GenerateStreams_ForwardToCallback& operator=(const MediaStreamDispatcherHost_GenerateStreams_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaStreamDispatcherHost::GenerateStreamsCallback callback_;
};

class MediaStreamDispatcherHost_OpenDevice_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaStreamDispatcherHost_OpenDevice_ForwardToCallback(
      MediaStreamDispatcherHost::OpenDeviceCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaStreamDispatcherHost_OpenDevice_ForwardToCallback(const MediaStreamDispatcherHost_OpenDevice_ForwardToCallback&) = delete;
  MediaStreamDispatcherHost_OpenDevice_ForwardToCallback& operator=(const MediaStreamDispatcherHost_OpenDevice_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaStreamDispatcherHost::OpenDeviceCallback callback_;
};

class MediaStreamDispatcherHost_GetOpenDevice_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaStreamDispatcherHost_GetOpenDevice_ForwardToCallback(
      MediaStreamDispatcherHost::GetOpenDeviceCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaStreamDispatcherHost_GetOpenDevice_ForwardToCallback(const MediaStreamDispatcherHost_GetOpenDevice_ForwardToCallback&) = delete;
  MediaStreamDispatcherHost_GetOpenDevice_ForwardToCallback& operator=(const MediaStreamDispatcherHost_GetOpenDevice_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaStreamDispatcherHost::GetOpenDeviceCallback callback_;
};

class MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ForwardToCallback(
      MediaStreamDispatcherHost::KeepDeviceAliveForTransferCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ForwardToCallback(const MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ForwardToCallback&) = delete;
  MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ForwardToCallback& operator=(const MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaStreamDispatcherHost::KeepDeviceAliveForTransferCallback callback_;
};

MediaStreamDispatcherHostProxy::MediaStreamDispatcherHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void MediaStreamDispatcherHostProxy::GenerateStreams(
    int32_t in_request_id, const ::blink::StreamControls& in_controls, bool in_user_gesture, StreamSelectionInfoPtr in_audio_stream_selection_info, GenerateStreamsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDispatcherHost::GenerateStreams", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("request_id"), in_request_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("controls"), in_controls,
                        "<value of type const ::blink::StreamControls&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("user_gesture"), in_user_gesture,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("audio_stream_selection_info"), in_audio_stream_selection_info,
                        "<value of type StreamSelectionInfoPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_GenerateStreams_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_GenerateStreams_Params_Data> params(
          message);
  params.Allocate();
  params->request_id = in_request_id;
  mojo::internal::MessageFragment<
      typename decltype(params->controls)::BaseType> controls_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::StreamControlsDataView>(
      in_controls, controls_fragment);
  params->controls.Set(
      controls_fragment.is_null() ? nullptr : controls_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->controls.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null controls in MediaStreamDispatcherHost.GenerateStreams request");
  params->user_gesture = in_user_gesture;
  mojo::internal::MessageFragment<
      typename decltype(params->audio_stream_selection_info)::BaseType> audio_stream_selection_info_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::StreamSelectionInfoDataView>(
      in_audio_stream_selection_info, audio_stream_selection_info_fragment);
  params->audio_stream_selection_info.Set(
      audio_stream_selection_info_fragment.is_null() ? nullptr : audio_stream_selection_info_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->audio_stream_selection_info.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null audio_stream_selection_info in MediaStreamDispatcherHost.GenerateStreams request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("GenerateStreams");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaStreamDispatcherHost_GenerateStreams_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void MediaStreamDispatcherHostProxy::CancelRequest(
    int32_t in_request_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDispatcherHost::CancelRequest", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("request_id"), in_request_id,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_CancelRequest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_CancelRequest_Params_Data> params(
          message);
  params.Allocate();
  params->request_id = in_request_id;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("CancelRequest");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void MediaStreamDispatcherHostProxy::StopStreamDevice(
    const std::string& in_device_id, const absl::optional<::base::UnguessableToken>& in_session_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDispatcherHost::StopStreamDevice", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_id"), in_device_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("session_id"), in_session_id,
                        "<value of type const absl::optional<::base::UnguessableToken>&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_StopStreamDevice_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_StopStreamDevice_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->device_id)::BaseType> device_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_device_id, device_id_fragment);
  params->device_id.Set(
      device_id_fragment.is_null() ? nullptr : device_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_id in MediaStreamDispatcherHost.StopStreamDevice request");
  mojo::internal::MessageFragment<
      typename decltype(params->session_id)::BaseType> session_id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_session_id, session_id_fragment);
  params->session_id.Set(
      session_id_fragment.is_null() ? nullptr : session_id_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("StopStreamDevice");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void MediaStreamDispatcherHostProxy::OpenDevice(
    int32_t in_request_id, const std::string& in_device_id, MediaStreamType in_type, OpenDeviceCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDispatcherHost::OpenDevice", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("request_id"), in_request_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_id"), in_device_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("type"), in_type,
                        "<value of type MediaStreamType>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_OpenDevice_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_OpenDevice_Params_Data> params(
          message);
  params.Allocate();
  params->request_id = in_request_id;
  mojo::internal::MessageFragment<
      typename decltype(params->device_id)::BaseType> device_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_device_id, device_id_fragment);
  params->device_id.Set(
      device_id_fragment.is_null() ? nullptr : device_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_id in MediaStreamDispatcherHost.OpenDevice request");
  mojo::internal::Serialize<::blink::mojom::MediaStreamType>(
      in_type, &params->type);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("OpenDevice");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaStreamDispatcherHost_OpenDevice_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void MediaStreamDispatcherHostProxy::CloseDevice(
    const std::string& in_label) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDispatcherHost::CloseDevice", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("label"), in_label,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_CloseDevice_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_CloseDevice_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->label)::BaseType> label_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_label, label_fragment);
  params->label.Set(
      label_fragment.is_null() ? nullptr : label_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->label.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null label in MediaStreamDispatcherHost.CloseDevice request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("CloseDevice");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void MediaStreamDispatcherHostProxy::SetCapturingLinkSecured(
    const absl::optional<::base::UnguessableToken>& in_session_id, MediaStreamType in_type, bool in_is_secure) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDispatcherHost::SetCapturingLinkSecured", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("session_id"), in_session_id,
                        "<value of type const absl::optional<::base::UnguessableToken>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("type"), in_type,
                        "<value of type MediaStreamType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_secure"), in_is_secure,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_SetCapturingLinkSecured_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_SetCapturingLinkSecured_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->session_id)::BaseType> session_id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_session_id, session_id_fragment);
  params->session_id.Set(
      session_id_fragment.is_null() ? nullptr : session_id_fragment.data());
  mojo::internal::Serialize<::blink::mojom::MediaStreamType>(
      in_type, &params->type);
  params->is_secure = in_is_secure;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("SetCapturingLinkSecured");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void MediaStreamDispatcherHostProxy::OnStreamStarted(
    const std::string& in_label) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDispatcherHost::OnStreamStarted", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("label"), in_label,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_OnStreamStarted_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_OnStreamStarted_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->label)::BaseType> label_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_label, label_fragment);
  params->label.Set(
      label_fragment.is_null() ? nullptr : label_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->label.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null label in MediaStreamDispatcherHost.OnStreamStarted request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("OnStreamStarted");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void MediaStreamDispatcherHostProxy::GetOpenDevice(
    int32_t in_request_id, const ::base::UnguessableToken& in_session_id, const ::base::UnguessableToken& in_transfer_id, GetOpenDeviceCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDispatcherHost::GetOpenDevice", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("request_id"), in_request_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("session_id"), in_session_id,
                        "<value of type const ::base::UnguessableToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("transfer_id"), in_transfer_id,
                        "<value of type const ::base::UnguessableToken&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_GetOpenDevice_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_GetOpenDevice_Params_Data> params(
          message);
  params.Allocate();
  params->request_id = in_request_id;
  mojo::internal::MessageFragment<
      typename decltype(params->session_id)::BaseType> session_id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_session_id, session_id_fragment);
  params->session_id.Set(
      session_id_fragment.is_null() ? nullptr : session_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->session_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null session_id in MediaStreamDispatcherHost.GetOpenDevice request");
  mojo::internal::MessageFragment<
      typename decltype(params->transfer_id)::BaseType> transfer_id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_transfer_id, transfer_id_fragment);
  params->transfer_id.Set(
      transfer_id_fragment.is_null() ? nullptr : transfer_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->transfer_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null transfer_id in MediaStreamDispatcherHost.GetOpenDevice request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("GetOpenDevice");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaStreamDispatcherHost_GetOpenDevice_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void MediaStreamDispatcherHostProxy::KeepDeviceAliveForTransfer(
    const ::base::UnguessableToken& in_session_id, const ::base::UnguessableToken& in_transfer_id, KeepDeviceAliveForTransferCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamDispatcherHost::KeepDeviceAliveForTransfer", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("session_id"), in_session_id,
                        "<value of type const ::base::UnguessableToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("transfer_id"), in_transfer_id,
                        "<value of type const ::base::UnguessableToken&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_KeepDeviceAliveForTransfer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->session_id)::BaseType> session_id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_session_id, session_id_fragment);
  params->session_id.Set(
      session_id_fragment.is_null() ? nullptr : session_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->session_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null session_id in MediaStreamDispatcherHost.KeepDeviceAliveForTransfer request");
  mojo::internal::MessageFragment<
      typename decltype(params->transfer_id)::BaseType> transfer_id_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_transfer_id, transfer_id_fragment);
  params->transfer_id.Set(
      transfer_id_fragment.is_null() ? nullptr : transfer_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->transfer_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null transfer_id in MediaStreamDispatcherHost.KeepDeviceAliveForTransfer request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("KeepDeviceAliveForTransfer");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class MediaStreamDispatcherHost_GenerateStreams_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaStreamDispatcherHost::GenerateStreamsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaStreamDispatcherHost_GenerateStreams_ProxyToResponder> proxy(
        new MediaStreamDispatcherHost_GenerateStreams_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaStreamDispatcherHost_GenerateStreams_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaStreamDispatcherHost_GenerateStreams_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaStreamDispatcherHost_GenerateStreams_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaStreamDispatcherHost::GenerateStreamsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      MediaStreamRequestResult in_result, const std::string& in_label, StreamDevicesSetPtr in_stream_devices, bool in_pan_tilt_zoom_allowed);
};

bool MediaStreamDispatcherHost_GenerateStreams_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaStreamDispatcherHost_GenerateStreams_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaStreamDispatcherHost_GenerateStreams_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  MediaStreamRequestResult p_result{};
  std::string p_label{};
  StreamDevicesSetPtr p_stream_devices{};
  bool p_pan_tilt_zoom_allowed{};
  MediaStreamDispatcherHost_GenerateStreams_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (success && !input_data_view.ReadLabel(&p_label))
    success = false;
  if (success && !input_data_view.ReadStreamDevices(&p_stream_devices))
    success = false;
  if (success)
    p_pan_tilt_zoom_allowed = input_data_view.pan_tilt_zoom_allowed();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaStreamDispatcherHost::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result), 
std::move(p_label), 
std::move(p_stream_devices), 
std::move(p_pan_tilt_zoom_allowed));
  return true;
}

void MediaStreamDispatcherHost_GenerateStreams_ProxyToResponder::Run(
    MediaStreamRequestResult in_result, const std::string& in_label, StreamDevicesSetPtr in_stream_devices, bool in_pan_tilt_zoom_allowed) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::MediaStreamDispatcherHost::GenerateStreams", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type MediaStreamRequestResult>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("label"), in_label,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("stream_devices"), in_stream_devices,
                        "<value of type StreamDevicesSetPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("pan_tilt_zoom_allowed"), in_pan_tilt_zoom_allowed,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_GenerateStreams_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_GenerateStreams_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::MediaStreamRequestResult>(
      in_result, &params->result);
  mojo::internal::MessageFragment<
      typename decltype(params->label)::BaseType> label_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_label, label_fragment);
  params->label.Set(
      label_fragment.is_null() ? nullptr : label_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->label.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null label in ");
  mojo::internal::MessageFragment<
      typename decltype(params->stream_devices)::BaseType> stream_devices_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::StreamDevicesSetDataView>(
      in_stream_devices, stream_devices_fragment);
  params->stream_devices.Set(
      stream_devices_fragment.is_null() ? nullptr : stream_devices_fragment.data());
  params->pan_tilt_zoom_allowed = in_pan_tilt_zoom_allowed;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("GenerateStreams");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class MediaStreamDispatcherHost_OpenDevice_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaStreamDispatcherHost::OpenDeviceCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaStreamDispatcherHost_OpenDevice_ProxyToResponder> proxy(
        new MediaStreamDispatcherHost_OpenDevice_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaStreamDispatcherHost_OpenDevice_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaStreamDispatcherHost_OpenDevice_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaStreamDispatcherHost_OpenDevice_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaStreamDispatcherHost::OpenDeviceCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, const std::string& in_label, const ::blink::MediaStreamDevice& in_device);
};

bool MediaStreamDispatcherHost_OpenDevice_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaStreamDispatcherHost_OpenDevice_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaStreamDispatcherHost_OpenDevice_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  std::string p_label{};
  ::blink::MediaStreamDevice p_device{};
  MediaStreamDispatcherHost_OpenDevice_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success && !input_data_view.ReadLabel(&p_label))
    success = false;
  if (success && !input_data_view.ReadDevice(&p_device))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaStreamDispatcherHost::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_label), 
std::move(p_device));
  return true;
}

void MediaStreamDispatcherHost_OpenDevice_ProxyToResponder::Run(
    bool in_success, const std::string& in_label, const ::blink::MediaStreamDevice& in_device) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::MediaStreamDispatcherHost::OpenDevice", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("label"), in_label,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device"), in_device,
                        "<value of type const ::blink::MediaStreamDevice&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_OpenDevice_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_OpenDevice_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->label)::BaseType> label_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_label, label_fragment);
  params->label.Set(
      label_fragment.is_null() ? nullptr : label_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->label.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null label in ");
  mojo::internal::MessageFragment<
      typename decltype(params->device)::BaseType> device_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::MediaStreamDeviceDataView>(
      in_device, device_fragment);
  params->device.Set(
      device_fragment.is_null() ? nullptr : device_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("OpenDevice");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class MediaStreamDispatcherHost_GetOpenDevice_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaStreamDispatcherHost::GetOpenDeviceCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaStreamDispatcherHost_GetOpenDevice_ProxyToResponder> proxy(
        new MediaStreamDispatcherHost_GetOpenDevice_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaStreamDispatcherHost_GetOpenDevice_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaStreamDispatcherHost_GetOpenDevice_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaStreamDispatcherHost_GetOpenDevice_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaStreamDispatcherHost::GetOpenDeviceCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      MediaStreamRequestResult in_result, GetOpenDeviceResponsePtr in_response);
};

bool MediaStreamDispatcherHost_GetOpenDevice_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaStreamDispatcherHost_GetOpenDevice_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaStreamDispatcherHost_GetOpenDevice_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  MediaStreamRequestResult p_result{};
  GetOpenDeviceResponsePtr p_response{};
  MediaStreamDispatcherHost_GetOpenDevice_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (success && !input_data_view.ReadResponse(&p_response))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaStreamDispatcherHost::Name_, 7, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result), 
std::move(p_response));
  return true;
}

void MediaStreamDispatcherHost_GetOpenDevice_ProxyToResponder::Run(
    MediaStreamRequestResult in_result, GetOpenDeviceResponsePtr in_response) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::MediaStreamDispatcherHost::GetOpenDevice", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type MediaStreamRequestResult>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("response"), in_response,
                        "<value of type GetOpenDeviceResponsePtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_GetOpenDevice_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_GetOpenDevice_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::MediaStreamRequestResult>(
      in_result, &params->result);
  mojo::internal::MessageFragment<
      typename decltype(params->response)::BaseType> response_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::GetOpenDeviceResponseDataView>(
      in_response, response_fragment);
  params->response.Set(
      response_fragment.is_null() ? nullptr : response_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("GetOpenDevice");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaStreamDispatcherHost::KeepDeviceAliveForTransferCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ProxyToResponder> proxy(
        new MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaStreamDispatcherHost::KeepDeviceAliveForTransferCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_device_found);
};

bool MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_device_found{};
  MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_device_found = input_data_view.device_found();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaStreamDispatcherHost::Name_, 8, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_device_found));
  return true;
}

void MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ProxyToResponder::Run(
    bool in_device_found) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::MediaStreamDispatcherHost::KeepDeviceAliveForTransfer", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_found"), in_device_found,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamDispatcherHost_KeepDeviceAliveForTransfer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->device_found = in_device_found;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamDispatcherHost::Name_);
  message.set_method_name("KeepDeviceAliveForTransfer");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool MediaStreamDispatcherHostStubDispatch::Accept(
    MediaStreamDispatcherHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kMediaStreamDispatcherHost_GenerateStreams_Name: {
      break;
    }
    case internal::kMediaStreamDispatcherHost_CancelRequest_Name: {

      DCHECK(message->is_serialized());
      internal::MediaStreamDispatcherHost_CancelRequest_Params_Data* params =
          reinterpret_cast<internal::MediaStreamDispatcherHost_CancelRequest_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      int32_t p_request_id{};
      MediaStreamDispatcherHost_CancelRequest_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_request_id = input_data_view.request_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDispatcherHost::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CancelRequest(
std::move(p_request_id));
      return true;
    }
    case internal::kMediaStreamDispatcherHost_StopStreamDevice_Name: {

      DCHECK(message->is_serialized());
      internal::MediaStreamDispatcherHost_StopStreamDevice_Params_Data* params =
          reinterpret_cast<internal::MediaStreamDispatcherHost_StopStreamDevice_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_device_id{};
      absl::optional<::base::UnguessableToken> p_session_id{};
      MediaStreamDispatcherHost_StopStreamDevice_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDeviceId(&p_device_id))
        success = false;
      if (success && !input_data_view.ReadSessionId(&p_session_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDispatcherHost::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StopStreamDevice(
std::move(p_device_id), 
std::move(p_session_id));
      return true;
    }
    case internal::kMediaStreamDispatcherHost_OpenDevice_Name: {
      break;
    }
    case internal::kMediaStreamDispatcherHost_CloseDevice_Name: {

      DCHECK(message->is_serialized());
      internal::MediaStreamDispatcherHost_CloseDevice_Params_Data* params =
          reinterpret_cast<internal::MediaStreamDispatcherHost_CloseDevice_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_label{};
      MediaStreamDispatcherHost_CloseDevice_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadLabel(&p_label))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDispatcherHost::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CloseDevice(
std::move(p_label));
      return true;
    }
    case internal::kMediaStreamDispatcherHost_SetCapturingLinkSecured_Name: {

      DCHECK(message->is_serialized());
      internal::MediaStreamDispatcherHost_SetCapturingLinkSecured_Params_Data* params =
          reinterpret_cast<internal::MediaStreamDispatcherHost_SetCapturingLinkSecured_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      absl::optional<::base::UnguessableToken> p_session_id{};
      MediaStreamType p_type{};
      bool p_is_secure{};
      MediaStreamDispatcherHost_SetCapturingLinkSecured_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadSessionId(&p_session_id))
        success = false;
      if (success && !input_data_view.ReadType(&p_type))
        success = false;
      if (success)
        p_is_secure = input_data_view.is_secure();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDispatcherHost::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetCapturingLinkSecured(
std::move(p_session_id), 
std::move(p_type), 
std::move(p_is_secure));
      return true;
    }
    case internal::kMediaStreamDispatcherHost_OnStreamStarted_Name: {

      DCHECK(message->is_serialized());
      internal::MediaStreamDispatcherHost_OnStreamStarted_Params_Data* params =
          reinterpret_cast<internal::MediaStreamDispatcherHost_OnStreamStarted_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_label{};
      MediaStreamDispatcherHost_OnStreamStarted_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadLabel(&p_label))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDispatcherHost::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnStreamStarted(
std::move(p_label));
      return true;
    }
    case internal::kMediaStreamDispatcherHost_GetOpenDevice_Name: {
      break;
    }
    case internal::kMediaStreamDispatcherHost_KeepDeviceAliveForTransfer_Name: {
      break;
    }
  }
  return false;
}

// static
bool MediaStreamDispatcherHostStubDispatch::AcceptWithResponder(
    MediaStreamDispatcherHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kMediaStreamDispatcherHost_GenerateStreams_Name: {

      internal::MediaStreamDispatcherHost_GenerateStreams_Params_Data* params =
          reinterpret_cast<
              internal::MediaStreamDispatcherHost_GenerateStreams_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_request_id{};
      ::blink::StreamControls p_controls{};
      bool p_user_gesture{};
      StreamSelectionInfoPtr p_audio_stream_selection_info{};
      MediaStreamDispatcherHost_GenerateStreams_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_request_id = input_data_view.request_id();
      if (success && !input_data_view.ReadControls(&p_controls))
        success = false;
      if (success)
        p_user_gesture = input_data_view.user_gesture();
      if (success && !input_data_view.ReadAudioStreamSelectionInfo(&p_audio_stream_selection_info))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDispatcherHost::Name_, 0, false);
        return false;
      }
      MediaStreamDispatcherHost::GenerateStreamsCallback callback =
          MediaStreamDispatcherHost_GenerateStreams_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GenerateStreams(
std::move(p_request_id), 
std::move(p_controls), 
std::move(p_user_gesture), 
std::move(p_audio_stream_selection_info), std::move(callback));
      return true;
    }
    case internal::kMediaStreamDispatcherHost_CancelRequest_Name: {
      break;
    }
    case internal::kMediaStreamDispatcherHost_StopStreamDevice_Name: {
      break;
    }
    case internal::kMediaStreamDispatcherHost_OpenDevice_Name: {

      internal::MediaStreamDispatcherHost_OpenDevice_Params_Data* params =
          reinterpret_cast<
              internal::MediaStreamDispatcherHost_OpenDevice_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_request_id{};
      std::string p_device_id{};
      MediaStreamType p_type{};
      MediaStreamDispatcherHost_OpenDevice_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_request_id = input_data_view.request_id();
      if (success && !input_data_view.ReadDeviceId(&p_device_id))
        success = false;
      if (success && !input_data_view.ReadType(&p_type))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDispatcherHost::Name_, 3, false);
        return false;
      }
      MediaStreamDispatcherHost::OpenDeviceCallback callback =
          MediaStreamDispatcherHost_OpenDevice_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenDevice(
std::move(p_request_id), 
std::move(p_device_id), 
std::move(p_type), std::move(callback));
      return true;
    }
    case internal::kMediaStreamDispatcherHost_CloseDevice_Name: {
      break;
    }
    case internal::kMediaStreamDispatcherHost_SetCapturingLinkSecured_Name: {
      break;
    }
    case internal::kMediaStreamDispatcherHost_OnStreamStarted_Name: {
      break;
    }
    case internal::kMediaStreamDispatcherHost_GetOpenDevice_Name: {

      internal::MediaStreamDispatcherHost_GetOpenDevice_Params_Data* params =
          reinterpret_cast<
              internal::MediaStreamDispatcherHost_GetOpenDevice_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_request_id{};
      ::base::UnguessableToken p_session_id{};
      ::base::UnguessableToken p_transfer_id{};
      MediaStreamDispatcherHost_GetOpenDevice_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_request_id = input_data_view.request_id();
      if (success && !input_data_view.ReadSessionId(&p_session_id))
        success = false;
      if (success && !input_data_view.ReadTransferId(&p_transfer_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDispatcherHost::Name_, 7, false);
        return false;
      }
      MediaStreamDispatcherHost::GetOpenDeviceCallback callback =
          MediaStreamDispatcherHost_GetOpenDevice_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetOpenDevice(
std::move(p_request_id), 
std::move(p_session_id), 
std::move(p_transfer_id), std::move(callback));
      return true;
    }
    case internal::kMediaStreamDispatcherHost_KeepDeviceAliveForTransfer_Name: {

      internal::MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_Params_Data* params =
          reinterpret_cast<
              internal::MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::base::UnguessableToken p_session_id{};
      ::base::UnguessableToken p_transfer_id{};
      MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadSessionId(&p_session_id))
        success = false;
      if (success && !input_data_view.ReadTransferId(&p_transfer_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamDispatcherHost::Name_, 8, false);
        return false;
      }
      MediaStreamDispatcherHost::KeepDeviceAliveForTransferCallback callback =
          MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->KeepDeviceAliveForTransfer(
std::move(p_session_id), 
std::move(p_transfer_id), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kMediaStreamDispatcherHostValidationInfo[] = {
    {&internal::MediaStreamDispatcherHost_GenerateStreams_Params_Data::Validate,
     &internal::MediaStreamDispatcherHost_GenerateStreams_ResponseParams_Data::Validate},
    {&internal::MediaStreamDispatcherHost_CancelRequest_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::MediaStreamDispatcherHost_StopStreamDevice_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::MediaStreamDispatcherHost_OpenDevice_Params_Data::Validate,
     &internal::MediaStreamDispatcherHost_OpenDevice_ResponseParams_Data::Validate},
    {&internal::MediaStreamDispatcherHost_CloseDevice_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::MediaStreamDispatcherHost_SetCapturingLinkSecured_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::MediaStreamDispatcherHost_OnStreamStarted_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::MediaStreamDispatcherHost_GetOpenDevice_Params_Data::Validate,
     &internal::MediaStreamDispatcherHost_GetOpenDevice_ResponseParams_Data::Validate},
    {&internal::MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_Params_Data::Validate,
     &internal::MediaStreamDispatcherHost_KeepDeviceAliveForTransfer_ResponseParams_Data::Validate},
};

bool MediaStreamDispatcherHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::MediaStreamDispatcherHost::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kMediaStreamDispatcherHostValidationInfo);
}

bool MediaStreamDispatcherHostResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::MediaStreamDispatcherHost::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kMediaStreamDispatcherHostValidationInfo);
}
const char MediaStreamTrackMetricsHost::Name_[] = "blink.mojom.MediaStreamTrackMetricsHost";

MediaStreamTrackMetricsHost::IPCStableHashFunction MediaStreamTrackMetricsHost::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kMediaStreamTrackMetricsHost_AddTrack_Name: {
      return &MediaStreamTrackMetricsHost::AddTrack_Sym::IPCStableHash;
    }
    case internal::kMediaStreamTrackMetricsHost_RemoveTrack_Name: {
      return &MediaStreamTrackMetricsHost::RemoveTrack_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* MediaStreamTrackMetricsHost::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kMediaStreamTrackMetricsHost_AddTrack_Name:
            return "Receive blink::mojom::MediaStreamTrackMetricsHost::AddTrack";
      case internal::kMediaStreamTrackMetricsHost_RemoveTrack_Name:
            return "Receive blink::mojom::MediaStreamTrackMetricsHost::RemoveTrack";
    }
  } else {
    switch (message.name()) {
      case internal::kMediaStreamTrackMetricsHost_AddTrack_Name:
            return "Receive reply blink::mojom::MediaStreamTrackMetricsHost::AddTrack";
      case internal::kMediaStreamTrackMetricsHost_RemoveTrack_Name:
            return "Receive reply blink::mojom::MediaStreamTrackMetricsHost::RemoveTrack";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t MediaStreamTrackMetricsHost::AddTrack_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamTrackMetricsHost::AddTrack");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaStreamTrackMetricsHost::RemoveTrack_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::MediaStreamTrackMetricsHost::RemoveTrack");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

MediaStreamTrackMetricsHostProxy::MediaStreamTrackMetricsHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void MediaStreamTrackMetricsHostProxy::AddTrack(
    uint64_t in_id, bool in_is_audio, bool in_is_remote) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamTrackMetricsHost::AddTrack", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type uint64_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_audio"), in_is_audio,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_remote"), in_is_remote,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamTrackMetricsHost_AddTrack_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamTrackMetricsHost_AddTrack_Params_Data> params(
          message);
  params.Allocate();
  params->id = in_id;
  params->is_audio = in_is_audio;
  params->is_remote = in_is_remote;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamTrackMetricsHost::Name_);
  message.set_method_name("AddTrack");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void MediaStreamTrackMetricsHostProxy::RemoveTrack(
    uint64_t in_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::MediaStreamTrackMetricsHost::RemoveTrack", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type uint64_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaStreamTrackMetricsHost_RemoveTrack_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::MediaStreamTrackMetricsHost_RemoveTrack_Params_Data> params(
          message);
  params.Allocate();
  params->id = in_id;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaStreamTrackMetricsHost::Name_);
  message.set_method_name("RemoveTrack");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool MediaStreamTrackMetricsHostStubDispatch::Accept(
    MediaStreamTrackMetricsHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kMediaStreamTrackMetricsHost_AddTrack_Name: {

      DCHECK(message->is_serialized());
      internal::MediaStreamTrackMetricsHost_AddTrack_Params_Data* params =
          reinterpret_cast<internal::MediaStreamTrackMetricsHost_AddTrack_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      uint64_t p_id{};
      bool p_is_audio{};
      bool p_is_remote{};
      MediaStreamTrackMetricsHost_AddTrack_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_id = input_data_view.id();
      if (success)
        p_is_audio = input_data_view.is_audio();
      if (success)
        p_is_remote = input_data_view.is_remote();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamTrackMetricsHost::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddTrack(
std::move(p_id), 
std::move(p_is_audio), 
std::move(p_is_remote));
      return true;
    }
    case internal::kMediaStreamTrackMetricsHost_RemoveTrack_Name: {

      DCHECK(message->is_serialized());
      internal::MediaStreamTrackMetricsHost_RemoveTrack_Params_Data* params =
          reinterpret_cast<internal::MediaStreamTrackMetricsHost_RemoveTrack_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      uint64_t p_id{};
      MediaStreamTrackMetricsHost_RemoveTrack_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_id = input_data_view.id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaStreamTrackMetricsHost::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RemoveTrack(
std::move(p_id));
      return true;
    }
  }
  return false;
}

// static
bool MediaStreamTrackMetricsHostStubDispatch::AcceptWithResponder(
    MediaStreamTrackMetricsHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kMediaStreamTrackMetricsHost_AddTrack_Name: {
      break;
    }
    case internal::kMediaStreamTrackMetricsHost_RemoveTrack_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kMediaStreamTrackMetricsHostValidationInfo[] = {
    {&internal::MediaStreamTrackMetricsHost_AddTrack_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::MediaStreamTrackMetricsHost_RemoveTrack_Params_Data::Validate,
     nullptr /* no response */},
};

bool MediaStreamTrackMetricsHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::MediaStreamTrackMetricsHost::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kMediaStreamTrackMetricsHostValidationInfo);
}



}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::StreamSelectionInfo::DataView, ::blink::mojom::StreamSelectionInfoPtr>::Read(
    ::blink::mojom::StreamSelectionInfo::DataView input,
    ::blink::mojom::StreamSelectionInfoPtr* output) {
  bool success = true;
  ::blink::mojom::StreamSelectionInfoPtr result(::blink::mojom::StreamSelectionInfo::New());
  
      if (success && !input.ReadStrategy(&result->strategy))
        success = false;
      if (success && !input.ReadSessionId(&result->session_id))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::MediaStreamDevice::DataView, ::blink::mojom::MediaStreamDevicePtr>::Read(
    ::blink::mojom::MediaStreamDevice::DataView input,
    ::blink::mojom::MediaStreamDevicePtr* output) {
  bool success = true;
  ::blink::mojom::MediaStreamDevicePtr result(::blink::mojom::MediaStreamDevice::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadId(&result->id))
        success = false;
      if (success && !input.ReadVideoFacing(&result->video_facing))
        success = false;
      if (success && !input.ReadGroupId(&result->group_id))
        success = false;
      if (success && !input.ReadMatchedOutputDeviceId(&result->matched_output_device_id))
        success = false;
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadInput(&result->input))
        success = false;
      if (success && !input.ReadSessionId(&result->session_id))
        success = false;
      if (success && !input.ReadDisplayMediaInfo(&result->display_media_info))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::TrackControls::DataView, ::blink::mojom::TrackControlsPtr>::Read(
    ::blink::mojom::TrackControls::DataView input,
    ::blink::mojom::TrackControlsPtr* output) {
  bool success = true;
  ::blink::mojom::TrackControlsPtr result(::blink::mojom::TrackControls::New());
  
      if (success)
        result->requested = input.requested();
      if (success && !input.ReadStreamType(&result->stream_type))
        success = false;
      if (success && !input.ReadDeviceId(&result->device_id))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::StreamControls::DataView, ::blink::mojom::StreamControlsPtr>::Read(
    ::blink::mojom::StreamControls::DataView input,
    ::blink::mojom::StreamControlsPtr* output) {
  bool success = true;
  ::blink::mojom::StreamControlsPtr result(::blink::mojom::StreamControls::New());
  
      if (success && !input.ReadAudio(&result->audio))
        success = false;
      if (success && !input.ReadVideo(&result->video))
        success = false;
      if (success)
        result->hotword_enabled = input.hotword_enabled();
      if (success)
        result->disable_local_echo = input.disable_local_echo();
      if (success)
        result->exclude_system_audio = input.exclude_system_audio();
      if (success)
        result->request_pan_tilt_zoom_permission = input.request_pan_tilt_zoom_permission();
      if (success)
        result->request_all_screens = input.request_all_screens();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::GetOpenDeviceResponse::DataView, ::blink::mojom::GetOpenDeviceResponsePtr>::Read(
    ::blink::mojom::GetOpenDeviceResponse::DataView input,
    ::blink::mojom::GetOpenDeviceResponsePtr* output) {
  bool success = true;
  ::blink::mojom::GetOpenDeviceResponsePtr result(::blink::mojom::GetOpenDeviceResponse::New());
  
      if (success && !input.ReadLabel(&result->label))
        success = false;
      if (success && !input.ReadDevice(&result->device))
        success = false;
      if (success)
        result->pan_tilt_zoom_allowed = input.pan_tilt_zoom_allowed();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::StreamDevices::DataView, ::blink::mojom::StreamDevicesPtr>::Read(
    ::blink::mojom::StreamDevices::DataView input,
    ::blink::mojom::StreamDevicesPtr* output) {
  bool success = true;
  ::blink::mojom::StreamDevicesPtr result(::blink::mojom::StreamDevices::New());
  
      if (success && !input.ReadAudioDevice(&result->audio_device))
        success = false;
      if (success && !input.ReadVideoDevice(&result->video_device))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::StreamDevicesSet::DataView, ::blink::mojom::StreamDevicesSetPtr>::Read(
    ::blink::mojom::StreamDevicesSet::DataView input,
    ::blink::mojom::StreamDevicesSetPtr* output) {
  bool success = true;
  ::blink::mojom::StreamDevicesSetPtr result(::blink::mojom::StreamDevicesSet::New());
  
      if (success && !input.ReadStreamDevices(&result->stream_devices))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {


void MediaStreamDeviceObserverInterceptorForTesting::OnDeviceStopped(const std::string& label, const ::blink::MediaStreamDevice& device) {
  GetForwardingInterface()->OnDeviceStopped(std::move(label), std::move(device));
}
void MediaStreamDeviceObserverInterceptorForTesting::OnDeviceChanged(const std::string& label, const ::blink::MediaStreamDevice& old_device, const ::blink::MediaStreamDevice& new_device) {
  GetForwardingInterface()->OnDeviceChanged(std::move(label), std::move(old_device), std::move(new_device));
}
void MediaStreamDeviceObserverInterceptorForTesting::OnDeviceRequestStateChange(const std::string& label, const ::blink::MediaStreamDevice& device, MediaStreamStateChange new_state) {
  GetForwardingInterface()->OnDeviceRequestStateChange(std::move(label), std::move(device), std::move(new_state));
}
void MediaStreamDeviceObserverInterceptorForTesting::OnDeviceCaptureHandleChange(const std::string& label, const ::blink::MediaStreamDevice& device) {
  GetForwardingInterface()->OnDeviceCaptureHandleChange(std::move(label), std::move(device));
}
MediaStreamDeviceObserverAsyncWaiter::MediaStreamDeviceObserverAsyncWaiter(
    MediaStreamDeviceObserver* proxy) : proxy_(proxy) {}

MediaStreamDeviceObserverAsyncWaiter::~MediaStreamDeviceObserverAsyncWaiter() = default;




void MediaStreamDispatcherHostInterceptorForTesting::GenerateStreams(int32_t request_id, const ::blink::StreamControls& controls, bool user_gesture, StreamSelectionInfoPtr audio_stream_selection_info, GenerateStreamsCallback callback) {
  GetForwardingInterface()->GenerateStreams(std::move(request_id), std::move(controls), std::move(user_gesture), std::move(audio_stream_selection_info), std::move(callback));
}
void MediaStreamDispatcherHostInterceptorForTesting::CancelRequest(int32_t request_id) {
  GetForwardingInterface()->CancelRequest(std::move(request_id));
}
void MediaStreamDispatcherHostInterceptorForTesting::StopStreamDevice(const std::string& device_id, const absl::optional<::base::UnguessableToken>& session_id) {
  GetForwardingInterface()->StopStreamDevice(std::move(device_id), std::move(session_id));
}
void MediaStreamDispatcherHostInterceptorForTesting::OpenDevice(int32_t request_id, const std::string& device_id, MediaStreamType type, OpenDeviceCallback callback) {
  GetForwardingInterface()->OpenDevice(std::move(request_id), std::move(device_id), std::move(type), std::move(callback));
}
void MediaStreamDispatcherHostInterceptorForTesting::CloseDevice(const std::string& label) {
  GetForwardingInterface()->CloseDevice(std::move(label));
}
void MediaStreamDispatcherHostInterceptorForTesting::SetCapturingLinkSecured(const absl::optional<::base::UnguessableToken>& session_id, MediaStreamType type, bool is_secure) {
  GetForwardingInterface()->SetCapturingLinkSecured(std::move(session_id), std::move(type), std::move(is_secure));
}
void MediaStreamDispatcherHostInterceptorForTesting::OnStreamStarted(const std::string& label) {
  GetForwardingInterface()->OnStreamStarted(std::move(label));
}
void MediaStreamDispatcherHostInterceptorForTesting::GetOpenDevice(int32_t request_id, const ::base::UnguessableToken& session_id, const ::base::UnguessableToken& transfer_id, GetOpenDeviceCallback callback) {
  GetForwardingInterface()->GetOpenDevice(std::move(request_id), std::move(session_id), std::move(transfer_id), std::move(callback));
}
void MediaStreamDispatcherHostInterceptorForTesting::KeepDeviceAliveForTransfer(const ::base::UnguessableToken& session_id, const ::base::UnguessableToken& transfer_id, KeepDeviceAliveForTransferCallback callback) {
  GetForwardingInterface()->KeepDeviceAliveForTransfer(std::move(session_id), std::move(transfer_id), std::move(callback));
}
MediaStreamDispatcherHostAsyncWaiter::MediaStreamDispatcherHostAsyncWaiter(
    MediaStreamDispatcherHost* proxy) : proxy_(proxy) {}

MediaStreamDispatcherHostAsyncWaiter::~MediaStreamDispatcherHostAsyncWaiter() = default;

void MediaStreamDispatcherHostAsyncWaiter::GenerateStreams(
    int32_t request_id, const ::blink::StreamControls& controls, bool user_gesture, StreamSelectionInfoPtr audio_stream_selection_info, MediaStreamRequestResult* out_result, std::string* out_label, StreamDevicesSetPtr* out_stream_devices, bool* out_pan_tilt_zoom_allowed) {
  base::RunLoop loop;
  proxy_->GenerateStreams(std::move(request_id),std::move(controls),std::move(user_gesture),std::move(audio_stream_selection_info),
      base::BindOnce(
          [](base::RunLoop* loop,
             MediaStreamRequestResult* out_result
,
             std::string* out_label
,
             StreamDevicesSetPtr* out_stream_devices
,
             bool* out_pan_tilt_zoom_allowed
,
             MediaStreamRequestResult result,
             const std::string& label,
             StreamDevicesSetPtr stream_devices,
             bool pan_tilt_zoom_allowed) {*out_result = std::move(result);*out_label = std::move(label);*out_stream_devices = std::move(stream_devices);*out_pan_tilt_zoom_allowed = std::move(pan_tilt_zoom_allowed);
            loop->Quit();
          },
          &loop,
          out_result,
          out_label,
          out_stream_devices,
          out_pan_tilt_zoom_allowed));
  loop.Run();
}
void MediaStreamDispatcherHostAsyncWaiter::OpenDevice(
    int32_t request_id, const std::string& device_id, MediaStreamType type, bool* out_success, std::string* out_label, ::blink::MediaStreamDevice* out_device) {
  base::RunLoop loop;
  proxy_->OpenDevice(std::move(request_id),std::move(device_id),std::move(type),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             std::string* out_label
,
             ::blink::MediaStreamDevice* out_device
,
             bool success,
             const std::string& label,
             const ::blink::MediaStreamDevice& device) {*out_success = std::move(success);*out_label = std::move(label);*out_device = std::move(device);
            loop->Quit();
          },
          &loop,
          out_success,
          out_label,
          out_device));
  loop.Run();
}
void MediaStreamDispatcherHostAsyncWaiter::GetOpenDevice(
    int32_t request_id, const ::base::UnguessableToken& session_id, const ::base::UnguessableToken& transfer_id, MediaStreamRequestResult* out_result, GetOpenDeviceResponsePtr* out_response) {
  base::RunLoop loop;
  proxy_->GetOpenDevice(std::move(request_id),std::move(session_id),std::move(transfer_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             MediaStreamRequestResult* out_result
,
             GetOpenDeviceResponsePtr* out_response
,
             MediaStreamRequestResult result,
             GetOpenDeviceResponsePtr response) {*out_result = std::move(result);*out_response = std::move(response);
            loop->Quit();
          },
          &loop,
          out_result,
          out_response));
  loop.Run();
}
void MediaStreamDispatcherHostAsyncWaiter::KeepDeviceAliveForTransfer(
    const ::base::UnguessableToken& session_id, const ::base::UnguessableToken& transfer_id, bool* out_device_found) {
  base::RunLoop loop;
  proxy_->KeepDeviceAliveForTransfer(std::move(session_id),std::move(transfer_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_device_found
,
             bool device_found) {*out_device_found = std::move(device_found);
            loop->Quit();
          },
          &loop,
          out_device_found));
  loop.Run();
}



void MediaStreamTrackMetricsHostInterceptorForTesting::AddTrack(uint64_t id, bool is_audio, bool is_remote) {
  GetForwardingInterface()->AddTrack(std::move(id), std::move(is_audio), std::move(is_remote));
}
void MediaStreamTrackMetricsHostInterceptorForTesting::RemoveTrack(uint64_t id) {
  GetForwardingInterface()->RemoveTrack(std::move(id));
}
MediaStreamTrackMetricsHostAsyncWaiter::MediaStreamTrackMetricsHostAsyncWaiter(
    MediaStreamTrackMetricsHost* proxy) : proxy_(proxy) {}

MediaStreamTrackMetricsHostAsyncWaiter::~MediaStreamTrackMetricsHostAsyncWaiter() = default;






}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif