// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/testing/regression_test_data/regression_test_data.proto

#include "internal/testing/regression_test_data/regression_test_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace private_membership {
namespace rlwe {
PROTOBUF_CONSTEXPR PrivateMembershipRlweClientRegressionTestData_TestCase::PrivateMembershipRlweClientRegressionTestData_TestCase(
    ::_pbi::ConstantInitialized)
  : ec_cipher_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , seed_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , plaintext_id_(nullptr)
  , expected_oprf_request_(nullptr)
  , oprf_response_(nullptr)
  , expected_query_request_(nullptr)
  , query_response_(nullptr)
  , use_case_(0)

  , is_positive_membership_expected_(false){}
struct PrivateMembershipRlweClientRegressionTestData_TestCaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateMembershipRlweClientRegressionTestData_TestCaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateMembershipRlweClientRegressionTestData_TestCaseDefaultTypeInternal() {}
  union {
    PrivateMembershipRlweClientRegressionTestData_TestCase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateMembershipRlweClientRegressionTestData_TestCaseDefaultTypeInternal _PrivateMembershipRlweClientRegressionTestData_TestCase_default_instance_;
PROTOBUF_CONSTEXPR PrivateMembershipRlweClientRegressionTestData::PrivateMembershipRlweClientRegressionTestData(
    ::_pbi::ConstantInitialized)
  : test_cases_(){}
struct PrivateMembershipRlweClientRegressionTestDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateMembershipRlweClientRegressionTestDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateMembershipRlweClientRegressionTestDataDefaultTypeInternal() {}
  union {
    PrivateMembershipRlweClientRegressionTestData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateMembershipRlweClientRegressionTestDataDefaultTypeInternal _PrivateMembershipRlweClientRegressionTestData_default_instance_;
}  // namespace rlwe
}  // namespace private_membership
namespace private_membership {
namespace rlwe {

// ===================================================================

class PrivateMembershipRlweClientRegressionTestData_TestCase::_Internal {
 public:
  static const ::private_membership::rlwe::RlwePlaintextId& plaintext_id(const PrivateMembershipRlweClientRegressionTestData_TestCase* msg);
  static const ::private_membership::rlwe::PrivateMembershipRlweOprfRequest& expected_oprf_request(const PrivateMembershipRlweClientRegressionTestData_TestCase* msg);
  static const ::private_membership::rlwe::PrivateMembershipRlweOprfResponse& oprf_response(const PrivateMembershipRlweClientRegressionTestData_TestCase* msg);
  static const ::private_membership::rlwe::PrivateMembershipRlweQueryRequest& expected_query_request(const PrivateMembershipRlweClientRegressionTestData_TestCase* msg);
  static const ::private_membership::rlwe::PrivateMembershipRlweQueryResponse& query_response(const PrivateMembershipRlweClientRegressionTestData_TestCase* msg);
};

const ::private_membership::rlwe::RlwePlaintextId&
PrivateMembershipRlweClientRegressionTestData_TestCase::_Internal::plaintext_id(const PrivateMembershipRlweClientRegressionTestData_TestCase* msg) {
  return *msg->plaintext_id_;
}
const ::private_membership::rlwe::PrivateMembershipRlweOprfRequest&
PrivateMembershipRlweClientRegressionTestData_TestCase::_Internal::expected_oprf_request(const PrivateMembershipRlweClientRegressionTestData_TestCase* msg) {
  return *msg->expected_oprf_request_;
}
const ::private_membership::rlwe::PrivateMembershipRlweOprfResponse&
PrivateMembershipRlweClientRegressionTestData_TestCase::_Internal::oprf_response(const PrivateMembershipRlweClientRegressionTestData_TestCase* msg) {
  return *msg->oprf_response_;
}
const ::private_membership::rlwe::PrivateMembershipRlweQueryRequest&
PrivateMembershipRlweClientRegressionTestData_TestCase::_Internal::expected_query_request(const PrivateMembershipRlweClientRegressionTestData_TestCase* msg) {
  return *msg->expected_query_request_;
}
const ::private_membership::rlwe::PrivateMembershipRlweQueryResponse&
PrivateMembershipRlweClientRegressionTestData_TestCase::_Internal::query_response(const PrivateMembershipRlweClientRegressionTestData_TestCase* msg) {
  return *msg->query_response_;
}
void PrivateMembershipRlweClientRegressionTestData_TestCase::clear_plaintext_id() {
  if (GetArenaForAllocation() == nullptr && plaintext_id_ != nullptr) {
    delete plaintext_id_;
  }
  plaintext_id_ = nullptr;
}
void PrivateMembershipRlweClientRegressionTestData_TestCase::clear_expected_oprf_request() {
  if (GetArenaForAllocation() == nullptr && expected_oprf_request_ != nullptr) {
    delete expected_oprf_request_;
  }
  expected_oprf_request_ = nullptr;
}
void PrivateMembershipRlweClientRegressionTestData_TestCase::clear_oprf_response() {
  if (GetArenaForAllocation() == nullptr && oprf_response_ != nullptr) {
    delete oprf_response_;
  }
  oprf_response_ = nullptr;
}
void PrivateMembershipRlweClientRegressionTestData_TestCase::clear_expected_query_request() {
  if (GetArenaForAllocation() == nullptr && expected_query_request_ != nullptr) {
    delete expected_query_request_;
  }
  expected_query_request_ = nullptr;
}
void PrivateMembershipRlweClientRegressionTestData_TestCase::clear_query_response() {
  if (GetArenaForAllocation() == nullptr && query_response_ != nullptr) {
    delete query_response_;
  }
  query_response_ = nullptr;
}
PrivateMembershipRlweClientRegressionTestData_TestCase::PrivateMembershipRlweClientRegressionTestData_TestCase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase)
}
PrivateMembershipRlweClientRegressionTestData_TestCase::PrivateMembershipRlweClientRegressionTestData_TestCase(const PrivateMembershipRlweClientRegressionTestData_TestCase& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ec_cipher_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ec_cipher_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ec_cipher_key().empty()) {
    ec_cipher_key_.Set(from._internal_ec_cipher_key(), 
      GetArenaForAllocation());
  }
  seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_seed().empty()) {
    seed_.Set(from._internal_seed(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_plaintext_id()) {
    plaintext_id_ = new ::private_membership::rlwe::RlwePlaintextId(*from.plaintext_id_);
  } else {
    plaintext_id_ = nullptr;
  }
  if (from._internal_has_expected_oprf_request()) {
    expected_oprf_request_ = new ::private_membership::rlwe::PrivateMembershipRlweOprfRequest(*from.expected_oprf_request_);
  } else {
    expected_oprf_request_ = nullptr;
  }
  if (from._internal_has_oprf_response()) {
    oprf_response_ = new ::private_membership::rlwe::PrivateMembershipRlweOprfResponse(*from.oprf_response_);
  } else {
    oprf_response_ = nullptr;
  }
  if (from._internal_has_expected_query_request()) {
    expected_query_request_ = new ::private_membership::rlwe::PrivateMembershipRlweQueryRequest(*from.expected_query_request_);
  } else {
    expected_query_request_ = nullptr;
  }
  if (from._internal_has_query_response()) {
    query_response_ = new ::private_membership::rlwe::PrivateMembershipRlweQueryResponse(*from.query_response_);
  } else {
    query_response_ = nullptr;
  }
  ::memcpy(&use_case_, &from.use_case_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_positive_membership_expected_) -
    reinterpret_cast<char*>(&use_case_)) + sizeof(is_positive_membership_expected_));
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase)
}

inline void PrivateMembershipRlweClientRegressionTestData_TestCase::SharedCtor() {
ec_cipher_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ec_cipher_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seed_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seed_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&plaintext_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_positive_membership_expected_) -
    reinterpret_cast<char*>(&plaintext_id_)) + sizeof(is_positive_membership_expected_));
}

PrivateMembershipRlweClientRegressionTestData_TestCase::~PrivateMembershipRlweClientRegressionTestData_TestCase() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateMembershipRlweClientRegressionTestData_TestCase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ec_cipher_key_.Destroy();
  seed_.Destroy();
  if (this != internal_default_instance()) delete plaintext_id_;
  if (this != internal_default_instance()) delete expected_oprf_request_;
  if (this != internal_default_instance()) delete oprf_response_;
  if (this != internal_default_instance()) delete expected_query_request_;
  if (this != internal_default_instance()) delete query_response_;
}

void PrivateMembershipRlweClientRegressionTestData_TestCase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrivateMembershipRlweClientRegressionTestData_TestCase::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ec_cipher_key_.ClearToEmpty();
  seed_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && plaintext_id_ != nullptr) {
    delete plaintext_id_;
  }
  plaintext_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && expected_oprf_request_ != nullptr) {
    delete expected_oprf_request_;
  }
  expected_oprf_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && oprf_response_ != nullptr) {
    delete oprf_response_;
  }
  oprf_response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && expected_query_request_ != nullptr) {
    delete expected_query_request_;
  }
  expected_query_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && query_response_ != nullptr) {
    delete query_response_;
  }
  query_response_ = nullptr;
  ::memset(&use_case_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_positive_membership_expected_) -
      reinterpret_cast<char*>(&use_case_)) + sizeof(is_positive_membership_expected_));
  _internal_metadata_.Clear<std::string>();
}

const char* PrivateMembershipRlweClientRegressionTestData_TestCase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .private_membership.rlwe.RlweUseCase use_case = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_case(static_cast<::private_membership::rlwe::RlweUseCase>(val));
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.RlwePlaintextId plaintext_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_plaintext_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ec_cipher_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ec_cipher_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes seed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_seed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.PrivateMembershipRlweOprfRequest expected_oprf_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_oprf_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.PrivateMembershipRlweOprfResponse oprf_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_oprf_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.PrivateMembershipRlweQueryRequest expected_query_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_query_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.PrivateMembershipRlweQueryResponse query_response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_positive_membership_expected = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          is_positive_membership_expected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateMembershipRlweClientRegressionTestData_TestCase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .private_membership.rlwe.RlweUseCase use_case = 1;
  if (this->_internal_use_case() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_use_case(), target);
  }

  // .private_membership.rlwe.RlwePlaintextId plaintext_id = 2;
  if (this->_internal_has_plaintext_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::plaintext_id(this),
        _Internal::plaintext_id(this).GetCachedSize(), target, stream);
  }

  // bytes ec_cipher_key = 3;
  if (!this->_internal_ec_cipher_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ec_cipher_key(), target);
  }

  // bytes seed = 4;
  if (!this->_internal_seed().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_seed(), target);
  }

  // .private_membership.rlwe.PrivateMembershipRlweOprfRequest expected_oprf_request = 5;
  if (this->_internal_has_expected_oprf_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::expected_oprf_request(this),
        _Internal::expected_oprf_request(this).GetCachedSize(), target, stream);
  }

  // .private_membership.rlwe.PrivateMembershipRlweOprfResponse oprf_response = 6;
  if (this->_internal_has_oprf_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::oprf_response(this),
        _Internal::oprf_response(this).GetCachedSize(), target, stream);
  }

  // .private_membership.rlwe.PrivateMembershipRlweQueryRequest expected_query_request = 7;
  if (this->_internal_has_expected_query_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::expected_query_request(this),
        _Internal::expected_query_request(this).GetCachedSize(), target, stream);
  }

  // .private_membership.rlwe.PrivateMembershipRlweQueryResponse query_response = 8;
  if (this->_internal_has_query_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::query_response(this),
        _Internal::query_response(this).GetCachedSize(), target, stream);
  }

  // bool is_positive_membership_expected = 9;
  if (this->_internal_is_positive_membership_expected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_positive_membership_expected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase)
  return target;
}

size_t PrivateMembershipRlweClientRegressionTestData_TestCase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ec_cipher_key = 3;
  if (!this->_internal_ec_cipher_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ec_cipher_key());
  }

  // bytes seed = 4;
  if (!this->_internal_seed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_seed());
  }

  // .private_membership.rlwe.RlwePlaintextId plaintext_id = 2;
  if (this->_internal_has_plaintext_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plaintext_id_);
  }

  // .private_membership.rlwe.PrivateMembershipRlweOprfRequest expected_oprf_request = 5;
  if (this->_internal_has_expected_oprf_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expected_oprf_request_);
  }

  // .private_membership.rlwe.PrivateMembershipRlweOprfResponse oprf_response = 6;
  if (this->_internal_has_oprf_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oprf_response_);
  }

  // .private_membership.rlwe.PrivateMembershipRlweQueryRequest expected_query_request = 7;
  if (this->_internal_has_expected_query_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expected_query_request_);
  }

  // .private_membership.rlwe.PrivateMembershipRlweQueryResponse query_response = 8;
  if (this->_internal_has_query_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_response_);
  }

  // .private_membership.rlwe.RlweUseCase use_case = 1;
  if (this->_internal_use_case() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_case());
  }

  // bool is_positive_membership_expected = 9;
  if (this->_internal_is_positive_membership_expected() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateMembershipRlweClientRegressionTestData_TestCase::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrivateMembershipRlweClientRegressionTestData_TestCase*>(
      &from));
}

void PrivateMembershipRlweClientRegressionTestData_TestCase::MergeFrom(const PrivateMembershipRlweClientRegressionTestData_TestCase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ec_cipher_key().empty()) {
    _internal_set_ec_cipher_key(from._internal_ec_cipher_key());
  }
  if (!from._internal_seed().empty()) {
    _internal_set_seed(from._internal_seed());
  }
  if (from._internal_has_plaintext_id()) {
    _internal_mutable_plaintext_id()->::private_membership::rlwe::RlwePlaintextId::MergeFrom(from._internal_plaintext_id());
  }
  if (from._internal_has_expected_oprf_request()) {
    _internal_mutable_expected_oprf_request()->::private_membership::rlwe::PrivateMembershipRlweOprfRequest::MergeFrom(from._internal_expected_oprf_request());
  }
  if (from._internal_has_oprf_response()) {
    _internal_mutable_oprf_response()->::private_membership::rlwe::PrivateMembershipRlweOprfResponse::MergeFrom(from._internal_oprf_response());
  }
  if (from._internal_has_expected_query_request()) {
    _internal_mutable_expected_query_request()->::private_membership::rlwe::PrivateMembershipRlweQueryRequest::MergeFrom(from._internal_expected_query_request());
  }
  if (from._internal_has_query_response()) {
    _internal_mutable_query_response()->::private_membership::rlwe::PrivateMembershipRlweQueryResponse::MergeFrom(from._internal_query_response());
  }
  if (from._internal_use_case() != 0) {
    _internal_set_use_case(from._internal_use_case());
  }
  if (from._internal_is_positive_membership_expected() != 0) {
    _internal_set_is_positive_membership_expected(from._internal_is_positive_membership_expected());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrivateMembershipRlweClientRegressionTestData_TestCase::CopyFrom(const PrivateMembershipRlweClientRegressionTestData_TestCase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMembershipRlweClientRegressionTestData_TestCase::IsInitialized() const {
  return true;
}

void PrivateMembershipRlweClientRegressionTestData_TestCase::InternalSwap(PrivateMembershipRlweClientRegressionTestData_TestCase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ec_cipher_key_, lhs_arena,
      &other->ec_cipher_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seed_, lhs_arena,
      &other->seed_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateMembershipRlweClientRegressionTestData_TestCase, is_positive_membership_expected_)
      + sizeof(PrivateMembershipRlweClientRegressionTestData_TestCase::is_positive_membership_expected_)
      - PROTOBUF_FIELD_OFFSET(PrivateMembershipRlweClientRegressionTestData_TestCase, plaintext_id_)>(
          reinterpret_cast<char*>(&plaintext_id_),
          reinterpret_cast<char*>(&other->plaintext_id_));
}

std::string PrivateMembershipRlweClientRegressionTestData_TestCase::GetTypeName() const {
  return "private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase";
}


// ===================================================================

class PrivateMembershipRlweClientRegressionTestData::_Internal {
 public:
};

PrivateMembershipRlweClientRegressionTestData::PrivateMembershipRlweClientRegressionTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  test_cases_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData)
}
PrivateMembershipRlweClientRegressionTestData::PrivateMembershipRlweClientRegressionTestData(const PrivateMembershipRlweClientRegressionTestData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      test_cases_(from.test_cases_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData)
}

inline void PrivateMembershipRlweClientRegressionTestData::SharedCtor() {
}

PrivateMembershipRlweClientRegressionTestData::~PrivateMembershipRlweClientRegressionTestData() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateMembershipRlweClientRegressionTestData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrivateMembershipRlweClientRegressionTestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrivateMembershipRlweClientRegressionTestData::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_cases_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PrivateMembershipRlweClientRegressionTestData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase test_cases = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_test_cases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateMembershipRlweClientRegressionTestData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase test_cases = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_test_cases_size()); i < n; i++) {
    const auto& repfield = this->_internal_test_cases(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData)
  return target;
}

size_t PrivateMembershipRlweClientRegressionTestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase test_cases = 1;
  total_size += 1UL * this->_internal_test_cases_size();
  for (const auto& msg : this->test_cases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateMembershipRlweClientRegressionTestData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrivateMembershipRlweClientRegressionTestData*>(
      &from));
}

void PrivateMembershipRlweClientRegressionTestData::MergeFrom(const PrivateMembershipRlweClientRegressionTestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  test_cases_.MergeFrom(from.test_cases_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrivateMembershipRlweClientRegressionTestData::CopyFrom(const PrivateMembershipRlweClientRegressionTestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMembershipRlweClientRegressionTestData::IsInitialized() const {
  return true;
}

void PrivateMembershipRlweClientRegressionTestData::InternalSwap(PrivateMembershipRlweClientRegressionTestData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  test_cases_.InternalSwap(&other->test_cases_);
}

std::string PrivateMembershipRlweClientRegressionTestData::GetTypeName() const {
  return "private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rlwe
}  // namespace private_membership
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase*
Arena::CreateMaybeMessage< ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData*
Arena::CreateMaybeMessage< ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
