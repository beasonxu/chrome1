// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_assistant_logs.proto

#include "cast_assistant_logs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR CastAssistantLogsProto_CastAssistantEventProto_Metadata::CastAssistantLogsProto_CastAssistantEventProto_Metadata(
    ::_pbi::ConstantInitialized)
  : name_hash_(uint64_t{0u})
  , value_(int64_t{0}){}
struct CastAssistantLogsProto_CastAssistantEventProto_MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastAssistantLogsProto_CastAssistantEventProto_MetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastAssistantLogsProto_CastAssistantEventProto_MetadataDefaultTypeInternal() {}
  union {
    CastAssistantLogsProto_CastAssistantEventProto_Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastAssistantLogsProto_CastAssistantEventProto_MetadataDefaultTypeInternal _CastAssistantLogsProto_CastAssistantEventProto_Metadata_default_instance_;
PROTOBUF_CONSTEXPR CastAssistantLogsProto_CastAssistantEventProto::CastAssistantLogsProto_CastAssistantEventProto(
    ::_pbi::ConstantInitialized)
  : metadata_()
  , hotword_model_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_hash_(uint64_t{0u})
  , time_msec_(int64_t{0})
  , value_(int64_t{0})
  , duo_core_version_(uint64_t{0u}){}
struct CastAssistantLogsProto_CastAssistantEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastAssistantLogsProto_CastAssistantEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastAssistantLogsProto_CastAssistantEventProtoDefaultTypeInternal() {}
  union {
    CastAssistantLogsProto_CastAssistantEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastAssistantLogsProto_CastAssistantEventProtoDefaultTypeInternal _CastAssistantLogsProto_CastAssistantEventProto_default_instance_;
PROTOBUF_CONSTEXPR CastAssistantLogsProto::CastAssistantLogsProto(
    ::_pbi::ConstantInitialized)
  : cast_assistant_event_()
  , experiment_id_()
  , event_id_list_()
  , event_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , conversation_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , backdrop_app_device_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , system_bundle_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , gaia_id_(int64_t{0})
  , client_id_(uint64_t{0u})
  , virtual_release_track_(0u){}
struct CastAssistantLogsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastAssistantLogsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastAssistantLogsProtoDefaultTypeInternal() {}
  union {
    CastAssistantLogsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastAssistantLogsProtoDefaultTypeInternal _CastAssistantLogsProto_default_instance_;
}  // namespace metrics
namespace metrics {

// ===================================================================

class CastAssistantLogsProto_CastAssistantEventProto_Metadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CastAssistantLogsProto_CastAssistantEventProto_Metadata>()._has_bits_);
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CastAssistantLogsProto_CastAssistantEventProto_Metadata::CastAssistantLogsProto_CastAssistantEventProto_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
}
CastAssistantLogsProto_CastAssistantEventProto_Metadata::CastAssistantLogsProto_CastAssistantEventProto_Metadata(const CastAssistantLogsProto_CastAssistantEventProto_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
}

inline void CastAssistantLogsProto_CastAssistantEventProto_Metadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
}

CastAssistantLogsProto_CastAssistantEventProto_Metadata::~CastAssistantLogsProto_CastAssistantEventProto_Metadata() {
  // @@protoc_insertion_point(destructor:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastAssistantLogsProto_CastAssistantEventProto_Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastAssistantLogsProto_CastAssistantEventProto_Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_name_hash(&has_bits);
          name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastAssistantLogsProto_CastAssistantEventProto_Metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_name_hash(), target);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  return target;
}

size_t CastAssistantLogsProto_CastAssistantEventProto_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 name_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int64 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastAssistantLogsProto_CastAssistantEventProto_Metadata*>(
      &from));
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::MergeFrom(const CastAssistantLogsProto_CastAssistantEventProto_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_hash_ = from.name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::CopyFrom(const CastAssistantLogsProto_CastAssistantEventProto_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastAssistantLogsProto_CastAssistantEventProto_Metadata::IsInitialized() const {
  return true;
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::InternalSwap(CastAssistantLogsProto_CastAssistantEventProto_Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CastAssistantLogsProto_CastAssistantEventProto_Metadata, value_)
      + sizeof(CastAssistantLogsProto_CastAssistantEventProto_Metadata::value_)
      - PROTOBUF_FIELD_OFFSET(CastAssistantLogsProto_CastAssistantEventProto_Metadata, name_hash_)>(
          reinterpret_cast<char*>(&name_hash_),
          reinterpret_cast<char*>(&other->name_hash_));
}

std::string CastAssistantLogsProto_CastAssistantEventProto_Metadata::GetTypeName() const {
  return "metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata";
}


// ===================================================================

class CastAssistantLogsProto_CastAssistantEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CastAssistantLogsProto_CastAssistantEventProto>()._has_bits_);
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duo_core_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hotword_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CastAssistantLogsProto_CastAssistantEventProto::CastAssistantLogsProto_CastAssistantEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  metadata_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.CastAssistantLogsProto.CastAssistantEventProto)
}
CastAssistantLogsProto_CastAssistantEventProto::CastAssistantLogsProto_CastAssistantEventProto(const CastAssistantLogsProto_CastAssistantEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hotword_model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hotword_model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hotword_model_id()) {
    hotword_model_id_.Set(from._internal_hotword_model_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&duo_core_version_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(duo_core_version_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastAssistantLogsProto.CastAssistantEventProto)
}

inline void CastAssistantLogsProto_CastAssistantEventProto::SharedCtor() {
hotword_model_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hotword_model_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duo_core_version_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(duo_core_version_));
}

CastAssistantLogsProto_CastAssistantEventProto::~CastAssistantLogsProto_CastAssistantEventProto() {
  // @@protoc_insertion_point(destructor:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastAssistantLogsProto_CastAssistantEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hotword_model_id_.Destroy();
}

void CastAssistantLogsProto_CastAssistantEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CastAssistantLogsProto_CastAssistantEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hotword_model_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duo_core_version_) -
        reinterpret_cast<char*>(&name_hash_)) + sizeof(duo_core_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastAssistantLogsProto_CastAssistantEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_name_hash(&has_bits);
          name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int64 time_msec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_msec(&has_bits);
          time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 value = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 duo_core_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_duo_core_version(&has_bits);
          duo_core_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string hotword_model_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hotword_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastAssistantLogsProto_CastAssistantEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_name_hash(), target);
  }

  // optional int64 time_msec = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_msec(), target);
  }

  // optional int64 value = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_value(), target);
  }

  // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata metadata = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed64 duo_core_version = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_duo_core_version(), target);
  }

  // optional string hotword_model_id = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hotword_model_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  return target;
}

size_t CastAssistantLogsProto_CastAssistantEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata metadata = 4;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hotword_model_id = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hotword_model_id());
    }

    // optional fixed64 name_hash = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int64 time_msec = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_msec());
    }

    // optional int64 value = 3 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
    }

    // optional fixed64 duo_core_version = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastAssistantLogsProto_CastAssistantEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastAssistantLogsProto_CastAssistantEventProto*>(
      &from));
}

void CastAssistantLogsProto_CastAssistantEventProto::MergeFrom(const CastAssistantLogsProto_CastAssistantEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hotword_model_id(from._internal_hotword_model_id());
    }
    if (cached_has_bits & 0x00000002u) {
      name_hash_ = from.name_hash_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_msec_ = from.time_msec_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      duo_core_version_ = from.duo_core_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastAssistantLogsProto_CastAssistantEventProto::CopyFrom(const CastAssistantLogsProto_CastAssistantEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastAssistantLogsProto_CastAssistantEventProto::IsInitialized() const {
  return true;
}

void CastAssistantLogsProto_CastAssistantEventProto::InternalSwap(CastAssistantLogsProto_CastAssistantEventProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hotword_model_id_, lhs_arena,
      &other->hotword_model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CastAssistantLogsProto_CastAssistantEventProto, duo_core_version_)
      + sizeof(CastAssistantLogsProto_CastAssistantEventProto::duo_core_version_)
      - PROTOBUF_FIELD_OFFSET(CastAssistantLogsProto_CastAssistantEventProto, name_hash_)>(
          reinterpret_cast<char*>(&name_hash_),
          reinterpret_cast<char*>(&other->name_hash_));
}

std::string CastAssistantLogsProto_CastAssistantEventProto::GetTypeName() const {
  return "metrics.CastAssistantLogsProto.CastAssistantEventProto";
}


// ===================================================================

class CastAssistantLogsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CastAssistantLogsProto>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_conversation_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gaia_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_virtual_release_track(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_backdrop_app_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_system_bundle_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CastAssistantLogsProto::CastAssistantLogsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  cast_assistant_event_(arena),
  experiment_id_(arena),
  event_id_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.CastAssistantLogsProto)
}
CastAssistantLogsProto::CastAssistantLogsProto(const CastAssistantLogsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      cast_assistant_event_(from.cast_assistant_event_),
      experiment_id_(from.experiment_id_),
      event_id_list_(from.event_id_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_id()) {
    event_id_.Set(from._internal_event_id(), 
      GetArenaForAllocation());
  }
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request_id()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  conversation_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    conversation_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_conversation_key()) {
    conversation_key_.Set(from._internal_conversation_key(), 
      GetArenaForAllocation());
  }
  backdrop_app_device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    backdrop_app_device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_backdrop_app_device_id()) {
    backdrop_app_device_id_.Set(from._internal_backdrop_app_device_id(), 
      GetArenaForAllocation());
  }
  system_bundle_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    system_bundle_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_system_bundle_version()) {
    system_bundle_version_.Set(from._internal_system_bundle_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gaia_id_, &from.gaia_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_release_track_) -
    reinterpret_cast<char*>(&gaia_id_)) + sizeof(virtual_release_track_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastAssistantLogsProto)
}

inline void CastAssistantLogsProto::SharedCtor() {
event_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  event_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
conversation_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  conversation_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
backdrop_app_device_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  backdrop_app_device_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
system_bundle_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  system_bundle_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gaia_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&virtual_release_track_) -
    reinterpret_cast<char*>(&gaia_id_)) + sizeof(virtual_release_track_));
}

CastAssistantLogsProto::~CastAssistantLogsProto() {
  // @@protoc_insertion_point(destructor:metrics.CastAssistantLogsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastAssistantLogsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  event_id_.Destroy();
  request_id_.Destroy();
  conversation_key_.Destroy();
  backdrop_app_device_id_.Destroy();
  system_bundle_version_.Destroy();
}

void CastAssistantLogsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CastAssistantLogsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastAssistantLogsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cast_assistant_event_.Clear();
  experiment_id_.Clear();
  event_id_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      conversation_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      backdrop_app_device_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      system_bundle_version_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&gaia_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_release_track_) -
        reinterpret_cast<char*>(&gaia_id_)) + sizeof(virtual_release_track_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastAssistantLogsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto cast_assistant_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cast_assistant_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 gaia_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gaia_id(&has_bits);
          gaia_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 client_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string request_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string conversation_key = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_conversation_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string experiment_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_experiment_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 virtual_release_track = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_virtual_release_track(&has_bits);
          virtual_release_track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string backdrop_app_device_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_backdrop_app_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string event_id_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_event_id_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string system_bundle_version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_system_bundle_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastAssistantLogsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastAssistantLogsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto cast_assistant_event = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cast_assistant_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_cast_assistant_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 gaia_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_gaia_id(), target);
  }

  // optional fixed64 client_id = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_client_id(), target);
  }

  // optional string request_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_request_id(), target);
  }

  // optional string conversation_key = 6 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_conversation_key(), target);
  }

  // repeated string experiment_id = 8;
  for (int i = 0, n = this->_internal_experiment_id_size(); i < n; i++) {
    const auto& s = this->_internal_experiment_id(i);
    target = stream->WriteString(8, s, target);
  }

  // optional fixed32 virtual_release_track = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(9, this->_internal_virtual_release_track(), target);
  }

  // optional string backdrop_app_device_id = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_backdrop_app_device_id(), target);
  }

  // repeated string event_id_list = 12;
  for (int i = 0, n = this->_internal_event_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_event_id_list(i);
    target = stream->WriteString(12, s, target);
  }

  // optional string system_bundle_version = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_system_bundle_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastAssistantLogsProto)
  return target;
}

size_t CastAssistantLogsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastAssistantLogsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto cast_assistant_event = 2;
  total_size += 1UL * this->_internal_cast_assistant_event_size();
  for (const auto& msg : this->cast_assistant_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string experiment_id = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(experiment_id_.size());
  for (int i = 0, n = experiment_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      experiment_id_.Get(i));
  }

  // repeated string event_id_list = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(event_id_list_.size());
  for (int i = 0, n = event_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      event_id_list_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_id());
    }

    // optional string request_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_request_id());
    }

    // optional string conversation_key = 6 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_conversation_key());
    }

    // optional string backdrop_app_device_id = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_backdrop_app_device_id());
    }

    // optional string system_bundle_version = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_system_bundle_version());
    }

    // optional int64 gaia_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gaia_id());
    }

    // optional fixed64 client_id = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional fixed32 virtual_release_track = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastAssistantLogsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastAssistantLogsProto*>(
      &from));
}

void CastAssistantLogsProto::MergeFrom(const CastAssistantLogsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastAssistantLogsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cast_assistant_event_.MergeFrom(from.cast_assistant_event_);
  experiment_id_.MergeFrom(from.experiment_id_);
  event_id_list_.MergeFrom(from.event_id_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event_id(from._internal_event_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_request_id(from._internal_request_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_conversation_key(from._internal_conversation_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_backdrop_app_device_id(from._internal_backdrop_app_device_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_system_bundle_version(from._internal_system_bundle_version());
    }
    if (cached_has_bits & 0x00000020u) {
      gaia_id_ = from.gaia_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      virtual_release_track_ = from.virtual_release_track_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastAssistantLogsProto::CopyFrom(const CastAssistantLogsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastAssistantLogsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastAssistantLogsProto::IsInitialized() const {
  return true;
}

void CastAssistantLogsProto::InternalSwap(CastAssistantLogsProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cast_assistant_event_.InternalSwap(&other->cast_assistant_event_);
  experiment_id_.InternalSwap(&other->experiment_id_);
  event_id_list_.InternalSwap(&other->event_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &event_id_, lhs_arena,
      &other->event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &conversation_key_, lhs_arena,
      &other->conversation_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &backdrop_app_device_id_, lhs_arena,
      &other->backdrop_app_device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &system_bundle_version_, lhs_arena,
      &other->system_bundle_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CastAssistantLogsProto, virtual_release_track_)
      + sizeof(CastAssistantLogsProto::virtual_release_track_)
      - PROTOBUF_FIELD_OFFSET(CastAssistantLogsProto, gaia_id_)>(
          reinterpret_cast<char*>(&gaia_id_),
          reinterpret_cast<char*>(&other->gaia_id_));
}

std::string CastAssistantLogsProto::GetTypeName() const {
  return "metrics.CastAssistantLogsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata*
Arena::CreateMaybeMessage< ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CastAssistantLogsProto_CastAssistantEventProto*
Arena::CreateMaybeMessage< ::metrics::CastAssistantLogsProto_CastAssistantEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CastAssistantLogsProto_CastAssistantEventProto >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CastAssistantLogsProto*
Arena::CreateMaybeMessage< ::metrics::CastAssistantLogsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CastAssistantLogsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
