// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/source.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukm_2fsource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukm_2fsource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukm_2fsource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukm_2fsource_2eproto {
  static const uint32_t offsets[];
};
namespace ukm {
class Source;
struct SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
class Source_NavigationMetadata;
struct Source_NavigationMetadataDefaultTypeInternal;
extern Source_NavigationMetadataDefaultTypeInternal _Source_NavigationMetadata_default_instance_;
class Source_UrlInfo;
struct Source_UrlInfoDefaultTypeInternal;
extern Source_UrlInfoDefaultTypeInternal _Source_UrlInfo_default_instance_;
}  // namespace ukm
PROTOBUF_NAMESPACE_OPEN
template<> ::ukm::Source* Arena::CreateMaybeMessage<::ukm::Source>(Arena*);
template<> ::ukm::Source_NavigationMetadata* Arena::CreateMaybeMessage<::ukm::Source_NavigationMetadata>(Arena*);
template<> ::ukm::Source_UrlInfo* Arena::CreateMaybeMessage<::ukm::Source_UrlInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukm {

enum Source_UrlScheme : int {
  Source_UrlScheme_UNSUPPORTED = 0,
  Source_UrlScheme_HTTP = 1,
  Source_UrlScheme_HTTPS = 2,
  Source_UrlScheme_FTP = 3,
  Source_UrlScheme_ABOUT = 4,
  Source_UrlScheme_CHROME = 5,
  Source_UrlScheme_CHROME_EXTENSION = 6,
  Source_UrlScheme_APP = 7
};
bool Source_UrlScheme_IsValid(int value);
constexpr Source_UrlScheme Source_UrlScheme_UrlScheme_MIN = Source_UrlScheme_UNSUPPORTED;
constexpr Source_UrlScheme Source_UrlScheme_UrlScheme_MAX = Source_UrlScheme_APP;
constexpr int Source_UrlScheme_UrlScheme_ARRAYSIZE = Source_UrlScheme_UrlScheme_MAX + 1;

const std::string& Source_UrlScheme_Name(Source_UrlScheme value);
template<typename T>
inline const std::string& Source_UrlScheme_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Source_UrlScheme>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Source_UrlScheme_Name.");
  return Source_UrlScheme_Name(static_cast<Source_UrlScheme>(enum_t_value));
}
bool Source_UrlScheme_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Source_UrlScheme* value);
enum Source_SameOriginStatus : int {
  Source_SameOriginStatus_UNSET = 0,
  Source_SameOriginStatus_SAME_ORIGIN = 1,
  Source_SameOriginStatus_CROSS_ORIGIN = 2
};
bool Source_SameOriginStatus_IsValid(int value);
constexpr Source_SameOriginStatus Source_SameOriginStatus_SameOriginStatus_MIN = Source_SameOriginStatus_UNSET;
constexpr Source_SameOriginStatus Source_SameOriginStatus_SameOriginStatus_MAX = Source_SameOriginStatus_CROSS_ORIGIN;
constexpr int Source_SameOriginStatus_SameOriginStatus_ARRAYSIZE = Source_SameOriginStatus_SameOriginStatus_MAX + 1;

const std::string& Source_SameOriginStatus_Name(Source_SameOriginStatus value);
template<typename T>
inline const std::string& Source_SameOriginStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Source_SameOriginStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Source_SameOriginStatus_Name.");
  return Source_SameOriginStatus_Name(static_cast<Source_SameOriginStatus>(enum_t_value));
}
bool Source_SameOriginStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Source_SameOriginStatus* value);
enum SourceType : int {
  DEFAULT = 0,
  NAVIGATION_ID = 1,
  APP_ID = 2,
  HISTORY_ID = 3,
  WEBAPK_ID = 4,
  PAYMENT_APP_ID = 5,
  DESKTOP_WEB_APP_ID = 6,
  WORKER_ID = 7,
  NO_URL_ID = 8,
  REDIRECT_ID = 9,
  WEB_IDENTITY_ID = 10
};
bool SourceType_IsValid(int value);
constexpr SourceType SourceType_MIN = DEFAULT;
constexpr SourceType SourceType_MAX = WEB_IDENTITY_ID;
constexpr int SourceType_ARRAYSIZE = SourceType_MAX + 1;

const std::string& SourceType_Name(SourceType value);
template<typename T>
inline const std::string& SourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceType_Name.");
  return SourceType_Name(static_cast<SourceType>(enum_t_value));
}
bool SourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SourceType* value);
enum AndroidActivityType : int {
  TABBED = 0,
  CUSTOM_TAB = 1,
  TRUSTED_WEB_ACTIVITY = 2,
  WEB_APP = 3,
  WEB_APK = 4
};
bool AndroidActivityType_IsValid(int value);
constexpr AndroidActivityType AndroidActivityType_MIN = TABBED;
constexpr AndroidActivityType AndroidActivityType_MAX = WEB_APK;
constexpr int AndroidActivityType_ARRAYSIZE = AndroidActivityType_MAX + 1;

const std::string& AndroidActivityType_Name(AndroidActivityType value);
template<typename T>
inline const std::string& AndroidActivityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AndroidActivityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AndroidActivityType_Name.");
  return AndroidActivityType_Name(static_cast<AndroidActivityType>(enum_t_value));
}
bool AndroidActivityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AndroidActivityType* value);
// ===================================================================

class Source_UrlInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ukm.Source.UrlInfo) */ {
 public:
  inline Source_UrlInfo() : Source_UrlInfo(nullptr) {}
  ~Source_UrlInfo() override;
  explicit PROTOBUF_CONSTEXPR Source_UrlInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Source_UrlInfo(const Source_UrlInfo& from);
  Source_UrlInfo(Source_UrlInfo&& from) noexcept
    : Source_UrlInfo() {
    *this = ::std::move(from);
  }

  inline Source_UrlInfo& operator=(const Source_UrlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source_UrlInfo& operator=(Source_UrlInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Source_UrlInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Source_UrlInfo* internal_default_instance() {
    return reinterpret_cast<const Source_UrlInfo*>(
               &_Source_UrlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Source_UrlInfo& a, Source_UrlInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Source_UrlInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Source_UrlInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Source_UrlInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Source_UrlInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Source_UrlInfo& from);
  void MergeFrom(const Source_UrlInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Source_UrlInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukm.Source.UrlInfo";
  }
  protected:
  explicit Source_UrlInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kPreviousUrlCountFieldNumber = 2,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional int32 previous_url_count = 2;
  bool has_previous_url_count() const;
  private:
  bool _internal_has_previous_url_count() const;
  public:
  void clear_previous_url_count();
  int32_t previous_url_count() const;
  void set_previous_url_count(int32_t value);
  private:
  int32_t _internal_previous_url_count() const;
  void _internal_set_previous_url_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ukm.Source.UrlInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int32_t previous_url_count_;
  friend struct ::TableStruct_ukm_2fsource_2eproto;
};
// -------------------------------------------------------------------

class Source_NavigationMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ukm.Source.NavigationMetadata) */ {
 public:
  inline Source_NavigationMetadata() : Source_NavigationMetadata(nullptr) {}
  ~Source_NavigationMetadata() override;
  explicit PROTOBUF_CONSTEXPR Source_NavigationMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Source_NavigationMetadata(const Source_NavigationMetadata& from);
  Source_NavigationMetadata(Source_NavigationMetadata&& from) noexcept
    : Source_NavigationMetadata() {
    *this = ::std::move(from);
  }

  inline Source_NavigationMetadata& operator=(const Source_NavigationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source_NavigationMetadata& operator=(Source_NavigationMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Source_NavigationMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Source_NavigationMetadata* internal_default_instance() {
    return reinterpret_cast<const Source_NavigationMetadata*>(
               &_Source_NavigationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Source_NavigationMetadata& a, Source_NavigationMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Source_NavigationMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Source_NavigationMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Source_NavigationMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Source_NavigationMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Source_NavigationMetadata& from);
  void MergeFrom(const Source_NavigationMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Source_NavigationMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukm.Source.NavigationMetadata";
  }
  protected:
  explicit Source_NavigationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSameOriginStatusFieldNumber = 1,
    kIsRendererInitiatedFieldNumber = 2,
    kIsErrorPageFieldNumber = 3,
  };
  // optional .ukm.Source.SameOriginStatus same_origin_status = 1;
  bool has_same_origin_status() const;
  private:
  bool _internal_has_same_origin_status() const;
  public:
  void clear_same_origin_status();
  ::ukm::Source_SameOriginStatus same_origin_status() const;
  void set_same_origin_status(::ukm::Source_SameOriginStatus value);
  private:
  ::ukm::Source_SameOriginStatus _internal_same_origin_status() const;
  void _internal_set_same_origin_status(::ukm::Source_SameOriginStatus value);
  public:

  // optional bool is_renderer_initiated = 2;
  bool has_is_renderer_initiated() const;
  private:
  bool _internal_has_is_renderer_initiated() const;
  public:
  void clear_is_renderer_initiated();
  bool is_renderer_initiated() const;
  void set_is_renderer_initiated(bool value);
  private:
  bool _internal_is_renderer_initiated() const;
  void _internal_set_is_renderer_initiated(bool value);
  public:

  // optional bool is_error_page = 3;
  bool has_is_error_page() const;
  private:
  bool _internal_has_is_error_page() const;
  public:
  void clear_is_error_page();
  bool is_error_page() const;
  void set_is_error_page(bool value);
  private:
  bool _internal_is_error_page() const;
  void _internal_set_is_error_page(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ukm.Source.NavigationMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int same_origin_status_;
  bool is_renderer_initiated_;
  bool is_error_page_;
  friend struct ::TableStruct_ukm_2fsource_2eproto;
};
// -------------------------------------------------------------------

class Source final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ukm.Source) */ {
 public:
  inline Source() : Source(nullptr) {}
  ~Source() override;
  explicit PROTOBUF_CONSTEXPR Source(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Source(const Source& from);
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source& operator=(Source&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Source& default_instance() {
    return *internal_default_instance();
  }
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Source* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Source* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Source* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Source* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukm.Source";
  }
  protected:
  explicit Source(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Source_UrlInfo UrlInfo;
  typedef Source_NavigationMetadata NavigationMetadata;

  typedef Source_UrlScheme UrlScheme;
  static constexpr UrlScheme UNSUPPORTED =
    Source_UrlScheme_UNSUPPORTED;
  static constexpr UrlScheme HTTP =
    Source_UrlScheme_HTTP;
  static constexpr UrlScheme HTTPS =
    Source_UrlScheme_HTTPS;
  static constexpr UrlScheme FTP =
    Source_UrlScheme_FTP;
  static constexpr UrlScheme ABOUT =
    Source_UrlScheme_ABOUT;
  static constexpr UrlScheme CHROME =
    Source_UrlScheme_CHROME;
  static constexpr UrlScheme CHROME_EXTENSION =
    Source_UrlScheme_CHROME_EXTENSION;
  static constexpr UrlScheme APP =
    Source_UrlScheme_APP;
  static inline bool UrlScheme_IsValid(int value) {
    return Source_UrlScheme_IsValid(value);
  }
  static constexpr UrlScheme UrlScheme_MIN =
    Source_UrlScheme_UrlScheme_MIN;
  static constexpr UrlScheme UrlScheme_MAX =
    Source_UrlScheme_UrlScheme_MAX;
  static constexpr int UrlScheme_ARRAYSIZE =
    Source_UrlScheme_UrlScheme_ARRAYSIZE;
  template<typename T>
  static inline const std::string& UrlScheme_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UrlScheme>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UrlScheme_Name.");
    return Source_UrlScheme_Name(enum_t_value);
  }
  static inline bool UrlScheme_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UrlScheme* value) {
    return Source_UrlScheme_Parse(name, value);
  }

  typedef Source_SameOriginStatus SameOriginStatus;
  static constexpr SameOriginStatus UNSET =
    Source_SameOriginStatus_UNSET;
  static constexpr SameOriginStatus SAME_ORIGIN =
    Source_SameOriginStatus_SAME_ORIGIN;
  static constexpr SameOriginStatus CROSS_ORIGIN =
    Source_SameOriginStatus_CROSS_ORIGIN;
  static inline bool SameOriginStatus_IsValid(int value) {
    return Source_SameOriginStatus_IsValid(value);
  }
  static constexpr SameOriginStatus SameOriginStatus_MIN =
    Source_SameOriginStatus_SameOriginStatus_MIN;
  static constexpr SameOriginStatus SameOriginStatus_MAX =
    Source_SameOriginStatus_SameOriginStatus_MAX;
  static constexpr int SameOriginStatus_ARRAYSIZE =
    Source_SameOriginStatus_SameOriginStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SameOriginStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SameOriginStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SameOriginStatus_Name.");
    return Source_SameOriginStatus_Name(enum_t_value);
  }
  static inline bool SameOriginStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SameOriginStatus* value) {
    return Source_SameOriginStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUrlsFieldNumber = 8,
    kResolvedUrlsFieldNumber = 15,
    kUrlFieldNumber = 2,
    kInitialUrlFieldNumber = 6,
    kNavigationMetadataFieldNumber = 17,
    kIdFieldNumber = 1,
    kNavigationTimeMsecFieldNumber = 3,
    kTabIdFieldNumber = 10,
    kPreviousSourceIdFieldNumber = 11,
    kOpenerSourceIdFieldNumber = 12,
    kIsSameDocumentNavigationFieldNumber = 13,
    kIsCustomTabFieldNumber = 7,
    kTypeFieldNumber = 16,
    kPreviousSameDocumentSourceIdFieldNumber = 14,
    kAndroidActivityTypeFieldNumber = 18,
  };
  // repeated .ukm.Source.UrlInfo urls = 8;
  int urls_size() const;
  private:
  int _internal_urls_size() const;
  public:
  void clear_urls();
  ::ukm::Source_UrlInfo* mutable_urls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukm::Source_UrlInfo >*
      mutable_urls();
  private:
  const ::ukm::Source_UrlInfo& _internal_urls(int index) const;
  ::ukm::Source_UrlInfo* _internal_add_urls();
  public:
  const ::ukm::Source_UrlInfo& urls(int index) const;
  ::ukm::Source_UrlInfo* add_urls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukm::Source_UrlInfo >&
      urls() const;

  // repeated .ukm.Source.UrlInfo resolved_urls = 15;
  int resolved_urls_size() const;
  private:
  int _internal_resolved_urls_size() const;
  public:
  void clear_resolved_urls();
  ::ukm::Source_UrlInfo* mutable_resolved_urls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukm::Source_UrlInfo >*
      mutable_resolved_urls();
  private:
  const ::ukm::Source_UrlInfo& _internal_resolved_urls(int index) const;
  ::ukm::Source_UrlInfo* _internal_add_resolved_urls();
  public:
  const ::ukm::Source_UrlInfo& resolved_urls(int index) const;
  ::ukm::Source_UrlInfo* add_resolved_urls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukm::Source_UrlInfo >&
      resolved_urls() const;

  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string initial_url = 6;
  bool has_initial_url() const;
  private:
  bool _internal_has_initial_url() const;
  public:
  void clear_initial_url();
  const std::string& initial_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_initial_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_initial_url();
  PROTOBUF_NODISCARD std::string* release_initial_url();
  void set_allocated_initial_url(std::string* initial_url);
  private:
  const std::string& _internal_initial_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initial_url(const std::string& value);
  std::string* _internal_mutable_initial_url();
  public:

  // optional .ukm.Source.NavigationMetadata navigation_metadata = 17;
  bool has_navigation_metadata() const;
  private:
  bool _internal_has_navigation_metadata() const;
  public:
  void clear_navigation_metadata();
  const ::ukm::Source_NavigationMetadata& navigation_metadata() const;
  PROTOBUF_NODISCARD ::ukm::Source_NavigationMetadata* release_navigation_metadata();
  ::ukm::Source_NavigationMetadata* mutable_navigation_metadata();
  void set_allocated_navigation_metadata(::ukm::Source_NavigationMetadata* navigation_metadata);
  private:
  const ::ukm::Source_NavigationMetadata& _internal_navigation_metadata() const;
  ::ukm::Source_NavigationMetadata* _internal_mutable_navigation_metadata();
  public:
  void unsafe_arena_set_allocated_navigation_metadata(
      ::ukm::Source_NavigationMetadata* navigation_metadata);
  ::ukm::Source_NavigationMetadata* unsafe_arena_release_navigation_metadata();

  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // optional int64 navigation_time_msec = 3;
  bool has_navigation_time_msec() const;
  private:
  bool _internal_has_navigation_time_msec() const;
  public:
  void clear_navigation_time_msec();
  int64_t navigation_time_msec() const;
  void set_navigation_time_msec(int64_t value);
  private:
  int64_t _internal_navigation_time_msec() const;
  void _internal_set_navigation_time_msec(int64_t value);
  public:

  // optional int64 tab_id = 10;
  bool has_tab_id() const;
  private:
  bool _internal_has_tab_id() const;
  public:
  void clear_tab_id();
  int64_t tab_id() const;
  void set_tab_id(int64_t value);
  private:
  int64_t _internal_tab_id() const;
  void _internal_set_tab_id(int64_t value);
  public:

  // optional int64 previous_source_id = 11;
  bool has_previous_source_id() const;
  private:
  bool _internal_has_previous_source_id() const;
  public:
  void clear_previous_source_id();
  int64_t previous_source_id() const;
  void set_previous_source_id(int64_t value);
  private:
  int64_t _internal_previous_source_id() const;
  void _internal_set_previous_source_id(int64_t value);
  public:

  // optional int64 opener_source_id = 12;
  bool has_opener_source_id() const;
  private:
  bool _internal_has_opener_source_id() const;
  public:
  void clear_opener_source_id();
  int64_t opener_source_id() const;
  void set_opener_source_id(int64_t value);
  private:
  int64_t _internal_opener_source_id() const;
  void _internal_set_opener_source_id(int64_t value);
  public:

  // optional bool is_same_document_navigation = 13;
  bool has_is_same_document_navigation() const;
  private:
  bool _internal_has_is_same_document_navigation() const;
  public:
  void clear_is_same_document_navigation();
  bool is_same_document_navigation() const;
  void set_is_same_document_navigation(bool value);
  private:
  bool _internal_is_same_document_navigation() const;
  void _internal_set_is_same_document_navigation(bool value);
  public:

  // optional bool is_custom_tab = 7;
  bool has_is_custom_tab() const;
  private:
  bool _internal_has_is_custom_tab() const;
  public:
  void clear_is_custom_tab();
  bool is_custom_tab() const;
  void set_is_custom_tab(bool value);
  private:
  bool _internal_is_custom_tab() const;
  void _internal_set_is_custom_tab(bool value);
  public:

  // optional .ukm.SourceType type = 16;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ukm::SourceType type() const;
  void set_type(::ukm::SourceType value);
  private:
  ::ukm::SourceType _internal_type() const;
  void _internal_set_type(::ukm::SourceType value);
  public:

  // optional int64 previous_same_document_source_id = 14;
  bool has_previous_same_document_source_id() const;
  private:
  bool _internal_has_previous_same_document_source_id() const;
  public:
  void clear_previous_same_document_source_id();
  int64_t previous_same_document_source_id() const;
  void set_previous_same_document_source_id(int64_t value);
  private:
  int64_t _internal_previous_same_document_source_id() const;
  void _internal_set_previous_same_document_source_id(int64_t value);
  public:

  // optional .ukm.AndroidActivityType android_activity_type = 18;
  bool has_android_activity_type() const;
  private:
  bool _internal_has_android_activity_type() const;
  public:
  void clear_android_activity_type();
  ::ukm::AndroidActivityType android_activity_type() const;
  void set_android_activity_type(::ukm::AndroidActivityType value);
  private:
  ::ukm::AndroidActivityType _internal_android_activity_type() const;
  void _internal_set_android_activity_type(::ukm::AndroidActivityType value);
  public:

  // @@protoc_insertion_point(class_scope:ukm.Source)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukm::Source_UrlInfo > urls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukm::Source_UrlInfo > resolved_urls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initial_url_;
  ::ukm::Source_NavigationMetadata* navigation_metadata_;
  int64_t id_;
  int64_t navigation_time_msec_;
  int64_t tab_id_;
  int64_t previous_source_id_;
  int64_t opener_source_id_;
  bool is_same_document_navigation_;
  bool is_custom_tab_;
  int type_;
  int64_t previous_same_document_source_id_;
  int android_activity_type_;
  friend struct ::TableStruct_ukm_2fsource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Source_UrlInfo

// optional string url = 1;
inline bool Source_UrlInfo::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Source_UrlInfo::has_url() const {
  return _internal_has_url();
}
inline void Source_UrlInfo::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Source_UrlInfo::url() const {
  // @@protoc_insertion_point(field_get:ukm.Source.UrlInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Source_UrlInfo::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ukm.Source.UrlInfo.url)
}
inline std::string* Source_UrlInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:ukm.Source.UrlInfo.url)
  return _s;
}
inline const std::string& Source_UrlInfo::_internal_url() const {
  return url_.Get();
}
inline void Source_UrlInfo::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* Source_UrlInfo::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* Source_UrlInfo::release_url() {
  // @@protoc_insertion_point(field_release:ukm.Source.UrlInfo.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Source_UrlInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ukm.Source.UrlInfo.url)
}

// optional int32 previous_url_count = 2;
inline bool Source_UrlInfo::_internal_has_previous_url_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Source_UrlInfo::has_previous_url_count() const {
  return _internal_has_previous_url_count();
}
inline void Source_UrlInfo::clear_previous_url_count() {
  previous_url_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Source_UrlInfo::_internal_previous_url_count() const {
  return previous_url_count_;
}
inline int32_t Source_UrlInfo::previous_url_count() const {
  // @@protoc_insertion_point(field_get:ukm.Source.UrlInfo.previous_url_count)
  return _internal_previous_url_count();
}
inline void Source_UrlInfo::_internal_set_previous_url_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  previous_url_count_ = value;
}
inline void Source_UrlInfo::set_previous_url_count(int32_t value) {
  _internal_set_previous_url_count(value);
  // @@protoc_insertion_point(field_set:ukm.Source.UrlInfo.previous_url_count)
}

// -------------------------------------------------------------------

// Source_NavigationMetadata

// optional .ukm.Source.SameOriginStatus same_origin_status = 1;
inline bool Source_NavigationMetadata::_internal_has_same_origin_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Source_NavigationMetadata::has_same_origin_status() const {
  return _internal_has_same_origin_status();
}
inline void Source_NavigationMetadata::clear_same_origin_status() {
  same_origin_status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ukm::Source_SameOriginStatus Source_NavigationMetadata::_internal_same_origin_status() const {
  return static_cast< ::ukm::Source_SameOriginStatus >(same_origin_status_);
}
inline ::ukm::Source_SameOriginStatus Source_NavigationMetadata::same_origin_status() const {
  // @@protoc_insertion_point(field_get:ukm.Source.NavigationMetadata.same_origin_status)
  return _internal_same_origin_status();
}
inline void Source_NavigationMetadata::_internal_set_same_origin_status(::ukm::Source_SameOriginStatus value) {
  assert(::ukm::Source_SameOriginStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  same_origin_status_ = value;
}
inline void Source_NavigationMetadata::set_same_origin_status(::ukm::Source_SameOriginStatus value) {
  _internal_set_same_origin_status(value);
  // @@protoc_insertion_point(field_set:ukm.Source.NavigationMetadata.same_origin_status)
}

// optional bool is_renderer_initiated = 2;
inline bool Source_NavigationMetadata::_internal_has_is_renderer_initiated() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Source_NavigationMetadata::has_is_renderer_initiated() const {
  return _internal_has_is_renderer_initiated();
}
inline void Source_NavigationMetadata::clear_is_renderer_initiated() {
  is_renderer_initiated_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Source_NavigationMetadata::_internal_is_renderer_initiated() const {
  return is_renderer_initiated_;
}
inline bool Source_NavigationMetadata::is_renderer_initiated() const {
  // @@protoc_insertion_point(field_get:ukm.Source.NavigationMetadata.is_renderer_initiated)
  return _internal_is_renderer_initiated();
}
inline void Source_NavigationMetadata::_internal_set_is_renderer_initiated(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_renderer_initiated_ = value;
}
inline void Source_NavigationMetadata::set_is_renderer_initiated(bool value) {
  _internal_set_is_renderer_initiated(value);
  // @@protoc_insertion_point(field_set:ukm.Source.NavigationMetadata.is_renderer_initiated)
}

// optional bool is_error_page = 3;
inline bool Source_NavigationMetadata::_internal_has_is_error_page() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Source_NavigationMetadata::has_is_error_page() const {
  return _internal_has_is_error_page();
}
inline void Source_NavigationMetadata::clear_is_error_page() {
  is_error_page_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Source_NavigationMetadata::_internal_is_error_page() const {
  return is_error_page_;
}
inline bool Source_NavigationMetadata::is_error_page() const {
  // @@protoc_insertion_point(field_get:ukm.Source.NavigationMetadata.is_error_page)
  return _internal_is_error_page();
}
inline void Source_NavigationMetadata::_internal_set_is_error_page(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_error_page_ = value;
}
inline void Source_NavigationMetadata::set_is_error_page(bool value) {
  _internal_set_is_error_page(value);
  // @@protoc_insertion_point(field_set:ukm.Source.NavigationMetadata.is_error_page)
}

// -------------------------------------------------------------------

// Source

// optional int64 id = 1;
inline bool Source::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Source::has_id() const {
  return _internal_has_id();
}
inline void Source::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t Source::_internal_id() const {
  return id_;
}
inline int64_t Source::id() const {
  // @@protoc_insertion_point(field_get:ukm.Source.id)
  return _internal_id();
}
inline void Source::_internal_set_id(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void Source::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ukm.Source.id)
}

// optional int64 previous_source_id = 11;
inline bool Source::_internal_has_previous_source_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Source::has_previous_source_id() const {
  return _internal_has_previous_source_id();
}
inline void Source::clear_previous_source_id() {
  previous_source_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t Source::_internal_previous_source_id() const {
  return previous_source_id_;
}
inline int64_t Source::previous_source_id() const {
  // @@protoc_insertion_point(field_get:ukm.Source.previous_source_id)
  return _internal_previous_source_id();
}
inline void Source::_internal_set_previous_source_id(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  previous_source_id_ = value;
}
inline void Source::set_previous_source_id(int64_t value) {
  _internal_set_previous_source_id(value);
  // @@protoc_insertion_point(field_set:ukm.Source.previous_source_id)
}

// optional int64 previous_same_document_source_id = 14;
inline bool Source::_internal_has_previous_same_document_source_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Source::has_previous_same_document_source_id() const {
  return _internal_has_previous_same_document_source_id();
}
inline void Source::clear_previous_same_document_source_id() {
  previous_same_document_source_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000800u;
}
inline int64_t Source::_internal_previous_same_document_source_id() const {
  return previous_same_document_source_id_;
}
inline int64_t Source::previous_same_document_source_id() const {
  // @@protoc_insertion_point(field_get:ukm.Source.previous_same_document_source_id)
  return _internal_previous_same_document_source_id();
}
inline void Source::_internal_set_previous_same_document_source_id(int64_t value) {
  _has_bits_[0] |= 0x00000800u;
  previous_same_document_source_id_ = value;
}
inline void Source::set_previous_same_document_source_id(int64_t value) {
  _internal_set_previous_same_document_source_id(value);
  // @@protoc_insertion_point(field_set:ukm.Source.previous_same_document_source_id)
}

// optional int64 opener_source_id = 12;
inline bool Source::_internal_has_opener_source_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Source::has_opener_source_id() const {
  return _internal_has_opener_source_id();
}
inline void Source::clear_opener_source_id() {
  opener_source_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000080u;
}
inline int64_t Source::_internal_opener_source_id() const {
  return opener_source_id_;
}
inline int64_t Source::opener_source_id() const {
  // @@protoc_insertion_point(field_get:ukm.Source.opener_source_id)
  return _internal_opener_source_id();
}
inline void Source::_internal_set_opener_source_id(int64_t value) {
  _has_bits_[0] |= 0x00000080u;
  opener_source_id_ = value;
}
inline void Source::set_opener_source_id(int64_t value) {
  _internal_set_opener_source_id(value);
  // @@protoc_insertion_point(field_set:ukm.Source.opener_source_id)
}

// optional .ukm.SourceType type = 16;
inline bool Source::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Source::has_type() const {
  return _internal_has_type();
}
inline void Source::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::ukm::SourceType Source::_internal_type() const {
  return static_cast< ::ukm::SourceType >(type_);
}
inline ::ukm::SourceType Source::type() const {
  // @@protoc_insertion_point(field_get:ukm.Source.type)
  return _internal_type();
}
inline void Source::_internal_set_type(::ukm::SourceType value) {
  assert(::ukm::SourceType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  type_ = value;
}
inline void Source::set_type(::ukm::SourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ukm.Source.type)
}

// repeated .ukm.Source.UrlInfo urls = 8;
inline int Source::_internal_urls_size() const {
  return urls_.size();
}
inline int Source::urls_size() const {
  return _internal_urls_size();
}
inline void Source::clear_urls() {
  urls_.Clear();
}
inline ::ukm::Source_UrlInfo* Source::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ukm.Source.urls)
  return urls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukm::Source_UrlInfo >*
Source::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ukm.Source.urls)
  return &urls_;
}
inline const ::ukm::Source_UrlInfo& Source::_internal_urls(int index) const {
  return urls_.Get(index);
}
inline const ::ukm::Source_UrlInfo& Source::urls(int index) const {
  // @@protoc_insertion_point(field_get:ukm.Source.urls)
  return _internal_urls(index);
}
inline ::ukm::Source_UrlInfo* Source::_internal_add_urls() {
  return urls_.Add();
}
inline ::ukm::Source_UrlInfo* Source::add_urls() {
  ::ukm::Source_UrlInfo* _add = _internal_add_urls();
  // @@protoc_insertion_point(field_add:ukm.Source.urls)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukm::Source_UrlInfo >&
Source::urls() const {
  // @@protoc_insertion_point(field_list:ukm.Source.urls)
  return urls_;
}

// repeated .ukm.Source.UrlInfo resolved_urls = 15;
inline int Source::_internal_resolved_urls_size() const {
  return resolved_urls_.size();
}
inline int Source::resolved_urls_size() const {
  return _internal_resolved_urls_size();
}
inline void Source::clear_resolved_urls() {
  resolved_urls_.Clear();
}
inline ::ukm::Source_UrlInfo* Source::mutable_resolved_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ukm.Source.resolved_urls)
  return resolved_urls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukm::Source_UrlInfo >*
Source::mutable_resolved_urls() {
  // @@protoc_insertion_point(field_mutable_list:ukm.Source.resolved_urls)
  return &resolved_urls_;
}
inline const ::ukm::Source_UrlInfo& Source::_internal_resolved_urls(int index) const {
  return resolved_urls_.Get(index);
}
inline const ::ukm::Source_UrlInfo& Source::resolved_urls(int index) const {
  // @@protoc_insertion_point(field_get:ukm.Source.resolved_urls)
  return _internal_resolved_urls(index);
}
inline ::ukm::Source_UrlInfo* Source::_internal_add_resolved_urls() {
  return resolved_urls_.Add();
}
inline ::ukm::Source_UrlInfo* Source::add_resolved_urls() {
  ::ukm::Source_UrlInfo* _add = _internal_add_resolved_urls();
  // @@protoc_insertion_point(field_add:ukm.Source.resolved_urls)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukm::Source_UrlInfo >&
Source::resolved_urls() const {
  // @@protoc_insertion_point(field_list:ukm.Source.resolved_urls)
  return resolved_urls_;
}

// optional bool is_same_document_navigation = 13;
inline bool Source::_internal_has_is_same_document_navigation() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Source::has_is_same_document_navigation() const {
  return _internal_has_is_same_document_navigation();
}
inline void Source::clear_is_same_document_navigation() {
  is_same_document_navigation_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Source::_internal_is_same_document_navigation() const {
  return is_same_document_navigation_;
}
inline bool Source::is_same_document_navigation() const {
  // @@protoc_insertion_point(field_get:ukm.Source.is_same_document_navigation)
  return _internal_is_same_document_navigation();
}
inline void Source::_internal_set_is_same_document_navigation(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_same_document_navigation_ = value;
}
inline void Source::set_is_same_document_navigation(bool value) {
  _internal_set_is_same_document_navigation(value);
  // @@protoc_insertion_point(field_set:ukm.Source.is_same_document_navigation)
}

// optional .ukm.Source.NavigationMetadata navigation_metadata = 17;
inline bool Source::_internal_has_navigation_metadata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || navigation_metadata_ != nullptr);
  return value;
}
inline bool Source::has_navigation_metadata() const {
  return _internal_has_navigation_metadata();
}
inline void Source::clear_navigation_metadata() {
  if (navigation_metadata_ != nullptr) navigation_metadata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ukm::Source_NavigationMetadata& Source::_internal_navigation_metadata() const {
  const ::ukm::Source_NavigationMetadata* p = navigation_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::ukm::Source_NavigationMetadata&>(
      ::ukm::_Source_NavigationMetadata_default_instance_);
}
inline const ::ukm::Source_NavigationMetadata& Source::navigation_metadata() const {
  // @@protoc_insertion_point(field_get:ukm.Source.navigation_metadata)
  return _internal_navigation_metadata();
}
inline void Source::unsafe_arena_set_allocated_navigation_metadata(
    ::ukm::Source_NavigationMetadata* navigation_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigation_metadata_);
  }
  navigation_metadata_ = navigation_metadata;
  if (navigation_metadata) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ukm.Source.navigation_metadata)
}
inline ::ukm::Source_NavigationMetadata* Source::release_navigation_metadata() {
  _has_bits_[0] &= ~0x00000004u;
  ::ukm::Source_NavigationMetadata* temp = navigation_metadata_;
  navigation_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ukm::Source_NavigationMetadata* Source::unsafe_arena_release_navigation_metadata() {
  // @@protoc_insertion_point(field_release:ukm.Source.navigation_metadata)
  _has_bits_[0] &= ~0x00000004u;
  ::ukm::Source_NavigationMetadata* temp = navigation_metadata_;
  navigation_metadata_ = nullptr;
  return temp;
}
inline ::ukm::Source_NavigationMetadata* Source::_internal_mutable_navigation_metadata() {
  _has_bits_[0] |= 0x00000004u;
  if (navigation_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::ukm::Source_NavigationMetadata>(GetArenaForAllocation());
    navigation_metadata_ = p;
  }
  return navigation_metadata_;
}
inline ::ukm::Source_NavigationMetadata* Source::mutable_navigation_metadata() {
  ::ukm::Source_NavigationMetadata* _msg = _internal_mutable_navigation_metadata();
  // @@protoc_insertion_point(field_mutable:ukm.Source.navigation_metadata)
  return _msg;
}
inline void Source::set_allocated_navigation_metadata(::ukm::Source_NavigationMetadata* navigation_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete navigation_metadata_;
  }
  if (navigation_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(navigation_metadata);
    if (message_arena != submessage_arena) {
      navigation_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  navigation_metadata_ = navigation_metadata;
  // @@protoc_insertion_point(field_set_allocated:ukm.Source.navigation_metadata)
}

// optional string url = 2;
inline bool Source::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Source::has_url() const {
  return _internal_has_url();
}
inline void Source::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Source::url() const {
  // @@protoc_insertion_point(field_get:ukm.Source.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Source::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ukm.Source.url)
}
inline std::string* Source::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:ukm.Source.url)
  return _s;
}
inline const std::string& Source::_internal_url() const {
  return url_.Get();
}
inline void Source::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* Source::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* Source::release_url() {
  // @@protoc_insertion_point(field_release:ukm.Source.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Source::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ukm.Source.url)
}

// optional string initial_url = 6;
inline bool Source::_internal_has_initial_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Source::has_initial_url() const {
  return _internal_has_initial_url();
}
inline void Source::clear_initial_url() {
  initial_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Source::initial_url() const {
  // @@protoc_insertion_point(field_get:ukm.Source.initial_url)
  return _internal_initial_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Source::set_initial_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 initial_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ukm.Source.initial_url)
}
inline std::string* Source::mutable_initial_url() {
  std::string* _s = _internal_mutable_initial_url();
  // @@protoc_insertion_point(field_mutable:ukm.Source.initial_url)
  return _s;
}
inline const std::string& Source::_internal_initial_url() const {
  return initial_url_.Get();
}
inline void Source::_internal_set_initial_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  initial_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Source::_internal_mutable_initial_url() {
  _has_bits_[0] |= 0x00000002u;
  return initial_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Source::release_initial_url() {
  // @@protoc_insertion_point(field_release:ukm.Source.initial_url)
  if (!_internal_has_initial_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = initial_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initial_url_.IsDefault()) {
    initial_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Source::set_allocated_initial_url(std::string* initial_url) {
  if (initial_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  initial_url_.SetAllocated(initial_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initial_url_.IsDefault()) {
    initial_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ukm.Source.initial_url)
}

// optional bool is_custom_tab = 7;
inline bool Source::_internal_has_is_custom_tab() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Source::has_is_custom_tab() const {
  return _internal_has_is_custom_tab();
}
inline void Source::clear_is_custom_tab() {
  is_custom_tab_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Source::_internal_is_custom_tab() const {
  return is_custom_tab_;
}
inline bool Source::is_custom_tab() const {
  // @@protoc_insertion_point(field_get:ukm.Source.is_custom_tab)
  return _internal_is_custom_tab();
}
inline void Source::_internal_set_is_custom_tab(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_custom_tab_ = value;
}
inline void Source::set_is_custom_tab(bool value) {
  _internal_set_is_custom_tab(value);
  // @@protoc_insertion_point(field_set:ukm.Source.is_custom_tab)
}

// optional .ukm.AndroidActivityType android_activity_type = 18;
inline bool Source::_internal_has_android_activity_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Source::has_android_activity_type() const {
  return _internal_has_android_activity_type();
}
inline void Source::clear_android_activity_type() {
  android_activity_type_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::ukm::AndroidActivityType Source::_internal_android_activity_type() const {
  return static_cast< ::ukm::AndroidActivityType >(android_activity_type_);
}
inline ::ukm::AndroidActivityType Source::android_activity_type() const {
  // @@protoc_insertion_point(field_get:ukm.Source.android_activity_type)
  return _internal_android_activity_type();
}
inline void Source::_internal_set_android_activity_type(::ukm::AndroidActivityType value) {
  assert(::ukm::AndroidActivityType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  android_activity_type_ = value;
}
inline void Source::set_android_activity_type(::ukm::AndroidActivityType value) {
  _internal_set_android_activity_type(value);
  // @@protoc_insertion_point(field_set:ukm.Source.android_activity_type)
}

// optional int64 navigation_time_msec = 3;
inline bool Source::_internal_has_navigation_time_msec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Source::has_navigation_time_msec() const {
  return _internal_has_navigation_time_msec();
}
inline void Source::clear_navigation_time_msec() {
  navigation_time_msec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t Source::_internal_navigation_time_msec() const {
  return navigation_time_msec_;
}
inline int64_t Source::navigation_time_msec() const {
  // @@protoc_insertion_point(field_get:ukm.Source.navigation_time_msec)
  return _internal_navigation_time_msec();
}
inline void Source::_internal_set_navigation_time_msec(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  navigation_time_msec_ = value;
}
inline void Source::set_navigation_time_msec(int64_t value) {
  _internal_set_navigation_time_msec(value);
  // @@protoc_insertion_point(field_set:ukm.Source.navigation_time_msec)
}

// optional int64 tab_id = 10;
inline bool Source::_internal_has_tab_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Source::has_tab_id() const {
  return _internal_has_tab_id();
}
inline void Source::clear_tab_id() {
  tab_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t Source::_internal_tab_id() const {
  return tab_id_;
}
inline int64_t Source::tab_id() const {
  // @@protoc_insertion_point(field_get:ukm.Source.tab_id)
  return _internal_tab_id();
}
inline void Source::_internal_set_tab_id(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  tab_id_ = value;
}
inline void Source::set_tab_id(int64_t value) {
  _internal_set_tab_id(value);
  // @@protoc_insertion_point(field_set:ukm.Source.tab_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ukm::Source_UrlScheme> : ::std::true_type {};
template <> struct is_proto_enum< ::ukm::Source_SameOriginStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::ukm::SourceType> : ::std::true_type {};
template <> struct is_proto_enum< ::ukm::AndroidActivityType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukm_2fsource_2eproto
