// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_sample.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fsample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5fsample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fsample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fsample_2eproto {
  static const uint32_t offsets[];
};
namespace dom_distiller {
namespace test_sample {
namespace proto {
class Repeated;
struct RepeatedDefaultTypeInternal;
extern RepeatedDefaultTypeInternal _Repeated_default_instance_;
class Repeated_Message;
struct Repeated_MessageDefaultTypeInternal;
extern Repeated_MessageDefaultTypeInternal _Repeated_Message_default_instance_;
class TypeTest;
struct TypeTestDefaultTypeInternal;
extern TypeTestDefaultTypeInternal _TypeTest_default_instance_;
class TypeTest_Message;
struct TypeTest_MessageDefaultTypeInternal;
extern TypeTest_MessageDefaultTypeInternal _TypeTest_Message_default_instance_;
}  // namespace proto
}  // namespace test_sample
}  // namespace dom_distiller
PROTOBUF_NAMESPACE_OPEN
template<> ::dom_distiller::test_sample::proto::Repeated* Arena::CreateMaybeMessage<::dom_distiller::test_sample::proto::Repeated>(Arena*);
template<> ::dom_distiller::test_sample::proto::Repeated_Message* Arena::CreateMaybeMessage<::dom_distiller::test_sample::proto::Repeated_Message>(Arena*);
template<> ::dom_distiller::test_sample::proto::TypeTest* Arena::CreateMaybeMessage<::dom_distiller::test_sample::proto::TypeTest>(Arena*);
template<> ::dom_distiller::test_sample::proto::TypeTest_Message* Arena::CreateMaybeMessage<::dom_distiller::test_sample::proto::TypeTest_Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dom_distiller {
namespace test_sample {
namespace proto {

// ===================================================================

class TypeTest_Message final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.test_sample.proto.TypeTest.Message) */ {
 public:
  inline TypeTest_Message() : TypeTest_Message(nullptr) {}
  ~TypeTest_Message() override;
  explicit PROTOBUF_CONSTEXPR TypeTest_Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypeTest_Message(const TypeTest_Message& from);
  TypeTest_Message(TypeTest_Message&& from) noexcept
    : TypeTest_Message() {
    *this = ::std::move(from);
  }

  inline TypeTest_Message& operator=(const TypeTest_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeTest_Message& operator=(TypeTest_Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TypeTest_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const TypeTest_Message* internal_default_instance() {
    return reinterpret_cast<const TypeTest_Message*>(
               &_TypeTest_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TypeTest_Message& a, TypeTest_Message& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TypeTest_Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeTest_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypeTest_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypeTest_Message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TypeTest_Message& from);
  void MergeFrom(const TypeTest_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeTest_Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.test_sample.proto.TypeTest.Message";
  }
  protected:
  explicit TypeTest_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDummyFieldNumber = 1,
  };
  // optional bool dummy = 1;
  bool has_dummy() const;
  private:
  bool _internal_has_dummy() const;
  public:
  void clear_dummy();
  bool dummy() const;
  void set_dummy(bool value);
  private:
  bool _internal_dummy() const;
  void _internal_set_dummy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dom_distiller.test_sample.proto.TypeTest.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool dummy_;
  friend struct ::TableStruct_test_5fsample_2eproto;
};
// -------------------------------------------------------------------

class TypeTest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.test_sample.proto.TypeTest) */ {
 public:
  inline TypeTest() : TypeTest(nullptr) {}
  ~TypeTest() override;
  explicit PROTOBUF_CONSTEXPR TypeTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypeTest(const TypeTest& from);
  TypeTest(TypeTest&& from) noexcept
    : TypeTest() {
    *this = ::std::move(from);
  }

  inline TypeTest& operator=(const TypeTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeTest& operator=(TypeTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TypeTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TypeTest* internal_default_instance() {
    return reinterpret_cast<const TypeTest*>(
               &_TypeTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TypeTest& a, TypeTest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TypeTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypeTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypeTest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TypeTest& from);
  void MergeFrom(const TypeTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.test_sample.proto.TypeTest";
  }
  protected:
  explicit TypeTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TypeTest_Message Message;

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 5,
    kMessageValueFieldNumber = 6,
    kDoubleValueFieldNumber = 2,
    kFloatValueFieldNumber = 1,
    kInt32ValueFieldNumber = 3,
    kBoolValueFieldNumber = 4,
  };
  // optional string string_value = 5;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional .dom_distiller.test_sample.proto.TypeTest.Message message_value = 6;
  bool has_message_value() const;
  private:
  bool _internal_has_message_value() const;
  public:
  void clear_message_value();
  const ::dom_distiller::test_sample::proto::TypeTest_Message& message_value() const;
  PROTOBUF_NODISCARD ::dom_distiller::test_sample::proto::TypeTest_Message* release_message_value();
  ::dom_distiller::test_sample::proto::TypeTest_Message* mutable_message_value();
  void set_allocated_message_value(::dom_distiller::test_sample::proto::TypeTest_Message* message_value);
  private:
  const ::dom_distiller::test_sample::proto::TypeTest_Message& _internal_message_value() const;
  ::dom_distiller::test_sample::proto::TypeTest_Message* _internal_mutable_message_value();
  public:
  void unsafe_arena_set_allocated_message_value(
      ::dom_distiller::test_sample::proto::TypeTest_Message* message_value);
  ::dom_distiller::test_sample::proto::TypeTest_Message* unsafe_arena_release_message_value();

  // optional double double_value = 2;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // optional float float_value = 1;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // optional int32 int32_value = 3;
  bool has_int32_value() const;
  private:
  bool _internal_has_int32_value() const;
  public:
  void clear_int32_value();
  int32_t int32_value() const;
  void set_int32_value(int32_t value);
  private:
  int32_t _internal_int32_value() const;
  void _internal_set_int32_value(int32_t value);
  public:

  // optional bool bool_value = 4;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dom_distiller.test_sample.proto.TypeTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::dom_distiller::test_sample::proto::TypeTest_Message* message_value_;
  double double_value_;
  float float_value_;
  int32_t int32_value_;
  bool bool_value_;
  friend struct ::TableStruct_test_5fsample_2eproto;
};
// -------------------------------------------------------------------

class Repeated_Message final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.test_sample.proto.Repeated.Message) */ {
 public:
  inline Repeated_Message() : Repeated_Message(nullptr) {}
  ~Repeated_Message() override;
  explicit PROTOBUF_CONSTEXPR Repeated_Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Repeated_Message(const Repeated_Message& from);
  Repeated_Message(Repeated_Message&& from) noexcept
    : Repeated_Message() {
    *this = ::std::move(from);
  }

  inline Repeated_Message& operator=(const Repeated_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Repeated_Message& operator=(Repeated_Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Repeated_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Repeated_Message* internal_default_instance() {
    return reinterpret_cast<const Repeated_Message*>(
               &_Repeated_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Repeated_Message& a, Repeated_Message& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Repeated_Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Repeated_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Repeated_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Repeated_Message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Repeated_Message& from);
  void MergeFrom(const Repeated_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Repeated_Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.test_sample.proto.Repeated.Message";
  }
  protected:
  explicit Repeated_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDummyFieldNumber = 1,
  };
  // repeated bool dummy = 1;
  int dummy_size() const;
  private:
  int _internal_dummy_size() const;
  public:
  void clear_dummy();
  private:
  bool _internal_dummy(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_dummy() const;
  void _internal_add_dummy(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_dummy();
  public:
  bool dummy(int index) const;
  void set_dummy(int index, bool value);
  void add_dummy(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      dummy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_dummy();

  // @@protoc_insertion_point(class_scope:dom_distiller.test_sample.proto.Repeated.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > dummy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fsample_2eproto;
};
// -------------------------------------------------------------------

class Repeated final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.test_sample.proto.Repeated) */ {
 public:
  inline Repeated() : Repeated(nullptr) {}
  ~Repeated() override;
  explicit PROTOBUF_CONSTEXPR Repeated(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Repeated(const Repeated& from);
  Repeated(Repeated&& from) noexcept
    : Repeated() {
    *this = ::std::move(from);
  }

  inline Repeated& operator=(const Repeated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Repeated& operator=(Repeated&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Repeated& default_instance() {
    return *internal_default_instance();
  }
  static inline const Repeated* internal_default_instance() {
    return reinterpret_cast<const Repeated*>(
               &_Repeated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Repeated& a, Repeated& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Repeated* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Repeated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Repeated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Repeated>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Repeated& from);
  void MergeFrom(const Repeated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Repeated* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.test_sample.proto.Repeated";
  }
  protected:
  explicit Repeated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Repeated_Message Message;

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValueFieldNumber = 1,
    kDoubleValueFieldNumber = 2,
    kInt32ValueFieldNumber = 3,
    kBoolValueFieldNumber = 4,
    kStringValueFieldNumber = 5,
    kMessageValueFieldNumber = 6,
  };
  // repeated float float_value = 1;
  int float_value_size() const;
  private:
  int _internal_float_value_size() const;
  public:
  void clear_float_value();
  private:
  float _internal_float_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_value() const;
  void _internal_add_float_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_value();
  public:
  float float_value(int index) const;
  void set_float_value(int index, float value);
  void add_float_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_value();

  // repeated double double_value = 2;
  int double_value_size() const;
  private:
  int _internal_double_value_size() const;
  public:
  void clear_double_value();
  private:
  double _internal_double_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_value() const;
  void _internal_add_double_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_value();
  public:
  double double_value(int index) const;
  void set_double_value(int index, double value);
  void add_double_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_value();

  // repeated int32 int32_value = 3;
  int int32_value_size() const;
  private:
  int _internal_int32_value_size() const;
  public:
  void clear_int32_value();
  private:
  int32_t _internal_int32_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_int32_value() const;
  void _internal_add_int32_value(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_int32_value();
  public:
  int32_t int32_value(int index) const;
  void set_int32_value(int index, int32_t value);
  void add_int32_value(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      int32_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_int32_value();

  // repeated bool bool_value = 4;
  int bool_value_size() const;
  private:
  int _internal_bool_value_size() const;
  public:
  void clear_bool_value();
  private:
  bool _internal_bool_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bool_value() const;
  void _internal_add_bool_value(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bool_value();
  public:
  bool bool_value(int index) const;
  void set_bool_value(int index, bool value);
  void add_bool_value(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_value();

  // repeated string string_value = 5;
  int string_value_size() const;
  private:
  int _internal_string_value_size() const;
  public:
  void clear_string_value();
  const std::string& string_value(int index) const;
  std::string* mutable_string_value(int index);
  void set_string_value(int index, const std::string& value);
  void set_string_value(int index, std::string&& value);
  void set_string_value(int index, const char* value);
  void set_string_value(int index, const char* value, size_t size);
  std::string* add_string_value();
  void add_string_value(const std::string& value);
  void add_string_value(std::string&& value);
  void add_string_value(const char* value);
  void add_string_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_value();
  private:
  const std::string& _internal_string_value(int index) const;
  std::string* _internal_add_string_value();
  public:

  // repeated .dom_distiller.test_sample.proto.Repeated.Message message_value = 6;
  int message_value_size() const;
  private:
  int _internal_message_value_size() const;
  public:
  void clear_message_value();
  ::dom_distiller::test_sample::proto::Repeated_Message* mutable_message_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message >*
      mutable_message_value();
  private:
  const ::dom_distiller::test_sample::proto::Repeated_Message& _internal_message_value(int index) const;
  ::dom_distiller::test_sample::proto::Repeated_Message* _internal_add_message_value();
  public:
  const ::dom_distiller::test_sample::proto::Repeated_Message& message_value(int index) const;
  ::dom_distiller::test_sample::proto::Repeated_Message* add_message_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message >&
      message_value() const;

  // @@protoc_insertion_point(class_scope:dom_distiller.test_sample.proto.Repeated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > int32_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message > message_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fsample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TypeTest_Message

// optional bool dummy = 1;
inline bool TypeTest_Message::_internal_has_dummy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TypeTest_Message::has_dummy() const {
  return _internal_has_dummy();
}
inline void TypeTest_Message::clear_dummy() {
  dummy_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TypeTest_Message::_internal_dummy() const {
  return dummy_;
}
inline bool TypeTest_Message::dummy() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.Message.dummy)
  return _internal_dummy();
}
inline void TypeTest_Message::_internal_set_dummy(bool value) {
  _has_bits_[0] |= 0x00000001u;
  dummy_ = value;
}
inline void TypeTest_Message::set_dummy(bool value) {
  _internal_set_dummy(value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.Message.dummy)
}

// -------------------------------------------------------------------

// TypeTest

// optional float float_value = 1;
inline bool TypeTest::_internal_has_float_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TypeTest::has_float_value() const {
  return _internal_has_float_value();
}
inline void TypeTest::clear_float_value() {
  float_value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TypeTest::_internal_float_value() const {
  return float_value_;
}
inline float TypeTest::float_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.float_value)
  return _internal_float_value();
}
inline void TypeTest::_internal_set_float_value(float value) {
  _has_bits_[0] |= 0x00000008u;
  float_value_ = value;
}
inline void TypeTest::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.float_value)
}

// optional double double_value = 2;
inline bool TypeTest::_internal_has_double_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TypeTest::has_double_value() const {
  return _internal_has_double_value();
}
inline void TypeTest::clear_double_value() {
  double_value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TypeTest::_internal_double_value() const {
  return double_value_;
}
inline double TypeTest::double_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.double_value)
  return _internal_double_value();
}
inline void TypeTest::_internal_set_double_value(double value) {
  _has_bits_[0] |= 0x00000004u;
  double_value_ = value;
}
inline void TypeTest::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.double_value)
}

// optional int32 int32_value = 3;
inline bool TypeTest::_internal_has_int32_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TypeTest::has_int32_value() const {
  return _internal_has_int32_value();
}
inline void TypeTest::clear_int32_value() {
  int32_value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t TypeTest::_internal_int32_value() const {
  return int32_value_;
}
inline int32_t TypeTest::int32_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.int32_value)
  return _internal_int32_value();
}
inline void TypeTest::_internal_set_int32_value(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  int32_value_ = value;
}
inline void TypeTest::set_int32_value(int32_t value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.int32_value)
}

// optional bool bool_value = 4;
inline bool TypeTest::_internal_has_bool_value() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TypeTest::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void TypeTest::clear_bool_value() {
  bool_value_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TypeTest::_internal_bool_value() const {
  return bool_value_;
}
inline bool TypeTest::bool_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.bool_value)
  return _internal_bool_value();
}
inline void TypeTest::_internal_set_bool_value(bool value) {
  _has_bits_[0] |= 0x00000020u;
  bool_value_ = value;
}
inline void TypeTest::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.bool_value)
}

// optional string string_value = 5;
inline bool TypeTest::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TypeTest::has_string_value() const {
  return _internal_has_string_value();
}
inline void TypeTest::clear_string_value() {
  string_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TypeTest::string_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TypeTest::set_string_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.string_value)
}
inline std::string* TypeTest::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.TypeTest.string_value)
  return _s;
}
inline const std::string& TypeTest::_internal_string_value() const {
  return string_value_.Get();
}
inline void TypeTest::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* TypeTest::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000001u;
  return string_value_.Mutable(GetArenaForAllocation());
}
inline std::string* TypeTest::release_string_value() {
  // @@protoc_insertion_point(field_release:dom_distiller.test_sample.proto.TypeTest.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = string_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_value_.IsDefault()) {
    string_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TypeTest::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_value_.SetAllocated(string_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_value_.IsDefault()) {
    string_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.test_sample.proto.TypeTest.string_value)
}

// optional .dom_distiller.test_sample.proto.TypeTest.Message message_value = 6;
inline bool TypeTest::_internal_has_message_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || message_value_ != nullptr);
  return value;
}
inline bool TypeTest::has_message_value() const {
  return _internal_has_message_value();
}
inline void TypeTest::clear_message_value() {
  if (message_value_ != nullptr) message_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::dom_distiller::test_sample::proto::TypeTest_Message& TypeTest::_internal_message_value() const {
  const ::dom_distiller::test_sample::proto::TypeTest_Message* p = message_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::dom_distiller::test_sample::proto::TypeTest_Message&>(
      ::dom_distiller::test_sample::proto::_TypeTest_Message_default_instance_);
}
inline const ::dom_distiller::test_sample::proto::TypeTest_Message& TypeTest::message_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.message_value)
  return _internal_message_value();
}
inline void TypeTest::unsafe_arena_set_allocated_message_value(
    ::dom_distiller::test_sample::proto::TypeTest_Message* message_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_value_);
  }
  message_value_ = message_value;
  if (message_value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dom_distiller.test_sample.proto.TypeTest.message_value)
}
inline ::dom_distiller::test_sample::proto::TypeTest_Message* TypeTest::release_message_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::dom_distiller::test_sample::proto::TypeTest_Message* temp = message_value_;
  message_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dom_distiller::test_sample::proto::TypeTest_Message* TypeTest::unsafe_arena_release_message_value() {
  // @@protoc_insertion_point(field_release:dom_distiller.test_sample.proto.TypeTest.message_value)
  _has_bits_[0] &= ~0x00000002u;
  ::dom_distiller::test_sample::proto::TypeTest_Message* temp = message_value_;
  message_value_ = nullptr;
  return temp;
}
inline ::dom_distiller::test_sample::proto::TypeTest_Message* TypeTest::_internal_mutable_message_value() {
  _has_bits_[0] |= 0x00000002u;
  if (message_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::dom_distiller::test_sample::proto::TypeTest_Message>(GetArenaForAllocation());
    message_value_ = p;
  }
  return message_value_;
}
inline ::dom_distiller::test_sample::proto::TypeTest_Message* TypeTest::mutable_message_value() {
  ::dom_distiller::test_sample::proto::TypeTest_Message* _msg = _internal_mutable_message_value();
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.TypeTest.message_value)
  return _msg;
}
inline void TypeTest::set_allocated_message_value(::dom_distiller::test_sample::proto::TypeTest_Message* message_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_value_;
  }
  if (message_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message_value);
    if (message_arena != submessage_arena) {
      message_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_value_ = message_value;
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.test_sample.proto.TypeTest.message_value)
}

// -------------------------------------------------------------------

// Repeated_Message

// repeated bool dummy = 1;
inline int Repeated_Message::_internal_dummy_size() const {
  return dummy_.size();
}
inline int Repeated_Message::dummy_size() const {
  return _internal_dummy_size();
}
inline void Repeated_Message::clear_dummy() {
  dummy_.Clear();
}
inline bool Repeated_Message::_internal_dummy(int index) const {
  return dummy_.Get(index);
}
inline bool Repeated_Message::dummy(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.Message.dummy)
  return _internal_dummy(index);
}
inline void Repeated_Message::set_dummy(int index, bool value) {
  dummy_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.Message.dummy)
}
inline void Repeated_Message::_internal_add_dummy(bool value) {
  dummy_.Add(value);
}
inline void Repeated_Message::add_dummy(bool value) {
  _internal_add_dummy(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.Message.dummy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Repeated_Message::_internal_dummy() const {
  return dummy_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Repeated_Message::dummy() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.Message.dummy)
  return _internal_dummy();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Repeated_Message::_internal_mutable_dummy() {
  return &dummy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Repeated_Message::mutable_dummy() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.Message.dummy)
  return _internal_mutable_dummy();
}

// -------------------------------------------------------------------

// Repeated

// repeated float float_value = 1;
inline int Repeated::_internal_float_value_size() const {
  return float_value_.size();
}
inline int Repeated::float_value_size() const {
  return _internal_float_value_size();
}
inline void Repeated::clear_float_value() {
  float_value_.Clear();
}
inline float Repeated::_internal_float_value(int index) const {
  return float_value_.Get(index);
}
inline float Repeated::float_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.float_value)
  return _internal_float_value(index);
}
inline void Repeated::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.float_value)
}
inline void Repeated::_internal_add_float_value(float value) {
  float_value_.Add(value);
}
inline void Repeated::add_float_value(float value) {
  _internal_add_float_value(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.float_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Repeated::_internal_float_value() const {
  return float_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Repeated::float_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.float_value)
  return _internal_float_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Repeated::_internal_mutable_float_value() {
  return &float_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Repeated::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.float_value)
  return _internal_mutable_float_value();
}

// repeated double double_value = 2;
inline int Repeated::_internal_double_value_size() const {
  return double_value_.size();
}
inline int Repeated::double_value_size() const {
  return _internal_double_value_size();
}
inline void Repeated::clear_double_value() {
  double_value_.Clear();
}
inline double Repeated::_internal_double_value(int index) const {
  return double_value_.Get(index);
}
inline double Repeated::double_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.double_value)
  return _internal_double_value(index);
}
inline void Repeated::set_double_value(int index, double value) {
  double_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.double_value)
}
inline void Repeated::_internal_add_double_value(double value) {
  double_value_.Add(value);
}
inline void Repeated::add_double_value(double value) {
  _internal_add_double_value(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.double_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Repeated::_internal_double_value() const {
  return double_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Repeated::double_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.double_value)
  return _internal_double_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Repeated::_internal_mutable_double_value() {
  return &double_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Repeated::mutable_double_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.double_value)
  return _internal_mutable_double_value();
}

// repeated int32 int32_value = 3;
inline int Repeated::_internal_int32_value_size() const {
  return int32_value_.size();
}
inline int Repeated::int32_value_size() const {
  return _internal_int32_value_size();
}
inline void Repeated::clear_int32_value() {
  int32_value_.Clear();
}
inline int32_t Repeated::_internal_int32_value(int index) const {
  return int32_value_.Get(index);
}
inline int32_t Repeated::int32_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.int32_value)
  return _internal_int32_value(index);
}
inline void Repeated::set_int32_value(int index, int32_t value) {
  int32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.int32_value)
}
inline void Repeated::_internal_add_int32_value(int32_t value) {
  int32_value_.Add(value);
}
inline void Repeated::add_int32_value(int32_t value) {
  _internal_add_int32_value(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.int32_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Repeated::_internal_int32_value() const {
  return int32_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Repeated::int32_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.int32_value)
  return _internal_int32_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Repeated::_internal_mutable_int32_value() {
  return &int32_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Repeated::mutable_int32_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.int32_value)
  return _internal_mutable_int32_value();
}

// repeated bool bool_value = 4;
inline int Repeated::_internal_bool_value_size() const {
  return bool_value_.size();
}
inline int Repeated::bool_value_size() const {
  return _internal_bool_value_size();
}
inline void Repeated::clear_bool_value() {
  bool_value_.Clear();
}
inline bool Repeated::_internal_bool_value(int index) const {
  return bool_value_.Get(index);
}
inline bool Repeated::bool_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.bool_value)
  return _internal_bool_value(index);
}
inline void Repeated::set_bool_value(int index, bool value) {
  bool_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.bool_value)
}
inline void Repeated::_internal_add_bool_value(bool value) {
  bool_value_.Add(value);
}
inline void Repeated::add_bool_value(bool value) {
  _internal_add_bool_value(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.bool_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Repeated::_internal_bool_value() const {
  return bool_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Repeated::bool_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.bool_value)
  return _internal_bool_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Repeated::_internal_mutable_bool_value() {
  return &bool_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Repeated::mutable_bool_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.bool_value)
  return _internal_mutable_bool_value();
}

// repeated string string_value = 5;
inline int Repeated::_internal_string_value_size() const {
  return string_value_.size();
}
inline int Repeated::string_value_size() const {
  return _internal_string_value_size();
}
inline void Repeated::clear_string_value() {
  string_value_.Clear();
}
inline std::string* Repeated::add_string_value() {
  std::string* _s = _internal_add_string_value();
  // @@protoc_insertion_point(field_add_mutable:dom_distiller.test_sample.proto.Repeated.string_value)
  return _s;
}
inline const std::string& Repeated::_internal_string_value(int index) const {
  return string_value_.Get(index);
}
inline const std::string& Repeated::string_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.string_value)
  return _internal_string_value(index);
}
inline std::string* Repeated::mutable_string_value(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.Repeated.string_value)
  return string_value_.Mutable(index);
}
inline void Repeated::set_string_value(int index, const std::string& value) {
  string_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline void Repeated::set_string_value(int index, std::string&& value) {
  string_value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline void Repeated::set_string_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline void Repeated::set_string_value(int index, const char* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline std::string* Repeated::_internal_add_string_value() {
  return string_value_.Add();
}
inline void Repeated::add_string_value(const std::string& value) {
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline void Repeated::add_string_value(std::string&& value) {
  string_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline void Repeated::add_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline void Repeated::add_string_value(const char* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Repeated::string_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.string_value)
  return string_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Repeated::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.string_value)
  return &string_value_;
}

// repeated .dom_distiller.test_sample.proto.Repeated.Message message_value = 6;
inline int Repeated::_internal_message_value_size() const {
  return message_value_.size();
}
inline int Repeated::message_value_size() const {
  return _internal_message_value_size();
}
inline void Repeated::clear_message_value() {
  message_value_.Clear();
}
inline ::dom_distiller::test_sample::proto::Repeated_Message* Repeated::mutable_message_value(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.Repeated.message_value)
  return message_value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message >*
Repeated::mutable_message_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.message_value)
  return &message_value_;
}
inline const ::dom_distiller::test_sample::proto::Repeated_Message& Repeated::_internal_message_value(int index) const {
  return message_value_.Get(index);
}
inline const ::dom_distiller::test_sample::proto::Repeated_Message& Repeated::message_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.message_value)
  return _internal_message_value(index);
}
inline ::dom_distiller::test_sample::proto::Repeated_Message* Repeated::_internal_add_message_value() {
  return message_value_.Add();
}
inline ::dom_distiller::test_sample::proto::Repeated_Message* Repeated::add_message_value() {
  ::dom_distiller::test_sample::proto::Repeated_Message* _add = _internal_add_message_value();
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.message_value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message >&
Repeated::message_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.message_value)
  return message_value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace test_sample
}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5fsample_2eproto
