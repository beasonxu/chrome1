import*as e from"../../core/common/common.js";import*as t from"../../core/i18n/i18n.js";import*as o from"../../core/sdk/sdk.js";import*as r from"../../models/workspace/workspace.js";import*as n from"./forward/forward.js";import*as a from"../../ui/legacy/legacy.js";const i={showNetwork:"Show Network",network:"Network",showNetworkRequestBlocking:"Show Network request blocking",networkRequestBlocking:"Network request blocking",showNetworkConditions:"Show Network conditions",networkConditions:"Network conditions",diskCache:"disk cache",networkThrottling:"network throttling",showSearch:"Show Search",search:"Search",recordNetworkLog:"Record network log",stopRecordingNetworkLog:"Stop recording network log",hideRequestDetails:"Hide request details",colorcodeResourceTypes:"Color-code resource types",colorCode:"color code",resourceType:"resource type",colorCodeByResourceType:"Color code by resource type",useDefaultColors:"Use default colors",groupNetworkLogByFrame:"Group network log by frame",netWork:"network",frame:"frame",group:"group",groupNetworkLogItemsByFrame:"Group network log items by frame",dontGroupNetworkLogItemsByFrame:"Don't group network log items by frame",enableUNCLoading:"Allow `DevTools` to load resources, such as source maps, from Windows Shares via `UNC` paths. Disabled by default for security reasons."},s=t.i18n.registerUIStrings("panels/network/network-meta.ts",i),l=t.i18n.getLazilyComputedLocalizedString.bind(void 0,s);let c;async function g(){return c||(c=await import("./network.js")),c}function w(e){return void 0===c?[]:e(c)}a.ViewManager.registerViewExtension({location:"panel",id:"network",commandPrompt:l(i.showNetwork),title:l(i.network),order:40,loadView:async()=>(await g()).NetworkPanel.NetworkPanel.instance()}),a.ViewManager.registerViewExtension({location:"drawer-view",id:"network.blocked-urls",commandPrompt:l(i.showNetworkRequestBlocking),title:l(i.networkRequestBlocking),persistence:"closeable",order:60,loadView:async()=>(await g()).BlockedURLsPane.BlockedURLsPane.instance()}),a.ViewManager.registerViewExtension({location:"drawer-view",id:"network.config",commandPrompt:l(i.showNetworkConditions),title:l(i.networkConditions),persistence:"closeable",order:40,tags:[l(i.diskCache),l(i.networkThrottling),t.i18n.lockedLazyString("useragent"),t.i18n.lockedLazyString("user agent"),t.i18n.lockedLazyString("user-agent")],loadView:async()=>(await g()).NetworkConfigView.NetworkConfigView.instance()}),a.ViewManager.registerViewExtension({location:"network-sidebar",id:"network.search-network-tab",commandPrompt:l(i.showSearch),title:l(i.search),persistence:"permanent",loadView:async()=>(await g()).NetworkPanel.SearchNetworkView.instance()}),a.ActionRegistration.registerActionExtension({actionId:"network.toggle-recording",category:a.ActionRegistration.ActionCategory.NETWORK,iconClass:"largeicon-start-recording",toggleable:!0,toggledIconClass:"largeicon-stop-recording",toggleWithRedColor:!0,contextTypes:()=>w((e=>[e.NetworkPanel.NetworkPanel])),loadActionDelegate:async()=>(await g()).NetworkPanel.ActionDelegate.instance(),options:[{value:!0,title:l(i.recordNetworkLog)},{value:!1,title:l(i.stopRecordingNetworkLog)}],bindings:[{shortcut:"Ctrl+E",platform:"windows,linux"},{shortcut:"Meta+E",platform:"mac"}]}),a.ActionRegistration.registerActionExtension({actionId:"network.hide-request-details",category:a.ActionRegistration.ActionCategory.NETWORK,title:l(i.hideRequestDetails),contextTypes:()=>w((e=>[e.NetworkPanel.NetworkPanel])),loadActionDelegate:async()=>(await g()).NetworkPanel.ActionDelegate.instance(),bindings:[{shortcut:"Esc"}]}),a.ActionRegistration.registerActionExtension({actionId:"network.search",category:a.ActionRegistration.ActionCategory.NETWORK,title:l(i.search),contextTypes:()=>w((e=>[e.NetworkPanel.NetworkPanel])),loadActionDelegate:async()=>(await g()).NetworkPanel.ActionDelegate.instance(),bindings:[{platform:"mac",shortcut:"Meta+F",keybindSets:["devToolsDefault","vsCode"]},{platform:"windows,linux",shortcut:"Ctrl+F",keybindSets:["devToolsDefault","vsCode"]}]}),e.Settings.registerSettingExtension({category:e.Settings.SettingCategory.NETWORK,storageType:e.Settings.SettingStorageType.Synced,title:l(i.colorcodeResourceTypes),settingName:"networkColorCodeResourceTypes",settingType:e.Settings.SettingType.BOOLEAN,defaultValue:!1,tags:[l(i.colorCode),l(i.resourceType)],options:[{value:!0,title:l(i.colorCodeByResourceType)},{value:!1,title:l(i.useDefaultColors)}]}),e.Settings.registerSettingExtension({category:e.Settings.SettingCategory.NETWORK,storageType:e.Settings.SettingStorageType.Synced,title:l(i.groupNetworkLogByFrame),settingName:"network.group-by-frame",settingType:e.Settings.SettingType.BOOLEAN,defaultValue:!1,tags:[l(i.netWork),l(i.frame),l(i.group)],options:[{value:!0,title:l(i.groupNetworkLogItemsByFrame)},{value:!1,title:l(i.dontGroupNetworkLogItemsByFrame)}]}),e.Settings.registerSettingExtension({category:e.Settings.SettingCategory.SOURCES,storageType:e.Settings.SettingStorageType.Synced,title:l(i.enableUNCLoading),settingName:"network.enable-unc-loading",settingType:e.Settings.SettingType.BOOLEAN,defaultValue:!1}),a.ViewManager.registerLocationResolver({name:"network-sidebar",category:a.ViewManager.ViewLocationCategoryValues.NETWORK,loadResolver:async()=>(await g()).NetworkPanel.NetworkPanel.instance()}),a.ContextMenu.registerProvider({contextTypes:()=>[o.NetworkRequest.NetworkRequest,o.Resource.Resource,r.UISourceCode.UISourceCode],loadProvider:async()=>(await g()).NetworkPanel.ContextMenuProvider.instance(),experiment:void 0}),e.Revealer.registerRevealer({contextTypes:()=>[o.NetworkRequest.NetworkRequest],destination:e.Revealer.RevealerDestination.NETWORK_PANEL,loadRevealer:async()=>(await g()).NetworkPanel.RequestRevealer.instance()}),e.Revealer.registerRevealer({contextTypes:()=>[n.UIRequestLocation.UIRequestLocation],loadRevealer:async()=>(await g()).NetworkPanel.RequestLocationRevealer.instance(),destination:void 0}),e.Revealer.registerRevealer({contextTypes:()=>[n.NetworkRequestId.NetworkRequestId],destination:e.Revealer.RevealerDestination.NETWORK_PANEL,loadRevealer:async()=>(await g()).NetworkPanel.RequestIdRevealer.instance()}),e.Revealer.registerRevealer({contextTypes:()=>[n.UIFilter.UIRequestFilter],destination:e.Revealer.RevealerDestination.NETWORK_PANEL,loadRevealer:async()=>(await g()).NetworkPanel.NetworkLogWithFilterRevealer.instance()});
