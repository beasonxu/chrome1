{"version":3,"file":"sources-list_test.js","sourceRoot":"","sources":["../../../../../../../../../third_party/devtools-frontend/src/test/e2e/sources/sources-list_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAE5B,sDAAwE;AACxE,0EAA8D;AAC9D,wEAAqE;AACrE,sEAIuC;AAUvC,IAAA,8BAAQ,EAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;IACrC,IAAA,wBAAE,EAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,EAAC,MAAM,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QAEtC,MAAM,IAAA,2CAAsB,EAAC,iCAAiC,CAAC,CAAC;QAEhE,gFAAgF;QAChF,MAAM,iBAAiB,GAAG,MAAM,IAAA,4CAAuB,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QAE3F,aAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE;YAClC,oDAAoD;YACpD,8CAA8C;SAC/C,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,EAAC,MAAM,EAAE,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QAEhD,MAAM,IAAA,2CAAsB,EAAC,0BAA0B,CAAC,CAAC;QAEzD,MAAM,iBAAiB,GAAG,MAAM,IAAA,4CAAuB,EAAC,CAAC,EAAE,KAAK,IAAI,EAAE;YACpE,4EAA4E;YAC5E,MAAM,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAE/B,uEAAuE;YACvE,qCAAqC;YACrC,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;YAC5B,MAAM,QAAQ,CAAC,YAAY,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,aAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE;YAClC,yCAAyC;SAC1C,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;QACpF,MAAM,EAAC,MAAM,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QACtC,MAAM,IAAA,wBAAY,EAAC,wBAAwB,CAAC,CAAC;QAC7C,MAAM,IAAA,2CAAqB,GAAE,CAAC;QAC9B,MAAM,iBAAiB,GAAG,MAAM,IAAA,4CAAuB,EAAC,CAAC,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,MAAM,CAAC,MAAM,CAAC,EAAC,SAAS,EAAE,cAAc,EAAC,CAAC,CAAC;YACjD,MAAM,IAAA,qCAAgB,GAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,aAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE;YAClC,4CAA4C;SAC7C,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {getBrowserAndPages, goToResource} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {navigateToElementsTab} from '../helpers/elements-helpers.js';\nimport {\n  captureAddedSourceFiles,\n  openFileInSourcesPanel,\n  openSourcesPanel,\n} from '../helpers/sources-helpers.js';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface Window {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    __sourceFilesAddedEvents: string[];\n  }\n}\n\ndescribe('The Sources Tab', async () => {\n  it('can show JavaScript files after dynamic loading', async () => {\n    const {target} = getBrowserAndPages();\n\n    await openFileInSourcesPanel('dynamic-loading-javascript.html');\n\n    // Load the JavaScript files by executing the function in `dynamic-loading.html`\n    const capturedFileNames = await captureAddedSourceFiles(2, () => target.evaluate('go();'));\n\n    assert.deepEqual(capturedFileNames, [\n      '/test/e2e/resources/sources/minified-sourcecode.js',\n      '/test/e2e/resources/sources/evalSourceURL.js',\n    ]);\n  });\n\n  it('can show CSS files after dynamic loading', async () => {\n    const {target, frontend} = getBrowserAndPages();\n\n    await openFileInSourcesPanel('dynamic-loading-css.html');\n\n    const capturedFileNames = await captureAddedSourceFiles(1, async () => {\n      // Load the CSS file by executing the function in `dynamic-loading-css.html`\n      await target.evaluate('go();');\n\n      // We must focus the target page, as Chrome does not actually fetch the\n      // css file if the tab is not focused\n      await target.bringToFront();\n      await frontend.bringToFront();\n    });\n\n    assert.deepEqual(capturedFileNames, [\n      '/test/e2e/resources/sources/dynamic.css',\n    ]);\n  });\n\n  it('populates sources even if it the Sources Tab was not open at refresh', async () => {\n    const {target} = getBrowserAndPages();\n    await goToResource('pages/hello-world.html');\n    await navigateToElementsTab();\n    const capturedFileNames = await captureAddedSourceFiles(1, async () => {\n      await target.reload({waitUntil: 'networkidle0'});\n      await openSourcesPanel();\n    });\n\n    assert.deepEqual(capturedFileNames, [\n      '/test/e2e/resources/pages/hello-world.html',\n    ]);\n  });\n});\n"]}