{"version":3,"file":"header-overrides_test.js","sourceRoot":"","sources":["../../../../../../../../../third_party/devtools-frontend/src/test/e2e/sources/header-overrides_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {\n  $$,\n  click,\n  enableExperiment,\n  goToResource,\n  pressKey,\n  typeText,\n  waitFor,\n  waitForFunction,\n} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {navigateToNetworkTab, selectRequestByName, waitForSomeRequestsToAppear} from '../helpers/network-helpers.js';\nimport {clickOnContextMenu, openSourcesPanel} from '../helpers/sources-helpers.js';\n\nconst MORE_TABS_SELECTOR = '[aria-label=\"More tabs\"]';\nconst OVERRIDES_TAB_SELECTOR = '[aria-label=\"Overrides\"]';\nconst ENABLE_OVERRIDES_SELECTOR = '[aria-label=\"Select folder for overrides\"]';\nconst CLEAR_CONFIGURATION_SELECTOR = '[aria-label=\"Clear configuration\"]';\nconst OVERRIDES_FILESYSTEM_SELECTOR = '[aria-label=\"overrides, fs\"]';\nconst FILE_TREE_NEW_FILE_SELECTOR = '[aria-label=\"NewFile, file\"] .tree-element-title';\nconst NETWORK_VIEW_SELECTOR = '.network-item-view';\nconst HEADERS_TAB_SELECTOR = '[aria-label=Headers][role=\"tab\"]';\nconst ACTIVE_HEADERS_TAB_SELECTOR = '[aria-label=Headers][role=tab][aria-selected=true]';\nconst HEADERS_VIEW_SELECTOR = '.request-headers-view';\nconst HEADERS_OUTLINE_SELECTOR = '[role=treeitem]:not(.hidden)';\n\nasync function enableLocalOverrides() {\n  await click(MORE_TABS_SELECTOR);\n  await click(OVERRIDES_TAB_SELECTOR);\n  await click(ENABLE_OVERRIDES_SELECTOR);\n  await waitFor(CLEAR_CONFIGURATION_SELECTOR);\n}\n\nasync function createHeaderOverride() {\n  await clickOnContextMenu(OVERRIDES_FILESYSTEM_SELECTOR, 'New file');\n  await waitFor('.being-edited');\n  await typeText('.headers\\n');\n  await click('.add-block');\n  await waitFor('.editable.apply-to');\n  await typeText('*.html\\n');\n  await typeText('aaa\\n');\n  await typeText('bbb');\n  const title = await waitFor(FILE_TREE_NEW_FILE_SELECTOR);\n  let labelText = await title?.evaluate(el => el.textContent);\n  assert.strictEqual(labelText, '*.headers');\n  await pressKey('s', {control: true});\n  await waitForFunction(async () => {\n    labelText = await title?.evaluate(el => el.textContent);\n    return labelText === '.headers';\n  });\n}\n\nasync function openHeadersTab() {\n  const networkView = await waitFor(NETWORK_VIEW_SELECTOR);\n  const headersTabHeader = await waitFor(HEADERS_TAB_SELECTOR, networkView);\n  await click(headersTabHeader);\n  await waitFor(ACTIVE_HEADERS_TAB_SELECTOR, networkView);\n}\n\ndescribe('The Overrides Panel', async function() {\n  this.timeout(10000);\n\n  afterEach(async () => {\n    await openSourcesPanel();\n    await click('[aria-label=\"Clear configuration\"]');\n    await waitFor(ENABLE_OVERRIDES_SELECTOR);\n  });\n\n  it('can create header overrides', async () => {\n    await enableExperiment('headerOverrides');\n    await goToResource('empty.html');\n    await openSourcesPanel();\n    await enableLocalOverrides();\n    await createHeaderOverride();\n    await navigateToNetworkTab('hello.html');\n    await waitForSomeRequestsToAppear(1);\n    await selectRequestByName('hello.html');\n    await openHeadersTab();\n\n    const headersView = await waitFor(HEADERS_VIEW_SELECTOR);\n    const headersOutline = await $$(HEADERS_OUTLINE_SELECTOR, headersView);\n    const headersTextContents =\n        await Promise.all(headersOutline.map(line => line.evaluate(message => message.textContent || '')));\n    assert.isTrue(headersTextContents.includes('aaa: bbb'), `Cannot find overridden header in: ${headersTextContents}`);\n  });\n});\n"]}