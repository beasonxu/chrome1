{"version":3,"file":"inline-variable_test.js","sourceRoot":"","sources":["../../../../../../../../../third_party/devtools-frontend/src/test/e2e/sources/inline-variable_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAE5B,sDAA0E;AAC1E,0EAA8D;AAC9D,sEAA+G;AAE/G,KAAK,UAAU,+BAA+B;IAC5C,MAAM,MAAM,GAAG,MAAM,IAAA,mBAAO,EAAC,4BAA4B,CAAC,CAAC;IAC3D,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AACnH,CAAC;AAED,IAAA,8BAAQ,EAAC,aAAa,EAAE,KAAK;IAC3B,IAAA,wBAAE,EAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,EAAC,MAAM,EAAE,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QAEhD,MAAM,IAAA,gDAA2B,EAAC,oBAAoB,EAAE,sBAAsB,CAAC,CAAC;QAChF,MAAM,IAAA,yCAAoB,EAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAExC,MAAM,gBAAgB,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAExD,MAAM,IAAA,mBAAO,EAAC,+BAA+B,CAAC,CAAC;QAE/C,MAAM,QAAQ,GAAG,MAAM,+BAA+B,EAAE,CAAC;QACzD,aAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,4BAA4B,CAAC,CAAC;QAC9D,aAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,wBAAwB,CAAC,CAAC;QAE1D,MAAM,IAAA,iBAAK,EAAC,kCAAa,CAAC,CAAC;QAC3B,MAAM,gBAAgB,CAAC;IACzB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {click, getBrowserAndPages, waitFor} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {addBreakpointForLine, openSourceCodeEditorForFile, RESUME_BUTTON} from '../helpers/sources-helpers.js';\n\nasync function retrieveCodeMirrorEditorContent(): Promise<Array<string>> {\n  const editor = await waitFor('[aria-label=\"Code editor\"]');\n  return editor.evaluate(node => [...node.querySelectorAll('.cm-line')].map(node => node.textContent || '') || []);\n}\n\ndescribe('Sources Tab', async function() {\n  it('shows correct inline variable at definition', async () => {\n    const {target, frontend} = getBrowserAndPages();\n\n    await openSourceCodeEditorForFile('inline-variable.js', 'inline-variable.html');\n    await addBreakpointForLine(frontend, 3);\n\n    const scriptEvaluation = target.evaluate('simple(41);');\n\n    await waitFor('.cm-line > .cm-variableValues');\n\n    const contents = await retrieveCodeMirrorEditorContent();\n    assert.strictEqual(contents[0], 'function simple(a) {a = 41');\n    assert.strictEqual(contents[1], '  let x = a + 1;x = 42');\n\n    await click(RESUME_BUTTON);\n    await scriptEvaluation;\n  });\n});\n"]}