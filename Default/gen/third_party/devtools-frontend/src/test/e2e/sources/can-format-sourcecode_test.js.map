{"version":3,"file":"can-format-sourcecode_test.js","sourceRoot":"","sources":["../../../../../../../../../third_party/devtools-frontend/src/test/e2e/sources/can-format-sourcecode_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {$$, click, getBrowserAndPages, waitFor, waitForFunction} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {\n  addBreakpointForLine,\n  getSelectedSource,\n  openSourceCodeEditorForFile,\n  retrieveTopCallFrameScriptLocation,\n  SourceFileEvents,\n  waitForSourceFiles,\n} from '../helpers/sources-helpers.js';\n\nconst PRETTY_PRINT_BUTTON = '[aria-label=\"Pretty print minified-sourcecode.js\"]';\n\nasync function retrieveCodeMirrorEditorContent(): Promise<Array<string>> {\n  const editor = await waitFor('[aria-label=\"Code editor\"]');\n  return editor.evaluate(node => [...node.querySelectorAll('.cm-line')].map(node => node.textContent || '') || []);\n}\n\nasync function prettyPrintMinifiedFile() {\n  const source = await getSelectedSource();\n  await waitForSourceFiles(\n      SourceFileEvents.SourceFileLoaded, files => files.some(f => f.endsWith(`${source}:formatted`)), async () => {\n        const previousTextContent = await retrieveCodeMirrorEditorContent();\n\n        await waitFor(PRETTY_PRINT_BUTTON);\n        await click(PRETTY_PRINT_BUTTON);\n\n        // A separate editor is opened which shows the formatted file\n        await waitForFunction(async () => {\n          const currentTextContent = await retrieveCodeMirrorEditorContent();\n          return currentTextContent.join('\\n') !== previousTextContent.join('\\n');\n        });\n      });\n}\n\ndescribe('The Sources Tab', async function() {\n  // The tests in this suite are particularly slow, as they perform a lot of actions\n  if (this.timeout() > 0) {\n    this.timeout(10000);\n  }\n\n  it('can format a JavaScript file', async () => {\n    await openSourceCodeEditorForFile('minified-sourcecode.js', 'minified-sourcecode.html');\n    await prettyPrintMinifiedFile();\n\n    const expectedLines = [\n      '// Copyright 2020 The Chromium Authors. All rights reserved.',\n      '// Use of this source code is governed by a BSD-style license that can be',\n      '// found in the LICENSE file.',\n      '// clang-format off',\n      'const notFormatted = {',\n      '    something: \\'not-formatted\\'',\n      '};',\n      'console.log(\\'Test for correct line number\\');',\n      'function notFormattedFunction() {',\n      '    console.log(\\'second log\\');',\n      '    return {',\n      '        field: 2 + 4',\n      '    }',\n      '}',\n      ';notFormattedFunction();',\n      '',\n    ];\n\n    const updatedTextContent = await retrieveCodeMirrorEditorContent();\n    assert.strictEqual(updatedTextContent.join('\\n'), expectedLines.join('\\n'));\n  });\n\n  it('causes the correct line number to show up in the console panel', async () => {\n    await openSourceCodeEditorForFile('minified-sourcecode.js', 'minified-sourcecode.html');\n    await prettyPrintMinifiedFile();\n\n    await click('#tab-console');\n\n    await waitFor('.console-group-messages');\n    const messages = await waitForFunction(async () => {\n      const messages = await $$('.console-group-messages .source-code');\n      return messages.length === 2 ? messages : undefined;\n    });\n\n    const messageLinks =\n        await Promise.all(messages.map(messageHandle => (messageHandle.evaluate(message => {\n                                         const messageText = message.querySelector('.console-message-text');\n                                         const lineNumber = message.querySelector('.console-message-anchor');\n                                         if (!messageText) {\n                                           assert.fail('Could not find console message text element');\n                                         }\n                                         if (!lineNumber) {\n                                           assert.fail('Could not find console line number element');\n                                         }\n                                         return ({\n                                           message: messageText.textContent,\n                                           lineNumber: lineNumber.textContent,\n                                         });\n                                       }))));\n\n    assert.deepEqual(messageLinks, [\n      {\n        message: 'Test for correct line number',\n        lineNumber: 'minified-sourcecode.js:formatted:8 ',\n      },\n      {\n        message: 'second log',\n        lineNumber: 'minified-sourcecode.js:formatted:10 ',\n      },\n    ]);\n  });\n\n  it('can add breakpoint for formatted file', async () => {\n    const {target, frontend} = getBrowserAndPages();\n\n    await openSourceCodeEditorForFile('minified-sourcecode.js', 'minified-sourcecode.html');\n    await prettyPrintMinifiedFile();\n    await addBreakpointForLine(frontend, 10);\n\n    const scriptLocation = await retrieveTopCallFrameScriptLocation('notFormattedFunction();', target);\n    assert.deepEqual(scriptLocation, 'minified-sourceâ€¦s:formatted:10');\n  });\n\n  it('can add breakpoint for unformatted file', async () => {\n    const {target, frontend} = getBrowserAndPages();\n\n    await openSourceCodeEditorForFile('minified-sourcecode.js', 'minified-sourcecode.html');\n    await addBreakpointForLine(frontend, 6);\n\n    const scriptLocation = await retrieveTopCallFrameScriptLocation('notFormattedFunction();', target);\n    assert.deepEqual(scriptLocation, 'minified-sourcecode.js:6');\n  });\n\n  it('can add breakpoint on minified source and then break correctly on formatted source', async () => {\n    const {target, frontend} = getBrowserAndPages();\n\n    await openSourceCodeEditorForFile('minified-sourcecode.js', 'minified-sourcecode.html');\n    await addBreakpointForLine(frontend, 6);\n    await prettyPrintMinifiedFile();\n\n    const scriptLocation = await retrieveTopCallFrameScriptLocation('notFormattedFunction();', target);\n    assert.deepEqual(scriptLocation, 'minified-sourceâ€¦s:formatted:10');\n  });\n});\n"]}