{"version":3,"file":"QuickOpen_test.js","sourceRoot":"","sources":["../../../../../../../../../third_party/devtools-frontend/src/test/e2e/quick_open/QuickOpen_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {$$, click, enableExperiment, goToResource, step, waitFor} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {navigateToElementsTab} from '../helpers/elements-helpers.js';\nimport {getMenuItemAtPosition, getMenuItemTitleAtPosition, openFileQuickOpen} from '../helpers/quick_open-helpers.js';\nimport {setIgnoreListPattern, togglePreferenceInSettingsTab} from '../helpers/settings-helpers.js';\nimport {openSourcesPanel, SourceFileEvents, waitForSourceFiles} from '../helpers/sources-helpers.js';\n\nasync function openAFileWithQuickMenu() {\n  await step('navigate to elements tab', async () => {\n    await navigateToElementsTab();\n  });\n\n  await waitForSourceFiles(\n      SourceFileEvents.SourceFileLoaded, files => files.some(f => f.endsWith('hello-world.html')), async () => {\n        await step('open quick open menu and select the first option', async () => {\n          await goToResource('pages/hello-world.html');\n          await openFileQuickOpen();\n          const firstItem = await getMenuItemAtPosition(0);\n          await click(firstItem);\n        });\n        await step('check the sources panel is open with the selected file', async () => {\n          await waitFor('.navigator-file-tree-item');\n        });\n      });\n}\n\nasync function typeIntoQuickOpen(query: string, expectEmptyResults?: boolean) {\n  await openFileQuickOpen();\n  const prompt = await waitFor('[aria-label=\"Quick open prompt\"]');\n  await prompt.type(query);\n  if (expectEmptyResults) {\n    await waitFor('.filtered-list-widget :not(.hidden).not-found-text');\n  } else {\n    // Because each highlighted character is in its own div, we can count the highlighted\n    // characters in one item to see that the list reflects the full query.\n    const highlightSelector = new Array(query.length).fill('.highlight').join(' ~ ');\n    await waitFor('.filtered-list-widget-title ' + highlightSelector);\n  }\n}\n\nasync function readQuickOpenResults(): Promise<string[]> {\n  const items = await $$('.filtered-list-widget-title');\n  return await Promise.all(items.map(element => element.evaluate(el => el.textContent as string)));\n}\n\ndescribe('Quick Open menu', () => {\n  it('lists available files', async () => {\n    await goToResource('pages/hello-world.html');\n    await openFileQuickOpen();\n    const firstItemTitle = await getMenuItemTitleAtPosition(0);\n    assert.strictEqual(firstItemTitle, 'hello-world.html');\n  });\n\n  it('opens the sources panel when a file is selected', async () => {\n    await openAFileWithQuickMenu();\n    await togglePreferenceInSettingsTab('Focus Sources panel when triggering a breakpoint');\n    await openAFileWithQuickMenu();\n  });\n\n  it('sorts authored above deployed', async () => {\n    await goToResource('sources/multi-workers-sourcemap.html');\n    await openSourcesPanel();\n\n    await typeIntoQuickOpen('mult');\n    const list = await readQuickOpenResults();\n    assert.deepEqual(list, ['multi-workers.js', 'multi-workers.min.js', 'multi-workers-sourcemap.html']);\n  });\n\n  it('Does not list ignore-listed files', async () => {\n    await enableExperiment('justMyCode');\n    await setIgnoreListPattern('workers.js');\n    await goToResource('sources/multi-workers-sourcemap.html');\n    await openSourcesPanel();\n\n    await typeIntoQuickOpen('mult');\n    const list = await readQuickOpenResults();\n    assert.deepEqual(list, ['multi-workers.min.js', 'multi-workers-sourcemap.html']);\n  });\n});\n"]}