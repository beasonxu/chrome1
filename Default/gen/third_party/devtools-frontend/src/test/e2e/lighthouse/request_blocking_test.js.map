{"version":3,"file":"request_blocking_test.js","sourceRoot":"","sources":["../../../../../../../../../third_party/devtools-frontend/src/test/e2e/lighthouse/request_blocking_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAC5B,6BAA6B;AAE7B,sDAA0D;AAC1D,0EAA8D;AAC9D,4EAK0C;AAE1C,2FAA2F;AAC3F,uGAAuG;AAEvG,IAAA,8BAAQ,EAAC,kBAAkB,EAAE,KAAK;IAChC,gDAAgD;IAChD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAErB,uBAAuB;IACvB,iFAAiF;IACjF,0GAA0G;IAC1G,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QACxC,MAAM,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE;YAC3B,gCAAgC;YAChC,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,yBAAyB,CAAC;YAC1D,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACxC,cAAc,CAAC,kBAAkB,CAAC,CAAC,EAAC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAC,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,+BAA+B;IAC/B,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QACxC,MAAM,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE;YAC3B,gCAAgC;YAChC,MAAM,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC,yBAAyB,CAAC;YAChE,cAAc,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YACzC,cAAc,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,IAAA,+CAAuB,EAAC,uBAAuB,CAAC,CAAC;QAEvD,MAAM,IAAA,wCAAgB,EAAC,CAAC,aAAa,CAAC,CAAC,CAAC;QAExC,MAAM,IAAA,wCAAgB,GAAE,CAAC;QAEzB,MAAM,EAAC,GAAG,EAAC,GAAG,MAAM,IAAA,qCAAa,GAAE,CAAC;QAEpC,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;QAE9D,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,IAA6B,EAAE,EAAE;YACrE,OAAO;gBACL,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,KAAK,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;gBAC5D,UAAU,EAAE,IAAI,CAAC,UAAU;aAC5B,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,aAAM,CAAC,SAAS,CAAC,eAAe,EAAE;YAChC,EAAC,GAAG,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,EAAC;YACpC,EAAC,GAAG,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,EAAC,EAAG,4CAA4C;SAClF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\nimport * as path from 'path';\n\nimport {getBrowserAndPages} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {\n  clickStartButton,\n  navigateToLighthouseTab,\n  selectCategories,\n  waitForResult,\n} from '../helpers/lighthouse-helpers.js';\n\n// This test will fail (by default) in headful mode, as the target page never gets painted.\n// To resolve this when debugging, just make sure the target page is visible during the lighthouse run.\n\ndescribe('request blocking', async function() {\n  // The tests in this suite are particularly slow\n  this.timeout(60_000);\n\n  // Start blocking *.css\n  // Ideally this would be done with UI manipulation, but it'd be less reliable AND\n  // the designated tests in network-request-blocking-panel_test.ts are skipped by default due to flakiness.\n  beforeEach(async () => {\n    const {frontend} = getBrowserAndPages();\n    await frontend.evaluate(() => {\n      // @ts-ignore layout test global\n      const networkManager = self.SDK.multitargetNetworkManager;\n      networkManager.setBlockingEnabled(true);\n      networkManager.setBlockedPatterns([{enabled: true, url: '*.css'}]);\n    });\n  });\n\n  // Reset request blocking state\n  afterEach(async () => {\n    const {frontend} = getBrowserAndPages();\n    await frontend.evaluate(() => {\n      // @ts-ignore layout test global\n      const networkManager = globalThis.SDK.multitargetNetworkManager;\n      networkManager.setBlockingEnabled(false);\n      networkManager.setBlockedPatterns([]);\n    });\n  });\n\n  it('is respected during a lighthouse run', async () => {\n    await navigateToLighthouseTab('lighthouse/hello.html');\n\n    await selectCategories(['performance']);\n\n    await clickStartButton();\n\n    const {lhr} = await waitForResult();\n\n    const requests = lhr.audits['network-requests'].details.items;\n\n    const trimmedRequests = requests.map((item: Record<string, unknown>) => {\n      return {\n        url: typeof item.url === 'string' && path.basename(item.url),\n        statusCode: item.statusCode,\n      };\n    });\n    assert.deepEqual(trimmedRequests, [\n      {url: 'hello.html', statusCode: 200},\n      {url: 'basic.css', statusCode: -1},  // statuCode === -1 means the request failed\n    ]);\n  });\n});\n"]}