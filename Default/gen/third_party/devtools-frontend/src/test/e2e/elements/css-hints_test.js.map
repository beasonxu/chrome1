{"version":3,"file":"css-hints_test.js","sourceRoot":"","sources":["../../../../../../../../../third_party/devtools-frontend/src/test/e2e/elements/css-hints_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAE5B,sDAIgC;AAChC,0EAA8D;AAC9D,wEAOwC;AAExC,MAAM,kCAAkC,GAAG,KAAK,EAAE,IAAY,EAAE,EAAE;IAChE,MAAM,IAAA,wBAAY,EAAC,IAAI,CAAC,CAAC;IACzB,MAAM,IAAA,iDAA2B,GAAE,CAAC;IACpC,MAAM,IAAA,iEAA2C,EAAC,cAAc,CAAC,CAAC;AACpE,CAAC,CAAC;AAEF,IAAA,8BAAQ,EAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;IACnD,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,IAAA,4BAAgB,EAAC,mBAAmB,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,kCAAkC,CAAC,iCAAiC,CAAC,CAAC;QAC5E,MAAM,IAAA,sCAAgB,EAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,IAAA,+DAAyC,EAAC,SAAS,CAAC,CAAC;QAC3D,MAAM,IAAA,sCAAgB,EAAC,UAAU,CAAC,CAAC;QAEnC,MAAM,mBAAmB,GAAG,MAAM,IAAA,4CAAsB,GAAE,CAAC;QAC3D,aAAM,CAAC,SAAS,CAAC,mBAAmB,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;QAC3E,MAAM,kCAAkC,CAAC,+CAA+C,CAAC,CAAC;QAC1F,MAAM,IAAA,sCAAgB,EAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,IAAA,+DAAyC,EAAC,SAAS,CAAC,CAAC;QAC3D,MAAM,IAAA,sCAAgB,EAAC,UAAU,CAAC,CAAC;QAEnC,MAAM,mBAAmB,GAAG,MAAM,IAAA,4CAAsB,GAAE,CAAC;QAC3D,aAAM,CAAC,SAAS,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,kCAAkC,CAAC,iCAAiC,CAAC,CAAC;QAC5E,MAAM,IAAA,sCAAgB,EAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,IAAA,+DAAyC,EAAC,SAAS,CAAC,CAAC;QAC3D,MAAM,IAAA,sCAAgB,EAAC,UAAU,CAAC,CAAC;QAEnC,aAAM,CAAC,SAAS,CAAC,MAAM,IAAA,4CAAsB,GAAE,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;QAEpE,MAAM,IAAA,2CAAqB,EAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACrD,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QACxC,MAAM,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC;QACnD,MAAM,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEvC,aAAM,CAAC,SAAS,CAAC,MAAM,IAAA,4CAAsB,GAAE,EAAE,EAAE,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {\n  enableExperiment,\n  getBrowserAndPages,\n  goToResource,\n} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {\n  focusCSSPropertyValue,\n  getPropertiesWithHints,\n  waitForAndClickTreeElementWithPartialText,\n  waitForElementsStyleSection,\n  waitForPartialContentOfSelectedElementsNode,\n  waitForStyleRule,\n} from '../helpers/elements-helpers.js';\n\nconst goToResourceAndWaitForStyleSection = async (path: string) => {\n  await goToResource(path);\n  await waitForElementsStyleSection();\n  await waitForPartialContentOfSelectedElementsNode('<body>\\u200B');\n};\n\ndescribe('CSS hints in the Styles panel', async () => {\n  beforeEach(async () => {\n    await enableExperiment('cssAuthoringHints');\n  });\n\n  it('can detect inactive CSS', async () => {\n    await goToResourceAndWaitForStyleSection('elements/inactive-css-page.html');\n    await waitForStyleRule('body');\n    await waitForAndClickTreeElementWithPartialText('wrapper');\n    await waitForStyleRule('#wrapper');\n\n    const propertiesWithHints = await getPropertiesWithHints();\n    assert.deepEqual(propertiesWithHints, ['align-content']);\n  });\n\n  it('does not show authoring hint when property value is invalid', async () => {\n    await goToResourceAndWaitForStyleSection('elements/inactive-css-with-invalid-value.html');\n    await waitForStyleRule('body');\n    await waitForAndClickTreeElementWithPartialText('wrapper');\n    await waitForStyleRule('#wrapper');\n\n    const propertiesWithHints = await getPropertiesWithHints();\n    assert.deepEqual(propertiesWithHints, []);\n  });\n\n  it('updates the hint if the styles are edited', async () => {\n    await goToResourceAndWaitForStyleSection('elements/inactive-css-page.html');\n    await waitForStyleRule('body');\n    await waitForAndClickTreeElementWithPartialText('wrapper');\n    await waitForStyleRule('#wrapper');\n\n    assert.deepEqual(await getPropertiesWithHints(), ['align-content']);\n\n    await focusCSSPropertyValue('#wrapper', 'flex-wrap');\n    const {frontend} = getBrowserAndPages();\n    await frontend.keyboard.type('wrap', {delay: 100});\n    await frontend.keyboard.press('Enter');\n\n    assert.deepEqual(await getPropertiesWithHints(), []);\n  });\n});\n"]}