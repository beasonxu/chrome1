{"version":3,"file":"ProtocolMonitor_test.js","sourceRoot":"","sources":["../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/panels/protocol_monitor/ProtocolMonitor_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as ProtocolMonitor from '../../../../../front_end/panels/protocol_monitor/protocol_monitor.js';\n\ndescribe('ProtocolMonitor', () => {\n  describe('parseCommandInput', () => {\n    it('parses various JSON formats', async () => {\n      const input = {\n        command: 'Input.dispatchMouseEvent',\n        parameters: {parameter1: 'value1'},\n      };\n\n      // \"command\" variations.\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            command: input.command,\n            parameters: input.parameters,\n          })),\n          input);\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            cmd: input.command,\n            parameters: input.parameters,\n          })),\n          input);\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            method: input.command,\n            parameters: input.parameters,\n          })),\n          input);\n\n      // \"parameters\" variations.\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            command: input.command,\n            params: input.parameters,\n          })),\n          input);\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            cmd: input.command,\n            args: input.parameters,\n          })),\n          input);\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            method: input.command,\n            arguments: input.parameters,\n          })),\n          input);\n    });\n\n    it('parses non-JSON data as a command name', async () => {\n      assert.deepStrictEqual(ProtocolMonitor.ProtocolMonitor.parseCommandInput('Input.dispatchMouseEvent'), {\n        command: 'Input.dispatchMouseEvent',\n        parameters: null,\n      });\n    });\n  });\n\n  describe('HistoryAutocompleteDataProvider', () => {\n    it('should create completions with no history', async () => {\n      const provider = new ProtocolMonitor.ProtocolMonitor.HistoryAutocompleteDataProvider();\n      assert.deepStrictEqual(await provider.buildTextPromptCompletions('test', 'test'), []);\n    });\n\n    it('should build completions in the reverse insertion order', async () => {\n      const provider = new ProtocolMonitor.ProtocolMonitor.HistoryAutocompleteDataProvider();\n\n      provider.addEntry('test1');\n      provider.addEntry('test2');\n      provider.addEntry('test3');\n      assert.deepStrictEqual(await provider.buildTextPromptCompletions('test', 'test'), [\n        {text: 'test3'},\n        {text: 'test2'},\n        {text: 'test1'},\n      ]);\n\n      provider.addEntry('test1');\n      assert.deepStrictEqual(await provider.buildTextPromptCompletions('test', 'test'), [\n        {text: 'test1'},\n        {text: 'test3'},\n        {text: 'test2'},\n      ]);\n    });\n\n    it('should limit the number of completions', async () => {\n      const provider = new ProtocolMonitor.ProtocolMonitor.HistoryAutocompleteDataProvider(2);\n\n      provider.addEntry('test1');\n      provider.addEntry('test2');\n      provider.addEntry('test3');\n\n      assert.deepStrictEqual(await provider.buildTextPromptCompletions('test', 'test'), [\n        {text: 'test3'},\n        {text: 'test2'},\n      ]);\n    });\n  });\n});\n"]}