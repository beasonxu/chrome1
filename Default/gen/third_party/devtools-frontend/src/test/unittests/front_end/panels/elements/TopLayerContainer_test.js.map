{"version":3,"file":"TopLayerContainer_test.js","sourceRoot":"","sources":["../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/panels/elements/TopLayerContainer_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAK7B,OAAO,KAAK,QAAQ,MAAM,6DAA6D,CAAC;AACxF,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAC;AACjE,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAE3E,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,MAAM,mBAAmB,GAAG,CAAC,QAAgB,EAAE,aAAqB,EAAwB,EAAE;IAC5F,OAAO;QACL,QAAQ,EAAE,GAAG,EAAE,CAAC,QAAQ;QACxB,aAAa,EAAE,GAAG,EAAE,CAAC,aAAa;KACX,CAAC;AAC5B,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAAG,GAA2D,EAAE;IAC3F,OAAO;QACL,6DAA6D;QAC7D,KAAK,EAAE,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,OAAqB,EAA4B,EAAE,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE;KACjD,CAAC;AAC9D,CAAC,CAAC;AAEF,0BAA0B,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;IACzD,IAAI,QAA+B,CAAC;IAEpC,MAAM,CAAC,KAAK,IAAI,EAAE;QAChB,QAAQ,GAAG,MAAM,MAAM,CAAC,sDAAsD,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC1D,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACvD,MAAM,QAAQ,GAAG;YACf,MAAM,EAAE,GAAG,EAAE,CAAC,YAAY,EAAE;YAC5B,mBAAmB,EAAE,KAAK,IAAI,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAwB,EAAE,CAAwB,CAAC,CAAC;YACtG,WAAW,EAAE,IAAI,GAAG,CAAC;gBACnB,CAAC,CAAC,EAAE,gBAAgB,CAAC;gBACrB,CAAC,CAAC,EAAE,gBAAgB,CAAC;aACtB,CAAC;SACsB,CAAC;QAE3B,MAAM,iBAAiB,GAAG,uBAAuB,EAAE,CAAC;QACpD,MAAM,iBAAiB,GAAG,uBAAuB,EAAE,CAAC;QACpD,MAAM,IAAI,GAAG;YACX,iBAAiB,EAAE,IAAI,OAAO,CAAC;gBAC7B,CAAC,gBAAgB,EAAE,iBAAiB,CAAC;gBACrC,CAAC,gBAAgB,EAAE,iBAAiB,CAAC;aACtC,CAAC;SACuD,CAAC;QAE5D,MAAM,iBAAiB,GAAG,IAAI,QAAQ,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC3F,MAAM,iBAAiB,CAAC,sBAAsB,EAAE,CAAC;QACjD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport type * as Protocol from '../../../../../front_end/generated/protocol.js';\nimport type * as ElementsModule from '../../../../../front_end/panels/elements/elements.js';\nimport * as Adorners from '../../../../../front_end/ui/components/adorners/adorners.js';\nimport {createTarget} from '../../helpers/EnvironmentHelpers.js';\nimport {describeWithRealConnection} from '../../helpers/RealConnection.js';\n\nconst {assert} = chai;\n\nconst stubTopLayerDOMNode = (nodeName: string, backendNodeId: number): SDK.DOMModel.DOMNode => {\n  return {\n    nodeName: () => nodeName,\n    backendNodeId: () => backendNodeId,\n  } as SDK.DOMModel.DOMNode;\n};\n\nconst stubElementsTreeElement = (): ElementsModule.ElementsTreeElement.ElementsTreeElement => {\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    adorn: ({name: string}, content?: HTMLElement): Adorners.Adorner.Adorner => new Adorners.Adorner.Adorner(),\n  } as ElementsModule.ElementsTreeElement.ElementsTreeElement;\n};\n\ndescribeWithRealConnection('TopLayerContainer', async () => {\n  let Elements: typeof ElementsModule;\n\n  before(async () => {\n    Elements = await import('../../../../../front_end/panels/elements/elements.js');\n  });\n\n  it('should update top layer elements correctly', async () => {\n    const topLayerDOMNode1 = stubTopLayerDOMNode('dialog', 1);\n    const topLayerDOMNode2 = stubTopLayerDOMNode('div', 2);\n    const domModel = {\n      target: () => createTarget(),\n      getTopLayerElements: async () => Promise.resolve([1 as Protocol.DOM.NodeId, 2 as Protocol.DOM.NodeId]),\n      idToDOMNode: new Map([\n        [1, topLayerDOMNode1],\n        [2, topLayerDOMNode2],\n      ]),\n    } as SDK.DOMModel.DOMModel;\n\n    const topLayerTreeNode1 = stubElementsTreeElement();\n    const topLayerTreeNode2 = stubElementsTreeElement();\n    const tree = {\n      treeElementByNode: new WeakMap([\n        [topLayerDOMNode1, topLayerTreeNode1],\n        [topLayerDOMNode2, topLayerTreeNode2],\n      ]),\n    } as ElementsModule.ElementsTreeOutline.ElementsTreeOutline;\n\n    const topLayerContainer = new Elements.TopLayerContainer.TopLayerContainer(tree, domModel);\n    await topLayerContainer.updateTopLayerElements();\n    assert.strictEqual(topLayerContainer.currentTopLayerElements.size, 2);\n  });\n});\n"]}