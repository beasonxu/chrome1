{"version":3,"file":"CSSRuleValidator_test.js","sourceRoot":"","sources":["../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/panels/elements/CSSRuleValidator_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ElementsModule from '../../../../../front_end/panels/elements/elements.js';\nimport {describeWithEnvironment} from '../../helpers/EnvironmentHelpers.js';\n\nconst {assert} = chai;\n\ndescribeWithEnvironment('CSSRuleValidator', async () => {\n  let Elements: typeof ElementsModule;\n  const tests = [\n    {\n      description:\n          'Reports a rule violation when element align-content is set on flex container whose flex-wrap property\\'s value is nowrap',\n      computedStyles: new Map<string, string>([\n        ['display', 'inline-flex'],\n        ['flex-wrap', 'nowrap'],\n        ['align-content', 'center'],\n      ]),\n      validator: () => new Elements.CSSRuleValidator.AlignContentValidator(),\n      expectedResult: false,\n    },\n    {\n      description: 'Passes the validation if flex-wrap is set to nowrap, but the element is not a flex container',\n      computedStyles: new Map<string, string>([\n        ['display', 'block'],\n        ['flex-wrap', 'nowrap'],\n        ['align-content', 'center'],\n      ]),\n      validator: () => new Elements.CSSRuleValidator.AlignContentValidator(),\n      expectedResult: true,\n    },\n    {\n      description: 'Reports a rule validation when flex properties are set to non-flex items',\n      computedStyles: new Map<string, string>([\n        ['flex', '1'],\n      ]),\n      parentsComputedStyles: new Map<string, string>([\n        ['display', 'table'],\n      ]),\n      validator: () => new Elements.CSSRuleValidator.FlexItemValidator(),\n      expectedResult: false,\n    },\n    {\n      description: 'Passes the validation when flex properties are set to flex items',\n      computedStyles: new Map<string, string>([\n        ['flex', '1'],\n      ]),\n      parentsComputedStyles: new Map<string, string>([\n        ['display', 'flex'],\n      ]),\n      validator: () => new Elements.CSSRuleValidator.FlexItemValidator(),\n      expectedResult: true,\n    },\n    {\n      description: 'Passes the validation when flex container properties are set to flex container',\n      computedStyles: new Map<string, string>([\n        ['display', 'flex'],\n        ['flex-direction', 'column'],\n      ]),\n      parentsComputedStyles: new Map<string, string>(),\n      validator: () => new Elements.CSSRuleValidator.FlexContainerValidator(),\n      expectedResult: true,\n    },\n    {\n      description: 'Reports a rule validation when flex container properties are set to non-flex container',\n      computedStyles: new Map<string, string>([\n        ['display', 'block'],\n        ['flex-direction', 'column'],\n      ]),\n      parentsComputedStyles: new Map<string, string>(),\n      validator: () => new Elements.CSSRuleValidator.FlexContainerValidator(),\n      expectedResult: false,\n    },\n    {\n      description: 'Passes the validation when grid container properties are set to grid container',\n      computedStyles: new Map<string, string>([\n        ['display', 'grid'],\n        ['grid', '100px / 200px'],\n      ]),\n      parentsComputedStyles: new Map<string, string>(),\n      validator: () => new Elements.CSSRuleValidator.GridContainerValidator(),\n      expectedResult: true,\n    },\n    {\n      description: 'Reports a rule validation when grid container properties are set to non-grid container',\n      computedStyles: new Map<string, string>([\n        ['display', 'flex'],\n        ['grid', '100px / 200px'],\n      ]),\n      parentsComputedStyles: new Map<string, string>(),\n      validator: () => new Elements.CSSRuleValidator.GridContainerValidator(),\n      expectedResult: false,\n    },\n    {\n      description: 'Passes the validation when grid item properties are set to grid items',\n      computedStyles: new Map<string, string>([\n        ['grid', '100px / 200px'],\n      ]),\n      parentsComputedStyles: new Map<string, string>([\n        ['display', 'grid'],\n      ]),\n      validator: () => new Elements.CSSRuleValidator.GridItemValidator(),\n      expectedResult: true,\n    },\n    {\n      description: 'Reports a rule validation when grid item properties are set to non-grid items',\n      computedStyles: new Map<string, string>([\n        ['grid', '100px / 200px'],\n      ]),\n      parentsComputedStyles: new Map<string, string>([\n        ['display', 'flex'],\n      ]),\n      validator: () => new Elements.CSSRuleValidator.GridItemValidator(),\n      expectedResult: false,\n    },\n    {\n      description: 'Passes the validation when padding is not set to table elements',\n      computedStyles: new Map<string, string>([\n        ['display', 'block'],\n        ['padding', '15px'],\n      ]),\n      parentsComputedStyles: new Map<string, string>(),\n      validator: () => new Elements.CSSRuleValidator.PaddingValidator(),\n      expectedResult: true,\n    },\n    {\n      description: 'Reports a rule validation when padding is set to table elements',\n      computedStyles: new Map<string, string>([\n        ['display', 'table-row'],\n        ['padding', '15px'],\n      ]),\n      parentsComputedStyles: new Map<string, string>(),\n      validator: () => new Elements.CSSRuleValidator.PaddingValidator(),\n      expectedResult: false,\n    },\n    {\n      description: 'Passes the validation when top is set to non-static positioned element',\n      computedStyles: new Map<string, string>([\n        ['position', 'absolute'],\n        ['top', '20px'],\n      ]),\n      parentsComputedStyles: new Map<string, string>(),\n      validator: () => new Elements.CSSRuleValidator.PositionValidator(),\n      expectedResult: true,\n    },\n    {\n      description: 'Reports a rule validation when top is set to static positioned elements',\n      computedStyles: new Map<string, string>([\n        ['position', 'static'],\n        ['top', '20px'],\n      ]),\n      parentsComputedStyles: new Map<string, string>(),\n      validator: () => new Elements.CSSRuleValidator.PositionValidator(),\n      expectedResult: false,\n    },\n    {\n      description: 'Passes the validation when z-index is set to non-static positioned element',\n      computedStyles: new Map<string, string>([\n        ['position', 'absolute'],\n        ['z-index', '5'],\n      ]),\n      parentsComputedStyles: new Map<string, string>(),\n      validator: () => new Elements.CSSRuleValidator.ZIndexValidator(),\n      expectedResult: true,\n    },\n    {\n      description: 'Reports a rule validation when z-index is set to static positioned elements',\n      computedStyles: new Map<string, string>([\n        ['position', 'static'],\n        ['z-index', '5'],\n      ]),\n      parentsComputedStyles: new Map<string, string>(),\n      validator: () => new Elements.CSSRuleValidator.ZIndexValidator(),\n      expectedResult: false,\n    },\n  ];\n\n  before(async () => {\n    Elements = await import('../../../../../front_end/panels/elements/elements.js');\n  });\n\n  for (const test of tests) {\n    it(test.description, () => {\n      const actualResult = test.validator().getHint(\n          test.validator().getApplicableProperties()[0], test.computedStyles, test.parentsComputedStyles);\n      if (test.expectedResult) {\n        assert.isUndefined(actualResult);\n      } else {\n        assert.isDefined(actualResult);\n      }\n    });\n  }\n});\n"]}