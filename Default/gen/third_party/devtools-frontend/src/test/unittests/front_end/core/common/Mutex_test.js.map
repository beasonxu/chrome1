{"version":3,"file":"Mutex_test.js","sourceRoot":"","sources":["../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/core/common/Mutex_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Common from '../../../../../front_end/core/common/common.js';\nimport {\n  describeWithLocale,\n} from '../../helpers/EnvironmentHelpers.js';\n\ndescribeWithLocale('Recorder', () => {\n  describe('Mutex', () => {\n    async function triggerMicroTaskQueue(): Promise<void> {\n      await new Promise(resolve => setTimeout(resolve, 0));\n    }\n\n    async function notAcquired(): Promise<'not acquired'> {\n      await triggerMicroTaskQueue();\n      return 'not acquired';\n    }\n\n    it('should acquire the lock immediately if no one is holding it', async () => {\n      const mutex = new Common.Mutex.Mutex();\n      const release = await mutex.acquire();\n      release();\n    });\n\n    it('should not acquire the lock if someone else is holding it', async () => {\n      const mutex = new Common.Mutex.Mutex();\n      const lock1 = mutex.acquire();\n      const lock2 = mutex.acquire();\n      await triggerMicroTaskQueue();\n      assert.instanceOf(await lock1, Function);\n      // lock2 should never resolve.\n      assert.strictEqual(await Promise.race([lock2, notAcquired()]), 'not acquired');\n    });\n\n    it('should acquire the lock once another holder releases it', async () => {\n      const mutex = new Common.Mutex.Mutex();\n      const lock1 = mutex.acquire();\n      const lock2 = mutex.acquire();\n      const release = await lock1;\n      // lock2 should not be resolved set.\n      assert.strictEqual(await Promise.race([lock2, notAcquired()]), 'not acquired');\n      release();\n      await triggerMicroTaskQueue();\n      assert.instanceOf(await lock2, Function);\n    });\n\n    it('should work for two async functions accessing shared state', async () => {\n      const mutex = new Common.Mutex.Mutex();\n      const shared: string[] = [];\n      let action1Resolver = () => {};\n      const action1ReadyPromise = new Promise<void>(resolve => {\n        action1Resolver = resolve;\n      });\n      let action2Resolver = () => {};\n      const action2ReadyPromise = new Promise<void>(resolve => {\n        action2Resolver = resolve;\n      });\n\n      async function action1() {\n        const release = await mutex.acquire();\n        try {\n          await action1ReadyPromise;\n          shared.push('action1');\n        } finally {\n          release();\n        }\n      }\n\n      async function action2() {\n        const release = await mutex.acquire();\n        try {\n          await action2ReadyPromise;\n          shared.push('action2');\n        } finally {\n          release();\n        }\n      }\n      const promises = Promise.all([action1(), action2()]);\n      action2Resolver();\n      action1Resolver();\n      await promises;\n      assert.deepEqual(shared, ['action1', 'action2']);\n    });\n  });\n});\n"]}