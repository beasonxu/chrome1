{"version":3,"file":"UISourceCodeHelpers.js","sourceRoot":"","sources":["../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/helpers/UISourceCodeHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../front_end/core/common/common.js';\nimport type * as Platform from '../../../../front_end/core/platform/platform.js';\nimport * as TextUtils from '../../../../front_end/models/text_utils/text_utils.js';\nimport * as Bindings from '../../../../front_end/models/bindings/bindings.js';\nimport * as Workspace from '../../../../front_end/models/workspace/workspace.js';\nimport * as Persistence from '../../../../front_end/models/persistence/persistence.js';\n\nexport function createContentProviderUISourceCode(options: {\n  url: Platform.DevToolsPath.UrlString,\n  content?: string, mimeType: string,\n  projectType?: Workspace.Workspace.projectTypes,\n  projectId?: string,\n  metadata?: Workspace.UISourceCode.UISourceCodeMetadata,\n}): {\n  project: Bindings.ContentProviderBasedProject.ContentProviderBasedProject,\n  uiSourceCode: Workspace.UISourceCode.UISourceCode,\n} {\n  const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n  const projectType = options.projectType || Workspace.Workspace.projectTypes.Formatter;\n  assert.notEqual(\n      projectType, Workspace.Workspace.projectTypes.FileSystem,\n      'For creating file system UISourceCodes use \\'createFileSystemUISourceCode\\' helper.');\n  const project = new Bindings.ContentProviderBasedProject.ContentProviderBasedProject(\n      workspace, options.projectId || 'PROJECT_ID', projectType, 'Test project', false /* isServiceProject*/);\n  const resourceType = Common.ResourceType.ResourceType.fromMimeType(options.mimeType);\n  const uiSourceCode = project.createUISourceCode(options.url, resourceType);\n  const contentProvider = TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n      options.url, resourceType, options.content || '');\n  const metadata = options.metadata || new Workspace.UISourceCode.UISourceCodeMetadata(null, null);\n  project.addUISourceCodeWithProvider(uiSourceCode, contentProvider, metadata, options.mimeType);\n  return {uiSourceCode, project};\n}\n\nclass TestPlatformFileSystem extends Persistence.PlatformFileSystem.PlatformFileSystem {\n  readonly #mimeType: string;\n  readonly #autoMapping: boolean;\n\n  constructor(path: Platform.DevToolsPath.UrlString, type: string, mimeType: string, autoMapping: boolean) {\n    super(path, type);\n    this.#mimeType = mimeType;\n    this.#autoMapping = autoMapping;\n  }\n  supportsAutomapping(): boolean {\n    return this.#autoMapping;\n  }\n  mimeFromPath(_path: Platform.DevToolsPath.UrlString): string {\n    return this.#mimeType;\n  }\n}\n\nclass TestFileSystem extends Persistence.FileSystemWorkspaceBinding.FileSystem {\n  readonly #content: string;\n  readonly #metadata: Workspace.UISourceCode.UISourceCodeMetadata;\n\n  constructor(options: {\n    fileSystemWorkspaceBinding: Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding,\n    platformFileSystem: Persistence.PlatformFileSystem.PlatformFileSystem,\n    workspace: Workspace.Workspace.WorkspaceImpl,\n    content: string,\n    metadata: Workspace.UISourceCode.UISourceCodeMetadata,\n  }) {\n    super(options.fileSystemWorkspaceBinding, options.platformFileSystem, options.workspace);\n    this.#content = options.content;\n    this.#metadata = options.metadata;\n  }\n\n  requestFileContent(_uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<TextUtils.ContentProvider.DeferredContent> {\n    return Promise.resolve({content: this.#content, isEncoded: false});\n  }\n\n  requestMetadata(_uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<Workspace.UISourceCode.UISourceCodeMetadata|null> {\n    return Promise.resolve(this.#metadata);\n  }\n}\n\nexport function createFileSystemUISourceCode(options: {\n  url: Platform.DevToolsPath.UrlString,\n  mimeType: string,\n  content?: string,\n  fileSystemPath?: string,\n  autoMapping?: boolean,\n  type?: string,\n  metadata?: Workspace.UISourceCode.UISourceCodeMetadata,\n}) {\n  const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n  const isolatedFileSystemManager = Persistence.IsolatedFileSystemManager.IsolatedFileSystemManager.instance();\n  const fileSystemWorkspaceBinding =\n      new Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding(isolatedFileSystemManager, workspace);\n  const fileSystemPath = (options.fileSystemPath || '') as Platform.DevToolsPath.UrlString;\n  const type = options.type || '';\n  const content = options.content || '';\n  const platformFileSystem =\n      new TestPlatformFileSystem(fileSystemPath, type, options.mimeType, Boolean(options.autoMapping));\n  const metadata = options.metadata || new Workspace.UISourceCode.UISourceCodeMetadata(null, null);\n\n  const project = new TestFileSystem({fileSystemWorkspaceBinding, platformFileSystem, workspace, content, metadata});\n\n  const uiSourceCode =\n      project.createUISourceCode(options.url, Common.ResourceType.ResourceType.fromMimeType(options.mimeType));\n  project.addUISourceCode(uiSourceCode);\n  return {uiSourceCode, project};\n}\n\nexport function setupMockedUISourceCode(url: string = 'https://example.com/') {\n  const projectStub = sinon.createStubInstance(Bindings.ContentProviderBasedProject.ContentProviderBasedProject);\n  const urlStringTagExample = url as Platform.DevToolsPath.UrlString;\n  const contentTypeStub = sinon.createStubInstance(Common.ResourceType.ResourceType);\n\n  const uiSourceCode = new Workspace.UISourceCode.UISourceCode(projectStub, urlStringTagExample, contentTypeStub);\n\n  return {sut: uiSourceCode, projectStub: projectStub, contentTypeStub: contentTypeStub};\n}\n"]}