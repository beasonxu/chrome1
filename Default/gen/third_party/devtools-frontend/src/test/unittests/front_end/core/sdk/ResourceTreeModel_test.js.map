{"version":3,"file":"ResourceTreeModel_test.js","sourceRoot":"","sources":["../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/core/sdk/ResourceTreeModel_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assertNotNullOrUndefined} from '../../../../../front_end/core/platform/platform.js';\nimport * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport * as Protocol from '../../../../../front_end/generated/protocol.js';\nimport {createTarget} from '../../helpers/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  dispatchEvent,\n  setMockConnectionResponseHandler,\n} from '../../helpers/MockConnection.js';\n\nconst {assert} = chai;\n\nfunction navigateFrameWithMockConnection(\n    storageKey: string, resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel|null) {\n  setMockConnectionResponseHandler('Storage.getStorageKeyForFrame', () => ({storageKey}));\n  resourceTreeModel?.frameNavigated(\n      {\n        id: 'main',\n        loaderId: 'foo',\n        url: 'http://example.com',\n        securityOrigin: 'http://example.com',\n        mimeType: 'text/html',\n      } as Protocol.Page.Frame,\n      undefined,\n  );\n}\n\ndescribeWithMockConnection('ResourceTreeModel', () => {\n  let target: SDK.Target.Target;\n  let resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel|null;\n  let networkManager: SDK.NetworkManager.NetworkManager|null;\n\n  beforeEach(async () => {\n    setMockConnectionResponseHandler('Page.getResourceTree', () => {\n      return {\n        frame: {\n          id: 'test-id',\n          loaderId: 'test',\n          url: 'http://example.com',\n          securityOrigin: 'http://example.com',\n          mimeType: 'text/html',\n        },\n        resources: [],\n      };\n    });\n    target = createTarget();\n    resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    networkManager = target.model(SDK.NetworkManager.NetworkManager);\n  });\n\n  it('calls clearRequests on reloadPage', () => {\n    if (!networkManager) {\n      throw new Error('No networkManager');\n    }\n    const clearRequests = sinon.stub(networkManager, 'clearRequests');\n    resourceTreeModel?.reloadPage();\n    assert.isTrue(clearRequests.calledOnce, 'Not called just once');\n  });\n\n  it('calls clearRequests on top frame navigated', () => {\n    if (!networkManager) {\n      throw new Error('No networkManager');\n    }\n    const clearRequests = sinon.stub(networkManager, 'clearRequests');\n    dispatchEvent(target, 'Page.frameNavigated', {\n      frame: {\n        id: 'main',\n        loaderId: 'foo',\n        url: 'http://example.com',\n        domainAndRegistry: 'example.com',\n        securityOrigin: 'http://example.com',\n        mimeType: 'text/html',\n        secureContextType: Protocol.Page.SecureContextType.Secure,\n        crossOriginIsolatedContextType: Protocol.Page.CrossOriginIsolatedContextType.Isolated,\n        gatedAPIFeatures: [],\n      },\n    });\n    assert.isTrue(clearRequests.calledOnce, 'Not called just once');\n  });\n\n  it('does not call clearRequests on non-top frame navigated', () => {\n    if (!networkManager) {\n      throw new Error('No networkManager');\n    }\n    const clearRequests = sinon.stub(networkManager, 'clearRequests');\n    dispatchEvent(target, 'Page.frameNavigated', {\n      frame: {\n        id: 'main',\n        parentId: 'parentId',\n        loaderId: 'foo',\n        url: 'http://example.com',\n        domainAndRegistry: 'example.com',\n        securityOrigin: 'http://example.com',\n        mimeType: 'text/html',\n        secureContextType: Protocol.Page.SecureContextType.Secure,\n        crossOriginIsolatedContextType: Protocol.Page.CrossOriginIsolatedContextType.Isolated,\n        gatedAPIFeatures: [],\n      },\n    });\n    assert.isTrue(clearRequests.notCalled, 'Called unexpctedly');\n  });\n\n  it('records prerenderingStatus', () => {\n    dispatchEvent(target, 'Page.frameNavigated', {\n      frame: {\n        id: 'main',\n        loaderId: 'foo',\n        url: 'http://example.com',\n        domainAndRegistry: 'example.com',\n        securityOrigin: 'http://example.com',\n        mimeType: 'text/html',\n        secureContextType: Protocol.Page.SecureContextType.Secure,\n        crossOriginIsolatedContextType: Protocol.Page.CrossOriginIsolatedContextType.Isolated,\n        gatedAPIFeatures: [],\n      },\n    });\n    dispatchEvent(\n        target,\n        'Page.prerenderAttemptCompleted',\n        {\n          'initiatingFrameId': 'main',\n          'prerenderingUrl': 'http://example.com/page.html',\n          'finalStatus': Protocol.Page.PrerenderFinalStatus.TriggerDestroyed,\n        },\n    );\n    dispatchEvent(\n        target,\n        'Page.prerenderAttemptCompleted',\n        {\n          'initiatingFrameId': 'next',\n          'prerenderingUrl': 'http://example.com/page.html',\n          'finalStatus': Protocol.Page.PrerenderFinalStatus.ClientCertRequested,\n        },\n    );\n    assertNotNullOrUndefined(resourceTreeModel);\n    assertNotNullOrUndefined(resourceTreeModel.mainFrame);\n    assert.strictEqual(\n        resourceTreeModel.mainFrame.prerenderFinalStatus, Protocol.Page.PrerenderFinalStatus.TriggerDestroyed);\n    dispatchEvent(target, 'Page.frameNavigated', {\n      frame: {\n        id: 'next',\n        loaderId: 'foo',\n        url: 'http://example.com/next',\n        domainAndRegistry: 'example.com',\n        securityOrigin: 'http://example.com',\n        mimeType: 'text/html',\n        secureContextType: Protocol.Page.SecureContextType.Secure,\n        crossOriginIsolatedContextType: Protocol.Page.CrossOriginIsolatedContextType.Isolated,\n        gatedAPIFeatures: [],\n      },\n    });\n    assertNotNullOrUndefined(resourceTreeModel);\n    assertNotNullOrUndefined(resourceTreeModel.mainFrame);\n    assert.strictEqual(\n        resourceTreeModel.mainFrame.prerenderFinalStatus, Protocol.Page.PrerenderFinalStatus.ClientCertRequested);\n  });\n\n  it('added frame has storageKey when navigated', async () => {\n    const testKey = 'test-storage-key';\n\n    assert.isEmpty(resourceTreeModel?.frames());\n    navigateFrameWithMockConnection(testKey, resourceTreeModel);\n    const frames = resourceTreeModel?.frames();\n    assertNotNullOrUndefined(frames);\n    assert.lengthOf(frames, 1);\n    const addedFrame = frames[0];\n    assertNotNullOrUndefined(addedFrame);\n    const key = await addedFrame.storageKey;\n    assertNotNullOrUndefined(key);\n    assert.strictEqual(key, testKey);\n  });\n\n  it('storage key gets updated when frame tree changes', async () => {\n    const testKey = 'test-storage-key';\n\n    assert.isEmpty(resourceTreeModel?.frames());\n    const manager = target.model(SDK.StorageKeyManager.StorageKeyManager);\n    assertNotNullOrUndefined(manager);\n    const storageKeyAddedPromise = new Promise<void>(resolve => {\n      manager.addEventListener(SDK.StorageKeyManager.Events.StorageKeyAdded, () => {\n        resolve();\n      });\n    });\n    navigateFrameWithMockConnection(testKey, resourceTreeModel);\n    await storageKeyAddedPromise;\n    assert.strictEqual(resourceTreeModel?.frames().length, 1);\n\n    const mainStorageKeyChangedPromise = new Promise<void>(resolve => {\n      manager.addEventListener(SDK.StorageKeyManager.Events.MainStorageKeyChanged, () => {\n        resolve();\n      });\n    });\n    const storageKeyRemovedPromise = new Promise<void>(resolve => {\n      manager.addEventListener(SDK.StorageKeyManager.Events.StorageKeyRemoved, () => {\n        resolve();\n      });\n    });\n\n    resourceTreeModel?.frameDetached('main' as Protocol.Page.FrameId, false);\n    assert.isEmpty(resourceTreeModel?.frames());\n    await Promise.all([mainStorageKeyChangedPromise, storageKeyRemovedPromise]);\n  });\n});\n"]}