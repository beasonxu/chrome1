// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/vision/proto/class.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclass_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclass_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclass_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclass_2eproto {
  static const uint32_t offsets[];
};
namespace tflite {
namespace task {
namespace vision {
class Class;
struct ClassDefaultTypeInternal;
extern ClassDefaultTypeInternal _Class_default_instance_;
}  // namespace vision
}  // namespace task
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> ::tflite::task::vision::Class* Arena::CreateMaybeMessage<::tflite::task::vision::Class>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tflite {
namespace task {
namespace vision {

// ===================================================================

class Class final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:tflite.task.vision.Class) */ {
 public:
  inline Class() : Class(nullptr) {}
  ~Class() override;
  explicit PROTOBUF_CONSTEXPR Class(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Class(const Class& from);
  Class(Class&& from) noexcept
    : Class() {
    *this = ::std::move(from);
  }

  inline Class& operator=(const Class& from) {
    CopyFrom(from);
    return *this;
  }
  inline Class& operator=(Class&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Class& default_instance() {
    return *internal_default_instance();
  }
  static inline const Class* internal_default_instance() {
    return reinterpret_cast<const Class*>(
               &_Class_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Class& a, Class& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Class* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Class* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Class* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Class>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Class& from);
  void MergeFrom(const Class& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Class* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.task.vision.Class";
  }
  protected:
  explicit Class(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 3,
    kClassNameFieldNumber = 4,
    kIndexFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // optional string display_name = 3;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional string class_name = 4;
  bool has_class_name() const;
  private:
  bool _internal_has_class_name() const;
  public:
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // optional int32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // optional float score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:tflite.task.vision.Class)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  int32_t index_;
  float score_;
  friend struct ::TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclass_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Class

// optional int32 index = 1;
inline bool Class::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Class::has_index() const {
  return _internal_has_index();
}
inline void Class::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Class::_internal_index() const {
  return index_;
}
inline int32_t Class::index() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.Class.index)
  return _internal_index();
}
inline void Class::_internal_set_index(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
}
inline void Class::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.Class.index)
}

// optional float score = 2;
inline bool Class::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Class::has_score() const {
  return _internal_has_score();
}
inline void Class::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Class::_internal_score() const {
  return score_;
}
inline float Class::score() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.Class.score)
  return _internal_score();
}
inline void Class::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000008u;
  score_ = value;
}
inline void Class::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.Class.score)
}

// optional string display_name = 3;
inline bool Class::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Class::has_display_name() const {
  return _internal_has_display_name();
}
inline void Class::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Class::display_name() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.Class.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Class::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.task.vision.Class.display_name)
}
inline std::string* Class::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.Class.display_name)
  return _s;
}
inline const std::string& Class::_internal_display_name() const {
  return display_name_.Get();
}
inline void Class::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Class::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000001u;
  return display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Class::release_display_name() {
  // @@protoc_insertion_point(field_release:tflite.task.vision.Class.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = display_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault()) {
    display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Class::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault()) {
    display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.Class.display_name)
}

// optional string class_name = 4;
inline bool Class::_internal_has_class_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Class::has_class_name() const {
  return _internal_has_class_name();
}
inline void Class::clear_class_name() {
  class_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Class::class_name() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.Class.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Class::set_class_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.task.vision.Class.class_name)
}
inline std::string* Class::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.Class.class_name)
  return _s;
}
inline const std::string& Class::_internal_class_name() const {
  return class_name_.Get();
}
inline void Class::_internal_set_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Class::_internal_mutable_class_name() {
  _has_bits_[0] |= 0x00000002u;
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Class::release_class_name() {
  // @@protoc_insertion_point(field_release:tflite.task.vision.Class.class_name)
  if (!_internal_has_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = class_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Class::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.Class.class_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace vision
}  // namespace task
}  // namespace tflite

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclass_2eproto
