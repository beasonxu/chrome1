// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/vision/proto/image_classifier_options.proto

#include "tensorflow_lite_support/cc/task/vision/proto/image_classifier_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tflite {
namespace task {
namespace vision {
PROTOBUF_CONSTEXPR ImageClassifierOptions::ImageClassifierOptions(
    ::_pbi::ConstantInitialized)
  : class_name_whitelist_()
  , class_name_blacklist_()
  , display_names_locale_(nullptr, ::_pbi::ConstantInitialized{})
  , compute_settings_(nullptr)
  , model_file_with_metadata_(nullptr)
  , base_options_(nullptr)
  , score_threshold_(0)
  , max_results_(-1)
  , num_threads_(-1){}
struct ImageClassifierOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageClassifierOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageClassifierOptionsDefaultTypeInternal() {}
  union {
    ImageClassifierOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageClassifierOptionsDefaultTypeInternal _ImageClassifierOptions_default_instance_;
}  // namespace vision
}  // namespace task
}  // namespace tflite
namespace tflite {
namespace task {
namespace vision {

// ===================================================================

class ImageClassifierOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageClassifierOptions>()._has_bits_);
  static const ::tflite::task::core::BaseOptions& base_options(const ImageClassifierOptions* msg);
  static void set_has_base_options(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tflite::task::core::ExternalFile& model_file_with_metadata(const ImageClassifierOptions* msg);
  static void set_has_model_file_with_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_names_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_results(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_score_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tflite::proto::ComputeSettings& compute_settings(const ImageClassifierOptions* msg);
  static void set_has_compute_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tflite::task::core::BaseOptions&
ImageClassifierOptions::_Internal::base_options(const ImageClassifierOptions* msg) {
  return *msg->base_options_;
}
const ::tflite::task::core::ExternalFile&
ImageClassifierOptions::_Internal::model_file_with_metadata(const ImageClassifierOptions* msg) {
  return *msg->model_file_with_metadata_;
}
const ::tflite::proto::ComputeSettings&
ImageClassifierOptions::_Internal::compute_settings(const ImageClassifierOptions* msg) {
  return *msg->compute_settings_;
}
void ImageClassifierOptions::clear_base_options() {
  if (base_options_ != nullptr) base_options_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ImageClassifierOptions::clear_model_file_with_metadata() {
  if (model_file_with_metadata_ != nullptr) model_file_with_metadata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageClassifierOptions::_i_give_permission_to_break_this_code_default_display_names_locale_{{{"en", 2}}, {nullptr}};
void ImageClassifierOptions::clear_compute_settings() {
  if (compute_settings_ != nullptr) compute_settings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ImageClassifierOptions::ImageClassifierOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  class_name_whitelist_(arena),
  class_name_blacklist_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.ImageClassifierOptions)
}
ImageClassifierOptions::ImageClassifierOptions(const ImageClassifierOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      class_name_whitelist_(from.class_name_whitelist_),
      class_name_blacklist_(from.class_name_blacklist_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  display_names_locale_.InitDefault();
  if (from._internal_has_display_names_locale()) {
    display_names_locale_.Set(from._internal_display_names_locale(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_compute_settings()) {
    compute_settings_ = new ::tflite::proto::ComputeSettings(*from.compute_settings_);
  } else {
    compute_settings_ = nullptr;
  }
  if (from._internal_has_model_file_with_metadata()) {
    model_file_with_metadata_ = new ::tflite::task::core::ExternalFile(*from.model_file_with_metadata_);
  } else {
    model_file_with_metadata_ = nullptr;
  }
  if (from._internal_has_base_options()) {
    base_options_ = new ::tflite::task::core::BaseOptions(*from.base_options_);
  } else {
    base_options_ = nullptr;
  }
  ::memcpy(&score_threshold_, &from.score_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_threads_) -
    reinterpret_cast<char*>(&score_threshold_)) + sizeof(num_threads_));
  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.ImageClassifierOptions)
}

inline void ImageClassifierOptions::SharedCtor() {
display_names_locale_.InitDefault();
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compute_settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_threshold_) -
    reinterpret_cast<char*>(&compute_settings_)) + sizeof(score_threshold_));
max_results_ = -1;
num_threads_ = -1;
}

ImageClassifierOptions::~ImageClassifierOptions() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.ImageClassifierOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageClassifierOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  display_names_locale_.Destroy();
  if (this != internal_default_instance()) delete compute_settings_;
  if (this != internal_default_instance()) delete model_file_with_metadata_;
  if (this != internal_default_instance()) delete base_options_;
}

void ImageClassifierOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageClassifierOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.ImageClassifierOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_whitelist_.Clear();
  class_name_blacklist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      display_names_locale_.ClearToDefault(::tflite::task::vision::ImageClassifierOptions::_i_give_permission_to_break_this_code_default_display_names_locale_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(compute_settings_ != nullptr);
      compute_settings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(model_file_with_metadata_ != nullptr);
      model_file_with_metadata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(base_options_ != nullptr);
      base_options_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    score_threshold_ = 0;
    max_results_ = -1;
    num_threads_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ImageClassifierOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 max_results = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_results(&has_bits);
          max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float score_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_score_threshold(&has_bits);
          score_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated string class_name_whitelist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_class_name_whitelist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string class_name_blacklist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_class_name_blacklist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.proto.ComputeSettings compute_settings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_compute_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.task.core.ExternalFile model_file_with_metadata = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_file_with_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string display_names_locale = 11 [default = "en"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_display_names_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_threads = 13 [default = -1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_num_threads(&has_bits);
          num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.task.core.BaseOptions base_options = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageClassifierOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.ImageClassifierOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_results = 2 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_results(), target);
  }

  // optional float score_threshold = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_score_threshold(), target);
  }

  // repeated string class_name_whitelist = 4;
  for (int i = 0, n = this->_internal_class_name_whitelist_size(); i < n; i++) {
    const auto& s = this->_internal_class_name_whitelist(i);
    target = stream->WriteString(4, s, target);
  }

  // repeated string class_name_blacklist = 5;
  for (int i = 0, n = this->_internal_class_name_blacklist_size(); i < n; i++) {
    const auto& s = this->_internal_class_name_blacklist(i);
    target = stream->WriteString(5, s, target);
  }

  // optional .tflite.proto.ComputeSettings compute_settings = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::compute_settings(this),
        _Internal::compute_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.task.core.ExternalFile model_file_with_metadata = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::model_file_with_metadata(this),
        _Internal::model_file_with_metadata(this).GetCachedSize(), target, stream);
  }

  // optional string display_names_locale = 11 [default = "en"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_display_names_locale(), target);
  }

  // optional int32 num_threads = 13 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_num_threads(), target);
  }

  // optional .tflite.task.core.BaseOptions base_options = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::base_options(this),
        _Internal::base_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.ImageClassifierOptions)
  return target;
}

size_t ImageClassifierOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.ImageClassifierOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string class_name_whitelist = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(class_name_whitelist_.size());
  for (int i = 0, n = class_name_whitelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      class_name_whitelist_.Get(i));
  }

  // repeated string class_name_blacklist = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(class_name_blacklist_.size());
  for (int i = 0, n = class_name_blacklist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      class_name_blacklist_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string display_names_locale = 11 [default = "en"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_names_locale());
    }

    // optional .tflite.proto.ComputeSettings compute_settings = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compute_settings_);
    }

    // optional .tflite.task.core.ExternalFile model_file_with_metadata = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_file_with_metadata_);
    }

    // optional .tflite.task.core.BaseOptions base_options = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_options_);
    }

    // optional float score_threshold = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 max_results = 2 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_results());
    }

    // optional int32 num_threads = 13 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_threads());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageClassifierOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ImageClassifierOptions*>(
      &from));
}

void ImageClassifierOptions::MergeFrom(const ImageClassifierOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.ImageClassifierOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  class_name_whitelist_.MergeFrom(from.class_name_whitelist_);
  class_name_blacklist_.MergeFrom(from.class_name_blacklist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_names_locale(from._internal_display_names_locale());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_compute_settings()->::tflite::proto::ComputeSettings::MergeFrom(from._internal_compute_settings());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_model_file_with_metadata()->::tflite::task::core::ExternalFile::MergeFrom(from._internal_model_file_with_metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_base_options()->::tflite::task::core::BaseOptions::MergeFrom(from._internal_base_options());
    }
    if (cached_has_bits & 0x00000010u) {
      score_threshold_ = from.score_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_results_ = from.max_results_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_threads_ = from.num_threads_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ImageClassifierOptions::CopyFrom(const ImageClassifierOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.ImageClassifierOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageClassifierOptions::IsInitialized() const {
  return true;
}

void ImageClassifierOptions::InternalSwap(ImageClassifierOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  class_name_whitelist_.InternalSwap(&other->class_name_whitelist_);
  class_name_blacklist_.InternalSwap(&other->class_name_blacklist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &display_names_locale_, lhs_arena,
      &other->display_names_locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageClassifierOptions, score_threshold_)
      + sizeof(ImageClassifierOptions::score_threshold_)
      - PROTOBUF_FIELD_OFFSET(ImageClassifierOptions, compute_settings_)>(
          reinterpret_cast<char*>(&compute_settings_),
          reinterpret_cast<char*>(&other->compute_settings_));
  swap(max_results_, other->max_results_);
  swap(num_threads_, other->num_threads_);
}

std::string ImageClassifierOptions::GetTypeName() const {
  return "tflite.task.vision.ImageClassifierOptions";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vision
}  // namespace task
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tflite::task::vision::ImageClassifierOptions*
Arena::CreateMaybeMessage< ::tflite::task::vision::ImageClassifierOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::task::vision::ImageClassifierOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
