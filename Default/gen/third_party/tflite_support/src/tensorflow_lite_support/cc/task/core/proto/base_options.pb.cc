// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/core/proto/base_options.proto

#include "tensorflow_lite_support/cc/task/core/proto/base_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tflite {
namespace task {
namespace core {
PROTOBUF_CONSTEXPR BaseOptions::BaseOptions(
    ::_pbi::ConstantInitialized)
  : model_file_(nullptr)
  , compute_settings_(nullptr){}
struct BaseOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseOptionsDefaultTypeInternal() {}
  union {
    BaseOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseOptionsDefaultTypeInternal _BaseOptions_default_instance_;
}  // namespace core
}  // namespace task
}  // namespace tflite
namespace tflite {
namespace task {
namespace core {

// ===================================================================

class BaseOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseOptions>()._has_bits_);
  static const ::tflite::task::core::ExternalFile& model_file(const BaseOptions* msg);
  static void set_has_model_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::proto::ComputeSettings& compute_settings(const BaseOptions* msg);
  static void set_has_compute_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tflite::task::core::ExternalFile&
BaseOptions::_Internal::model_file(const BaseOptions* msg) {
  return *msg->model_file_;
}
const ::tflite::proto::ComputeSettings&
BaseOptions::_Internal::compute_settings(const BaseOptions* msg) {
  return *msg->compute_settings_;
}
void BaseOptions::clear_model_file() {
  if (model_file_ != nullptr) model_file_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void BaseOptions::clear_compute_settings() {
  if (compute_settings_ != nullptr) compute_settings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
BaseOptions::BaseOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tflite.task.core.BaseOptions)
}
BaseOptions::BaseOptions(const BaseOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_model_file()) {
    model_file_ = new ::tflite::task::core::ExternalFile(*from.model_file_);
  } else {
    model_file_ = nullptr;
  }
  if (from._internal_has_compute_settings()) {
    compute_settings_ = new ::tflite::proto::ComputeSettings(*from.compute_settings_);
  } else {
    compute_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tflite.task.core.BaseOptions)
}

inline void BaseOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&model_file_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compute_settings_) -
    reinterpret_cast<char*>(&model_file_)) + sizeof(compute_settings_));
}

BaseOptions::~BaseOptions() {
  // @@protoc_insertion_point(destructor:tflite.task.core.BaseOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete model_file_;
  if (this != internal_default_instance()) delete compute_settings_;
}

void BaseOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaseOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.core.BaseOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(model_file_ != nullptr);
      model_file_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(compute_settings_ != nullptr);
      compute_settings_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BaseOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .tflite.task.core.ExternalFile model_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tflite.proto.ComputeSettings compute_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_compute_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.core.BaseOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.task.core.ExternalFile model_file = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model_file(this),
        _Internal::model_file(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.ComputeSettings compute_settings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::compute_settings(this),
        _Internal::compute_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.core.BaseOptions)
  return target;
}

size_t BaseOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.core.BaseOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .tflite.task.core.ExternalFile model_file = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_file_);
    }

    // optional .tflite.proto.ComputeSettings compute_settings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compute_settings_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BaseOptions*>(
      &from));
}

void BaseOptions::MergeFrom(const BaseOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.core.BaseOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_model_file()->::tflite::task::core::ExternalFile::MergeFrom(from._internal_model_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_compute_settings()->::tflite::proto::ComputeSettings::MergeFrom(from._internal_compute_settings());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BaseOptions::CopyFrom(const BaseOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.core.BaseOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseOptions::IsInitialized() const {
  return true;
}

void BaseOptions::InternalSwap(BaseOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseOptions, compute_settings_)
      + sizeof(BaseOptions::compute_settings_)
      - PROTOBUF_FIELD_OFFSET(BaseOptions, model_file_)>(
          reinterpret_cast<char*>(&model_file_),
          reinterpret_cast<char*>(&other->model_file_));
}

std::string BaseOptions::GetTypeName() const {
  return "tflite.task.core.BaseOptions";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace task
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tflite::task::core::BaseOptions*
Arena::CreateMaybeMessage< ::tflite::task::core::BaseOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::task::core::BaseOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
