// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/vision/proto/image_classifier_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fclassifier_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fclassifier_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "tensorflow/lite/experimental/acceleration/configuration/configuration.pb.h"
#include "tensorflow_lite_support/cc/task/core/proto/base_options.pb.h"
#include "tensorflow_lite_support/cc/task/core/proto/external_file.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fclassifier_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fclassifier_5foptions_2eproto {
  static const uint32_t offsets[];
};
namespace tflite {
namespace task {
namespace vision {
class ImageClassifierOptions;
struct ImageClassifierOptionsDefaultTypeInternal;
extern ImageClassifierOptionsDefaultTypeInternal _ImageClassifierOptions_default_instance_;
}  // namespace vision
}  // namespace task
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> ::tflite::task::vision::ImageClassifierOptions* Arena::CreateMaybeMessage<::tflite::task::vision::ImageClassifierOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tflite {
namespace task {
namespace vision {

// ===================================================================

class ImageClassifierOptions final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:tflite.task.vision.ImageClassifierOptions) */ {
 public:
  inline ImageClassifierOptions() : ImageClassifierOptions(nullptr) {}
  ~ImageClassifierOptions() override;
  explicit PROTOBUF_CONSTEXPR ImageClassifierOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageClassifierOptions(const ImageClassifierOptions& from);
  ImageClassifierOptions(ImageClassifierOptions&& from) noexcept
    : ImageClassifierOptions() {
    *this = ::std::move(from);
  }

  inline ImageClassifierOptions& operator=(const ImageClassifierOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageClassifierOptions& operator=(ImageClassifierOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ImageClassifierOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageClassifierOptions* internal_default_instance() {
    return reinterpret_cast<const ImageClassifierOptions*>(
               &_ImageClassifierOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageClassifierOptions& a, ImageClassifierOptions& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ImageClassifierOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageClassifierOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageClassifierOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageClassifierOptions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ImageClassifierOptions& from);
  void MergeFrom(const ImageClassifierOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageClassifierOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.task.vision.ImageClassifierOptions";
  }
  protected:
  explicit ImageClassifierOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassNameWhitelistFieldNumber = 4,
    kClassNameBlacklistFieldNumber = 5,
    kDisplayNamesLocaleFieldNumber = 11,
    kComputeSettingsFieldNumber = 9,
    kModelFileWithMetadataFieldNumber = 10,
    kBaseOptionsFieldNumber = 14,
    kScoreThresholdFieldNumber = 3,
    kMaxResultsFieldNumber = 2,
    kNumThreadsFieldNumber = 13,
  };
  // repeated string class_name_whitelist = 4;
  int class_name_whitelist_size() const;
  private:
  int _internal_class_name_whitelist_size() const;
  public:
  void clear_class_name_whitelist();
  const std::string& class_name_whitelist(int index) const;
  std::string* mutable_class_name_whitelist(int index);
  void set_class_name_whitelist(int index, const std::string& value);
  void set_class_name_whitelist(int index, std::string&& value);
  void set_class_name_whitelist(int index, const char* value);
  void set_class_name_whitelist(int index, const char* value, size_t size);
  std::string* add_class_name_whitelist();
  void add_class_name_whitelist(const std::string& value);
  void add_class_name_whitelist(std::string&& value);
  void add_class_name_whitelist(const char* value);
  void add_class_name_whitelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& class_name_whitelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_class_name_whitelist();
  private:
  const std::string& _internal_class_name_whitelist(int index) const;
  std::string* _internal_add_class_name_whitelist();
  public:

  // repeated string class_name_blacklist = 5;
  int class_name_blacklist_size() const;
  private:
  int _internal_class_name_blacklist_size() const;
  public:
  void clear_class_name_blacklist();
  const std::string& class_name_blacklist(int index) const;
  std::string* mutable_class_name_blacklist(int index);
  void set_class_name_blacklist(int index, const std::string& value);
  void set_class_name_blacklist(int index, std::string&& value);
  void set_class_name_blacklist(int index, const char* value);
  void set_class_name_blacklist(int index, const char* value, size_t size);
  std::string* add_class_name_blacklist();
  void add_class_name_blacklist(const std::string& value);
  void add_class_name_blacklist(std::string&& value);
  void add_class_name_blacklist(const char* value);
  void add_class_name_blacklist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& class_name_blacklist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_class_name_blacklist();
  private:
  const std::string& _internal_class_name_blacklist(int index) const;
  std::string* _internal_add_class_name_blacklist();
  public:

  // optional string display_names_locale = 11 [default = "en"];
  bool has_display_names_locale() const;
  private:
  bool _internal_has_display_names_locale() const;
  public:
  void clear_display_names_locale();
  const std::string& display_names_locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_names_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_names_locale();
  PROTOBUF_NODISCARD std::string* release_display_names_locale();
  void set_allocated_display_names_locale(std::string* display_names_locale);
  private:
  const std::string& _internal_display_names_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_names_locale(const std::string& value);
  std::string* _internal_mutable_display_names_locale();
  public:

  // optional .tflite.proto.ComputeSettings compute_settings = 9;
  bool has_compute_settings() const;
  private:
  bool _internal_has_compute_settings() const;
  public:
  void clear_compute_settings();
  const ::tflite::proto::ComputeSettings& compute_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::ComputeSettings* release_compute_settings();
  ::tflite::proto::ComputeSettings* mutable_compute_settings();
  void set_allocated_compute_settings(::tflite::proto::ComputeSettings* compute_settings);
  private:
  const ::tflite::proto::ComputeSettings& _internal_compute_settings() const;
  ::tflite::proto::ComputeSettings* _internal_mutable_compute_settings();
  public:
  void unsafe_arena_set_allocated_compute_settings(
      ::tflite::proto::ComputeSettings* compute_settings);
  ::tflite::proto::ComputeSettings* unsafe_arena_release_compute_settings();

  // optional .tflite.task.core.ExternalFile model_file_with_metadata = 10;
  bool has_model_file_with_metadata() const;
  private:
  bool _internal_has_model_file_with_metadata() const;
  public:
  void clear_model_file_with_metadata();
  const ::tflite::task::core::ExternalFile& model_file_with_metadata() const;
  PROTOBUF_NODISCARD ::tflite::task::core::ExternalFile* release_model_file_with_metadata();
  ::tflite::task::core::ExternalFile* mutable_model_file_with_metadata();
  void set_allocated_model_file_with_metadata(::tflite::task::core::ExternalFile* model_file_with_metadata);
  private:
  const ::tflite::task::core::ExternalFile& _internal_model_file_with_metadata() const;
  ::tflite::task::core::ExternalFile* _internal_mutable_model_file_with_metadata();
  public:
  void unsafe_arena_set_allocated_model_file_with_metadata(
      ::tflite::task::core::ExternalFile* model_file_with_metadata);
  ::tflite::task::core::ExternalFile* unsafe_arena_release_model_file_with_metadata();

  // optional .tflite.task.core.BaseOptions base_options = 14;
  bool has_base_options() const;
  private:
  bool _internal_has_base_options() const;
  public:
  void clear_base_options();
  const ::tflite::task::core::BaseOptions& base_options() const;
  PROTOBUF_NODISCARD ::tflite::task::core::BaseOptions* release_base_options();
  ::tflite::task::core::BaseOptions* mutable_base_options();
  void set_allocated_base_options(::tflite::task::core::BaseOptions* base_options);
  private:
  const ::tflite::task::core::BaseOptions& _internal_base_options() const;
  ::tflite::task::core::BaseOptions* _internal_mutable_base_options();
  public:
  void unsafe_arena_set_allocated_base_options(
      ::tflite::task::core::BaseOptions* base_options);
  ::tflite::task::core::BaseOptions* unsafe_arena_release_base_options();

  // optional float score_threshold = 3;
  bool has_score_threshold() const;
  private:
  bool _internal_has_score_threshold() const;
  public:
  void clear_score_threshold();
  float score_threshold() const;
  void set_score_threshold(float value);
  private:
  float _internal_score_threshold() const;
  void _internal_set_score_threshold(float value);
  public:

  // optional int32 max_results = 2 [default = -1];
  bool has_max_results() const;
  private:
  bool _internal_has_max_results() const;
  public:
  void clear_max_results();
  int32_t max_results() const;
  void set_max_results(int32_t value);
  private:
  int32_t _internal_max_results() const;
  void _internal_set_max_results(int32_t value);
  public:

  // optional int32 num_threads = 13 [default = -1];
  bool has_num_threads() const;
  private:
  bool _internal_has_num_threads() const;
  public:
  void clear_num_threads();
  int32_t num_threads() const;
  void set_num_threads(int32_t value);
  private:
  int32_t _internal_num_threads() const;
  void _internal_set_num_threads(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tflite.task.vision.ImageClassifierOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> class_name_whitelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> class_name_blacklist_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_display_names_locale_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_names_locale_;
  ::tflite::proto::ComputeSettings* compute_settings_;
  ::tflite::task::core::ExternalFile* model_file_with_metadata_;
  ::tflite::task::core::BaseOptions* base_options_;
  float score_threshold_;
  int32_t max_results_;
  int32_t num_threads_;
  friend struct ::TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fclassifier_5foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageClassifierOptions

// optional .tflite.task.core.BaseOptions base_options = 14;
inline bool ImageClassifierOptions::_internal_has_base_options() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || base_options_ != nullptr);
  return value;
}
inline bool ImageClassifierOptions::has_base_options() const {
  return _internal_has_base_options();
}
inline const ::tflite::task::core::BaseOptions& ImageClassifierOptions::_internal_base_options() const {
  const ::tflite::task::core::BaseOptions* p = base_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::task::core::BaseOptions&>(
      ::tflite::task::core::_BaseOptions_default_instance_);
}
inline const ::tflite::task::core::BaseOptions& ImageClassifierOptions::base_options() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageClassifierOptions.base_options)
  return _internal_base_options();
}
inline void ImageClassifierOptions::unsafe_arena_set_allocated_base_options(
    ::tflite::task::core::BaseOptions* base_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_options_);
  }
  base_options_ = base_options;
  if (base_options) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ImageClassifierOptions.base_options)
}
inline ::tflite::task::core::BaseOptions* ImageClassifierOptions::release_base_options() {
  _has_bits_[0] &= ~0x00000008u;
  ::tflite::task::core::BaseOptions* temp = base_options_;
  base_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tflite::task::core::BaseOptions* ImageClassifierOptions::unsafe_arena_release_base_options() {
  // @@protoc_insertion_point(field_release:tflite.task.vision.ImageClassifierOptions.base_options)
  _has_bits_[0] &= ~0x00000008u;
  ::tflite::task::core::BaseOptions* temp = base_options_;
  base_options_ = nullptr;
  return temp;
}
inline ::tflite::task::core::BaseOptions* ImageClassifierOptions::_internal_mutable_base_options() {
  _has_bits_[0] |= 0x00000008u;
  if (base_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::task::core::BaseOptions>(GetArenaForAllocation());
    base_options_ = p;
  }
  return base_options_;
}
inline ::tflite::task::core::BaseOptions* ImageClassifierOptions::mutable_base_options() {
  ::tflite::task::core::BaseOptions* _msg = _internal_mutable_base_options();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageClassifierOptions.base_options)
  return _msg;
}
inline void ImageClassifierOptions::set_allocated_base_options(::tflite::task::core::BaseOptions* base_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_options_);
  }
  if (base_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_options));
    if (message_arena != submessage_arena) {
      base_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  base_options_ = base_options;
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ImageClassifierOptions.base_options)
}

// optional .tflite.task.core.ExternalFile model_file_with_metadata = 10;
inline bool ImageClassifierOptions::_internal_has_model_file_with_metadata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || model_file_with_metadata_ != nullptr);
  return value;
}
inline bool ImageClassifierOptions::has_model_file_with_metadata() const {
  return _internal_has_model_file_with_metadata();
}
inline const ::tflite::task::core::ExternalFile& ImageClassifierOptions::_internal_model_file_with_metadata() const {
  const ::tflite::task::core::ExternalFile* p = model_file_with_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::task::core::ExternalFile&>(
      ::tflite::task::core::_ExternalFile_default_instance_);
}
inline const ::tflite::task::core::ExternalFile& ImageClassifierOptions::model_file_with_metadata() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageClassifierOptions.model_file_with_metadata)
  return _internal_model_file_with_metadata();
}
inline void ImageClassifierOptions::unsafe_arena_set_allocated_model_file_with_metadata(
    ::tflite::task::core::ExternalFile* model_file_with_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_file_with_metadata_);
  }
  model_file_with_metadata_ = model_file_with_metadata;
  if (model_file_with_metadata) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ImageClassifierOptions.model_file_with_metadata)
}
inline ::tflite::task::core::ExternalFile* ImageClassifierOptions::release_model_file_with_metadata() {
  _has_bits_[0] &= ~0x00000004u;
  ::tflite::task::core::ExternalFile* temp = model_file_with_metadata_;
  model_file_with_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tflite::task::core::ExternalFile* ImageClassifierOptions::unsafe_arena_release_model_file_with_metadata() {
  // @@protoc_insertion_point(field_release:tflite.task.vision.ImageClassifierOptions.model_file_with_metadata)
  _has_bits_[0] &= ~0x00000004u;
  ::tflite::task::core::ExternalFile* temp = model_file_with_metadata_;
  model_file_with_metadata_ = nullptr;
  return temp;
}
inline ::tflite::task::core::ExternalFile* ImageClassifierOptions::_internal_mutable_model_file_with_metadata() {
  _has_bits_[0] |= 0x00000004u;
  if (model_file_with_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::task::core::ExternalFile>(GetArenaForAllocation());
    model_file_with_metadata_ = p;
  }
  return model_file_with_metadata_;
}
inline ::tflite::task::core::ExternalFile* ImageClassifierOptions::mutable_model_file_with_metadata() {
  ::tflite::task::core::ExternalFile* _msg = _internal_mutable_model_file_with_metadata();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageClassifierOptions.model_file_with_metadata)
  return _msg;
}
inline void ImageClassifierOptions::set_allocated_model_file_with_metadata(::tflite::task::core::ExternalFile* model_file_with_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_file_with_metadata_);
  }
  if (model_file_with_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_file_with_metadata));
    if (message_arena != submessage_arena) {
      model_file_with_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_file_with_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  model_file_with_metadata_ = model_file_with_metadata;
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ImageClassifierOptions.model_file_with_metadata)
}

// optional string display_names_locale = 11 [default = "en"];
inline bool ImageClassifierOptions::_internal_has_display_names_locale() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageClassifierOptions::has_display_names_locale() const {
  return _internal_has_display_names_locale();
}
inline void ImageClassifierOptions::clear_display_names_locale() {
  display_names_locale_.ClearToDefault(::tflite::task::vision::ImageClassifierOptions::_i_give_permission_to_break_this_code_default_display_names_locale_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageClassifierOptions::display_names_locale() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageClassifierOptions.display_names_locale)
  if (display_names_locale_.IsDefault()) return _i_give_permission_to_break_this_code_default_display_names_locale_.get();
  return _internal_display_names_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageClassifierOptions::set_display_names_locale(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 display_names_locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.task.vision.ImageClassifierOptions.display_names_locale)
}
inline std::string* ImageClassifierOptions::mutable_display_names_locale() {
  std::string* _s = _internal_mutable_display_names_locale();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageClassifierOptions.display_names_locale)
  return _s;
}
inline const std::string& ImageClassifierOptions::_internal_display_names_locale() const {
  return display_names_locale_.Get();
}
inline void ImageClassifierOptions::_internal_set_display_names_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  display_names_locale_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageClassifierOptions::_internal_mutable_display_names_locale() {
  _has_bits_[0] |= 0x00000001u;
  return display_names_locale_.Mutable(::tflite::task::vision::ImageClassifierOptions::_i_give_permission_to_break_this_code_default_display_names_locale_, GetArenaForAllocation());
}
inline std::string* ImageClassifierOptions::release_display_names_locale() {
  // @@protoc_insertion_point(field_release:tflite.task.vision.ImageClassifierOptions.display_names_locale)
  if (!_internal_has_display_names_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = display_names_locale_.Release();
  return p;
}
inline void ImageClassifierOptions::set_allocated_display_names_locale(std::string* display_names_locale) {
  if (display_names_locale != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_names_locale_.SetAllocated(display_names_locale, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ImageClassifierOptions.display_names_locale)
}

// optional int32 max_results = 2 [default = -1];
inline bool ImageClassifierOptions::_internal_has_max_results() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ImageClassifierOptions::has_max_results() const {
  return _internal_has_max_results();
}
inline void ImageClassifierOptions::clear_max_results() {
  max_results_ = -1;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t ImageClassifierOptions::_internal_max_results() const {
  return max_results_;
}
inline int32_t ImageClassifierOptions::max_results() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageClassifierOptions.max_results)
  return _internal_max_results();
}
inline void ImageClassifierOptions::_internal_set_max_results(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  max_results_ = value;
}
inline void ImageClassifierOptions::set_max_results(int32_t value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ImageClassifierOptions.max_results)
}

// optional float score_threshold = 3;
inline bool ImageClassifierOptions::_internal_has_score_threshold() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImageClassifierOptions::has_score_threshold() const {
  return _internal_has_score_threshold();
}
inline void ImageClassifierOptions::clear_score_threshold() {
  score_threshold_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ImageClassifierOptions::_internal_score_threshold() const {
  return score_threshold_;
}
inline float ImageClassifierOptions::score_threshold() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageClassifierOptions.score_threshold)
  return _internal_score_threshold();
}
inline void ImageClassifierOptions::_internal_set_score_threshold(float value) {
  _has_bits_[0] |= 0x00000010u;
  score_threshold_ = value;
}
inline void ImageClassifierOptions::set_score_threshold(float value) {
  _internal_set_score_threshold(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ImageClassifierOptions.score_threshold)
}

// repeated string class_name_whitelist = 4;
inline int ImageClassifierOptions::_internal_class_name_whitelist_size() const {
  return class_name_whitelist_.size();
}
inline int ImageClassifierOptions::class_name_whitelist_size() const {
  return _internal_class_name_whitelist_size();
}
inline void ImageClassifierOptions::clear_class_name_whitelist() {
  class_name_whitelist_.Clear();
}
inline std::string* ImageClassifierOptions::add_class_name_whitelist() {
  std::string* _s = _internal_add_class_name_whitelist();
  // @@protoc_insertion_point(field_add_mutable:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
  return _s;
}
inline const std::string& ImageClassifierOptions::_internal_class_name_whitelist(int index) const {
  return class_name_whitelist_.Get(index);
}
inline const std::string& ImageClassifierOptions::class_name_whitelist(int index) const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
  return _internal_class_name_whitelist(index);
}
inline std::string* ImageClassifierOptions::mutable_class_name_whitelist(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
  return class_name_whitelist_.Mutable(index);
}
inline void ImageClassifierOptions::set_class_name_whitelist(int index, const std::string& value) {
  class_name_whitelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
}
inline void ImageClassifierOptions::set_class_name_whitelist(int index, std::string&& value) {
  class_name_whitelist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
}
inline void ImageClassifierOptions::set_class_name_whitelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_name_whitelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
}
inline void ImageClassifierOptions::set_class_name_whitelist(int index, const char* value, size_t size) {
  class_name_whitelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
}
inline std::string* ImageClassifierOptions::_internal_add_class_name_whitelist() {
  return class_name_whitelist_.Add();
}
inline void ImageClassifierOptions::add_class_name_whitelist(const std::string& value) {
  class_name_whitelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
}
inline void ImageClassifierOptions::add_class_name_whitelist(std::string&& value) {
  class_name_whitelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
}
inline void ImageClassifierOptions::add_class_name_whitelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_name_whitelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
}
inline void ImageClassifierOptions::add_class_name_whitelist(const char* value, size_t size) {
  class_name_whitelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ImageClassifierOptions::class_name_whitelist() const {
  // @@protoc_insertion_point(field_list:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
  return class_name_whitelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ImageClassifierOptions::mutable_class_name_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:tflite.task.vision.ImageClassifierOptions.class_name_whitelist)
  return &class_name_whitelist_;
}

// repeated string class_name_blacklist = 5;
inline int ImageClassifierOptions::_internal_class_name_blacklist_size() const {
  return class_name_blacklist_.size();
}
inline int ImageClassifierOptions::class_name_blacklist_size() const {
  return _internal_class_name_blacklist_size();
}
inline void ImageClassifierOptions::clear_class_name_blacklist() {
  class_name_blacklist_.Clear();
}
inline std::string* ImageClassifierOptions::add_class_name_blacklist() {
  std::string* _s = _internal_add_class_name_blacklist();
  // @@protoc_insertion_point(field_add_mutable:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
  return _s;
}
inline const std::string& ImageClassifierOptions::_internal_class_name_blacklist(int index) const {
  return class_name_blacklist_.Get(index);
}
inline const std::string& ImageClassifierOptions::class_name_blacklist(int index) const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
  return _internal_class_name_blacklist(index);
}
inline std::string* ImageClassifierOptions::mutable_class_name_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
  return class_name_blacklist_.Mutable(index);
}
inline void ImageClassifierOptions::set_class_name_blacklist(int index, const std::string& value) {
  class_name_blacklist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
}
inline void ImageClassifierOptions::set_class_name_blacklist(int index, std::string&& value) {
  class_name_blacklist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
}
inline void ImageClassifierOptions::set_class_name_blacklist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_name_blacklist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
}
inline void ImageClassifierOptions::set_class_name_blacklist(int index, const char* value, size_t size) {
  class_name_blacklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
}
inline std::string* ImageClassifierOptions::_internal_add_class_name_blacklist() {
  return class_name_blacklist_.Add();
}
inline void ImageClassifierOptions::add_class_name_blacklist(const std::string& value) {
  class_name_blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
}
inline void ImageClassifierOptions::add_class_name_blacklist(std::string&& value) {
  class_name_blacklist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
}
inline void ImageClassifierOptions::add_class_name_blacklist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_name_blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
}
inline void ImageClassifierOptions::add_class_name_blacklist(const char* value, size_t size) {
  class_name_blacklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ImageClassifierOptions::class_name_blacklist() const {
  // @@protoc_insertion_point(field_list:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
  return class_name_blacklist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ImageClassifierOptions::mutable_class_name_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:tflite.task.vision.ImageClassifierOptions.class_name_blacklist)
  return &class_name_blacklist_;
}

// optional int32 num_threads = 13 [default = -1];
inline bool ImageClassifierOptions::_internal_has_num_threads() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ImageClassifierOptions::has_num_threads() const {
  return _internal_has_num_threads();
}
inline void ImageClassifierOptions::clear_num_threads() {
  num_threads_ = -1;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t ImageClassifierOptions::_internal_num_threads() const {
  return num_threads_;
}
inline int32_t ImageClassifierOptions::num_threads() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageClassifierOptions.num_threads)
  return _internal_num_threads();
}
inline void ImageClassifierOptions::_internal_set_num_threads(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  num_threads_ = value;
}
inline void ImageClassifierOptions::set_num_threads(int32_t value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ImageClassifierOptions.num_threads)
}

// optional .tflite.proto.ComputeSettings compute_settings = 9;
inline bool ImageClassifierOptions::_internal_has_compute_settings() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || compute_settings_ != nullptr);
  return value;
}
inline bool ImageClassifierOptions::has_compute_settings() const {
  return _internal_has_compute_settings();
}
inline const ::tflite::proto::ComputeSettings& ImageClassifierOptions::_internal_compute_settings() const {
  const ::tflite::proto::ComputeSettings* p = compute_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::ComputeSettings&>(
      ::tflite::proto::_ComputeSettings_default_instance_);
}
inline const ::tflite::proto::ComputeSettings& ImageClassifierOptions::compute_settings() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageClassifierOptions.compute_settings)
  return _internal_compute_settings();
}
inline void ImageClassifierOptions::unsafe_arena_set_allocated_compute_settings(
    ::tflite::proto::ComputeSettings* compute_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compute_settings_);
  }
  compute_settings_ = compute_settings;
  if (compute_settings) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ImageClassifierOptions.compute_settings)
}
inline ::tflite::proto::ComputeSettings* ImageClassifierOptions::release_compute_settings() {
  _has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::ComputeSettings* temp = compute_settings_;
  compute_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tflite::proto::ComputeSettings* ImageClassifierOptions::unsafe_arena_release_compute_settings() {
  // @@protoc_insertion_point(field_release:tflite.task.vision.ImageClassifierOptions.compute_settings)
  _has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::ComputeSettings* temp = compute_settings_;
  compute_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::ComputeSettings* ImageClassifierOptions::_internal_mutable_compute_settings() {
  _has_bits_[0] |= 0x00000002u;
  if (compute_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::ComputeSettings>(GetArenaForAllocation());
    compute_settings_ = p;
  }
  return compute_settings_;
}
inline ::tflite::proto::ComputeSettings* ImageClassifierOptions::mutable_compute_settings() {
  ::tflite::proto::ComputeSettings* _msg = _internal_mutable_compute_settings();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageClassifierOptions.compute_settings)
  return _msg;
}
inline void ImageClassifierOptions::set_allocated_compute_settings(::tflite::proto::ComputeSettings* compute_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(compute_settings_);
  }
  if (compute_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compute_settings));
    if (message_arena != submessage_arena) {
      compute_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compute_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  compute_settings_ = compute_settings;
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ImageClassifierOptions.compute_settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace vision
}  // namespace task
}  // namespace tflite

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fclassifier_5foptions_2eproto
