// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/text/proto/nl_classifier_options.proto

#include "tensorflow_lite_support/cc/task/text/proto/nl_classifier_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tflite {
namespace task {
namespace text {
PROTOBUF_CONSTEXPR NLClassifierOptions::NLClassifierOptions(
    ::_pbi::ConstantInitialized)
  : input_tensor_name_(nullptr, ::_pbi::ConstantInitialized{})
  , output_score_tensor_name_(nullptr, ::_pbi::ConstantInitialized{})
  , output_label_tensor_name_(nullptr, ::_pbi::ConstantInitialized{})
  , base_options_(nullptr)
  , input_tensor_index_(0)
  , output_score_tensor_index_(0)
  , output_label_tensor_index_(-1){}
struct NLClassifierOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NLClassifierOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NLClassifierOptionsDefaultTypeInternal() {}
  union {
    NLClassifierOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NLClassifierOptionsDefaultTypeInternal _NLClassifierOptions_default_instance_;
}  // namespace text
}  // namespace task
}  // namespace tflite
namespace tflite {
namespace task {
namespace text {

// ===================================================================

class NLClassifierOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<NLClassifierOptions>()._has_bits_);
  static const ::tflite::task::core::BaseOptions& base_options(const NLClassifierOptions* msg);
  static void set_has_base_options(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_tensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_score_tensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_label_tensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_input_tensor_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_output_score_tensor_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_label_tensor_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::tflite::task::core::BaseOptions&
NLClassifierOptions::_Internal::base_options(const NLClassifierOptions* msg) {
  return *msg->base_options_;
}
void NLClassifierOptions::clear_base_options() {
  if (base_options_ != nullptr) base_options_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NLClassifierOptions::_i_give_permission_to_break_this_code_default_input_tensor_name_{{{"INPUT", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NLClassifierOptions::_i_give_permission_to_break_this_code_default_output_score_tensor_name_{{{"OUTPUT_SCORE", 12}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NLClassifierOptions::_i_give_permission_to_break_this_code_default_output_label_tensor_name_{{{"OUTPUT_LABEL", 12}}, {nullptr}};
NLClassifierOptions::NLClassifierOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tflite.task.text.NLClassifierOptions)
}
NLClassifierOptions::NLClassifierOptions(const NLClassifierOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  input_tensor_name_.InitDefault();
  if (from._internal_has_input_tensor_name()) {
    input_tensor_name_.Set(from._internal_input_tensor_name(), 
      GetArenaForAllocation());
  }
  output_score_tensor_name_.InitDefault();
  if (from._internal_has_output_score_tensor_name()) {
    output_score_tensor_name_.Set(from._internal_output_score_tensor_name(), 
      GetArenaForAllocation());
  }
  output_label_tensor_name_.InitDefault();
  if (from._internal_has_output_label_tensor_name()) {
    output_label_tensor_name_.Set(from._internal_output_label_tensor_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base_options()) {
    base_options_ = new ::tflite::task::core::BaseOptions(*from.base_options_);
  } else {
    base_options_ = nullptr;
  }
  ::memcpy(&input_tensor_index_, &from.input_tensor_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_label_tensor_index_) -
    reinterpret_cast<char*>(&input_tensor_index_)) + sizeof(output_label_tensor_index_));
  // @@protoc_insertion_point(copy_constructor:tflite.task.text.NLClassifierOptions)
}

inline void NLClassifierOptions::SharedCtor() {
input_tensor_name_.InitDefault();
output_score_tensor_name_.InitDefault();
output_label_tensor_name_.InitDefault();
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&output_score_tensor_index_) -
    reinterpret_cast<char*>(&base_options_)) + sizeof(output_score_tensor_index_));
output_label_tensor_index_ = -1;
}

NLClassifierOptions::~NLClassifierOptions() {
  // @@protoc_insertion_point(destructor:tflite.task.text.NLClassifierOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NLClassifierOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  input_tensor_name_.Destroy();
  output_score_tensor_name_.Destroy();
  output_label_tensor_name_.Destroy();
  if (this != internal_default_instance()) delete base_options_;
}

void NLClassifierOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NLClassifierOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.text.NLClassifierOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      input_tensor_name_.ClearToDefault(::tflite::task::text::NLClassifierOptions::_i_give_permission_to_break_this_code_default_input_tensor_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      output_score_tensor_name_.ClearToDefault(::tflite::task::text::NLClassifierOptions::_i_give_permission_to_break_this_code_default_output_score_tensor_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      output_label_tensor_name_.ClearToDefault(::tflite::task::text::NLClassifierOptions::_i_give_permission_to_break_this_code_default_output_label_tensor_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(base_options_ != nullptr);
      base_options_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&input_tensor_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_score_tensor_index_) -
        reinterpret_cast<char*>(&input_tensor_index_)) + sizeof(output_score_tensor_index_));
    output_label_tensor_index_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NLClassifierOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .tflite.task.core.BaseOptions base_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string input_tensor_name = 2 [default = "INPUT"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input_tensor_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_score_tensor_name = 3 [default = "OUTPUT_SCORE"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_output_score_tensor_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_label_tensor_name = 4 [default = "OUTPUT_LABEL"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_output_label_tensor_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 input_tensor_index = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_input_tensor_index(&has_bits);
          input_tensor_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 output_score_tensor_index = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_output_score_tensor_index(&has_bits);
          output_score_tensor_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 output_label_tensor_index = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_output_label_tensor_index(&has_bits);
          output_label_tensor_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NLClassifierOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.text.NLClassifierOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.task.core.BaseOptions base_options = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_options(this),
        _Internal::base_options(this).GetCachedSize(), target, stream);
  }

  // optional string input_tensor_name = 2 [default = "INPUT"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_tensor_name(), target);
  }

  // optional string output_score_tensor_name = 3 [default = "OUTPUT_SCORE"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_output_score_tensor_name(), target);
  }

  // optional string output_label_tensor_name = 4 [default = "OUTPUT_LABEL"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_output_label_tensor_name(), target);
  }

  // optional int32 input_tensor_index = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_input_tensor_index(), target);
  }

  // optional int32 output_score_tensor_index = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_output_score_tensor_index(), target);
  }

  // optional int32 output_label_tensor_index = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_output_label_tensor_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.text.NLClassifierOptions)
  return target;
}

size_t NLClassifierOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.text.NLClassifierOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string input_tensor_name = 2 [default = "INPUT"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_tensor_name());
    }

    // optional string output_score_tensor_name = 3 [default = "OUTPUT_SCORE"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_score_tensor_name());
    }

    // optional string output_label_tensor_name = 4 [default = "OUTPUT_LABEL"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_label_tensor_name());
    }

    // optional .tflite.task.core.BaseOptions base_options = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_options_);
    }

    // optional int32 input_tensor_index = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_input_tensor_index());
    }

    // optional int32 output_score_tensor_index = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_output_score_tensor_index());
    }

    // optional int32 output_label_tensor_index = 7 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_output_label_tensor_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NLClassifierOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NLClassifierOptions*>(
      &from));
}

void NLClassifierOptions::MergeFrom(const NLClassifierOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.text.NLClassifierOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_input_tensor_name(from._internal_input_tensor_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_output_score_tensor_name(from._internal_output_score_tensor_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_output_label_tensor_name(from._internal_output_label_tensor_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_base_options()->::tflite::task::core::BaseOptions::MergeFrom(from._internal_base_options());
    }
    if (cached_has_bits & 0x00000010u) {
      input_tensor_index_ = from.input_tensor_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      output_score_tensor_index_ = from.output_score_tensor_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      output_label_tensor_index_ = from.output_label_tensor_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NLClassifierOptions::CopyFrom(const NLClassifierOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.text.NLClassifierOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NLClassifierOptions::IsInitialized() const {
  return true;
}

void NLClassifierOptions::InternalSwap(NLClassifierOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &input_tensor_name_, lhs_arena,
      &other->input_tensor_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &output_score_tensor_name_, lhs_arena,
      &other->output_score_tensor_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &output_label_tensor_name_, lhs_arena,
      &other->output_label_tensor_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NLClassifierOptions, output_score_tensor_index_)
      + sizeof(NLClassifierOptions::output_score_tensor_index_)
      - PROTOBUF_FIELD_OFFSET(NLClassifierOptions, base_options_)>(
          reinterpret_cast<char*>(&base_options_),
          reinterpret_cast<char*>(&other->base_options_));
  swap(output_label_tensor_index_, other->output_label_tensor_index_);
}

std::string NLClassifierOptions::GetTypeName() const {
  return "tflite.task.text.NLClassifierOptions";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace text
}  // namespace task
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tflite::task::text::NLClassifierOptions*
Arena::CreateMaybeMessage< ::tflite::task::text::NLClassifierOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::task::text::NLClassifierOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
