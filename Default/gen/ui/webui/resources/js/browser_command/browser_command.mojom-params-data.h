// ui/webui/resources/js/browser_command/browser_command.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_WEBUI_RESOURCES_JS_BROWSER_COMMAND_BROWSER_COMMAND_MOJOM_PARAMS_DATA_H_
#define UI_WEBUI_RESOURCES_JS_BROWSER_COMMAND_BROWSER_COMMAND_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace browser_command {
namespace mojom {
namespace internal {

class ValidationContext;
class  CommandHandlerFactory_CreateBrowserCommandHandler_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data handler;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CommandHandlerFactory_CreateBrowserCommandHandler_Params_Data>;

  CommandHandlerFactory_CreateBrowserCommandHandler_Params_Data();
  ~CommandHandlerFactory_CreateBrowserCommandHandler_Params_Data() = delete;
};
static_assert(sizeof(CommandHandlerFactory_CreateBrowserCommandHandler_Params_Data) == 16,
              "Bad sizeof(CommandHandlerFactory_CreateBrowserCommandHandler_Params_Data)");
class  CommandHandler_CanExecuteCommand_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t command_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CommandHandler_CanExecuteCommand_Params_Data>;

  CommandHandler_CanExecuteCommand_Params_Data();
  ~CommandHandler_CanExecuteCommand_Params_Data() = delete;
};
static_assert(sizeof(CommandHandler_CanExecuteCommand_Params_Data) == 16,
              "Bad sizeof(CommandHandler_CanExecuteCommand_Params_Data)");
class  CommandHandler_CanExecuteCommand_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t can_execute : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<CommandHandler_CanExecuteCommand_ResponseParams_Data>;

  CommandHandler_CanExecuteCommand_ResponseParams_Data();
  ~CommandHandler_CanExecuteCommand_ResponseParams_Data() = delete;
};
static_assert(sizeof(CommandHandler_CanExecuteCommand_ResponseParams_Data) == 16,
              "Bad sizeof(CommandHandler_CanExecuteCommand_ResponseParams_Data)");
class  CommandHandler_ExecuteCommand_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t command_id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::ClickInfo_Data> click_info;

 private:
  friend class mojo::internal::MessageFragment<CommandHandler_ExecuteCommand_Params_Data>;

  CommandHandler_ExecuteCommand_Params_Data();
  ~CommandHandler_ExecuteCommand_Params_Data() = delete;
};
static_assert(sizeof(CommandHandler_ExecuteCommand_Params_Data) == 24,
              "Bad sizeof(CommandHandler_ExecuteCommand_Params_Data)");
class  CommandHandler_ExecuteCommand_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t command_executed : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<CommandHandler_ExecuteCommand_ResponseParams_Data>;

  CommandHandler_ExecuteCommand_ResponseParams_Data();
  ~CommandHandler_ExecuteCommand_ResponseParams_Data() = delete;
};
static_assert(sizeof(CommandHandler_ExecuteCommand_ResponseParams_Data) == 16,
              "Bad sizeof(CommandHandler_ExecuteCommand_ResponseParams_Data)");

}  // namespace internal


class CommandHandlerFactory_CreateBrowserCommandHandler_ParamsDataView {
 public:
  CommandHandlerFactory_CreateBrowserCommandHandler_ParamsDataView() = default;

  CommandHandlerFactory_CreateBrowserCommandHandler_ParamsDataView(
      internal::CommandHandlerFactory_CreateBrowserCommandHandler_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeHandler() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::browser_command::mojom::CommandHandlerInterfaceBase>>(
            &data_->handler, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CommandHandlerFactory_CreateBrowserCommandHandler_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CommandHandler_CanExecuteCommand_ParamsDataView {
 public:
  CommandHandler_CanExecuteCommand_ParamsDataView() = default;

  CommandHandler_CanExecuteCommand_ParamsDataView(
      internal::CommandHandler_CanExecuteCommand_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadCommandId(UserType* output) const {
    auto data_value = data_->command_id;
    return mojo::internal::Deserialize<::browser_command::mojom::Command>(
        data_value, output);
  }
  Command command_id() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::browser_command::mojom::Command>(data_->command_id));
  }
 private:
  internal::CommandHandler_CanExecuteCommand_Params_Data* data_ = nullptr;
};



class CommandHandler_CanExecuteCommand_ResponseParamsDataView {
 public:
  CommandHandler_CanExecuteCommand_ResponseParamsDataView() = default;

  CommandHandler_CanExecuteCommand_ResponseParamsDataView(
      internal::CommandHandler_CanExecuteCommand_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool can_execute() const {
    return data_->can_execute;
  }
 private:
  internal::CommandHandler_CanExecuteCommand_ResponseParams_Data* data_ = nullptr;
};



class CommandHandler_ExecuteCommand_ParamsDataView {
 public:
  CommandHandler_ExecuteCommand_ParamsDataView() = default;

  CommandHandler_ExecuteCommand_ParamsDataView(
      internal::CommandHandler_ExecuteCommand_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadCommandId(UserType* output) const {
    auto data_value = data_->command_id;
    return mojo::internal::Deserialize<::browser_command::mojom::Command>(
        data_value, output);
  }
  Command command_id() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::browser_command::mojom::Command>(data_->command_id));
  }
  inline void GetClickInfoDataView(
      ClickInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClickInfo(UserType* output) {
    
    auto* pointer = data_->click_info.Get();
    return mojo::internal::Deserialize<::browser_command::mojom::ClickInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::CommandHandler_ExecuteCommand_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CommandHandler_ExecuteCommand_ResponseParamsDataView {
 public:
  CommandHandler_ExecuteCommand_ResponseParamsDataView() = default;

  CommandHandler_ExecuteCommand_ResponseParamsDataView(
      internal::CommandHandler_ExecuteCommand_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool command_executed() const {
    return data_->command_executed;
  }
 private:
  internal::CommandHandler_ExecuteCommand_ResponseParams_Data* data_ = nullptr;
};








inline void CommandHandler_ExecuteCommand_ParamsDataView::GetClickInfoDataView(
    ClickInfoDataView* output) {
  auto pointer = data_->click_info.Get();
  *output = ClickInfoDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace browser_command

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // UI_WEBUI_RESOURCES_JS_BROWSER_COMMAND_BROWSER_COMMAND_MOJOM_PARAMS_DATA_H_