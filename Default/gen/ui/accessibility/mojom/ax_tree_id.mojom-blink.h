// ui/accessibility/mojom/ax_tree_id.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_ACCESSIBILITY_MOJOM_AX_TREE_ID_MOJOM_BLINK_H_
#define UI_ACCESSIBILITY_MOJOM_AX_TREE_ID_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/accessibility/mojom/ax_tree_id.mojom-shared.h"
#include "ui/accessibility/mojom/ax_tree_id.mojom-blink-forward.h"
#include "ui/accessibility/ax_enums.mojom-blink-forward.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"








namespace ax {
namespace mojom {
namespace blink {





class  AXTreeID {
 public:
  using DataView = AXTreeIDDataView;
  using Data_ = internal::AXTreeID_Data;
  using Tag = Data_::AXTreeID_Tag;

  template <typename... Args>
  static AXTreeIDPtr New(Args&&... args) {
    static_assert(
        sizeof...(args) < 0,
        "Do not use Union::New(); to create a union of a given subtype, use "
        "New<SubType>(), not New() followed by set_<sub_type>(). To represent "
        "an empty union, mark the field or parameter as nullable in the mojom "
        "definition.");
  }
  // Construct an instance holding |unknown|.
  static AXTreeIDPtr
  NewUnknown(
      uint8_t unknown) {
    auto result = AXTreeIDPtr(absl::in_place);
    result->set_unknown(std::move(unknown));
    return result;
  }
  // Construct an instance holding |token|.
  static AXTreeIDPtr
  NewToken(
      const ::base::UnguessableToken& token) {
    auto result = AXTreeIDPtr(absl::in_place);
    result->set_token(std::move(token));
    return result;
  }

  template <typename U>
  static AXTreeIDPtr From(const U& u) {
    return mojo::TypeConverter<AXTreeIDPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AXTreeID>::Convert(*this);
  }

  AXTreeID();
  ~AXTreeID();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = AXTreeIDPtr>
  AXTreeIDPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, AXTreeID>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, AXTreeID>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
  bool is_unknown() const { return tag_ == Tag::kUnknown; }

  
  uint8_t get_unknown() const {
    CHECK(tag_ == Tag::kUnknown);
    return data_.unknown;
  }

  
  void set_unknown(
      uint8_t unknown);
  
  bool is_token() const { return tag_ == Tag::kToken; }

  
  ::base::UnguessableToken& get_token() const {
    CHECK(tag_ == Tag::kToken);
    return *(data_.token);
  }

  
  void set_token(
      const ::base::UnguessableToken& token);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AXTreeID::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<AXTreeID::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() = default;
    ~Union_() = default;
    uint8_t unknown;
    ::base::UnguessableToken* token;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};

template <typename UnionPtrType>
AXTreeIDPtr AXTreeID::Clone() const {
  switch (tag_) {
    case Tag::kUnknown:
      return NewUnknown(
          mojo::Clone(data_.unknown));
    case Tag::kToken:
      return NewToken(
          mojo::Clone(*data_.token));
  }
  return nullptr;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, AXTreeID>::value>::type*>
bool AXTreeID::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::kUnknown:
      return mojo::Equals(data_.unknown, other.data_.unknown);
    case Tag::kToken:
      return mojo::Equals(*(data_.token), *(other.data_.token));
  }

  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace ax

namespace mojo {


template <>
struct  UnionTraits<::ax::mojom::blink::AXTreeID::DataView,
                                        ::ax::mojom::blink::AXTreeIDPtr> {
  static bool IsNull(const ::ax::mojom::blink::AXTreeIDPtr& input) { return !input; }
  static void SetToNull(::ax::mojom::blink::AXTreeIDPtr* output) { output->reset(); }

  static ::ax::mojom::blink::AXTreeID::Tag GetTag(const ::ax::mojom::blink::AXTreeIDPtr& input) {
    return input->which();
  }

  static  uint8_t unknown(const ::ax::mojom::blink::AXTreeIDPtr& input) {
    return input->get_unknown();
  }

  static const ::base::UnguessableToken& token(const ::ax::mojom::blink::AXTreeIDPtr& input) {
    return input->get_token();
  }

  static bool Read(::ax::mojom::blink::AXTreeID::DataView input, ::ax::mojom::blink::AXTreeIDPtr* output);
};

}  // namespace mojo

#endif  // UI_ACCESSIBILITY_MOJOM_AX_TREE_ID_MOJOM_BLINK_H_