// ui/display/mojom/screen_info.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_DISPLAY_MOJOM_SCREEN_INFO_MOJOM_SHARED_INTERNAL_H_
#define UI_DISPLAY_MOJOM_SCREEN_INFO_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "ui/display/mojom/screen_orientation.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "ui/gfx/mojom/display_color_spaces.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace display {
namespace mojom {
namespace internal {
class ScreenInfo_Data;

#pragma pack(push, 1)
class  ScreenInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  float device_scale_factor;
  uint32_t depth;
  mojo::internal::Pointer<::gfx::mojom::internal::DisplayColorSpaces_Data> display_color_spaces;
  uint32_t depth_per_component;
  uint8_t is_monochrome : 1;
  uint8_t is_extended : 1;
  uint8_t is_primary : 1;
  uint8_t is_internal : 1;
  uint8_t pad7_[1];
  uint16_t orientation_angle;
  uint32_t display_frequency;
  int32_t orientation_type;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> available_rect;
  mojo::internal::Pointer<mojo::internal::String_Data> label;
  int64_t display_id;

 private:
  friend class mojo::internal::MessageFragment<ScreenInfo_Data>;

  ScreenInfo_Data();
  ~ScreenInfo_Data() = delete;
};
static_assert(sizeof(ScreenInfo_Data) == 72,
              "Bad sizeof(ScreenInfo_Data)");
// Used by ScreenInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ScreenInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ScreenInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ScreenInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<ScreenInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ScreenInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace display

#endif  // UI_DISPLAY_MOJOM_SCREEN_INFO_MOJOM_SHARED_INTERNAL_H_