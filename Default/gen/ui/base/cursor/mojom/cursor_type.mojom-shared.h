// ui/base/cursor/mojom/cursor_type.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_BASE_CURSOR_MOJOM_CURSOR_TYPE_MOJOM_SHARED_H_
#define UI_BASE_CURSOR_MOJOM_CURSOR_TYPE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/base/cursor/mojom/cursor_type.mojom-shared-internal.h"







namespace ui {
namespace mojom {


}  // namespace mojom
}  // namespace ui

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace ui {
namespace mojom {


enum class CursorType : int32_t {
  
  kNull = -1,
  
  kPointer = 0,
  
  kCross = 1,
  
  kHand = 2,
  
  kIBeam = 3,
  
  kWait = 4,
  
  kHelp = 5,
  
  kEastResize = 6,
  
  kNorthResize = 7,
  
  kNorthEastResize = 8,
  
  kNorthWestResize = 9,
  
  kSouthResize = 10,
  
  kSouthEastResize = 11,
  
  kSouthWestResize = 12,
  
  kWestResize = 13,
  
  kNorthSouthResize = 14,
  
  kEastWestResize = 15,
  
  kNorthEastSouthWestResize = 16,
  
  kNorthWestSouthEastResize = 17,
  
  kColumnResize = 18,
  
  kRowResize = 19,
  
  kMiddlePanning = 20,
  
  kEastPanning = 21,
  
  kNorthPanning = 22,
  
  kNorthEastPanning = 23,
  
  kNorthWestPanning = 24,
  
  kSouthPanning = 25,
  
  kSouthEastPanning = 26,
  
  kSouthWestPanning = 27,
  
  kWestPanning = 28,
  
  kMove = 29,
  
  kVerticalText = 30,
  
  kCell = 31,
  
  kContextMenu = 32,
  
  kAlias = 33,
  
  kProgress = 34,
  
  kNoDrop = 35,
  
  kCopy = 36,
  
  kNone = 37,
  
  kNotAllowed = 38,
  
  kZoomIn = 39,
  
  kZoomOut = 40,
  
  kGrab = 41,
  
  kGrabbing = 42,
  
  kMiddlePanningVertical = 43,
  
  kMiddlePanningHorizontal = 44,
  
  kCustom = 45,
  
  kDndNone = 46,
  
  kDndMove = 47,
  
  kDndCopy = 48,
  
  kDndLink = 49,
  
  kEastWestNoResize = 50,
  
  kNorthSouthNoResize = 51,
  
  kNorthEastSouthWestNoResize = 52,
  
  kNorthWestSouthEastNoResize = 53,
  kMinValue = -1,
  kMaxValue = 53,
};

 std::ostream& operator<<(std::ostream& os, CursorType value);
inline bool IsKnownEnumValue(CursorType value) {
  return internal::CursorType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace ui

namespace std {

template <>
struct hash<::ui::mojom::CursorType>
    : public mojo::internal::EnumHashImpl<::ui::mojom::CursorType> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ui::mojom::CursorType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ui::mojom::CursorType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ui::mojom::CursorType>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace ui {
namespace mojom {


}  // namespace mojom
}  // namespace ui

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::ui::mojom::CursorType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ui::mojom::CursorType value);
};

} // namespace perfetto

#endif  // UI_BASE_CURSOR_MOJOM_CURSOR_TYPE_MOJOM_SHARED_H_