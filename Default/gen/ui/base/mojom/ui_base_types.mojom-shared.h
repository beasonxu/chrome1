// ui/base/mojom/ui_base_types.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_BASE_MOJOM_UI_BASE_TYPES_MOJOM_SHARED_H_
#define UI_BASE_MOJOM_UI_BASE_TYPES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/base/mojom/ui_base_types.mojom-shared-internal.h"







namespace ui {
namespace mojom {


}  // namespace mojom
}  // namespace ui

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace ui {
namespace mojom {


enum class DialogButton : int32_t {
  
  NONE = 0,
  
  OK = 1,
  
  CANCEL = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, DialogButton value);
inline bool IsKnownEnumValue(DialogButton value) {
  return internal::DialogButton_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ModalType : int32_t {
  
  NONE = 0,
  
  WINDOW = 1,
  
  CHILD = 2,
  
  SYSTEM = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, ModalType value);
inline bool IsKnownEnumValue(ModalType value) {
  return internal::ModalType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class MenuSourceType : int32_t {
  
  NONE = 0,
  
  MOUSE = 1,
  
  KEYBOARD = 2,
  
  TOUCH = 3,
  
  TOUCH_EDIT_MENU = 4,
  
  LONG_PRESS = 5,
  
  LONG_TAP = 6,
  
  TOUCH_HANDLE = 7,
  
  STYLUS = 8,
  
  ADJUST_SELECTION = 9,
  
  ADJUST_SELECTION_RESET = 10,
  kMinValue = 0,
  kMaxValue = 10,
  kDefaultValue = 0
};

 std::ostream& operator<<(std::ostream& os, MenuSourceType value);
inline bool IsKnownEnumValue(MenuSourceType value) {
  return internal::MenuSourceType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
inline MenuSourceType ToKnownEnumValue(MenuSourceType value) {
  if (IsKnownEnumValue(value)) {
    return value;
  }
  return MenuSourceType::kDefaultValue;
}


enum class WindowShowState : int32_t {
  
  SHOW_STATE_DEFAULT = 0,
  
  SHOW_STATE_NORMAL = 1,
  
  SHOW_STATE_MINIMIZED = 2,
  
  SHOW_STATE_MAXIMIZED = 3,
  
  SHOW_STATE_INACTIVE = 4,
  
  SHOW_STATE_FULLSCREEN = 5,
  kMinValue = 0,
  kMaxValue = 5,
  kDefaultValue = 0
};

 std::ostream& operator<<(std::ostream& os, WindowShowState value);
inline bool IsKnownEnumValue(WindowShowState value) {
  return internal::WindowShowState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
inline WindowShowState ToKnownEnumValue(WindowShowState value) {
  if (IsKnownEnumValue(value)) {
    return value;
  }
  return WindowShowState::kDefaultValue;
}


}  // namespace mojom
}  // namespace ui

namespace std {

template <>
struct hash<::ui::mojom::DialogButton>
    : public mojo::internal::EnumHashImpl<::ui::mojom::DialogButton> {};

template <>
struct hash<::ui::mojom::ModalType>
    : public mojo::internal::EnumHashImpl<::ui::mojom::ModalType> {};

template <>
struct hash<::ui::mojom::MenuSourceType>
    : public mojo::internal::EnumHashImpl<::ui::mojom::MenuSourceType> {};

template <>
struct hash<::ui::mojom::WindowShowState>
    : public mojo::internal::EnumHashImpl<::ui::mojom::WindowShowState> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ui::mojom::DialogButton, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ui::mojom::DialogButton, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ui::mojom::DialogButton>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ui::mojom::ModalType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ui::mojom::ModalType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ui::mojom::ModalType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ui::mojom::MenuSourceType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ui::mojom::MenuSourceType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ui::mojom::MenuSourceType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ui::mojom::WindowShowState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ui::mojom::WindowShowState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ui::mojom::WindowShowState>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace ui {
namespace mojom {


}  // namespace mojom
}  // namespace ui

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::ui::mojom::DialogButton> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ui::mojom::DialogButton value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::ui::mojom::ModalType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ui::mojom::ModalType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::ui::mojom::MenuSourceType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ui::mojom::MenuSourceType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::ui::mojom::WindowShowState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ui::mojom::WindowShowState value);
};

} // namespace perfetto

#endif  // UI_BASE_MOJOM_UI_BASE_TYPES_MOJOM_SHARED_H_