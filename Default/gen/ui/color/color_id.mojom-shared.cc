// ui/color/color_id.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "ui/color/color_id.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "ui/color/color_id.mojom-params-data.h"
namespace color {
namespace mojom {

static NOINLINE const char* RendererColorIdToStringHelper(RendererColorId value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case RendererColorId::kColorMenuBackground:
      return "kColorMenuBackground";
    case RendererColorId::kColorMenuItemBackgroundSelected:
      return "kColorMenuItemBackgroundSelected";
    case RendererColorId::kColorMenuSeparator:
      return "kColorMenuSeparator";
    case RendererColorId::kColorOverlayScrollbarFill:
      return "kColorOverlayScrollbarFill";
    case RendererColorId::kColorOverlayScrollbarFillDark:
      return "kColorOverlayScrollbarFillDark";
    case RendererColorId::kColorOverlayScrollbarFillLight:
      return "kColorOverlayScrollbarFillLight";
    case RendererColorId::kColorOverlayScrollbarFillHovered:
      return "kColorOverlayScrollbarFillHovered";
    case RendererColorId::kColorOverlayScrollbarFillHoveredDark:
      return "kColorOverlayScrollbarFillHoveredDark";
    case RendererColorId::kColorOverlayScrollbarFillHoveredLight:
      return "kColorOverlayScrollbarFillHoveredLight";
    case RendererColorId::kColorOverlayScrollbarStroke:
      return "kColorOverlayScrollbarStroke";
    case RendererColorId::kColorOverlayScrollbarStrokeDark:
      return "kColorOverlayScrollbarStrokeDark";
    case RendererColorId::kColorOverlayScrollbarStrokeLight:
      return "kColorOverlayScrollbarStrokeLight";
    case RendererColorId::kColorOverlayScrollbarStrokeHovered:
      return "kColorOverlayScrollbarStrokeHovered";
    case RendererColorId::kColorOverlayScrollbarStrokeHoveredDark:
      return "kColorOverlayScrollbarStrokeHoveredDark";
    case RendererColorId::kColorOverlayScrollbarStrokeHoveredLight:
      return "kColorOverlayScrollbarStrokeHoveredLight";
    default:
      return nullptr;
  }
}

std::string RendererColorIdToString(RendererColorId value) {
  const char *str = RendererColorIdToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown RendererColorId value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, RendererColorId value) {
  return os << RendererColorIdToString(value);
}

namespace internal {

}  // namespace internal
}  // namespace mojom
}  // namespace color

namespace perfetto {

// static
void TraceFormatTraits<::color::mojom::RendererColorId>::WriteIntoTrace(
   perfetto::TracedValue context, ::color::mojom::RendererColorId value) {
  return std::move(context).WriteString(::color::mojom::RendererColorIdToString(value));
}

} // namespace perfetto