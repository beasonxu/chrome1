// ui/gfx/mojom/native_handle_types.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_GFX_MOJOM_NATIVE_HANDLE_TYPES_MOJOM_SHARED_H_
#define UI_GFX_MOJOM_NATIVE_HANDLE_TYPES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/gfx/mojom/native_handle_types.mojom-shared-internal.h"
#include "mojo/public/mojom/base/shared_memory.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace gfx {
namespace mojom {
class AHardwareBufferHandleDataView;

class GpuMemoryBufferPlatformHandleDataView;


}  // namespace mojom
}  // namespace gfx

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::gfx::mojom::AHardwareBufferHandleDataView> {
  using Data = ::gfx::mojom::internal::AHardwareBufferHandle_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::gfx::mojom::GpuMemoryBufferPlatformHandleDataView> {
  using Data = ::gfx::mojom::internal::GpuMemoryBufferPlatformHandle_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace gfx {
namespace mojom {


class AHardwareBufferHandleDataView {
 public:
  AHardwareBufferHandleDataView() = default;

  AHardwareBufferHandleDataView(
      internal::AHardwareBufferHandle_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  mojo::PlatformHandle TakeBufferHandle() {
    mojo::PlatformHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::PlatformHandle>(
            &data_->buffer_handle, &result, message_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedMessagePipeHandle TakeTrackingPipe() {
    mojo::ScopedMessagePipeHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedMessagePipeHandle>(
            &data_->tracking_pipe, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AHardwareBufferHandle_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuMemoryBufferPlatformHandleDataView {
 public:
  using Tag = internal::GpuMemoryBufferPlatformHandle_Data::GpuMemoryBufferPlatformHandle_Tag;

  GpuMemoryBufferPlatformHandleDataView() = default;

  GpuMemoryBufferPlatformHandleDataView(
      internal::GpuMemoryBufferPlatformHandle_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_shared_memory_handle() const { return data_->tag == Tag::kSharedMemoryHandle; }
  inline void GetSharedMemoryHandleDataView(
      ::mojo_base::mojom::UnsafeSharedMemoryRegionDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadSharedMemoryHandle(UserType* output) const {
    
    CHECK(is_shared_memory_handle());
    return mojo::internal::Deserialize<::mojo_base::mojom::UnsafeSharedMemoryRegionDataView>(
        data_->data.f_shared_memory_handle.Get(), output, message_);
  }
  bool is_android_hardware_buffer_handle() const { return data_->tag == Tag::kAndroidHardwareBufferHandle; }
  inline void GetAndroidHardwareBufferHandleDataView(
      AHardwareBufferHandleDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadAndroidHardwareBufferHandle(UserType* output) const {
    
    CHECK(is_android_hardware_buffer_handle());
    return mojo::internal::Deserialize<::gfx::mojom::AHardwareBufferHandleDataView>(
        data_->data.f_android_hardware_buffer_handle.Get(), output, message_);
  }

 private:
  internal::GpuMemoryBufferPlatformHandle_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace gfx

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::gfx::mojom::AHardwareBufferHandleDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::gfx::mojom::AHardwareBufferHandleDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::gfx::mojom::internal::AHardwareBufferHandle_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::buffer_handle(input)) in_buffer_handle = Traits::buffer_handle(input);
    mojo::internal::Serialize<mojo::PlatformHandle>(
        in_buffer_handle, &fragment->buffer_handle, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->buffer_handle),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid buffer_handle in AHardwareBufferHandle struct");
    decltype(Traits::tracking_pipe(input)) in_tracking_pipe = Traits::tracking_pipe(input);
    mojo::internal::Serialize<mojo::ScopedMessagePipeHandle>(
        in_tracking_pipe, &fragment->tracking_pipe, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->tracking_pipe),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid tracking_pipe in AHardwareBufferHandle struct");
  }

  static bool Deserialize(::gfx::mojom::internal::AHardwareBufferHandle_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::gfx::mojom::AHardwareBufferHandleDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::gfx::mojom::GpuMemoryBufferPlatformHandleDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::gfx::mojom::GpuMemoryBufferPlatformHandleDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::gfx::mojom::internal::GpuMemoryBufferPlatformHandle_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::gfx::mojom::GpuMemoryBufferPlatformHandleDataView::Tag::kSharedMemoryHandle: {
        decltype(Traits::shared_memory_handle(input))
            in_shared_memory_handle = Traits::shared_memory_handle(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_shared_memory_handle)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::mojo_base::mojom::UnsafeSharedMemoryRegionDataView>(
            in_shared_memory_handle, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null shared_memory_handle in GpuMemoryBufferPlatformHandle union");
        fragment->data.f_shared_memory_handle.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::gfx::mojom::GpuMemoryBufferPlatformHandleDataView::Tag::kAndroidHardwareBufferHandle: {
        decltype(Traits::android_hardware_buffer_handle(input))
            in_android_hardware_buffer_handle = Traits::android_hardware_buffer_handle(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_android_hardware_buffer_handle)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::gfx::mojom::AHardwareBufferHandleDataView>(
            in_android_hardware_buffer_handle, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null android_hardware_buffer_handle in GpuMemoryBufferPlatformHandle union");
        fragment->data.f_android_hardware_buffer_handle.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
    }
  }

  static bool Deserialize(::gfx::mojom::internal::GpuMemoryBufferPlatformHandle_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::gfx::mojom::GpuMemoryBufferPlatformHandleDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace gfx {
namespace mojom {



inline void GpuMemoryBufferPlatformHandleDataView::GetSharedMemoryHandleDataView(
    ::mojo_base::mojom::UnsafeSharedMemoryRegionDataView* output) const {
  CHECK(is_shared_memory_handle());
  *output = ::mojo_base::mojom::UnsafeSharedMemoryRegionDataView(data_->data.f_shared_memory_handle.Get(), message_);
}
inline void GpuMemoryBufferPlatformHandleDataView::GetAndroidHardwareBufferHandleDataView(
    AHardwareBufferHandleDataView* output) const {
  CHECK(is_android_hardware_buffer_handle());
  *output = AHardwareBufferHandleDataView(data_->data.f_android_hardware_buffer_handle.Get(), message_);
}


}  // namespace mojom
}  // namespace gfx

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // UI_GFX_MOJOM_NATIVE_HANDLE_TYPES_MOJOM_SHARED_H_