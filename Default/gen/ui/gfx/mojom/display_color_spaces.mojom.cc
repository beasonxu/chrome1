// ui/gfx/mojom/display_color_spaces.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "ui/gfx/mojom/display_color_spaces.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "ui/gfx/mojom/display_color_spaces.mojom-params-data.h"
#include "ui/gfx/mojom/display_color_spaces.mojom-shared-message-ids.h"

#include "ui/gfx/mojom/display_color_spaces.mojom-import-headers.h"
#include "ui/gfx/mojom/display_color_spaces.mojom-test-utils.h"


#ifndef UI_GFX_MOJOM_DISPLAY_COLOR_SPACES_MOJOM_JUMBO_H_
#define UI_GFX_MOJOM_DISPLAY_COLOR_SPACES_MOJOM_JUMBO_H_
#endif



namespace gfx {
namespace mojom {
DisplayColorSpaces::DisplayColorSpaces()
    : color_spaces(),
      buffer_formats(),
      sdr_max_luminance_nits(),
      hdr_max_luminance_relative() {}

DisplayColorSpaces::DisplayColorSpaces(
    std::vector<::gfx::ColorSpace> color_spaces_in,
    std::vector<::gfx::BufferFormat> buffer_formats_in,
    float sdr_max_luminance_nits_in,
    float hdr_max_luminance_relative_in)
    : color_spaces(std::move(color_spaces_in)),
      buffer_formats(std::move(buffer_formats_in)),
      sdr_max_luminance_nits(std::move(sdr_max_luminance_nits_in)),
      hdr_max_luminance_relative(std::move(hdr_max_luminance_relative_in)) {}

DisplayColorSpaces::~DisplayColorSpaces() = default;

void DisplayColorSpaces::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "color_spaces"), this->color_spaces,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::gfx::ColorSpace>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "buffer_formats"), this->buffer_formats,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::gfx::BufferFormat>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sdr_max_luminance_nits"), this->sdr_max_luminance_nits,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "hdr_max_luminance_relative"), this->hdr_max_luminance_relative,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DisplayColorSpaces::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace gfx


namespace mojo {


// static
bool StructTraits<::gfx::mojom::DisplayColorSpaces::DataView, ::gfx::mojom::DisplayColorSpacesPtr>::Read(
    ::gfx::mojom::DisplayColorSpaces::DataView input,
    ::gfx::mojom::DisplayColorSpacesPtr* output) {
  bool success = true;
  ::gfx::mojom::DisplayColorSpacesPtr result(::gfx::mojom::DisplayColorSpaces::New());
  
      if (success && !input.ReadColorSpaces(&result->color_spaces))
        success = false;
      if (success && !input.ReadBufferFormats(&result->buffer_formats))
        success = false;
      if (success)
        result->sdr_max_luminance_nits = input.sdr_max_luminance_nits();
      if (success)
        result->hdr_max_luminance_relative = input.hdr_max_luminance_relative();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace gfx {
namespace mojom {




}  // namespace mojom
}  // namespace gfx


#if defined(__clang__)
#pragma clang diagnostic pop
#endif