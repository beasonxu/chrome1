// ui/gfx/mojom/overlay_transform.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_GFX_MOJOM_OVERLAY_TRANSFORM_MOJOM_SHARED_H_
#define UI_GFX_MOJOM_OVERLAY_TRANSFORM_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/gfx/mojom/overlay_transform.mojom-shared-internal.h"







namespace gfx {
namespace mojom {


}  // namespace mojom
}  // namespace gfx

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace gfx {
namespace mojom {


enum class OverlayTransform : int32_t {
  
  OVERLAY_TRANSFORM_INVALID = 0,
  
  OVERLAY_TRANSFORM_NONE = 1,
  
  OVERLAY_TRANSFORM_FLIP_HORIZONTAL = 2,
  
  OVERLAY_TRANSFORM_FLIP_VERTICAL = 3,
  
  OVERLAY_TRANSFORM_ROTATE_90 = 4,
  
  OVERLAY_TRANSFORM_ROTATE_180 = 5,
  
  OVERLAY_TRANSFORM_ROTATE_270 = 6,
  
  OVERLAY_TRANSFORM_LAST = 6,
  kMinValue = 0,
  kMaxValue = 6,
};

 std::ostream& operator<<(std::ostream& os, OverlayTransform value);
inline bool IsKnownEnumValue(OverlayTransform value) {
  return internal::OverlayTransform_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace gfx

namespace std {

template <>
struct hash<::gfx::mojom::OverlayTransform>
    : public mojo::internal::EnumHashImpl<::gfx::mojom::OverlayTransform> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::gfx::mojom::OverlayTransform, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::gfx::mojom::OverlayTransform, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::gfx::mojom::OverlayTransform>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace gfx {
namespace mojom {


}  // namespace mojom
}  // namespace gfx

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::gfx::mojom::OverlayTransform> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::gfx::mojom::OverlayTransform value);
};

} // namespace perfetto

#endif  // UI_GFX_MOJOM_OVERLAY_TRANSFORM_MOJOM_SHARED_H_