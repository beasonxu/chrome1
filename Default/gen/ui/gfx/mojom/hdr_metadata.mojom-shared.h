// ui/gfx/mojom/hdr_metadata.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_GFX_MOJOM_HDR_METADATA_MOJOM_SHARED_H_
#define UI_GFX_MOJOM_HDR_METADATA_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/gfx/mojom/hdr_metadata.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"







namespace gfx {
namespace mojom {
class ColorVolumeMetadataDataView;

class HDRMetadataDataView;



}  // namespace mojom
}  // namespace gfx

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::gfx::mojom::ColorVolumeMetadataDataView> {
  using Data = ::gfx::mojom::internal::ColorVolumeMetadata_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::gfx::mojom::HDRMetadataDataView> {
  using Data = ::gfx::mojom::internal::HDRMetadata_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace gfx {
namespace mojom {


class ColorVolumeMetadataDataView {
 public:
  ColorVolumeMetadataDataView() = default;

  ColorVolumeMetadataDataView(
      internal::ColorVolumeMetadata_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPrimaryRDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrimaryR(UserType* output) {
    
    auto* pointer = data_->primary_r.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetPrimaryGDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrimaryG(UserType* output) {
    
    auto* pointer = data_->primary_g.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetPrimaryBDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrimaryB(UserType* output) {
    
    auto* pointer = data_->primary_b.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetWhitePointDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadWhitePoint(UserType* output) {
    
    auto* pointer = data_->white_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  float luminance_max() const {
    return data_->luminance_max;
  }
  float luminance_min() const {
    return data_->luminance_min;
  }
 private:
  internal::ColorVolumeMetadata_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HDRMetadataDataView {
 public:
  HDRMetadataDataView() = default;

  HDRMetadataDataView(
      internal::HDRMetadata_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetColorVolumeMetadataDataView(
      ColorVolumeMetadataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadColorVolumeMetadata(UserType* output) {
    
    auto* pointer = data_->color_volume_metadata.Get();
    return mojo::internal::Deserialize<::gfx::mojom::ColorVolumeMetadataDataView>(
        pointer, output, message_);
  }
  uint32_t max_content_light_level() const {
    return data_->max_content_light_level;
  }
  uint32_t max_frame_average_light_level() const {
    return data_->max_frame_average_light_level;
  }
 private:
  internal::HDRMetadata_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace gfx

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::gfx::mojom::ColorVolumeMetadataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::gfx::mojom::ColorVolumeMetadataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::gfx::mojom::internal::ColorVolumeMetadata_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::primary_r(input)) in_primary_r = Traits::primary_r(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->primary_r)::BaseType> primary_r_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_primary_r, primary_r_fragment);
    fragment->primary_r.Set(
        primary_r_fragment.is_null() ? nullptr : primary_r_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->primary_r.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null primary_r in ColorVolumeMetadata struct");
    decltype(Traits::primary_g(input)) in_primary_g = Traits::primary_g(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->primary_g)::BaseType> primary_g_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_primary_g, primary_g_fragment);
    fragment->primary_g.Set(
        primary_g_fragment.is_null() ? nullptr : primary_g_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->primary_g.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null primary_g in ColorVolumeMetadata struct");
    decltype(Traits::primary_b(input)) in_primary_b = Traits::primary_b(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->primary_b)::BaseType> primary_b_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_primary_b, primary_b_fragment);
    fragment->primary_b.Set(
        primary_b_fragment.is_null() ? nullptr : primary_b_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->primary_b.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null primary_b in ColorVolumeMetadata struct");
    decltype(Traits::white_point(input)) in_white_point = Traits::white_point(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->white_point)::BaseType> white_point_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_white_point, white_point_fragment);
    fragment->white_point.Set(
        white_point_fragment.is_null() ? nullptr : white_point_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->white_point.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null white_point in ColorVolumeMetadata struct");
    fragment->luminance_max = Traits::luminance_max(input);
    fragment->luminance_min = Traits::luminance_min(input);
  }

  static bool Deserialize(::gfx::mojom::internal::ColorVolumeMetadata_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::gfx::mojom::ColorVolumeMetadataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::gfx::mojom::HDRMetadataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::gfx::mojom::HDRMetadataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::gfx::mojom::internal::HDRMetadata_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::color_volume_metadata(input)) in_color_volume_metadata = Traits::color_volume_metadata(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->color_volume_metadata)::BaseType> color_volume_metadata_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::ColorVolumeMetadataDataView>(
        in_color_volume_metadata, color_volume_metadata_fragment);
    fragment->color_volume_metadata.Set(
        color_volume_metadata_fragment.is_null() ? nullptr : color_volume_metadata_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->color_volume_metadata.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null color_volume_metadata in HDRMetadata struct");
    fragment->max_content_light_level = Traits::max_content_light_level(input);
    fragment->max_frame_average_light_level = Traits::max_frame_average_light_level(input);
  }

  static bool Deserialize(::gfx::mojom::internal::HDRMetadata_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::gfx::mojom::HDRMetadataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace gfx {
namespace mojom {

inline void ColorVolumeMetadataDataView::GetPrimaryRDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->primary_r.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void ColorVolumeMetadataDataView::GetPrimaryGDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->primary_g.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void ColorVolumeMetadataDataView::GetPrimaryBDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->primary_b.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void ColorVolumeMetadataDataView::GetWhitePointDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->white_point.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}


inline void HDRMetadataDataView::GetColorVolumeMetadataDataView(
    ColorVolumeMetadataDataView* output) {
  auto pointer = data_->color_volume_metadata.Get();
  *output = ColorVolumeMetadataDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace gfx

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // UI_GFX_MOJOM_HDR_METADATA_MOJOM_SHARED_H_