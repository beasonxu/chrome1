// ui/gfx/mojom/native_handle_types.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_GFX_MOJOM_NATIVE_HANDLE_TYPES_MOJOM_BLINK_H_
#define UI_GFX_MOJOM_NATIVE_HANDLE_TYPES_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/gfx/mojom/native_handle_types.mojom-shared.h"
#include "ui/gfx/mojom/native_handle_types.mojom-blink-forward.h"
#include "mojo/public/mojom/base/shared_memory.mojom-blink.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace gfx {
namespace mojom {
namespace blink {






class  GpuMemoryBufferPlatformHandle {
 public:
  using DataView = GpuMemoryBufferPlatformHandleDataView;
  using Data_ = internal::GpuMemoryBufferPlatformHandle_Data;
  using Tag = Data_::GpuMemoryBufferPlatformHandle_Tag;

  template <typename... Args>
  static GpuMemoryBufferPlatformHandlePtr New(Args&&... args) {
    static_assert(
        sizeof...(args) < 0,
        "Do not use Union::New(); to create a union of a given subtype, use "
        "New<SubType>(), not New() followed by set_<sub_type>(). To represent "
        "an empty union, mark the field or parameter as nullable in the mojom "
        "definition.");
  }
  // Construct an instance holding |shared_memory_handle|.
  static GpuMemoryBufferPlatformHandlePtr
  NewSharedMemoryHandle(
      ::base::UnsafeSharedMemoryRegion shared_memory_handle) {
    auto result = GpuMemoryBufferPlatformHandlePtr(absl::in_place);
    result->set_shared_memory_handle(std::move(shared_memory_handle));
    return result;
  }
  // Construct an instance holding |android_hardware_buffer_handle|.
  static GpuMemoryBufferPlatformHandlePtr
  NewAndroidHardwareBufferHandle(
      AHardwareBufferHandlePtr android_hardware_buffer_handle) {
    auto result = GpuMemoryBufferPlatformHandlePtr(absl::in_place);
    result->set_android_hardware_buffer_handle(std::move(android_hardware_buffer_handle));
    return result;
  }

  template <typename U>
  static GpuMemoryBufferPlatformHandlePtr From(const U& u) {
    return mojo::TypeConverter<GpuMemoryBufferPlatformHandlePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, GpuMemoryBufferPlatformHandle>::Convert(*this);
  }

  GpuMemoryBufferPlatformHandle();
  ~GpuMemoryBufferPlatformHandle();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = GpuMemoryBufferPlatformHandlePtr>
  GpuMemoryBufferPlatformHandlePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, GpuMemoryBufferPlatformHandle>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, GpuMemoryBufferPlatformHandle>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
  bool is_shared_memory_handle() const { return tag_ == Tag::kSharedMemoryHandle; }

  
  ::base::UnsafeSharedMemoryRegion& get_shared_memory_handle() const {
    CHECK(tag_ == Tag::kSharedMemoryHandle);
    return *(data_.shared_memory_handle);
  }

  
  void set_shared_memory_handle(
      ::base::UnsafeSharedMemoryRegion shared_memory_handle);
  
  bool is_android_hardware_buffer_handle() const { return tag_ == Tag::kAndroidHardwareBufferHandle; }

  
  AHardwareBufferHandlePtr& get_android_hardware_buffer_handle() const {
    CHECK(tag_ == Tag::kAndroidHardwareBufferHandle);
    return *(data_.android_hardware_buffer_handle);
  }

  
  void set_android_hardware_buffer_handle(
      AHardwareBufferHandlePtr android_hardware_buffer_handle);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        GpuMemoryBufferPlatformHandle::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<GpuMemoryBufferPlatformHandle::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() = default;
    ~Union_() = default;
    ::base::UnsafeSharedMemoryRegion* shared_memory_handle;
    AHardwareBufferHandlePtr* android_hardware_buffer_handle;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





class  AHardwareBufferHandle {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AHardwareBufferHandle, T>::value>;
  using DataView = AHardwareBufferHandleDataView;
  using Data_ = internal::AHardwareBufferHandle_Data;

  template <typename... Args>
  static AHardwareBufferHandlePtr New(Args&&... args) {
    return AHardwareBufferHandlePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AHardwareBufferHandlePtr From(const U& u) {
    return mojo::TypeConverter<AHardwareBufferHandlePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AHardwareBufferHandle>::Convert(*this);
  }


  AHardwareBufferHandle();

  AHardwareBufferHandle(
      ::mojo::PlatformHandle buffer_handle,
      ::mojo::ScopedMessagePipeHandle tracking_pipe);

AHardwareBufferHandle(const AHardwareBufferHandle&) = delete;
AHardwareBufferHandle& operator=(const AHardwareBufferHandle&) = delete;

  ~AHardwareBufferHandle();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AHardwareBufferHandlePtr>
  AHardwareBufferHandlePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AHardwareBufferHandle::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AHardwareBufferHandle::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AHardwareBufferHandle::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AHardwareBufferHandle_UnserializedMessageContext<
            UserType, AHardwareBufferHandle::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AHardwareBufferHandle::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return AHardwareBufferHandle::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AHardwareBufferHandle_UnserializedMessageContext<
            UserType, AHardwareBufferHandle::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AHardwareBufferHandle::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::mojo::PlatformHandle buffer_handle;
  
  ::mojo::ScopedMessagePipeHandle tracking_pipe;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AHardwareBufferHandle::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AHardwareBufferHandle::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AHardwareBufferHandle::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AHardwareBufferHandle::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename UnionPtrType>
GpuMemoryBufferPlatformHandlePtr GpuMemoryBufferPlatformHandle::Clone() const {
  switch (tag_) {
    case Tag::kSharedMemoryHandle:
      return NewSharedMemoryHandle(
          mojo::Clone(*data_.shared_memory_handle));
    case Tag::kAndroidHardwareBufferHandle:
      return NewAndroidHardwareBufferHandle(
          mojo::Clone(*data_.android_hardware_buffer_handle));
  }
  return nullptr;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, GpuMemoryBufferPlatformHandle>::value>::type*>
bool GpuMemoryBufferPlatformHandle::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::kSharedMemoryHandle:
      return mojo::Equals(*(data_.shared_memory_handle), *(other.data_.shared_memory_handle));
    case Tag::kAndroidHardwareBufferHandle:
      return mojo::Equals(*(data_.android_hardware_buffer_handle), *(other.data_.android_hardware_buffer_handle));
  }

  return false;
}
template <typename StructPtrType>
AHardwareBufferHandlePtr AHardwareBufferHandle::Clone() const {
  return New(
      mojo::Clone(buffer_handle),
      mojo::Clone(tracking_pipe)
  );
}

template <typename T, AHardwareBufferHandle::EnableIfSame<T>*>
bool AHardwareBufferHandle::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->buffer_handle, other_struct.buffer_handle))
    return false;
  if (!mojo::Equals(this->tracking_pipe, other_struct.tracking_pipe))
    return false;
  return true;
}

template <typename T, AHardwareBufferHandle::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.buffer_handle < rhs.buffer_handle)
    return true;
  if (rhs.buffer_handle < lhs.buffer_handle)
    return false;
  if (lhs.tracking_pipe < rhs.tracking_pipe)
    return true;
  if (rhs.tracking_pipe < lhs.tracking_pipe)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace gfx

namespace mojo {


template <>
struct  StructTraits<::gfx::mojom::blink::AHardwareBufferHandle::DataView,
                                         ::gfx::mojom::blink::AHardwareBufferHandlePtr> {
  static bool IsNull(const ::gfx::mojom::blink::AHardwareBufferHandlePtr& input) { return !input; }
  static void SetToNull(::gfx::mojom::blink::AHardwareBufferHandlePtr* output) { output->reset(); }

  static  decltype(::gfx::mojom::blink::AHardwareBufferHandle::buffer_handle)& buffer_handle(
       ::gfx::mojom::blink::AHardwareBufferHandlePtr& input) {
    return input->buffer_handle;
  }

  static  decltype(::gfx::mojom::blink::AHardwareBufferHandle::tracking_pipe)& tracking_pipe(
       ::gfx::mojom::blink::AHardwareBufferHandlePtr& input) {
    return input->tracking_pipe;
  }

  static bool Read(::gfx::mojom::blink::AHardwareBufferHandle::DataView input, ::gfx::mojom::blink::AHardwareBufferHandlePtr* output);
};


template <>
struct  UnionTraits<::gfx::mojom::blink::GpuMemoryBufferPlatformHandle::DataView,
                                        ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr> {
  static bool IsNull(const ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr& input) { return !input; }
  static void SetToNull(::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr* output) { output->reset(); }

  static ::gfx::mojom::blink::GpuMemoryBufferPlatformHandle::Tag GetTag(const ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr& input) {
    return input->which();
  }

  static  ::base::UnsafeSharedMemoryRegion& shared_memory_handle( ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr& input) {
    return input->get_shared_memory_handle();
  }

  static  ::gfx::mojom::blink::AHardwareBufferHandlePtr& android_hardware_buffer_handle( ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr& input) {
    return input->get_android_hardware_buffer_handle();
  }

  static bool Read(::gfx::mojom::blink::GpuMemoryBufferPlatformHandle::DataView input, ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr* output);
};

}  // namespace mojo

#endif  // UI_GFX_MOJOM_NATIVE_HANDLE_TYPES_MOJOM_BLINK_H_