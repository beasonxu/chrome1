// ui/gfx/image/mojom/image.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_GFX_IMAGE_MOJOM_IMAGE_MOJOM_SHARED_H_
#define UI_GFX_IMAGE_MOJOM_IMAGE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/gfx/image/mojom/image.mojom-shared-internal.h"
#include "skia/public/mojom/bitmap.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace gfx {
namespace mojom {
class ImageSkiaRepDataView;

class ImageSkiaDataView;



}  // namespace mojom
}  // namespace gfx

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::gfx::mojom::ImageSkiaRepDataView> {
  using Data = ::gfx::mojom::internal::ImageSkiaRep_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::gfx::mojom::ImageSkiaDataView> {
  using Data = ::gfx::mojom::internal::ImageSkia_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace gfx {
namespace mojom {


class ImageSkiaRepDataView {
 public:
  ImageSkiaRepDataView() = default;

  ImageSkiaRepDataView(
      internal::ImageSkiaRep_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBitmapDataView(
      ::skia::mojom::BitmapWithArbitraryBppDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBitmap(UserType* output) {
    
    auto* pointer = data_->bitmap.Get();
    return mojo::internal::Deserialize<::skia::mojom::BitmapWithArbitraryBppDataView>(
        pointer, output, message_);
  }
  float scale() const {
    return data_->scale;
  }
 private:
  internal::ImageSkiaRep_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ImageSkiaDataView {
 public:
  ImageSkiaDataView() = default;

  ImageSkiaDataView(
      internal::ImageSkia_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetImageRepsDataView(
      mojo::ArrayDataView<ImageSkiaRepDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadImageReps(UserType* output) {
    
    auto* pointer = data_->image_reps.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::gfx::mojom::ImageSkiaRepDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ImageSkia_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace gfx

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::gfx::mojom::ImageSkiaRepDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::gfx::mojom::ImageSkiaRepDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::gfx::mojom::internal::ImageSkiaRep_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::bitmap(input)) in_bitmap = Traits::bitmap(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->bitmap)::BaseType> bitmap_fragment(
            fragment.message());
    mojo::internal::Serialize<::skia::mojom::BitmapWithArbitraryBppDataView>(
        in_bitmap, bitmap_fragment);
    fragment->bitmap.Set(
        bitmap_fragment.is_null() ? nullptr : bitmap_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->bitmap.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bitmap in ImageSkiaRep struct");
    fragment->scale = Traits::scale(input);
  }

  static bool Deserialize(::gfx::mojom::internal::ImageSkiaRep_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::gfx::mojom::ImageSkiaRepDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::gfx::mojom::ImageSkiaDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::gfx::mojom::ImageSkiaDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::gfx::mojom::internal::ImageSkia_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::image_reps(input)) in_image_reps = Traits::image_reps(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->image_reps)::BaseType>
        image_reps_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams image_reps_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::gfx::mojom::ImageSkiaRepDataView>>(
        in_image_reps, image_reps_fragment, &image_reps_validate_params);
    fragment->image_reps.Set(
        image_reps_fragment.is_null() ? nullptr : image_reps_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->image_reps.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null image_reps in ImageSkia struct");
  }

  static bool Deserialize(::gfx::mojom::internal::ImageSkia_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::gfx::mojom::ImageSkiaDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace gfx {
namespace mojom {

inline void ImageSkiaRepDataView::GetBitmapDataView(
    ::skia::mojom::BitmapWithArbitraryBppDataView* output) {
  auto pointer = data_->bitmap.Get();
  *output = ::skia::mojom::BitmapWithArbitraryBppDataView(pointer, message_);
}


inline void ImageSkiaDataView::GetImageRepsDataView(
    mojo::ArrayDataView<ImageSkiaRepDataView>* output) {
  auto pointer = data_->image_reps.Get();
  *output = mojo::ArrayDataView<ImageSkiaRepDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace gfx

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // UI_GFX_IMAGE_MOJOM_IMAGE_MOJOM_SHARED_H_