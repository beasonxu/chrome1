// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/safe_browsing/SafeBrowsingBridge

#ifndef org_chromium_chrome_browser_safe_browsing_SafeBrowsingBridge_JNI
#define org_chromium_chrome_browser_safe_browsing_SafeBrowsingBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace safe_browsing {

static jint JNI_SafeBrowsingBridge_UmaValueForFile(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& path);

JNI_GENERATOR_EXPORT jint Java_J_N_Mg_00024zR0Px(
    JNIEnv* env,
    jclass jcaller,
    jstring path) {
  return JNI_SafeBrowsingBridge_UmaValueForFile(env, base::android::JavaParamRef<jstring>(env,
      path));
}

static jboolean JNI_SafeBrowsingBridge_GetSafeBrowsingExtendedReportingEnabled(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MWJZTkWR(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SafeBrowsingBridge_GetSafeBrowsingExtendedReportingEnabled(env);
}

static void JNI_SafeBrowsingBridge_SetSafeBrowsingExtendedReportingEnabled(JNIEnv* env, jboolean
    enabled);

JNI_GENERATOR_EXPORT void Java_J_N_MjGeUNkF(
    JNIEnv* env,
    jclass jcaller,
    jboolean enabled) {
  return JNI_SafeBrowsingBridge_SetSafeBrowsingExtendedReportingEnabled(env, enabled);
}

static jboolean JNI_SafeBrowsingBridge_GetSafeBrowsingExtendedReportingManaged(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mp340wGB(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SafeBrowsingBridge_GetSafeBrowsingExtendedReportingManaged(env);
}

static jint JNI_SafeBrowsingBridge_GetSafeBrowsingState(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_MdyQjr8h(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SafeBrowsingBridge_GetSafeBrowsingState(env);
}

static void JNI_SafeBrowsingBridge_SetSafeBrowsingState(JNIEnv* env, jint state);

JNI_GENERATOR_EXPORT void Java_J_N_MzV0f_1Xz(
    JNIEnv* env,
    jclass jcaller,
    jint state) {
  return JNI_SafeBrowsingBridge_SetSafeBrowsingState(env, state);
}

static jboolean JNI_SafeBrowsingBridge_IsSafeBrowsingManaged(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MAU7_16Tq(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SafeBrowsingBridge_IsSafeBrowsingManaged(env);
}

static jboolean JNI_SafeBrowsingBridge_HasAccountForLeakCheckRequest(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MiM2m7HY(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SafeBrowsingBridge_HasAccountForLeakCheckRequest(env);
}

static jboolean JNI_SafeBrowsingBridge_IsLeakDetectionUnauthenticatedEnabled(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MqSYugfQ(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SafeBrowsingBridge_IsLeakDetectionUnauthenticatedEnabled(env);
}


}  // namespace safe_browsing

#endif  // org_chromium_chrome_browser_safe_browsing_SafeBrowsingBridge_JNI
