// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/tab/state/LevelDBPersistedDataStorage

#ifndef org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_JNI
#define org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage[];
const char kClassPath_org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage[] =
    "org/chromium/chrome/browser/tab/state/LevelDBPersistedDataStorage";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_clazz(nullptr);
#ifndef org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_clazz_defined
#define org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_clazz_defined
inline jclass org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage,
      &g_org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_LevelDBPersistedDataStorage_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& handle);

JNI_GENERATOR_EXPORT void Java_J_N_MkxB9Tdj(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject handle) {
  return JNI_LevelDBPersistedDataStorage_Init(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, handle));
}

JNI_GENERATOR_EXPORT void Java_J_N_MJWrJ5q6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePersistedStateDB) {
  PersistedStateDB* native = reinterpret_cast<PersistedStateDB*>(nativePersistedStateDB);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MDiWNRLP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePersistedStateDB,
    jstring key,
    jbyteArray data,
    jobject onComplete) {
  PersistedStateDB* native = reinterpret_cast<PersistedStateDB*>(nativePersistedStateDB);
  CHECK_NATIVE_PTR(env, jcaller, native, "Save");
  return native->Save(env, base::android::JavaParamRef<jstring>(env, key),
      base::android::JavaParamRef<jbyteArray>(env, data), base::android::JavaParamRef<jobject>(env,
      onComplete));
}

JNI_GENERATOR_EXPORT void Java_J_N_MqUV_1juQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePersistedStateDB,
    jstring key,
    jobject callback) {
  PersistedStateDB* native = reinterpret_cast<PersistedStateDB*>(nativePersistedStateDB);
  CHECK_NATIVE_PTR(env, jcaller, native, "Load");
  return native->Load(env, base::android::JavaParamRef<jstring>(env, key),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mf_1BEvgG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePersistedStateDB,
    jstring key,
    jobject onComplete) {
  PersistedStateDB* native = reinterpret_cast<PersistedStateDB*>(nativePersistedStateDB);
  CHECK_NATIVE_PTR(env, jcaller, native, "Delete");
  return native->Delete(env, base::android::JavaParamRef<jstring>(env, key),
      base::android::JavaParamRef<jobject>(env, onComplete));
}

JNI_GENERATOR_EXPORT void Java_J_N_MQnSvNoI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePersistedStateDB,
    jobjectArray keysToKeep,
    jstring dataId,
    jobject onComplete) {
  PersistedStateDB* native = reinterpret_cast<PersistedStateDB*>(nativePersistedStateDB);
  CHECK_NATIVE_PTR(env, jcaller, native, "PerformMaintenance");
  return native->PerformMaintenance(env, base::android::JavaParamRef<jobjectArray>(env, keysToKeep),
      base::android::JavaParamRef<jstring>(env, dataId), base::android::JavaParamRef<jobject>(env,
      onComplete));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_setNativePtr(nullptr);
static void Java_LevelDBPersistedDataStorage_setNativePtr(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativePtr) {
  jclass clazz = org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setNativePtr",
          "(J)V",
          &g_org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_setNativePtr);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativePtr);
}

#endif  // org_chromium_chrome_browser_tab_state_LevelDBPersistedDataStorage_JNI
