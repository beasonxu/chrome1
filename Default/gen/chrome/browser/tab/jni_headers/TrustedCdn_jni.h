// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/tab/TrustedCdn

#ifndef org_chromium_chrome_browser_tab_TrustedCdn_JNI
#define org_chromium_chrome_browser_tab_TrustedCdn_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_chrome_browser_tab_TrustedCdn[];
const char kClassPath_org_chromium_chrome_browser_tab_TrustedCdn[] =
    "org/chromium/chrome/browser/tab/TrustedCdn";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_tab_TrustedCdn_clazz(nullptr);
#ifndef org_chromium_chrome_browser_tab_TrustedCdn_clazz_defined
#define org_chromium_chrome_browser_tab_TrustedCdn_clazz_defined
inline jclass org_chromium_chrome_browser_tab_TrustedCdn_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_chrome_browser_tab_TrustedCdn,
      &g_org_chromium_chrome_browser_tab_TrustedCdn_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_TrustedCdn_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_M1Q9lmqc(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_TrustedCdn_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MM2LHRfv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrustedCdn,
    jobject caller) {
  TrustedCdn* native = reinterpret_cast<TrustedCdn*>(nativeTrustedCdn);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDestroyed");
  return native->OnDestroyed(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MyyZwXPU(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrustedCdn,
    jobject caller,
    jobject webContents) {
  TrustedCdn* native = reinterpret_cast<TrustedCdn*>(nativeTrustedCdn);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetWebContents");
  return native->SetWebContents(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_M003oy2o(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrustedCdn,
    jobject caller) {
  TrustedCdn* native = reinterpret_cast<TrustedCdn*>(nativeTrustedCdn);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResetWebContents");
  return native->ResetWebContents(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID> g_org_chromium_chrome_browser_tab_TrustedCdn_setPublisherUrl(nullptr);
static void Java_TrustedCdn_setPublisherUrl(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jstring>& url) {
  jclass clazz = org_chromium_chrome_browser_tab_TrustedCdn_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tab_TrustedCdn_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setPublisherUrl",
          "(Ljava/lang/String;)V",
          &g_org_chromium_chrome_browser_tab_TrustedCdn_setPublisherUrl);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj());
}

#endif  // org_chromium_chrome_browser_tab_TrustedCdn_JNI
