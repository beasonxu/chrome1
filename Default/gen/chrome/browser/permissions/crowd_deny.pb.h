// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crowd_deny.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crowd_5fdeny_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crowd_5fdeny_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crowd_5fdeny_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crowd_5fdeny_2eproto {
  static const uint32_t offsets[];
};
namespace chrome_browser_crowd_deny {
class PreloadData;
struct PreloadDataDefaultTypeInternal;
extern PreloadDataDefaultTypeInternal _PreloadData_default_instance_;
class SiteReputation;
struct SiteReputationDefaultTypeInternal;
extern SiteReputationDefaultTypeInternal _SiteReputation_default_instance_;
}  // namespace chrome_browser_crowd_deny
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_crowd_deny::PreloadData* Arena::CreateMaybeMessage<::chrome_browser_crowd_deny::PreloadData>(Arena*);
template<> ::chrome_browser_crowd_deny::SiteReputation* Arena::CreateMaybeMessage<::chrome_browser_crowd_deny::SiteReputation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_crowd_deny {

enum SiteReputation_NotificationUserExperienceQuality : int {
  SiteReputation_NotificationUserExperienceQuality_UNKNOWN = 0,
  SiteReputation_NotificationUserExperienceQuality_ACCEPTABLE = 1,
  SiteReputation_NotificationUserExperienceQuality_UNSOLICITED_PROMPTS = 2,
  SiteReputation_NotificationUserExperienceQuality_ABUSIVE_PROMPTS = 3,
  SiteReputation_NotificationUserExperienceQuality_ABUSIVE_CONTENT = 4,
  SiteReputation_NotificationUserExperienceQuality_DISRUPTIVE_BEHAVIOR = 5
};
bool SiteReputation_NotificationUserExperienceQuality_IsValid(int value);
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation_NotificationUserExperienceQuality_NotificationUserExperienceQuality_MIN = SiteReputation_NotificationUserExperienceQuality_UNKNOWN;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation_NotificationUserExperienceQuality_NotificationUserExperienceQuality_MAX = SiteReputation_NotificationUserExperienceQuality_DISRUPTIVE_BEHAVIOR;
constexpr int SiteReputation_NotificationUserExperienceQuality_NotificationUserExperienceQuality_ARRAYSIZE = SiteReputation_NotificationUserExperienceQuality_NotificationUserExperienceQuality_MAX + 1;

const std::string& SiteReputation_NotificationUserExperienceQuality_Name(SiteReputation_NotificationUserExperienceQuality value);
template<typename T>
inline const std::string& SiteReputation_NotificationUserExperienceQuality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SiteReputation_NotificationUserExperienceQuality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SiteReputation_NotificationUserExperienceQuality_Name.");
  return SiteReputation_NotificationUserExperienceQuality_Name(static_cast<SiteReputation_NotificationUserExperienceQuality>(enum_t_value));
}
bool SiteReputation_NotificationUserExperienceQuality_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SiteReputation_NotificationUserExperienceQuality* value);
// ===================================================================

class SiteReputation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_crowd_deny.SiteReputation) */ {
 public:
  inline SiteReputation() : SiteReputation(nullptr) {}
  ~SiteReputation() override;
  explicit PROTOBUF_CONSTEXPR SiteReputation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteReputation(const SiteReputation& from);
  SiteReputation(SiteReputation&& from) noexcept
    : SiteReputation() {
    *this = ::std::move(from);
  }

  inline SiteReputation& operator=(const SiteReputation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteReputation& operator=(SiteReputation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SiteReputation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteReputation* internal_default_instance() {
    return reinterpret_cast<const SiteReputation*>(
               &_SiteReputation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SiteReputation& a, SiteReputation& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SiteReputation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteReputation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteReputation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteReputation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SiteReputation& from);
  void MergeFrom(const SiteReputation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SiteReputation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_crowd_deny.SiteReputation";
  }
  protected:
  explicit SiteReputation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SiteReputation_NotificationUserExperienceQuality NotificationUserExperienceQuality;
  static constexpr NotificationUserExperienceQuality UNKNOWN =
    SiteReputation_NotificationUserExperienceQuality_UNKNOWN;
  static constexpr NotificationUserExperienceQuality ACCEPTABLE =
    SiteReputation_NotificationUserExperienceQuality_ACCEPTABLE;
  static constexpr NotificationUserExperienceQuality UNSOLICITED_PROMPTS =
    SiteReputation_NotificationUserExperienceQuality_UNSOLICITED_PROMPTS;
  static constexpr NotificationUserExperienceQuality ABUSIVE_PROMPTS =
    SiteReputation_NotificationUserExperienceQuality_ABUSIVE_PROMPTS;
  static constexpr NotificationUserExperienceQuality ABUSIVE_CONTENT =
    SiteReputation_NotificationUserExperienceQuality_ABUSIVE_CONTENT;
  static constexpr NotificationUserExperienceQuality DISRUPTIVE_BEHAVIOR =
    SiteReputation_NotificationUserExperienceQuality_DISRUPTIVE_BEHAVIOR;
  static inline bool NotificationUserExperienceQuality_IsValid(int value) {
    return SiteReputation_NotificationUserExperienceQuality_IsValid(value);
  }
  static constexpr NotificationUserExperienceQuality NotificationUserExperienceQuality_MIN =
    SiteReputation_NotificationUserExperienceQuality_NotificationUserExperienceQuality_MIN;
  static constexpr NotificationUserExperienceQuality NotificationUserExperienceQuality_MAX =
    SiteReputation_NotificationUserExperienceQuality_NotificationUserExperienceQuality_MAX;
  static constexpr int NotificationUserExperienceQuality_ARRAYSIZE =
    SiteReputation_NotificationUserExperienceQuality_NotificationUserExperienceQuality_ARRAYSIZE;
  template<typename T>
  static inline const std::string& NotificationUserExperienceQuality_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NotificationUserExperienceQuality>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NotificationUserExperienceQuality_Name.");
    return SiteReputation_NotificationUserExperienceQuality_Name(enum_t_value);
  }
  static inline bool NotificationUserExperienceQuality_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NotificationUserExperienceQuality* value) {
    return SiteReputation_NotificationUserExperienceQuality_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kNotificationUxQualityFieldNumber = 2,
    kIncludeSubdomainsFieldNumber = 3,
    kWarningOnlyFieldNumber = 4,
  };
  // optional string domain = 1;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional .chrome_browser_crowd_deny.SiteReputation.NotificationUserExperienceQuality notification_ux_quality = 2;
  bool has_notification_ux_quality() const;
  private:
  bool _internal_has_notification_ux_quality() const;
  public:
  void clear_notification_ux_quality();
  ::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality notification_ux_quality() const;
  void set_notification_ux_quality(::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality value);
  private:
  ::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality _internal_notification_ux_quality() const;
  void _internal_set_notification_ux_quality(::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality value);
  public:

  // optional bool include_subdomains = 3;
  bool has_include_subdomains() const;
  private:
  bool _internal_has_include_subdomains() const;
  public:
  void clear_include_subdomains();
  bool include_subdomains() const;
  void set_include_subdomains(bool value);
  private:
  bool _internal_include_subdomains() const;
  void _internal_set_include_subdomains(bool value);
  public:

  // optional bool warning_only = 4;
  bool has_warning_only() const;
  private:
  bool _internal_has_warning_only() const;
  public:
  void clear_warning_only();
  bool warning_only() const;
  void set_warning_only(bool value);
  private:
  bool _internal_warning_only() const;
  void _internal_set_warning_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_crowd_deny.SiteReputation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  int notification_ux_quality_;
  bool include_subdomains_;
  bool warning_only_;
  friend struct ::TableStruct_crowd_5fdeny_2eproto;
};
// -------------------------------------------------------------------

class PreloadData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_crowd_deny.PreloadData) */ {
 public:
  inline PreloadData() : PreloadData(nullptr) {}
  ~PreloadData() override;
  explicit PROTOBUF_CONSTEXPR PreloadData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreloadData(const PreloadData& from);
  PreloadData(PreloadData&& from) noexcept
    : PreloadData() {
    *this = ::std::move(from);
  }

  inline PreloadData& operator=(const PreloadData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreloadData& operator=(PreloadData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PreloadData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreloadData* internal_default_instance() {
    return reinterpret_cast<const PreloadData*>(
               &_PreloadData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PreloadData& a, PreloadData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PreloadData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreloadData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreloadData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreloadData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PreloadData& from);
  void MergeFrom(const PreloadData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PreloadData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_crowd_deny.PreloadData";
  }
  protected:
  explicit PreloadData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteReputationsFieldNumber = 1,
  };
  // repeated .chrome_browser_crowd_deny.SiteReputation site_reputations = 1;
  int site_reputations_size() const;
  private:
  int _internal_site_reputations_size() const;
  public:
  void clear_site_reputations();
  ::chrome_browser_crowd_deny::SiteReputation* mutable_site_reputations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_crowd_deny::SiteReputation >*
      mutable_site_reputations();
  private:
  const ::chrome_browser_crowd_deny::SiteReputation& _internal_site_reputations(int index) const;
  ::chrome_browser_crowd_deny::SiteReputation* _internal_add_site_reputations();
  public:
  const ::chrome_browser_crowd_deny::SiteReputation& site_reputations(int index) const;
  ::chrome_browser_crowd_deny::SiteReputation* add_site_reputations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_crowd_deny::SiteReputation >&
      site_reputations() const;

  // @@protoc_insertion_point(class_scope:chrome_browser_crowd_deny.PreloadData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_crowd_deny::SiteReputation > site_reputations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_crowd_5fdeny_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SiteReputation

// optional string domain = 1;
inline bool SiteReputation::_internal_has_domain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteReputation::has_domain() const {
  return _internal_has_domain();
}
inline void SiteReputation::clear_domain() {
  domain_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SiteReputation::domain() const {
  // @@protoc_insertion_point(field_get:chrome_browser_crowd_deny.SiteReputation.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteReputation::set_domain(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_crowd_deny.SiteReputation.domain)
}
inline std::string* SiteReputation::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:chrome_browser_crowd_deny.SiteReputation.domain)
  return _s;
}
inline const std::string& SiteReputation::_internal_domain() const {
  return domain_.Get();
}
inline void SiteReputation::_internal_set_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  domain_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteReputation::_internal_mutable_domain() {
  _has_bits_[0] |= 0x00000001u;
  return domain_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteReputation::release_domain() {
  // @@protoc_insertion_point(field_release:chrome_browser_crowd_deny.SiteReputation.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault()) {
    domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteReputation::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault()) {
    domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_crowd_deny.SiteReputation.domain)
}

// optional .chrome_browser_crowd_deny.SiteReputation.NotificationUserExperienceQuality notification_ux_quality = 2;
inline bool SiteReputation::_internal_has_notification_ux_quality() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteReputation::has_notification_ux_quality() const {
  return _internal_has_notification_ux_quality();
}
inline void SiteReputation::clear_notification_ux_quality() {
  notification_ux_quality_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality SiteReputation::_internal_notification_ux_quality() const {
  return static_cast< ::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality >(notification_ux_quality_);
}
inline ::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality SiteReputation::notification_ux_quality() const {
  // @@protoc_insertion_point(field_get:chrome_browser_crowd_deny.SiteReputation.notification_ux_quality)
  return _internal_notification_ux_quality();
}
inline void SiteReputation::_internal_set_notification_ux_quality(::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality value) {
  assert(::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  notification_ux_quality_ = value;
}
inline void SiteReputation::set_notification_ux_quality(::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality value) {
  _internal_set_notification_ux_quality(value);
  // @@protoc_insertion_point(field_set:chrome_browser_crowd_deny.SiteReputation.notification_ux_quality)
}

// optional bool include_subdomains = 3;
inline bool SiteReputation::_internal_has_include_subdomains() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SiteReputation::has_include_subdomains() const {
  return _internal_has_include_subdomains();
}
inline void SiteReputation::clear_include_subdomains() {
  include_subdomains_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SiteReputation::_internal_include_subdomains() const {
  return include_subdomains_;
}
inline bool SiteReputation::include_subdomains() const {
  // @@protoc_insertion_point(field_get:chrome_browser_crowd_deny.SiteReputation.include_subdomains)
  return _internal_include_subdomains();
}
inline void SiteReputation::_internal_set_include_subdomains(bool value) {
  _has_bits_[0] |= 0x00000004u;
  include_subdomains_ = value;
}
inline void SiteReputation::set_include_subdomains(bool value) {
  _internal_set_include_subdomains(value);
  // @@protoc_insertion_point(field_set:chrome_browser_crowd_deny.SiteReputation.include_subdomains)
}

// optional bool warning_only = 4;
inline bool SiteReputation::_internal_has_warning_only() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SiteReputation::has_warning_only() const {
  return _internal_has_warning_only();
}
inline void SiteReputation::clear_warning_only() {
  warning_only_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SiteReputation::_internal_warning_only() const {
  return warning_only_;
}
inline bool SiteReputation::warning_only() const {
  // @@protoc_insertion_point(field_get:chrome_browser_crowd_deny.SiteReputation.warning_only)
  return _internal_warning_only();
}
inline void SiteReputation::_internal_set_warning_only(bool value) {
  _has_bits_[0] |= 0x00000008u;
  warning_only_ = value;
}
inline void SiteReputation::set_warning_only(bool value) {
  _internal_set_warning_only(value);
  // @@protoc_insertion_point(field_set:chrome_browser_crowd_deny.SiteReputation.warning_only)
}

// -------------------------------------------------------------------

// PreloadData

// repeated .chrome_browser_crowd_deny.SiteReputation site_reputations = 1;
inline int PreloadData::_internal_site_reputations_size() const {
  return site_reputations_.size();
}
inline int PreloadData::site_reputations_size() const {
  return _internal_site_reputations_size();
}
inline void PreloadData::clear_site_reputations() {
  site_reputations_.Clear();
}
inline ::chrome_browser_crowd_deny::SiteReputation* PreloadData::mutable_site_reputations(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_crowd_deny.PreloadData.site_reputations)
  return site_reputations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_crowd_deny::SiteReputation >*
PreloadData::mutable_site_reputations() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_crowd_deny.PreloadData.site_reputations)
  return &site_reputations_;
}
inline const ::chrome_browser_crowd_deny::SiteReputation& PreloadData::_internal_site_reputations(int index) const {
  return site_reputations_.Get(index);
}
inline const ::chrome_browser_crowd_deny::SiteReputation& PreloadData::site_reputations(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_crowd_deny.PreloadData.site_reputations)
  return _internal_site_reputations(index);
}
inline ::chrome_browser_crowd_deny::SiteReputation* PreloadData::_internal_add_site_reputations() {
  return site_reputations_.Add();
}
inline ::chrome_browser_crowd_deny::SiteReputation* PreloadData::add_site_reputations() {
  ::chrome_browser_crowd_deny::SiteReputation* _add = _internal_add_site_reputations();
  // @@protoc_insertion_point(field_add:chrome_browser_crowd_deny.PreloadData.site_reputations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_crowd_deny::SiteReputation >&
PreloadData::site_reputations() const {
  // @@protoc_insertion_point(field_list:chrome_browser_crowd_deny.PreloadData.site_reputations)
  return site_reputations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_crowd_deny

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crowd_5fdeny_2eproto
