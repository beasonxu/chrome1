// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crowd_deny.proto

#include "crowd_deny.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chrome_browser_crowd_deny {
PROTOBUF_CONSTEXPR SiteReputation::SiteReputation(
    ::_pbi::ConstantInitialized)
  : domain_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , notification_ux_quality_(0)

  , include_subdomains_(false)
  , warning_only_(false){}
struct SiteReputationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteReputationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteReputationDefaultTypeInternal() {}
  union {
    SiteReputation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteReputationDefaultTypeInternal _SiteReputation_default_instance_;
PROTOBUF_CONSTEXPR PreloadData::PreloadData(
    ::_pbi::ConstantInitialized)
  : site_reputations_(){}
struct PreloadDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreloadDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreloadDataDefaultTypeInternal() {}
  union {
    PreloadData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreloadDataDefaultTypeInternal _PreloadData_default_instance_;
}  // namespace chrome_browser_crowd_deny
namespace chrome_browser_crowd_deny {
bool SiteReputation_NotificationUserExperienceQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SiteReputation_NotificationUserExperienceQuality_strings[6] = {};

static const char SiteReputation_NotificationUserExperienceQuality_names[] =
  "ABUSIVE_CONTENT"
  "ABUSIVE_PROMPTS"
  "ACCEPTABLE"
  "DISRUPTIVE_BEHAVIOR"
  "UNKNOWN"
  "UNSOLICITED_PROMPTS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SiteReputation_NotificationUserExperienceQuality_entries[] = {
  { {SiteReputation_NotificationUserExperienceQuality_names + 0, 15}, 4 },
  { {SiteReputation_NotificationUserExperienceQuality_names + 15, 15}, 3 },
  { {SiteReputation_NotificationUserExperienceQuality_names + 30, 10}, 1 },
  { {SiteReputation_NotificationUserExperienceQuality_names + 40, 19}, 5 },
  { {SiteReputation_NotificationUserExperienceQuality_names + 59, 7}, 0 },
  { {SiteReputation_NotificationUserExperienceQuality_names + 66, 19}, 2 },
};

static const int SiteReputation_NotificationUserExperienceQuality_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  2, // 1 -> ACCEPTABLE
  5, // 2 -> UNSOLICITED_PROMPTS
  1, // 3 -> ABUSIVE_PROMPTS
  0, // 4 -> ABUSIVE_CONTENT
  3, // 5 -> DISRUPTIVE_BEHAVIOR
};

const std::string& SiteReputation_NotificationUserExperienceQuality_Name(
    SiteReputation_NotificationUserExperienceQuality value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SiteReputation_NotificationUserExperienceQuality_entries,
          SiteReputation_NotificationUserExperienceQuality_entries_by_number,
          6, SiteReputation_NotificationUserExperienceQuality_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SiteReputation_NotificationUserExperienceQuality_entries,
      SiteReputation_NotificationUserExperienceQuality_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SiteReputation_NotificationUserExperienceQuality_strings[idx].get();
}
bool SiteReputation_NotificationUserExperienceQuality_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SiteReputation_NotificationUserExperienceQuality* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SiteReputation_NotificationUserExperienceQuality_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<SiteReputation_NotificationUserExperienceQuality>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::UNKNOWN;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::ACCEPTABLE;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::UNSOLICITED_PROMPTS;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::ABUSIVE_PROMPTS;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::ABUSIVE_CONTENT;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::DISRUPTIVE_BEHAVIOR;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::NotificationUserExperienceQuality_MIN;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::NotificationUserExperienceQuality_MAX;
constexpr int SiteReputation::NotificationUserExperienceQuality_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SiteReputation::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteReputation>()._has_bits_);
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notification_ux_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_include_subdomains(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_warning_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SiteReputation::SiteReputation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_crowd_deny.SiteReputation)
}
SiteReputation::SiteReputation(const SiteReputation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    domain_.Set(from._internal_domain(), 
      GetArenaForAllocation());
  }
  ::memcpy(&notification_ux_quality_, &from.notification_ux_quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&warning_only_) -
    reinterpret_cast<char*>(&notification_ux_quality_)) + sizeof(warning_only_));
  // @@protoc_insertion_point(copy_constructor:chrome_browser_crowd_deny.SiteReputation)
}

inline void SiteReputation::SharedCtor() {
domain_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notification_ux_quality_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&warning_only_) -
    reinterpret_cast<char*>(&notification_ux_quality_)) + sizeof(warning_only_));
}

SiteReputation::~SiteReputation() {
  // @@protoc_insertion_point(destructor:chrome_browser_crowd_deny.SiteReputation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteReputation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  domain_.Destroy();
}

void SiteReputation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteReputation::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_crowd_deny.SiteReputation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    domain_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&notification_ux_quality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&warning_only_) -
        reinterpret_cast<char*>(&notification_ux_quality_)) + sizeof(warning_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SiteReputation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .chrome_browser_crowd_deny.SiteReputation.NotificationUserExperienceQuality notification_ux_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality_IsValid(val))) {
            _internal_set_notification_ux_quality(static_cast<::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool include_subdomains = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_include_subdomains(&has_bits);
          include_subdomains_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool warning_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_warning_only(&has_bits);
          warning_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteReputation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_crowd_deny.SiteReputation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string domain = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // optional .chrome_browser_crowd_deny.SiteReputation.NotificationUserExperienceQuality notification_ux_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_notification_ux_quality(), target);
  }

  // optional bool include_subdomains = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_include_subdomains(), target);
  }

  // optional bool warning_only = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_warning_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_crowd_deny.SiteReputation)
  return target;
}

size_t SiteReputation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_crowd_deny.SiteReputation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string domain = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional .chrome_browser_crowd_deny.SiteReputation.NotificationUserExperienceQuality notification_ux_quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_notification_ux_quality());
    }

    // optional bool include_subdomains = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool warning_only = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteReputation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SiteReputation*>(
      &from));
}

void SiteReputation::MergeFrom(const SiteReputation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_crowd_deny.SiteReputation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      notification_ux_quality_ = from.notification_ux_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_subdomains_ = from.include_subdomains_;
    }
    if (cached_has_bits & 0x00000008u) {
      warning_only_ = from.warning_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SiteReputation::CopyFrom(const SiteReputation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_crowd_deny.SiteReputation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteReputation::IsInitialized() const {
  return true;
}

void SiteReputation::InternalSwap(SiteReputation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &domain_, lhs_arena,
      &other->domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteReputation, warning_only_)
      + sizeof(SiteReputation::warning_only_)
      - PROTOBUF_FIELD_OFFSET(SiteReputation, notification_ux_quality_)>(
          reinterpret_cast<char*>(&notification_ux_quality_),
          reinterpret_cast<char*>(&other->notification_ux_quality_));
}

std::string SiteReputation::GetTypeName() const {
  return "chrome_browser_crowd_deny.SiteReputation";
}


// ===================================================================

class PreloadData::_Internal {
 public:
};

PreloadData::PreloadData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  site_reputations_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_crowd_deny.PreloadData)
}
PreloadData::PreloadData(const PreloadData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      site_reputations_(from.site_reputations_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_crowd_deny.PreloadData)
}

inline void PreloadData::SharedCtor() {
}

PreloadData::~PreloadData() {
  // @@protoc_insertion_point(destructor:chrome_browser_crowd_deny.PreloadData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreloadData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreloadData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreloadData::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_crowd_deny.PreloadData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_reputations_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PreloadData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .chrome_browser_crowd_deny.SiteReputation site_reputations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_site_reputations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreloadData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_crowd_deny.PreloadData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chrome_browser_crowd_deny.SiteReputation site_reputations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_site_reputations_size()); i < n; i++) {
    const auto& repfield = this->_internal_site_reputations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_crowd_deny.PreloadData)
  return target;
}

size_t PreloadData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_crowd_deny.PreloadData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chrome_browser_crowd_deny.SiteReputation site_reputations = 1;
  total_size += 1UL * this->_internal_site_reputations_size();
  for (const auto& msg : this->site_reputations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreloadData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PreloadData*>(
      &from));
}

void PreloadData::MergeFrom(const PreloadData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_crowd_deny.PreloadData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  site_reputations_.MergeFrom(from.site_reputations_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PreloadData::CopyFrom(const PreloadData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_crowd_deny.PreloadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreloadData::IsInitialized() const {
  return true;
}

void PreloadData::InternalSwap(PreloadData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  site_reputations_.InternalSwap(&other->site_reputations_);
}

std::string PreloadData::GetTypeName() const {
  return "chrome_browser_crowd_deny.PreloadData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_crowd_deny
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_crowd_deny::SiteReputation*
Arena::CreateMaybeMessage< ::chrome_browser_crowd_deny::SiteReputation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_crowd_deny::SiteReputation >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_crowd_deny::PreloadData*
Arena::CreateMaybeMessage< ::chrome_browser_crowd_deny::PreloadData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_crowd_deny::PreloadData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
