// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/cookies/CookiesFetcher

#ifndef org_chromium_chrome_browser_cookies_CookiesFetcher_JNI
#define org_chromium_chrome_browser_cookies_CookiesFetcher_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_cookies_CookiesFetcher[];
const char kClassPath_org_chromium_chrome_browser_cookies_CookiesFetcher[] =
    "org/chromium/chrome/browser/cookies/CookiesFetcher";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_cookies_CookiesFetcher_clazz(nullptr);
#ifndef org_chromium_chrome_browser_cookies_CookiesFetcher_clazz_defined
#define org_chromium_chrome_browser_cookies_CookiesFetcher_clazz_defined
inline jclass org_chromium_chrome_browser_cookies_CookiesFetcher_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_cookies_CookiesFetcher,
      &g_org_chromium_chrome_browser_cookies_CookiesFetcher_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_CookiesFetcher_PersistCookies(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_M6wmuchs(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_CookiesFetcher_PersistCookies(env);
}

static void JNI_CookiesFetcher_RestoreCookies(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    const base::android::JavaParamRef<jstring>& value,
    const base::android::JavaParamRef<jstring>& domain,
    const base::android::JavaParamRef<jstring>& path,
    jlong creation,
    jlong expiration,
    jlong lastAccess,
    jlong lastUpdate,
    jboolean secure,
    jboolean httpOnly,
    jint sameSite,
    jint priority,
    jboolean sameParty,
    const base::android::JavaParamRef<jstring>& partitionKey,
    jint sourceScheme,
    jint sourcePort);

JNI_GENERATOR_EXPORT void Java_J_N_McZsSVxA(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jstring value,
    jstring domain,
    jstring path,
    jlong creation,
    jlong expiration,
    jlong lastAccess,
    jlong lastUpdate,
    jboolean secure,
    jboolean httpOnly,
    jint sameSite,
    jint priority,
    jboolean sameParty,
    jstring partitionKey,
    jint sourceScheme,
    jint sourcePort) {
  return JNI_CookiesFetcher_RestoreCookies(env, base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jstring>(env, value), base::android::JavaParamRef<jstring>(env,
      domain), base::android::JavaParamRef<jstring>(env, path), creation, expiration, lastAccess,
      lastUpdate, secure, httpOnly, sameSite, priority, sameParty,
      base::android::JavaParamRef<jstring>(env, partitionKey), sourceScheme, sourcePort);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_cookies_CookiesFetcher_createCookie(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_CookiesFetcher_createCookie(JNIEnv* env,
    const base::android::JavaRef<jstring>& name,
    const base::android::JavaRef<jstring>& value,
    const base::android::JavaRef<jstring>& domain,
    const base::android::JavaRef<jstring>& path,
    jlong creation,
    jlong expiration,
    jlong lastAccess,
    jlong lastUpdate,
    jboolean secure,
    jboolean httpOnly,
    JniIntWrapper sameSite,
    JniIntWrapper priority,
    jboolean sameParty,
    const base::android::JavaRef<jstring>& partitionKey,
    JniIntWrapper sourceScheme,
    JniIntWrapper sourcePort) {
  jclass clazz = org_chromium_chrome_browser_cookies_CookiesFetcher_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_cookies_CookiesFetcher_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createCookie",
"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJJJZZIIZLjava/lang/String;II)Lorg/chromium/chrome/browser/cookies/CanonicalCookie;",
          &g_org_chromium_chrome_browser_cookies_CookiesFetcher_createCookie);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, name.obj(), value.obj(), domain.obj(), path.obj(), creation,
              expiration, lastAccess, lastUpdate, secure, httpOnly, as_jint(sameSite),
              as_jint(priority), sameParty, partitionKey.obj(), as_jint(sourceScheme),
              as_jint(sourcePort));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_cookies_CookiesFetcher_onCookieFetchFinished(nullptr);
static void Java_CookiesFetcher_onCookieFetchFinished(JNIEnv* env, const
    base::android::JavaRef<jobjectArray>& cookies) {
  jclass clazz = org_chromium_chrome_browser_cookies_CookiesFetcher_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_cookies_CookiesFetcher_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onCookieFetchFinished",
          "([Lorg/chromium/chrome/browser/cookies/CanonicalCookie;)V",
          &g_org_chromium_chrome_browser_cookies_CookiesFetcher_onCookieFetchFinished);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, cookies.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_cookies_CookiesFetcher_createCookiesArray(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_CookiesFetcher_createCookiesArray(JNIEnv* env, JniIntWrapper size) {
  jclass clazz = org_chromium_chrome_browser_cookies_CookiesFetcher_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_cookies_CookiesFetcher_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createCookiesArray",
          "(I)[Lorg/chromium/chrome/browser/cookies/CanonicalCookie;",
          &g_org_chromium_chrome_browser_cookies_CookiesFetcher_createCookiesArray);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(size)));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

#endif  // org_chromium_chrome_browser_cookies_CookiesFetcher_JNI
