// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/logo/LogoBridge

#ifndef org_chromium_chrome_browser_logo_LogoBridge_JNI
#define org_chromium_chrome_browser_logo_LogoBridge_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_chrome_browser_logo_LogoBridge[];
const char kClassPath_org_chromium_chrome_browser_logo_LogoBridge[] =
    "org/chromium/chrome/browser/logo/LogoBridge";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver[];
const char kClassPath_org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver[] =
    "org/chromium/chrome/browser/logo/LogoBridge$LogoObserver";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_logo_LogoBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_logo_LogoBridge_clazz_defined
#define org_chromium_chrome_browser_logo_LogoBridge_clazz_defined
inline jclass org_chromium_chrome_browser_logo_LogoBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_chrome_browser_logo_LogoBridge,
      &g_org_chromium_chrome_browser_logo_LogoBridge_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_clazz(nullptr);
#ifndef org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_clazz_defined
#define org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_clazz_defined
inline jclass org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver,
      &g_org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_LogoBridge_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& profile);

JNI_GENERATOR_EXPORT jlong Java_J_N_MiF49PQd(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject profile) {
  return JNI_LogoBridge_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, profile));
}

JNI_GENERATOR_EXPORT void Java_J_N_MzrOFrdr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLogoBridge,
    jobject caller,
    jobject logoObserver) {
  LogoBridge* native = reinterpret_cast<LogoBridge*>(nativeLogoBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCurrentLogo");
  return native->GetCurrentLogo(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, logoObserver));
}

JNI_GENERATOR_EXPORT void Java_J_N_MwFfD4qv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLogoBridge,
    jobject caller) {
  LogoBridge* native = reinterpret_cast<LogoBridge*>(nativeLogoBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_onLogoAvailable(nullptr);
static void Java_LogoObserver_onLogoAvailable(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& logo,
    jboolean fromCache) {
  jclass clazz = org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onLogoAvailable",
          "(Lorg/chromium/chrome/browser/logo/LogoBridge$Logo;Z)V",
          &g_org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_onLogoAvailable);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, logo.obj(), fromCache);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_onCachedLogoRevalidated(nullptr);
static void Java_LogoObserver_onCachedLogoRevalidated(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onCachedLogoRevalidated",
          "()V",
          &g_org_chromium_chrome_browser_logo_LogoBridge_00024LogoObserver_onCachedLogoRevalidated);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_chrome_browser_logo_LogoBridge_createLogo(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_LogoBridge_createLogo(JNIEnv* env, const
    base::android::JavaRef<jobject>& image,
    const base::android::JavaRef<jstring>& onClickUrl,
    const base::android::JavaRef<jstring>& altText,
    const base::android::JavaRef<jstring>& gifUrl) {
  jclass clazz = org_chromium_chrome_browser_logo_LogoBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_logo_LogoBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createLogo",
"(Landroid/graphics/Bitmap;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/chromium/chrome/browser/logo/LogoBridge$Logo;",
          &g_org_chromium_chrome_browser_logo_LogoBridge_createLogo);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, image.obj(), onClickUrl.obj(), altText.obj(), gifUrl.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_chromium_chrome_browser_logo_LogoBridge_JNI
