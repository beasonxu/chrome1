// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/omnibox/suggestions/AutocompleteController

#ifndef org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_JNI
#define org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController[];
const char kClassPath_org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController[] =
    "org/chromium/chrome/browser/omnibox/suggestions/AutocompleteController";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_clazz(nullptr);
#ifndef org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_clazz_defined
#define org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_clazz_defined
inline jclass org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController,
      &g_org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_Mc4QrncX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid,
    jstring text,
    jint cursorPosition,
    jstring desiredTld,
    jstring currentUrl,
    jint pageClassification,
    jboolean preventInlineAutocomplete,
    jboolean preferKeyword,
    jboolean allowExactKeywordMatch,
    jboolean wantAsynchronousMatches) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Start");
  return native->Start(env, base::android::JavaParamRef<jstring>(env, text), cursorPosition,
      base::android::JavaParamRef<jstring>(env, desiredTld),
      base::android::JavaParamRef<jstring>(env, currentUrl), pageClassification,
      preventInlineAutocomplete, preferKeyword, allowExactKeywordMatch, wantAsynchronousMatches);
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MDxZMia5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid,
    jstring text,
    jboolean focusedFromFakebox) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Classify", NULL);
  return native->Classify(env, base::android::JavaParamRef<jstring>(env, text),
      focusedFromFakebox).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MktNJvjP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid,
    jboolean clearResults) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Stop");
  return native->Stop(env, clearResults);
}

JNI_GENERATOR_EXPORT void Java_J_N_MHXditHc(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResetSession");
  return native->ResetSession(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MqRSHXK7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid,
    jint matchIndex,
    jint disposition,
    jstring currentPageUrl,
    jint pageClassification,
    jlong elapsedTimeSinceModified,
    jint completedLength,
    jobject webContents) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSuggestionSelected");
  return native->OnSuggestionSelected(env, matchIndex, disposition,
      base::android::JavaParamRef<jstring>(env, currentPageUrl), pageClassification,
      elapsedTimeSinceModified, completedLength, base::android::JavaParamRef<jobject>(env,
      webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_MmFptZoy(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid,
    jstring omniboxText,
    jstring currentUrl,
    jint pageClassification,
    jstring currentTitle) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnOmniboxFocused");
  return native->OnOmniboxFocused(env, base::android::JavaParamRef<jstring>(env, omniboxText),
      base::android::JavaParamRef<jstring>(env, currentUrl), pageClassification,
      base::android::JavaParamRef<jstring>(env, currentTitle));
}

JNI_GENERATOR_EXPORT void Java_J_N_McljA_1bE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid,
    jint matchIndex,
    jint elementIndex) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteMatchElement");
  return native->DeleteMatchElement(env, matchIndex, elementIndex);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mji1IuFV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid,
    jint matchIndex) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteMatch");
  return native->DeleteMatch(env, matchIndex);
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MXE8I_1ZK(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid,
    jint matchIndex,
    jlong elapsedTimeSinceInputChange,
    jstring newQueryText,
    jobjectArray newQueryParams) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native,
      "UpdateMatchDestinationURLWithAdditionalAssistedQueryStats", NULL);
  return native->UpdateMatchDestinationURLWithAdditionalAssistedQueryStats(env, matchIndex,
      elapsedTimeSinceInputChange, base::android::JavaParamRef<jstring>(env, newQueryText),
      base::android::JavaParamRef<jobjectArray>(env, newQueryParams)).Release();
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MUCLrey4(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid,
    jint matchIndex) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetMatchingTabForSuggestion", NULL);
  return native->GetMatchingTabForSuggestion(env, matchIndex).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MBMrsq02(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid,
    jobjectArray matches,
    jfloatArray confidenceScores) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetVoiceMatches");
  return native->SetVoiceMatches(env, base::android::JavaParamRef<jobjectArray>(env, matches),
      base::android::JavaParamRef<jfloatArray>(env, confidenceScores));
}

JNI_GENERATOR_EXPORT void Java_J_N_MVpyxSWx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAutocompleteControllerAndroid) {
  AutocompleteControllerAndroid* native =
      reinterpret_cast<AutocompleteControllerAndroid*>(nativeAutocompleteControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartPrefetch");
  return native->StartPrefetch(env);
}

static base::android::ScopedJavaLocalRef<jobject> JNI_AutocompleteController_GetForProfile(JNIEnv*
    env, const base::android::JavaParamRef<jobject>& profile);

JNI_GENERATOR_EXPORT jobject Java_J_N_MDwR4hsq(
    JNIEnv* env,
    jclass jcaller,
    jobject profile) {
  return JNI_AutocompleteController_GetForProfile(env, base::android::JavaParamRef<jobject>(env,
      profile)).Release();
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_AutocompleteController_Constructor(JNIEnv*
    env, const base::android::JavaRef<jobject>& profile,
    jlong nativeController) {
  jclass clazz = org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(Lorg/chromium/chrome/browser/profiles/Profile;J)V",
          &g_org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, profile.obj(), nativeController);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_onSuggestionsReceived(nullptr);
static void Java_AutocompleteController_onSuggestionsReceived(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& autocompleteResult,
    const base::android::JavaRef<jstring>& inlineAutocompleteText,
    jboolean isFinal) {
  jclass clazz = org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onSuggestionsReceived",
          "(Lorg/chromium/components/omnibox/AutocompleteResult;Ljava/lang/String;Z)V",
&g_org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_onSuggestionsReceived);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, autocompleteResult.obj(), inlineAutocompleteText.obj(),
              isFinal);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_notifyNativeDestroyed(nullptr);
static void Java_AutocompleteController_notifyNativeDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "notifyNativeDestroyed",
          "()V",
&g_org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_notifyNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_omnibox_suggestions_AutocompleteController_JNI
