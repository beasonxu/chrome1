// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/ui/favicon/FaviconHelper

#ifndef org_chromium_chrome_browser_ui_favicon_FaviconHelper_JNI
#define org_chromium_chrome_browser_ui_favicon_FaviconHelper_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_ui_favicon_FaviconHelper[];
const char kClassPath_org_chromium_chrome_browser_ui_favicon_FaviconHelper[] =
    "org/chromium/chrome/browser/ui/favicon/FaviconHelper";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback[];
const char
    kClassPath_org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback[] =
    "org/chromium/chrome/browser/ui/favicon/FaviconHelper$FaviconImageCallback";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_ui_favicon_FaviconHelper_clazz(nullptr);
#ifndef org_chromium_chrome_browser_ui_favicon_FaviconHelper_clazz_defined
#define org_chromium_chrome_browser_ui_favicon_FaviconHelper_clazz_defined
inline jclass org_chromium_chrome_browser_ui_favicon_FaviconHelper_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_ui_favicon_FaviconHelper,
      &g_org_chromium_chrome_browser_ui_favicon_FaviconHelper_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback_clazz(nullptr);
#ifndef org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback_clazz_defined
#define org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback_clazz_defined
inline jclass
    org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback,
      &g_org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_FaviconHelper_Init(JNIEnv* env);

JNI_GENERATOR_EXPORT jlong Java_J_N_MUcnJuRZ(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_FaviconHelper_Init(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mz5mgjYL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeFaviconHelper) {
  FaviconHelper* native = reinterpret_cast<FaviconHelper*>(nativeFaviconHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MYTn7kvC(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeFaviconHelper,
    jobject profile,
    jobjectArray urls,
    jint desiredSizeInDip,
    jobject faviconImageCallback) {
  FaviconHelper* native = reinterpret_cast<FaviconHelper*>(nativeFaviconHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetComposedFaviconImage", false);
  return native->GetComposedFaviconImage(env, base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jobjectArray>(env, urls), desiredSizeInDip,
      base::android::JavaParamRef<jobject>(env, faviconImageCallback));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MBZyBYDK(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeFaviconHelper,
    jobject profile,
    jstring pageUrl,
    jint desiredSizeInDip,
    jobject faviconImageCallback) {
  FaviconHelper* native = reinterpret_cast<FaviconHelper*>(nativeFaviconHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLocalFaviconImageForURL", false);
  return native->GetLocalFaviconImageForURL(env, base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jstring>(env, pageUrl), desiredSizeInDip,
      base::android::JavaParamRef<jobject>(env, faviconImageCallback));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MNHvfXi1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeFaviconHelper,
    jobject profile,
    jobject pageUrl,
    jint desiredSizeInDip,
    jobject faviconImageCallback) {
  FaviconHelper* native = reinterpret_cast<FaviconHelper*>(nativeFaviconHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetForeignFaviconImageForURL", false);
  return native->GetForeignFaviconImageForURL(env, base::android::JavaParamRef<jobject>(env,
      profile), base::android::JavaParamRef<jobject>(env, pageUrl), desiredSizeInDip,
      base::android::JavaParamRef<jobject>(env, faviconImageCallback));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback_onFaviconAvailable(nullptr);
static void Java_FaviconImageCallback_onFaviconAvailable(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& image,
    const base::android::JavaRef<jobject>& iconUrl) {
  jclass clazz =
      org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onFaviconAvailable",
          "(Landroid/graphics/Bitmap;Lorg/chromium/url/GURL;)V",
&g_org_chromium_chrome_browser_ui_favicon_FaviconHelper_00024FaviconImageCallback_onFaviconAvailable);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, image.obj(), iconUrl.obj());
}

#endif  // org_chromium_chrome_browser_ui_favicon_FaviconHelper_JNI
