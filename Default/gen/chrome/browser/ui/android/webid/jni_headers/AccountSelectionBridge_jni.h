// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/ui/android/webid/AccountSelectionBridge

#ifndef org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_JNI
#define org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge[];
const char kClassPath_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge[] =
    "org/chromium/chrome/browser/ui/android/webid/AccountSelectionBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz_defined
#define org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz_defined
inline jclass org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge,
      &g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_MrAQTS0E(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAccountSelectionViewAndroid,
    jobjectArray accountFields,
    jobject accountPictureUrl,
    jboolean isSignedIn) {
  AccountSelectionViewAndroid* native =
      reinterpret_cast<AccountSelectionViewAndroid*>(nativeAccountSelectionViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAccountSelected");
  return native->OnAccountSelected(env, base::android::JavaParamRef<jobjectArray>(env,
      accountFields), base::android::JavaParamRef<jobject>(env, accountPictureUrl), isSignedIn);
}

JNI_GENERATOR_EXPORT void Java_J_N_MTfNRxYD(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAccountSelectionViewAndroid,
    jint dismissReason) {
  AccountSelectionViewAndroid* native =
      reinterpret_cast<AccountSelectionViewAndroid*>(nativeAccountSelectionViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDismiss");
  return native->OnDismiss(env, dismissReason);
}

JNI_GENERATOR_EXPORT void Java_J_N_MAiOVOJ9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAccountSelectionViewAndroid) {
  AccountSelectionViewAndroid* native =
      reinterpret_cast<AccountSelectionViewAndroid*>(nativeAccountSelectionViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAutoSignInCancelled");
  return native->OnAutoSignInCancelled(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_getBrandIconMinimumSize(nullptr);
static jint Java_AccountSelectionBridge_getBrandIconMinimumSize(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getBrandIconMinimumSize",
          "()I",
&g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_getBrandIconMinimumSize);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_getBrandIconIdealSize(nullptr);
static jint Java_AccountSelectionBridge_getBrandIconIdealSize(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getBrandIconIdealSize",
          "()I",
&g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_getBrandIconIdealSize);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_AccountSelectionBridge_create(JNIEnv* env,
    jlong nativeView,
    const base::android::JavaRef<jobject>& windowAndroid) {
  jclass clazz = org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLorg/chromium/ui/base/WindowAndroid;)Lorg/chromium/chrome/browser/ui/android/webid/AccountSelectionBridge;",
          &g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeView, windowAndroid.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_destroy(nullptr);
static void Java_AccountSelectionBridge_destroy(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_showAccounts(nullptr);
static void Java_AccountSelectionBridge_showAccounts(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& rpForDisplay,
    const base::android::JavaRef<jstring>& idpForDisplay,
    const base::android::JavaRef<jobjectArray>& accounts,
    const base::android::JavaRef<jobject>& idpMetadata,
    const base::android::JavaRef<jobject>& clientIdMetadata,
    jboolean isAutoSignIn) {
  jclass clazz = org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "showAccounts",
"(Ljava/lang/String;Ljava/lang/String;[Lorg/chromium/chrome/browser/ui/android/webid/data/Account;Lorg/chromium/chrome/browser/ui/android/webid/data/IdentityProviderMetadata;Lorg/chromium/chrome/browser/ui/android/webid/data/ClientIdMetadata;Z)V",
          &g_org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_showAccounts);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, rpForDisplay.obj(), idpForDisplay.obj(), accounts.obj(),
              idpMetadata.obj(), clientIdMetadata.obj(), isAutoSignIn);
}

#endif  // org_chromium_chrome_browser_ui_android_webid_AccountSelectionBridge_JNI
