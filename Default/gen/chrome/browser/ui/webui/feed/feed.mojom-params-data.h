// chrome/browser/ui/webui/feed/feed.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_FEED_FEED_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_UI_WEBUI_FEED_FEED_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace feed {
namespace mojom {
namespace internal {

class ValidationContext;
class  FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data handler;
  mojo::internal::Interface_Data side_panel;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data>;

  FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data();
  ~FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data() = delete;
};
static_assert(sizeof(FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data) == 24,
              "Bad sizeof(FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data)");
class  FeedSidePanelHandler_DoSomething_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FeedSidePanelHandler_DoSomething_Params_Data>;

  FeedSidePanelHandler_DoSomething_Params_Data();
  ~FeedSidePanelHandler_DoSomething_Params_Data() = delete;
};
static_assert(sizeof(FeedSidePanelHandler_DoSomething_Params_Data) == 8,
              "Bad sizeof(FeedSidePanelHandler_DoSomething_Params_Data)");
class  FeedSidePanel_OnEventOccurred_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;

 private:
  friend class mojo::internal::MessageFragment<FeedSidePanel_OnEventOccurred_Params_Data>;

  FeedSidePanel_OnEventOccurred_Params_Data();
  ~FeedSidePanel_OnEventOccurred_Params_Data() = delete;
};
static_assert(sizeof(FeedSidePanel_OnEventOccurred_Params_Data) == 16,
              "Bad sizeof(FeedSidePanel_OnEventOccurred_Params_Data)");

}  // namespace internal


class FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_ParamsDataView {
 public:
  FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_ParamsDataView() = default;

  FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_ParamsDataView(
      internal::FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeHandler() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::feed::mojom::FeedSidePanelHandlerInterfaceBase>>(
            &data_->handler, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeSidePanel() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::feed::mojom::FeedSidePanelInterfaceBase>>(
            &data_->side_panel, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FeedSidePanelHandler_DoSomething_ParamsDataView {
 public:
  FeedSidePanelHandler_DoSomething_ParamsDataView() = default;

  FeedSidePanelHandler_DoSomething_ParamsDataView(
      internal::FeedSidePanelHandler_DoSomething_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FeedSidePanelHandler_DoSomething_Params_Data* data_ = nullptr;
};



class FeedSidePanel_OnEventOccurred_ParamsDataView {
 public:
  FeedSidePanel_OnEventOccurred_ParamsDataView() = default;

  FeedSidePanel_OnEventOccurred_ParamsDataView(
      internal::FeedSidePanel_OnEventOccurred_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FeedSidePanel_OnEventOccurred_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};






inline void FeedSidePanel_OnEventOccurred_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace feed

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_UI_WEBUI_FEED_FEED_MOJOM_PARAMS_DATA_H_