// chrome/browser/ui/webui/feed/feed.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/browser/ui/webui/feed/feed.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/browser/ui/webui/feed/feed.mojom-params-data.h"
#include "chrome/browser/ui/webui/feed/feed.mojom-shared-message-ids.h"

#include "chrome/browser/ui/webui/feed/feed.mojom-import-headers.h"
#include "chrome/browser/ui/webui/feed/feed.mojom-test-utils.h"


#ifndef CHROME_BROWSER_UI_WEBUI_FEED_FEED_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_FEED_FEED_MOJOM_JUMBO_H_
#endif



namespace feed {
namespace mojom {
const char FeedSidePanelHandlerFactory::Name_[] = "feed.mojom.FeedSidePanelHandlerFactory";

FeedSidePanelHandlerFactory::IPCStableHashFunction FeedSidePanelHandlerFactory::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kFeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Name: {
      return &FeedSidePanelHandlerFactory::CreateFeedSidePanelHandler_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* FeedSidePanelHandlerFactory::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kFeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Name:
            return "Receive feed::mojom::FeedSidePanelHandlerFactory::CreateFeedSidePanelHandler";
    }
  } else {
    switch (message.name()) {
      case internal::kFeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Name:
            return "Receive reply feed::mojom::FeedSidePanelHandlerFactory::CreateFeedSidePanelHandler";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t FeedSidePanelHandlerFactory::CreateFeedSidePanelHandler_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed::mojom::FeedSidePanelHandlerFactory::CreateFeedSidePanelHandler");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

FeedSidePanelHandlerFactoryProxy::FeedSidePanelHandlerFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void FeedSidePanelHandlerFactoryProxy::CreateFeedSidePanelHandler(
    ::mojo::PendingReceiver<FeedSidePanelHandler> in_handler, ::mojo::PendingRemote<FeedSidePanel> in_side_panel) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send feed::mojom::FeedSidePanelHandlerFactory::CreateFeedSidePanelHandler", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("handler"), in_handler,
                        "<value of type ::mojo::PendingReceiver<FeedSidePanelHandler>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("side_panel"), in_side_panel,
                        "<value of type ::mojo::PendingRemote<FeedSidePanel>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kFeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed::mojom::internal::FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::feed::mojom::FeedSidePanelHandlerInterfaceBase>>(
      in_handler, &params->handler, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->handler),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid handler in FeedSidePanelHandlerFactory.CreateFeedSidePanelHandler request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::feed::mojom::FeedSidePanelInterfaceBase>>(
      in_side_panel, &params->side_panel, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->side_panel),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid side_panel in FeedSidePanelHandlerFactory.CreateFeedSidePanelHandler request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FeedSidePanelHandlerFactory::Name_);
  message.set_method_name("CreateFeedSidePanelHandler");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool FeedSidePanelHandlerFactoryStubDispatch::Accept(
    FeedSidePanelHandlerFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kFeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Name: {

      DCHECK(message->is_serialized());
      internal::FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data* params =
          reinterpret_cast<internal::FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<FeedSidePanelHandler> p_handler{};
      ::mojo::PendingRemote<FeedSidePanel> p_side_panel{};
      FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_handler =
            input_data_view.TakeHandler<decltype(p_handler)>();
      }
      if (success) {
        p_side_panel =
            input_data_view.TakeSidePanel<decltype(p_side_panel)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FeedSidePanelHandlerFactory::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateFeedSidePanelHandler(
std::move(p_handler), 
std::move(p_side_panel));
      return true;
    }
  }
  return false;
}

// static
bool FeedSidePanelHandlerFactoryStubDispatch::AcceptWithResponder(
    FeedSidePanelHandlerFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kFeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kFeedSidePanelHandlerFactoryValidationInfo[] = {
    {&internal::FeedSidePanelHandlerFactory_CreateFeedSidePanelHandler_Params_Data::Validate,
     nullptr /* no response */},
};

bool FeedSidePanelHandlerFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::feed::mojom::FeedSidePanelHandlerFactory::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kFeedSidePanelHandlerFactoryValidationInfo);
}

const char FeedSidePanelHandler::Name_[] = "feed.mojom.FeedSidePanelHandler";

FeedSidePanelHandler::IPCStableHashFunction FeedSidePanelHandler::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kFeedSidePanelHandler_DoSomething_Name: {
      return &FeedSidePanelHandler::DoSomething_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* FeedSidePanelHandler::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kFeedSidePanelHandler_DoSomething_Name:
            return "Receive feed::mojom::FeedSidePanelHandler::DoSomething";
    }
  } else {
    switch (message.name()) {
      case internal::kFeedSidePanelHandler_DoSomething_Name:
            return "Receive reply feed::mojom::FeedSidePanelHandler::DoSomething";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t FeedSidePanelHandler::DoSomething_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed::mojom::FeedSidePanelHandler::DoSomething");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

FeedSidePanelHandlerProxy::FeedSidePanelHandlerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void FeedSidePanelHandlerProxy::DoSomething(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send feed::mojom::FeedSidePanelHandler::DoSomething");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kFeedSidePanelHandler_DoSomething_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed::mojom::internal::FeedSidePanelHandler_DoSomething_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FeedSidePanelHandler::Name_);
  message.set_method_name("DoSomething");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool FeedSidePanelHandlerStubDispatch::Accept(
    FeedSidePanelHandler* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kFeedSidePanelHandler_DoSomething_Name: {

      DCHECK(message->is_serialized());
      internal::FeedSidePanelHandler_DoSomething_Params_Data* params =
          reinterpret_cast<internal::FeedSidePanelHandler_DoSomething_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FeedSidePanelHandler_DoSomething_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FeedSidePanelHandler::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DoSomething();
      return true;
    }
  }
  return false;
}

// static
bool FeedSidePanelHandlerStubDispatch::AcceptWithResponder(
    FeedSidePanelHandler* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kFeedSidePanelHandler_DoSomething_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kFeedSidePanelHandlerValidationInfo[] = {
    {&internal::FeedSidePanelHandler_DoSomething_Params_Data::Validate,
     nullptr /* no response */},
};

bool FeedSidePanelHandlerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::feed::mojom::FeedSidePanelHandler::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kFeedSidePanelHandlerValidationInfo);
}

const char FeedSidePanel::Name_[] = "feed.mojom.FeedSidePanel";

FeedSidePanel::IPCStableHashFunction FeedSidePanel::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kFeedSidePanel_OnEventOccurred_Name: {
      return &FeedSidePanel::OnEventOccurred_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* FeedSidePanel::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kFeedSidePanel_OnEventOccurred_Name:
            return "Receive feed::mojom::FeedSidePanel::OnEventOccurred";
    }
  } else {
    switch (message.name()) {
      case internal::kFeedSidePanel_OnEventOccurred_Name:
            return "Receive reply feed::mojom::FeedSidePanel::OnEventOccurred";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t FeedSidePanel::OnEventOccurred_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed::mojom::FeedSidePanel::OnEventOccurred");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

FeedSidePanelProxy::FeedSidePanelProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void FeedSidePanelProxy::OnEventOccurred(
    const std::string& in_name) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send feed::mojom::FeedSidePanel::OnEventOccurred", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("name"), in_name,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kFeedSidePanel_OnEventOccurred_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed::mojom::internal::FeedSidePanel_OnEventOccurred_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->name)::BaseType> name_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_name, name_fragment);
  params->name.Set(
      name_fragment.is_null() ? nullptr : name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null name in FeedSidePanel.OnEventOccurred request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FeedSidePanel::Name_);
  message.set_method_name("OnEventOccurred");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool FeedSidePanelStubDispatch::Accept(
    FeedSidePanel* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kFeedSidePanel_OnEventOccurred_Name: {

      DCHECK(message->is_serialized());
      internal::FeedSidePanel_OnEventOccurred_Params_Data* params =
          reinterpret_cast<internal::FeedSidePanel_OnEventOccurred_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_name{};
      FeedSidePanel_OnEventOccurred_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadName(&p_name))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FeedSidePanel::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnEventOccurred(
std::move(p_name));
      return true;
    }
  }
  return false;
}

// static
bool FeedSidePanelStubDispatch::AcceptWithResponder(
    FeedSidePanel* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kFeedSidePanel_OnEventOccurred_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kFeedSidePanelValidationInfo[] = {
    {&internal::FeedSidePanel_OnEventOccurred_Params_Data::Validate,
     nullptr /* no response */},
};

bool FeedSidePanelRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::feed::mojom::FeedSidePanel::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kFeedSidePanelValidationInfo);
}



}  // namespace mojom
}  // namespace feed


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace feed {
namespace mojom {


void FeedSidePanelHandlerFactoryInterceptorForTesting::CreateFeedSidePanelHandler(::mojo::PendingReceiver<FeedSidePanelHandler> handler, ::mojo::PendingRemote<FeedSidePanel> side_panel) {
  GetForwardingInterface()->CreateFeedSidePanelHandler(std::move(handler), std::move(side_panel));
}
FeedSidePanelHandlerFactoryAsyncWaiter::FeedSidePanelHandlerFactoryAsyncWaiter(
    FeedSidePanelHandlerFactory* proxy) : proxy_(proxy) {}

FeedSidePanelHandlerFactoryAsyncWaiter::~FeedSidePanelHandlerFactoryAsyncWaiter() = default;




void FeedSidePanelHandlerInterceptorForTesting::DoSomething() {
  GetForwardingInterface()->DoSomething();
}
FeedSidePanelHandlerAsyncWaiter::FeedSidePanelHandlerAsyncWaiter(
    FeedSidePanelHandler* proxy) : proxy_(proxy) {}

FeedSidePanelHandlerAsyncWaiter::~FeedSidePanelHandlerAsyncWaiter() = default;




void FeedSidePanelInterceptorForTesting::OnEventOccurred(const std::string& name) {
  GetForwardingInterface()->OnEventOccurred(std::move(name));
}
FeedSidePanelAsyncWaiter::FeedSidePanelAsyncWaiter(
    FeedSidePanel* proxy) : proxy_(proxy) {}

FeedSidePanelAsyncWaiter::~FeedSidePanelAsyncWaiter() = default;






}  // namespace mojom
}  // namespace feed


#if defined(__clang__)
#pragma clang diagnostic pop
#endif