// chrome/browser/ui/webui/internals/user_education/user_education_internals.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/browser/ui/webui/internals/user_education/user_education_internals.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/browser/ui/webui/internals/user_education/user_education_internals.mojom-params-data.h"
#include "chrome/browser/ui/webui/internals/user_education/user_education_internals.mojom-shared-message-ids.h"

#include "chrome/browser/ui/webui/internals/user_education/user_education_internals.mojom-import-headers.h"
#include "chrome/browser/ui/webui/internals/user_education/user_education_internals.mojom-test-utils.h"


#ifndef CHROME_BROWSER_UI_WEBUI_INTERNALS_USER_EDUCATION_USER_EDUCATION_INTERNALS_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_INTERNALS_USER_EDUCATION_USER_EDUCATION_INTERNALS_MOJOM_JUMBO_H_
#endif



namespace mojom {
namespace user_education_internals {
FeaturePromoDemoPageInfo::FeaturePromoDemoPageInfo()
    : display_title(),
      display_description() {}

FeaturePromoDemoPageInfo::FeaturePromoDemoPageInfo(
    const std::string& display_title_in,
    const std::string& display_description_in)
    : display_title(std::move(display_title_in)),
      display_description(std::move(display_description_in)) {}

FeaturePromoDemoPageInfo::~FeaturePromoDemoPageInfo() = default;
size_t FeaturePromoDemoPageInfo::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->display_title);
  seed = mojo::internal::Hash(seed, this->display_description);
  return seed;
}

void FeaturePromoDemoPageInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "display_title"), this->display_title,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "display_description"), this->display_description,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool FeaturePromoDemoPageInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char UserEducationInternalsPageHandler::Name_[] = "mojom.user_education_internals.UserEducationInternalsPageHandler";

UserEducationInternalsPageHandler::IPCStableHashFunction UserEducationInternalsPageHandler::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kUserEducationInternalsPageHandler_GetTutorials_Name: {
      return &UserEducationInternalsPageHandler::GetTutorials_Sym::IPCStableHash;
    }
    case internal::kUserEducationInternalsPageHandler_StartTutorial_Name: {
      return &UserEducationInternalsPageHandler::StartTutorial_Sym::IPCStableHash;
    }
    case internal::kUserEducationInternalsPageHandler_GetFeaturePromos_Name: {
      return &UserEducationInternalsPageHandler::GetFeaturePromos_Sym::IPCStableHash;
    }
    case internal::kUserEducationInternalsPageHandler_ShowFeaturePromo_Name: {
      return &UserEducationInternalsPageHandler::ShowFeaturePromo_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* UserEducationInternalsPageHandler::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kUserEducationInternalsPageHandler_GetTutorials_Name:
            return "Receive mojom::user_education_internals::UserEducationInternalsPageHandler::GetTutorials";
      case internal::kUserEducationInternalsPageHandler_StartTutorial_Name:
            return "Receive mojom::user_education_internals::UserEducationInternalsPageHandler::StartTutorial";
      case internal::kUserEducationInternalsPageHandler_GetFeaturePromos_Name:
            return "Receive mojom::user_education_internals::UserEducationInternalsPageHandler::GetFeaturePromos";
      case internal::kUserEducationInternalsPageHandler_ShowFeaturePromo_Name:
            return "Receive mojom::user_education_internals::UserEducationInternalsPageHandler::ShowFeaturePromo";
    }
  } else {
    switch (message.name()) {
      case internal::kUserEducationInternalsPageHandler_GetTutorials_Name:
            return "Receive reply mojom::user_education_internals::UserEducationInternalsPageHandler::GetTutorials";
      case internal::kUserEducationInternalsPageHandler_StartTutorial_Name:
            return "Receive reply mojom::user_education_internals::UserEducationInternalsPageHandler::StartTutorial";
      case internal::kUserEducationInternalsPageHandler_GetFeaturePromos_Name:
            return "Receive reply mojom::user_education_internals::UserEducationInternalsPageHandler::GetFeaturePromos";
      case internal::kUserEducationInternalsPageHandler_ShowFeaturePromo_Name:
            return "Receive reply mojom::user_education_internals::UserEducationInternalsPageHandler::ShowFeaturePromo";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t UserEducationInternalsPageHandler::GetTutorials_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)mojom::user_education_internals::UserEducationInternalsPageHandler::GetTutorials");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t UserEducationInternalsPageHandler::StartTutorial_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)mojom::user_education_internals::UserEducationInternalsPageHandler::StartTutorial");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t UserEducationInternalsPageHandler::GetFeaturePromos_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)mojom::user_education_internals::UserEducationInternalsPageHandler::GetFeaturePromos");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t UserEducationInternalsPageHandler::ShowFeaturePromo_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)mojom::user_education_internals::UserEducationInternalsPageHandler::ShowFeaturePromo");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class UserEducationInternalsPageHandler_GetTutorials_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  UserEducationInternalsPageHandler_GetTutorials_ForwardToCallback(
      UserEducationInternalsPageHandler::GetTutorialsCallback callback
      ) : callback_(std::move(callback)) {
  }

  UserEducationInternalsPageHandler_GetTutorials_ForwardToCallback(const UserEducationInternalsPageHandler_GetTutorials_ForwardToCallback&) = delete;
  UserEducationInternalsPageHandler_GetTutorials_ForwardToCallback& operator=(const UserEducationInternalsPageHandler_GetTutorials_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  UserEducationInternalsPageHandler::GetTutorialsCallback callback_;
};

class UserEducationInternalsPageHandler_GetFeaturePromos_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  UserEducationInternalsPageHandler_GetFeaturePromos_ForwardToCallback(
      UserEducationInternalsPageHandler::GetFeaturePromosCallback callback
      ) : callback_(std::move(callback)) {
  }

  UserEducationInternalsPageHandler_GetFeaturePromos_ForwardToCallback(const UserEducationInternalsPageHandler_GetFeaturePromos_ForwardToCallback&) = delete;
  UserEducationInternalsPageHandler_GetFeaturePromos_ForwardToCallback& operator=(const UserEducationInternalsPageHandler_GetFeaturePromos_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  UserEducationInternalsPageHandler::GetFeaturePromosCallback callback_;
};

class UserEducationInternalsPageHandler_ShowFeaturePromo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  UserEducationInternalsPageHandler_ShowFeaturePromo_ForwardToCallback(
      UserEducationInternalsPageHandler::ShowFeaturePromoCallback callback
      ) : callback_(std::move(callback)) {
  }

  UserEducationInternalsPageHandler_ShowFeaturePromo_ForwardToCallback(const UserEducationInternalsPageHandler_ShowFeaturePromo_ForwardToCallback&) = delete;
  UserEducationInternalsPageHandler_ShowFeaturePromo_ForwardToCallback& operator=(const UserEducationInternalsPageHandler_ShowFeaturePromo_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  UserEducationInternalsPageHandler::ShowFeaturePromoCallback callback_;
};

UserEducationInternalsPageHandlerProxy::UserEducationInternalsPageHandlerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void UserEducationInternalsPageHandlerProxy::GetTutorials(
    GetTutorialsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send mojom::user_education_internals::UserEducationInternalsPageHandler::GetTutorials");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kUserEducationInternalsPageHandler_GetTutorials_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::user_education_internals::internal::UserEducationInternalsPageHandler_GetTutorials_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(UserEducationInternalsPageHandler::Name_);
  message.set_method_name("GetTutorials");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new UserEducationInternalsPageHandler_GetTutorials_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void UserEducationInternalsPageHandlerProxy::StartTutorial(
    const std::string& in_tutorial_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send mojom::user_education_internals::UserEducationInternalsPageHandler::StartTutorial", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("tutorial_id"), in_tutorial_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kUserEducationInternalsPageHandler_StartTutorial_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::user_education_internals::internal::UserEducationInternalsPageHandler_StartTutorial_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->tutorial_id)::BaseType> tutorial_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_tutorial_id, tutorial_id_fragment);
  params->tutorial_id.Set(
      tutorial_id_fragment.is_null() ? nullptr : tutorial_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->tutorial_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null tutorial_id in UserEducationInternalsPageHandler.StartTutorial request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(UserEducationInternalsPageHandler::Name_);
  message.set_method_name("StartTutorial");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void UserEducationInternalsPageHandlerProxy::GetFeaturePromos(
    GetFeaturePromosCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send mojom::user_education_internals::UserEducationInternalsPageHandler::GetFeaturePromos");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kUserEducationInternalsPageHandler_GetFeaturePromos_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::user_education_internals::internal::UserEducationInternalsPageHandler_GetFeaturePromos_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(UserEducationInternalsPageHandler::Name_);
  message.set_method_name("GetFeaturePromos");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new UserEducationInternalsPageHandler_GetFeaturePromos_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void UserEducationInternalsPageHandlerProxy::ShowFeaturePromo(
    const std::string& in_title, ShowFeaturePromoCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send mojom::user_education_internals::UserEducationInternalsPageHandler::ShowFeaturePromo", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("title"), in_title,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kUserEducationInternalsPageHandler_ShowFeaturePromo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::user_education_internals::internal::UserEducationInternalsPageHandler_ShowFeaturePromo_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->title)::BaseType> title_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_title, title_fragment);
  params->title.Set(
      title_fragment.is_null() ? nullptr : title_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->title.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null title in UserEducationInternalsPageHandler.ShowFeaturePromo request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(UserEducationInternalsPageHandler::Name_);
  message.set_method_name("ShowFeaturePromo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new UserEducationInternalsPageHandler_ShowFeaturePromo_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class UserEducationInternalsPageHandler_GetTutorials_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static UserEducationInternalsPageHandler::GetTutorialsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<UserEducationInternalsPageHandler_GetTutorials_ProxyToResponder> proxy(
        new UserEducationInternalsPageHandler_GetTutorials_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&UserEducationInternalsPageHandler_GetTutorials_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~UserEducationInternalsPageHandler_GetTutorials_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  UserEducationInternalsPageHandler_GetTutorials_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "UserEducationInternalsPageHandler::GetTutorialsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::vector<std::string>& in_tutorial_ids);
};

bool UserEducationInternalsPageHandler_GetTutorials_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::UserEducationInternalsPageHandler_GetTutorials_ResponseParams_Data* params =
      reinterpret_cast<
          internal::UserEducationInternalsPageHandler_GetTutorials_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<std::string> p_tutorial_ids{};
  UserEducationInternalsPageHandler_GetTutorials_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadTutorialIds(&p_tutorial_ids))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        UserEducationInternalsPageHandler::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_tutorial_ids));
  return true;
}

void UserEducationInternalsPageHandler_GetTutorials_ProxyToResponder::Run(
    const std::vector<std::string>& in_tutorial_ids) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply mojom::user_education_internals::UserEducationInternalsPageHandler::GetTutorials", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("tutorial_ids"), in_tutorial_ids,
                        "<value of type const std::vector<std::string>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kUserEducationInternalsPageHandler_GetTutorials_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::user_education_internals::internal::UserEducationInternalsPageHandler_GetTutorials_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->tutorial_ids)::BaseType>
      tutorial_ids_fragment(params.message());
  const mojo::internal::ContainerValidateParams tutorial_ids_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
      in_tutorial_ids, tutorial_ids_fragment, &tutorial_ids_validate_params);
  params->tutorial_ids.Set(
      tutorial_ids_fragment.is_null() ? nullptr : tutorial_ids_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->tutorial_ids.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null tutorial_ids in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(UserEducationInternalsPageHandler::Name_);
  message.set_method_name("GetTutorials");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class UserEducationInternalsPageHandler_GetFeaturePromos_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static UserEducationInternalsPageHandler::GetFeaturePromosCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<UserEducationInternalsPageHandler_GetFeaturePromos_ProxyToResponder> proxy(
        new UserEducationInternalsPageHandler_GetFeaturePromos_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&UserEducationInternalsPageHandler_GetFeaturePromos_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~UserEducationInternalsPageHandler_GetFeaturePromos_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  UserEducationInternalsPageHandler_GetFeaturePromos_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "UserEducationInternalsPageHandler::GetFeaturePromosCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<FeaturePromoDemoPageInfoPtr> in_feature_promos);
};

bool UserEducationInternalsPageHandler_GetFeaturePromos_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::UserEducationInternalsPageHandler_GetFeaturePromos_ResponseParams_Data* params =
      reinterpret_cast<
          internal::UserEducationInternalsPageHandler_GetFeaturePromos_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<FeaturePromoDemoPageInfoPtr> p_feature_promos{};
  UserEducationInternalsPageHandler_GetFeaturePromos_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadFeaturePromos(&p_feature_promos))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        UserEducationInternalsPageHandler::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_feature_promos));
  return true;
}

void UserEducationInternalsPageHandler_GetFeaturePromos_ProxyToResponder::Run(
    std::vector<FeaturePromoDemoPageInfoPtr> in_feature_promos) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply mojom::user_education_internals::UserEducationInternalsPageHandler::GetFeaturePromos", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("feature_promos"), in_feature_promos,
                        "<value of type std::vector<FeaturePromoDemoPageInfoPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kUserEducationInternalsPageHandler_GetFeaturePromos_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::user_education_internals::internal::UserEducationInternalsPageHandler_GetFeaturePromos_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->feature_promos)::BaseType>
      feature_promos_fragment(params.message());
  const mojo::internal::ContainerValidateParams feature_promos_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::mojom::user_education_internals::FeaturePromoDemoPageInfoDataView>>(
      in_feature_promos, feature_promos_fragment, &feature_promos_validate_params);
  params->feature_promos.Set(
      feature_promos_fragment.is_null() ? nullptr : feature_promos_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->feature_promos.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null feature_promos in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(UserEducationInternalsPageHandler::Name_);
  message.set_method_name("GetFeaturePromos");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class UserEducationInternalsPageHandler_ShowFeaturePromo_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static UserEducationInternalsPageHandler::ShowFeaturePromoCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<UserEducationInternalsPageHandler_ShowFeaturePromo_ProxyToResponder> proxy(
        new UserEducationInternalsPageHandler_ShowFeaturePromo_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&UserEducationInternalsPageHandler_ShowFeaturePromo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~UserEducationInternalsPageHandler_ShowFeaturePromo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  UserEducationInternalsPageHandler_ShowFeaturePromo_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "UserEducationInternalsPageHandler::ShowFeaturePromoCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_error_message);
};

bool UserEducationInternalsPageHandler_ShowFeaturePromo_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::UserEducationInternalsPageHandler_ShowFeaturePromo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::UserEducationInternalsPageHandler_ShowFeaturePromo_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::string p_error_message{};
  UserEducationInternalsPageHandler_ShowFeaturePromo_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadErrorMessage(&p_error_message))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        UserEducationInternalsPageHandler::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_error_message));
  return true;
}

void UserEducationInternalsPageHandler_ShowFeaturePromo_ProxyToResponder::Run(
    const std::string& in_error_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply mojom::user_education_internals::UserEducationInternalsPageHandler::ShowFeaturePromo", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kUserEducationInternalsPageHandler_ShowFeaturePromo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::user_education_internals::internal::UserEducationInternalsPageHandler_ShowFeaturePromo_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(UserEducationInternalsPageHandler::Name_);
  message.set_method_name("ShowFeaturePromo");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool UserEducationInternalsPageHandlerStubDispatch::Accept(
    UserEducationInternalsPageHandler* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kUserEducationInternalsPageHandler_GetTutorials_Name: {
      break;
    }
    case internal::kUserEducationInternalsPageHandler_StartTutorial_Name: {

      DCHECK(message->is_serialized());
      internal::UserEducationInternalsPageHandler_StartTutorial_Params_Data* params =
          reinterpret_cast<internal::UserEducationInternalsPageHandler_StartTutorial_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_tutorial_id{};
      UserEducationInternalsPageHandler_StartTutorial_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadTutorialId(&p_tutorial_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            UserEducationInternalsPageHandler::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StartTutorial(
std::move(p_tutorial_id));
      return true;
    }
    case internal::kUserEducationInternalsPageHandler_GetFeaturePromos_Name: {
      break;
    }
    case internal::kUserEducationInternalsPageHandler_ShowFeaturePromo_Name: {
      break;
    }
  }
  return false;
}

// static
bool UserEducationInternalsPageHandlerStubDispatch::AcceptWithResponder(
    UserEducationInternalsPageHandler* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kUserEducationInternalsPageHandler_GetTutorials_Name: {

      internal::UserEducationInternalsPageHandler_GetTutorials_Params_Data* params =
          reinterpret_cast<
              internal::UserEducationInternalsPageHandler_GetTutorials_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      UserEducationInternalsPageHandler_GetTutorials_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            UserEducationInternalsPageHandler::Name_, 0, false);
        return false;
      }
      UserEducationInternalsPageHandler::GetTutorialsCallback callback =
          UserEducationInternalsPageHandler_GetTutorials_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetTutorials(std::move(callback));
      return true;
    }
    case internal::kUserEducationInternalsPageHandler_StartTutorial_Name: {
      break;
    }
    case internal::kUserEducationInternalsPageHandler_GetFeaturePromos_Name: {

      internal::UserEducationInternalsPageHandler_GetFeaturePromos_Params_Data* params =
          reinterpret_cast<
              internal::UserEducationInternalsPageHandler_GetFeaturePromos_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      UserEducationInternalsPageHandler_GetFeaturePromos_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            UserEducationInternalsPageHandler::Name_, 2, false);
        return false;
      }
      UserEducationInternalsPageHandler::GetFeaturePromosCallback callback =
          UserEducationInternalsPageHandler_GetFeaturePromos_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetFeaturePromos(std::move(callback));
      return true;
    }
    case internal::kUserEducationInternalsPageHandler_ShowFeaturePromo_Name: {

      internal::UserEducationInternalsPageHandler_ShowFeaturePromo_Params_Data* params =
          reinterpret_cast<
              internal::UserEducationInternalsPageHandler_ShowFeaturePromo_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_title{};
      UserEducationInternalsPageHandler_ShowFeaturePromo_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadTitle(&p_title))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            UserEducationInternalsPageHandler::Name_, 3, false);
        return false;
      }
      UserEducationInternalsPageHandler::ShowFeaturePromoCallback callback =
          UserEducationInternalsPageHandler_ShowFeaturePromo_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ShowFeaturePromo(
std::move(p_title), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kUserEducationInternalsPageHandlerValidationInfo[] = {
    {&internal::UserEducationInternalsPageHandler_GetTutorials_Params_Data::Validate,
     &internal::UserEducationInternalsPageHandler_GetTutorials_ResponseParams_Data::Validate},
    {&internal::UserEducationInternalsPageHandler_StartTutorial_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::UserEducationInternalsPageHandler_GetFeaturePromos_Params_Data::Validate,
     &internal::UserEducationInternalsPageHandler_GetFeaturePromos_ResponseParams_Data::Validate},
    {&internal::UserEducationInternalsPageHandler_ShowFeaturePromo_Params_Data::Validate,
     &internal::UserEducationInternalsPageHandler_ShowFeaturePromo_ResponseParams_Data::Validate},
};

bool UserEducationInternalsPageHandlerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojom::user_education_internals::UserEducationInternalsPageHandler::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kUserEducationInternalsPageHandlerValidationInfo);
}

bool UserEducationInternalsPageHandlerResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojom::user_education_internals::UserEducationInternalsPageHandler::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kUserEducationInternalsPageHandlerValidationInfo);
}


}  // namespace user_education_internals
}  // namespace mojom


namespace mojo {


// static
bool StructTraits<::mojom::user_education_internals::FeaturePromoDemoPageInfo::DataView, ::mojom::user_education_internals::FeaturePromoDemoPageInfoPtr>::Read(
    ::mojom::user_education_internals::FeaturePromoDemoPageInfo::DataView input,
    ::mojom::user_education_internals::FeaturePromoDemoPageInfoPtr* output) {
  bool success = true;
  ::mojom::user_education_internals::FeaturePromoDemoPageInfoPtr result(::mojom::user_education_internals::FeaturePromoDemoPageInfo::New());
  
      if (success && !input.ReadDisplayTitle(&result->display_title))
        success = false;
      if (success && !input.ReadDisplayDescription(&result->display_description))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace mojom {
namespace user_education_internals {


void UserEducationInternalsPageHandlerInterceptorForTesting::GetTutorials(GetTutorialsCallback callback) {
  GetForwardingInterface()->GetTutorials(std::move(callback));
}
void UserEducationInternalsPageHandlerInterceptorForTesting::StartTutorial(const std::string& tutorial_id) {
  GetForwardingInterface()->StartTutorial(std::move(tutorial_id));
}
void UserEducationInternalsPageHandlerInterceptorForTesting::GetFeaturePromos(GetFeaturePromosCallback callback) {
  GetForwardingInterface()->GetFeaturePromos(std::move(callback));
}
void UserEducationInternalsPageHandlerInterceptorForTesting::ShowFeaturePromo(const std::string& title, ShowFeaturePromoCallback callback) {
  GetForwardingInterface()->ShowFeaturePromo(std::move(title), std::move(callback));
}
UserEducationInternalsPageHandlerAsyncWaiter::UserEducationInternalsPageHandlerAsyncWaiter(
    UserEducationInternalsPageHandler* proxy) : proxy_(proxy) {}

UserEducationInternalsPageHandlerAsyncWaiter::~UserEducationInternalsPageHandlerAsyncWaiter() = default;

void UserEducationInternalsPageHandlerAsyncWaiter::GetTutorials(
    std::vector<std::string>* out_tutorial_ids) {
  base::RunLoop loop;
  proxy_->GetTutorials(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<std::string>* out_tutorial_ids
,
             const std::vector<std::string>& tutorial_ids) {*out_tutorial_ids = std::move(tutorial_ids);
            loop->Quit();
          },
          &loop,
          out_tutorial_ids));
  loop.Run();
}
void UserEducationInternalsPageHandlerAsyncWaiter::GetFeaturePromos(
    std::vector<FeaturePromoDemoPageInfoPtr>* out_feature_promos) {
  base::RunLoop loop;
  proxy_->GetFeaturePromos(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<FeaturePromoDemoPageInfoPtr>* out_feature_promos
,
             std::vector<FeaturePromoDemoPageInfoPtr> feature_promos) {*out_feature_promos = std::move(feature_promos);
            loop->Quit();
          },
          &loop,
          out_feature_promos));
  loop.Run();
}
void UserEducationInternalsPageHandlerAsyncWaiter::ShowFeaturePromo(
    const std::string& title, std::string* out_error_message) {
  base::RunLoop loop;
  proxy_->ShowFeaturePromo(std::move(title),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_error_message
,
             const std::string& error_message) {*out_error_message = std::move(error_message);
            loop->Quit();
          },
          &loop,
          out_error_message));
  loop.Run();
}





}  // namespace user_education_internals
}  // namespace mojom


#if defined(__clang__)
#pragma clang diagnostic pop
#endif