// chrome/browser/ui/webui/internals/user_education/user_education_internals.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_INTERNALS_USER_EDUCATION_USER_EDUCATION_INTERNALS_MOJOM_SHARED_H_
#define CHROME_BROWSER_UI_WEBUI_INTERNALS_USER_EDUCATION_USER_EDUCATION_INTERNALS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/browser/ui/webui/internals/user_education/user_education_internals.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace mojom {
namespace user_education_internals {
class FeaturePromoDemoPageInfoDataView;



}  // namespace user_education_internals
}  // namespace mojom

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::mojom::user_education_internals::FeaturePromoDemoPageInfoDataView> {
  using Data = ::mojom::user_education_internals::internal::FeaturePromoDemoPageInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace mojom {
namespace user_education_internals {
// Interface base classes. They are used for type safety check.
class UserEducationInternalsPageHandlerInterfaceBase {};

using UserEducationInternalsPageHandlerPtrDataView =
    mojo::InterfacePtrDataView<UserEducationInternalsPageHandlerInterfaceBase>;
using UserEducationInternalsPageHandlerRequestDataView =
    mojo::InterfaceRequestDataView<UserEducationInternalsPageHandlerInterfaceBase>;
using UserEducationInternalsPageHandlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<UserEducationInternalsPageHandlerInterfaceBase>;
using UserEducationInternalsPageHandlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<UserEducationInternalsPageHandlerInterfaceBase>;


class FeaturePromoDemoPageInfoDataView {
 public:
  FeaturePromoDemoPageInfoDataView() = default;

  FeaturePromoDemoPageInfoDataView(
      internal::FeaturePromoDemoPageInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDisplayTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDisplayTitle(UserType* output) {
    
    auto* pointer = data_->display_title.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetDisplayDescriptionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDisplayDescription(UserType* output) {
    
    auto* pointer = data_->display_description.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FeaturePromoDemoPageInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace user_education_internals
}  // namespace mojom

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojom::user_education_internals::FeaturePromoDemoPageInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::mojom::user_education_internals::FeaturePromoDemoPageInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::mojom::user_education_internals::internal::FeaturePromoDemoPageInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::display_title(input)) in_display_title = Traits::display_title(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->display_title)::BaseType> display_title_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_display_title, display_title_fragment);
    fragment->display_title.Set(
        display_title_fragment.is_null() ? nullptr : display_title_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->display_title.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null display_title in FeaturePromoDemoPageInfo struct");
    decltype(Traits::display_description(input)) in_display_description = Traits::display_description(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->display_description)::BaseType> display_description_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_display_description, display_description_fragment);
    fragment->display_description.Set(
        display_description_fragment.is_null() ? nullptr : display_description_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->display_description.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null display_description in FeaturePromoDemoPageInfo struct");
  }

  static bool Deserialize(::mojom::user_education_internals::internal::FeaturePromoDemoPageInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::mojom::user_education_internals::FeaturePromoDemoPageInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace mojom {
namespace user_education_internals {

inline void FeaturePromoDemoPageInfoDataView::GetDisplayTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->display_title.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FeaturePromoDemoPageInfoDataView::GetDisplayDescriptionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->display_description.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace user_education_internals
}  // namespace mojom

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // CHROME_BROWSER_UI_WEBUI_INTERNALS_USER_EDUCATION_USER_EDUCATION_INTERNALS_MOJOM_SHARED_H_