// chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_BLUETOOTH_INTERNALS_BLUETOOTH_INTERNALS_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_UI_WEBUI_BLUETOOTH_INTERNALS_BLUETOOTH_INTERNALS_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojom {
namespace internal {

class ValidationContext;
class  DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t should_debug_logs_be_enabled : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data>;

  DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data();
  ~DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data() = delete;
};
static_assert(sizeof(DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data) == 16,
              "Bad sizeof(DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data)");
class  BluetoothInternalsHandler_GetAdapter_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BluetoothInternalsHandler_GetAdapter_Params_Data>;

  BluetoothInternalsHandler_GetAdapter_Params_Data();
  ~BluetoothInternalsHandler_GetAdapter_Params_Data() = delete;
};
static_assert(sizeof(BluetoothInternalsHandler_GetAdapter_Params_Data) == 8,
              "Bad sizeof(BluetoothInternalsHandler_GetAdapter_Params_Data)");
class  BluetoothInternalsHandler_GetAdapter_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data adapter;

 private:
  friend class mojo::internal::MessageFragment<BluetoothInternalsHandler_GetAdapter_ResponseParams_Data>;

  BluetoothInternalsHandler_GetAdapter_ResponseParams_Data();
  ~BluetoothInternalsHandler_GetAdapter_ResponseParams_Data() = delete;
};
static_assert(sizeof(BluetoothInternalsHandler_GetAdapter_ResponseParams_Data) == 16,
              "Bad sizeof(BluetoothInternalsHandler_GetAdapter_ResponseParams_Data)");
class  BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data>;

  BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data();
  ~BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data() = delete;
};
static_assert(sizeof(BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data) == 8,
              "Bad sizeof(BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data)");
class  BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data handler;
  uint8_t initial_toggle_value : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data>;

  BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data();
  ~BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data() = delete;
};
static_assert(sizeof(BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data) == 24,
              "Bad sizeof(BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data)");

}  // namespace internal


class DebugLogsChangeHandler_ChangeDebugLogsState_ParamsDataView {
 public:
  DebugLogsChangeHandler_ChangeDebugLogsState_ParamsDataView() = default;

  DebugLogsChangeHandler_ChangeDebugLogsState_ParamsDataView(
      internal::DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool should_debug_logs_be_enabled() const {
    return data_->should_debug_logs_be_enabled;
  }
 private:
  internal::DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data* data_ = nullptr;
};



class BluetoothInternalsHandler_GetAdapter_ParamsDataView {
 public:
  BluetoothInternalsHandler_GetAdapter_ParamsDataView() = default;

  BluetoothInternalsHandler_GetAdapter_ParamsDataView(
      internal::BluetoothInternalsHandler_GetAdapter_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BluetoothInternalsHandler_GetAdapter_Params_Data* data_ = nullptr;
};



class BluetoothInternalsHandler_GetAdapter_ResponseParamsDataView {
 public:
  BluetoothInternalsHandler_GetAdapter_ResponseParamsDataView() = default;

  BluetoothInternalsHandler_GetAdapter_ResponseParamsDataView(
      internal::BluetoothInternalsHandler_GetAdapter_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeAdapter() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::bluetooth::mojom::AdapterInterfaceBase>>(
            &data_->adapter, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::BluetoothInternalsHandler_GetAdapter_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BluetoothInternalsHandler_GetDebugLogsChangeHandler_ParamsDataView {
 public:
  BluetoothInternalsHandler_GetDebugLogsChangeHandler_ParamsDataView() = default;

  BluetoothInternalsHandler_GetDebugLogsChangeHandler_ParamsDataView(
      internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data* data_ = nullptr;
};



class BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParamsDataView {
 public:
  BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParamsDataView() = default;

  BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParamsDataView(
      internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeHandler() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::mojom::DebugLogsChangeHandlerInterfaceBase>>(
            &data_->handler, &result, message_);
    DCHECK(ret);
    return result;
  }
  bool initial_toggle_value() const {
    return data_->initial_toggle_value;
  }
 private:
  internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};











}  // namespace mojom

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_UI_WEBUI_BLUETOOTH_INTERNALS_BLUETOOTH_INTERNALS_MOJOM_PARAMS_DATA_H_