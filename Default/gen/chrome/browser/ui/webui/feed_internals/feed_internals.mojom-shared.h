// chrome/browser/ui/webui/feed_internals/feed_internals.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_SHARED_H_
#define CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace feed_internals {
namespace mojom {
class PropertiesDataView;

class LastFetchPropertiesDataView;



}  // namespace mojom
}  // namespace feed_internals

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::feed_internals::mojom::PropertiesDataView> {
  using Data = ::feed_internals::mojom::internal::Properties_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::feed_internals::mojom::LastFetchPropertiesDataView> {
  using Data = ::feed_internals::mojom::internal::LastFetchProperties_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace feed_internals {
namespace mojom {


enum class FeedOrder : int32_t {
  
  kUnspecified = 0,
  
  kGrouped = 1,
  
  kReverseChron = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, FeedOrder value);
inline bool IsKnownEnumValue(FeedOrder value) {
  return internal::FeedOrder_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class PageHandlerInterfaceBase {};

using PageHandlerPtrDataView =
    mojo::InterfacePtrDataView<PageHandlerInterfaceBase>;
using PageHandlerRequestDataView =
    mojo::InterfaceRequestDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageHandlerInterfaceBase>;


class PropertiesDataView {
 public:
  PropertiesDataView() = default;

  PropertiesDataView(
      internal::Properties_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool is_feed_enabled() const {
    return data_->is_feed_enabled;
  }
  bool is_feed_visible() const {
    return data_->is_feed_visible;
  }
  bool is_feed_allowed() const {
    return data_->is_feed_allowed;
  }
  bool is_prefetching_enabled() const {
    return data_->is_prefetching_enabled;
  }
  bool is_web_feed_follow_intro_debug_enabled() const {
    return data_->is_web_feed_follow_intro_debug_enabled;
  }
  bool use_feed_query_requests() const {
    return data_->use_feed_query_requests;
  }
  inline void GetLoadStreamStatusDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLoadStreamStatus(UserType* output) {
    
    auto* pointer = data_->load_stream_status.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetFeedFetchUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFeedFetchUrl(UserType* output) {
    
    auto* pointer = data_->feed_fetch_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetFeedActionsUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFeedActionsUrl(UserType* output) {
    
    auto* pointer = data_->feed_actions_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadFollowingFeedOrder(UserType* output) const {
    auto data_value = data_->following_feed_order;
    return mojo::internal::Deserialize<::feed_internals::mojom::FeedOrder>(
        data_value, output);
  }
  FeedOrder following_feed_order() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::feed_internals::mojom::FeedOrder>(data_->following_feed_order));
  }
 private:
  internal::Properties_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LastFetchPropertiesDataView {
 public:
  LastFetchPropertiesDataView() = default;

  LastFetchPropertiesDataView(
      internal::LastFetchProperties_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t last_fetch_status() const {
    return data_->last_fetch_status;
  }
  inline void GetLastFetchTriggerDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLastFetchTrigger(UserType* output) {
    
    auto* pointer = data_->last_fetch_trigger.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetLastFetchTimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLastFetchTime(UserType* output) {
    
    auto* pointer = data_->last_fetch_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
  inline void GetRefreshSuppressTimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRefreshSuppressTime(UserType* output) {
    
    auto* pointer = data_->refresh_suppress_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
  inline void GetLastBlessNonceDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLastBlessNonce(UserType* output) {
    
    auto* pointer = data_->last_bless_nonce.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  int32_t last_action_upload_status() const {
    return data_->last_action_upload_status;
  }
  inline void GetLastActionUploadTimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLastActionUploadTime(UserType* output) {
    
    auto* pointer = data_->last_action_upload_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::LastFetchProperties_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace feed_internals

namespace std {

template <>
struct hash<::feed_internals::mojom::FeedOrder>
    : public mojo::internal::EnumHashImpl<::feed_internals::mojom::FeedOrder> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::feed_internals::mojom::FeedOrder, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::feed_internals::mojom::FeedOrder, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::feed_internals::mojom::FeedOrder>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::feed_internals::mojom::PropertiesDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::feed_internals::mojom::PropertiesDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::feed_internals::mojom::internal::Properties_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->is_feed_enabled = Traits::is_feed_enabled(input);
    fragment->is_feed_visible = Traits::is_feed_visible(input);
    fragment->is_feed_allowed = Traits::is_feed_allowed(input);
    fragment->is_prefetching_enabled = Traits::is_prefetching_enabled(input);
    fragment->is_web_feed_follow_intro_debug_enabled = Traits::is_web_feed_follow_intro_debug_enabled(input);
    fragment->use_feed_query_requests = Traits::use_feed_query_requests(input);
    decltype(Traits::load_stream_status(input)) in_load_stream_status = Traits::load_stream_status(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->load_stream_status)::BaseType> load_stream_status_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_load_stream_status, load_stream_status_fragment);
    fragment->load_stream_status.Set(
        load_stream_status_fragment.is_null() ? nullptr : load_stream_status_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->load_stream_status.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null load_stream_status in Properties struct");
    decltype(Traits::feed_fetch_url(input)) in_feed_fetch_url = Traits::feed_fetch_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->feed_fetch_url)::BaseType> feed_fetch_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_feed_fetch_url, feed_fetch_url_fragment);
    fragment->feed_fetch_url.Set(
        feed_fetch_url_fragment.is_null() ? nullptr : feed_fetch_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->feed_fetch_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null feed_fetch_url in Properties struct");
    decltype(Traits::feed_actions_url(input)) in_feed_actions_url = Traits::feed_actions_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->feed_actions_url)::BaseType> feed_actions_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_feed_actions_url, feed_actions_url_fragment);
    fragment->feed_actions_url.Set(
        feed_actions_url_fragment.is_null() ? nullptr : feed_actions_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->feed_actions_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null feed_actions_url in Properties struct");
    mojo::internal::Serialize<::feed_internals::mojom::FeedOrder>(
        Traits::following_feed_order(input), &fragment->following_feed_order);
  }

  static bool Deserialize(::feed_internals::mojom::internal::Properties_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::feed_internals::mojom::PropertiesDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::feed_internals::mojom::LastFetchPropertiesDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::feed_internals::mojom::LastFetchPropertiesDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::feed_internals::mojom::internal::LastFetchProperties_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->last_fetch_status = Traits::last_fetch_status(input);
    decltype(Traits::last_fetch_trigger(input)) in_last_fetch_trigger = Traits::last_fetch_trigger(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->last_fetch_trigger)::BaseType> last_fetch_trigger_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_last_fetch_trigger, last_fetch_trigger_fragment);
    fragment->last_fetch_trigger.Set(
        last_fetch_trigger_fragment.is_null() ? nullptr : last_fetch_trigger_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->last_fetch_trigger.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_fetch_trigger in LastFetchProperties struct");
    decltype(Traits::last_fetch_time(input)) in_last_fetch_time = Traits::last_fetch_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->last_fetch_time)::BaseType> last_fetch_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_last_fetch_time, last_fetch_time_fragment);
    fragment->last_fetch_time.Set(
        last_fetch_time_fragment.is_null() ? nullptr : last_fetch_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->last_fetch_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_fetch_time in LastFetchProperties struct");
    decltype(Traits::refresh_suppress_time(input)) in_refresh_suppress_time = Traits::refresh_suppress_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->refresh_suppress_time)::BaseType> refresh_suppress_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_refresh_suppress_time, refresh_suppress_time_fragment);
    fragment->refresh_suppress_time.Set(
        refresh_suppress_time_fragment.is_null() ? nullptr : refresh_suppress_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->refresh_suppress_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null refresh_suppress_time in LastFetchProperties struct");
    decltype(Traits::last_bless_nonce(input)) in_last_bless_nonce = Traits::last_bless_nonce(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->last_bless_nonce)::BaseType> last_bless_nonce_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_last_bless_nonce, last_bless_nonce_fragment);
    fragment->last_bless_nonce.Set(
        last_bless_nonce_fragment.is_null() ? nullptr : last_bless_nonce_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->last_bless_nonce.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_bless_nonce in LastFetchProperties struct");
    fragment->last_action_upload_status = Traits::last_action_upload_status(input);
    decltype(Traits::last_action_upload_time(input)) in_last_action_upload_time = Traits::last_action_upload_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->last_action_upload_time)::BaseType> last_action_upload_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_last_action_upload_time, last_action_upload_time_fragment);
    fragment->last_action_upload_time.Set(
        last_action_upload_time_fragment.is_null() ? nullptr : last_action_upload_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->last_action_upload_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_action_upload_time in LastFetchProperties struct");
  }

  static bool Deserialize(::feed_internals::mojom::internal::LastFetchProperties_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::feed_internals::mojom::LastFetchPropertiesDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace feed_internals {
namespace mojom {

inline void PropertiesDataView::GetLoadStreamStatusDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->load_stream_status.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void PropertiesDataView::GetFeedFetchUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->feed_fetch_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void PropertiesDataView::GetFeedActionsUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->feed_actions_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void LastFetchPropertiesDataView::GetLastFetchTriggerDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->last_fetch_trigger.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void LastFetchPropertiesDataView::GetLastFetchTimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->last_fetch_time.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}
inline void LastFetchPropertiesDataView::GetRefreshSuppressTimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->refresh_suppress_time.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}
inline void LastFetchPropertiesDataView::GetLastBlessNonceDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->last_bless_nonce.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void LastFetchPropertiesDataView::GetLastActionUploadTimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->last_action_upload_time.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace feed_internals

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::feed_internals::mojom::FeedOrder> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::feed_internals::mojom::FeedOrder value);
};

} // namespace perfetto

#endif  // CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_SHARED_H_