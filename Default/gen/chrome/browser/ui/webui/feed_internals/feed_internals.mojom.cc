// chrome/browser/ui/webui/feed_internals/feed_internals.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom-params-data.h"
#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom-shared-message-ids.h"

#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom-import-headers.h"
#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom-test-utils.h"


#ifndef CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_JUMBO_H_
#endif



namespace feed_internals {
namespace mojom {
Properties::Properties()
    : is_feed_enabled(),
      is_feed_visible(),
      is_feed_allowed(),
      is_prefetching_enabled(),
      is_web_feed_follow_intro_debug_enabled(),
      use_feed_query_requests(),
      load_stream_status(),
      feed_fetch_url(),
      feed_actions_url(),
      following_feed_order() {}

Properties::Properties(
    bool is_feed_enabled_in,
    bool is_feed_visible_in,
    bool is_feed_allowed_in,
    bool is_prefetching_enabled_in,
    bool is_web_feed_follow_intro_debug_enabled_in,
    bool use_feed_query_requests_in,
    const std::string& load_stream_status_in,
    const ::GURL& feed_fetch_url_in,
    const ::GURL& feed_actions_url_in,
    FeedOrder following_feed_order_in)
    : is_feed_enabled(std::move(is_feed_enabled_in)),
      is_feed_visible(std::move(is_feed_visible_in)),
      is_feed_allowed(std::move(is_feed_allowed_in)),
      is_prefetching_enabled(std::move(is_prefetching_enabled_in)),
      is_web_feed_follow_intro_debug_enabled(std::move(is_web_feed_follow_intro_debug_enabled_in)),
      use_feed_query_requests(std::move(use_feed_query_requests_in)),
      load_stream_status(std::move(load_stream_status_in)),
      feed_fetch_url(std::move(feed_fetch_url_in)),
      feed_actions_url(std::move(feed_actions_url_in)),
      following_feed_order(std::move(following_feed_order_in)) {}

Properties::~Properties() = default;

void Properties::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_feed_enabled"), this->is_feed_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_feed_visible"), this->is_feed_visible,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_feed_allowed"), this->is_feed_allowed,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_prefetching_enabled"), this->is_prefetching_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_web_feed_follow_intro_debug_enabled"), this->is_web_feed_follow_intro_debug_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "use_feed_query_requests"), this->use_feed_query_requests,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "load_stream_status"), this->load_stream_status,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "feed_fetch_url"), this->feed_fetch_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "feed_actions_url"), this->feed_actions_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "following_feed_order"), this->following_feed_order,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type FeedOrder>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool Properties::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
LastFetchProperties::LastFetchProperties()
    : last_fetch_status(),
      last_fetch_trigger(),
      last_fetch_time(),
      refresh_suppress_time(),
      last_bless_nonce(),
      last_action_upload_status(),
      last_action_upload_time() {}

LastFetchProperties::LastFetchProperties(
    int32_t last_fetch_status_in,
    const std::string& last_fetch_trigger_in,
    ::base::TimeDelta last_fetch_time_in,
    ::base::TimeDelta refresh_suppress_time_in,
    const std::string& last_bless_nonce_in,
    int32_t last_action_upload_status_in,
    ::base::TimeDelta last_action_upload_time_in)
    : last_fetch_status(std::move(last_fetch_status_in)),
      last_fetch_trigger(std::move(last_fetch_trigger_in)),
      last_fetch_time(std::move(last_fetch_time_in)),
      refresh_suppress_time(std::move(refresh_suppress_time_in)),
      last_bless_nonce(std::move(last_bless_nonce_in)),
      last_action_upload_status(std::move(last_action_upload_status_in)),
      last_action_upload_time(std::move(last_action_upload_time_in)) {}

LastFetchProperties::~LastFetchProperties() = default;

void LastFetchProperties::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "last_fetch_status"), this->last_fetch_status,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "last_fetch_trigger"), this->last_fetch_trigger,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "last_fetch_time"), this->last_fetch_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "refresh_suppress_time"), this->refresh_suppress_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "last_bless_nonce"), this->last_bless_nonce,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "last_action_upload_status"), this->last_action_upload_status,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "last_action_upload_time"), this->last_action_upload_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool LastFetchProperties::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char PageHandler::Name_[] = "feed_internals.mojom.PageHandler";

PageHandler::IPCStableHashFunction PageHandler::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kPageHandler_GetGeneralProperties_Name: {
      return &PageHandler::GetGeneralProperties_Sym::IPCStableHash;
    }
    case internal::kPageHandler_GetLastFetchProperties_Name: {
      return &PageHandler::GetLastFetchProperties_Sym::IPCStableHash;
    }
    case internal::kPageHandler_RefreshForYouFeed_Name: {
      return &PageHandler::RefreshForYouFeed_Sym::IPCStableHash;
    }
    case internal::kPageHandler_RefreshFollowingFeed_Name: {
      return &PageHandler::RefreshFollowingFeed_Sym::IPCStableHash;
    }
    case internal::kPageHandler_RefreshWebFeedSuggestions_Name: {
      return &PageHandler::RefreshWebFeedSuggestions_Sym::IPCStableHash;
    }
    case internal::kPageHandler_GetFeedProcessScopeDump_Name: {
      return &PageHandler::GetFeedProcessScopeDump_Sym::IPCStableHash;
    }
    case internal::kPageHandler_GetFeedHistograms_Name: {
      return &PageHandler::GetFeedHistograms_Sym::IPCStableHash;
    }
    case internal::kPageHandler_OverrideFeedHost_Name: {
      return &PageHandler::OverrideFeedHost_Sym::IPCStableHash;
    }
    case internal::kPageHandler_OverrideDiscoverApiEndpoint_Name: {
      return &PageHandler::OverrideDiscoverApiEndpoint_Sym::IPCStableHash;
    }
    case internal::kPageHandler_OverrideFeedStreamData_Name: {
      return &PageHandler::OverrideFeedStreamData_Sym::IPCStableHash;
    }
    case internal::kPageHandler_SetWebFeedFollowIntroDebugEnabled_Name: {
      return &PageHandler::SetWebFeedFollowIntroDebugEnabled_Sym::IPCStableHash;
    }
    case internal::kPageHandler_SetUseFeedQueryRequests_Name: {
      return &PageHandler::SetUseFeedQueryRequests_Sym::IPCStableHash;
    }
    case internal::kPageHandler_SetFollowingFeedOrder_Name: {
      return &PageHandler::SetFollowingFeedOrder_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* PageHandler::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kPageHandler_GetGeneralProperties_Name:
            return "Receive feed_internals::mojom::PageHandler::GetGeneralProperties";
      case internal::kPageHandler_GetLastFetchProperties_Name:
            return "Receive feed_internals::mojom::PageHandler::GetLastFetchProperties";
      case internal::kPageHandler_RefreshForYouFeed_Name:
            return "Receive feed_internals::mojom::PageHandler::RefreshForYouFeed";
      case internal::kPageHandler_RefreshFollowingFeed_Name:
            return "Receive feed_internals::mojom::PageHandler::RefreshFollowingFeed";
      case internal::kPageHandler_RefreshWebFeedSuggestions_Name:
            return "Receive feed_internals::mojom::PageHandler::RefreshWebFeedSuggestions";
      case internal::kPageHandler_GetFeedProcessScopeDump_Name:
            return "Receive feed_internals::mojom::PageHandler::GetFeedProcessScopeDump";
      case internal::kPageHandler_GetFeedHistograms_Name:
            return "Receive feed_internals::mojom::PageHandler::GetFeedHistograms";
      case internal::kPageHandler_OverrideFeedHost_Name:
            return "Receive feed_internals::mojom::PageHandler::OverrideFeedHost";
      case internal::kPageHandler_OverrideDiscoverApiEndpoint_Name:
            return "Receive feed_internals::mojom::PageHandler::OverrideDiscoverApiEndpoint";
      case internal::kPageHandler_OverrideFeedStreamData_Name:
            return "Receive feed_internals::mojom::PageHandler::OverrideFeedStreamData";
      case internal::kPageHandler_SetWebFeedFollowIntroDebugEnabled_Name:
            return "Receive feed_internals::mojom::PageHandler::SetWebFeedFollowIntroDebugEnabled";
      case internal::kPageHandler_SetUseFeedQueryRequests_Name:
            return "Receive feed_internals::mojom::PageHandler::SetUseFeedQueryRequests";
      case internal::kPageHandler_SetFollowingFeedOrder_Name:
            return "Receive feed_internals::mojom::PageHandler::SetFollowingFeedOrder";
    }
  } else {
    switch (message.name()) {
      case internal::kPageHandler_GetGeneralProperties_Name:
            return "Receive reply feed_internals::mojom::PageHandler::GetGeneralProperties";
      case internal::kPageHandler_GetLastFetchProperties_Name:
            return "Receive reply feed_internals::mojom::PageHandler::GetLastFetchProperties";
      case internal::kPageHandler_RefreshForYouFeed_Name:
            return "Receive reply feed_internals::mojom::PageHandler::RefreshForYouFeed";
      case internal::kPageHandler_RefreshFollowingFeed_Name:
            return "Receive reply feed_internals::mojom::PageHandler::RefreshFollowingFeed";
      case internal::kPageHandler_RefreshWebFeedSuggestions_Name:
            return "Receive reply feed_internals::mojom::PageHandler::RefreshWebFeedSuggestions";
      case internal::kPageHandler_GetFeedProcessScopeDump_Name:
            return "Receive reply feed_internals::mojom::PageHandler::GetFeedProcessScopeDump";
      case internal::kPageHandler_GetFeedHistograms_Name:
            return "Receive reply feed_internals::mojom::PageHandler::GetFeedHistograms";
      case internal::kPageHandler_OverrideFeedHost_Name:
            return "Receive reply feed_internals::mojom::PageHandler::OverrideFeedHost";
      case internal::kPageHandler_OverrideDiscoverApiEndpoint_Name:
            return "Receive reply feed_internals::mojom::PageHandler::OverrideDiscoverApiEndpoint";
      case internal::kPageHandler_OverrideFeedStreamData_Name:
            return "Receive reply feed_internals::mojom::PageHandler::OverrideFeedStreamData";
      case internal::kPageHandler_SetWebFeedFollowIntroDebugEnabled_Name:
            return "Receive reply feed_internals::mojom::PageHandler::SetWebFeedFollowIntroDebugEnabled";
      case internal::kPageHandler_SetUseFeedQueryRequests_Name:
            return "Receive reply feed_internals::mojom::PageHandler::SetUseFeedQueryRequests";
      case internal::kPageHandler_SetFollowingFeedOrder_Name:
            return "Receive reply feed_internals::mojom::PageHandler::SetFollowingFeedOrder";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t PageHandler::GetGeneralProperties_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::GetGeneralProperties");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::GetLastFetchProperties_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::GetLastFetchProperties");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::RefreshForYouFeed_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::RefreshForYouFeed");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::RefreshFollowingFeed_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::RefreshFollowingFeed");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::RefreshWebFeedSuggestions_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::RefreshWebFeedSuggestions");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::GetFeedProcessScopeDump_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::GetFeedProcessScopeDump");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::GetFeedHistograms_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::GetFeedHistograms");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::OverrideFeedHost_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::OverrideFeedHost");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::OverrideDiscoverApiEndpoint_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::OverrideDiscoverApiEndpoint");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::OverrideFeedStreamData_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::OverrideFeedStreamData");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::SetWebFeedFollowIntroDebugEnabled_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::SetWebFeedFollowIntroDebugEnabled");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::SetUseFeedQueryRequests_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::SetUseFeedQueryRequests");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageHandler::SetFollowingFeedOrder_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)feed_internals::mojom::PageHandler::SetFollowingFeedOrder");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class PageHandler_GetGeneralProperties_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageHandler_GetGeneralProperties_ForwardToCallback(
      PageHandler::GetGeneralPropertiesCallback callback
      ) : callback_(std::move(callback)) {
  }

  PageHandler_GetGeneralProperties_ForwardToCallback(const PageHandler_GetGeneralProperties_ForwardToCallback&) = delete;
  PageHandler_GetGeneralProperties_ForwardToCallback& operator=(const PageHandler_GetGeneralProperties_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  PageHandler::GetGeneralPropertiesCallback callback_;
};

class PageHandler_GetLastFetchProperties_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageHandler_GetLastFetchProperties_ForwardToCallback(
      PageHandler::GetLastFetchPropertiesCallback callback
      ) : callback_(std::move(callback)) {
  }

  PageHandler_GetLastFetchProperties_ForwardToCallback(const PageHandler_GetLastFetchProperties_ForwardToCallback&) = delete;
  PageHandler_GetLastFetchProperties_ForwardToCallback& operator=(const PageHandler_GetLastFetchProperties_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  PageHandler::GetLastFetchPropertiesCallback callback_;
};

class PageHandler_GetFeedProcessScopeDump_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageHandler_GetFeedProcessScopeDump_ForwardToCallback(
      PageHandler::GetFeedProcessScopeDumpCallback callback
      ) : callback_(std::move(callback)) {
  }

  PageHandler_GetFeedProcessScopeDump_ForwardToCallback(const PageHandler_GetFeedProcessScopeDump_ForwardToCallback&) = delete;
  PageHandler_GetFeedProcessScopeDump_ForwardToCallback& operator=(const PageHandler_GetFeedProcessScopeDump_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  PageHandler::GetFeedProcessScopeDumpCallback callback_;
};

class PageHandler_GetFeedHistograms_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageHandler_GetFeedHistograms_ForwardToCallback(
      PageHandler::GetFeedHistogramsCallback callback
      ) : callback_(std::move(callback)) {
  }

  PageHandler_GetFeedHistograms_ForwardToCallback(const PageHandler_GetFeedHistograms_ForwardToCallback&) = delete;
  PageHandler_GetFeedHistograms_ForwardToCallback& operator=(const PageHandler_GetFeedHistograms_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  PageHandler::GetFeedHistogramsCallback callback_;
};

PageHandlerProxy::PageHandlerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PageHandlerProxy::GetGeneralProperties(
    GetGeneralPropertiesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send feed_internals::mojom::PageHandler::GetGeneralProperties");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_GetGeneralProperties_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_GetGeneralProperties_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetGeneralProperties");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageHandler_GetGeneralProperties_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void PageHandlerProxy::GetLastFetchProperties(
    GetLastFetchPropertiesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send feed_internals::mojom::PageHandler::GetLastFetchProperties");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_GetLastFetchProperties_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_GetLastFetchProperties_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetLastFetchProperties");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageHandler_GetLastFetchProperties_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void PageHandlerProxy::RefreshForYouFeed(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send feed_internals::mojom::PageHandler::RefreshForYouFeed");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_RefreshForYouFeed_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_RefreshForYouFeed_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("RefreshForYouFeed");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageHandlerProxy::RefreshFollowingFeed(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send feed_internals::mojom::PageHandler::RefreshFollowingFeed");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_RefreshFollowingFeed_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_RefreshFollowingFeed_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("RefreshFollowingFeed");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageHandlerProxy::RefreshWebFeedSuggestions(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send feed_internals::mojom::PageHandler::RefreshWebFeedSuggestions");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_RefreshWebFeedSuggestions_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_RefreshWebFeedSuggestions_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("RefreshWebFeedSuggestions");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageHandlerProxy::GetFeedProcessScopeDump(
    GetFeedProcessScopeDumpCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send feed_internals::mojom::PageHandler::GetFeedProcessScopeDump");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_GetFeedProcessScopeDump_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_GetFeedProcessScopeDump_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetFeedProcessScopeDump");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageHandler_GetFeedProcessScopeDump_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void PageHandlerProxy::GetFeedHistograms(
    GetFeedHistogramsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send feed_internals::mojom::PageHandler::GetFeedHistograms");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_GetFeedHistograms_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_GetFeedHistograms_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetFeedHistograms");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageHandler_GetFeedHistograms_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void PageHandlerProxy::OverrideFeedHost(
    const ::GURL& in_host) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send feed_internals::mojom::PageHandler::OverrideFeedHost", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("host"), in_host,
                        "<value of type const ::GURL&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_OverrideFeedHost_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_OverrideFeedHost_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->host)::BaseType> host_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_host, host_fragment);
  params->host.Set(
      host_fragment.is_null() ? nullptr : host_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->host.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null host in PageHandler.OverrideFeedHost request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("OverrideFeedHost");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageHandlerProxy::OverrideDiscoverApiEndpoint(
    const ::GURL& in_endpoint_url) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send feed_internals::mojom::PageHandler::OverrideDiscoverApiEndpoint", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("endpoint_url"), in_endpoint_url,
                        "<value of type const ::GURL&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_OverrideDiscoverApiEndpoint_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_OverrideDiscoverApiEndpoint_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->endpoint_url)::BaseType> endpoint_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_endpoint_url, endpoint_url_fragment);
  params->endpoint_url.Set(
      endpoint_url_fragment.is_null() ? nullptr : endpoint_url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->endpoint_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null endpoint_url in PageHandler.OverrideDiscoverApiEndpoint request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("OverrideDiscoverApiEndpoint");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageHandlerProxy::OverrideFeedStreamData(
    const std::vector<uint8_t>& in_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send feed_internals::mojom::PageHandler::OverrideFeedStreamData", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), in_data,
                        "<value of type const std::vector<uint8_t>&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_OverrideFeedStreamData_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_OverrideFeedStreamData_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->data)::BaseType>
      data_fragment(params.message());
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      in_data, data_fragment, &data_validate_params);
  params->data.Set(
      data_fragment.is_null() ? nullptr : data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in PageHandler.OverrideFeedStreamData request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("OverrideFeedStreamData");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageHandlerProxy::SetWebFeedFollowIntroDebugEnabled(
    bool in_enabled) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send feed_internals::mojom::PageHandler::SetWebFeedFollowIntroDebugEnabled", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("enabled"), in_enabled,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_SetWebFeedFollowIntroDebugEnabled_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_SetWebFeedFollowIntroDebugEnabled_Params_Data> params(
          message);
  params.Allocate();
  params->enabled = in_enabled;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("SetWebFeedFollowIntroDebugEnabled");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageHandlerProxy::SetUseFeedQueryRequests(
    bool in_use_legacy) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send feed_internals::mojom::PageHandler::SetUseFeedQueryRequests", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("use_legacy"), in_use_legacy,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_SetUseFeedQueryRequests_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_SetUseFeedQueryRequests_Params_Data> params(
          message);
  params.Allocate();
  params->use_legacy = in_use_legacy;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("SetUseFeedQueryRequests");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageHandlerProxy::SetFollowingFeedOrder(
    FeedOrder in_order) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send feed_internals::mojom::PageHandler::SetFollowingFeedOrder", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("order"), in_order,
                        "<value of type FeedOrder>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_SetFollowingFeedOrder_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_SetFollowingFeedOrder_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::feed_internals::mojom::FeedOrder>(
      in_order, &params->order);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("SetFollowingFeedOrder");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class PageHandler_GetGeneralProperties_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static PageHandler::GetGeneralPropertiesCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PageHandler_GetGeneralProperties_ProxyToResponder> proxy(
        new PageHandler_GetGeneralProperties_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&PageHandler_GetGeneralProperties_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageHandler_GetGeneralProperties_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  PageHandler_GetGeneralProperties_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageHandler::GetGeneralPropertiesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      PropertiesPtr in_properties);
};

bool PageHandler_GetGeneralProperties_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::PageHandler_GetGeneralProperties_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageHandler_GetGeneralProperties_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  PropertiesPtr p_properties{};
  PageHandler_GetGeneralProperties_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadProperties(&p_properties))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageHandler::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_properties));
  return true;
}

void PageHandler_GetGeneralProperties_ProxyToResponder::Run(
    PropertiesPtr in_properties) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply feed_internals::mojom::PageHandler::GetGeneralProperties", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("properties"), in_properties,
                        "<value of type PropertiesPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_GetGeneralProperties_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_GetGeneralProperties_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->properties)::BaseType> properties_fragment(
          params.message());
  mojo::internal::Serialize<::feed_internals::mojom::PropertiesDataView>(
      in_properties, properties_fragment);
  params->properties.Set(
      properties_fragment.is_null() ? nullptr : properties_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->properties.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null properties in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetGeneralProperties");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PageHandler_GetLastFetchProperties_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static PageHandler::GetLastFetchPropertiesCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PageHandler_GetLastFetchProperties_ProxyToResponder> proxy(
        new PageHandler_GetLastFetchProperties_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&PageHandler_GetLastFetchProperties_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageHandler_GetLastFetchProperties_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  PageHandler_GetLastFetchProperties_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageHandler::GetLastFetchPropertiesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      LastFetchPropertiesPtr in_properties);
};

bool PageHandler_GetLastFetchProperties_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::PageHandler_GetLastFetchProperties_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageHandler_GetLastFetchProperties_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  LastFetchPropertiesPtr p_properties{};
  PageHandler_GetLastFetchProperties_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadProperties(&p_properties))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageHandler::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_properties));
  return true;
}

void PageHandler_GetLastFetchProperties_ProxyToResponder::Run(
    LastFetchPropertiesPtr in_properties) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply feed_internals::mojom::PageHandler::GetLastFetchProperties", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("properties"), in_properties,
                        "<value of type LastFetchPropertiesPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_GetLastFetchProperties_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_GetLastFetchProperties_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->properties)::BaseType> properties_fragment(
          params.message());
  mojo::internal::Serialize<::feed_internals::mojom::LastFetchPropertiesDataView>(
      in_properties, properties_fragment);
  params->properties.Set(
      properties_fragment.is_null() ? nullptr : properties_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->properties.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null properties in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetLastFetchProperties");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PageHandler_GetFeedProcessScopeDump_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static PageHandler::GetFeedProcessScopeDumpCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PageHandler_GetFeedProcessScopeDump_ProxyToResponder> proxy(
        new PageHandler_GetFeedProcessScopeDump_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&PageHandler_GetFeedProcessScopeDump_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageHandler_GetFeedProcessScopeDump_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  PageHandler_GetFeedProcessScopeDump_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageHandler::GetFeedProcessScopeDumpCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_dump);
};

bool PageHandler_GetFeedProcessScopeDump_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::PageHandler_GetFeedProcessScopeDump_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageHandler_GetFeedProcessScopeDump_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::string p_dump{};
  PageHandler_GetFeedProcessScopeDump_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadDump(&p_dump))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageHandler::Name_, 5, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_dump));
  return true;
}

void PageHandler_GetFeedProcessScopeDump_ProxyToResponder::Run(
    const std::string& in_dump) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply feed_internals::mojom::PageHandler::GetFeedProcessScopeDump", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("dump"), in_dump,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_GetFeedProcessScopeDump_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_GetFeedProcessScopeDump_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->dump)::BaseType> dump_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_dump, dump_fragment);
  params->dump.Set(
      dump_fragment.is_null() ? nullptr : dump_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->dump.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null dump in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetFeedProcessScopeDump");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PageHandler_GetFeedHistograms_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static PageHandler::GetFeedHistogramsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PageHandler_GetFeedHistograms_ProxyToResponder> proxy(
        new PageHandler_GetFeedHistograms_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&PageHandler_GetFeedHistograms_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageHandler_GetFeedHistograms_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  PageHandler_GetFeedHistograms_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageHandler::GetFeedHistogramsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_log);
};

bool PageHandler_GetFeedHistograms_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::PageHandler_GetFeedHistograms_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageHandler_GetFeedHistograms_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::string p_log{};
  PageHandler_GetFeedHistograms_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadLog(&p_log))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageHandler::Name_, 6, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_log));
  return true;
}

void PageHandler_GetFeedHistograms_ProxyToResponder::Run(
    const std::string& in_log) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply feed_internals::mojom::PageHandler::GetFeedHistograms", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("log"), in_log,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageHandler_GetFeedHistograms_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::feed_internals::mojom::internal::PageHandler_GetFeedHistograms_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->log)::BaseType> log_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_log, log_fragment);
  params->log.Set(
      log_fragment.is_null() ? nullptr : log_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->log.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null log in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetFeedHistograms");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PageHandlerStubDispatch::Accept(
    PageHandler* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPageHandler_GetGeneralProperties_Name: {
      break;
    }
    case internal::kPageHandler_GetLastFetchProperties_Name: {
      break;
    }
    case internal::kPageHandler_RefreshForYouFeed_Name: {

      DCHECK(message->is_serialized());
      internal::PageHandler_RefreshForYouFeed_Params_Data* params =
          reinterpret_cast<internal::PageHandler_RefreshForYouFeed_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      PageHandler_RefreshForYouFeed_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RefreshForYouFeed();
      return true;
    }
    case internal::kPageHandler_RefreshFollowingFeed_Name: {

      DCHECK(message->is_serialized());
      internal::PageHandler_RefreshFollowingFeed_Params_Data* params =
          reinterpret_cast<internal::PageHandler_RefreshFollowingFeed_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      PageHandler_RefreshFollowingFeed_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RefreshFollowingFeed();
      return true;
    }
    case internal::kPageHandler_RefreshWebFeedSuggestions_Name: {

      DCHECK(message->is_serialized());
      internal::PageHandler_RefreshWebFeedSuggestions_Params_Data* params =
          reinterpret_cast<internal::PageHandler_RefreshWebFeedSuggestions_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      PageHandler_RefreshWebFeedSuggestions_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RefreshWebFeedSuggestions();
      return true;
    }
    case internal::kPageHandler_GetFeedProcessScopeDump_Name: {
      break;
    }
    case internal::kPageHandler_GetFeedHistograms_Name: {
      break;
    }
    case internal::kPageHandler_OverrideFeedHost_Name: {

      DCHECK(message->is_serialized());
      internal::PageHandler_OverrideFeedHost_Params_Data* params =
          reinterpret_cast<internal::PageHandler_OverrideFeedHost_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::GURL p_host{};
      PageHandler_OverrideFeedHost_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadHost(&p_host))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 7, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OverrideFeedHost(
std::move(p_host));
      return true;
    }
    case internal::kPageHandler_OverrideDiscoverApiEndpoint_Name: {

      DCHECK(message->is_serialized());
      internal::PageHandler_OverrideDiscoverApiEndpoint_Params_Data* params =
          reinterpret_cast<internal::PageHandler_OverrideDiscoverApiEndpoint_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::GURL p_endpoint_url{};
      PageHandler_OverrideDiscoverApiEndpoint_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadEndpointUrl(&p_endpoint_url))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OverrideDiscoverApiEndpoint(
std::move(p_endpoint_url));
      return true;
    }
    case internal::kPageHandler_OverrideFeedStreamData_Name: {

      DCHECK(message->is_serialized());
      internal::PageHandler_OverrideFeedStreamData_Params_Data* params =
          reinterpret_cast<internal::PageHandler_OverrideFeedStreamData_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::vector<uint8_t> p_data{};
      PageHandler_OverrideFeedStreamData_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadData(&p_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 9, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OverrideFeedStreamData(
std::move(p_data));
      return true;
    }
    case internal::kPageHandler_SetWebFeedFollowIntroDebugEnabled_Name: {

      DCHECK(message->is_serialized());
      internal::PageHandler_SetWebFeedFollowIntroDebugEnabled_Params_Data* params =
          reinterpret_cast<internal::PageHandler_SetWebFeedFollowIntroDebugEnabled_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_enabled{};
      PageHandler_SetWebFeedFollowIntroDebugEnabled_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_enabled = input_data_view.enabled();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 10, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetWebFeedFollowIntroDebugEnabled(
std::move(p_enabled));
      return true;
    }
    case internal::kPageHandler_SetUseFeedQueryRequests_Name: {

      DCHECK(message->is_serialized());
      internal::PageHandler_SetUseFeedQueryRequests_Params_Data* params =
          reinterpret_cast<internal::PageHandler_SetUseFeedQueryRequests_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_use_legacy{};
      PageHandler_SetUseFeedQueryRequests_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_use_legacy = input_data_view.use_legacy();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 11, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetUseFeedQueryRequests(
std::move(p_use_legacy));
      return true;
    }
    case internal::kPageHandler_SetFollowingFeedOrder_Name: {

      DCHECK(message->is_serialized());
      internal::PageHandler_SetFollowingFeedOrder_Params_Data* params =
          reinterpret_cast<internal::PageHandler_SetFollowingFeedOrder_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FeedOrder p_order{};
      PageHandler_SetFollowingFeedOrder_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadOrder(&p_order))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 12, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetFollowingFeedOrder(
std::move(p_order));
      return true;
    }
  }
  return false;
}

// static
bool PageHandlerStubDispatch::AcceptWithResponder(
    PageHandler* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kPageHandler_GetGeneralProperties_Name: {

      internal::PageHandler_GetGeneralProperties_Params_Data* params =
          reinterpret_cast<
              internal::PageHandler_GetGeneralProperties_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PageHandler_GetGeneralProperties_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 0, false);
        return false;
      }
      PageHandler::GetGeneralPropertiesCallback callback =
          PageHandler_GetGeneralProperties_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetGeneralProperties(std::move(callback));
      return true;
    }
    case internal::kPageHandler_GetLastFetchProperties_Name: {

      internal::PageHandler_GetLastFetchProperties_Params_Data* params =
          reinterpret_cast<
              internal::PageHandler_GetLastFetchProperties_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PageHandler_GetLastFetchProperties_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 1, false);
        return false;
      }
      PageHandler::GetLastFetchPropertiesCallback callback =
          PageHandler_GetLastFetchProperties_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetLastFetchProperties(std::move(callback));
      return true;
    }
    case internal::kPageHandler_RefreshForYouFeed_Name: {
      break;
    }
    case internal::kPageHandler_RefreshFollowingFeed_Name: {
      break;
    }
    case internal::kPageHandler_RefreshWebFeedSuggestions_Name: {
      break;
    }
    case internal::kPageHandler_GetFeedProcessScopeDump_Name: {

      internal::PageHandler_GetFeedProcessScopeDump_Params_Data* params =
          reinterpret_cast<
              internal::PageHandler_GetFeedProcessScopeDump_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PageHandler_GetFeedProcessScopeDump_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 5, false);
        return false;
      }
      PageHandler::GetFeedProcessScopeDumpCallback callback =
          PageHandler_GetFeedProcessScopeDump_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetFeedProcessScopeDump(std::move(callback));
      return true;
    }
    case internal::kPageHandler_GetFeedHistograms_Name: {

      internal::PageHandler_GetFeedHistograms_Params_Data* params =
          reinterpret_cast<
              internal::PageHandler_GetFeedHistograms_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PageHandler_GetFeedHistograms_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 6, false);
        return false;
      }
      PageHandler::GetFeedHistogramsCallback callback =
          PageHandler_GetFeedHistograms_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetFeedHistograms(std::move(callback));
      return true;
    }
    case internal::kPageHandler_OverrideFeedHost_Name: {
      break;
    }
    case internal::kPageHandler_OverrideDiscoverApiEndpoint_Name: {
      break;
    }
    case internal::kPageHandler_OverrideFeedStreamData_Name: {
      break;
    }
    case internal::kPageHandler_SetWebFeedFollowIntroDebugEnabled_Name: {
      break;
    }
    case internal::kPageHandler_SetUseFeedQueryRequests_Name: {
      break;
    }
    case internal::kPageHandler_SetFollowingFeedOrder_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPageHandlerValidationInfo[] = {
    {&internal::PageHandler_GetGeneralProperties_Params_Data::Validate,
     &internal::PageHandler_GetGeneralProperties_ResponseParams_Data::Validate},
    {&internal::PageHandler_GetLastFetchProperties_Params_Data::Validate,
     &internal::PageHandler_GetLastFetchProperties_ResponseParams_Data::Validate},
    {&internal::PageHandler_RefreshForYouFeed_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageHandler_RefreshFollowingFeed_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageHandler_RefreshWebFeedSuggestions_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageHandler_GetFeedProcessScopeDump_Params_Data::Validate,
     &internal::PageHandler_GetFeedProcessScopeDump_ResponseParams_Data::Validate},
    {&internal::PageHandler_GetFeedHistograms_Params_Data::Validate,
     &internal::PageHandler_GetFeedHistograms_ResponseParams_Data::Validate},
    {&internal::PageHandler_OverrideFeedHost_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageHandler_OverrideDiscoverApiEndpoint_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageHandler_OverrideFeedStreamData_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageHandler_SetWebFeedFollowIntroDebugEnabled_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageHandler_SetUseFeedQueryRequests_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageHandler_SetFollowingFeedOrder_Params_Data::Validate,
     nullptr /* no response */},
};

bool PageHandlerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::feed_internals::mojom::PageHandler::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPageHandlerValidationInfo);
}

bool PageHandlerResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::feed_internals::mojom::PageHandler::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kPageHandlerValidationInfo);
}


}  // namespace mojom
}  // namespace feed_internals


namespace mojo {


// static
bool StructTraits<::feed_internals::mojom::Properties::DataView, ::feed_internals::mojom::PropertiesPtr>::Read(
    ::feed_internals::mojom::Properties::DataView input,
    ::feed_internals::mojom::PropertiesPtr* output) {
  bool success = true;
  ::feed_internals::mojom::PropertiesPtr result(::feed_internals::mojom::Properties::New());
  
      if (success)
        result->is_feed_enabled = input.is_feed_enabled();
      if (success)
        result->is_feed_visible = input.is_feed_visible();
      if (success)
        result->is_feed_allowed = input.is_feed_allowed();
      if (success)
        result->is_prefetching_enabled = input.is_prefetching_enabled();
      if (success)
        result->is_web_feed_follow_intro_debug_enabled = input.is_web_feed_follow_intro_debug_enabled();
      if (success)
        result->use_feed_query_requests = input.use_feed_query_requests();
      if (success && !input.ReadLoadStreamStatus(&result->load_stream_status))
        success = false;
      if (success && !input.ReadFeedFetchUrl(&result->feed_fetch_url))
        success = false;
      if (success && !input.ReadFeedActionsUrl(&result->feed_actions_url))
        success = false;
      if (success && !input.ReadFollowingFeedOrder(&result->following_feed_order))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::feed_internals::mojom::LastFetchProperties::DataView, ::feed_internals::mojom::LastFetchPropertiesPtr>::Read(
    ::feed_internals::mojom::LastFetchProperties::DataView input,
    ::feed_internals::mojom::LastFetchPropertiesPtr* output) {
  bool success = true;
  ::feed_internals::mojom::LastFetchPropertiesPtr result(::feed_internals::mojom::LastFetchProperties::New());
  
      if (success)
        result->last_fetch_status = input.last_fetch_status();
      if (success && !input.ReadLastFetchTrigger(&result->last_fetch_trigger))
        success = false;
      if (success && !input.ReadLastFetchTime(&result->last_fetch_time))
        success = false;
      if (success && !input.ReadRefreshSuppressTime(&result->refresh_suppress_time))
        success = false;
      if (success && !input.ReadLastBlessNonce(&result->last_bless_nonce))
        success = false;
      if (success)
        result->last_action_upload_status = input.last_action_upload_status();
      if (success && !input.ReadLastActionUploadTime(&result->last_action_upload_time))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace feed_internals {
namespace mojom {


void PageHandlerInterceptorForTesting::GetGeneralProperties(GetGeneralPropertiesCallback callback) {
  GetForwardingInterface()->GetGeneralProperties(std::move(callback));
}
void PageHandlerInterceptorForTesting::GetLastFetchProperties(GetLastFetchPropertiesCallback callback) {
  GetForwardingInterface()->GetLastFetchProperties(std::move(callback));
}
void PageHandlerInterceptorForTesting::RefreshForYouFeed() {
  GetForwardingInterface()->RefreshForYouFeed();
}
void PageHandlerInterceptorForTesting::RefreshFollowingFeed() {
  GetForwardingInterface()->RefreshFollowingFeed();
}
void PageHandlerInterceptorForTesting::RefreshWebFeedSuggestions() {
  GetForwardingInterface()->RefreshWebFeedSuggestions();
}
void PageHandlerInterceptorForTesting::GetFeedProcessScopeDump(GetFeedProcessScopeDumpCallback callback) {
  GetForwardingInterface()->GetFeedProcessScopeDump(std::move(callback));
}
void PageHandlerInterceptorForTesting::GetFeedHistograms(GetFeedHistogramsCallback callback) {
  GetForwardingInterface()->GetFeedHistograms(std::move(callback));
}
void PageHandlerInterceptorForTesting::OverrideFeedHost(const ::GURL& host) {
  GetForwardingInterface()->OverrideFeedHost(std::move(host));
}
void PageHandlerInterceptorForTesting::OverrideDiscoverApiEndpoint(const ::GURL& endpoint_url) {
  GetForwardingInterface()->OverrideDiscoverApiEndpoint(std::move(endpoint_url));
}
void PageHandlerInterceptorForTesting::OverrideFeedStreamData(const std::vector<uint8_t>& data) {
  GetForwardingInterface()->OverrideFeedStreamData(std::move(data));
}
void PageHandlerInterceptorForTesting::SetWebFeedFollowIntroDebugEnabled(bool enabled) {
  GetForwardingInterface()->SetWebFeedFollowIntroDebugEnabled(std::move(enabled));
}
void PageHandlerInterceptorForTesting::SetUseFeedQueryRequests(bool use_legacy) {
  GetForwardingInterface()->SetUseFeedQueryRequests(std::move(use_legacy));
}
void PageHandlerInterceptorForTesting::SetFollowingFeedOrder(FeedOrder order) {
  GetForwardingInterface()->SetFollowingFeedOrder(std::move(order));
}
PageHandlerAsyncWaiter::PageHandlerAsyncWaiter(
    PageHandler* proxy) : proxy_(proxy) {}

PageHandlerAsyncWaiter::~PageHandlerAsyncWaiter() = default;

void PageHandlerAsyncWaiter::GetGeneralProperties(
    PropertiesPtr* out_properties) {
  base::RunLoop loop;
  proxy_->GetGeneralProperties(
      base::BindOnce(
          [](base::RunLoop* loop,
             PropertiesPtr* out_properties
,
             PropertiesPtr properties) {*out_properties = std::move(properties);
            loop->Quit();
          },
          &loop,
          out_properties));
  loop.Run();
}
void PageHandlerAsyncWaiter::GetLastFetchProperties(
    LastFetchPropertiesPtr* out_properties) {
  base::RunLoop loop;
  proxy_->GetLastFetchProperties(
      base::BindOnce(
          [](base::RunLoop* loop,
             LastFetchPropertiesPtr* out_properties
,
             LastFetchPropertiesPtr properties) {*out_properties = std::move(properties);
            loop->Quit();
          },
          &loop,
          out_properties));
  loop.Run();
}
void PageHandlerAsyncWaiter::GetFeedProcessScopeDump(
    std::string* out_dump) {
  base::RunLoop loop;
  proxy_->GetFeedProcessScopeDump(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_dump
,
             const std::string& dump) {*out_dump = std::move(dump);
            loop->Quit();
          },
          &loop,
          out_dump));
  loop.Run();
}
void PageHandlerAsyncWaiter::GetFeedHistograms(
    std::string* out_log) {
  base::RunLoop loop;
  proxy_->GetFeedHistograms(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_log
,
             const std::string& log) {*out_log = std::move(log);
            loop->Quit();
          },
          &loop,
          out_log));
  loop.Run();
}





}  // namespace mojom
}  // namespace feed_internals


#if defined(__clang__)
#pragma clang diagnostic pop
#endif