// chrome/browser/ui/webui/feed_internals/feed_internals.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/ui/webui/feed_internals/feed_internals.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('feedInternals.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }


  var FeedOrder = {};
  FeedOrder.kUnspecified = 0;
  FeedOrder.kGrouped = 1;
  FeedOrder.kReverseChron = 2;
  FeedOrder.MIN_VALUE = 0;
  FeedOrder.MAX_VALUE = 2;

  FeedOrder.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  FeedOrder.toKnownEnumValue = function(value) {
    return value;
  };

  FeedOrder.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function Properties(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Properties.prototype.initDefaults_ = function() {
    this.isFeedEnabled = false;
    this.isFeedVisible = false;
    this.isFeedAllowed = false;
    this.isPrefetchingEnabled = false;
    this.isWebFeedFollowIntroDebugEnabled = false;
    this.useFeedQueryRequests = false;
    this.followingFeedOrder = 0;
    this.loadStreamStatus = null;
    this.feedFetchUrl = null;
    this.feedActionsUrl = null;
  };
  Properties.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Properties.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;








    // validate Properties.loadStreamStatus
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Properties.feedFetchUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Properties.feedActionsUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Properties.followingFeedOrder
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, FeedOrder);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Properties.encodedSize = codec.kStructHeaderSize + 32;

  Properties.decode = function(decoder) {
    var packed;
    var val = new Properties();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isFeedEnabled = (packed >> 0) & 1 ? true : false;
    val.isFeedVisible = (packed >> 1) & 1 ? true : false;
    val.isFeedAllowed = (packed >> 2) & 1 ? true : false;
    val.isPrefetchingEnabled = (packed >> 3) & 1 ? true : false;
    val.isWebFeedFollowIntroDebugEnabled = (packed >> 4) & 1 ? true : false;
    val.useFeedQueryRequests = (packed >> 5) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.followingFeedOrder =
        decoder.decodeStruct(new codec.Enum(FeedOrder));
    val.loadStreamStatus =
        decoder.decodeStruct(codec.String);
    val.feedFetchUrl =
        decoder.decodeStructPointer(url$.Url);
    val.feedActionsUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  Properties.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Properties.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isFeedEnabled & 1) << 0
    packed |= (val.isFeedVisible & 1) << 1
    packed |= (val.isFeedAllowed & 1) << 2
    packed |= (val.isPrefetchingEnabled & 1) << 3
    packed |= (val.isWebFeedFollowIntroDebugEnabled & 1) << 4
    packed |= (val.useFeedQueryRequests & 1) << 5
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.followingFeedOrder);
    encoder.encodeStruct(codec.String, val.loadStreamStatus);
    encoder.encodeStructPointer(url$.Url, val.feedFetchUrl);
    encoder.encodeStructPointer(url$.Url, val.feedActionsUrl);
  };
  function LastFetchProperties(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LastFetchProperties.prototype.initDefaults_ = function() {
    this.lastFetchStatus = 0;
    this.lastActionUploadStatus = 0;
    this.lastFetchTrigger = null;
    this.lastFetchTime = null;
    this.refreshSuppressTime = null;
    this.lastBlessNonce = null;
    this.lastActionUploadTime = null;
  };
  LastFetchProperties.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LastFetchProperties.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate LastFetchProperties.lastFetchTrigger
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate LastFetchProperties.lastFetchTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LastFetchProperties.refreshSuppressTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LastFetchProperties.lastBlessNonce
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate LastFetchProperties.lastActionUploadTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LastFetchProperties.encodedSize = codec.kStructHeaderSize + 48;

  LastFetchProperties.decode = function(decoder) {
    var packed;
    var val = new LastFetchProperties();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.lastFetchStatus =
        decoder.decodeStruct(codec.Int32);
    val.lastActionUploadStatus =
        decoder.decodeStruct(codec.Int32);
    val.lastFetchTrigger =
        decoder.decodeStruct(codec.String);
    val.lastFetchTime =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.refreshSuppressTime =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.lastBlessNonce =
        decoder.decodeStruct(codec.String);
    val.lastActionUploadTime =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  LastFetchProperties.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LastFetchProperties.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.lastFetchStatus);
    encoder.encodeStruct(codec.Int32, val.lastActionUploadStatus);
    encoder.encodeStruct(codec.String, val.lastFetchTrigger);
    encoder.encodeStructPointer(time$.TimeDelta, val.lastFetchTime);
    encoder.encodeStructPointer(time$.TimeDelta, val.refreshSuppressTime);
    encoder.encodeStruct(codec.String, val.lastBlessNonce);
    encoder.encodeStructPointer(time$.TimeDelta, val.lastActionUploadTime);
  };
  function PageHandler_GetGeneralProperties_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetGeneralProperties_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_GetGeneralProperties_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetGeneralProperties_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetGeneralProperties_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_GetGeneralProperties_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetGeneralProperties_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_GetGeneralProperties_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetGeneralProperties_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetGeneralProperties_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetGeneralProperties_ResponseParams.prototype.initDefaults_ = function() {
    this.properties = null;
  };
  PageHandler_GetGeneralProperties_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetGeneralProperties_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetGeneralProperties_ResponseParams.properties
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Properties, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetGeneralProperties_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetGeneralProperties_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetGeneralProperties_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.properties =
        decoder.decodeStructPointer(Properties);
    return val;
  };

  PageHandler_GetGeneralProperties_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetGeneralProperties_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(Properties, val.properties);
  };
  function PageHandler_GetLastFetchProperties_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetLastFetchProperties_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_GetLastFetchProperties_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetLastFetchProperties_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetLastFetchProperties_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_GetLastFetchProperties_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetLastFetchProperties_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_GetLastFetchProperties_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetLastFetchProperties_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetLastFetchProperties_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetLastFetchProperties_ResponseParams.prototype.initDefaults_ = function() {
    this.properties = null;
  };
  PageHandler_GetLastFetchProperties_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetLastFetchProperties_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetLastFetchProperties_ResponseParams.properties
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, LastFetchProperties, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetLastFetchProperties_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetLastFetchProperties_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetLastFetchProperties_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.properties =
        decoder.decodeStructPointer(LastFetchProperties);
    return val;
  };

  PageHandler_GetLastFetchProperties_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetLastFetchProperties_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(LastFetchProperties, val.properties);
  };
  function PageHandler_RefreshForYouFeed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_RefreshForYouFeed_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_RefreshForYouFeed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_RefreshForYouFeed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_RefreshForYouFeed_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_RefreshForYouFeed_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_RefreshForYouFeed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_RefreshForYouFeed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_RefreshForYouFeed_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_RefreshFollowingFeed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_RefreshFollowingFeed_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_RefreshFollowingFeed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_RefreshFollowingFeed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_RefreshFollowingFeed_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_RefreshFollowingFeed_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_RefreshFollowingFeed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_RefreshFollowingFeed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_RefreshFollowingFeed_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_RefreshWebFeedSuggestions_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_RefreshWebFeedSuggestions_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_RefreshWebFeedSuggestions_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_RefreshWebFeedSuggestions_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_RefreshWebFeedSuggestions_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_RefreshWebFeedSuggestions_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_RefreshWebFeedSuggestions_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_RefreshWebFeedSuggestions_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_RefreshWebFeedSuggestions_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetFeedProcessScopeDump_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetFeedProcessScopeDump_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_GetFeedProcessScopeDump_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetFeedProcessScopeDump_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetFeedProcessScopeDump_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_GetFeedProcessScopeDump_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetFeedProcessScopeDump_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_GetFeedProcessScopeDump_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetFeedProcessScopeDump_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetFeedProcessScopeDump_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetFeedProcessScopeDump_ResponseParams.prototype.initDefaults_ = function() {
    this.dump = null;
  };
  PageHandler_GetFeedProcessScopeDump_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetFeedProcessScopeDump_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetFeedProcessScopeDump_ResponseParams.dump
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetFeedProcessScopeDump_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetFeedProcessScopeDump_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetFeedProcessScopeDump_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dump =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_GetFeedProcessScopeDump_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetFeedProcessScopeDump_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.dump);
  };
  function PageHandler_GetFeedHistograms_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetFeedHistograms_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_GetFeedHistograms_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetFeedHistograms_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetFeedHistograms_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_GetFeedHistograms_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetFeedHistograms_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_GetFeedHistograms_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetFeedHistograms_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetFeedHistograms_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetFeedHistograms_ResponseParams.prototype.initDefaults_ = function() {
    this.log = null;
  };
  PageHandler_GetFeedHistograms_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetFeedHistograms_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetFeedHistograms_ResponseParams.log
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetFeedHistograms_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetFeedHistograms_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetFeedHistograms_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.log =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_GetFeedHistograms_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetFeedHistograms_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.log);
  };
  function PageHandler_OverrideFeedHost_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OverrideFeedHost_Params.prototype.initDefaults_ = function() {
    this.host = null;
  };
  PageHandler_OverrideFeedHost_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OverrideFeedHost_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OverrideFeedHost_Params.host
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OverrideFeedHost_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OverrideFeedHost_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OverrideFeedHost_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.host =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PageHandler_OverrideFeedHost_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OverrideFeedHost_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.host);
  };
  function PageHandler_OverrideDiscoverApiEndpoint_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OverrideDiscoverApiEndpoint_Params.prototype.initDefaults_ = function() {
    this.endpointUrl = null;
  };
  PageHandler_OverrideDiscoverApiEndpoint_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OverrideDiscoverApiEndpoint_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OverrideDiscoverApiEndpoint_Params.endpointUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OverrideDiscoverApiEndpoint_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OverrideDiscoverApiEndpoint_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OverrideDiscoverApiEndpoint_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.endpointUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PageHandler_OverrideDiscoverApiEndpoint_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OverrideDiscoverApiEndpoint_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.endpointUrl);
  };
  function PageHandler_OverrideFeedStreamData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OverrideFeedStreamData_Params.prototype.initDefaults_ = function() {
    this.data = null;
  };
  PageHandler_OverrideFeedStreamData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OverrideFeedStreamData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OverrideFeedStreamData_Params.data
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OverrideFeedStreamData_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OverrideFeedStreamData_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OverrideFeedStreamData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  PageHandler_OverrideFeedStreamData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OverrideFeedStreamData_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.data);
  };
  function PageHandler_SetWebFeedFollowIntroDebugEnabled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SetWebFeedFollowIntroDebugEnabled_Params.prototype.initDefaults_ = function() {
    this.enabled = false;
  };
  PageHandler_SetWebFeedFollowIntroDebugEnabled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SetWebFeedFollowIntroDebugEnabled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_SetWebFeedFollowIntroDebugEnabled_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_SetWebFeedFollowIntroDebugEnabled_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SetWebFeedFollowIntroDebugEnabled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.enabled = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_SetWebFeedFollowIntroDebugEnabled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SetWebFeedFollowIntroDebugEnabled_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.enabled & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_SetUseFeedQueryRequests_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SetUseFeedQueryRequests_Params.prototype.initDefaults_ = function() {
    this.useLegacy = false;
  };
  PageHandler_SetUseFeedQueryRequests_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SetUseFeedQueryRequests_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_SetUseFeedQueryRequests_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_SetUseFeedQueryRequests_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SetUseFeedQueryRequests_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.useLegacy = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_SetUseFeedQueryRequests_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SetUseFeedQueryRequests_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.useLegacy & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_SetFollowingFeedOrder_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SetFollowingFeedOrder_Params.prototype.initDefaults_ = function() {
    this.order = 0;
  };
  PageHandler_SetFollowingFeedOrder_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SetFollowingFeedOrder_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_SetFollowingFeedOrder_Params.order
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, FeedOrder);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_SetFollowingFeedOrder_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_SetFollowingFeedOrder_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SetFollowingFeedOrder_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.order =
        decoder.decodeStruct(new codec.Enum(FeedOrder));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_SetFollowingFeedOrder_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SetFollowingFeedOrder_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.order);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kPageHandler_GetGeneralProperties_Name = 0;
  var kPageHandler_GetLastFetchProperties_Name = 1;
  var kPageHandler_RefreshForYouFeed_Name = 2;
  var kPageHandler_RefreshFollowingFeed_Name = 3;
  var kPageHandler_RefreshWebFeedSuggestions_Name = 4;
  var kPageHandler_GetFeedProcessScopeDump_Name = 5;
  var kPageHandler_GetFeedHistograms_Name = 6;
  var kPageHandler_OverrideFeedHost_Name = 7;
  var kPageHandler_OverrideDiscoverApiEndpoint_Name = 8;
  var kPageHandler_OverrideFeedStreamData_Name = 9;
  var kPageHandler_SetWebFeedFollowIntroDebugEnabled_Name = 10;
  var kPageHandler_SetUseFeedQueryRequests_Name = 11;
  var kPageHandler_SetFollowingFeedOrder_Name = 12;

  function PageHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandler,
                                                   handleOrPtrInfo);
  }

  function PageHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandler, associatedInterfacePtrInfo);
  }

  PageHandlerAssociatedPtr.prototype =
      Object.create(PageHandlerPtr.prototype);
  PageHandlerAssociatedPtr.prototype.constructor =
      PageHandlerAssociatedPtr;

  function PageHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerPtr.prototype.getGeneralProperties = function() {
    return PageHandlerProxy.prototype.getGeneralProperties
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getGeneralProperties = function() {
    var params_ = new PageHandler_GetGeneralProperties_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetGeneralProperties_Name,
          codec.align(PageHandler_GetGeneralProperties_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetGeneralProperties_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetGeneralProperties_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.getLastFetchProperties = function() {
    return PageHandlerProxy.prototype.getLastFetchProperties
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getLastFetchProperties = function() {
    var params_ = new PageHandler_GetLastFetchProperties_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetLastFetchProperties_Name,
          codec.align(PageHandler_GetLastFetchProperties_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetLastFetchProperties_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetLastFetchProperties_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.refreshForYouFeed = function() {
    return PageHandlerProxy.prototype.refreshForYouFeed
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.refreshForYouFeed = function() {
    var params_ = new PageHandler_RefreshForYouFeed_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_RefreshForYouFeed_Name,
        codec.align(PageHandler_RefreshForYouFeed_Params.encodedSize));
    builder.encodeStruct(PageHandler_RefreshForYouFeed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.refreshFollowingFeed = function() {
    return PageHandlerProxy.prototype.refreshFollowingFeed
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.refreshFollowingFeed = function() {
    var params_ = new PageHandler_RefreshFollowingFeed_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_RefreshFollowingFeed_Name,
        codec.align(PageHandler_RefreshFollowingFeed_Params.encodedSize));
    builder.encodeStruct(PageHandler_RefreshFollowingFeed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.refreshWebFeedSuggestions = function() {
    return PageHandlerProxy.prototype.refreshWebFeedSuggestions
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.refreshWebFeedSuggestions = function() {
    var params_ = new PageHandler_RefreshWebFeedSuggestions_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_RefreshWebFeedSuggestions_Name,
        codec.align(PageHandler_RefreshWebFeedSuggestions_Params.encodedSize));
    builder.encodeStruct(PageHandler_RefreshWebFeedSuggestions_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.getFeedProcessScopeDump = function() {
    return PageHandlerProxy.prototype.getFeedProcessScopeDump
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getFeedProcessScopeDump = function() {
    var params_ = new PageHandler_GetFeedProcessScopeDump_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetFeedProcessScopeDump_Name,
          codec.align(PageHandler_GetFeedProcessScopeDump_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetFeedProcessScopeDump_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetFeedProcessScopeDump_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.getFeedHistograms = function() {
    return PageHandlerProxy.prototype.getFeedHistograms
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getFeedHistograms = function() {
    var params_ = new PageHandler_GetFeedHistograms_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetFeedHistograms_Name,
          codec.align(PageHandler_GetFeedHistograms_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetFeedHistograms_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetFeedHistograms_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.overrideFeedHost = function() {
    return PageHandlerProxy.prototype.overrideFeedHost
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.overrideFeedHost = function(host) {
    var params_ = new PageHandler_OverrideFeedHost_Params();
    params_.host = host;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OverrideFeedHost_Name,
        codec.align(PageHandler_OverrideFeedHost_Params.encodedSize));
    builder.encodeStruct(PageHandler_OverrideFeedHost_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.overrideDiscoverApiEndpoint = function() {
    return PageHandlerProxy.prototype.overrideDiscoverApiEndpoint
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.overrideDiscoverApiEndpoint = function(endpointUrl) {
    var params_ = new PageHandler_OverrideDiscoverApiEndpoint_Params();
    params_.endpointUrl = endpointUrl;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OverrideDiscoverApiEndpoint_Name,
        codec.align(PageHandler_OverrideDiscoverApiEndpoint_Params.encodedSize));
    builder.encodeStruct(PageHandler_OverrideDiscoverApiEndpoint_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.overrideFeedStreamData = function() {
    return PageHandlerProxy.prototype.overrideFeedStreamData
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.overrideFeedStreamData = function(data) {
    var params_ = new PageHandler_OverrideFeedStreamData_Params();
    params_.data = data;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OverrideFeedStreamData_Name,
        codec.align(PageHandler_OverrideFeedStreamData_Params.encodedSize));
    builder.encodeStruct(PageHandler_OverrideFeedStreamData_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.setWebFeedFollowIntroDebugEnabled = function() {
    return PageHandlerProxy.prototype.setWebFeedFollowIntroDebugEnabled
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.setWebFeedFollowIntroDebugEnabled = function(enabled) {
    var params_ = new PageHandler_SetWebFeedFollowIntroDebugEnabled_Params();
    params_.enabled = enabled;
    var builder = new codec.MessageV0Builder(
        kPageHandler_SetWebFeedFollowIntroDebugEnabled_Name,
        codec.align(PageHandler_SetWebFeedFollowIntroDebugEnabled_Params.encodedSize));
    builder.encodeStruct(PageHandler_SetWebFeedFollowIntroDebugEnabled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.setUseFeedQueryRequests = function() {
    return PageHandlerProxy.prototype.setUseFeedQueryRequests
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.setUseFeedQueryRequests = function(useLegacy) {
    var params_ = new PageHandler_SetUseFeedQueryRequests_Params();
    params_.useLegacy = useLegacy;
    var builder = new codec.MessageV0Builder(
        kPageHandler_SetUseFeedQueryRequests_Name,
        codec.align(PageHandler_SetUseFeedQueryRequests_Params.encodedSize));
    builder.encodeStruct(PageHandler_SetUseFeedQueryRequests_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.setFollowingFeedOrder = function() {
    return PageHandlerProxy.prototype.setFollowingFeedOrder
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.setFollowingFeedOrder = function(order) {
    var params_ = new PageHandler_SetFollowingFeedOrder_Params();
    params_.order = order;
    var builder = new codec.MessageV0Builder(
        kPageHandler_SetFollowingFeedOrder_Name,
        codec.align(PageHandler_SetFollowingFeedOrder_Params.encodedSize));
    builder.encodeStruct(PageHandler_SetFollowingFeedOrder_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerStub.prototype.getGeneralProperties = function() {
    return this.delegate_ && this.delegate_.getGeneralProperties && this.delegate_.getGeneralProperties();
  }
  PageHandlerStub.prototype.getLastFetchProperties = function() {
    return this.delegate_ && this.delegate_.getLastFetchProperties && this.delegate_.getLastFetchProperties();
  }
  PageHandlerStub.prototype.refreshForYouFeed = function() {
    return this.delegate_ && this.delegate_.refreshForYouFeed && this.delegate_.refreshForYouFeed();
  }
  PageHandlerStub.prototype.refreshFollowingFeed = function() {
    return this.delegate_ && this.delegate_.refreshFollowingFeed && this.delegate_.refreshFollowingFeed();
  }
  PageHandlerStub.prototype.refreshWebFeedSuggestions = function() {
    return this.delegate_ && this.delegate_.refreshWebFeedSuggestions && this.delegate_.refreshWebFeedSuggestions();
  }
  PageHandlerStub.prototype.getFeedProcessScopeDump = function() {
    return this.delegate_ && this.delegate_.getFeedProcessScopeDump && this.delegate_.getFeedProcessScopeDump();
  }
  PageHandlerStub.prototype.getFeedHistograms = function() {
    return this.delegate_ && this.delegate_.getFeedHistograms && this.delegate_.getFeedHistograms();
  }
  PageHandlerStub.prototype.overrideFeedHost = function(host) {
    return this.delegate_ && this.delegate_.overrideFeedHost && this.delegate_.overrideFeedHost(host);
  }
  PageHandlerStub.prototype.overrideDiscoverApiEndpoint = function(endpointUrl) {
    return this.delegate_ && this.delegate_.overrideDiscoverApiEndpoint && this.delegate_.overrideDiscoverApiEndpoint(endpointUrl);
  }
  PageHandlerStub.prototype.overrideFeedStreamData = function(data) {
    return this.delegate_ && this.delegate_.overrideFeedStreamData && this.delegate_.overrideFeedStreamData(data);
  }
  PageHandlerStub.prototype.setWebFeedFollowIntroDebugEnabled = function(enabled) {
    return this.delegate_ && this.delegate_.setWebFeedFollowIntroDebugEnabled && this.delegate_.setWebFeedFollowIntroDebugEnabled(enabled);
  }
  PageHandlerStub.prototype.setUseFeedQueryRequests = function(useLegacy) {
    return this.delegate_ && this.delegate_.setUseFeedQueryRequests && this.delegate_.setUseFeedQueryRequests(useLegacy);
  }
  PageHandlerStub.prototype.setFollowingFeedOrder = function(order) {
    return this.delegate_ && this.delegate_.setFollowingFeedOrder && this.delegate_.setFollowingFeedOrder(order);
  }

  PageHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_RefreshForYouFeed_Name:
      var params = reader.decodeStruct(PageHandler_RefreshForYouFeed_Params);
      this.refreshForYouFeed();
      return true;
    case kPageHandler_RefreshFollowingFeed_Name:
      var params = reader.decodeStruct(PageHandler_RefreshFollowingFeed_Params);
      this.refreshFollowingFeed();
      return true;
    case kPageHandler_RefreshWebFeedSuggestions_Name:
      var params = reader.decodeStruct(PageHandler_RefreshWebFeedSuggestions_Params);
      this.refreshWebFeedSuggestions();
      return true;
    case kPageHandler_OverrideFeedHost_Name:
      var params = reader.decodeStruct(PageHandler_OverrideFeedHost_Params);
      this.overrideFeedHost(params.host);
      return true;
    case kPageHandler_OverrideDiscoverApiEndpoint_Name:
      var params = reader.decodeStruct(PageHandler_OverrideDiscoverApiEndpoint_Params);
      this.overrideDiscoverApiEndpoint(params.endpointUrl);
      return true;
    case kPageHandler_OverrideFeedStreamData_Name:
      var params = reader.decodeStruct(PageHandler_OverrideFeedStreamData_Params);
      this.overrideFeedStreamData(params.data);
      return true;
    case kPageHandler_SetWebFeedFollowIntroDebugEnabled_Name:
      var params = reader.decodeStruct(PageHandler_SetWebFeedFollowIntroDebugEnabled_Params);
      this.setWebFeedFollowIntroDebugEnabled(params.enabled);
      return true;
    case kPageHandler_SetUseFeedQueryRequests_Name:
      var params = reader.decodeStruct(PageHandler_SetUseFeedQueryRequests_Params);
      this.setUseFeedQueryRequests(params.useLegacy);
      return true;
    case kPageHandler_SetFollowingFeedOrder_Name:
      var params = reader.decodeStruct(PageHandler_SetFollowingFeedOrder_Params);
      this.setFollowingFeedOrder(params.order);
      return true;
    default:
      return false;
    }
  };

  PageHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_GetGeneralProperties_Name:
      var params = reader.decodeStruct(PageHandler_GetGeneralProperties_Params);
      this.getGeneralProperties().then(function(response) {
        var responseParams =
            new PageHandler_GetGeneralProperties_ResponseParams();
        responseParams.properties = response.properties;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetGeneralProperties_Name,
            codec.align(PageHandler_GetGeneralProperties_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetGeneralProperties_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_GetLastFetchProperties_Name:
      var params = reader.decodeStruct(PageHandler_GetLastFetchProperties_Params);
      this.getLastFetchProperties().then(function(response) {
        var responseParams =
            new PageHandler_GetLastFetchProperties_ResponseParams();
        responseParams.properties = response.properties;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetLastFetchProperties_Name,
            codec.align(PageHandler_GetLastFetchProperties_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetLastFetchProperties_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_GetFeedProcessScopeDump_Name:
      var params = reader.decodeStruct(PageHandler_GetFeedProcessScopeDump_Params);
      this.getFeedProcessScopeDump().then(function(response) {
        var responseParams =
            new PageHandler_GetFeedProcessScopeDump_ResponseParams();
        responseParams.dump = response.dump;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetFeedProcessScopeDump_Name,
            codec.align(PageHandler_GetFeedProcessScopeDump_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetFeedProcessScopeDump_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_GetFeedHistograms_Name:
      var params = reader.decodeStruct(PageHandler_GetFeedHistograms_Params);
      this.getFeedHistograms().then(function(response) {
        var responseParams =
            new PageHandler_GetFeedHistograms_ResponseParams();
        responseParams.log = response.log;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetFeedHistograms_Name,
            codec.align(PageHandler_GetFeedHistograms_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetFeedHistograms_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePageHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandler_GetGeneralProperties_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetGeneralProperties_Params;
      break;
      case kPageHandler_GetLastFetchProperties_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetLastFetchProperties_Params;
      break;
      case kPageHandler_RefreshForYouFeed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_RefreshForYouFeed_Params;
      break;
      case kPageHandler_RefreshFollowingFeed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_RefreshFollowingFeed_Params;
      break;
      case kPageHandler_RefreshWebFeedSuggestions_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_RefreshWebFeedSuggestions_Params;
      break;
      case kPageHandler_GetFeedProcessScopeDump_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetFeedProcessScopeDump_Params;
      break;
      case kPageHandler_GetFeedHistograms_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetFeedHistograms_Params;
      break;
      case kPageHandler_OverrideFeedHost_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OverrideFeedHost_Params;
      break;
      case kPageHandler_OverrideDiscoverApiEndpoint_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OverrideDiscoverApiEndpoint_Params;
      break;
      case kPageHandler_OverrideFeedStreamData_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OverrideFeedStreamData_Params;
      break;
      case kPageHandler_SetWebFeedFollowIntroDebugEnabled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SetWebFeedFollowIntroDebugEnabled_Params;
      break;
      case kPageHandler_SetUseFeedQueryRequests_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SetUseFeedQueryRequests_Params;
      break;
      case kPageHandler_SetFollowingFeedOrder_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SetFollowingFeedOrder_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPageHandler_GetGeneralProperties_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetGeneralProperties_ResponseParams;
        break;
      case kPageHandler_GetLastFetchProperties_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetLastFetchProperties_ResponseParams;
        break;
      case kPageHandler_GetFeedProcessScopeDump_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetFeedProcessScopeDump_ResponseParams;
        break;
      case kPageHandler_GetFeedHistograms_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetFeedHistograms_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PageHandler = {
    name: 'feed_internals.mojom.PageHandler',
    kVersion: 0,
    ptrClass: PageHandlerPtr,
    proxyClass: PageHandlerProxy,
    stubClass: PageHandlerStub,
    validateRequest: validatePageHandlerRequest,
    validateResponse: validatePageHandlerResponse,
  };
  PageHandlerStub.prototype.validator = validatePageHandlerRequest;
  PageHandlerProxy.prototype.validator = validatePageHandlerResponse;
  exports.FeedOrder = FeedOrder;
  exports.Properties = Properties;
  exports.LastFetchProperties = LastFetchProperties;
  exports.PageHandler = PageHandler;
  exports.PageHandlerPtr = PageHandlerPtr;
  exports.PageHandlerAssociatedPtr = PageHandlerAssociatedPtr;
})();