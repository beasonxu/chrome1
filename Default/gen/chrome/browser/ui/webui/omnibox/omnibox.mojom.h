// chrome/browser/ui/webui/omnibox/omnibox.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_OMNIBOX_OMNIBOX_MOJOM_H_
#define CHROME_BROWSER_UI_WEBUI_OMNIBOX_OMNIBOX_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/browser/ui/webui/omnibox/omnibox.mojom-shared.h"
#include "chrome/browser/ui/webui/omnibox/omnibox.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace mojom {

class OmniboxPageHandlerProxy;

template <typename ImplRefTraits>
class OmniboxPageHandlerStub;

class OmniboxPageHandlerRequestValidator;


class  OmniboxPageHandler
    : public OmniboxPageHandlerInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = OmniboxPageHandlerInterfaceBase;
  using Proxy_ = OmniboxPageHandlerProxy;

  template <typename ImplRefTraits>
  using Stub_ = OmniboxPageHandlerStub<ImplRefTraits>;

  using RequestValidator_ = OmniboxPageHandlerRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kSetClientPageMinVersion = 0,
    kStartOmniboxQueryMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct SetClientPage_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct StartOmniboxQuery_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~OmniboxPageHandler() = default;

  
  virtual void SetClientPage(::mojo::PendingRemote<OmniboxPage> page) = 0;

  
  virtual void StartOmniboxQuery(const std::string& input_string, bool reset_autocomplete_controller, int32_t cursor_position, bool zero_suggest, bool prevent_inline_autocomplete, bool prefer_keyword, const std::string& current_url, int32_t page_classification) = 0;
};

class OmniboxPageProxy;

template <typename ImplRefTraits>
class OmniboxPageStub;

class OmniboxPageRequestValidator;


class  OmniboxPage
    : public OmniboxPageInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = OmniboxPageInterfaceBase;
  using Proxy_ = OmniboxPageProxy;

  template <typename ImplRefTraits>
  using Stub_ = OmniboxPageStub<ImplRefTraits>;

  using RequestValidator_ = OmniboxPageRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kHandleNewAutocompleteResponseMinVersion = 0,
    kHandleNewAutocompleteQueryMinVersion = 0,
    kHandleAnswerImageDataMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct HandleNewAutocompleteResponse_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct HandleNewAutocompleteQuery_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct HandleAnswerImageData_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~OmniboxPage() = default;

  
  virtual void HandleNewAutocompleteResponse(OmniboxResponsePtr response, bool is_page_controller) = 0;

  
  virtual void HandleNewAutocompleteQuery(bool is_page_controller, const std::string& input_text) = 0;

  
  virtual void HandleAnswerImageData(const std::string& image_url, const std::string& image_data) = 0;
};



class  OmniboxPageHandlerProxy
    : public OmniboxPageHandler {
 public:
  using InterfaceType = OmniboxPageHandler;

  explicit OmniboxPageHandlerProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void SetClientPage(::mojo::PendingRemote<OmniboxPage> page) final;
  
  void StartOmniboxQuery(const std::string& input_string, bool reset_autocomplete_controller, int32_t cursor_position, bool zero_suggest, bool prevent_inline_autocomplete, bool prefer_keyword, const std::string& current_url, int32_t page_classification) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  OmniboxPageProxy
    : public OmniboxPage {
 public:
  using InterfaceType = OmniboxPage;

  explicit OmniboxPageProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void HandleNewAutocompleteResponse(OmniboxResponsePtr response, bool is_page_controller) final;
  
  void HandleNewAutocompleteQuery(bool is_page_controller, const std::string& input_text) final;
  
  void HandleAnswerImageData(const std::string& image_url, const std::string& image_data) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  OmniboxPageHandlerStubDispatch {
 public:
  static bool Accept(OmniboxPageHandler* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      OmniboxPageHandler* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<OmniboxPageHandler>>
class OmniboxPageHandlerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  OmniboxPageHandlerStub() = default;
  ~OmniboxPageHandlerStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return OmniboxPageHandlerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return OmniboxPageHandlerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  OmniboxPageStubDispatch {
 public:
  static bool Accept(OmniboxPage* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      OmniboxPage* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<OmniboxPage>>
class OmniboxPageStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  OmniboxPageStub() = default;
  ~OmniboxPageStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return OmniboxPageStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return OmniboxPageStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  OmniboxPageHandlerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  OmniboxPageRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





class  ACMatchClassification {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ACMatchClassification, T>::value>;
  using DataView = ACMatchClassificationDataView;
  using Data_ = internal::ACMatchClassification_Data;

  template <typename... Args>
  static ACMatchClassificationPtr New(Args&&... args) {
    return ACMatchClassificationPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ACMatchClassificationPtr From(const U& u) {
    return mojo::TypeConverter<ACMatchClassificationPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ACMatchClassification>::Convert(*this);
  }


  ACMatchClassification();

  ACMatchClassification(
      int32_t offset,
      int32_t style);


  ~ACMatchClassification();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ACMatchClassificationPtr>
  ACMatchClassificationPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ACMatchClassification::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ACMatchClassification::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ACMatchClassification::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ACMatchClassification::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ACMatchClassification_UnserializedMessageContext<
            UserType, ACMatchClassification::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ACMatchClassification::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ACMatchClassification::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ACMatchClassification_UnserializedMessageContext<
            UserType, ACMatchClassification::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ACMatchClassification::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t offset;
  
  int32_t style;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ACMatchClassification::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ACMatchClassification::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ACMatchClassification::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ACMatchClassification::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  AutocompleteAdditionalInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AutocompleteAdditionalInfo, T>::value>;
  using DataView = AutocompleteAdditionalInfoDataView;
  using Data_ = internal::AutocompleteAdditionalInfo_Data;

  template <typename... Args>
  static AutocompleteAdditionalInfoPtr New(Args&&... args) {
    return AutocompleteAdditionalInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AutocompleteAdditionalInfoPtr From(const U& u) {
    return mojo::TypeConverter<AutocompleteAdditionalInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AutocompleteAdditionalInfo>::Convert(*this);
  }


  AutocompleteAdditionalInfo();

  AutocompleteAdditionalInfo(
      const std::string& key,
      const std::string& value);


  ~AutocompleteAdditionalInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AutocompleteAdditionalInfoPtr>
  AutocompleteAdditionalInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AutocompleteAdditionalInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AutocompleteAdditionalInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AutocompleteAdditionalInfo::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AutocompleteAdditionalInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AutocompleteAdditionalInfo_UnserializedMessageContext<
            UserType, AutocompleteAdditionalInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AutocompleteAdditionalInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return AutocompleteAdditionalInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AutocompleteAdditionalInfo_UnserializedMessageContext<
            UserType, AutocompleteAdditionalInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AutocompleteAdditionalInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string key;
  
  std::string value;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AutocompleteAdditionalInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AutocompleteAdditionalInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AutocompleteAdditionalInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AutocompleteAdditionalInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}












class  AutocompleteMatch {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AutocompleteMatch, T>::value>;
  using DataView = AutocompleteMatchDataView;
  using Data_ = internal::AutocompleteMatch_Data;

  template <typename... Args>
  static AutocompleteMatchPtr New(Args&&... args) {
    return AutocompleteMatchPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AutocompleteMatchPtr From(const U& u) {
    return mojo::TypeConverter<AutocompleteMatchPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AutocompleteMatch>::Convert(*this);
  }


  AutocompleteMatch();

  AutocompleteMatch(
      const absl::optional<std::string>& provider_name,
      bool provider_done,
      int32_t relevance,
      bool deletable,
      const std::string& fill_into_edit,
      const std::string& inline_autocompletion,
      const std::string& destination_url,
      const std::string& stripped_destination_url,
      const std::string& image,
      const std::string& contents,
      std::vector<ACMatchClassificationPtr> contents_class,
      const std::string& description,
      std::vector<ACMatchClassificationPtr> description_class,
      bool swap_contents_and_description,
      const std::string& answer,
      const std::string& transition,
      bool allowed_to_be_default_match,
      const std::string& type,
      bool is_search_type,
      const std::string& aqs_type_subtypes,
      bool has_tab_match,
      const absl::optional<std::string>& associated_keyword,
      const std::string& keyword,
      bool starred,
      int32_t duplicates,
      bool from_previous,
      int32_t pedal_id,
      std::vector<AutocompleteAdditionalInfoPtr> additional_info);

AutocompleteMatch(const AutocompleteMatch&) = delete;
AutocompleteMatch& operator=(const AutocompleteMatch&) = delete;

  ~AutocompleteMatch();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AutocompleteMatchPtr>
  AutocompleteMatchPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AutocompleteMatch::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AutocompleteMatch::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AutocompleteMatch::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AutocompleteMatch::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AutocompleteMatch_UnserializedMessageContext<
            UserType, AutocompleteMatch::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AutocompleteMatch::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return AutocompleteMatch::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AutocompleteMatch_UnserializedMessageContext<
            UserType, AutocompleteMatch::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AutocompleteMatch::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  absl::optional<std::string> provider_name;
  
  bool provider_done;
  
  int32_t relevance;
  
  bool deletable;
  
  std::string fill_into_edit;
  
  std::string inline_autocompletion;
  
  std::string destination_url;
  
  std::string stripped_destination_url;
  
  std::string image;
  
  std::string contents;
  
  std::vector<ACMatchClassificationPtr> contents_class;
  
  std::string description;
  
  std::vector<ACMatchClassificationPtr> description_class;
  
  bool swap_contents_and_description;
  
  std::string answer;
  
  std::string transition;
  
  bool allowed_to_be_default_match;
  
  std::string type;
  
  bool is_search_type;
  
  std::string aqs_type_subtypes;
  
  bool has_tab_match;
  
  absl::optional<std::string> associated_keyword;
  
  std::string keyword;
  
  bool starred;
  
  int32_t duplicates;
  
  bool from_previous;
  
  int32_t pedal_id;
  
  std::vector<AutocompleteAdditionalInfoPtr> additional_info;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AutocompleteMatch::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AutocompleteMatch::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AutocompleteMatch::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AutocompleteMatch::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  AutocompleteResultsForProvider {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AutocompleteResultsForProvider, T>::value>;
  using DataView = AutocompleteResultsForProviderDataView;
  using Data_ = internal::AutocompleteResultsForProvider_Data;

  template <typename... Args>
  static AutocompleteResultsForProviderPtr New(Args&&... args) {
    return AutocompleteResultsForProviderPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AutocompleteResultsForProviderPtr From(const U& u) {
    return mojo::TypeConverter<AutocompleteResultsForProviderPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AutocompleteResultsForProvider>::Convert(*this);
  }


  AutocompleteResultsForProvider();

  AutocompleteResultsForProvider(
      const std::string& provider_name,
      std::vector<AutocompleteMatchPtr> results);

AutocompleteResultsForProvider(const AutocompleteResultsForProvider&) = delete;
AutocompleteResultsForProvider& operator=(const AutocompleteResultsForProvider&) = delete;

  ~AutocompleteResultsForProvider();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AutocompleteResultsForProviderPtr>
  AutocompleteResultsForProviderPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AutocompleteResultsForProvider::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AutocompleteResultsForProvider::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AutocompleteResultsForProvider::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AutocompleteResultsForProvider::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AutocompleteResultsForProvider_UnserializedMessageContext<
            UserType, AutocompleteResultsForProvider::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AutocompleteResultsForProvider::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return AutocompleteResultsForProvider::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AutocompleteResultsForProvider_UnserializedMessageContext<
            UserType, AutocompleteResultsForProvider::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AutocompleteResultsForProvider::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string provider_name;
  
  std::vector<AutocompleteMatchPtr> results;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AutocompleteResultsForProvider::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AutocompleteResultsForProvider::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AutocompleteResultsForProvider::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AutocompleteResultsForProvider::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  OmniboxResponse {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<OmniboxResponse, T>::value>;
  using DataView = OmniboxResponseDataView;
  using Data_ = internal::OmniboxResponse_Data;

  template <typename... Args>
  static OmniboxResponsePtr New(Args&&... args) {
    return OmniboxResponsePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static OmniboxResponsePtr From(const U& u) {
    return mojo::TypeConverter<OmniboxResponsePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, OmniboxResponse>::Convert(*this);
  }


  OmniboxResponse();

  OmniboxResponse(
      int32_t cursor_position,
      int32_t time_since_omnibox_started_ms,
      bool done,
      const std::string& type,
      const std::string& host,
      bool is_typed_host,
      const std::string& input_text,
      std::vector<AutocompleteMatchPtr> combined_results,
      std::vector<AutocompleteResultsForProviderPtr> results_by_provider);

OmniboxResponse(const OmniboxResponse&) = delete;
OmniboxResponse& operator=(const OmniboxResponse&) = delete;

  ~OmniboxResponse();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = OmniboxResponsePtr>
  OmniboxResponsePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, OmniboxResponse::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, OmniboxResponse::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        OmniboxResponse::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        OmniboxResponse::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::OmniboxResponse_UnserializedMessageContext<
            UserType, OmniboxResponse::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<OmniboxResponse::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return OmniboxResponse::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::OmniboxResponse_UnserializedMessageContext<
            UserType, OmniboxResponse::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<OmniboxResponse::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t cursor_position;
  
  int32_t time_since_omnibox_started_ms;
  
  bool done;
  
  std::string type;
  
  std::string host;
  
  bool is_typed_host;
  
  std::string input_text;
  
  std::vector<AutocompleteMatchPtr> combined_results;
  
  std::vector<AutocompleteResultsForProviderPtr> results_by_provider;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, OmniboxResponse::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, OmniboxResponse::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, OmniboxResponse::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, OmniboxResponse::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
ACMatchClassificationPtr ACMatchClassification::Clone() const {
  return New(
      mojo::Clone(offset),
      mojo::Clone(style)
  );
}

template <typename T, ACMatchClassification::EnableIfSame<T>*>
bool ACMatchClassification::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->offset, other_struct.offset))
    return false;
  if (!mojo::Equals(this->style, other_struct.style))
    return false;
  return true;
}

template <typename T, ACMatchClassification::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.offset < rhs.offset)
    return true;
  if (rhs.offset < lhs.offset)
    return false;
  if (lhs.style < rhs.style)
    return true;
  if (rhs.style < lhs.style)
    return false;
  return false;
}
template <typename StructPtrType>
AutocompleteAdditionalInfoPtr AutocompleteAdditionalInfo::Clone() const {
  return New(
      mojo::Clone(key),
      mojo::Clone(value)
  );
}

template <typename T, AutocompleteAdditionalInfo::EnableIfSame<T>*>
bool AutocompleteAdditionalInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->key, other_struct.key))
    return false;
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, AutocompleteAdditionalInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.key < rhs.key)
    return true;
  if (rhs.key < lhs.key)
    return false;
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
AutocompleteMatchPtr AutocompleteMatch::Clone() const {
  return New(
      mojo::Clone(provider_name),
      mojo::Clone(provider_done),
      mojo::Clone(relevance),
      mojo::Clone(deletable),
      mojo::Clone(fill_into_edit),
      mojo::Clone(inline_autocompletion),
      mojo::Clone(destination_url),
      mojo::Clone(stripped_destination_url),
      mojo::Clone(image),
      mojo::Clone(contents),
      mojo::Clone(contents_class),
      mojo::Clone(description),
      mojo::Clone(description_class),
      mojo::Clone(swap_contents_and_description),
      mojo::Clone(answer),
      mojo::Clone(transition),
      mojo::Clone(allowed_to_be_default_match),
      mojo::Clone(type),
      mojo::Clone(is_search_type),
      mojo::Clone(aqs_type_subtypes),
      mojo::Clone(has_tab_match),
      mojo::Clone(associated_keyword),
      mojo::Clone(keyword),
      mojo::Clone(starred),
      mojo::Clone(duplicates),
      mojo::Clone(from_previous),
      mojo::Clone(pedal_id),
      mojo::Clone(additional_info)
  );
}

template <typename T, AutocompleteMatch::EnableIfSame<T>*>
bool AutocompleteMatch::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->provider_name, other_struct.provider_name))
    return false;
  if (!mojo::Equals(this->provider_done, other_struct.provider_done))
    return false;
  if (!mojo::Equals(this->relevance, other_struct.relevance))
    return false;
  if (!mojo::Equals(this->deletable, other_struct.deletable))
    return false;
  if (!mojo::Equals(this->fill_into_edit, other_struct.fill_into_edit))
    return false;
  if (!mojo::Equals(this->inline_autocompletion, other_struct.inline_autocompletion))
    return false;
  if (!mojo::Equals(this->destination_url, other_struct.destination_url))
    return false;
  if (!mojo::Equals(this->stripped_destination_url, other_struct.stripped_destination_url))
    return false;
  if (!mojo::Equals(this->image, other_struct.image))
    return false;
  if (!mojo::Equals(this->contents, other_struct.contents))
    return false;
  if (!mojo::Equals(this->contents_class, other_struct.contents_class))
    return false;
  if (!mojo::Equals(this->description, other_struct.description))
    return false;
  if (!mojo::Equals(this->description_class, other_struct.description_class))
    return false;
  if (!mojo::Equals(this->swap_contents_and_description, other_struct.swap_contents_and_description))
    return false;
  if (!mojo::Equals(this->answer, other_struct.answer))
    return false;
  if (!mojo::Equals(this->transition, other_struct.transition))
    return false;
  if (!mojo::Equals(this->allowed_to_be_default_match, other_struct.allowed_to_be_default_match))
    return false;
  if (!mojo::Equals(this->type, other_struct.type))
    return false;
  if (!mojo::Equals(this->is_search_type, other_struct.is_search_type))
    return false;
  if (!mojo::Equals(this->aqs_type_subtypes, other_struct.aqs_type_subtypes))
    return false;
  if (!mojo::Equals(this->has_tab_match, other_struct.has_tab_match))
    return false;
  if (!mojo::Equals(this->associated_keyword, other_struct.associated_keyword))
    return false;
  if (!mojo::Equals(this->keyword, other_struct.keyword))
    return false;
  if (!mojo::Equals(this->starred, other_struct.starred))
    return false;
  if (!mojo::Equals(this->duplicates, other_struct.duplicates))
    return false;
  if (!mojo::Equals(this->from_previous, other_struct.from_previous))
    return false;
  if (!mojo::Equals(this->pedal_id, other_struct.pedal_id))
    return false;
  if (!mojo::Equals(this->additional_info, other_struct.additional_info))
    return false;
  return true;
}

template <typename T, AutocompleteMatch::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.provider_name < rhs.provider_name)
    return true;
  if (rhs.provider_name < lhs.provider_name)
    return false;
  if (lhs.provider_done < rhs.provider_done)
    return true;
  if (rhs.provider_done < lhs.provider_done)
    return false;
  if (lhs.relevance < rhs.relevance)
    return true;
  if (rhs.relevance < lhs.relevance)
    return false;
  if (lhs.deletable < rhs.deletable)
    return true;
  if (rhs.deletable < lhs.deletable)
    return false;
  if (lhs.fill_into_edit < rhs.fill_into_edit)
    return true;
  if (rhs.fill_into_edit < lhs.fill_into_edit)
    return false;
  if (lhs.inline_autocompletion < rhs.inline_autocompletion)
    return true;
  if (rhs.inline_autocompletion < lhs.inline_autocompletion)
    return false;
  if (lhs.destination_url < rhs.destination_url)
    return true;
  if (rhs.destination_url < lhs.destination_url)
    return false;
  if (lhs.stripped_destination_url < rhs.stripped_destination_url)
    return true;
  if (rhs.stripped_destination_url < lhs.stripped_destination_url)
    return false;
  if (lhs.image < rhs.image)
    return true;
  if (rhs.image < lhs.image)
    return false;
  if (lhs.contents < rhs.contents)
    return true;
  if (rhs.contents < lhs.contents)
    return false;
  if (lhs.contents_class < rhs.contents_class)
    return true;
  if (rhs.contents_class < lhs.contents_class)
    return false;
  if (lhs.description < rhs.description)
    return true;
  if (rhs.description < lhs.description)
    return false;
  if (lhs.description_class < rhs.description_class)
    return true;
  if (rhs.description_class < lhs.description_class)
    return false;
  if (lhs.swap_contents_and_description < rhs.swap_contents_and_description)
    return true;
  if (rhs.swap_contents_and_description < lhs.swap_contents_and_description)
    return false;
  if (lhs.answer < rhs.answer)
    return true;
  if (rhs.answer < lhs.answer)
    return false;
  if (lhs.transition < rhs.transition)
    return true;
  if (rhs.transition < lhs.transition)
    return false;
  if (lhs.allowed_to_be_default_match < rhs.allowed_to_be_default_match)
    return true;
  if (rhs.allowed_to_be_default_match < lhs.allowed_to_be_default_match)
    return false;
  if (lhs.type < rhs.type)
    return true;
  if (rhs.type < lhs.type)
    return false;
  if (lhs.is_search_type < rhs.is_search_type)
    return true;
  if (rhs.is_search_type < lhs.is_search_type)
    return false;
  if (lhs.aqs_type_subtypes < rhs.aqs_type_subtypes)
    return true;
  if (rhs.aqs_type_subtypes < lhs.aqs_type_subtypes)
    return false;
  if (lhs.has_tab_match < rhs.has_tab_match)
    return true;
  if (rhs.has_tab_match < lhs.has_tab_match)
    return false;
  if (lhs.associated_keyword < rhs.associated_keyword)
    return true;
  if (rhs.associated_keyword < lhs.associated_keyword)
    return false;
  if (lhs.keyword < rhs.keyword)
    return true;
  if (rhs.keyword < lhs.keyword)
    return false;
  if (lhs.starred < rhs.starred)
    return true;
  if (rhs.starred < lhs.starred)
    return false;
  if (lhs.duplicates < rhs.duplicates)
    return true;
  if (rhs.duplicates < lhs.duplicates)
    return false;
  if (lhs.from_previous < rhs.from_previous)
    return true;
  if (rhs.from_previous < lhs.from_previous)
    return false;
  if (lhs.pedal_id < rhs.pedal_id)
    return true;
  if (rhs.pedal_id < lhs.pedal_id)
    return false;
  if (lhs.additional_info < rhs.additional_info)
    return true;
  if (rhs.additional_info < lhs.additional_info)
    return false;
  return false;
}
template <typename StructPtrType>
AutocompleteResultsForProviderPtr AutocompleteResultsForProvider::Clone() const {
  return New(
      mojo::Clone(provider_name),
      mojo::Clone(results)
  );
}

template <typename T, AutocompleteResultsForProvider::EnableIfSame<T>*>
bool AutocompleteResultsForProvider::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->provider_name, other_struct.provider_name))
    return false;
  if (!mojo::Equals(this->results, other_struct.results))
    return false;
  return true;
}

template <typename T, AutocompleteResultsForProvider::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.provider_name < rhs.provider_name)
    return true;
  if (rhs.provider_name < lhs.provider_name)
    return false;
  if (lhs.results < rhs.results)
    return true;
  if (rhs.results < lhs.results)
    return false;
  return false;
}
template <typename StructPtrType>
OmniboxResponsePtr OmniboxResponse::Clone() const {
  return New(
      mojo::Clone(cursor_position),
      mojo::Clone(time_since_omnibox_started_ms),
      mojo::Clone(done),
      mojo::Clone(type),
      mojo::Clone(host),
      mojo::Clone(is_typed_host),
      mojo::Clone(input_text),
      mojo::Clone(combined_results),
      mojo::Clone(results_by_provider)
  );
}

template <typename T, OmniboxResponse::EnableIfSame<T>*>
bool OmniboxResponse::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->cursor_position, other_struct.cursor_position))
    return false;
  if (!mojo::Equals(this->time_since_omnibox_started_ms, other_struct.time_since_omnibox_started_ms))
    return false;
  if (!mojo::Equals(this->done, other_struct.done))
    return false;
  if (!mojo::Equals(this->type, other_struct.type))
    return false;
  if (!mojo::Equals(this->host, other_struct.host))
    return false;
  if (!mojo::Equals(this->is_typed_host, other_struct.is_typed_host))
    return false;
  if (!mojo::Equals(this->input_text, other_struct.input_text))
    return false;
  if (!mojo::Equals(this->combined_results, other_struct.combined_results))
    return false;
  if (!mojo::Equals(this->results_by_provider, other_struct.results_by_provider))
    return false;
  return true;
}

template <typename T, OmniboxResponse::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.cursor_position < rhs.cursor_position)
    return true;
  if (rhs.cursor_position < lhs.cursor_position)
    return false;
  if (lhs.time_since_omnibox_started_ms < rhs.time_since_omnibox_started_ms)
    return true;
  if (rhs.time_since_omnibox_started_ms < lhs.time_since_omnibox_started_ms)
    return false;
  if (lhs.done < rhs.done)
    return true;
  if (rhs.done < lhs.done)
    return false;
  if (lhs.type < rhs.type)
    return true;
  if (rhs.type < lhs.type)
    return false;
  if (lhs.host < rhs.host)
    return true;
  if (rhs.host < lhs.host)
    return false;
  if (lhs.is_typed_host < rhs.is_typed_host)
    return true;
  if (rhs.is_typed_host < lhs.is_typed_host)
    return false;
  if (lhs.input_text < rhs.input_text)
    return true;
  if (rhs.input_text < lhs.input_text)
    return false;
  if (lhs.combined_results < rhs.combined_results)
    return true;
  if (rhs.combined_results < lhs.combined_results)
    return false;
  if (lhs.results_by_provider < rhs.results_by_provider)
    return true;
  if (rhs.results_by_provider < lhs.results_by_provider)
    return false;
  return false;
}


}  // namespace mojom

namespace mojo {


template <>
struct  StructTraits<::mojom::ACMatchClassification::DataView,
                                         ::mojom::ACMatchClassificationPtr> {
  static bool IsNull(const ::mojom::ACMatchClassificationPtr& input) { return !input; }
  static void SetToNull(::mojom::ACMatchClassificationPtr* output) { output->reset(); }

  static decltype(::mojom::ACMatchClassification::offset) offset(
      const ::mojom::ACMatchClassificationPtr& input) {
    return input->offset;
  }

  static decltype(::mojom::ACMatchClassification::style) style(
      const ::mojom::ACMatchClassificationPtr& input) {
    return input->style;
  }

  static bool Read(::mojom::ACMatchClassification::DataView input, ::mojom::ACMatchClassificationPtr* output);
};


template <>
struct  StructTraits<::mojom::AutocompleteAdditionalInfo::DataView,
                                         ::mojom::AutocompleteAdditionalInfoPtr> {
  static bool IsNull(const ::mojom::AutocompleteAdditionalInfoPtr& input) { return !input; }
  static void SetToNull(::mojom::AutocompleteAdditionalInfoPtr* output) { output->reset(); }

  static const decltype(::mojom::AutocompleteAdditionalInfo::key)& key(
      const ::mojom::AutocompleteAdditionalInfoPtr& input) {
    return input->key;
  }

  static const decltype(::mojom::AutocompleteAdditionalInfo::value)& value(
      const ::mojom::AutocompleteAdditionalInfoPtr& input) {
    return input->value;
  }

  static bool Read(::mojom::AutocompleteAdditionalInfo::DataView input, ::mojom::AutocompleteAdditionalInfoPtr* output);
};


template <>
struct  StructTraits<::mojom::AutocompleteMatch::DataView,
                                         ::mojom::AutocompleteMatchPtr> {
  static bool IsNull(const ::mojom::AutocompleteMatchPtr& input) { return !input; }
  static void SetToNull(::mojom::AutocompleteMatchPtr* output) { output->reset(); }

  static const decltype(::mojom::AutocompleteMatch::provider_name)& provider_name(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->provider_name;
  }

  static decltype(::mojom::AutocompleteMatch::provider_done) provider_done(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->provider_done;
  }

  static decltype(::mojom::AutocompleteMatch::relevance) relevance(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->relevance;
  }

  static decltype(::mojom::AutocompleteMatch::deletable) deletable(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->deletable;
  }

  static const decltype(::mojom::AutocompleteMatch::fill_into_edit)& fill_into_edit(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->fill_into_edit;
  }

  static const decltype(::mojom::AutocompleteMatch::inline_autocompletion)& inline_autocompletion(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->inline_autocompletion;
  }

  static const decltype(::mojom::AutocompleteMatch::destination_url)& destination_url(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->destination_url;
  }

  static const decltype(::mojom::AutocompleteMatch::stripped_destination_url)& stripped_destination_url(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->stripped_destination_url;
  }

  static const decltype(::mojom::AutocompleteMatch::image)& image(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->image;
  }

  static const decltype(::mojom::AutocompleteMatch::contents)& contents(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->contents;
  }

  static const decltype(::mojom::AutocompleteMatch::contents_class)& contents_class(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->contents_class;
  }

  static const decltype(::mojom::AutocompleteMatch::description)& description(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->description;
  }

  static const decltype(::mojom::AutocompleteMatch::description_class)& description_class(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->description_class;
  }

  static decltype(::mojom::AutocompleteMatch::swap_contents_and_description) swap_contents_and_description(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->swap_contents_and_description;
  }

  static const decltype(::mojom::AutocompleteMatch::answer)& answer(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->answer;
  }

  static const decltype(::mojom::AutocompleteMatch::transition)& transition(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->transition;
  }

  static decltype(::mojom::AutocompleteMatch::allowed_to_be_default_match) allowed_to_be_default_match(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->allowed_to_be_default_match;
  }

  static const decltype(::mojom::AutocompleteMatch::type)& type(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->type;
  }

  static decltype(::mojom::AutocompleteMatch::is_search_type) is_search_type(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->is_search_type;
  }

  static const decltype(::mojom::AutocompleteMatch::aqs_type_subtypes)& aqs_type_subtypes(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->aqs_type_subtypes;
  }

  static decltype(::mojom::AutocompleteMatch::has_tab_match) has_tab_match(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->has_tab_match;
  }

  static const decltype(::mojom::AutocompleteMatch::associated_keyword)& associated_keyword(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->associated_keyword;
  }

  static const decltype(::mojom::AutocompleteMatch::keyword)& keyword(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->keyword;
  }

  static decltype(::mojom::AutocompleteMatch::starred) starred(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->starred;
  }

  static decltype(::mojom::AutocompleteMatch::duplicates) duplicates(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->duplicates;
  }

  static decltype(::mojom::AutocompleteMatch::from_previous) from_previous(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->from_previous;
  }

  static decltype(::mojom::AutocompleteMatch::pedal_id) pedal_id(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->pedal_id;
  }

  static const decltype(::mojom::AutocompleteMatch::additional_info)& additional_info(
      const ::mojom::AutocompleteMatchPtr& input) {
    return input->additional_info;
  }

  static bool Read(::mojom::AutocompleteMatch::DataView input, ::mojom::AutocompleteMatchPtr* output);
};


template <>
struct  StructTraits<::mojom::AutocompleteResultsForProvider::DataView,
                                         ::mojom::AutocompleteResultsForProviderPtr> {
  static bool IsNull(const ::mojom::AutocompleteResultsForProviderPtr& input) { return !input; }
  static void SetToNull(::mojom::AutocompleteResultsForProviderPtr* output) { output->reset(); }

  static const decltype(::mojom::AutocompleteResultsForProvider::provider_name)& provider_name(
      const ::mojom::AutocompleteResultsForProviderPtr& input) {
    return input->provider_name;
  }

  static const decltype(::mojom::AutocompleteResultsForProvider::results)& results(
      const ::mojom::AutocompleteResultsForProviderPtr& input) {
    return input->results;
  }

  static bool Read(::mojom::AutocompleteResultsForProvider::DataView input, ::mojom::AutocompleteResultsForProviderPtr* output);
};


template <>
struct  StructTraits<::mojom::OmniboxResponse::DataView,
                                         ::mojom::OmniboxResponsePtr> {
  static bool IsNull(const ::mojom::OmniboxResponsePtr& input) { return !input; }
  static void SetToNull(::mojom::OmniboxResponsePtr* output) { output->reset(); }

  static decltype(::mojom::OmniboxResponse::cursor_position) cursor_position(
      const ::mojom::OmniboxResponsePtr& input) {
    return input->cursor_position;
  }

  static decltype(::mojom::OmniboxResponse::time_since_omnibox_started_ms) time_since_omnibox_started_ms(
      const ::mojom::OmniboxResponsePtr& input) {
    return input->time_since_omnibox_started_ms;
  }

  static decltype(::mojom::OmniboxResponse::done) done(
      const ::mojom::OmniboxResponsePtr& input) {
    return input->done;
  }

  static const decltype(::mojom::OmniboxResponse::type)& type(
      const ::mojom::OmniboxResponsePtr& input) {
    return input->type;
  }

  static const decltype(::mojom::OmniboxResponse::host)& host(
      const ::mojom::OmniboxResponsePtr& input) {
    return input->host;
  }

  static decltype(::mojom::OmniboxResponse::is_typed_host) is_typed_host(
      const ::mojom::OmniboxResponsePtr& input) {
    return input->is_typed_host;
  }

  static const decltype(::mojom::OmniboxResponse::input_text)& input_text(
      const ::mojom::OmniboxResponsePtr& input) {
    return input->input_text;
  }

  static const decltype(::mojom::OmniboxResponse::combined_results)& combined_results(
      const ::mojom::OmniboxResponsePtr& input) {
    return input->combined_results;
  }

  static const decltype(::mojom::OmniboxResponse::results_by_provider)& results_by_provider(
      const ::mojom::OmniboxResponsePtr& input) {
    return input->results_by_provider;
  }

  static bool Read(::mojom::OmniboxResponse::DataView input, ::mojom::OmniboxResponsePtr* output);
};

}  // namespace mojo

#endif  // CHROME_BROWSER_UI_WEBUI_OMNIBOX_OMNIBOX_MOJOM_H_