// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: website_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_website_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_website_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_website_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_website_5fevent_2eproto {
  static const uint32_t offsets[];
};
namespace usage_stats {
class Suspension;
struct SuspensionDefaultTypeInternal;
extern SuspensionDefaultTypeInternal _Suspension_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class TokenMapping;
struct TokenMappingDefaultTypeInternal;
extern TokenMappingDefaultTypeInternal _TokenMapping_default_instance_;
class WebsiteEvent;
struct WebsiteEventDefaultTypeInternal;
extern WebsiteEventDefaultTypeInternal _WebsiteEvent_default_instance_;
}  // namespace usage_stats
PROTOBUF_NAMESPACE_OPEN
template<> ::usage_stats::Suspension* Arena::CreateMaybeMessage<::usage_stats::Suspension>(Arena*);
template<> ::usage_stats::Timestamp* Arena::CreateMaybeMessage<::usage_stats::Timestamp>(Arena*);
template<> ::usage_stats::TokenMapping* Arena::CreateMaybeMessage<::usage_stats::TokenMapping>(Arena*);
template<> ::usage_stats::WebsiteEvent* Arena::CreateMaybeMessage<::usage_stats::WebsiteEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace usage_stats {

enum WebsiteEvent_EventType : int {
  WebsiteEvent_EventType_UNKNOWN = 0,
  WebsiteEvent_EventType_START_BROWSING = 1,
  WebsiteEvent_EventType_STOP_BROWSING = 2
};
bool WebsiteEvent_EventType_IsValid(int value);
constexpr WebsiteEvent_EventType WebsiteEvent_EventType_EventType_MIN = WebsiteEvent_EventType_UNKNOWN;
constexpr WebsiteEvent_EventType WebsiteEvent_EventType_EventType_MAX = WebsiteEvent_EventType_STOP_BROWSING;
constexpr int WebsiteEvent_EventType_EventType_ARRAYSIZE = WebsiteEvent_EventType_EventType_MAX + 1;

const std::string& WebsiteEvent_EventType_Name(WebsiteEvent_EventType value);
template<typename T>
inline const std::string& WebsiteEvent_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WebsiteEvent_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WebsiteEvent_EventType_Name.");
  return WebsiteEvent_EventType_Name(static_cast<WebsiteEvent_EventType>(enum_t_value));
}
bool WebsiteEvent_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebsiteEvent_EventType* value);
// ===================================================================

class WebsiteEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:usage_stats.WebsiteEvent) */ {
 public:
  inline WebsiteEvent() : WebsiteEvent(nullptr) {}
  ~WebsiteEvent() override;
  explicit PROTOBUF_CONSTEXPR WebsiteEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebsiteEvent(const WebsiteEvent& from);
  WebsiteEvent(WebsiteEvent&& from) noexcept
    : WebsiteEvent() {
    *this = ::std::move(from);
  }

  inline WebsiteEvent& operator=(const WebsiteEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebsiteEvent& operator=(WebsiteEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WebsiteEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebsiteEvent* internal_default_instance() {
    return reinterpret_cast<const WebsiteEvent*>(
               &_WebsiteEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebsiteEvent& a, WebsiteEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebsiteEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebsiteEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebsiteEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebsiteEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebsiteEvent& from);
  void MergeFrom(const WebsiteEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebsiteEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usage_stats.WebsiteEvent";
  }
  protected:
  explicit WebsiteEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WebsiteEvent_EventType EventType;
  static constexpr EventType UNKNOWN =
    WebsiteEvent_EventType_UNKNOWN;
  static constexpr EventType START_BROWSING =
    WebsiteEvent_EventType_START_BROWSING;
  static constexpr EventType STOP_BROWSING =
    WebsiteEvent_EventType_STOP_BROWSING;
  static inline bool EventType_IsValid(int value) {
    return WebsiteEvent_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    WebsiteEvent_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    WebsiteEvent_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    WebsiteEvent_EventType_EventType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return WebsiteEvent_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return WebsiteEvent_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFqdnFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // optional string fqdn = 1;
  bool has_fqdn() const;
  private:
  bool _internal_has_fqdn() const;
  public:
  void clear_fqdn();
  const std::string& fqdn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fqdn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fqdn();
  PROTOBUF_NODISCARD std::string* release_fqdn();
  void set_allocated_fqdn(std::string* fqdn);
  private:
  const std::string& _internal_fqdn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fqdn(const std::string& value);
  std::string* _internal_mutable_fqdn();
  public:

  // optional .usage_stats.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::usage_stats::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::usage_stats::Timestamp* release_timestamp();
  ::usage_stats::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::usage_stats::Timestamp* timestamp);
  private:
  const ::usage_stats::Timestamp& _internal_timestamp() const;
  ::usage_stats::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::usage_stats::Timestamp* timestamp);
  ::usage_stats::Timestamp* unsafe_arena_release_timestamp();

  // optional .usage_stats.WebsiteEvent.EventType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::usage_stats::WebsiteEvent_EventType type() const;
  void set_type(::usage_stats::WebsiteEvent_EventType value);
  private:
  ::usage_stats::WebsiteEvent_EventType _internal_type() const;
  void _internal_set_type(::usage_stats::WebsiteEvent_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:usage_stats.WebsiteEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fqdn_;
  ::usage_stats::Timestamp* timestamp_;
  int type_;
  friend struct ::TableStruct_website_5fevent_2eproto;
};
// -------------------------------------------------------------------

class Timestamp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:usage_stats.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  ~Timestamp() override;
  explicit PROTOBUF_CONSTEXPR Timestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Timestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Timestamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usage_stats.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // optional int64 seconds = 1;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  int64_t seconds() const;
  void set_seconds(int64_t value);
  private:
  int64_t _internal_seconds() const;
  void _internal_set_seconds(int64_t value);
  public:

  // optional int32 nanos = 2;
  bool has_nanos() const;
  private:
  bool _internal_has_nanos() const;
  public:
  void clear_nanos();
  int32_t nanos() const;
  void set_nanos(int32_t value);
  private:
  int32_t _internal_nanos() const;
  void _internal_set_nanos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:usage_stats.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t seconds_;
  int32_t nanos_;
  friend struct ::TableStruct_website_5fevent_2eproto;
};
// -------------------------------------------------------------------

class TokenMapping final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:usage_stats.TokenMapping) */ {
 public:
  inline TokenMapping() : TokenMapping(nullptr) {}
  ~TokenMapping() override;
  explicit PROTOBUF_CONSTEXPR TokenMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenMapping(const TokenMapping& from);
  TokenMapping(TokenMapping&& from) noexcept
    : TokenMapping() {
    *this = ::std::move(from);
  }

  inline TokenMapping& operator=(const TokenMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenMapping& operator=(TokenMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TokenMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenMapping* internal_default_instance() {
    return reinterpret_cast<const TokenMapping*>(
               &_TokenMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TokenMapping& a, TokenMapping& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TokenMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenMapping>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TokenMapping& from);
  void MergeFrom(const TokenMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TokenMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usage_stats.TokenMapping";
  }
  protected:
  explicit TokenMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kFqdnFieldNumber = 2,
  };
  // optional string token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional string fqdn = 2;
  bool has_fqdn() const;
  private:
  bool _internal_has_fqdn() const;
  public:
  void clear_fqdn();
  const std::string& fqdn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fqdn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fqdn();
  PROTOBUF_NODISCARD std::string* release_fqdn();
  void set_allocated_fqdn(std::string* fqdn);
  private:
  const std::string& _internal_fqdn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fqdn(const std::string& value);
  std::string* _internal_mutable_fqdn();
  public:

  // @@protoc_insertion_point(class_scope:usage_stats.TokenMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fqdn_;
  friend struct ::TableStruct_website_5fevent_2eproto;
};
// -------------------------------------------------------------------

class Suspension final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:usage_stats.Suspension) */ {
 public:
  inline Suspension() : Suspension(nullptr) {}
  ~Suspension() override;
  explicit PROTOBUF_CONSTEXPR Suspension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Suspension(const Suspension& from);
  Suspension(Suspension&& from) noexcept
    : Suspension() {
    *this = ::std::move(from);
  }

  inline Suspension& operator=(const Suspension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Suspension& operator=(Suspension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Suspension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Suspension* internal_default_instance() {
    return reinterpret_cast<const Suspension*>(
               &_Suspension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Suspension& a, Suspension& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Suspension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Suspension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Suspension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Suspension>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Suspension& from);
  void MergeFrom(const Suspension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Suspension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usage_stats.Suspension";
  }
  protected:
  explicit Suspension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFqdnFieldNumber = 1,
  };
  // optional string fqdn = 1;
  bool has_fqdn() const;
  private:
  bool _internal_has_fqdn() const;
  public:
  void clear_fqdn();
  const std::string& fqdn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fqdn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fqdn();
  PROTOBUF_NODISCARD std::string* release_fqdn();
  void set_allocated_fqdn(std::string* fqdn);
  private:
  const std::string& _internal_fqdn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fqdn(const std::string& value);
  std::string* _internal_mutable_fqdn();
  public:

  // @@protoc_insertion_point(class_scope:usage_stats.Suspension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fqdn_;
  friend struct ::TableStruct_website_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebsiteEvent

// optional string fqdn = 1;
inline bool WebsiteEvent::_internal_has_fqdn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebsiteEvent::has_fqdn() const {
  return _internal_has_fqdn();
}
inline void WebsiteEvent::clear_fqdn() {
  fqdn_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebsiteEvent::fqdn() const {
  // @@protoc_insertion_point(field_get:usage_stats.WebsiteEvent.fqdn)
  return _internal_fqdn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebsiteEvent::set_fqdn(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 fqdn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:usage_stats.WebsiteEvent.fqdn)
}
inline std::string* WebsiteEvent::mutable_fqdn() {
  std::string* _s = _internal_mutable_fqdn();
  // @@protoc_insertion_point(field_mutable:usage_stats.WebsiteEvent.fqdn)
  return _s;
}
inline const std::string& WebsiteEvent::_internal_fqdn() const {
  return fqdn_.Get();
}
inline void WebsiteEvent::_internal_set_fqdn(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fqdn_.Set(value, GetArenaForAllocation());
}
inline std::string* WebsiteEvent::_internal_mutable_fqdn() {
  _has_bits_[0] |= 0x00000001u;
  return fqdn_.Mutable(GetArenaForAllocation());
}
inline std::string* WebsiteEvent::release_fqdn() {
  // @@protoc_insertion_point(field_release:usage_stats.WebsiteEvent.fqdn)
  if (!_internal_has_fqdn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = fqdn_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fqdn_.IsDefault()) {
    fqdn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebsiteEvent::set_allocated_fqdn(std::string* fqdn) {
  if (fqdn != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fqdn_.SetAllocated(fqdn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fqdn_.IsDefault()) {
    fqdn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:usage_stats.WebsiteEvent.fqdn)
}

// optional .usage_stats.Timestamp timestamp = 2;
inline bool WebsiteEvent::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool WebsiteEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void WebsiteEvent::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::usage_stats::Timestamp& WebsiteEvent::_internal_timestamp() const {
  const ::usage_stats::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::usage_stats::Timestamp&>(
      ::usage_stats::_Timestamp_default_instance_);
}
inline const ::usage_stats::Timestamp& WebsiteEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:usage_stats.WebsiteEvent.timestamp)
  return _internal_timestamp();
}
inline void WebsiteEvent::unsafe_arena_set_allocated_timestamp(
    ::usage_stats::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usage_stats.WebsiteEvent.timestamp)
}
inline ::usage_stats::Timestamp* WebsiteEvent::release_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
  ::usage_stats::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::usage_stats::Timestamp* WebsiteEvent::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:usage_stats.WebsiteEvent.timestamp)
  _has_bits_[0] &= ~0x00000002u;
  ::usage_stats::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::usage_stats::Timestamp* WebsiteEvent::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000002u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::usage_stats::Timestamp>(GetArenaForAllocation());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::usage_stats::Timestamp* WebsiteEvent::mutable_timestamp() {
  ::usage_stats::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:usage_stats.WebsiteEvent.timestamp)
  return _msg;
}
inline void WebsiteEvent::set_allocated_timestamp(::usage_stats::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete timestamp_;
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timestamp);
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:usage_stats.WebsiteEvent.timestamp)
}

// optional .usage_stats.WebsiteEvent.EventType type = 3;
inline bool WebsiteEvent::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WebsiteEvent::has_type() const {
  return _internal_has_type();
}
inline void WebsiteEvent::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::usage_stats::WebsiteEvent_EventType WebsiteEvent::_internal_type() const {
  return static_cast< ::usage_stats::WebsiteEvent_EventType >(type_);
}
inline ::usage_stats::WebsiteEvent_EventType WebsiteEvent::type() const {
  // @@protoc_insertion_point(field_get:usage_stats.WebsiteEvent.type)
  return _internal_type();
}
inline void WebsiteEvent::_internal_set_type(::usage_stats::WebsiteEvent_EventType value) {
  assert(::usage_stats::WebsiteEvent_EventType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void WebsiteEvent::set_type(::usage_stats::WebsiteEvent_EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:usage_stats.WebsiteEvent.type)
}

// -------------------------------------------------------------------

// Timestamp

// optional int64 seconds = 1;
inline bool Timestamp::_internal_has_seconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Timestamp::has_seconds() const {
  return _internal_has_seconds();
}
inline void Timestamp::clear_seconds() {
  seconds_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Timestamp::_internal_seconds() const {
  return seconds_;
}
inline int64_t Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:usage_stats.Timestamp.seconds)
  return _internal_seconds();
}
inline void Timestamp::_internal_set_seconds(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_ = value;
}
inline void Timestamp::set_seconds(int64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:usage_stats.Timestamp.seconds)
}

// optional int32 nanos = 2;
inline bool Timestamp::_internal_has_nanos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Timestamp::has_nanos() const {
  return _internal_has_nanos();
}
inline void Timestamp::clear_nanos() {
  nanos_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Timestamp::_internal_nanos() const {
  return nanos_;
}
inline int32_t Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:usage_stats.Timestamp.nanos)
  return _internal_nanos();
}
inline void Timestamp::_internal_set_nanos(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  nanos_ = value;
}
inline void Timestamp::set_nanos(int32_t value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:usage_stats.Timestamp.nanos)
}

// -------------------------------------------------------------------

// TokenMapping

// optional string token = 1;
inline bool TokenMapping::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TokenMapping::has_token() const {
  return _internal_has_token();
}
inline void TokenMapping::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TokenMapping::token() const {
  // @@protoc_insertion_point(field_get:usage_stats.TokenMapping.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenMapping::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:usage_stats.TokenMapping.token)
}
inline std::string* TokenMapping::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:usage_stats.TokenMapping.token)
  return _s;
}
inline const std::string& TokenMapping::_internal_token() const {
  return token_.Get();
}
inline void TokenMapping::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenMapping::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenMapping::release_token() {
  // @@protoc_insertion_point(field_release:usage_stats.TokenMapping.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TokenMapping::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:usage_stats.TokenMapping.token)
}

// optional string fqdn = 2;
inline bool TokenMapping::_internal_has_fqdn() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TokenMapping::has_fqdn() const {
  return _internal_has_fqdn();
}
inline void TokenMapping::clear_fqdn() {
  fqdn_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TokenMapping::fqdn() const {
  // @@protoc_insertion_point(field_get:usage_stats.TokenMapping.fqdn)
  return _internal_fqdn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenMapping::set_fqdn(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 fqdn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:usage_stats.TokenMapping.fqdn)
}
inline std::string* TokenMapping::mutable_fqdn() {
  std::string* _s = _internal_mutable_fqdn();
  // @@protoc_insertion_point(field_mutable:usage_stats.TokenMapping.fqdn)
  return _s;
}
inline const std::string& TokenMapping::_internal_fqdn() const {
  return fqdn_.Get();
}
inline void TokenMapping::_internal_set_fqdn(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fqdn_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenMapping::_internal_mutable_fqdn() {
  _has_bits_[0] |= 0x00000002u;
  return fqdn_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenMapping::release_fqdn() {
  // @@protoc_insertion_point(field_release:usage_stats.TokenMapping.fqdn)
  if (!_internal_has_fqdn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = fqdn_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fqdn_.IsDefault()) {
    fqdn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TokenMapping::set_allocated_fqdn(std::string* fqdn) {
  if (fqdn != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fqdn_.SetAllocated(fqdn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fqdn_.IsDefault()) {
    fqdn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:usage_stats.TokenMapping.fqdn)
}

// -------------------------------------------------------------------

// Suspension

// optional string fqdn = 1;
inline bool Suspension::_internal_has_fqdn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Suspension::has_fqdn() const {
  return _internal_has_fqdn();
}
inline void Suspension::clear_fqdn() {
  fqdn_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Suspension::fqdn() const {
  // @@protoc_insertion_point(field_get:usage_stats.Suspension.fqdn)
  return _internal_fqdn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Suspension::set_fqdn(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 fqdn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:usage_stats.Suspension.fqdn)
}
inline std::string* Suspension::mutable_fqdn() {
  std::string* _s = _internal_mutable_fqdn();
  // @@protoc_insertion_point(field_mutable:usage_stats.Suspension.fqdn)
  return _s;
}
inline const std::string& Suspension::_internal_fqdn() const {
  return fqdn_.Get();
}
inline void Suspension::_internal_set_fqdn(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fqdn_.Set(value, GetArenaForAllocation());
}
inline std::string* Suspension::_internal_mutable_fqdn() {
  _has_bits_[0] |= 0x00000001u;
  return fqdn_.Mutable(GetArenaForAllocation());
}
inline std::string* Suspension::release_fqdn() {
  // @@protoc_insertion_point(field_release:usage_stats.Suspension.fqdn)
  if (!_internal_has_fqdn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = fqdn_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fqdn_.IsDefault()) {
    fqdn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Suspension::set_allocated_fqdn(std::string* fqdn) {
  if (fqdn != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fqdn_.SetAllocated(fqdn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fqdn_.IsDefault()) {
    fqdn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:usage_stats.Suspension.fqdn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace usage_stats

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::usage_stats::WebsiteEvent_EventType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_website_5fevent_2eproto
