// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: delta_file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_delta_5ffile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_delta_5ffile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_delta_5ffile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_delta_5ffile_2eproto {
  static const uint32_t offsets[];
};
namespace history_report {
class DeltaFileEntry;
struct DeltaFileEntryDefaultTypeInternal;
extern DeltaFileEntryDefaultTypeInternal _DeltaFileEntry_default_instance_;
class UsageReport;
struct UsageReportDefaultTypeInternal;
extern UsageReportDefaultTypeInternal _UsageReport_default_instance_;
}  // namespace history_report
PROTOBUF_NAMESPACE_OPEN
template<> ::history_report::DeltaFileEntry* Arena::CreateMaybeMessage<::history_report::DeltaFileEntry>(Arena*);
template<> ::history_report::UsageReport* Arena::CreateMaybeMessage<::history_report::UsageReport>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace history_report {

// ===================================================================

class DeltaFileEntry final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:history_report.DeltaFileEntry) */ {
 public:
  inline DeltaFileEntry() : DeltaFileEntry(nullptr) {}
  ~DeltaFileEntry() override;
  explicit PROTOBUF_CONSTEXPR DeltaFileEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeltaFileEntry(const DeltaFileEntry& from);
  DeltaFileEntry(DeltaFileEntry&& from) noexcept
    : DeltaFileEntry() {
    *this = ::std::move(from);
  }

  inline DeltaFileEntry& operator=(const DeltaFileEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaFileEntry& operator=(DeltaFileEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeltaFileEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeltaFileEntry* internal_default_instance() {
    return reinterpret_cast<const DeltaFileEntry*>(
               &_DeltaFileEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeltaFileEntry& a, DeltaFileEntry& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DeltaFileEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeltaFileEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeltaFileEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeltaFileEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DeltaFileEntry& from);
  void MergeFrom(const DeltaFileEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeltaFileEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "history_report.DeltaFileEntry";
  }
  protected:
  explicit DeltaFileEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kUrlFieldNumber = 3,
    kSeqNoFieldNumber = 1,
  };
  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional int64 seq_no = 1;
  bool has_seq_no() const;
  private:
  bool _internal_has_seq_no() const;
  public:
  void clear_seq_no();
  int64_t seq_no() const;
  void set_seq_no(int64_t value);
  private:
  int64_t _internal_seq_no() const;
  void _internal_set_seq_no(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:history_report.DeltaFileEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int64_t seq_no_;
  friend struct ::TableStruct_delta_5ffile_2eproto;
};
// -------------------------------------------------------------------

class UsageReport final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:history_report.UsageReport) */ {
 public:
  inline UsageReport() : UsageReport(nullptr) {}
  ~UsageReport() override;
  explicit PROTOBUF_CONSTEXPR UsageReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsageReport(const UsageReport& from);
  UsageReport(UsageReport&& from) noexcept
    : UsageReport() {
    *this = ::std::move(from);
  }

  inline UsageReport& operator=(const UsageReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsageReport& operator=(UsageReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UsageReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsageReport* internal_default_instance() {
    return reinterpret_cast<const UsageReport*>(
               &_UsageReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsageReport& a, UsageReport& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UsageReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsageReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UsageReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UsageReport>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UsageReport& from);
  void MergeFrom(const UsageReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UsageReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "history_report.UsageReport";
  }
  protected:
  explicit UsageReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimestampMsFieldNumber = 2,
    kTypedVisitFieldNumber = 3,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional int64 timestamp_ms = 2;
  bool has_timestamp_ms() const;
  private:
  bool _internal_has_timestamp_ms() const;
  public:
  void clear_timestamp_ms();
  int64_t timestamp_ms() const;
  void set_timestamp_ms(int64_t value);
  private:
  int64_t _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(int64_t value);
  public:

  // optional bool typed_visit = 3;
  bool has_typed_visit() const;
  private:
  bool _internal_has_typed_visit() const;
  public:
  void clear_typed_visit();
  bool typed_visit() const;
  void set_typed_visit(bool value);
  private:
  bool _internal_typed_visit() const;
  void _internal_set_typed_visit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:history_report.UsageReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int64_t timestamp_ms_;
  bool typed_visit_;
  friend struct ::TableStruct_delta_5ffile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeltaFileEntry

// optional int64 seq_no = 1;
inline bool DeltaFileEntry::_internal_has_seq_no() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeltaFileEntry::has_seq_no() const {
  return _internal_has_seq_no();
}
inline void DeltaFileEntry::clear_seq_no() {
  seq_no_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t DeltaFileEntry::_internal_seq_no() const {
  return seq_no_;
}
inline int64_t DeltaFileEntry::seq_no() const {
  // @@protoc_insertion_point(field_get:history_report.DeltaFileEntry.seq_no)
  return _internal_seq_no();
}
inline void DeltaFileEntry::_internal_set_seq_no(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  seq_no_ = value;
}
inline void DeltaFileEntry::set_seq_no(int64_t value) {
  _internal_set_seq_no(value);
  // @@protoc_insertion_point(field_set:history_report.DeltaFileEntry.seq_no)
}

// optional string type = 2;
inline bool DeltaFileEntry::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeltaFileEntry::has_type() const {
  return _internal_has_type();
}
inline void DeltaFileEntry::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeltaFileEntry::type() const {
  // @@protoc_insertion_point(field_get:history_report.DeltaFileEntry.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeltaFileEntry::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:history_report.DeltaFileEntry.type)
}
inline std::string* DeltaFileEntry::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:history_report.DeltaFileEntry.type)
  return _s;
}
inline const std::string& DeltaFileEntry::_internal_type() const {
  return type_.Get();
}
inline void DeltaFileEntry::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* DeltaFileEntry::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* DeltaFileEntry::release_type() {
  // @@protoc_insertion_point(field_release:history_report.DeltaFileEntry.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DeltaFileEntry::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:history_report.DeltaFileEntry.type)
}

// optional string url = 3;
inline bool DeltaFileEntry::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeltaFileEntry::has_url() const {
  return _internal_has_url();
}
inline void DeltaFileEntry::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeltaFileEntry::url() const {
  // @@protoc_insertion_point(field_get:history_report.DeltaFileEntry.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeltaFileEntry::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:history_report.DeltaFileEntry.url)
}
inline std::string* DeltaFileEntry::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:history_report.DeltaFileEntry.url)
  return _s;
}
inline const std::string& DeltaFileEntry::_internal_url() const {
  return url_.Get();
}
inline void DeltaFileEntry::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* DeltaFileEntry::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* DeltaFileEntry::release_url() {
  // @@protoc_insertion_point(field_release:history_report.DeltaFileEntry.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DeltaFileEntry::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:history_report.DeltaFileEntry.url)
}

// -------------------------------------------------------------------

// UsageReport

// optional string id = 1;
inline bool UsageReport::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UsageReport::has_id() const {
  return _internal_has_id();
}
inline void UsageReport::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UsageReport::id() const {
  // @@protoc_insertion_point(field_get:history_report.UsageReport.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsageReport::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:history_report.UsageReport.id)
}
inline std::string* UsageReport::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:history_report.UsageReport.id)
  return _s;
}
inline const std::string& UsageReport::_internal_id() const {
  return id_.Get();
}
inline void UsageReport::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* UsageReport::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* UsageReport::release_id() {
  // @@protoc_insertion_point(field_release:history_report.UsageReport.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UsageReport::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:history_report.UsageReport.id)
}

// optional int64 timestamp_ms = 2;
inline bool UsageReport::_internal_has_timestamp_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsageReport::has_timestamp_ms() const {
  return _internal_has_timestamp_ms();
}
inline void UsageReport::clear_timestamp_ms() {
  timestamp_ms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UsageReport::_internal_timestamp_ms() const {
  return timestamp_ms_;
}
inline int64_t UsageReport::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:history_report.UsageReport.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void UsageReport::_internal_set_timestamp_ms(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_ = value;
}
inline void UsageReport::set_timestamp_ms(int64_t value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:history_report.UsageReport.timestamp_ms)
}

// optional bool typed_visit = 3;
inline bool UsageReport::_internal_has_typed_visit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UsageReport::has_typed_visit() const {
  return _internal_has_typed_visit();
}
inline void UsageReport::clear_typed_visit() {
  typed_visit_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool UsageReport::_internal_typed_visit() const {
  return typed_visit_;
}
inline bool UsageReport::typed_visit() const {
  // @@protoc_insertion_point(field_get:history_report.UsageReport.typed_visit)
  return _internal_typed_visit();
}
inline void UsageReport::_internal_set_typed_visit(bool value) {
  _has_bits_[0] |= 0x00000004u;
  typed_visit_ = value;
}
inline void UsageReport::set_typed_visit(bool value) {
  _internal_set_typed_visit(value);
  // @@protoc_insertion_point(field_set:history_report.UsageReport.typed_visit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace history_report

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_delta_5ffile_2eproto
