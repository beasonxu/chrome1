// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/download/DownloadDialogBridge

#ifndef org_chromium_chrome_browser_download_DownloadDialogBridge_JNI
#define org_chromium_chrome_browser_download_DownloadDialogBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_download_DownloadDialogBridge[];
const char kClassPath_org_chromium_chrome_browser_download_DownloadDialogBridge[] =
    "org/chromium/chrome/browser/download/DownloadDialogBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_download_DownloadDialogBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_download_DownloadDialogBridge_clazz_defined
#define org_chromium_chrome_browser_download_DownloadDialogBridge_clazz_defined
inline jclass org_chromium_chrome_browser_download_DownloadDialogBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_download_DownloadDialogBridge,
      &g_org_chromium_chrome_browser_download_DownloadDialogBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_Molx_1ess(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadDialogBridge,
    jobject caller,
    jstring returnedPath,
    jboolean onWifi,
    jlong startTime) {
  DownloadDialogBridge* native =
      reinterpret_cast<DownloadDialogBridge*>(nativeDownloadDialogBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnComplete");
  return native->OnComplete(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, returnedPath), onWifi, startTime);
}

JNI_GENERATOR_EXPORT void Java_J_N_M9BtabC7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadDialogBridge,
    jobject caller) {
  DownloadDialogBridge* native =
      reinterpret_cast<DownloadDialogBridge*>(nativeDownloadDialogBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnCanceled");
  return native->OnCanceled(env, base::android::JavaParamRef<jobject>(env, caller));
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_DownloadDialogBridge_GetDownloadDefaultDirectory(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_M4fixBWD(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_DownloadDialogBridge_GetDownloadDefaultDirectory(env).Release();
}

static void JNI_DownloadDialogBridge_SetDownloadAndSaveFileDefaultDirectory(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& directory);

JNI_GENERATOR_EXPORT void Java_J_N_MQzHQbrF(
    JNIEnv* env,
    jclass jcaller,
    jstring directory) {
  return JNI_DownloadDialogBridge_SetDownloadAndSaveFileDefaultDirectory(env,
      base::android::JavaParamRef<jstring>(env, directory));
}

static jlong JNI_DownloadDialogBridge_GetDownloadLaterMinFileSize(JNIEnv* env);

JNI_GENERATOR_EXPORT jlong Java_J_N_Mjv8af19(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_DownloadDialogBridge_GetDownloadLaterMinFileSize(env);
}

static jboolean JNI_DownloadDialogBridge_ShouldShowDateTimePicker(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MHUAsaZ9(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_DownloadDialogBridge_ShouldShowDateTimePicker(env);
}

static jboolean JNI_DownloadDialogBridge_IsLocationDialogManaged(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MGOzH4qx(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_DownloadDialogBridge_IsLocationDialogManaged(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadDialogBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_DownloadDialogBridge_create(JNIEnv* env,
    jlong nativeDownloadDialogBridge) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadDialogBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadDialogBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/download/DownloadDialogBridge;",
          &g_org_chromium_chrome_browser_download_DownloadDialogBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeDownloadDialogBridge);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadDialogBridge_destroy(nullptr);
static void Java_DownloadDialogBridge_destroy(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadDialogBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DownloadDialogBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_chrome_browser_download_DownloadDialogBridge_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadDialogBridge_showDialog(nullptr);
static void Java_DownloadDialogBridge_showDialog(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& windowAndroid,
    jlong totalBytes,
    JniIntWrapper connectionType,
    JniIntWrapper dialogType,
    const base::android::JavaRef<jstring>& suggestedPath,
    jboolean supportsLaterDialog,
    jboolean isIncognito) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadDialogBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DownloadDialogBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "showDialog",
          "(Lorg/chromium/ui/base/WindowAndroid;JIILjava/lang/String;ZZ)V",
          &g_org_chromium_chrome_browser_download_DownloadDialogBridge_showDialog);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, windowAndroid.obj(), totalBytes, as_jint(connectionType),
              as_jint(dialogType), suggestedPath.obj(), supportsLaterDialog, isIncognito);
}

#endif  // org_chromium_chrome_browser_download_DownloadDialogBridge_JNI
