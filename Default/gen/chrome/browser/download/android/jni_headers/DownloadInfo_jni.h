// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/download/DownloadInfo

#ifndef org_chromium_chrome_browser_download_DownloadInfo_JNI
#define org_chromium_chrome_browser_download_DownloadInfo_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_download_DownloadInfo[];
const char kClassPath_org_chromium_chrome_browser_download_DownloadInfo[] =
    "org/chromium/chrome/browser/download/DownloadInfo";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_download_DownloadInfo_clazz(nullptr);
#ifndef org_chromium_chrome_browser_download_DownloadInfo_clazz_defined
#define org_chromium_chrome_browser_download_DownloadInfo_clazz_defined
inline jclass org_chromium_chrome_browser_download_DownloadInfo_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_download_DownloadInfo,
      &g_org_chromium_chrome_browser_download_DownloadInfo_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadInfo_createDownloadInfo(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_DownloadInfo_createDownloadInfo(JNIEnv* env,
    const base::android::JavaRef<jstring>& downloadGuid,
    const base::android::JavaRef<jstring>& fileName,
    const base::android::JavaRef<jstring>& filePath,
    const base::android::JavaRef<jobject>& url,
    const base::android::JavaRef<jstring>& mimeType,
    jlong bytesReceived,
    jlong bytesTotalSize,
    const base::android::JavaRef<jobject>& otrProfileId,
    JniIntWrapper state,
    JniIntWrapper percentCompleted,
    jboolean isPaused,
    jboolean hasUserGesture,
    jboolean isResumable,
    jboolean isParallelDownload,
    const base::android::JavaRef<jobject>& originalUrl,
    const base::android::JavaRef<jobject>& referrerUrl,
    jlong timeRemainingInMs,
    jlong lastAccessTime,
    jboolean isDangerous,
    JniIntWrapper failState,
    const base::android::JavaRef<jobject>& schedule) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadInfo_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadInfo_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createDownloadInfo",
"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/chromium/url/GURL;Ljava/lang/String;JJLorg/chromium/chrome/browser/profiles/OTRProfileID;IIZZZZLorg/chromium/url/GURL;Lorg/chromium/url/GURL;JJZILorg/chromium/components/offline_items_collection/OfflineItemSchedule;)Lorg/chromium/chrome/browser/download/DownloadInfo;",
          &g_org_chromium_chrome_browser_download_DownloadInfo_createDownloadInfo);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, downloadGuid.obj(), fileName.obj(), filePath.obj(),
              url.obj(), mimeType.obj(), bytesReceived, bytesTotalSize, otrProfileId.obj(),
              as_jint(state), as_jint(percentCompleted), isPaused, hasUserGesture, isResumable,
              isParallelDownload, originalUrl.obj(), referrerUrl.obj(), timeRemainingInMs,
              lastAccessTime, isDangerous, as_jint(failState), schedule.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_chromium_chrome_browser_download_DownloadInfo_JNI
