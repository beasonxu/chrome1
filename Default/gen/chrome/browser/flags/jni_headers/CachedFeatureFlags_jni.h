// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/flags/CachedFeatureFlags

#ifndef org_chromium_chrome_browser_flags_CachedFeatureFlags_JNI
#define org_chromium_chrome_browser_flags_CachedFeatureFlags_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_flags_CachedFeatureFlags[];
const char kClassPath_org_chromium_chrome_browser_flags_CachedFeatureFlags[] =
    "org/chromium/chrome/browser/flags/CachedFeatureFlags";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_flags_CachedFeatureFlags_clazz(nullptr);
#ifndef org_chromium_chrome_browser_flags_CachedFeatureFlags_clazz_defined
#define org_chromium_chrome_browser_flags_CachedFeatureFlags_clazz_defined
inline jclass org_chromium_chrome_browser_flags_CachedFeatureFlags_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_flags_CachedFeatureFlags,
      &g_org_chromium_chrome_browser_flags_CachedFeatureFlags_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jboolean JNI_CachedFeatureFlags_IsNetworkServiceWarmUpEnabled(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MV4Nj_00024t6(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_CachedFeatureFlags_IsNetworkServiceWarmUpEnabled(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_flags_CachedFeatureFlags_isEnabled(nullptr);
static jboolean Java_CachedFeatureFlags_isEnabled(JNIEnv* env, const
    base::android::JavaRef<jstring>& featureName,
    jboolean defaultValue) {
  jclass clazz = org_chromium_chrome_browser_flags_CachedFeatureFlags_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_flags_CachedFeatureFlags_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isEnabled",
          "(Ljava/lang/String;Z)Z",
          &g_org_chromium_chrome_browser_flags_CachedFeatureFlags_isEnabled);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, featureName.obj(), defaultValue);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_flags_CachedFeatureFlags_getReachedCodeProfilerTrialGroup(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_CachedFeatureFlags_getReachedCodeProfilerTrialGroup(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_flags_CachedFeatureFlags_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_flags_CachedFeatureFlags_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getReachedCodeProfilerTrialGroup",
          "()Ljava/lang/String;",
          &g_org_chromium_chrome_browser_flags_CachedFeatureFlags_getReachedCodeProfilerTrialGroup);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

#endif  // org_chromium_chrome_browser_flags_CachedFeatureFlags_JNI
