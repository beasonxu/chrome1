// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer_connection_messages.proto

#include "peer_connection_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chrome_browser_sharing {
PROTOBUF_CONSTEXPR PeerConnectionOfferMessage::PeerConnectionOfferMessage(
    ::_pbi::ConstantInitialized)
  : sdp_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PeerConnectionOfferMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerConnectionOfferMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerConnectionOfferMessageDefaultTypeInternal() {}
  union {
    PeerConnectionOfferMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerConnectionOfferMessageDefaultTypeInternal _PeerConnectionOfferMessage_default_instance_;
PROTOBUF_CONSTEXPR PeerConnectionAnswerMessage::PeerConnectionAnswerMessage(
    ::_pbi::ConstantInitialized)
  : sdp_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PeerConnectionAnswerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerConnectionAnswerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerConnectionAnswerMessageDefaultTypeInternal() {}
  union {
    PeerConnectionAnswerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerConnectionAnswerMessageDefaultTypeInternal _PeerConnectionAnswerMessage_default_instance_;
PROTOBUF_CONSTEXPR PeerConnectionIceCandidate::PeerConnectionIceCandidate(
    ::_pbi::ConstantInitialized)
  : candidate_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sdp_mid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sdp_mline_index_(0){}
struct PeerConnectionIceCandidateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerConnectionIceCandidateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerConnectionIceCandidateDefaultTypeInternal() {}
  union {
    PeerConnectionIceCandidate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerConnectionIceCandidateDefaultTypeInternal _PeerConnectionIceCandidate_default_instance_;
PROTOBUF_CONSTEXPR PeerConnectionIceCandidatesMessage::PeerConnectionIceCandidatesMessage(
    ::_pbi::ConstantInitialized)
  : ice_candidates_(){}
struct PeerConnectionIceCandidatesMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerConnectionIceCandidatesMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerConnectionIceCandidatesMessageDefaultTypeInternal() {}
  union {
    PeerConnectionIceCandidatesMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerConnectionIceCandidatesMessageDefaultTypeInternal _PeerConnectionIceCandidatesMessage_default_instance_;
}  // namespace chrome_browser_sharing
namespace chrome_browser_sharing {

// ===================================================================

class PeerConnectionOfferMessage::_Internal {
 public:
};

PeerConnectionOfferMessage::PeerConnectionOfferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.PeerConnectionOfferMessage)
}
PeerConnectionOfferMessage::PeerConnectionOfferMessage(const PeerConnectionOfferMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdp().empty()) {
    sdp_.Set(from._internal_sdp(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.PeerConnectionOfferMessage)
}

inline void PeerConnectionOfferMessage::SharedCtor() {
sdp_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sdp_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeerConnectionOfferMessage::~PeerConnectionOfferMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.PeerConnectionOfferMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerConnectionOfferMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sdp_.Destroy();
}

void PeerConnectionOfferMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeerConnectionOfferMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.PeerConnectionOfferMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sdp_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* PeerConnectionOfferMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sdp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sdp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerConnectionOfferMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.PeerConnectionOfferMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sdp = 1;
  if (!this->_internal_sdp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdp().data(), static_cast<int>(this->_internal_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.PeerConnectionOfferMessage.sdp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sdp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.PeerConnectionOfferMessage)
  return target;
}

size_t PeerConnectionOfferMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.PeerConnectionOfferMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdp = 1;
  if (!this->_internal_sdp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConnectionOfferMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PeerConnectionOfferMessage*>(
      &from));
}

void PeerConnectionOfferMessage::MergeFrom(const PeerConnectionOfferMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.PeerConnectionOfferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sdp().empty()) {
    _internal_set_sdp(from._internal_sdp());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PeerConnectionOfferMessage::CopyFrom(const PeerConnectionOfferMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.PeerConnectionOfferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConnectionOfferMessage::IsInitialized() const {
  return true;
}

void PeerConnectionOfferMessage::InternalSwap(PeerConnectionOfferMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sdp_, lhs_arena,
      &other->sdp_, rhs_arena
  );
}

std::string PeerConnectionOfferMessage::GetTypeName() const {
  return "chrome_browser_sharing.PeerConnectionOfferMessage";
}


// ===================================================================

class PeerConnectionAnswerMessage::_Internal {
 public:
};

PeerConnectionAnswerMessage::PeerConnectionAnswerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.PeerConnectionAnswerMessage)
}
PeerConnectionAnswerMessage::PeerConnectionAnswerMessage(const PeerConnectionAnswerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdp().empty()) {
    sdp_.Set(from._internal_sdp(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.PeerConnectionAnswerMessage)
}

inline void PeerConnectionAnswerMessage::SharedCtor() {
sdp_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sdp_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeerConnectionAnswerMessage::~PeerConnectionAnswerMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.PeerConnectionAnswerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerConnectionAnswerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sdp_.Destroy();
}

void PeerConnectionAnswerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeerConnectionAnswerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.PeerConnectionAnswerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sdp_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* PeerConnectionAnswerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sdp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sdp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerConnectionAnswerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.PeerConnectionAnswerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sdp = 1;
  if (!this->_internal_sdp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdp().data(), static_cast<int>(this->_internal_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.PeerConnectionAnswerMessage.sdp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sdp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.PeerConnectionAnswerMessage)
  return target;
}

size_t PeerConnectionAnswerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.PeerConnectionAnswerMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdp = 1;
  if (!this->_internal_sdp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConnectionAnswerMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PeerConnectionAnswerMessage*>(
      &from));
}

void PeerConnectionAnswerMessage::MergeFrom(const PeerConnectionAnswerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.PeerConnectionAnswerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sdp().empty()) {
    _internal_set_sdp(from._internal_sdp());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PeerConnectionAnswerMessage::CopyFrom(const PeerConnectionAnswerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.PeerConnectionAnswerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConnectionAnswerMessage::IsInitialized() const {
  return true;
}

void PeerConnectionAnswerMessage::InternalSwap(PeerConnectionAnswerMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sdp_, lhs_arena,
      &other->sdp_, rhs_arena
  );
}

std::string PeerConnectionAnswerMessage::GetTypeName() const {
  return "chrome_browser_sharing.PeerConnectionAnswerMessage";
}


// ===================================================================

class PeerConnectionIceCandidate::_Internal {
 public:
};

PeerConnectionIceCandidate::PeerConnectionIceCandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.PeerConnectionIceCandidate)
}
PeerConnectionIceCandidate::PeerConnectionIceCandidate(const PeerConnectionIceCandidate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  candidate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    candidate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_candidate().empty()) {
    candidate_.Set(from._internal_candidate(), 
      GetArenaForAllocation());
  }
  sdp_mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sdp_mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdp_mid().empty()) {
    sdp_mid_.Set(from._internal_sdp_mid(), 
      GetArenaForAllocation());
  }
  sdp_mline_index_ = from.sdp_mline_index_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.PeerConnectionIceCandidate)
}

inline void PeerConnectionIceCandidate::SharedCtor() {
candidate_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  candidate_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sdp_mid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sdp_mid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sdp_mline_index_ = 0;
}

PeerConnectionIceCandidate::~PeerConnectionIceCandidate() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.PeerConnectionIceCandidate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerConnectionIceCandidate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  candidate_.Destroy();
  sdp_mid_.Destroy();
}

void PeerConnectionIceCandidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeerConnectionIceCandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.PeerConnectionIceCandidate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.ClearToEmpty();
  sdp_mid_.ClearToEmpty();
  sdp_mline_index_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* PeerConnectionIceCandidate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_candidate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string sdp_mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sdp_mid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // int32 sdp_mline_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sdp_mline_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerConnectionIceCandidate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.PeerConnectionIceCandidate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string candidate = 1;
  if (!this->_internal_candidate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidate().data(), static_cast<int>(this->_internal_candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.PeerConnectionIceCandidate.candidate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_candidate(), target);
  }

  // string sdp_mid = 2;
  if (!this->_internal_sdp_mid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdp_mid().data(), static_cast<int>(this->_internal_sdp_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.PeerConnectionIceCandidate.sdp_mid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sdp_mid(), target);
  }

  // int32 sdp_mline_index = 3;
  if (this->_internal_sdp_mline_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sdp_mline_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.PeerConnectionIceCandidate)
  return target;
}

size_t PeerConnectionIceCandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.PeerConnectionIceCandidate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidate = 1;
  if (!this->_internal_candidate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidate());
  }

  // string sdp_mid = 2;
  if (!this->_internal_sdp_mid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp_mid());
  }

  // int32 sdp_mline_index = 3;
  if (this->_internal_sdp_mline_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sdp_mline_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConnectionIceCandidate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PeerConnectionIceCandidate*>(
      &from));
}

void PeerConnectionIceCandidate::MergeFrom(const PeerConnectionIceCandidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.PeerConnectionIceCandidate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_candidate().empty()) {
    _internal_set_candidate(from._internal_candidate());
  }
  if (!from._internal_sdp_mid().empty()) {
    _internal_set_sdp_mid(from._internal_sdp_mid());
  }
  if (from._internal_sdp_mline_index() != 0) {
    _internal_set_sdp_mline_index(from._internal_sdp_mline_index());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PeerConnectionIceCandidate::CopyFrom(const PeerConnectionIceCandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.PeerConnectionIceCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConnectionIceCandidate::IsInitialized() const {
  return true;
}

void PeerConnectionIceCandidate::InternalSwap(PeerConnectionIceCandidate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &candidate_, lhs_arena,
      &other->candidate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sdp_mid_, lhs_arena,
      &other->sdp_mid_, rhs_arena
  );
  swap(sdp_mline_index_, other->sdp_mline_index_);
}

std::string PeerConnectionIceCandidate::GetTypeName() const {
  return "chrome_browser_sharing.PeerConnectionIceCandidate";
}


// ===================================================================

class PeerConnectionIceCandidatesMessage::_Internal {
 public:
};

PeerConnectionIceCandidatesMessage::PeerConnectionIceCandidatesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  ice_candidates_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
}
PeerConnectionIceCandidatesMessage::PeerConnectionIceCandidatesMessage(const PeerConnectionIceCandidatesMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      ice_candidates_(from.ice_candidates_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
}

inline void PeerConnectionIceCandidatesMessage::SharedCtor() {
}

PeerConnectionIceCandidatesMessage::~PeerConnectionIceCandidatesMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerConnectionIceCandidatesMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PeerConnectionIceCandidatesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeerConnectionIceCandidatesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ice_candidates_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PeerConnectionIceCandidatesMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .chrome_browser_sharing.PeerConnectionIceCandidate ice_candidates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ice_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerConnectionIceCandidatesMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chrome_browser_sharing.PeerConnectionIceCandidate ice_candidates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ice_candidates_size()); i < n; i++) {
    const auto& repfield = this->_internal_ice_candidates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  return target;
}

size_t PeerConnectionIceCandidatesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chrome_browser_sharing.PeerConnectionIceCandidate ice_candidates = 1;
  total_size += 1UL * this->_internal_ice_candidates_size();
  for (const auto& msg : this->ice_candidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConnectionIceCandidatesMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PeerConnectionIceCandidatesMessage*>(
      &from));
}

void PeerConnectionIceCandidatesMessage::MergeFrom(const PeerConnectionIceCandidatesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ice_candidates_.MergeFrom(from.ice_candidates_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PeerConnectionIceCandidatesMessage::CopyFrom(const PeerConnectionIceCandidatesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConnectionIceCandidatesMessage::IsInitialized() const {
  return true;
}

void PeerConnectionIceCandidatesMessage::InternalSwap(PeerConnectionIceCandidatesMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ice_candidates_.InternalSwap(&other->ice_candidates_);
}

std::string PeerConnectionIceCandidatesMessage::GetTypeName() const {
  return "chrome_browser_sharing.PeerConnectionIceCandidatesMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_sharing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::PeerConnectionOfferMessage*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::PeerConnectionOfferMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::PeerConnectionOfferMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::PeerConnectionAnswerMessage*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::PeerConnectionAnswerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::PeerConnectionAnswerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::PeerConnectionIceCandidate*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::PeerConnectionIceCandidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::PeerConnectionIceCandidate >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
