// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: budget.proto

#include "budget.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace budget_service {
PROTOBUF_CONSTEXPR Budget::Budget(
    ::_pbi::ConstantInitialized)
  : budget_()
  , engagement_last_updated_(int64_t{0}){}
struct BudgetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BudgetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BudgetDefaultTypeInternal() {}
  union {
    Budget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BudgetDefaultTypeInternal _Budget_default_instance_;
PROTOBUF_CONSTEXPR BudgetChunk::BudgetChunk(
    ::_pbi::ConstantInitialized)
  : amount_(0)
  , expiration_(int64_t{0}){}
struct BudgetChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BudgetChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BudgetChunkDefaultTypeInternal() {}
  union {
    BudgetChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BudgetChunkDefaultTypeInternal _BudgetChunk_default_instance_;
}  // namespace budget_service
namespace budget_service {

// ===================================================================

class Budget::_Internal {
 public:
  using HasBits = decltype(std::declval<Budget>()._has_bits_);
  static void set_has_engagement_last_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Budget::Budget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  budget_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:budget_service.Budget)
}
Budget::Budget(const Budget& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      budget_(from.budget_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  engagement_last_updated_ = from.engagement_last_updated_;
  // @@protoc_insertion_point(copy_constructor:budget_service.Budget)
}

inline void Budget::SharedCtor() {
engagement_last_updated_ = int64_t{0};
}

Budget::~Budget() {
  // @@protoc_insertion_point(destructor:budget_service.Budget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Budget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Budget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Budget::Clear() {
// @@protoc_insertion_point(message_clear_start:budget_service.Budget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  budget_.Clear();
  engagement_last_updated_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Budget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .budget_service.BudgetChunk budget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_budget(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 engagement_last_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_engagement_last_updated(&has_bits);
          engagement_last_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Budget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:budget_service.Budget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .budget_service.BudgetChunk budget = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_budget_size()); i < n; i++) {
    const auto& repfield = this->_internal_budget(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 engagement_last_updated = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_engagement_last_updated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:budget_service.Budget)
  return target;
}

size_t Budget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:budget_service.Budget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .budget_service.BudgetChunk budget = 1;
  total_size += 1UL * this->_internal_budget_size();
  for (const auto& msg : this->budget_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 engagement_last_updated = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_engagement_last_updated());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Budget::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Budget*>(
      &from));
}

void Budget::MergeFrom(const Budget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:budget_service.Budget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  budget_.MergeFrom(from.budget_);
  if (from._internal_has_engagement_last_updated()) {
    _internal_set_engagement_last_updated(from._internal_engagement_last_updated());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Budget::CopyFrom(const Budget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:budget_service.Budget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Budget::IsInitialized() const {
  return true;
}

void Budget::InternalSwap(Budget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  budget_.InternalSwap(&other->budget_);
  swap(engagement_last_updated_, other->engagement_last_updated_);
}

std::string Budget::GetTypeName() const {
  return "budget_service.Budget";
}


// ===================================================================

class BudgetChunk::_Internal {
 public:
  using HasBits = decltype(std::declval<BudgetChunk>()._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BudgetChunk::BudgetChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:budget_service.BudgetChunk)
}
BudgetChunk::BudgetChunk(const BudgetChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(expiration_));
  // @@protoc_insertion_point(copy_constructor:budget_service.BudgetChunk)
}

inline void BudgetChunk::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiration_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(expiration_));
}

BudgetChunk::~BudgetChunk() {
  // @@protoc_insertion_point(destructor:budget_service.BudgetChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BudgetChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BudgetChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BudgetChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:budget_service.BudgetChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(expiration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BudgetChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int64 expiration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_expiration(&has_bits);
          expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BudgetChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:budget_service.BudgetChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_amount(), target);
  }

  // optional int64 expiration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_expiration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:budget_service.BudgetChunk)
  return target;
}

size_t BudgetChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:budget_service.BudgetChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double amount = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int64 expiration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expiration());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BudgetChunk::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BudgetChunk*>(
      &from));
}

void BudgetChunk::MergeFrom(const BudgetChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:budget_service.BudgetChunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000002u) {
      expiration_ = from.expiration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BudgetChunk::CopyFrom(const BudgetChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:budget_service.BudgetChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BudgetChunk::IsInitialized() const {
  return true;
}

void BudgetChunk::InternalSwap(BudgetChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BudgetChunk, expiration_)
      + sizeof(BudgetChunk::expiration_)
      - PROTOBUF_FIELD_OFFSET(BudgetChunk, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

std::string BudgetChunk::GetTypeName() const {
  return "budget_service.BudgetChunk";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace budget_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::budget_service::Budget*
Arena::CreateMaybeMessage< ::budget_service::Budget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::budget_service::Budget >(arena);
}
template<> PROTOBUF_NOINLINE ::budget_service::BudgetChunk*
Arena::CreateMaybeMessage< ::budget_service::BudgetChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::budget_service::BudgetChunk >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
