// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: impression.proto

#include "impression.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace notifications {
namespace proto {
PROTOBUF_CONSTEXPR Impression_ImpressionMapping::Impression_ImpressionMapping(
    ::_pbi::ConstantInitialized)
  : user_feedback_(0)

  , impression_result_(0)
{}
struct Impression_ImpressionMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Impression_ImpressionMappingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Impression_ImpressionMappingDefaultTypeInternal() {}
  union {
    Impression_ImpressionMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Impression_ImpressionMappingDefaultTypeInternal _Impression_ImpressionMapping_default_instance_;
PROTOBUF_CONSTEXPR Impression::Impression(
    ::_pbi::ConstantInitialized)
  : impression_mapping_()
  , custom_data_()
  , guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , create_time_(int64_t{0})
  , feedback_(0)

  , impression_(0)

  , ignore_timeout_duration_(int64_t{0})
  , integrated_(false){}
struct ImpressionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImpressionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImpressionDefaultTypeInternal() {}
  union {
    Impression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImpressionDefaultTypeInternal _Impression_default_instance_;
}  // namespace proto
}  // namespace notifications
namespace notifications {
namespace proto {
bool Impression_UserFeedback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Impression_UserFeedback_strings[6] = {};

static const char Impression_UserFeedback_names[] =
  "CLICK"
  "DISMISS"
  "HELPFUL"
  "IGNORE"
  "NOT_HELPFUL"
  "NO_FEEDBACK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Impression_UserFeedback_entries[] = {
  { {Impression_UserFeedback_names + 0, 5}, 3 },
  { {Impression_UserFeedback_names + 5, 7}, 4 },
  { {Impression_UserFeedback_names + 12, 7}, 1 },
  { {Impression_UserFeedback_names + 19, 6}, 5 },
  { {Impression_UserFeedback_names + 25, 11}, 2 },
  { {Impression_UserFeedback_names + 36, 11}, 0 },
};

static const int Impression_UserFeedback_entries_by_number[] = {
  5, // 0 -> NO_FEEDBACK
  2, // 1 -> HELPFUL
  4, // 2 -> NOT_HELPFUL
  0, // 3 -> CLICK
  1, // 4 -> DISMISS
  3, // 5 -> IGNORE
};

const std::string& Impression_UserFeedback_Name(
    Impression_UserFeedback value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Impression_UserFeedback_entries,
          Impression_UserFeedback_entries_by_number,
          6, Impression_UserFeedback_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Impression_UserFeedback_entries,
      Impression_UserFeedback_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Impression_UserFeedback_strings[idx].get();
}
bool Impression_UserFeedback_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Impression_UserFeedback* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Impression_UserFeedback_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<Impression_UserFeedback>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Impression_UserFeedback Impression::NO_FEEDBACK;
constexpr Impression_UserFeedback Impression::HELPFUL;
constexpr Impression_UserFeedback Impression::NOT_HELPFUL;
constexpr Impression_UserFeedback Impression::CLICK;
constexpr Impression_UserFeedback Impression::DISMISS;
constexpr Impression_UserFeedback Impression::IGNORE;
constexpr Impression_UserFeedback Impression::UserFeedback_MIN;
constexpr Impression_UserFeedback Impression::UserFeedback_MAX;
constexpr int Impression::UserFeedback_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Impression_ImpressionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Impression_ImpressionResult_strings[4] = {};

static const char Impression_ImpressionResult_names[] =
  "INVALID"
  "NEGATIVE"
  "NEUTRAL"
  "POSITIVE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Impression_ImpressionResult_entries[] = {
  { {Impression_ImpressionResult_names + 0, 7}, 0 },
  { {Impression_ImpressionResult_names + 7, 8}, 2 },
  { {Impression_ImpressionResult_names + 15, 7}, 3 },
  { {Impression_ImpressionResult_names + 22, 8}, 1 },
};

static const int Impression_ImpressionResult_entries_by_number[] = {
  0, // 0 -> INVALID
  3, // 1 -> POSITIVE
  1, // 2 -> NEGATIVE
  2, // 3 -> NEUTRAL
};

const std::string& Impression_ImpressionResult_Name(
    Impression_ImpressionResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Impression_ImpressionResult_entries,
          Impression_ImpressionResult_entries_by_number,
          4, Impression_ImpressionResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Impression_ImpressionResult_entries,
      Impression_ImpressionResult_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Impression_ImpressionResult_strings[idx].get();
}
bool Impression_ImpressionResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Impression_ImpressionResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Impression_ImpressionResult_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Impression_ImpressionResult>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Impression_ImpressionResult Impression::INVALID;
constexpr Impression_ImpressionResult Impression::POSITIVE;
constexpr Impression_ImpressionResult Impression::NEGATIVE;
constexpr Impression_ImpressionResult Impression::NEUTRAL;
constexpr Impression_ImpressionResult Impression::ImpressionResult_MIN;
constexpr Impression_ImpressionResult Impression::ImpressionResult_MAX;
constexpr int Impression::ImpressionResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Impression_ImpressionMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<Impression_ImpressionMapping>()._has_bits_);
  static void set_has_user_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_impression_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Impression_ImpressionMapping::Impression_ImpressionMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:notifications.proto.Impression.ImpressionMapping)
}
Impression_ImpressionMapping::Impression_ImpressionMapping(const Impression_ImpressionMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_feedback_, &from.user_feedback_,
    static_cast<size_t>(reinterpret_cast<char*>(&impression_result_) -
    reinterpret_cast<char*>(&user_feedback_)) + sizeof(impression_result_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.Impression.ImpressionMapping)
}

inline void Impression_ImpressionMapping::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_feedback_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&impression_result_) -
    reinterpret_cast<char*>(&user_feedback_)) + sizeof(impression_result_));
}

Impression_ImpressionMapping::~Impression_ImpressionMapping() {
  // @@protoc_insertion_point(destructor:notifications.proto.Impression.ImpressionMapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Impression_ImpressionMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Impression_ImpressionMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Impression_ImpressionMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.Impression.ImpressionMapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_feedback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&impression_result_) -
        reinterpret_cast<char*>(&user_feedback_)) + sizeof(impression_result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Impression_ImpressionMapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .notifications.proto.Impression.UserFeedback user_feedback = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::Impression_UserFeedback_IsValid(val))) {
            _internal_set_user_feedback(static_cast<::notifications::proto::Impression_UserFeedback>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .notifications.proto.Impression.ImpressionResult impression_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::Impression_ImpressionResult_IsValid(val))) {
            _internal_set_impression_result(static_cast<::notifications::proto::Impression_ImpressionResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Impression_ImpressionMapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notifications.proto.Impression.ImpressionMapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .notifications.proto.Impression.UserFeedback user_feedback = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_user_feedback(), target);
  }

  // optional .notifications.proto.Impression.ImpressionResult impression_result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_impression_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notifications.proto.Impression.ImpressionMapping)
  return target;
}

size_t Impression_ImpressionMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.Impression.ImpressionMapping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .notifications.proto.Impression.UserFeedback user_feedback = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_user_feedback());
    }

    // optional .notifications.proto.Impression.ImpressionResult impression_result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_impression_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Impression_ImpressionMapping::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Impression_ImpressionMapping*>(
      &from));
}

void Impression_ImpressionMapping::MergeFrom(const Impression_ImpressionMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.Impression.ImpressionMapping)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_feedback_ = from.user_feedback_;
    }
    if (cached_has_bits & 0x00000002u) {
      impression_result_ = from.impression_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Impression_ImpressionMapping::CopyFrom(const Impression_ImpressionMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.Impression.ImpressionMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Impression_ImpressionMapping::IsInitialized() const {
  return true;
}

void Impression_ImpressionMapping::InternalSwap(Impression_ImpressionMapping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Impression_ImpressionMapping, impression_result_)
      + sizeof(Impression_ImpressionMapping::impression_result_)
      - PROTOBUF_FIELD_OFFSET(Impression_ImpressionMapping, user_feedback_)>(
          reinterpret_cast<char*>(&user_feedback_),
          reinterpret_cast<char*>(&other->user_feedback_));
}

std::string Impression_ImpressionMapping::GetTypeName() const {
  return "notifications.proto.Impression.ImpressionMapping";
}


// ===================================================================

class Impression::_Internal {
 public:
  using HasBits = decltype(std::declval<Impression>()._has_bits_);
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_impression(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_integrated(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_timeout_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

void Impression::clear_custom_data() {
  custom_data_.Clear();
}
Impression::Impression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  impression_mapping_(arena),
  custom_data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:notifications.proto.Impression)
}
Impression::Impression(const Impression& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      impression_mapping_(from.impression_mapping_),
      custom_data_(from.custom_data_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(from._internal_guid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&create_time_, &from.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&integrated_) -
    reinterpret_cast<char*>(&create_time_)) + sizeof(integrated_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.Impression)
}

inline void Impression::SharedCtor() {
guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&create_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&integrated_) -
    reinterpret_cast<char*>(&create_time_)) + sizeof(integrated_));
}

Impression::~Impression() {
  // @@protoc_insertion_point(destructor:notifications.proto.Impression)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Impression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.Destroy();
}

void Impression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Impression::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.Impression)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impression_mapping_.Clear();
  custom_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&create_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&integrated_) -
        reinterpret_cast<char*>(&create_time_)) + sizeof(integrated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Impression::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 create_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_create_time(&has_bits);
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .notifications.proto.Impression.UserFeedback feedback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::Impression_UserFeedback_IsValid(val))) {
            _internal_set_feedback(static_cast<::notifications::proto::Impression_UserFeedback>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .notifications.proto.Impression.ImpressionResult impression = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::Impression_ImpressionResult_IsValid(val))) {
            _internal_set_impression(static_cast<::notifications::proto::Impression_ImpressionResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool integrated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_integrated(&has_bits);
          integrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string guid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_impression_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .notifications.proto.CustomData custom_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 ignore_timeout_duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_ignore_timeout_duration(&has_bits);
          ignore_timeout_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Impression::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notifications.proto.Impression)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 create_time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_create_time(), target);
  }

  // optional .notifications.proto.Impression.UserFeedback feedback = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_feedback(), target);
  }

  // optional .notifications.proto.Impression.ImpressionResult impression = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_impression(), target);
  }

  // optional bool integrated = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_integrated(), target);
  }

  // optional string guid = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_guid(), target);
  }

  // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_impression_mapping_size()); i < n; i++) {
    const auto& repfield = this->_internal_impression_mapping(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .notifications.proto.CustomData custom_data = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 ignore_timeout_duration = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_ignore_timeout_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notifications.proto.Impression)
  return target;
}

size_t Impression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.Impression)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 6;
  total_size += 1UL * this->_internal_impression_mapping_size();
  for (const auto& msg : this->impression_mapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .notifications.proto.CustomData custom_data = 7;
  total_size += 1UL * this->_internal_custom_data_size();
  for (const auto& msg : this->custom_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string guid = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guid());
    }

    // optional int64 create_time = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time());
    }

    // optional .notifications.proto.Impression.UserFeedback feedback = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_feedback());
    }

    // optional .notifications.proto.Impression.ImpressionResult impression = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_impression());
    }

    // optional int64 ignore_timeout_duration = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ignore_timeout_duration());
    }

    // optional bool integrated = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Impression::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Impression*>(
      &from));
}

void Impression::MergeFrom(const Impression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.Impression)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  impression_mapping_.MergeFrom(from.impression_mapping_);
  custom_data_.MergeFrom(from.custom_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_guid(from._internal_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      create_time_ = from.create_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      feedback_ = from.feedback_;
    }
    if (cached_has_bits & 0x00000008u) {
      impression_ = from.impression_;
    }
    if (cached_has_bits & 0x00000010u) {
      ignore_timeout_duration_ = from.ignore_timeout_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      integrated_ = from.integrated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Impression::CopyFrom(const Impression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.Impression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Impression::IsInitialized() const {
  return true;
}

void Impression::InternalSwap(Impression* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  impression_mapping_.InternalSwap(&other->impression_mapping_);
  custom_data_.InternalSwap(&other->custom_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Impression, integrated_)
      + sizeof(Impression::integrated_)
      - PROTOBUF_FIELD_OFFSET(Impression, create_time_)>(
          reinterpret_cast<char*>(&create_time_),
          reinterpret_cast<char*>(&other->create_time_));
}

std::string Impression::GetTypeName() const {
  return "notifications.proto.Impression";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace notifications
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::notifications::proto::Impression_ImpressionMapping*
Arena::CreateMaybeMessage< ::notifications::proto::Impression_ImpressionMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notifications::proto::Impression_ImpressionMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::notifications::proto::Impression*
Arena::CreateMaybeMessage< ::notifications::proto::Impression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notifications::proto::Impression >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
