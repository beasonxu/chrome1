// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_entry.proto

#include "notification_entry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace notifications {
namespace proto {
PROTOBUF_CONSTEXPR ScheduleParams::ScheduleParams(
    ::_pbi::ConstantInitialized)
  : impression_mapping_()
  , deliver_time_start_(int64_t{0})
  , deliver_time_end_(int64_t{0})
  , ignore_timeout_duration_(int64_t{0})
  , priority_(0)
{}
struct ScheduleParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleParamsDefaultTypeInternal() {}
  union {
    ScheduleParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleParamsDefaultTypeInternal _ScheduleParams_default_instance_;
PROTOBUF_CONSTEXPR NotificationEntry::NotificationEntry(
    ::_pbi::ConstantInitialized)
  : guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , notification_data_(nullptr)
  , schedule_params_(nullptr)
  , create_time_(int64_t{0})
  , type_(-1)
{}
struct NotificationEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationEntryDefaultTypeInternal() {}
  union {
    NotificationEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationEntryDefaultTypeInternal _NotificationEntry_default_instance_;
}  // namespace proto
}  // namespace notifications
namespace notifications {
namespace proto {
bool ScheduleParams_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ScheduleParams_Priority_strings[2] = {};

static const char ScheduleParams_Priority_names[] =
  "LOW"
  "NO_THROTTLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ScheduleParams_Priority_entries[] = {
  { {ScheduleParams_Priority_names + 0, 3}, 0 },
  { {ScheduleParams_Priority_names + 3, 11}, 1 },
};

static const int ScheduleParams_Priority_entries_by_number[] = {
  0, // 0 -> LOW
  1, // 1 -> NO_THROTTLE
};

const std::string& ScheduleParams_Priority_Name(
    ScheduleParams_Priority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ScheduleParams_Priority_entries,
          ScheduleParams_Priority_entries_by_number,
          2, ScheduleParams_Priority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ScheduleParams_Priority_entries,
      ScheduleParams_Priority_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ScheduleParams_Priority_strings[idx].get();
}
bool ScheduleParams_Priority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScheduleParams_Priority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ScheduleParams_Priority_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ScheduleParams_Priority>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ScheduleParams_Priority ScheduleParams::LOW;
constexpr ScheduleParams_Priority ScheduleParams::NO_THROTTLE;
constexpr ScheduleParams_Priority ScheduleParams::Priority_MIN;
constexpr ScheduleParams_Priority ScheduleParams::Priority_MAX;
constexpr int ScheduleParams::Priority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ScheduleParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ScheduleParams>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deliver_time_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deliver_time_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ignore_timeout_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void ScheduleParams::clear_impression_mapping() {
  impression_mapping_.Clear();
}
ScheduleParams::ScheduleParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  impression_mapping_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:notifications.proto.ScheduleParams)
}
ScheduleParams::ScheduleParams(const ScheduleParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      impression_mapping_(from.impression_mapping_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&deliver_time_start_, &from.deliver_time_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&deliver_time_start_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.ScheduleParams)
}

inline void ScheduleParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deliver_time_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&deliver_time_start_)) + sizeof(priority_));
}

ScheduleParams::~ScheduleParams() {
  // @@protoc_insertion_point(destructor:notifications.proto.ScheduleParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScheduleParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScheduleParams::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.ScheduleParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impression_mapping_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&deliver_time_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_) -
        reinterpret_cast<char*>(&deliver_time_start_)) + sizeof(priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ScheduleParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .notifications.proto.ScheduleParams.Priority priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::ScheduleParams_Priority_IsValid(val))) {
            _internal_set_priority(static_cast<::notifications::proto::ScheduleParams_Priority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_impression_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 deliver_time_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_deliver_time_start(&has_bits);
          deliver_time_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 deliver_time_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_deliver_time_end(&has_bits);
          deliver_time_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ignore_timeout_duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ignore_timeout_duration(&has_bits);
          ignore_timeout_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notifications.proto.ScheduleParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .notifications.proto.ScheduleParams.Priority priority = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_priority(), target);
  }

  // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_impression_mapping_size()); i < n; i++) {
    const auto& repfield = this->_internal_impression_mapping(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 deliver_time_start = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_deliver_time_start(), target);
  }

  // optional int64 deliver_time_end = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_deliver_time_end(), target);
  }

  // optional int64 ignore_timeout_duration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_ignore_timeout_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notifications.proto.ScheduleParams)
  return target;
}

size_t ScheduleParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.ScheduleParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 2;
  total_size += 1UL * this->_internal_impression_mapping_size();
  for (const auto& msg : this->impression_mapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 deliver_time_start = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_deliver_time_start());
    }

    // optional int64 deliver_time_end = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_deliver_time_end());
    }

    // optional int64 ignore_timeout_duration = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ignore_timeout_duration());
    }

    // optional .notifications.proto.ScheduleParams.Priority priority = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScheduleParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ScheduleParams*>(
      &from));
}

void ScheduleParams::MergeFrom(const ScheduleParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.ScheduleParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  impression_mapping_.MergeFrom(from.impression_mapping_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      deliver_time_start_ = from.deliver_time_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      deliver_time_end_ = from.deliver_time_end_;
    }
    if (cached_has_bits & 0x00000004u) {
      ignore_timeout_duration_ = from.ignore_timeout_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ScheduleParams::CopyFrom(const ScheduleParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.ScheduleParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleParams::IsInitialized() const {
  return true;
}

void ScheduleParams::InternalSwap(ScheduleParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  impression_mapping_.InternalSwap(&other->impression_mapping_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleParams, priority_)
      + sizeof(ScheduleParams::priority_)
      - PROTOBUF_FIELD_OFFSET(ScheduleParams, deliver_time_start_)>(
          reinterpret_cast<char*>(&deliver_time_start_),
          reinterpret_cast<char*>(&other->deliver_time_start_));
}

std::string ScheduleParams::GetTypeName() const {
  return "notifications.proto.ScheduleParams";
}


// ===================================================================

class NotificationEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<NotificationEntry>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::notifications::proto::NotificationData& notification_data(const NotificationEntry* msg);
  static void set_has_notification_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::notifications::proto::ScheduleParams& schedule_params(const NotificationEntry* msg);
  static void set_has_schedule_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::notifications::proto::NotificationData&
NotificationEntry::_Internal::notification_data(const NotificationEntry* msg) {
  return *msg->notification_data_;
}
const ::notifications::proto::ScheduleParams&
NotificationEntry::_Internal::schedule_params(const NotificationEntry* msg) {
  return *msg->schedule_params_;
}
void NotificationEntry::clear_notification_data() {
  if (notification_data_ != nullptr) notification_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
NotificationEntry::NotificationEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:notifications.proto.NotificationEntry)
}
NotificationEntry::NotificationEntry(const NotificationEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(from._internal_guid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_notification_data()) {
    notification_data_ = new ::notifications::proto::NotificationData(*from.notification_data_);
  } else {
    notification_data_ = nullptr;
  }
  if (from._internal_has_schedule_params()) {
    schedule_params_ = new ::notifications::proto::ScheduleParams(*from.schedule_params_);
  } else {
    schedule_params_ = nullptr;
  }
  ::memcpy(&create_time_, &from.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&create_time_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.NotificationEntry)
}

inline void NotificationEntry::SharedCtor() {
guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notification_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&notification_data_)) + sizeof(create_time_));
type_ = -1;
}

NotificationEntry::~NotificationEntry() {
  // @@protoc_insertion_point(destructor:notifications.proto.NotificationEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.Destroy();
  if (this != internal_default_instance()) delete notification_data_;
  if (this != internal_default_instance()) delete schedule_params_;
}

void NotificationEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotificationEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.NotificationEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(notification_data_ != nullptr);
      notification_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(schedule_params_ != nullptr);
      schedule_params_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    create_time_ = int64_t{0};
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NotificationEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .notifications.proto.SchedulerClientType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::SchedulerClientType_IsValid(val))) {
            _internal_set_type(static_cast<::notifications::proto::SchedulerClientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 create_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_create_time(&has_bits);
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .notifications.proto.NotificationData notification_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .notifications.proto.ScheduleParams schedule_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notifications.proto.NotificationEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .notifications.proto.SchedulerClientType type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional string guid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_guid(), target);
  }

  // optional int64 create_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_create_time(), target);
  }

  // optional .notifications.proto.NotificationData notification_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::notification_data(this),
        _Internal::notification_data(this).GetCachedSize(), target, stream);
  }

  // optional .notifications.proto.ScheduleParams schedule_params = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::schedule_params(this),
        _Internal::schedule_params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notifications.proto.NotificationEntry)
  return target;
}

size_t NotificationEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.NotificationEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string guid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guid());
    }

    // optional .notifications.proto.NotificationData notification_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notification_data_);
    }

    // optional .notifications.proto.ScheduleParams schedule_params = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schedule_params_);
    }

    // optional int64 create_time = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time());
    }

    // optional .notifications.proto.SchedulerClientType type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NotificationEntry*>(
      &from));
}

void NotificationEntry::MergeFrom(const NotificationEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.NotificationEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_guid(from._internal_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_notification_data()->::notifications::proto::NotificationData::MergeFrom(from._internal_notification_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_schedule_params()->::notifications::proto::ScheduleParams::MergeFrom(from._internal_schedule_params());
    }
    if (cached_has_bits & 0x00000008u) {
      create_time_ = from.create_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NotificationEntry::CopyFrom(const NotificationEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.NotificationEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationEntry::IsInitialized() const {
  return true;
}

void NotificationEntry::InternalSwap(NotificationEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotificationEntry, create_time_)
      + sizeof(NotificationEntry::create_time_)
      - PROTOBUF_FIELD_OFFSET(NotificationEntry, notification_data_)>(
          reinterpret_cast<char*>(&notification_data_),
          reinterpret_cast<char*>(&other->notification_data_));
  swap(type_, other->type_);
}

std::string NotificationEntry::GetTypeName() const {
  return "notifications.proto.NotificationEntry";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace notifications
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::notifications::proto::ScheduleParams*
Arena::CreateMaybeMessage< ::notifications::proto::ScheduleParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notifications::proto::ScheduleParams >(arena);
}
template<> PROTOBUF_NOINLINE ::notifications::proto::NotificationEntry*
Arena::CreateMaybeMessage< ::notifications::proto::NotificationEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notifications::proto::NotificationEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
