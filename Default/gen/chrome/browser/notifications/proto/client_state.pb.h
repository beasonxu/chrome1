// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "impression.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fstate_2eproto {
  static const uint32_t offsets[];
};
namespace notifications {
namespace proto {
class ClientState;
struct ClientStateDefaultTypeInternal;
extern ClientStateDefaultTypeInternal _ClientState_default_instance_;
class SuppressionInfo;
struct SuppressionInfoDefaultTypeInternal;
extern SuppressionInfoDefaultTypeInternal _SuppressionInfo_default_instance_;
}  // namespace proto
}  // namespace notifications
PROTOBUF_NAMESPACE_OPEN
template<> ::notifications::proto::ClientState* Arena::CreateMaybeMessage<::notifications::proto::ClientState>(Arena*);
template<> ::notifications::proto::SuppressionInfo* Arena::CreateMaybeMessage<::notifications::proto::SuppressionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace notifications {
namespace proto {

enum SchedulerClientType : int {
  TEST_1 = -1,
  TEST_2 = -2,
  TEST_3 = -3,
  UNKNOWN = 0,
  WEBUI = 1,
  CHROME_UPDATE = 2,
  PREFETCH = 3,
  READING_LIST = 4,
  FEATURE_GUIDE = 5
};
bool SchedulerClientType_IsValid(int value);
constexpr SchedulerClientType SchedulerClientType_MIN = TEST_3;
constexpr SchedulerClientType SchedulerClientType_MAX = FEATURE_GUIDE;
constexpr int SchedulerClientType_ARRAYSIZE = SchedulerClientType_MAX + 1;

const std::string& SchedulerClientType_Name(SchedulerClientType value);
template<typename T>
inline const std::string& SchedulerClientType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SchedulerClientType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SchedulerClientType_Name.");
  return SchedulerClientType_Name(static_cast<SchedulerClientType>(enum_t_value));
}
bool SchedulerClientType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SchedulerClientType* value);
// ===================================================================

class SuppressionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.SuppressionInfo) */ {
 public:
  inline SuppressionInfo() : SuppressionInfo(nullptr) {}
  ~SuppressionInfo() override;
  explicit PROTOBUF_CONSTEXPR SuppressionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuppressionInfo(const SuppressionInfo& from);
  SuppressionInfo(SuppressionInfo&& from) noexcept
    : SuppressionInfo() {
    *this = ::std::move(from);
  }

  inline SuppressionInfo& operator=(const SuppressionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuppressionInfo& operator=(SuppressionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SuppressionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuppressionInfo* internal_default_instance() {
    return reinterpret_cast<const SuppressionInfo*>(
               &_SuppressionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SuppressionInfo& a, SuppressionInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SuppressionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuppressionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuppressionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuppressionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SuppressionInfo& from);
  void MergeFrom(const SuppressionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SuppressionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.SuppressionInfo";
  }
  protected:
  explicit SuppressionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastTriggerTimeFieldNumber = 1,
    kDurationMsFieldNumber = 2,
    kRecoverGoalFieldNumber = 3,
  };
  // optional int64 last_trigger_time = 1;
  bool has_last_trigger_time() const;
  private:
  bool _internal_has_last_trigger_time() const;
  public:
  void clear_last_trigger_time();
  int64_t last_trigger_time() const;
  void set_last_trigger_time(int64_t value);
  private:
  int64_t _internal_last_trigger_time() const;
  void _internal_set_last_trigger_time(int64_t value);
  public:

  // optional int64 duration_ms = 2;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  int64_t duration_ms() const;
  void set_duration_ms(int64_t value);
  private:
  int64_t _internal_duration_ms() const;
  void _internal_set_duration_ms(int64_t value);
  public:

  // optional int32 recover_goal = 3;
  bool has_recover_goal() const;
  private:
  bool _internal_has_recover_goal() const;
  public:
  void clear_recover_goal();
  int32_t recover_goal() const;
  void set_recover_goal(int32_t value);
  private:
  int32_t _internal_recover_goal() const;
  void _internal_set_recover_goal(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:notifications.proto.SuppressionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t last_trigger_time_;
  int64_t duration_ms_;
  int32_t recover_goal_;
  friend struct ::TableStruct_client_5fstate_2eproto;
};
// -------------------------------------------------------------------

class ClientState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.ClientState) */ {
 public:
  inline ClientState() : ClientState(nullptr) {}
  ~ClientState() override;
  explicit PROTOBUF_CONSTEXPR ClientState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientState(const ClientState& from);
  ClientState(ClientState&& from) noexcept
    : ClientState() {
    *this = ::std::move(from);
  }

  inline ClientState& operator=(const ClientState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientState& operator=(ClientState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientState* internal_default_instance() {
    return reinterpret_cast<const ClientState*>(
               &_ClientState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientState& a, ClientState& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientState& from);
  void MergeFrom(const ClientState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.ClientState";
  }
  protected:
  explicit ClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpressionsFieldNumber = 3,
    kSuppressionInfoFieldNumber = 4,
    kCurrentMaxDailyShowFieldNumber = 2,
    kNegativeEventsCountFieldNumber = 5,
    kLastNegativeEventTsFieldNumber = 6,
    kLastShownTsFieldNumber = 7,
    kTypeFieldNumber = 1,
  };
  // repeated .notifications.proto.Impression impressions = 3;
  int impressions_size() const;
  private:
  int _internal_impressions_size() const;
  public:
  void clear_impressions();
  ::notifications::proto::Impression* mutable_impressions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression >*
      mutable_impressions();
  private:
  const ::notifications::proto::Impression& _internal_impressions(int index) const;
  ::notifications::proto::Impression* _internal_add_impressions();
  public:
  const ::notifications::proto::Impression& impressions(int index) const;
  ::notifications::proto::Impression* add_impressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression >&
      impressions() const;

  // optional .notifications.proto.SuppressionInfo suppression_info = 4;
  bool has_suppression_info() const;
  private:
  bool _internal_has_suppression_info() const;
  public:
  void clear_suppression_info();
  const ::notifications::proto::SuppressionInfo& suppression_info() const;
  PROTOBUF_NODISCARD ::notifications::proto::SuppressionInfo* release_suppression_info();
  ::notifications::proto::SuppressionInfo* mutable_suppression_info();
  void set_allocated_suppression_info(::notifications::proto::SuppressionInfo* suppression_info);
  private:
  const ::notifications::proto::SuppressionInfo& _internal_suppression_info() const;
  ::notifications::proto::SuppressionInfo* _internal_mutable_suppression_info();
  public:
  void unsafe_arena_set_allocated_suppression_info(
      ::notifications::proto::SuppressionInfo* suppression_info);
  ::notifications::proto::SuppressionInfo* unsafe_arena_release_suppression_info();

  // optional int32 current_max_daily_show = 2;
  bool has_current_max_daily_show() const;
  private:
  bool _internal_has_current_max_daily_show() const;
  public:
  void clear_current_max_daily_show();
  int32_t current_max_daily_show() const;
  void set_current_max_daily_show(int32_t value);
  private:
  int32_t _internal_current_max_daily_show() const;
  void _internal_set_current_max_daily_show(int32_t value);
  public:

  // optional int32 negative_events_count = 5;
  bool has_negative_events_count() const;
  private:
  bool _internal_has_negative_events_count() const;
  public:
  void clear_negative_events_count();
  int32_t negative_events_count() const;
  void set_negative_events_count(int32_t value);
  private:
  int32_t _internal_negative_events_count() const;
  void _internal_set_negative_events_count(int32_t value);
  public:

  // optional int64 last_negative_event_ts = 6;
  bool has_last_negative_event_ts() const;
  private:
  bool _internal_has_last_negative_event_ts() const;
  public:
  void clear_last_negative_event_ts();
  int64_t last_negative_event_ts() const;
  void set_last_negative_event_ts(int64_t value);
  private:
  int64_t _internal_last_negative_event_ts() const;
  void _internal_set_last_negative_event_ts(int64_t value);
  public:

  // optional int64 last_shown_ts = 7;
  bool has_last_shown_ts() const;
  private:
  bool _internal_has_last_shown_ts() const;
  public:
  void clear_last_shown_ts();
  int64_t last_shown_ts() const;
  void set_last_shown_ts(int64_t value);
  private:
  int64_t _internal_last_shown_ts() const;
  void _internal_set_last_shown_ts(int64_t value);
  public:

  // optional .notifications.proto.SchedulerClientType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::notifications::proto::SchedulerClientType type() const;
  void set_type(::notifications::proto::SchedulerClientType value);
  private:
  ::notifications::proto::SchedulerClientType _internal_type() const;
  void _internal_set_type(::notifications::proto::SchedulerClientType value);
  public:

  // @@protoc_insertion_point(class_scope:notifications.proto.ClientState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression > impressions_;
  ::notifications::proto::SuppressionInfo* suppression_info_;
  int32_t current_max_daily_show_;
  int32_t negative_events_count_;
  int64_t last_negative_event_ts_;
  int64_t last_shown_ts_;
  int type_;
  friend struct ::TableStruct_client_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SuppressionInfo

// optional int64 last_trigger_time = 1;
inline bool SuppressionInfo::_internal_has_last_trigger_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SuppressionInfo::has_last_trigger_time() const {
  return _internal_has_last_trigger_time();
}
inline void SuppressionInfo::clear_last_trigger_time() {
  last_trigger_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SuppressionInfo::_internal_last_trigger_time() const {
  return last_trigger_time_;
}
inline int64_t SuppressionInfo::last_trigger_time() const {
  // @@protoc_insertion_point(field_get:notifications.proto.SuppressionInfo.last_trigger_time)
  return _internal_last_trigger_time();
}
inline void SuppressionInfo::_internal_set_last_trigger_time(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  last_trigger_time_ = value;
}
inline void SuppressionInfo::set_last_trigger_time(int64_t value) {
  _internal_set_last_trigger_time(value);
  // @@protoc_insertion_point(field_set:notifications.proto.SuppressionInfo.last_trigger_time)
}

// optional int64 duration_ms = 2;
inline bool SuppressionInfo::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SuppressionInfo::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void SuppressionInfo::clear_duration_ms() {
  duration_ms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SuppressionInfo::_internal_duration_ms() const {
  return duration_ms_;
}
inline int64_t SuppressionInfo::duration_ms() const {
  // @@protoc_insertion_point(field_get:notifications.proto.SuppressionInfo.duration_ms)
  return _internal_duration_ms();
}
inline void SuppressionInfo::_internal_set_duration_ms(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  duration_ms_ = value;
}
inline void SuppressionInfo::set_duration_ms(int64_t value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:notifications.proto.SuppressionInfo.duration_ms)
}

// optional int32 recover_goal = 3;
inline bool SuppressionInfo::_internal_has_recover_goal() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SuppressionInfo::has_recover_goal() const {
  return _internal_has_recover_goal();
}
inline void SuppressionInfo::clear_recover_goal() {
  recover_goal_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SuppressionInfo::_internal_recover_goal() const {
  return recover_goal_;
}
inline int32_t SuppressionInfo::recover_goal() const {
  // @@protoc_insertion_point(field_get:notifications.proto.SuppressionInfo.recover_goal)
  return _internal_recover_goal();
}
inline void SuppressionInfo::_internal_set_recover_goal(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  recover_goal_ = value;
}
inline void SuppressionInfo::set_recover_goal(int32_t value) {
  _internal_set_recover_goal(value);
  // @@protoc_insertion_point(field_set:notifications.proto.SuppressionInfo.recover_goal)
}

// -------------------------------------------------------------------

// ClientState

// optional .notifications.proto.SchedulerClientType type = 1;
inline bool ClientState::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientState::has_type() const {
  return _internal_has_type();
}
inline void ClientState::clear_type() {
  type_ = -1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::notifications::proto::SchedulerClientType ClientState::_internal_type() const {
  return static_cast< ::notifications::proto::SchedulerClientType >(type_);
}
inline ::notifications::proto::SchedulerClientType ClientState::type() const {
  // @@protoc_insertion_point(field_get:notifications.proto.ClientState.type)
  return _internal_type();
}
inline void ClientState::_internal_set_type(::notifications::proto::SchedulerClientType value) {
  assert(::notifications::proto::SchedulerClientType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void ClientState::set_type(::notifications::proto::SchedulerClientType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:notifications.proto.ClientState.type)
}

// optional int32 current_max_daily_show = 2;
inline bool ClientState::_internal_has_current_max_daily_show() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientState::has_current_max_daily_show() const {
  return _internal_has_current_max_daily_show();
}
inline void ClientState::clear_current_max_daily_show() {
  current_max_daily_show_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ClientState::_internal_current_max_daily_show() const {
  return current_max_daily_show_;
}
inline int32_t ClientState::current_max_daily_show() const {
  // @@protoc_insertion_point(field_get:notifications.proto.ClientState.current_max_daily_show)
  return _internal_current_max_daily_show();
}
inline void ClientState::_internal_set_current_max_daily_show(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  current_max_daily_show_ = value;
}
inline void ClientState::set_current_max_daily_show(int32_t value) {
  _internal_set_current_max_daily_show(value);
  // @@protoc_insertion_point(field_set:notifications.proto.ClientState.current_max_daily_show)
}

// repeated .notifications.proto.Impression impressions = 3;
inline int ClientState::_internal_impressions_size() const {
  return impressions_.size();
}
inline int ClientState::impressions_size() const {
  return _internal_impressions_size();
}
inline ::notifications::proto::Impression* ClientState::mutable_impressions(int index) {
  // @@protoc_insertion_point(field_mutable:notifications.proto.ClientState.impressions)
  return impressions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression >*
ClientState::mutable_impressions() {
  // @@protoc_insertion_point(field_mutable_list:notifications.proto.ClientState.impressions)
  return &impressions_;
}
inline const ::notifications::proto::Impression& ClientState::_internal_impressions(int index) const {
  return impressions_.Get(index);
}
inline const ::notifications::proto::Impression& ClientState::impressions(int index) const {
  // @@protoc_insertion_point(field_get:notifications.proto.ClientState.impressions)
  return _internal_impressions(index);
}
inline ::notifications::proto::Impression* ClientState::_internal_add_impressions() {
  return impressions_.Add();
}
inline ::notifications::proto::Impression* ClientState::add_impressions() {
  ::notifications::proto::Impression* _add = _internal_add_impressions();
  // @@protoc_insertion_point(field_add:notifications.proto.ClientState.impressions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression >&
ClientState::impressions() const {
  // @@protoc_insertion_point(field_list:notifications.proto.ClientState.impressions)
  return impressions_;
}

// optional .notifications.proto.SuppressionInfo suppression_info = 4;
inline bool ClientState::_internal_has_suppression_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || suppression_info_ != nullptr);
  return value;
}
inline bool ClientState::has_suppression_info() const {
  return _internal_has_suppression_info();
}
inline void ClientState::clear_suppression_info() {
  if (suppression_info_ != nullptr) suppression_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::notifications::proto::SuppressionInfo& ClientState::_internal_suppression_info() const {
  const ::notifications::proto::SuppressionInfo* p = suppression_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::notifications::proto::SuppressionInfo&>(
      ::notifications::proto::_SuppressionInfo_default_instance_);
}
inline const ::notifications::proto::SuppressionInfo& ClientState::suppression_info() const {
  // @@protoc_insertion_point(field_get:notifications.proto.ClientState.suppression_info)
  return _internal_suppression_info();
}
inline void ClientState::unsafe_arena_set_allocated_suppression_info(
    ::notifications::proto::SuppressionInfo* suppression_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(suppression_info_);
  }
  suppression_info_ = suppression_info;
  if (suppression_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:notifications.proto.ClientState.suppression_info)
}
inline ::notifications::proto::SuppressionInfo* ClientState::release_suppression_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::notifications::proto::SuppressionInfo* temp = suppression_info_;
  suppression_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::notifications::proto::SuppressionInfo* ClientState::unsafe_arena_release_suppression_info() {
  // @@protoc_insertion_point(field_release:notifications.proto.ClientState.suppression_info)
  _has_bits_[0] &= ~0x00000001u;
  ::notifications::proto::SuppressionInfo* temp = suppression_info_;
  suppression_info_ = nullptr;
  return temp;
}
inline ::notifications::proto::SuppressionInfo* ClientState::_internal_mutable_suppression_info() {
  _has_bits_[0] |= 0x00000001u;
  if (suppression_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::notifications::proto::SuppressionInfo>(GetArenaForAllocation());
    suppression_info_ = p;
  }
  return suppression_info_;
}
inline ::notifications::proto::SuppressionInfo* ClientState::mutable_suppression_info() {
  ::notifications::proto::SuppressionInfo* _msg = _internal_mutable_suppression_info();
  // @@protoc_insertion_point(field_mutable:notifications.proto.ClientState.suppression_info)
  return _msg;
}
inline void ClientState::set_allocated_suppression_info(::notifications::proto::SuppressionInfo* suppression_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete suppression_info_;
  }
  if (suppression_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(suppression_info);
    if (message_arena != submessage_arena) {
      suppression_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suppression_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  suppression_info_ = suppression_info;
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.ClientState.suppression_info)
}

// optional int32 negative_events_count = 5;
inline bool ClientState::_internal_has_negative_events_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientState::has_negative_events_count() const {
  return _internal_has_negative_events_count();
}
inline void ClientState::clear_negative_events_count() {
  negative_events_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ClientState::_internal_negative_events_count() const {
  return negative_events_count_;
}
inline int32_t ClientState::negative_events_count() const {
  // @@protoc_insertion_point(field_get:notifications.proto.ClientState.negative_events_count)
  return _internal_negative_events_count();
}
inline void ClientState::_internal_set_negative_events_count(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  negative_events_count_ = value;
}
inline void ClientState::set_negative_events_count(int32_t value) {
  _internal_set_negative_events_count(value);
  // @@protoc_insertion_point(field_set:notifications.proto.ClientState.negative_events_count)
}

// optional int64 last_negative_event_ts = 6;
inline bool ClientState::_internal_has_last_negative_event_ts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientState::has_last_negative_event_ts() const {
  return _internal_has_last_negative_event_ts();
}
inline void ClientState::clear_last_negative_event_ts() {
  last_negative_event_ts_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ClientState::_internal_last_negative_event_ts() const {
  return last_negative_event_ts_;
}
inline int64_t ClientState::last_negative_event_ts() const {
  // @@protoc_insertion_point(field_get:notifications.proto.ClientState.last_negative_event_ts)
  return _internal_last_negative_event_ts();
}
inline void ClientState::_internal_set_last_negative_event_ts(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  last_negative_event_ts_ = value;
}
inline void ClientState::set_last_negative_event_ts(int64_t value) {
  _internal_set_last_negative_event_ts(value);
  // @@protoc_insertion_point(field_set:notifications.proto.ClientState.last_negative_event_ts)
}

// optional int64 last_shown_ts = 7;
inline bool ClientState::_internal_has_last_shown_ts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientState::has_last_shown_ts() const {
  return _internal_has_last_shown_ts();
}
inline void ClientState::clear_last_shown_ts() {
  last_shown_ts_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t ClientState::_internal_last_shown_ts() const {
  return last_shown_ts_;
}
inline int64_t ClientState::last_shown_ts() const {
  // @@protoc_insertion_point(field_get:notifications.proto.ClientState.last_shown_ts)
  return _internal_last_shown_ts();
}
inline void ClientState::_internal_set_last_shown_ts(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  last_shown_ts_ = value;
}
inline void ClientState::set_last_shown_ts(int64_t value) {
  _internal_set_last_shown_ts(value);
  // @@protoc_insertion_point(field_set:notifications.proto.ClientState.last_shown_ts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace notifications

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::notifications::proto::SchedulerClientType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fstate_2eproto
