// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: impression.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_impression_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_impression_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "notification_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_impression_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_impression_2eproto {
  static const uint32_t offsets[];
};
namespace notifications {
namespace proto {
class Impression;
struct ImpressionDefaultTypeInternal;
extern ImpressionDefaultTypeInternal _Impression_default_instance_;
class Impression_ImpressionMapping;
struct Impression_ImpressionMappingDefaultTypeInternal;
extern Impression_ImpressionMappingDefaultTypeInternal _Impression_ImpressionMapping_default_instance_;
}  // namespace proto
}  // namespace notifications
PROTOBUF_NAMESPACE_OPEN
template<> ::notifications::proto::Impression* Arena::CreateMaybeMessage<::notifications::proto::Impression>(Arena*);
template<> ::notifications::proto::Impression_ImpressionMapping* Arena::CreateMaybeMessage<::notifications::proto::Impression_ImpressionMapping>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace notifications {
namespace proto {

enum Impression_UserFeedback : int {
  Impression_UserFeedback_NO_FEEDBACK = 0,
  Impression_UserFeedback_HELPFUL = 1,
  Impression_UserFeedback_NOT_HELPFUL = 2,
  Impression_UserFeedback_CLICK = 3,
  Impression_UserFeedback_DISMISS = 4,
  Impression_UserFeedback_IGNORE = 5
};
bool Impression_UserFeedback_IsValid(int value);
constexpr Impression_UserFeedback Impression_UserFeedback_UserFeedback_MIN = Impression_UserFeedback_NO_FEEDBACK;
constexpr Impression_UserFeedback Impression_UserFeedback_UserFeedback_MAX = Impression_UserFeedback_IGNORE;
constexpr int Impression_UserFeedback_UserFeedback_ARRAYSIZE = Impression_UserFeedback_UserFeedback_MAX + 1;

const std::string& Impression_UserFeedback_Name(Impression_UserFeedback value);
template<typename T>
inline const std::string& Impression_UserFeedback_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Impression_UserFeedback>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Impression_UserFeedback_Name.");
  return Impression_UserFeedback_Name(static_cast<Impression_UserFeedback>(enum_t_value));
}
bool Impression_UserFeedback_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Impression_UserFeedback* value);
enum Impression_ImpressionResult : int {
  Impression_ImpressionResult_INVALID = 0,
  Impression_ImpressionResult_POSITIVE = 1,
  Impression_ImpressionResult_NEGATIVE = 2,
  Impression_ImpressionResult_NEUTRAL = 3
};
bool Impression_ImpressionResult_IsValid(int value);
constexpr Impression_ImpressionResult Impression_ImpressionResult_ImpressionResult_MIN = Impression_ImpressionResult_INVALID;
constexpr Impression_ImpressionResult Impression_ImpressionResult_ImpressionResult_MAX = Impression_ImpressionResult_NEUTRAL;
constexpr int Impression_ImpressionResult_ImpressionResult_ARRAYSIZE = Impression_ImpressionResult_ImpressionResult_MAX + 1;

const std::string& Impression_ImpressionResult_Name(Impression_ImpressionResult value);
template<typename T>
inline const std::string& Impression_ImpressionResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Impression_ImpressionResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Impression_ImpressionResult_Name.");
  return Impression_ImpressionResult_Name(static_cast<Impression_ImpressionResult>(enum_t_value));
}
bool Impression_ImpressionResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Impression_ImpressionResult* value);
// ===================================================================

class Impression_ImpressionMapping final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.Impression.ImpressionMapping) */ {
 public:
  inline Impression_ImpressionMapping() : Impression_ImpressionMapping(nullptr) {}
  ~Impression_ImpressionMapping() override;
  explicit PROTOBUF_CONSTEXPR Impression_ImpressionMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Impression_ImpressionMapping(const Impression_ImpressionMapping& from);
  Impression_ImpressionMapping(Impression_ImpressionMapping&& from) noexcept
    : Impression_ImpressionMapping() {
    *this = ::std::move(from);
  }

  inline Impression_ImpressionMapping& operator=(const Impression_ImpressionMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Impression_ImpressionMapping& operator=(Impression_ImpressionMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Impression_ImpressionMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Impression_ImpressionMapping* internal_default_instance() {
    return reinterpret_cast<const Impression_ImpressionMapping*>(
               &_Impression_ImpressionMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Impression_ImpressionMapping& a, Impression_ImpressionMapping& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Impression_ImpressionMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Impression_ImpressionMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Impression_ImpressionMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Impression_ImpressionMapping>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Impression_ImpressionMapping& from);
  void MergeFrom(const Impression_ImpressionMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Impression_ImpressionMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.Impression.ImpressionMapping";
  }
  protected:
  explicit Impression_ImpressionMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFeedbackFieldNumber = 1,
    kImpressionResultFieldNumber = 2,
  };
  // optional .notifications.proto.Impression.UserFeedback user_feedback = 1;
  bool has_user_feedback() const;
  private:
  bool _internal_has_user_feedback() const;
  public:
  void clear_user_feedback();
  ::notifications::proto::Impression_UserFeedback user_feedback() const;
  void set_user_feedback(::notifications::proto::Impression_UserFeedback value);
  private:
  ::notifications::proto::Impression_UserFeedback _internal_user_feedback() const;
  void _internal_set_user_feedback(::notifications::proto::Impression_UserFeedback value);
  public:

  // optional .notifications.proto.Impression.ImpressionResult impression_result = 2;
  bool has_impression_result() const;
  private:
  bool _internal_has_impression_result() const;
  public:
  void clear_impression_result();
  ::notifications::proto::Impression_ImpressionResult impression_result() const;
  void set_impression_result(::notifications::proto::Impression_ImpressionResult value);
  private:
  ::notifications::proto::Impression_ImpressionResult _internal_impression_result() const;
  void _internal_set_impression_result(::notifications::proto::Impression_ImpressionResult value);
  public:

  // @@protoc_insertion_point(class_scope:notifications.proto.Impression.ImpressionMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int user_feedback_;
  int impression_result_;
  friend struct ::TableStruct_impression_2eproto;
};
// -------------------------------------------------------------------

class Impression final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.Impression) */ {
 public:
  inline Impression() : Impression(nullptr) {}
  ~Impression() override;
  explicit PROTOBUF_CONSTEXPR Impression(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Impression(const Impression& from);
  Impression(Impression&& from) noexcept
    : Impression() {
    *this = ::std::move(from);
  }

  inline Impression& operator=(const Impression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Impression& operator=(Impression&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Impression& default_instance() {
    return *internal_default_instance();
  }
  static inline const Impression* internal_default_instance() {
    return reinterpret_cast<const Impression*>(
               &_Impression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Impression& a, Impression& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Impression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Impression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Impression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Impression>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Impression& from);
  void MergeFrom(const Impression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Impression* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.Impression";
  }
  protected:
  explicit Impression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Impression_ImpressionMapping ImpressionMapping;

  typedef Impression_UserFeedback UserFeedback;
  static constexpr UserFeedback NO_FEEDBACK =
    Impression_UserFeedback_NO_FEEDBACK;
  static constexpr UserFeedback HELPFUL =
    Impression_UserFeedback_HELPFUL;
  static constexpr UserFeedback NOT_HELPFUL =
    Impression_UserFeedback_NOT_HELPFUL;
  static constexpr UserFeedback CLICK =
    Impression_UserFeedback_CLICK;
  static constexpr UserFeedback DISMISS =
    Impression_UserFeedback_DISMISS;
  static constexpr UserFeedback IGNORE =
    Impression_UserFeedback_IGNORE;
  static inline bool UserFeedback_IsValid(int value) {
    return Impression_UserFeedback_IsValid(value);
  }
  static constexpr UserFeedback UserFeedback_MIN =
    Impression_UserFeedback_UserFeedback_MIN;
  static constexpr UserFeedback UserFeedback_MAX =
    Impression_UserFeedback_UserFeedback_MAX;
  static constexpr int UserFeedback_ARRAYSIZE =
    Impression_UserFeedback_UserFeedback_ARRAYSIZE;
  template<typename T>
  static inline const std::string& UserFeedback_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserFeedback>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserFeedback_Name.");
    return Impression_UserFeedback_Name(enum_t_value);
  }
  static inline bool UserFeedback_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UserFeedback* value) {
    return Impression_UserFeedback_Parse(name, value);
  }

  typedef Impression_ImpressionResult ImpressionResult;
  static constexpr ImpressionResult INVALID =
    Impression_ImpressionResult_INVALID;
  static constexpr ImpressionResult POSITIVE =
    Impression_ImpressionResult_POSITIVE;
  static constexpr ImpressionResult NEGATIVE =
    Impression_ImpressionResult_NEGATIVE;
  static constexpr ImpressionResult NEUTRAL =
    Impression_ImpressionResult_NEUTRAL;
  static inline bool ImpressionResult_IsValid(int value) {
    return Impression_ImpressionResult_IsValid(value);
  }
  static constexpr ImpressionResult ImpressionResult_MIN =
    Impression_ImpressionResult_ImpressionResult_MIN;
  static constexpr ImpressionResult ImpressionResult_MAX =
    Impression_ImpressionResult_ImpressionResult_MAX;
  static constexpr int ImpressionResult_ARRAYSIZE =
    Impression_ImpressionResult_ImpressionResult_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ImpressionResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImpressionResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImpressionResult_Name.");
    return Impression_ImpressionResult_Name(enum_t_value);
  }
  static inline bool ImpressionResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImpressionResult* value) {
    return Impression_ImpressionResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kImpressionMappingFieldNumber = 6,
    kCustomDataFieldNumber = 7,
    kGuidFieldNumber = 5,
    kCreateTimeFieldNumber = 1,
    kFeedbackFieldNumber = 2,
    kImpressionFieldNumber = 3,
    kIgnoreTimeoutDurationFieldNumber = 8,
    kIntegratedFieldNumber = 4,
  };
  // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 6;
  int impression_mapping_size() const;
  private:
  int _internal_impression_mapping_size() const;
  public:
  void clear_impression_mapping();
  ::notifications::proto::Impression_ImpressionMapping* mutable_impression_mapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression_ImpressionMapping >*
      mutable_impression_mapping();
  private:
  const ::notifications::proto::Impression_ImpressionMapping& _internal_impression_mapping(int index) const;
  ::notifications::proto::Impression_ImpressionMapping* _internal_add_impression_mapping();
  public:
  const ::notifications::proto::Impression_ImpressionMapping& impression_mapping(int index) const;
  ::notifications::proto::Impression_ImpressionMapping* add_impression_mapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression_ImpressionMapping >&
      impression_mapping() const;

  // repeated .notifications.proto.CustomData custom_data = 7;
  int custom_data_size() const;
  private:
  int _internal_custom_data_size() const;
  public:
  void clear_custom_data();
  ::notifications::proto::CustomData* mutable_custom_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >*
      mutable_custom_data();
  private:
  const ::notifications::proto::CustomData& _internal_custom_data(int index) const;
  ::notifications::proto::CustomData* _internal_add_custom_data();
  public:
  const ::notifications::proto::CustomData& custom_data(int index) const;
  ::notifications::proto::CustomData* add_custom_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >&
      custom_data() const;

  // optional string guid = 5;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // optional int64 create_time = 1;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  int64_t create_time() const;
  void set_create_time(int64_t value);
  private:
  int64_t _internal_create_time() const;
  void _internal_set_create_time(int64_t value);
  public:

  // optional .notifications.proto.Impression.UserFeedback feedback = 2;
  bool has_feedback() const;
  private:
  bool _internal_has_feedback() const;
  public:
  void clear_feedback();
  ::notifications::proto::Impression_UserFeedback feedback() const;
  void set_feedback(::notifications::proto::Impression_UserFeedback value);
  private:
  ::notifications::proto::Impression_UserFeedback _internal_feedback() const;
  void _internal_set_feedback(::notifications::proto::Impression_UserFeedback value);
  public:

  // optional .notifications.proto.Impression.ImpressionResult impression = 3;
  bool has_impression() const;
  private:
  bool _internal_has_impression() const;
  public:
  void clear_impression();
  ::notifications::proto::Impression_ImpressionResult impression() const;
  void set_impression(::notifications::proto::Impression_ImpressionResult value);
  private:
  ::notifications::proto::Impression_ImpressionResult _internal_impression() const;
  void _internal_set_impression(::notifications::proto::Impression_ImpressionResult value);
  public:

  // optional int64 ignore_timeout_duration = 8;
  bool has_ignore_timeout_duration() const;
  private:
  bool _internal_has_ignore_timeout_duration() const;
  public:
  void clear_ignore_timeout_duration();
  int64_t ignore_timeout_duration() const;
  void set_ignore_timeout_duration(int64_t value);
  private:
  int64_t _internal_ignore_timeout_duration() const;
  void _internal_set_ignore_timeout_duration(int64_t value);
  public:

  // optional bool integrated = 4;
  bool has_integrated() const;
  private:
  bool _internal_has_integrated() const;
  public:
  void clear_integrated();
  bool integrated() const;
  void set_integrated(bool value);
  private:
  bool _internal_integrated() const;
  void _internal_set_integrated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:notifications.proto.Impression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression_ImpressionMapping > impression_mapping_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData > custom_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  int64_t create_time_;
  int feedback_;
  int impression_;
  int64_t ignore_timeout_duration_;
  bool integrated_;
  friend struct ::TableStruct_impression_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Impression_ImpressionMapping

// optional .notifications.proto.Impression.UserFeedback user_feedback = 1;
inline bool Impression_ImpressionMapping::_internal_has_user_feedback() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Impression_ImpressionMapping::has_user_feedback() const {
  return _internal_has_user_feedback();
}
inline void Impression_ImpressionMapping::clear_user_feedback() {
  user_feedback_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::notifications::proto::Impression_UserFeedback Impression_ImpressionMapping::_internal_user_feedback() const {
  return static_cast< ::notifications::proto::Impression_UserFeedback >(user_feedback_);
}
inline ::notifications::proto::Impression_UserFeedback Impression_ImpressionMapping::user_feedback() const {
  // @@protoc_insertion_point(field_get:notifications.proto.Impression.ImpressionMapping.user_feedback)
  return _internal_user_feedback();
}
inline void Impression_ImpressionMapping::_internal_set_user_feedback(::notifications::proto::Impression_UserFeedback value) {
  assert(::notifications::proto::Impression_UserFeedback_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  user_feedback_ = value;
}
inline void Impression_ImpressionMapping::set_user_feedback(::notifications::proto::Impression_UserFeedback value) {
  _internal_set_user_feedback(value);
  // @@protoc_insertion_point(field_set:notifications.proto.Impression.ImpressionMapping.user_feedback)
}

// optional .notifications.proto.Impression.ImpressionResult impression_result = 2;
inline bool Impression_ImpressionMapping::_internal_has_impression_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Impression_ImpressionMapping::has_impression_result() const {
  return _internal_has_impression_result();
}
inline void Impression_ImpressionMapping::clear_impression_result() {
  impression_result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::notifications::proto::Impression_ImpressionResult Impression_ImpressionMapping::_internal_impression_result() const {
  return static_cast< ::notifications::proto::Impression_ImpressionResult >(impression_result_);
}
inline ::notifications::proto::Impression_ImpressionResult Impression_ImpressionMapping::impression_result() const {
  // @@protoc_insertion_point(field_get:notifications.proto.Impression.ImpressionMapping.impression_result)
  return _internal_impression_result();
}
inline void Impression_ImpressionMapping::_internal_set_impression_result(::notifications::proto::Impression_ImpressionResult value) {
  assert(::notifications::proto::Impression_ImpressionResult_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  impression_result_ = value;
}
inline void Impression_ImpressionMapping::set_impression_result(::notifications::proto::Impression_ImpressionResult value) {
  _internal_set_impression_result(value);
  // @@protoc_insertion_point(field_set:notifications.proto.Impression.ImpressionMapping.impression_result)
}

// -------------------------------------------------------------------

// Impression

// optional int64 create_time = 1;
inline bool Impression::_internal_has_create_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Impression::has_create_time() const {
  return _internal_has_create_time();
}
inline void Impression::clear_create_time() {
  create_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Impression::_internal_create_time() const {
  return create_time_;
}
inline int64_t Impression::create_time() const {
  // @@protoc_insertion_point(field_get:notifications.proto.Impression.create_time)
  return _internal_create_time();
}
inline void Impression::_internal_set_create_time(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  create_time_ = value;
}
inline void Impression::set_create_time(int64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:notifications.proto.Impression.create_time)
}

// optional .notifications.proto.Impression.UserFeedback feedback = 2;
inline bool Impression::_internal_has_feedback() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Impression::has_feedback() const {
  return _internal_has_feedback();
}
inline void Impression::clear_feedback() {
  feedback_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::notifications::proto::Impression_UserFeedback Impression::_internal_feedback() const {
  return static_cast< ::notifications::proto::Impression_UserFeedback >(feedback_);
}
inline ::notifications::proto::Impression_UserFeedback Impression::feedback() const {
  // @@protoc_insertion_point(field_get:notifications.proto.Impression.feedback)
  return _internal_feedback();
}
inline void Impression::_internal_set_feedback(::notifications::proto::Impression_UserFeedback value) {
  assert(::notifications::proto::Impression_UserFeedback_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  feedback_ = value;
}
inline void Impression::set_feedback(::notifications::proto::Impression_UserFeedback value) {
  _internal_set_feedback(value);
  // @@protoc_insertion_point(field_set:notifications.proto.Impression.feedback)
}

// optional .notifications.proto.Impression.ImpressionResult impression = 3;
inline bool Impression::_internal_has_impression() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Impression::has_impression() const {
  return _internal_has_impression();
}
inline void Impression::clear_impression() {
  impression_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::notifications::proto::Impression_ImpressionResult Impression::_internal_impression() const {
  return static_cast< ::notifications::proto::Impression_ImpressionResult >(impression_);
}
inline ::notifications::proto::Impression_ImpressionResult Impression::impression() const {
  // @@protoc_insertion_point(field_get:notifications.proto.Impression.impression)
  return _internal_impression();
}
inline void Impression::_internal_set_impression(::notifications::proto::Impression_ImpressionResult value) {
  assert(::notifications::proto::Impression_ImpressionResult_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  impression_ = value;
}
inline void Impression::set_impression(::notifications::proto::Impression_ImpressionResult value) {
  _internal_set_impression(value);
  // @@protoc_insertion_point(field_set:notifications.proto.Impression.impression)
}

// optional bool integrated = 4;
inline bool Impression::_internal_has_integrated() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Impression::has_integrated() const {
  return _internal_has_integrated();
}
inline void Impression::clear_integrated() {
  integrated_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Impression::_internal_integrated() const {
  return integrated_;
}
inline bool Impression::integrated() const {
  // @@protoc_insertion_point(field_get:notifications.proto.Impression.integrated)
  return _internal_integrated();
}
inline void Impression::_internal_set_integrated(bool value) {
  _has_bits_[0] |= 0x00000020u;
  integrated_ = value;
}
inline void Impression::set_integrated(bool value) {
  _internal_set_integrated(value);
  // @@protoc_insertion_point(field_set:notifications.proto.Impression.integrated)
}

// optional string guid = 5;
inline bool Impression::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Impression::has_guid() const {
  return _internal_has_guid();
}
inline void Impression::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Impression::guid() const {
  // @@protoc_insertion_point(field_get:notifications.proto.Impression.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Impression::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:notifications.proto.Impression.guid)
}
inline std::string* Impression::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:notifications.proto.Impression.guid)
  return _s;
}
inline const std::string& Impression::_internal_guid() const {
  return guid_.Get();
}
inline void Impression::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.Set(value, GetArenaForAllocation());
}
inline std::string* Impression::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  return guid_.Mutable(GetArenaForAllocation());
}
inline std::string* Impression::release_guid() {
  // @@protoc_insertion_point(field_release:notifications.proto.Impression.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = guid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Impression::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocated(guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.Impression.guid)
}

// repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 6;
inline int Impression::_internal_impression_mapping_size() const {
  return impression_mapping_.size();
}
inline int Impression::impression_mapping_size() const {
  return _internal_impression_mapping_size();
}
inline void Impression::clear_impression_mapping() {
  impression_mapping_.Clear();
}
inline ::notifications::proto::Impression_ImpressionMapping* Impression::mutable_impression_mapping(int index) {
  // @@protoc_insertion_point(field_mutable:notifications.proto.Impression.impression_mapping)
  return impression_mapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression_ImpressionMapping >*
Impression::mutable_impression_mapping() {
  // @@protoc_insertion_point(field_mutable_list:notifications.proto.Impression.impression_mapping)
  return &impression_mapping_;
}
inline const ::notifications::proto::Impression_ImpressionMapping& Impression::_internal_impression_mapping(int index) const {
  return impression_mapping_.Get(index);
}
inline const ::notifications::proto::Impression_ImpressionMapping& Impression::impression_mapping(int index) const {
  // @@protoc_insertion_point(field_get:notifications.proto.Impression.impression_mapping)
  return _internal_impression_mapping(index);
}
inline ::notifications::proto::Impression_ImpressionMapping* Impression::_internal_add_impression_mapping() {
  return impression_mapping_.Add();
}
inline ::notifications::proto::Impression_ImpressionMapping* Impression::add_impression_mapping() {
  ::notifications::proto::Impression_ImpressionMapping* _add = _internal_add_impression_mapping();
  // @@protoc_insertion_point(field_add:notifications.proto.Impression.impression_mapping)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression_ImpressionMapping >&
Impression::impression_mapping() const {
  // @@protoc_insertion_point(field_list:notifications.proto.Impression.impression_mapping)
  return impression_mapping_;
}

// repeated .notifications.proto.CustomData custom_data = 7;
inline int Impression::_internal_custom_data_size() const {
  return custom_data_.size();
}
inline int Impression::custom_data_size() const {
  return _internal_custom_data_size();
}
inline ::notifications::proto::CustomData* Impression::mutable_custom_data(int index) {
  // @@protoc_insertion_point(field_mutable:notifications.proto.Impression.custom_data)
  return custom_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >*
Impression::mutable_custom_data() {
  // @@protoc_insertion_point(field_mutable_list:notifications.proto.Impression.custom_data)
  return &custom_data_;
}
inline const ::notifications::proto::CustomData& Impression::_internal_custom_data(int index) const {
  return custom_data_.Get(index);
}
inline const ::notifications::proto::CustomData& Impression::custom_data(int index) const {
  // @@protoc_insertion_point(field_get:notifications.proto.Impression.custom_data)
  return _internal_custom_data(index);
}
inline ::notifications::proto::CustomData* Impression::_internal_add_custom_data() {
  return custom_data_.Add();
}
inline ::notifications::proto::CustomData* Impression::add_custom_data() {
  ::notifications::proto::CustomData* _add = _internal_add_custom_data();
  // @@protoc_insertion_point(field_add:notifications.proto.Impression.custom_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >&
Impression::custom_data() const {
  // @@protoc_insertion_point(field_list:notifications.proto.Impression.custom_data)
  return custom_data_;
}

// optional int64 ignore_timeout_duration = 8;
inline bool Impression::_internal_has_ignore_timeout_duration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Impression::has_ignore_timeout_duration() const {
  return _internal_has_ignore_timeout_duration();
}
inline void Impression::clear_ignore_timeout_duration() {
  ignore_timeout_duration_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t Impression::_internal_ignore_timeout_duration() const {
  return ignore_timeout_duration_;
}
inline int64_t Impression::ignore_timeout_duration() const {
  // @@protoc_insertion_point(field_get:notifications.proto.Impression.ignore_timeout_duration)
  return _internal_ignore_timeout_duration();
}
inline void Impression::_internal_set_ignore_timeout_duration(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  ignore_timeout_duration_ = value;
}
inline void Impression::set_ignore_timeout_duration(int64_t value) {
  _internal_set_ignore_timeout_duration(value);
  // @@protoc_insertion_point(field_set:notifications.proto.Impression.ignore_timeout_duration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace notifications

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::notifications::proto::Impression_UserFeedback> : ::std::true_type {};
template <> struct is_proto_enum< ::notifications::proto::Impression_ImpressionResult> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_impression_2eproto
