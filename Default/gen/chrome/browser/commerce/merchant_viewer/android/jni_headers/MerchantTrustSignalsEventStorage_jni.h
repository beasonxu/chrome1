// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsEventStorage

#ifndef org_chromium_chrome_browser_merchant_viewer_MerchantTrustSignalsEventStorage_JNI
#define org_chromium_chrome_browser_merchant_viewer_MerchantTrustSignalsEventStorage_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage[];
const char
    kClassPath_org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage[] =
    "org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsEventStorage";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage_clazz(nullptr);
#ifndef org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage_clazz_defined
#define org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage_clazz_defined
inline jclass
    org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage,
      &g_org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_MerchantTrustSignalsEventStorage_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& handle);

JNI_GENERATOR_EXPORT void Java_J_N_MEbfTMCO(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject handle) {
  return JNI_MerchantTrustSignalsEventStorage_Init(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, handle));
}

JNI_GENERATOR_EXPORT void Java_J_N_MdTDFP2V(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMerchantSignalDB,
    jstring key,
    jlong timestamp,
    jobject onComplete) {
  MerchantSignalDB* native = reinterpret_cast<MerchantSignalDB*>(nativeMerchantSignalDB);
  CHECK_NATIVE_PTR(env, jcaller, native, "Save");
  return native->Save(env, base::android::JavaParamRef<jstring>(env, key), timestamp,
      base::android::JavaParamRef<jobject>(env, onComplete));
}

JNI_GENERATOR_EXPORT void Java_J_N_MPkT1XIl(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMerchantSignalDB,
    jstring key,
    jobject callback) {
  MerchantSignalDB* native = reinterpret_cast<MerchantSignalDB*>(nativeMerchantSignalDB);
  CHECK_NATIVE_PTR(env, jcaller, native, "Load");
  return native->Load(env, base::android::JavaParamRef<jstring>(env, key),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mt2_000244t7x(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMerchantSignalDB,
    jstring prefix,
    jobject callback) {
  MerchantSignalDB* native = reinterpret_cast<MerchantSignalDB*>(nativeMerchantSignalDB);
  CHECK_NATIVE_PTR(env, jcaller, native, "LoadWithPrefix");
  return native->LoadWithPrefix(env, base::android::JavaParamRef<jstring>(env, prefix),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MlUFx9GQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMerchantSignalDB,
    jstring key,
    jobject onComplete) {
  MerchantSignalDB* native = reinterpret_cast<MerchantSignalDB*>(nativeMerchantSignalDB);
  CHECK_NATIVE_PTR(env, jcaller, native, "Delete");
  return native->Delete(env, base::android::JavaParamRef<jstring>(env, key),
      base::android::JavaParamRef<jobject>(env, onComplete));
}

JNI_GENERATOR_EXPORT void Java_J_N_MU01VCka(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMerchantSignalDB,
    jobject onComplete) {
  MerchantSignalDB* native = reinterpret_cast<MerchantSignalDB*>(nativeMerchantSignalDB);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteAll");
  return native->DeleteAll(env, base::android::JavaParamRef<jobject>(env, onComplete));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage_setNativePtr(nullptr);
static void Java_MerchantTrustSignalsEventStorage_setNativePtr(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativePtr) {
  jclass clazz =
      org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setNativePtr",
          "(J)V",
&g_org_chromium_chrome_browser_merchant_1viewer_MerchantTrustSignalsEventStorage_setNativePtr);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativePtr);
}

#endif  // org_chromium_chrome_browser_merchant_viewer_MerchantTrustSignalsEventStorage_JNI
