// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: probe_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_probe_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_probe_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_probe_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_probe_5fmessage_2eproto {
  static const uint32_t offsets[];
};
namespace chrome_browser_net {
class ProbePacket;
struct ProbePacketDefaultTypeInternal;
extern ProbePacketDefaultTypeInternal _ProbePacket_default_instance_;
class ProbePacket_Header;
struct ProbePacket_HeaderDefaultTypeInternal;
extern ProbePacket_HeaderDefaultTypeInternal _ProbePacket_Header_default_instance_;
class ProbePacket_Token;
struct ProbePacket_TokenDefaultTypeInternal;
extern ProbePacket_TokenDefaultTypeInternal _ProbePacket_Token_default_instance_;
}  // namespace chrome_browser_net
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_net::ProbePacket* Arena::CreateMaybeMessage<::chrome_browser_net::ProbePacket>(Arena*);
template<> ::chrome_browser_net::ProbePacket_Header* Arena::CreateMaybeMessage<::chrome_browser_net::ProbePacket_Header>(Arena*);
template<> ::chrome_browser_net::ProbePacket_Token* Arena::CreateMaybeMessage<::chrome_browser_net::ProbePacket_Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_net {

enum ProbePacket_Type : int {
  ProbePacket_Type_UNKNOWN = 0,
  ProbePacket_Type_HELLO_REQUEST = 1,
  ProbePacket_Type_HELLO_REPLY = 2,
  ProbePacket_Type_PROBE_REQUEST = 3,
  ProbePacket_Type_PROBE_REPLY = 4
};
bool ProbePacket_Type_IsValid(int value);
constexpr ProbePacket_Type ProbePacket_Type_Type_MIN = ProbePacket_Type_UNKNOWN;
constexpr ProbePacket_Type ProbePacket_Type_Type_MAX = ProbePacket_Type_PROBE_REPLY;
constexpr int ProbePacket_Type_Type_ARRAYSIZE = ProbePacket_Type_Type_MAX + 1;

const std::string& ProbePacket_Type_Name(ProbePacket_Type value);
template<typename T>
inline const std::string& ProbePacket_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProbePacket_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProbePacket_Type_Name.");
  return ProbePacket_Type_Name(static_cast<ProbePacket_Type>(enum_t_value));
}
bool ProbePacket_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProbePacket_Type* value);
// ===================================================================

class ProbePacket_Header final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_net.ProbePacket.Header) */ {
 public:
  inline ProbePacket_Header() : ProbePacket_Header(nullptr) {}
  ~ProbePacket_Header() override;
  explicit PROTOBUF_CONSTEXPR ProbePacket_Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProbePacket_Header(const ProbePacket_Header& from);
  ProbePacket_Header(ProbePacket_Header&& from) noexcept
    : ProbePacket_Header() {
    *this = ::std::move(from);
  }

  inline ProbePacket_Header& operator=(const ProbePacket_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbePacket_Header& operator=(ProbePacket_Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProbePacket_Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProbePacket_Header* internal_default_instance() {
    return reinterpret_cast<const ProbePacket_Header*>(
               &_ProbePacket_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProbePacket_Header& a, ProbePacket_Header& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProbePacket_Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProbePacket_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProbePacket_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProbePacket_Header>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProbePacket_Header& from);
  void MergeFrom(const ProbePacket_Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProbePacket_Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_net.ProbePacket.Header";
  }
  protected:
  explicit ProbePacket_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kChecksumFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // required uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // optional uint32 checksum = 2;
  bool has_checksum() const;
  private:
  bool _internal_has_checksum() const;
  public:
  void clear_checksum();
  uint32_t checksum() const;
  void set_checksum(uint32_t value);
  private:
  uint32_t _internal_checksum() const;
  void _internal_set_checksum(uint32_t value);
  public:

  // optional .chrome_browser_net.ProbePacket.Type type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::chrome_browser_net::ProbePacket_Type type() const;
  void set_type(::chrome_browser_net::ProbePacket_Type value);
  private:
  ::chrome_browser_net::ProbePacket_Type _internal_type() const;
  void _internal_set_type(::chrome_browser_net::ProbePacket_Type value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_net.ProbePacket.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t version_;
  uint32_t checksum_;
  int type_;
  friend struct ::TableStruct_probe_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ProbePacket_Token final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_net.ProbePacket.Token) */ {
 public:
  inline ProbePacket_Token() : ProbePacket_Token(nullptr) {}
  ~ProbePacket_Token() override;
  explicit PROTOBUF_CONSTEXPR ProbePacket_Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProbePacket_Token(const ProbePacket_Token& from);
  ProbePacket_Token(ProbePacket_Token&& from) noexcept
    : ProbePacket_Token() {
    *this = ::std::move(from);
  }

  inline ProbePacket_Token& operator=(const ProbePacket_Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbePacket_Token& operator=(ProbePacket_Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProbePacket_Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProbePacket_Token* internal_default_instance() {
    return reinterpret_cast<const ProbePacket_Token*>(
               &_ProbePacket_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProbePacket_Token& a, ProbePacket_Token& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProbePacket_Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProbePacket_Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProbePacket_Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProbePacket_Token>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProbePacket_Token& from);
  void MergeFrom(const ProbePacket_Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProbePacket_Token* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_net.ProbePacket.Token";
  }
  protected:
  explicit ProbePacket_Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kTimestampMicrosFieldNumber = 1,
  };
  // required bytes hash = 2;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // required uint64 timestamp_micros = 1;
  bool has_timestamp_micros() const;
  private:
  bool _internal_has_timestamp_micros() const;
  public:
  void clear_timestamp_micros();
  uint64_t timestamp_micros() const;
  void set_timestamp_micros(uint64_t value);
  private:
  uint64_t _internal_timestamp_micros() const;
  void _internal_set_timestamp_micros(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_net.ProbePacket.Token)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  uint64_t timestamp_micros_;
  friend struct ::TableStruct_probe_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ProbePacket final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_net.ProbePacket) */ {
 public:
  inline ProbePacket() : ProbePacket(nullptr) {}
  ~ProbePacket() override;
  explicit PROTOBUF_CONSTEXPR ProbePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProbePacket(const ProbePacket& from);
  ProbePacket(ProbePacket&& from) noexcept
    : ProbePacket() {
    *this = ::std::move(from);
  }

  inline ProbePacket& operator=(const ProbePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbePacket& operator=(ProbePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProbePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProbePacket* internal_default_instance() {
    return reinterpret_cast<const ProbePacket*>(
               &_ProbePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProbePacket& a, ProbePacket& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProbePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProbePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProbePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProbePacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProbePacket& from);
  void MergeFrom(const ProbePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProbePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_net.ProbePacket";
  }
  protected:
  explicit ProbePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProbePacket_Header Header;
  typedef ProbePacket_Token Token;

  typedef ProbePacket_Type Type;
  static constexpr Type UNKNOWN =
    ProbePacket_Type_UNKNOWN;
  static constexpr Type HELLO_REQUEST =
    ProbePacket_Type_HELLO_REQUEST;
  static constexpr Type HELLO_REPLY =
    ProbePacket_Type_HELLO_REPLY;
  static constexpr Type PROBE_REQUEST =
    ProbePacket_Type_PROBE_REQUEST;
  static constexpr Type PROBE_REPLY =
    ProbePacket_Type_PROBE_REPLY;
  static inline bool Type_IsValid(int value) {
    return ProbePacket_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ProbePacket_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ProbePacket_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ProbePacket_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ProbePacket_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ProbePacket_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPaddingFieldNumber = 8,
    kHeaderFieldNumber = 1,
    kTokenFieldNumber = 2,
    kGroupIdFieldNumber = 3,
    kPacketIndexFieldNumber = 4,
    kProbeSizeBytesFieldNumber = 5,
    kPacingIntervalMicrosFieldNumber = 6,
    kServerProcessingMicrosFieldNumber = 9,
    kNumberProbePacketsFieldNumber = 7,
  };
  // optional bytes padding = 8;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  const std::string& padding() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_padding(ArgT0&& arg0, ArgT... args);
  std::string* mutable_padding();
  PROTOBUF_NODISCARD std::string* release_padding();
  void set_allocated_padding(std::string* padding);
  private:
  const std::string& _internal_padding() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_padding(const std::string& value);
  std::string* _internal_mutable_padding();
  public:

  // optional .chrome_browser_net.ProbePacket.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::chrome_browser_net::ProbePacket_Header& header() const;
  PROTOBUF_NODISCARD ::chrome_browser_net::ProbePacket_Header* release_header();
  ::chrome_browser_net::ProbePacket_Header* mutable_header();
  void set_allocated_header(::chrome_browser_net::ProbePacket_Header* header);
  private:
  const ::chrome_browser_net::ProbePacket_Header& _internal_header() const;
  ::chrome_browser_net::ProbePacket_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::chrome_browser_net::ProbePacket_Header* header);
  ::chrome_browser_net::ProbePacket_Header* unsafe_arena_release_header();

  // optional .chrome_browser_net.ProbePacket.Token token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::chrome_browser_net::ProbePacket_Token& token() const;
  PROTOBUF_NODISCARD ::chrome_browser_net::ProbePacket_Token* release_token();
  ::chrome_browser_net::ProbePacket_Token* mutable_token();
  void set_allocated_token(::chrome_browser_net::ProbePacket_Token* token);
  private:
  const ::chrome_browser_net::ProbePacket_Token& _internal_token() const;
  ::chrome_browser_net::ProbePacket_Token* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::chrome_browser_net::ProbePacket_Token* token);
  ::chrome_browser_net::ProbePacket_Token* unsafe_arena_release_token();

  // optional uint32 group_id = 3;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // optional uint32 packet_index = 4;
  bool has_packet_index() const;
  private:
  bool _internal_has_packet_index() const;
  public:
  void clear_packet_index();
  uint32_t packet_index() const;
  void set_packet_index(uint32_t value);
  private:
  uint32_t _internal_packet_index() const;
  void _internal_set_packet_index(uint32_t value);
  public:

  // optional uint32 probe_size_bytes = 5;
  bool has_probe_size_bytes() const;
  private:
  bool _internal_has_probe_size_bytes() const;
  public:
  void clear_probe_size_bytes();
  uint32_t probe_size_bytes() const;
  void set_probe_size_bytes(uint32_t value);
  private:
  uint32_t _internal_probe_size_bytes() const;
  void _internal_set_probe_size_bytes(uint32_t value);
  public:

  // optional uint32 pacing_interval_micros = 6;
  bool has_pacing_interval_micros() const;
  private:
  bool _internal_has_pacing_interval_micros() const;
  public:
  void clear_pacing_interval_micros();
  uint32_t pacing_interval_micros() const;
  void set_pacing_interval_micros(uint32_t value);
  private:
  uint32_t _internal_pacing_interval_micros() const;
  void _internal_set_pacing_interval_micros(uint32_t value);
  public:

  // optional int64 server_processing_micros = 9;
  bool has_server_processing_micros() const;
  private:
  bool _internal_has_server_processing_micros() const;
  public:
  void clear_server_processing_micros();
  int64_t server_processing_micros() const;
  void set_server_processing_micros(int64_t value);
  private:
  int64_t _internal_server_processing_micros() const;
  void _internal_set_server_processing_micros(int64_t value);
  public:

  // optional uint32 number_probe_packets = 7;
  bool has_number_probe_packets() const;
  private:
  bool _internal_has_number_probe_packets() const;
  public:
  void clear_number_probe_packets();
  uint32_t number_probe_packets() const;
  void set_number_probe_packets(uint32_t value);
  private:
  uint32_t _internal_number_probe_packets() const;
  void _internal_set_number_probe_packets(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_net.ProbePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr padding_;
  ::chrome_browser_net::ProbePacket_Header* header_;
  ::chrome_browser_net::ProbePacket_Token* token_;
  uint32_t group_id_;
  uint32_t packet_index_;
  uint32_t probe_size_bytes_;
  uint32_t pacing_interval_micros_;
  int64_t server_processing_micros_;
  uint32_t number_probe_packets_;
  friend struct ::TableStruct_probe_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProbePacket_Header

// required uint32 version = 1;
inline bool ProbePacket_Header::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProbePacket_Header::has_version() const {
  return _internal_has_version();
}
inline void ProbePacket_Header::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ProbePacket_Header::_internal_version() const {
  return version_;
}
inline uint32_t ProbePacket_Header::version() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.Header.version)
  return _internal_version();
}
inline void ProbePacket_Header::_internal_set_version(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void ProbePacket_Header::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.Header.version)
}

// optional uint32 checksum = 2;
inline bool ProbePacket_Header::_internal_has_checksum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProbePacket_Header::has_checksum() const {
  return _internal_has_checksum();
}
inline void ProbePacket_Header::clear_checksum() {
  checksum_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ProbePacket_Header::_internal_checksum() const {
  return checksum_;
}
inline uint32_t ProbePacket_Header::checksum() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.Header.checksum)
  return _internal_checksum();
}
inline void ProbePacket_Header::_internal_set_checksum(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  checksum_ = value;
}
inline void ProbePacket_Header::set_checksum(uint32_t value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.Header.checksum)
}

// optional .chrome_browser_net.ProbePacket.Type type = 3;
inline bool ProbePacket_Header::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProbePacket_Header::has_type() const {
  return _internal_has_type();
}
inline void ProbePacket_Header::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::chrome_browser_net::ProbePacket_Type ProbePacket_Header::_internal_type() const {
  return static_cast< ::chrome_browser_net::ProbePacket_Type >(type_);
}
inline ::chrome_browser_net::ProbePacket_Type ProbePacket_Header::type() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.Header.type)
  return _internal_type();
}
inline void ProbePacket_Header::_internal_set_type(::chrome_browser_net::ProbePacket_Type value) {
  assert(::chrome_browser_net::ProbePacket_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void ProbePacket_Header::set_type(::chrome_browser_net::ProbePacket_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.Header.type)
}

// -------------------------------------------------------------------

// ProbePacket_Token

// required uint64 timestamp_micros = 1;
inline bool ProbePacket_Token::_internal_has_timestamp_micros() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProbePacket_Token::has_timestamp_micros() const {
  return _internal_has_timestamp_micros();
}
inline void ProbePacket_Token::clear_timestamp_micros() {
  timestamp_micros_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ProbePacket_Token::_internal_timestamp_micros() const {
  return timestamp_micros_;
}
inline uint64_t ProbePacket_Token::timestamp_micros() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.Token.timestamp_micros)
  return _internal_timestamp_micros();
}
inline void ProbePacket_Token::_internal_set_timestamp_micros(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_micros_ = value;
}
inline void ProbePacket_Token::set_timestamp_micros(uint64_t value) {
  _internal_set_timestamp_micros(value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.Token.timestamp_micros)
}

// required bytes hash = 2;
inline bool ProbePacket_Token::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProbePacket_Token::has_hash() const {
  return _internal_has_hash();
}
inline void ProbePacket_Token::clear_hash() {
  hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProbePacket_Token::hash() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.Token.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProbePacket_Token::set_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.Token.hash)
}
inline std::string* ProbePacket_Token::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:chrome_browser_net.ProbePacket.Token.hash)
  return _s;
}
inline const std::string& ProbePacket_Token::_internal_hash() const {
  return hash_.Get();
}
inline void ProbePacket_Token::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(value, GetArenaForAllocation());
}
inline std::string* ProbePacket_Token::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  return hash_.Mutable(GetArenaForAllocation());
}
inline std::string* ProbePacket_Token::release_hash() {
  // @@protoc_insertion_point(field_release:chrome_browser_net.ProbePacket.Token.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProbePacket_Token::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_net.ProbePacket.Token.hash)
}

// -------------------------------------------------------------------

// ProbePacket

// optional .chrome_browser_net.ProbePacket.Header header = 1;
inline bool ProbePacket::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ProbePacket::has_header() const {
  return _internal_has_header();
}
inline void ProbePacket::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::chrome_browser_net::ProbePacket_Header& ProbePacket::_internal_header() const {
  const ::chrome_browser_net::ProbePacket_Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::chrome_browser_net::ProbePacket_Header&>(
      ::chrome_browser_net::_ProbePacket_Header_default_instance_);
}
inline const ::chrome_browser_net::ProbePacket_Header& ProbePacket::header() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.header)
  return _internal_header();
}
inline void ProbePacket::unsafe_arena_set_allocated_header(
    ::chrome_browser_net::ProbePacket_Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chrome_browser_net.ProbePacket.header)
}
inline ::chrome_browser_net::ProbePacket_Header* ProbePacket::release_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::chrome_browser_net::ProbePacket_Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chrome_browser_net::ProbePacket_Header* ProbePacket::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:chrome_browser_net.ProbePacket.header)
  _has_bits_[0] &= ~0x00000002u;
  ::chrome_browser_net::ProbePacket_Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::chrome_browser_net::ProbePacket_Header* ProbePacket::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_net::ProbePacket_Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::chrome_browser_net::ProbePacket_Header* ProbePacket::mutable_header() {
  ::chrome_browser_net::ProbePacket_Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:chrome_browser_net.ProbePacket.header)
  return _msg;
}
inline void ProbePacket::set_allocated_header(::chrome_browser_net::ProbePacket_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_net.ProbePacket.header)
}

// optional .chrome_browser_net.ProbePacket.Token token = 2;
inline bool ProbePacket::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || token_ != nullptr);
  return value;
}
inline bool ProbePacket::has_token() const {
  return _internal_has_token();
}
inline void ProbePacket::clear_token() {
  if (token_ != nullptr) token_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::chrome_browser_net::ProbePacket_Token& ProbePacket::_internal_token() const {
  const ::chrome_browser_net::ProbePacket_Token* p = token_;
  return p != nullptr ? *p : reinterpret_cast<const ::chrome_browser_net::ProbePacket_Token&>(
      ::chrome_browser_net::_ProbePacket_Token_default_instance_);
}
inline const ::chrome_browser_net::ProbePacket_Token& ProbePacket::token() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.token)
  return _internal_token();
}
inline void ProbePacket::unsafe_arena_set_allocated_token(
    ::chrome_browser_net::ProbePacket_Token* token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  token_ = token;
  if (token) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chrome_browser_net.ProbePacket.token)
}
inline ::chrome_browser_net::ProbePacket_Token* ProbePacket::release_token() {
  _has_bits_[0] &= ~0x00000004u;
  ::chrome_browser_net::ProbePacket_Token* temp = token_;
  token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chrome_browser_net::ProbePacket_Token* ProbePacket::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:chrome_browser_net.ProbePacket.token)
  _has_bits_[0] &= ~0x00000004u;
  ::chrome_browser_net::ProbePacket_Token* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::chrome_browser_net::ProbePacket_Token* ProbePacket::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000004u;
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_net::ProbePacket_Token>(GetArenaForAllocation());
    token_ = p;
  }
  return token_;
}
inline ::chrome_browser_net::ProbePacket_Token* ProbePacket::mutable_token() {
  ::chrome_browser_net::ProbePacket_Token* _msg = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:chrome_browser_net.ProbePacket.token)
  return _msg;
}
inline void ProbePacket::set_allocated_token(::chrome_browser_net::ProbePacket_Token* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(token);
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_net.ProbePacket.token)
}

// optional uint32 group_id = 3;
inline bool ProbePacket::_internal_has_group_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProbePacket::has_group_id() const {
  return _internal_has_group_id();
}
inline void ProbePacket::clear_group_id() {
  group_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ProbePacket::_internal_group_id() const {
  return group_id_;
}
inline uint32_t ProbePacket::group_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.group_id)
  return _internal_group_id();
}
inline void ProbePacket::_internal_set_group_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  group_id_ = value;
}
inline void ProbePacket::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.group_id)
}

// optional uint32 packet_index = 4;
inline bool ProbePacket::_internal_has_packet_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProbePacket::has_packet_index() const {
  return _internal_has_packet_index();
}
inline void ProbePacket::clear_packet_index() {
  packet_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ProbePacket::_internal_packet_index() const {
  return packet_index_;
}
inline uint32_t ProbePacket::packet_index() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.packet_index)
  return _internal_packet_index();
}
inline void ProbePacket::_internal_set_packet_index(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  packet_index_ = value;
}
inline void ProbePacket::set_packet_index(uint32_t value) {
  _internal_set_packet_index(value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.packet_index)
}

// optional uint32 probe_size_bytes = 5;
inline bool ProbePacket::_internal_has_probe_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProbePacket::has_probe_size_bytes() const {
  return _internal_has_probe_size_bytes();
}
inline void ProbePacket::clear_probe_size_bytes() {
  probe_size_bytes_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ProbePacket::_internal_probe_size_bytes() const {
  return probe_size_bytes_;
}
inline uint32_t ProbePacket::probe_size_bytes() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.probe_size_bytes)
  return _internal_probe_size_bytes();
}
inline void ProbePacket::_internal_set_probe_size_bytes(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  probe_size_bytes_ = value;
}
inline void ProbePacket::set_probe_size_bytes(uint32_t value) {
  _internal_set_probe_size_bytes(value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.probe_size_bytes)
}

// optional uint32 pacing_interval_micros = 6;
inline bool ProbePacket::_internal_has_pacing_interval_micros() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProbePacket::has_pacing_interval_micros() const {
  return _internal_has_pacing_interval_micros();
}
inline void ProbePacket::clear_pacing_interval_micros() {
  pacing_interval_micros_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t ProbePacket::_internal_pacing_interval_micros() const {
  return pacing_interval_micros_;
}
inline uint32_t ProbePacket::pacing_interval_micros() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.pacing_interval_micros)
  return _internal_pacing_interval_micros();
}
inline void ProbePacket::_internal_set_pacing_interval_micros(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  pacing_interval_micros_ = value;
}
inline void ProbePacket::set_pacing_interval_micros(uint32_t value) {
  _internal_set_pacing_interval_micros(value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.pacing_interval_micros)
}

// optional uint32 number_probe_packets = 7;
inline bool ProbePacket::_internal_has_number_probe_packets() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProbePacket::has_number_probe_packets() const {
  return _internal_has_number_probe_packets();
}
inline void ProbePacket::clear_number_probe_packets() {
  number_probe_packets_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t ProbePacket::_internal_number_probe_packets() const {
  return number_probe_packets_;
}
inline uint32_t ProbePacket::number_probe_packets() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.number_probe_packets)
  return _internal_number_probe_packets();
}
inline void ProbePacket::_internal_set_number_probe_packets(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  number_probe_packets_ = value;
}
inline void ProbePacket::set_number_probe_packets(uint32_t value) {
  _internal_set_number_probe_packets(value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.number_probe_packets)
}

// optional int64 server_processing_micros = 9;
inline bool ProbePacket::_internal_has_server_processing_micros() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProbePacket::has_server_processing_micros() const {
  return _internal_has_server_processing_micros();
}
inline void ProbePacket::clear_server_processing_micros() {
  server_processing_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00000080u;
}
inline int64_t ProbePacket::_internal_server_processing_micros() const {
  return server_processing_micros_;
}
inline int64_t ProbePacket::server_processing_micros() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.server_processing_micros)
  return _internal_server_processing_micros();
}
inline void ProbePacket::_internal_set_server_processing_micros(int64_t value) {
  _has_bits_[0] |= 0x00000080u;
  server_processing_micros_ = value;
}
inline void ProbePacket::set_server_processing_micros(int64_t value) {
  _internal_set_server_processing_micros(value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.server_processing_micros)
}

// optional bytes padding = 8;
inline bool ProbePacket::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProbePacket::has_padding() const {
  return _internal_has_padding();
}
inline void ProbePacket::clear_padding() {
  padding_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProbePacket::padding() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.padding)
  return _internal_padding();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProbePacket::set_padding(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 padding_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.padding)
}
inline std::string* ProbePacket::mutable_padding() {
  std::string* _s = _internal_mutable_padding();
  // @@protoc_insertion_point(field_mutable:chrome_browser_net.ProbePacket.padding)
  return _s;
}
inline const std::string& ProbePacket::_internal_padding() const {
  return padding_.Get();
}
inline void ProbePacket::_internal_set_padding(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  padding_.Set(value, GetArenaForAllocation());
}
inline std::string* ProbePacket::_internal_mutable_padding() {
  _has_bits_[0] |= 0x00000001u;
  return padding_.Mutable(GetArenaForAllocation());
}
inline std::string* ProbePacket::release_padding() {
  // @@protoc_insertion_point(field_release:chrome_browser_net.ProbePacket.padding)
  if (!_internal_has_padding()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = padding_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (padding_.IsDefault()) {
    padding_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProbePacket::set_allocated_padding(std::string* padding) {
  if (padding != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  padding_.SetAllocated(padding, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (padding_.IsDefault()) {
    padding_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_net.ProbePacket.padding)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_net

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chrome_browser_net::ProbePacket_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_probe_5fmessage_2eproto
