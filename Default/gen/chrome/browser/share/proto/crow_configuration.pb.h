// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crow_configuration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crow_5fconfiguration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crow_5fconfiguration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crow_5fconfiguration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crow_5fconfiguration_2eproto {
  static const uint32_t offsets[];
};
namespace crow {
namespace mojom {
class CrowConfiguration;
struct CrowConfigurationDefaultTypeInternal;
extern CrowConfigurationDefaultTypeInternal _CrowConfiguration_default_instance_;
class Publisher;
struct PublisherDefaultTypeInternal;
extern PublisherDefaultTypeInternal _Publisher_default_instance_;
}  // namespace mojom
}  // namespace crow
PROTOBUF_NAMESPACE_OPEN
template<> ::crow::mojom::CrowConfiguration* Arena::CreateMaybeMessage<::crow::mojom::CrowConfiguration>(Arena*);
template<> ::crow::mojom::Publisher* Arena::CreateMaybeMessage<::crow::mojom::Publisher>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace crow {
namespace mojom {

// ===================================================================

class CrowConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:crow.mojom.CrowConfiguration) */ {
 public:
  inline CrowConfiguration() : CrowConfiguration(nullptr) {}
  ~CrowConfiguration() override;
  explicit PROTOBUF_CONSTEXPR CrowConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrowConfiguration(const CrowConfiguration& from);
  CrowConfiguration(CrowConfiguration&& from) noexcept
    : CrowConfiguration() {
    *this = ::std::move(from);
  }

  inline CrowConfiguration& operator=(const CrowConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrowConfiguration& operator=(CrowConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CrowConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrowConfiguration* internal_default_instance() {
    return reinterpret_cast<const CrowConfiguration*>(
               &_CrowConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CrowConfiguration& a, CrowConfiguration& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CrowConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrowConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrowConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CrowConfiguration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CrowConfiguration& from);
  void MergeFrom(const CrowConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CrowConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crow.mojom.CrowConfiguration";
  }
  protected:
  explicit CrowConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublisherFieldNumber = 1,
    kAllowedCountryCodesFieldNumber = 2,
  };
  // repeated .crow.mojom.Publisher publisher = 1;
  int publisher_size() const;
  private:
  int _internal_publisher_size() const;
  public:
  void clear_publisher();
  ::crow::mojom::Publisher* mutable_publisher(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crow::mojom::Publisher >*
      mutable_publisher();
  private:
  const ::crow::mojom::Publisher& _internal_publisher(int index) const;
  ::crow::mojom::Publisher* _internal_add_publisher();
  public:
  const ::crow::mojom::Publisher& publisher(int index) const;
  ::crow::mojom::Publisher* add_publisher();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crow::mojom::Publisher >&
      publisher() const;

  // repeated string allowed_country_codes = 2;
  int allowed_country_codes_size() const;
  private:
  int _internal_allowed_country_codes_size() const;
  public:
  void clear_allowed_country_codes();
  const std::string& allowed_country_codes(int index) const;
  std::string* mutable_allowed_country_codes(int index);
  void set_allowed_country_codes(int index, const std::string& value);
  void set_allowed_country_codes(int index, std::string&& value);
  void set_allowed_country_codes(int index, const char* value);
  void set_allowed_country_codes(int index, const char* value, size_t size);
  std::string* add_allowed_country_codes();
  void add_allowed_country_codes(const std::string& value);
  void add_allowed_country_codes(std::string&& value);
  void add_allowed_country_codes(const char* value);
  void add_allowed_country_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_country_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_country_codes();
  private:
  const std::string& _internal_allowed_country_codes(int index) const;
  std::string* _internal_add_allowed_country_codes();
  public:

  // @@protoc_insertion_point(class_scope:crow.mojom.CrowConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crow::mojom::Publisher > publisher_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_country_codes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_crow_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class Publisher final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:crow.mojom.Publisher) */ {
 public:
  inline Publisher() : Publisher(nullptr) {}
  ~Publisher() override;
  explicit PROTOBUF_CONSTEXPR Publisher(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Publisher(const Publisher& from);
  Publisher(Publisher&& from) noexcept
    : Publisher() {
    *this = ::std::move(from);
  }

  inline Publisher& operator=(const Publisher& from) {
    CopyFrom(from);
    return *this;
  }
  inline Publisher& operator=(Publisher&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Publisher& default_instance() {
    return *internal_default_instance();
  }
  static inline const Publisher* internal_default_instance() {
    return reinterpret_cast<const Publisher*>(
               &_Publisher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Publisher& a, Publisher& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Publisher* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Publisher* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Publisher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Publisher>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Publisher& from);
  void MergeFrom(const Publisher& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Publisher* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crow.mojom.Publisher";
  }
  protected:
  explicit Publisher(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kPublicationIdFieldNumber = 1,
  };
  // repeated string host = 2;
  int host_size() const;
  private:
  int _internal_host_size() const;
  public:
  void clear_host();
  const std::string& host(int index) const;
  std::string* mutable_host(int index);
  void set_host(int index, const std::string& value);
  void set_host(int index, std::string&& value);
  void set_host(int index, const char* value);
  void set_host(int index, const char* value, size_t size);
  std::string* add_host();
  void add_host(const std::string& value);
  void add_host(std::string&& value);
  void add_host(const char* value);
  void add_host(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& host() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_host();
  private:
  const std::string& _internal_host(int index) const;
  std::string* _internal_add_host();
  public:

  // optional string publication_id = 1;
  bool has_publication_id() const;
  private:
  bool _internal_has_publication_id() const;
  public:
  void clear_publication_id();
  const std::string& publication_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publication_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publication_id();
  PROTOBUF_NODISCARD std::string* release_publication_id();
  void set_allocated_publication_id(std::string* publication_id);
  private:
  const std::string& _internal_publication_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publication_id(const std::string& value);
  std::string* _internal_mutable_publication_id();
  public:

  // @@protoc_insertion_point(class_scope:crow.mojom.Publisher)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publication_id_;
  friend struct ::TableStruct_crow_5fconfiguration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CrowConfiguration

// repeated .crow.mojom.Publisher publisher = 1;
inline int CrowConfiguration::_internal_publisher_size() const {
  return publisher_.size();
}
inline int CrowConfiguration::publisher_size() const {
  return _internal_publisher_size();
}
inline void CrowConfiguration::clear_publisher() {
  publisher_.Clear();
}
inline ::crow::mojom::Publisher* CrowConfiguration::mutable_publisher(int index) {
  // @@protoc_insertion_point(field_mutable:crow.mojom.CrowConfiguration.publisher)
  return publisher_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crow::mojom::Publisher >*
CrowConfiguration::mutable_publisher() {
  // @@protoc_insertion_point(field_mutable_list:crow.mojom.CrowConfiguration.publisher)
  return &publisher_;
}
inline const ::crow::mojom::Publisher& CrowConfiguration::_internal_publisher(int index) const {
  return publisher_.Get(index);
}
inline const ::crow::mojom::Publisher& CrowConfiguration::publisher(int index) const {
  // @@protoc_insertion_point(field_get:crow.mojom.CrowConfiguration.publisher)
  return _internal_publisher(index);
}
inline ::crow::mojom::Publisher* CrowConfiguration::_internal_add_publisher() {
  return publisher_.Add();
}
inline ::crow::mojom::Publisher* CrowConfiguration::add_publisher() {
  ::crow::mojom::Publisher* _add = _internal_add_publisher();
  // @@protoc_insertion_point(field_add:crow.mojom.CrowConfiguration.publisher)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crow::mojom::Publisher >&
CrowConfiguration::publisher() const {
  // @@protoc_insertion_point(field_list:crow.mojom.CrowConfiguration.publisher)
  return publisher_;
}

// repeated string allowed_country_codes = 2;
inline int CrowConfiguration::_internal_allowed_country_codes_size() const {
  return allowed_country_codes_.size();
}
inline int CrowConfiguration::allowed_country_codes_size() const {
  return _internal_allowed_country_codes_size();
}
inline void CrowConfiguration::clear_allowed_country_codes() {
  allowed_country_codes_.Clear();
}
inline std::string* CrowConfiguration::add_allowed_country_codes() {
  std::string* _s = _internal_add_allowed_country_codes();
  // @@protoc_insertion_point(field_add_mutable:crow.mojom.CrowConfiguration.allowed_country_codes)
  return _s;
}
inline const std::string& CrowConfiguration::_internal_allowed_country_codes(int index) const {
  return allowed_country_codes_.Get(index);
}
inline const std::string& CrowConfiguration::allowed_country_codes(int index) const {
  // @@protoc_insertion_point(field_get:crow.mojom.CrowConfiguration.allowed_country_codes)
  return _internal_allowed_country_codes(index);
}
inline std::string* CrowConfiguration::mutable_allowed_country_codes(int index) {
  // @@protoc_insertion_point(field_mutable:crow.mojom.CrowConfiguration.allowed_country_codes)
  return allowed_country_codes_.Mutable(index);
}
inline void CrowConfiguration::set_allowed_country_codes(int index, const std::string& value) {
  allowed_country_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:crow.mojom.CrowConfiguration.allowed_country_codes)
}
inline void CrowConfiguration::set_allowed_country_codes(int index, std::string&& value) {
  allowed_country_codes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:crow.mojom.CrowConfiguration.allowed_country_codes)
}
inline void CrowConfiguration::set_allowed_country_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_country_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:crow.mojom.CrowConfiguration.allowed_country_codes)
}
inline void CrowConfiguration::set_allowed_country_codes(int index, const char* value, size_t size) {
  allowed_country_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:crow.mojom.CrowConfiguration.allowed_country_codes)
}
inline std::string* CrowConfiguration::_internal_add_allowed_country_codes() {
  return allowed_country_codes_.Add();
}
inline void CrowConfiguration::add_allowed_country_codes(const std::string& value) {
  allowed_country_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:crow.mojom.CrowConfiguration.allowed_country_codes)
}
inline void CrowConfiguration::add_allowed_country_codes(std::string&& value) {
  allowed_country_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:crow.mojom.CrowConfiguration.allowed_country_codes)
}
inline void CrowConfiguration::add_allowed_country_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_country_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:crow.mojom.CrowConfiguration.allowed_country_codes)
}
inline void CrowConfiguration::add_allowed_country_codes(const char* value, size_t size) {
  allowed_country_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:crow.mojom.CrowConfiguration.allowed_country_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CrowConfiguration::allowed_country_codes() const {
  // @@protoc_insertion_point(field_list:crow.mojom.CrowConfiguration.allowed_country_codes)
  return allowed_country_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CrowConfiguration::mutable_allowed_country_codes() {
  // @@protoc_insertion_point(field_mutable_list:crow.mojom.CrowConfiguration.allowed_country_codes)
  return &allowed_country_codes_;
}

// -------------------------------------------------------------------

// Publisher

// optional string publication_id = 1;
inline bool Publisher::_internal_has_publication_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Publisher::has_publication_id() const {
  return _internal_has_publication_id();
}
inline void Publisher::clear_publication_id() {
  publication_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Publisher::publication_id() const {
  // @@protoc_insertion_point(field_get:crow.mojom.Publisher.publication_id)
  return _internal_publication_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Publisher::set_publication_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 publication_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:crow.mojom.Publisher.publication_id)
}
inline std::string* Publisher::mutable_publication_id() {
  std::string* _s = _internal_mutable_publication_id();
  // @@protoc_insertion_point(field_mutable:crow.mojom.Publisher.publication_id)
  return _s;
}
inline const std::string& Publisher::_internal_publication_id() const {
  return publication_id_.Get();
}
inline void Publisher::_internal_set_publication_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  publication_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Publisher::_internal_mutable_publication_id() {
  _has_bits_[0] |= 0x00000001u;
  return publication_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Publisher::release_publication_id() {
  // @@protoc_insertion_point(field_release:crow.mojom.Publisher.publication_id)
  if (!_internal_has_publication_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = publication_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (publication_id_.IsDefault()) {
    publication_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Publisher::set_allocated_publication_id(std::string* publication_id) {
  if (publication_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  publication_id_.SetAllocated(publication_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (publication_id_.IsDefault()) {
    publication_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:crow.mojom.Publisher.publication_id)
}

// repeated string host = 2;
inline int Publisher::_internal_host_size() const {
  return host_.size();
}
inline int Publisher::host_size() const {
  return _internal_host_size();
}
inline void Publisher::clear_host() {
  host_.Clear();
}
inline std::string* Publisher::add_host() {
  std::string* _s = _internal_add_host();
  // @@protoc_insertion_point(field_add_mutable:crow.mojom.Publisher.host)
  return _s;
}
inline const std::string& Publisher::_internal_host(int index) const {
  return host_.Get(index);
}
inline const std::string& Publisher::host(int index) const {
  // @@protoc_insertion_point(field_get:crow.mojom.Publisher.host)
  return _internal_host(index);
}
inline std::string* Publisher::mutable_host(int index) {
  // @@protoc_insertion_point(field_mutable:crow.mojom.Publisher.host)
  return host_.Mutable(index);
}
inline void Publisher::set_host(int index, const std::string& value) {
  host_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:crow.mojom.Publisher.host)
}
inline void Publisher::set_host(int index, std::string&& value) {
  host_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:crow.mojom.Publisher.host)
}
inline void Publisher::set_host(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  host_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:crow.mojom.Publisher.host)
}
inline void Publisher::set_host(int index, const char* value, size_t size) {
  host_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:crow.mojom.Publisher.host)
}
inline std::string* Publisher::_internal_add_host() {
  return host_.Add();
}
inline void Publisher::add_host(const std::string& value) {
  host_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:crow.mojom.Publisher.host)
}
inline void Publisher::add_host(std::string&& value) {
  host_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:crow.mojom.Publisher.host)
}
inline void Publisher::add_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  host_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:crow.mojom.Publisher.host)
}
inline void Publisher::add_host(const char* value, size_t size) {
  host_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:crow.mojom.Publisher.host)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Publisher::host() const {
  // @@protoc_insertion_point(field_list:crow.mojom.Publisher.host)
  return host_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Publisher::mutable_host() {
  // @@protoc_insertion_point(field_mutable_list:crow.mojom.Publisher.host)
  return &host_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mojom
}  // namespace crow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crow_5fconfiguration_2eproto
