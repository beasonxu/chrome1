// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: share_history_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_share_5fhistory_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_share_5fhistory_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_share_5fhistory_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_share_5fhistory_5fmessage_2eproto {
  static const uint32_t offsets[];
};
namespace sharing {
namespace mojom {
class DayShareHistory;
struct DayShareHistoryDefaultTypeInternal;
extern DayShareHistoryDefaultTypeInternal _DayShareHistory_default_instance_;
class ShareHistory;
struct ShareHistoryDefaultTypeInternal;
extern ShareHistoryDefaultTypeInternal _ShareHistory_default_instance_;
class Target;
struct TargetDefaultTypeInternal;
extern TargetDefaultTypeInternal _Target_default_instance_;
class TargetShareHistory;
struct TargetShareHistoryDefaultTypeInternal;
extern TargetShareHistoryDefaultTypeInternal _TargetShareHistory_default_instance_;
}  // namespace mojom
}  // namespace sharing
PROTOBUF_NAMESPACE_OPEN
template<> ::sharing::mojom::DayShareHistory* Arena::CreateMaybeMessage<::sharing::mojom::DayShareHistory>(Arena*);
template<> ::sharing::mojom::ShareHistory* Arena::CreateMaybeMessage<::sharing::mojom::ShareHistory>(Arena*);
template<> ::sharing::mojom::Target* Arena::CreateMaybeMessage<::sharing::mojom::Target>(Arena*);
template<> ::sharing::mojom::TargetShareHistory* Arena::CreateMaybeMessage<::sharing::mojom::TargetShareHistory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sharing {
namespace mojom {

// ===================================================================

class Target final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sharing.mojom.Target) */ {
 public:
  inline Target() : Target(nullptr) {}
  ~Target() override;
  explicit PROTOBUF_CONSTEXPR Target(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Target(const Target& from);
  Target(Target&& from) noexcept
    : Target() {
    *this = ::std::move(from);
  }

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target& operator=(Target&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Target& default_instance() {
    return *internal_default_instance();
  }
  static inline const Target* internal_default_instance() {
    return reinterpret_cast<const Target*>(
               &_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Target& a, Target& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Target* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Target* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Target>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Target* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sharing.mojom.Target";
  }
  protected:
  explicit Target(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 1,
  };
  // string component_name = 1;
  void clear_component_name();
  const std::string& component_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_name();
  PROTOBUF_NODISCARD std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // @@protoc_insertion_point(class_scope:sharing.mojom.Target)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_share_5fhistory_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ShareHistory final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sharing.mojom.ShareHistory) */ {
 public:
  inline ShareHistory() : ShareHistory(nullptr) {}
  ~ShareHistory() override;
  explicit PROTOBUF_CONSTEXPR ShareHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShareHistory(const ShareHistory& from);
  ShareHistory(ShareHistory&& from) noexcept
    : ShareHistory() {
    *this = ::std::move(from);
  }

  inline ShareHistory& operator=(const ShareHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareHistory& operator=(ShareHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ShareHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShareHistory* internal_default_instance() {
    return reinterpret_cast<const ShareHistory*>(
               &_ShareHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShareHistory& a, ShareHistory& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ShareHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShareHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShareHistory>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShareHistory& from);
  void MergeFrom(const ShareHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShareHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sharing.mojom.ShareHistory";
  }
  protected:
  explicit ShareHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayHistoriesFieldNumber = 1,
  };
  // repeated .sharing.mojom.DayShareHistory day_histories = 1;
  int day_histories_size() const;
  private:
  int _internal_day_histories_size() const;
  public:
  void clear_day_histories();
  ::sharing::mojom::DayShareHistory* mutable_day_histories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sharing::mojom::DayShareHistory >*
      mutable_day_histories();
  private:
  const ::sharing::mojom::DayShareHistory& _internal_day_histories(int index) const;
  ::sharing::mojom::DayShareHistory* _internal_add_day_histories();
  public:
  const ::sharing::mojom::DayShareHistory& day_histories(int index) const;
  ::sharing::mojom::DayShareHistory* add_day_histories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sharing::mojom::DayShareHistory >&
      day_histories() const;

  // @@protoc_insertion_point(class_scope:sharing.mojom.ShareHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sharing::mojom::DayShareHistory > day_histories_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_share_5fhistory_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DayShareHistory final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sharing.mojom.DayShareHistory) */ {
 public:
  inline DayShareHistory() : DayShareHistory(nullptr) {}
  ~DayShareHistory() override;
  explicit PROTOBUF_CONSTEXPR DayShareHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DayShareHistory(const DayShareHistory& from);
  DayShareHistory(DayShareHistory&& from) noexcept
    : DayShareHistory() {
    *this = ::std::move(from);
  }

  inline DayShareHistory& operator=(const DayShareHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline DayShareHistory& operator=(DayShareHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DayShareHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const DayShareHistory* internal_default_instance() {
    return reinterpret_cast<const DayShareHistory*>(
               &_DayShareHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DayShareHistory& a, DayShareHistory& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DayShareHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DayShareHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DayShareHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DayShareHistory>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DayShareHistory& from);
  void MergeFrom(const DayShareHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DayShareHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sharing.mojom.DayShareHistory";
  }
  protected:
  explicit DayShareHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetHistoriesFieldNumber = 2,
    kDayFieldNumber = 1,
  };
  // repeated .sharing.mojom.TargetShareHistory target_histories = 2;
  int target_histories_size() const;
  private:
  int _internal_target_histories_size() const;
  public:
  void clear_target_histories();
  ::sharing::mojom::TargetShareHistory* mutable_target_histories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sharing::mojom::TargetShareHistory >*
      mutable_target_histories();
  private:
  const ::sharing::mojom::TargetShareHistory& _internal_target_histories(int index) const;
  ::sharing::mojom::TargetShareHistory* _internal_add_target_histories();
  public:
  const ::sharing::mojom::TargetShareHistory& target_histories(int index) const;
  ::sharing::mojom::TargetShareHistory* add_target_histories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sharing::mojom::TargetShareHistory >&
      target_histories() const;

  // int32 day = 1;
  void clear_day();
  int32_t day() const;
  void set_day(int32_t value);
  private:
  int32_t _internal_day() const;
  void _internal_set_day(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sharing.mojom.DayShareHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sharing::mojom::TargetShareHistory > target_histories_;
  int32_t day_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_share_5fhistory_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class TargetShareHistory final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sharing.mojom.TargetShareHistory) */ {
 public:
  inline TargetShareHistory() : TargetShareHistory(nullptr) {}
  ~TargetShareHistory() override;
  explicit PROTOBUF_CONSTEXPR TargetShareHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetShareHistory(const TargetShareHistory& from);
  TargetShareHistory(TargetShareHistory&& from) noexcept
    : TargetShareHistory() {
    *this = ::std::move(from);
  }

  inline TargetShareHistory& operator=(const TargetShareHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetShareHistory& operator=(TargetShareHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TargetShareHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetShareHistory* internal_default_instance() {
    return reinterpret_cast<const TargetShareHistory*>(
               &_TargetShareHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TargetShareHistory& a, TargetShareHistory& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TargetShareHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetShareHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetShareHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetShareHistory>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TargetShareHistory& from);
  void MergeFrom(const TargetShareHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TargetShareHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sharing.mojom.TargetShareHistory";
  }
  protected:
  explicit TargetShareHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // .sharing.mojom.Target target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::sharing::mojom::Target& target() const;
  PROTOBUF_NODISCARD ::sharing::mojom::Target* release_target();
  ::sharing::mojom::Target* mutable_target();
  void set_allocated_target(::sharing::mojom::Target* target);
  private:
  const ::sharing::mojom::Target& _internal_target() const;
  ::sharing::mojom::Target* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::sharing::mojom::Target* target);
  ::sharing::mojom::Target* unsafe_arena_release_target();

  // int32 count = 2;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sharing.mojom.TargetShareHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sharing::mojom::Target* target_;
  int32_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_share_5fhistory_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Target

// string component_name = 1;
inline void Target::clear_component_name() {
  component_name_.ClearToEmpty();
}
inline const std::string& Target::component_name() const {
  // @@protoc_insertion_point(field_get:sharing.mojom.Target.component_name)
  return _internal_component_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Target::set_component_name(ArgT0&& arg0, ArgT... args) {
 
 component_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sharing.mojom.Target.component_name)
}
inline std::string* Target::mutable_component_name() {
  std::string* _s = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:sharing.mojom.Target.component_name)
  return _s;
}
inline const std::string& Target::_internal_component_name() const {
  return component_name_.Get();
}
inline void Target::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Target::_internal_mutable_component_name() {
  
  return component_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Target::release_component_name() {
  // @@protoc_insertion_point(field_release:sharing.mojom.Target.component_name)
  return component_name_.Release();
}
inline void Target::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(component_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_name_.IsDefault()) {
    component_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sharing.mojom.Target.component_name)
}

// -------------------------------------------------------------------

// ShareHistory

// repeated .sharing.mojom.DayShareHistory day_histories = 1;
inline int ShareHistory::_internal_day_histories_size() const {
  return day_histories_.size();
}
inline int ShareHistory::day_histories_size() const {
  return _internal_day_histories_size();
}
inline void ShareHistory::clear_day_histories() {
  day_histories_.Clear();
}
inline ::sharing::mojom::DayShareHistory* ShareHistory::mutable_day_histories(int index) {
  // @@protoc_insertion_point(field_mutable:sharing.mojom.ShareHistory.day_histories)
  return day_histories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sharing::mojom::DayShareHistory >*
ShareHistory::mutable_day_histories() {
  // @@protoc_insertion_point(field_mutable_list:sharing.mojom.ShareHistory.day_histories)
  return &day_histories_;
}
inline const ::sharing::mojom::DayShareHistory& ShareHistory::_internal_day_histories(int index) const {
  return day_histories_.Get(index);
}
inline const ::sharing::mojom::DayShareHistory& ShareHistory::day_histories(int index) const {
  // @@protoc_insertion_point(field_get:sharing.mojom.ShareHistory.day_histories)
  return _internal_day_histories(index);
}
inline ::sharing::mojom::DayShareHistory* ShareHistory::_internal_add_day_histories() {
  return day_histories_.Add();
}
inline ::sharing::mojom::DayShareHistory* ShareHistory::add_day_histories() {
  ::sharing::mojom::DayShareHistory* _add = _internal_add_day_histories();
  // @@protoc_insertion_point(field_add:sharing.mojom.ShareHistory.day_histories)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sharing::mojom::DayShareHistory >&
ShareHistory::day_histories() const {
  // @@protoc_insertion_point(field_list:sharing.mojom.ShareHistory.day_histories)
  return day_histories_;
}

// -------------------------------------------------------------------

// DayShareHistory

// int32 day = 1;
inline void DayShareHistory::clear_day() {
  day_ = 0;
}
inline int32_t DayShareHistory::_internal_day() const {
  return day_;
}
inline int32_t DayShareHistory::day() const {
  // @@protoc_insertion_point(field_get:sharing.mojom.DayShareHistory.day)
  return _internal_day();
}
inline void DayShareHistory::_internal_set_day(int32_t value) {
  
  day_ = value;
}
inline void DayShareHistory::set_day(int32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:sharing.mojom.DayShareHistory.day)
}

// repeated .sharing.mojom.TargetShareHistory target_histories = 2;
inline int DayShareHistory::_internal_target_histories_size() const {
  return target_histories_.size();
}
inline int DayShareHistory::target_histories_size() const {
  return _internal_target_histories_size();
}
inline void DayShareHistory::clear_target_histories() {
  target_histories_.Clear();
}
inline ::sharing::mojom::TargetShareHistory* DayShareHistory::mutable_target_histories(int index) {
  // @@protoc_insertion_point(field_mutable:sharing.mojom.DayShareHistory.target_histories)
  return target_histories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sharing::mojom::TargetShareHistory >*
DayShareHistory::mutable_target_histories() {
  // @@protoc_insertion_point(field_mutable_list:sharing.mojom.DayShareHistory.target_histories)
  return &target_histories_;
}
inline const ::sharing::mojom::TargetShareHistory& DayShareHistory::_internal_target_histories(int index) const {
  return target_histories_.Get(index);
}
inline const ::sharing::mojom::TargetShareHistory& DayShareHistory::target_histories(int index) const {
  // @@protoc_insertion_point(field_get:sharing.mojom.DayShareHistory.target_histories)
  return _internal_target_histories(index);
}
inline ::sharing::mojom::TargetShareHistory* DayShareHistory::_internal_add_target_histories() {
  return target_histories_.Add();
}
inline ::sharing::mojom::TargetShareHistory* DayShareHistory::add_target_histories() {
  ::sharing::mojom::TargetShareHistory* _add = _internal_add_target_histories();
  // @@protoc_insertion_point(field_add:sharing.mojom.DayShareHistory.target_histories)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sharing::mojom::TargetShareHistory >&
DayShareHistory::target_histories() const {
  // @@protoc_insertion_point(field_list:sharing.mojom.DayShareHistory.target_histories)
  return target_histories_;
}

// -------------------------------------------------------------------

// TargetShareHistory

// .sharing.mojom.Target target = 1;
inline bool TargetShareHistory::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool TargetShareHistory::has_target() const {
  return _internal_has_target();
}
inline void TargetShareHistory::clear_target() {
  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::sharing::mojom::Target& TargetShareHistory::_internal_target() const {
  const ::sharing::mojom::Target* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::sharing::mojom::Target&>(
      ::sharing::mojom::_Target_default_instance_);
}
inline const ::sharing::mojom::Target& TargetShareHistory::target() const {
  // @@protoc_insertion_point(field_get:sharing.mojom.TargetShareHistory.target)
  return _internal_target();
}
inline void TargetShareHistory::unsafe_arena_set_allocated_target(
    ::sharing::mojom::Target* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sharing.mojom.TargetShareHistory.target)
}
inline ::sharing::mojom::Target* TargetShareHistory::release_target() {
  
  ::sharing::mojom::Target* temp = target_;
  target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sharing::mojom::Target* TargetShareHistory::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:sharing.mojom.TargetShareHistory.target)
  
  ::sharing::mojom::Target* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::sharing::mojom::Target* TargetShareHistory::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::sharing::mojom::Target>(GetArenaForAllocation());
    target_ = p;
  }
  return target_;
}
inline ::sharing::mojom::Target* TargetShareHistory::mutable_target() {
  ::sharing::mojom::Target* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:sharing.mojom.TargetShareHistory.target)
  return _msg;
}
inline void TargetShareHistory::set_allocated_target(::sharing::mojom::Target* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:sharing.mojom.TargetShareHistory.target)
}

// int32 count = 2;
inline void TargetShareHistory::clear_count() {
  count_ = 0;
}
inline int32_t TargetShareHistory::_internal_count() const {
  return count_;
}
inline int32_t TargetShareHistory::count() const {
  // @@protoc_insertion_point(field_get:sharing.mojom.TargetShareHistory.count)
  return _internal_count();
}
inline void TargetShareHistory::_internal_set_count(int32_t value) {
  
  count_ = value;
}
inline void TargetShareHistory::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:sharing.mojom.TargetShareHistory.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mojom
}  // namespace sharing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_share_5fhistory_5fmessage_2eproto
