// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/share/long_screenshots/bitmap_generation/LongScreenshotsTabService

#ifndef org_chromium_chrome_browser_share_long_screenshots_bitmap_generation_LongScreenshotsTabService_JNI
#define org_chromium_chrome_browser_share_long_screenshots_bitmap_generation_LongScreenshotsTabService_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService[];
const char
    kClassPath_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService[]
    =
    "org/chromium/chrome/browser/share/long_screenshots/bitmap_generation/LongScreenshotsTabService";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz(nullptr);
#ifndef org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz_defined
#define org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz_defined
inline jclass
    org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService,
      &g_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace long_screenshots {

JNI_GENERATOR_EXPORT void Java_J_N_M61U97rf(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLongScreenshotsTabService,
    jint tabId,
    jobject url,
    jobject webContents,
    jint clipX,
    jint clipY,
    jint clipWidth,
    jint clipHeight,
    jboolean inMemory) {
  LongScreenshotsTabService* native =
      reinterpret_cast<LongScreenshotsTabService*>(nativeLongScreenshotsTabService);
  CHECK_NATIVE_PTR(env, jcaller, native, "CaptureTabAndroid");
  return native->CaptureTabAndroid(env, tabId, base::android::JavaParamRef<jobject>(env, url),
      base::android::JavaParamRef<jobject>(env, webContents), clipX, clipY, clipWidth, clipHeight,
      inMemory);
}

JNI_GENERATOR_EXPORT void Java_J_N_MDdcn7jl(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLongScreenshotsTabService) {
  LongScreenshotsTabService* native =
      reinterpret_cast<LongScreenshotsTabService*>(nativeLongScreenshotsTabService);
  CHECK_NATIVE_PTR(env, jcaller, native, "LongScreenshotsClosedAndroid");
  return native->LongScreenshotsClosedAndroid(env);
}

static void JNI_LongScreenshotsTabService_ReleaseCaptureResultPtr(JNIEnv* env, jlong
    captureResultPtr);

JNI_GENERATOR_EXPORT void Java_J_N_Mj0DaLs7(
    JNIEnv* env,
    jclass jcaller,
    jlong captureResultPtr) {
  return JNI_LongScreenshotsTabService_ReleaseCaptureResultPtr(env, captureResultPtr);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_LongScreenshotsTabService_Constructor(JNIEnv*
    env, jlong nativeLongScreenshotsTabService) {
  jclass clazz =
      org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz(env);
  CHECK_CLAZZ(env, clazz,
org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz(env),
          NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(J)V",
&g_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, nativeLongScreenshotsTabService);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_onNativeDestroyed(nullptr);
static void Java_LongScreenshotsTabService_onNativeDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz =
      org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroyed",
          "()V",
&g_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_onNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_processCaptureTabStatus(nullptr);
static void Java_LongScreenshotsTabService_processCaptureTabStatus(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper status) {
  jclass clazz =
      org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "processCaptureTabStatus",
          "(I)V",
&g_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_processCaptureTabStatus);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(status));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_processPaintPreviewResponse(nullptr);
static void Java_LongScreenshotsTabService_processPaintPreviewResponse(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativeCaptureResultPtr) {
  jclass clazz =
      org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "processPaintPreviewResponse",
          "(J)V",
&g_org_chromium_chrome_browser_share_long_1screenshots_bitmap_1generation_LongScreenshotsTabService_processPaintPreviewResponse);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativeCaptureResultPtr);
}

}  // namespace long_screenshots

#endif  // org_chromium_chrome_browser_share_long_screenshots_bitmap_generation_LongScreenshotsTabService_JNI
