// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/share/qrcode/QRCodeGenerationRequest

#ifndef org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_JNI
#define org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest[];
const char kClassPath_org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest[] =
    "org/chromium/chrome/browser/share/qrcode/QRCodeGenerationRequest";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_clazz(nullptr);
#ifndef org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_clazz_defined
#define org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_clazz_defined
inline jclass org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest,
      &g_org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_QRCodeGenerationRequest_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jstring>& data);

JNI_GENERATOR_EXPORT jlong Java_J_N_Ms6T0_00024zG(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jstring data) {
  return JNI_QRCodeGenerationRequest_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, data));
}

JNI_GENERATOR_EXPORT void Java_J_N_MQBcgs6S(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeQRCodeGenerationRequest) {
  QRCodeGenerationRequest* native =
      reinterpret_cast<QRCodeGenerationRequest*>(nativeQRCodeGenerationRequest);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_onQRCodeAvailable(nullptr);
static void Java_QRCodeGenerationRequest_onQRCodeAvailable(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& bitmap) {
  jclass clazz = org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onQRCodeAvailable",
          "(Landroid/graphics/Bitmap;)V",
          &g_org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_onQRCodeAvailable);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, bitmap.obj());
}

#endif  // org_chromium_chrome_browser_share_qrcode_QRCodeGenerationRequest_JNI
