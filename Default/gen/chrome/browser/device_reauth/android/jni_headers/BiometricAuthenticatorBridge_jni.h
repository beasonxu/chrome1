// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/device_reauth/BiometricAuthenticatorBridge

#ifndef org_chromium_chrome_browser_device_reauth_BiometricAuthenticatorBridge_JNI
#define org_chromium_chrome_browser_device_reauth_BiometricAuthenticatorBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge[];
const char kClassPath_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge[] =
    "org/chromium/chrome/browser/device_reauth/BiometricAuthenticatorBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz_defined
#define org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz_defined
inline jclass org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge,
      &g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_Mod9aj8k(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBiometricAuthenticatorBridgeImpl,
    jint result) {
  BiometricAuthenticatorBridgeImpl* native =
      reinterpret_cast<BiometricAuthenticatorBridgeImpl*>(nativeBiometricAuthenticatorBridgeImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAuthenticationCompleted");
  return native->OnAuthenticationCompleted(env, result);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_BiometricAuthenticatorBridge_create(JNIEnv*
    env, jlong nativeBiometricAuthenticator) {
  jclass clazz = org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/device_reauth/BiometricAuthenticatorBridge;",
          &g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeBiometricAuthenticator);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_canAuthenticateWithBiometric(nullptr);
static jint Java_BiometricAuthenticatorBridge_canAuthenticateWithBiometric(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "canAuthenticateWithBiometric",
          "()I",
&g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_canAuthenticateWithBiometric);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_canAuthenticateWithBiometricOrScreenLock(nullptr);
static jboolean Java_BiometricAuthenticatorBridge_canAuthenticateWithBiometricOrScreenLock(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "canAuthenticateWithBiometricOrScreenLock",
          "()Z",
&g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_canAuthenticateWithBiometricOrScreenLock);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_authenticate(nullptr);
static void Java_BiometricAuthenticatorBridge_authenticate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "authenticate",
          "()V",
          &g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_authenticate);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_destroy(nullptr);
static void Java_BiometricAuthenticatorBridge_destroy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_cancel(nullptr);
static void Java_BiometricAuthenticatorBridge_cancel(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "cancel",
          "()V",
          &g_org_chromium_chrome_browser_device_1reauth_BiometricAuthenticatorBridge_cancel);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_device_reauth_BiometricAuthenticatorBridge_JNI
