// chrome/browser/media/history/media_history_store.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/browser/media/history/media_history_store.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/browser/media/history/media_history_store.mojom-params-data.h"
#include "chrome/browser/media/history/media_history_store.mojom-shared-message-ids.h"

#include "chrome/browser/media/history/media_history_store.mojom-import-headers.h"
#include "chrome/browser/media/history/media_history_store.mojom-test-utils.h"


#ifndef CHROME_BROWSER_MEDIA_HISTORY_MEDIA_HISTORY_STORE_MOJOM_JUMBO_H_
#define CHROME_BROWSER_MEDIA_HISTORY_MEDIA_HISTORY_STORE_MOJOM_JUMBO_H_
#endif



namespace media_history {
namespace mojom {
MediaHistoryStats::MediaHistoryStats()
    : table_row_counts() {}

MediaHistoryStats::MediaHistoryStats(
    const base::flat_map<std::string, int32_t>& table_row_counts_in)
    : table_row_counts(std::move(table_row_counts_in)) {}

MediaHistoryStats::~MediaHistoryStats() = default;

void MediaHistoryStats::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "table_row_counts"), this->table_row_counts,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const base::flat_map<std::string, int32_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool MediaHistoryStats::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
MediaHistoryOriginRow::MediaHistoryOriginRow()
    : origin(),
      cached_audio_video_watchtime(),
      actual_audio_video_watchtime(),
      last_updated_time() {}

MediaHistoryOriginRow::MediaHistoryOriginRow(
    const ::url::Origin& origin_in,
    ::base::TimeDelta cached_audio_video_watchtime_in,
    ::base::TimeDelta actual_audio_video_watchtime_in,
    double last_updated_time_in)
    : origin(std::move(origin_in)),
      cached_audio_video_watchtime(std::move(cached_audio_video_watchtime_in)),
      actual_audio_video_watchtime(std::move(actual_audio_video_watchtime_in)),
      last_updated_time(std::move(last_updated_time_in)) {}

MediaHistoryOriginRow::~MediaHistoryOriginRow() = default;

void MediaHistoryOriginRow::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "origin"), this->origin,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::url::Origin&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cached_audio_video_watchtime"), this->cached_audio_video_watchtime,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "actual_audio_video_watchtime"), this->actual_audio_video_watchtime,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "last_updated_time"), this->last_updated_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type double>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool MediaHistoryOriginRow::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
MediaHistoryPlaybackRow::MediaHistoryPlaybackRow()
    : url(),
      has_audio(),
      has_video(),
      watchtime(),
      last_updated_time() {}

MediaHistoryPlaybackRow::MediaHistoryPlaybackRow(
    const ::GURL& url_in,
    bool has_audio_in,
    bool has_video_in,
    ::base::TimeDelta watchtime_in,
    double last_updated_time_in)
    : url(std::move(url_in)),
      has_audio(std::move(has_audio_in)),
      has_video(std::move(has_video_in)),
      watchtime(std::move(watchtime_in)),
      last_updated_time(std::move(last_updated_time_in)) {}

MediaHistoryPlaybackRow::~MediaHistoryPlaybackRow() = default;

void MediaHistoryPlaybackRow::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "url"), this->url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_audio"), this->has_audio,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_video"), this->has_video,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "watchtime"), this->watchtime,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "last_updated_time"), this->last_updated_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type double>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool MediaHistoryPlaybackRow::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
MediaHistoryPlaybackSessionRow::MediaHistoryPlaybackSessionRow()
    : id(),
      url(),
      duration(),
      position(),
      metadata(),
      artwork(),
      last_updated_time() {}

MediaHistoryPlaybackSessionRow::MediaHistoryPlaybackSessionRow(
    int64_t id_in,
    const ::GURL& url_in,
    ::base::TimeDelta duration_in,
    ::base::TimeDelta position_in,
    const ::media_session::MediaMetadata& metadata_in,
    std::vector<::media_session::MediaImage> artwork_in,
    double last_updated_time_in)
    : id(std::move(id_in)),
      url(std::move(url_in)),
      duration(std::move(duration_in)),
      position(std::move(position_in)),
      metadata(std::move(metadata_in)),
      artwork(std::move(artwork_in)),
      last_updated_time(std::move(last_updated_time_in)) {}

MediaHistoryPlaybackSessionRow::~MediaHistoryPlaybackSessionRow() = default;

void MediaHistoryPlaybackSessionRow::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "id"), this->id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "url"), this->url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "duration"), this->duration,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "position"), this->position,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "metadata"), this->metadata,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::media_session::MediaMetadata&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "artwork"), this->artwork,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::media_session::MediaImage>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "last_updated_time"), this->last_updated_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type double>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool MediaHistoryPlaybackSessionRow::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char MediaHistoryStore::Name_[] = "media_history.mojom.MediaHistoryStore";

MediaHistoryStore::IPCStableHashFunction MediaHistoryStore::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kMediaHistoryStore_GetMediaHistoryStats_Name: {
      return &MediaHistoryStore::GetMediaHistoryStats_Sym::IPCStableHash;
    }
    case internal::kMediaHistoryStore_GetMediaHistoryOriginRows_Name: {
      return &MediaHistoryStore::GetMediaHistoryOriginRows_Sym::IPCStableHash;
    }
    case internal::kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name: {
      return &MediaHistoryStore::GetMediaHistoryPlaybackRows_Sym::IPCStableHash;
    }
    case internal::kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name: {
      return &MediaHistoryStore::GetMediaHistoryPlaybackSessionRows_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* MediaHistoryStore::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kMediaHistoryStore_GetMediaHistoryStats_Name:
            return "Receive media_history::mojom::MediaHistoryStore::GetMediaHistoryStats";
      case internal::kMediaHistoryStore_GetMediaHistoryOriginRows_Name:
            return "Receive media_history::mojom::MediaHistoryStore::GetMediaHistoryOriginRows";
      case internal::kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name:
            return "Receive media_history::mojom::MediaHistoryStore::GetMediaHistoryPlaybackRows";
      case internal::kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name:
            return "Receive media_history::mojom::MediaHistoryStore::GetMediaHistoryPlaybackSessionRows";
    }
  } else {
    switch (message.name()) {
      case internal::kMediaHistoryStore_GetMediaHistoryStats_Name:
            return "Receive reply media_history::mojom::MediaHistoryStore::GetMediaHistoryStats";
      case internal::kMediaHistoryStore_GetMediaHistoryOriginRows_Name:
            return "Receive reply media_history::mojom::MediaHistoryStore::GetMediaHistoryOriginRows";
      case internal::kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name:
            return "Receive reply media_history::mojom::MediaHistoryStore::GetMediaHistoryPlaybackRows";
      case internal::kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name:
            return "Receive reply media_history::mojom::MediaHistoryStore::GetMediaHistoryPlaybackSessionRows";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t MediaHistoryStore::GetMediaHistoryStats_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media_history::mojom::MediaHistoryStore::GetMediaHistoryStats");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaHistoryStore::GetMediaHistoryOriginRows_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media_history::mojom::MediaHistoryStore::GetMediaHistoryOriginRows");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaHistoryStore::GetMediaHistoryPlaybackRows_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media_history::mojom::MediaHistoryStore::GetMediaHistoryPlaybackRows");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t MediaHistoryStore::GetMediaHistoryPlaybackSessionRows_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media_history::mojom::MediaHistoryStore::GetMediaHistoryPlaybackSessionRows");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class MediaHistoryStore_GetMediaHistoryStats_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaHistoryStore_GetMediaHistoryStats_ForwardToCallback(
      MediaHistoryStore::GetMediaHistoryStatsCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaHistoryStore_GetMediaHistoryStats_ForwardToCallback(const MediaHistoryStore_GetMediaHistoryStats_ForwardToCallback&) = delete;
  MediaHistoryStore_GetMediaHistoryStats_ForwardToCallback& operator=(const MediaHistoryStore_GetMediaHistoryStats_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaHistoryStore::GetMediaHistoryStatsCallback callback_;
};

class MediaHistoryStore_GetMediaHistoryOriginRows_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaHistoryStore_GetMediaHistoryOriginRows_ForwardToCallback(
      MediaHistoryStore::GetMediaHistoryOriginRowsCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaHistoryStore_GetMediaHistoryOriginRows_ForwardToCallback(const MediaHistoryStore_GetMediaHistoryOriginRows_ForwardToCallback&) = delete;
  MediaHistoryStore_GetMediaHistoryOriginRows_ForwardToCallback& operator=(const MediaHistoryStore_GetMediaHistoryOriginRows_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaHistoryStore::GetMediaHistoryOriginRowsCallback callback_;
};

class MediaHistoryStore_GetMediaHistoryPlaybackRows_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaHistoryStore_GetMediaHistoryPlaybackRows_ForwardToCallback(
      MediaHistoryStore::GetMediaHistoryPlaybackRowsCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaHistoryStore_GetMediaHistoryPlaybackRows_ForwardToCallback(const MediaHistoryStore_GetMediaHistoryPlaybackRows_ForwardToCallback&) = delete;
  MediaHistoryStore_GetMediaHistoryPlaybackRows_ForwardToCallback& operator=(const MediaHistoryStore_GetMediaHistoryPlaybackRows_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaHistoryStore::GetMediaHistoryPlaybackRowsCallback callback_;
};

class MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ForwardToCallback(
      MediaHistoryStore::GetMediaHistoryPlaybackSessionRowsCallback callback
      ) : callback_(std::move(callback)) {
  }

  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ForwardToCallback(const MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ForwardToCallback&) = delete;
  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ForwardToCallback& operator=(const MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  MediaHistoryStore::GetMediaHistoryPlaybackSessionRowsCallback callback_;
};

MediaHistoryStoreProxy::MediaHistoryStoreProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void MediaHistoryStoreProxy::GetMediaHistoryStats(
    GetMediaHistoryStatsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send media_history::mojom::MediaHistoryStore::GetMediaHistoryStats");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaHistoryStore_GetMediaHistoryStats_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media_history::mojom::internal::MediaHistoryStore_GetMediaHistoryStats_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaHistoryStore::Name_);
  message.set_method_name("GetMediaHistoryStats");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaHistoryStore_GetMediaHistoryStats_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void MediaHistoryStoreProxy::GetMediaHistoryOriginRows(
    GetMediaHistoryOriginRowsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send media_history::mojom::MediaHistoryStore::GetMediaHistoryOriginRows");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaHistoryStore_GetMediaHistoryOriginRows_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media_history::mojom::internal::MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaHistoryStore::Name_);
  message.set_method_name("GetMediaHistoryOriginRows");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaHistoryStore_GetMediaHistoryOriginRows_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void MediaHistoryStoreProxy::GetMediaHistoryPlaybackRows(
    GetMediaHistoryPlaybackRowsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send media_history::mojom::MediaHistoryStore::GetMediaHistoryPlaybackRows");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media_history::mojom::internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaHistoryStore::Name_);
  message.set_method_name("GetMediaHistoryPlaybackRows");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaHistoryStore_GetMediaHistoryPlaybackRows_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void MediaHistoryStoreProxy::GetMediaHistoryPlaybackSessionRows(
    GetMediaHistoryPlaybackSessionRowsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send media_history::mojom::MediaHistoryStore::GetMediaHistoryPlaybackSessionRows");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media_history::mojom::internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaHistoryStore::Name_);
  message.set_method_name("GetMediaHistoryPlaybackSessionRows");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class MediaHistoryStore_GetMediaHistoryStats_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaHistoryStore::GetMediaHistoryStatsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaHistoryStore_GetMediaHistoryStats_ProxyToResponder> proxy(
        new MediaHistoryStore_GetMediaHistoryStats_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaHistoryStore_GetMediaHistoryStats_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaHistoryStore_GetMediaHistoryStats_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaHistoryStore_GetMediaHistoryStats_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaHistoryStore::GetMediaHistoryStatsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      MediaHistoryStatsPtr in_stats);
};

bool MediaHistoryStore_GetMediaHistoryStats_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  MediaHistoryStatsPtr p_stats{};
  MediaHistoryStore_GetMediaHistoryStats_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadStats(&p_stats))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaHistoryStore::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_stats));
  return true;
}

void MediaHistoryStore_GetMediaHistoryStats_ProxyToResponder::Run(
    MediaHistoryStatsPtr in_stats) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply media_history::mojom::MediaHistoryStore::GetMediaHistoryStats", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("stats"), in_stats,
                        "<value of type MediaHistoryStatsPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaHistoryStore_GetMediaHistoryStats_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media_history::mojom::internal::MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->stats)::BaseType> stats_fragment(
          params.message());
  mojo::internal::Serialize<::media_history::mojom::MediaHistoryStatsDataView>(
      in_stats, stats_fragment);
  params->stats.Set(
      stats_fragment.is_null() ? nullptr : stats_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->stats.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null stats in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaHistoryStore::Name_);
  message.set_method_name("GetMediaHistoryStats");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class MediaHistoryStore_GetMediaHistoryOriginRows_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaHistoryStore::GetMediaHistoryOriginRowsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaHistoryStore_GetMediaHistoryOriginRows_ProxyToResponder> proxy(
        new MediaHistoryStore_GetMediaHistoryOriginRows_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaHistoryStore_GetMediaHistoryOriginRows_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaHistoryStore_GetMediaHistoryOriginRows_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaHistoryStore_GetMediaHistoryOriginRows_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaHistoryStore::GetMediaHistoryOriginRowsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<MediaHistoryOriginRowPtr> in_rows);
};

bool MediaHistoryStore_GetMediaHistoryOriginRows_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<MediaHistoryOriginRowPtr> p_rows{};
  MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadRows(&p_rows))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaHistoryStore::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_rows));
  return true;
}

void MediaHistoryStore_GetMediaHistoryOriginRows_ProxyToResponder::Run(
    std::vector<MediaHistoryOriginRowPtr> in_rows) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply media_history::mojom::MediaHistoryStore::GetMediaHistoryOriginRows", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("rows"), in_rows,
                        "<value of type std::vector<MediaHistoryOriginRowPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaHistoryStore_GetMediaHistoryOriginRows_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media_history::mojom::internal::MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->rows)::BaseType>
      rows_fragment(params.message());
  const mojo::internal::ContainerValidateParams rows_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::media_history::mojom::MediaHistoryOriginRowDataView>>(
      in_rows, rows_fragment, &rows_validate_params);
  params->rows.Set(
      rows_fragment.is_null() ? nullptr : rows_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->rows.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null rows in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaHistoryStore::Name_);
  message.set_method_name("GetMediaHistoryOriginRows");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class MediaHistoryStore_GetMediaHistoryPlaybackRows_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaHistoryStore::GetMediaHistoryPlaybackRowsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaHistoryStore_GetMediaHistoryPlaybackRows_ProxyToResponder> proxy(
        new MediaHistoryStore_GetMediaHistoryPlaybackRows_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaHistoryStore_GetMediaHistoryPlaybackRows_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaHistoryStore_GetMediaHistoryPlaybackRows_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaHistoryStore_GetMediaHistoryPlaybackRows_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaHistoryStore::GetMediaHistoryPlaybackRowsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<MediaHistoryPlaybackRowPtr> in_rows);
};

bool MediaHistoryStore_GetMediaHistoryPlaybackRows_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<MediaHistoryPlaybackRowPtr> p_rows{};
  MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadRows(&p_rows))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaHistoryStore::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_rows));
  return true;
}

void MediaHistoryStore_GetMediaHistoryPlaybackRows_ProxyToResponder::Run(
    std::vector<MediaHistoryPlaybackRowPtr> in_rows) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply media_history::mojom::MediaHistoryStore::GetMediaHistoryPlaybackRows", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("rows"), in_rows,
                        "<value of type std::vector<MediaHistoryPlaybackRowPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media_history::mojom::internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->rows)::BaseType>
      rows_fragment(params.message());
  const mojo::internal::ContainerValidateParams rows_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::media_history::mojom::MediaHistoryPlaybackRowDataView>>(
      in_rows, rows_fragment, &rows_validate_params);
  params->rows.Set(
      rows_fragment.is_null() ? nullptr : rows_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->rows.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null rows in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaHistoryStore::Name_);
  message.set_method_name("GetMediaHistoryPlaybackRows");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static MediaHistoryStore::GetMediaHistoryPlaybackSessionRowsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ProxyToResponder> proxy(
        new MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MediaHistoryStore::GetMediaHistoryPlaybackSessionRowsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<MediaHistoryPlaybackSessionRowPtr> in_rows);
};

bool MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<MediaHistoryPlaybackSessionRowPtr> p_rows{};
  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadRows(&p_rows))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MediaHistoryStore::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_rows));
  return true;
}

void MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ProxyToResponder::Run(
    std::vector<MediaHistoryPlaybackSessionRowPtr> in_rows) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply media_history::mojom::MediaHistoryStore::GetMediaHistoryPlaybackSessionRows", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("rows"), in_rows,
                        "<value of type std::vector<MediaHistoryPlaybackSessionRowPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media_history::mojom::internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->rows)::BaseType>
      rows_fragment(params.message());
  const mojo::internal::ContainerValidateParams rows_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::media_history::mojom::MediaHistoryPlaybackSessionRowDataView>>(
      in_rows, rows_fragment, &rows_validate_params);
  params->rows.Set(
      rows_fragment.is_null() ? nullptr : rows_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->rows.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null rows in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MediaHistoryStore::Name_);
  message.set_method_name("GetMediaHistoryPlaybackSessionRows");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool MediaHistoryStoreStubDispatch::Accept(
    MediaHistoryStore* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kMediaHistoryStore_GetMediaHistoryStats_Name: {
      break;
    }
    case internal::kMediaHistoryStore_GetMediaHistoryOriginRows_Name: {
      break;
    }
    case internal::kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name: {
      break;
    }
    case internal::kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name: {
      break;
    }
  }
  return false;
}

// static
bool MediaHistoryStoreStubDispatch::AcceptWithResponder(
    MediaHistoryStore* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kMediaHistoryStore_GetMediaHistoryStats_Name: {

      internal::MediaHistoryStore_GetMediaHistoryStats_Params_Data* params =
          reinterpret_cast<
              internal::MediaHistoryStore_GetMediaHistoryStats_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      MediaHistoryStore_GetMediaHistoryStats_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaHistoryStore::Name_, 0, false);
        return false;
      }
      MediaHistoryStore::GetMediaHistoryStatsCallback callback =
          MediaHistoryStore_GetMediaHistoryStats_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetMediaHistoryStats(std::move(callback));
      return true;
    }
    case internal::kMediaHistoryStore_GetMediaHistoryOriginRows_Name: {

      internal::MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data* params =
          reinterpret_cast<
              internal::MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      MediaHistoryStore_GetMediaHistoryOriginRows_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaHistoryStore::Name_, 1, false);
        return false;
      }
      MediaHistoryStore::GetMediaHistoryOriginRowsCallback callback =
          MediaHistoryStore_GetMediaHistoryOriginRows_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetMediaHistoryOriginRows(std::move(callback));
      return true;
    }
    case internal::kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name: {

      internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data* params =
          reinterpret_cast<
              internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      MediaHistoryStore_GetMediaHistoryPlaybackRows_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaHistoryStore::Name_, 2, false);
        return false;
      }
      MediaHistoryStore::GetMediaHistoryPlaybackRowsCallback callback =
          MediaHistoryStore_GetMediaHistoryPlaybackRows_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetMediaHistoryPlaybackRows(std::move(callback));
      return true;
    }
    case internal::kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name: {

      internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data* params =
          reinterpret_cast<
              internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MediaHistoryStore::Name_, 3, false);
        return false;
      }
      MediaHistoryStore::GetMediaHistoryPlaybackSessionRowsCallback callback =
          MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetMediaHistoryPlaybackSessionRows(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kMediaHistoryStoreValidationInfo[] = {
    {&internal::MediaHistoryStore_GetMediaHistoryStats_Params_Data::Validate,
     &internal::MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data::Validate},
    {&internal::MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data::Validate,
     &internal::MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data::Validate},
    {&internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data::Validate,
     &internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data::Validate},
    {&internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data::Validate,
     &internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data::Validate},
};

bool MediaHistoryStoreRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media_history::mojom::MediaHistoryStore::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kMediaHistoryStoreValidationInfo);
}

bool MediaHistoryStoreResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::media_history::mojom::MediaHistoryStore::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kMediaHistoryStoreValidationInfo);
}


}  // namespace mojom
}  // namespace media_history


namespace mojo {


// static
bool StructTraits<::media_history::mojom::MediaHistoryStats::DataView, ::media_history::mojom::MediaHistoryStatsPtr>::Read(
    ::media_history::mojom::MediaHistoryStats::DataView input,
    ::media_history::mojom::MediaHistoryStatsPtr* output) {
  bool success = true;
  ::media_history::mojom::MediaHistoryStatsPtr result(::media_history::mojom::MediaHistoryStats::New());
  
      if (success && !input.ReadTableRowCounts(&result->table_row_counts))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::media_history::mojom::MediaHistoryOriginRow::DataView, ::media_history::mojom::MediaHistoryOriginRowPtr>::Read(
    ::media_history::mojom::MediaHistoryOriginRow::DataView input,
    ::media_history::mojom::MediaHistoryOriginRowPtr* output) {
  bool success = true;
  ::media_history::mojom::MediaHistoryOriginRowPtr result(::media_history::mojom::MediaHistoryOriginRow::New());
  
      if (success && !input.ReadOrigin(&result->origin))
        success = false;
      if (success && !input.ReadCachedAudioVideoWatchtime(&result->cached_audio_video_watchtime))
        success = false;
      if (success && !input.ReadActualAudioVideoWatchtime(&result->actual_audio_video_watchtime))
        success = false;
      if (success)
        result->last_updated_time = input.last_updated_time();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::media_history::mojom::MediaHistoryPlaybackRow::DataView, ::media_history::mojom::MediaHistoryPlaybackRowPtr>::Read(
    ::media_history::mojom::MediaHistoryPlaybackRow::DataView input,
    ::media_history::mojom::MediaHistoryPlaybackRowPtr* output) {
  bool success = true;
  ::media_history::mojom::MediaHistoryPlaybackRowPtr result(::media_history::mojom::MediaHistoryPlaybackRow::New());
  
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success)
        result->has_audio = input.has_audio();
      if (success)
        result->has_video = input.has_video();
      if (success && !input.ReadWatchtime(&result->watchtime))
        success = false;
      if (success)
        result->last_updated_time = input.last_updated_time();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::media_history::mojom::MediaHistoryPlaybackSessionRow::DataView, ::media_history::mojom::MediaHistoryPlaybackSessionRowPtr>::Read(
    ::media_history::mojom::MediaHistoryPlaybackSessionRow::DataView input,
    ::media_history::mojom::MediaHistoryPlaybackSessionRowPtr* output) {
  bool success = true;
  ::media_history::mojom::MediaHistoryPlaybackSessionRowPtr result(::media_history::mojom::MediaHistoryPlaybackSessionRow::New());
  
      if (success)
        result->id = input.id();
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success && !input.ReadDuration(&result->duration))
        success = false;
      if (success && !input.ReadPosition(&result->position))
        success = false;
      if (success && !input.ReadMetadata(&result->metadata))
        success = false;
      if (success && !input.ReadArtwork(&result->artwork))
        success = false;
      if (success)
        result->last_updated_time = input.last_updated_time();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace media_history {
namespace mojom {


void MediaHistoryStoreInterceptorForTesting::GetMediaHistoryStats(GetMediaHistoryStatsCallback callback) {
  GetForwardingInterface()->GetMediaHistoryStats(std::move(callback));
}
void MediaHistoryStoreInterceptorForTesting::GetMediaHistoryOriginRows(GetMediaHistoryOriginRowsCallback callback) {
  GetForwardingInterface()->GetMediaHistoryOriginRows(std::move(callback));
}
void MediaHistoryStoreInterceptorForTesting::GetMediaHistoryPlaybackRows(GetMediaHistoryPlaybackRowsCallback callback) {
  GetForwardingInterface()->GetMediaHistoryPlaybackRows(std::move(callback));
}
void MediaHistoryStoreInterceptorForTesting::GetMediaHistoryPlaybackSessionRows(GetMediaHistoryPlaybackSessionRowsCallback callback) {
  GetForwardingInterface()->GetMediaHistoryPlaybackSessionRows(std::move(callback));
}
MediaHistoryStoreAsyncWaiter::MediaHistoryStoreAsyncWaiter(
    MediaHistoryStore* proxy) : proxy_(proxy) {}

MediaHistoryStoreAsyncWaiter::~MediaHistoryStoreAsyncWaiter() = default;

void MediaHistoryStoreAsyncWaiter::GetMediaHistoryStats(
    MediaHistoryStatsPtr* out_stats) {
  base::RunLoop loop;
  proxy_->GetMediaHistoryStats(
      base::BindOnce(
          [](base::RunLoop* loop,
             MediaHistoryStatsPtr* out_stats
,
             MediaHistoryStatsPtr stats) {*out_stats = std::move(stats);
            loop->Quit();
          },
          &loop,
          out_stats));
  loop.Run();
}
void MediaHistoryStoreAsyncWaiter::GetMediaHistoryOriginRows(
    std::vector<MediaHistoryOriginRowPtr>* out_rows) {
  base::RunLoop loop;
  proxy_->GetMediaHistoryOriginRows(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<MediaHistoryOriginRowPtr>* out_rows
,
             std::vector<MediaHistoryOriginRowPtr> rows) {*out_rows = std::move(rows);
            loop->Quit();
          },
          &loop,
          out_rows));
  loop.Run();
}
void MediaHistoryStoreAsyncWaiter::GetMediaHistoryPlaybackRows(
    std::vector<MediaHistoryPlaybackRowPtr>* out_rows) {
  base::RunLoop loop;
  proxy_->GetMediaHistoryPlaybackRows(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<MediaHistoryPlaybackRowPtr>* out_rows
,
             std::vector<MediaHistoryPlaybackRowPtr> rows) {*out_rows = std::move(rows);
            loop->Quit();
          },
          &loop,
          out_rows));
  loop.Run();
}
void MediaHistoryStoreAsyncWaiter::GetMediaHistoryPlaybackSessionRows(
    std::vector<MediaHistoryPlaybackSessionRowPtr>* out_rows) {
  base::RunLoop loop;
  proxy_->GetMediaHistoryPlaybackSessionRows(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<MediaHistoryPlaybackSessionRowPtr>* out_rows
,
             std::vector<MediaHistoryPlaybackSessionRowPtr> rows) {*out_rows = std::move(rows);
            loop->Quit();
          },
          &loop,
          out_rows));
  loop.Run();
}





}  // namespace mojom
}  // namespace media_history


#if defined(__clang__)
#pragma clang diagnostic pop
#endif