// chrome/browser/media/history/media_history_store.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_MEDIA_HISTORY_MEDIA_HISTORY_STORE_MOJOM_SHARED_INTERNAL_H_
#define CHROME_BROWSER_MEDIA_HISTORY_MEDIA_HISTORY_STORE_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "services/media_session/public/mojom/media_session.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace media_history {
namespace mojom {
namespace internal {
class MediaHistoryStats_Data;
class MediaHistoryOriginRow_Data;
class MediaHistoryPlaybackRow_Data;
class MediaHistoryPlaybackSessionRow_Data;

#pragma pack(push, 1)
class  MediaHistoryStats_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, int32_t>> table_row_counts;

 private:
  friend class mojo::internal::MessageFragment<MediaHistoryStats_Data>;

  MediaHistoryStats_Data();
  ~MediaHistoryStats_Data() = delete;
};
static_assert(sizeof(MediaHistoryStats_Data) == 16,
              "Bad sizeof(MediaHistoryStats_Data)");
// Used by MediaHistoryStats::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct MediaHistoryStats_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  MediaHistoryStats_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~MediaHistoryStats_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<MediaHistoryStats_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    MediaHistoryStats_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  MediaHistoryOriginRow_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> cached_audio_video_watchtime;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> actual_audio_video_watchtime;
  double last_updated_time;

 private:
  friend class mojo::internal::MessageFragment<MediaHistoryOriginRow_Data>;

  MediaHistoryOriginRow_Data();
  ~MediaHistoryOriginRow_Data() = delete;
};
static_assert(sizeof(MediaHistoryOriginRow_Data) == 40,
              "Bad sizeof(MediaHistoryOriginRow_Data)");
// Used by MediaHistoryOriginRow::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct MediaHistoryOriginRow_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  MediaHistoryOriginRow_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~MediaHistoryOriginRow_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<MediaHistoryOriginRow_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    MediaHistoryOriginRow_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  MediaHistoryPlaybackRow_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  uint8_t has_audio : 1;
  uint8_t has_video : 1;
  uint8_t pad2_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> watchtime;
  double last_updated_time;

 private:
  friend class mojo::internal::MessageFragment<MediaHistoryPlaybackRow_Data>;

  MediaHistoryPlaybackRow_Data();
  ~MediaHistoryPlaybackRow_Data() = delete;
};
static_assert(sizeof(MediaHistoryPlaybackRow_Data) == 40,
              "Bad sizeof(MediaHistoryPlaybackRow_Data)");
// Used by MediaHistoryPlaybackRow::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct MediaHistoryPlaybackRow_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  MediaHistoryPlaybackRow_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~MediaHistoryPlaybackRow_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<MediaHistoryPlaybackRow_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    MediaHistoryPlaybackRow_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  MediaHistoryPlaybackSessionRow_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t id;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> duration;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> position;
  mojo::internal::Pointer<::media_session::mojom::internal::MediaMetadata_Data> metadata;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::media_session::mojom::internal::MediaImage_Data>>> artwork;
  double last_updated_time;

 private:
  friend class mojo::internal::MessageFragment<MediaHistoryPlaybackSessionRow_Data>;

  MediaHistoryPlaybackSessionRow_Data();
  ~MediaHistoryPlaybackSessionRow_Data() = delete;
};
static_assert(sizeof(MediaHistoryPlaybackSessionRow_Data) == 64,
              "Bad sizeof(MediaHistoryPlaybackSessionRow_Data)");
// Used by MediaHistoryPlaybackSessionRow::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct MediaHistoryPlaybackSessionRow_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  MediaHistoryPlaybackSessionRow_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~MediaHistoryPlaybackSessionRow_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<MediaHistoryPlaybackSessionRow_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    MediaHistoryPlaybackSessionRow_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace media_history

#endif  // CHROME_BROWSER_MEDIA_HISTORY_MEDIA_HISTORY_STORE_MOJOM_SHARED_INTERNAL_H_