// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/translate/TranslateBridge

#ifndef org_chromium_chrome_browser_translate_TranslateBridge_JNI
#define org_chromium_chrome_browser_translate_TranslateBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_translate_TranslateBridge[];
const char kClassPath_org_chromium_chrome_browser_translate_TranslateBridge[] =
    "org/chromium/chrome/browser/translate/TranslateBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_translate_TranslateBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_translate_TranslateBridge_clazz_defined
#define org_chromium_chrome_browser_translate_TranslateBridge_clazz_defined
inline jclass org_chromium_chrome_browser_translate_TranslateBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_translate_TranslateBridge,
      &g_org_chromium_chrome_browser_translate_TranslateBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_TranslateBridge_ManualTranslateWhenReady(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT void Java_J_N_M0540rIu(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents) {
  return JNI_TranslateBridge_ManualTranslateWhenReady(env, base::android::JavaParamRef<jobject>(env,
      webContents));
}

static void JNI_TranslateBridge_TranslateToLanguage(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents,
    const base::android::JavaParamRef<jstring>& targetLanguageCode);

JNI_GENERATOR_EXPORT void Java_J_N_Mm4YgQEb(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents,
    jstring targetLanguageCode) {
  return JNI_TranslateBridge_TranslateToLanguage(env, base::android::JavaParamRef<jobject>(env,
      webContents), base::android::JavaParamRef<jstring>(env, targetLanguageCode));
}

static jboolean JNI_TranslateBridge_CanManuallyTranslate(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents,
    jboolean menuLogging);

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mx5ZGJOG(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents,
    jboolean menuLogging) {
  return JNI_TranslateBridge_CanManuallyTranslate(env, base::android::JavaParamRef<jobject>(env,
      webContents), menuLogging);
}

static jboolean JNI_TranslateBridge_ShouldShowManualTranslateIPH(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M8WoKfWJ(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents) {
  return JNI_TranslateBridge_ShouldShowManualTranslateIPH(env,
      base::android::JavaParamRef<jobject>(env, webContents));
}

static void JNI_TranslateBridge_SetPredefinedTargetLanguage(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents,
    const base::android::JavaParamRef<jstring>& targetLanguage);

JNI_GENERATOR_EXPORT void Java_J_N_MJsDcRCX(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents,
    jstring targetLanguage) {
  return JNI_TranslateBridge_SetPredefinedTargetLanguage(env,
      base::android::JavaParamRef<jobject>(env, webContents),
      base::android::JavaParamRef<jstring>(env, targetLanguage));
}

static base::android::ScopedJavaLocalRef<jstring> JNI_TranslateBridge_GetSourceLanguage(JNIEnv* env,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jstring Java_J_N_Mkdg1mTW(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents) {
  return JNI_TranslateBridge_GetSourceLanguage(env, base::android::JavaParamRef<jobject>(env,
      webContents)).Release();
}

static base::android::ScopedJavaLocalRef<jstring> JNI_TranslateBridge_GetCurrentLanguage(JNIEnv*
    env, const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jstring Java_J_N_Mijf24vV(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents) {
  return JNI_TranslateBridge_GetCurrentLanguage(env, base::android::JavaParamRef<jobject>(env,
      webContents)).Release();
}

static base::android::ScopedJavaLocalRef<jstring> JNI_TranslateBridge_GetTargetLanguage(JNIEnv*
    env);

JNI_GENERATOR_EXPORT jstring Java_J_N_MMKf4EpW(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TranslateBridge_GetTargetLanguage(env).Release();
}

static void JNI_TranslateBridge_SetDefaultTargetLanguage(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& targetLanguage);

JNI_GENERATOR_EXPORT void Java_J_N_MMJjRfp9(
    JNIEnv* env,
    jclass jcaller,
    jstring targetLanguage) {
  return JNI_TranslateBridge_SetDefaultTargetLanguage(env, base::android::JavaParamRef<jstring>(env,
      targetLanguage));
}

static void JNI_TranslateBridge_ResetAcceptLanguages(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& defaultLocale);

JNI_GENERATOR_EXPORT void Java_J_N_Mo7FLW6m(
    JNIEnv* env,
    jclass jcaller,
    jstring defaultLocale) {
  return JNI_TranslateBridge_ResetAcceptLanguages(env, base::android::JavaParamRef<jstring>(env,
      defaultLocale));
}

static void JNI_TranslateBridge_GetChromeAcceptLanguages(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& list);

JNI_GENERATOR_EXPORT void Java_J_N_MlwSZWfW(
    JNIEnv* env,
    jclass jcaller,
    jobject list) {
  return JNI_TranslateBridge_GetChromeAcceptLanguages(env, base::android::JavaParamRef<jobject>(env,
      list));
}

static base::android::ScopedJavaLocalRef<jobjectArray>
    JNI_TranslateBridge_GetUserAcceptLanguages(JNIEnv* env);

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MMAgYJ7_1(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TranslateBridge_GetUserAcceptLanguages(env).Release();
}

static base::android::ScopedJavaLocalRef<jobjectArray>
    JNI_TranslateBridge_GetAlwaysTranslateLanguages(JNIEnv* env);

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MAJqSbXG(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TranslateBridge_GetAlwaysTranslateLanguages(env).Release();
}

static base::android::ScopedJavaLocalRef<jobjectArray>
    JNI_TranslateBridge_GetNeverTranslateLanguages(JNIEnv* env);

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MGg_16_11K(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TranslateBridge_GetNeverTranslateLanguages(env).Release();
}

static void JNI_TranslateBridge_SetLanguageAlwaysTranslateState(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& language,
    jboolean alwaysTranslate);

JNI_GENERATOR_EXPORT void Java_J_N_M2Oi3mFV(
    JNIEnv* env,
    jclass jcaller,
    jstring language,
    jboolean alwaysTranslate) {
  return JNI_TranslateBridge_SetLanguageAlwaysTranslateState(env,
      base::android::JavaParamRef<jstring>(env, language), alwaysTranslate);
}

static void JNI_TranslateBridge_UpdateUserAcceptLanguages(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& language,
    jboolean add);

JNI_GENERATOR_EXPORT void Java_J_N_Me60Lv4_1(
    JNIEnv* env,
    jclass jcaller,
    jstring language,
    jboolean add) {
  return JNI_TranslateBridge_UpdateUserAcceptLanguages(env,
      base::android::JavaParamRef<jstring>(env, language), add);
}

static void JNI_TranslateBridge_MoveAcceptLanguage(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& language,
    jint offset);

JNI_GENERATOR_EXPORT void Java_J_N_MLlzo6h2(
    JNIEnv* env,
    jclass jcaller,
    jstring language,
    jint offset) {
  return JNI_TranslateBridge_MoveAcceptLanguage(env, base::android::JavaParamRef<jstring>(env,
      language), offset);
}

static void JNI_TranslateBridge_SetLanguageOrder(JNIEnv* env, const
    base::android::JavaParamRef<jobjectArray>& codes);

JNI_GENERATOR_EXPORT void Java_J_N_Mo7xRjdk(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray codes) {
  return JNI_TranslateBridge_SetLanguageOrder(env, base::android::JavaParamRef<jobjectArray>(env,
      codes));
}

static jboolean JNI_TranslateBridge_IsBlockedLanguage(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& language);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MeNcRA0y(
    JNIEnv* env,
    jclass jcaller,
    jstring language) {
  return JNI_TranslateBridge_IsBlockedLanguage(env, base::android::JavaParamRef<jstring>(env,
      language));
}

static void JNI_TranslateBridge_SetLanguageBlockedState(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& language,
    jboolean blocked);

JNI_GENERATOR_EXPORT void Java_J_N_Mt0H9F3d(
    JNIEnv* env,
    jclass jcaller,
    jstring language,
    jboolean blocked) {
  return JNI_TranslateBridge_SetLanguageBlockedState(env, base::android::JavaParamRef<jstring>(env,
      language), blocked);
}

static jboolean JNI_TranslateBridge_GetExplicitLanguageAskPromptShown(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MLVL0hmz(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TranslateBridge_GetExplicitLanguageAskPromptShown(env);
}

static void JNI_TranslateBridge_SetExplicitLanguageAskPromptShown(JNIEnv* env, jboolean shown);

JNI_GENERATOR_EXPORT void Java_J_N_ME1KHo7o(
    JNIEnv* env,
    jclass jcaller,
    jboolean shown) {
  return JNI_TranslateBridge_SetExplicitLanguageAskPromptShown(env, shown);
}

static jboolean JNI_TranslateBridge_GetAppLanguagePromptShown(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MMaIX2Gh(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TranslateBridge_GetAppLanguagePromptShown(env);
}

static void JNI_TranslateBridge_SetAppLanguagePromptShown(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_M_1jSkroX(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TranslateBridge_SetAppLanguagePromptShown(env);
}

static void JNI_TranslateBridge_SetIgnoreMissingKeyForTesting(JNIEnv* env, jboolean ignore);

JNI_GENERATOR_EXPORT void Java_J_N_MiqF3DF4_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jboolean ignore) {
  return JNI_TranslateBridge_SetIgnoreMissingKeyForTesting(env, ignore);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_translate_TranslateBridge_addNewLanguageItemToList(nullptr);
static void Java_TranslateBridge_addNewLanguageItemToList(JNIEnv* env, const
    base::android::JavaRef<jobject>& list,
    const base::android::JavaRef<jstring>& code,
    const base::android::JavaRef<jstring>& displayName,
    const base::android::JavaRef<jstring>& nativeDisplayName,
    jboolean supportTranslate) {
  jclass clazz = org_chromium_chrome_browser_translate_TranslateBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_translate_TranslateBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addNewLanguageItemToList",
          "(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V",
          &g_org_chromium_chrome_browser_translate_TranslateBridge_addNewLanguageItemToList);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, list.obj(), code.obj(), displayName.obj(),
              nativeDisplayName.obj(), supportTranslate);
}

#endif  // org_chromium_chrome_browser_translate_TranslateBridge_JNI
