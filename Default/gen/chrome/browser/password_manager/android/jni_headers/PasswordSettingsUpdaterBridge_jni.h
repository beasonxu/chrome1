// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/password_manager/PasswordSettingsUpdaterBridge

#ifndef org_chromium_chrome_browser_password_manager_PasswordSettingsUpdaterBridge_JNI
#define org_chromium_chrome_browser_password_manager_PasswordSettingsUpdaterBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge[];
const char kClassPath_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge[]
    = "org/chromium/chrome/browser/password_manager/PasswordSettingsUpdaterBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz_defined
#define org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz_defined
inline jclass
    org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge,
      &g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_M0nLBf5_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordSettingsUpdaterAndroidBridgeImpl,
    jint setting,
    jboolean offerToSavePasswordsEnabled) {
  PasswordSettingsUpdaterAndroidBridgeImpl* native =
      reinterpret_cast<PasswordSettingsUpdaterAndroidBridgeImpl*>(nativePasswordSettingsUpdaterAndroidBridgeImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSettingValueFetched");
  return native->OnSettingValueFetched(env, setting, offerToSavePasswordsEnabled);
}

JNI_GENERATOR_EXPORT void Java_J_N_MN7vNHNV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordSettingsUpdaterAndroidBridgeImpl,
    jint setting) {
  PasswordSettingsUpdaterAndroidBridgeImpl* native =
      reinterpret_cast<PasswordSettingsUpdaterAndroidBridgeImpl*>(nativePasswordSettingsUpdaterAndroidBridgeImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSettingValueAbsent");
  return native->OnSettingValueAbsent(env, setting);
}

JNI_GENERATOR_EXPORT void Java_J_N_MuZSgbL6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordSettingsUpdaterAndroidBridgeImpl,
    jint setting,
    jint error,
    jint apiErrorCode) {
  PasswordSettingsUpdaterAndroidBridgeImpl* native =
      reinterpret_cast<PasswordSettingsUpdaterAndroidBridgeImpl*>(nativePasswordSettingsUpdaterAndroidBridgeImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSettingFetchingError");
  return native->OnSettingFetchingError(env, setting, error, apiErrorCode);
}

JNI_GENERATOR_EXPORT void Java_J_N_Monl0EPH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordSettingsUpdaterAndroidBridgeImpl,
    jint setting) {
  PasswordSettingsUpdaterAndroidBridgeImpl* native =
      reinterpret_cast<PasswordSettingsUpdaterAndroidBridgeImpl*>(nativePasswordSettingsUpdaterAndroidBridgeImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSuccessfulSettingChange");
  return native->OnSuccessfulSettingChange(env, setting);
}

JNI_GENERATOR_EXPORT void Java_J_N_MUgThRTH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordSettingsUpdaterAndroidBridgeImpl,
    jint setting,
    jint error,
    jint apiErrorCode) {
  PasswordSettingsUpdaterAndroidBridgeImpl* native =
      reinterpret_cast<PasswordSettingsUpdaterAndroidBridgeImpl*>(nativePasswordSettingsUpdaterAndroidBridgeImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnFailedSettingChange");
  return native->OnFailedSettingChange(env, setting, error, apiErrorCode);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_PasswordSettingsUpdaterBridge_create(JNIEnv*
    env, jlong nativeSettingsUpdaterBridge) {
  jclass clazz =
      org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/password_manager/PasswordSettingsUpdaterBridge;",
          &g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeSettingsUpdaterBridge);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_canCreateAccessor(nullptr);
static jboolean Java_PasswordSettingsUpdaterBridge_canCreateAccessor(JNIEnv* env) {
  jclass clazz =
      org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(env),
          false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "canCreateAccessor",
          "()Z",
&g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_canCreateAccessor);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_getSettingValue(nullptr);
static void Java_PasswordSettingsUpdaterBridge_getSettingValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& account,
    JniIntWrapper setting) {
  jclass clazz =
      org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSettingValue",
          "(Ljava/lang/String;I)V",
&g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_getSettingValue);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, account.obj(), as_jint(setting));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_setSettingValue(nullptr);
static void Java_PasswordSettingsUpdaterBridge_setSettingValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& account,
    JniIntWrapper setting,
    jboolean value) {
  jclass clazz =
      org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setSettingValue",
          "(Ljava/lang/String;IZ)V",
&g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_setSettingValue);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, account.obj(), as_jint(setting), value);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_destroy(nullptr);
static void Java_PasswordSettingsUpdaterBridge_destroy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz =
      org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_chrome_browser_password_1manager_PasswordSettingsUpdaterBridge_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_password_manager_PasswordSettingsUpdaterBridge_JNI
