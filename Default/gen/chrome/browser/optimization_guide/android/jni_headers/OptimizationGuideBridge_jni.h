// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/optimization_guide/OptimizationGuideBridge

#ifndef org_chromium_chrome_browser_optimization_guide_OptimizationGuideBridge_JNI
#define org_chromium_chrome_browser_optimization_guide_OptimizationGuideBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge[];
const char kClassPath_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge[] =
    "org/chromium/chrome/browser/optimization_guide/OptimizationGuideBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz_defined
#define org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz_defined
inline jclass org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge,
      &g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace optimization_guide {
namespace android {

static jlong JNI_OptimizationGuideBridge_Init(JNIEnv* env);

JNI_GENERATOR_EXPORT jlong Java_J_N_M9P8SBdL(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_OptimizationGuideBridge_Init(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_M2siX4Rz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOptimizationGuideBridge) {
  OptimizationGuideBridge* native =
      reinterpret_cast<OptimizationGuideBridge*>(nativeOptimizationGuideBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MqYUgADF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOptimizationGuideBridge,
    jintArray optimizationTypes) {
  OptimizationGuideBridge* native =
      reinterpret_cast<OptimizationGuideBridge*>(nativeOptimizationGuideBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "RegisterOptimizationTypes");
  return native->RegisterOptimizationTypes(env, base::android::JavaParamRef<jintArray>(env,
      optimizationTypes));
}

JNI_GENERATOR_EXPORT void Java_J_N_MiCQ6k4j(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOptimizationGuideBridge,
    jobject url,
    jint optimizationType,
    jobject callback) {
  OptimizationGuideBridge* native =
      reinterpret_cast<OptimizationGuideBridge*>(nativeOptimizationGuideBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "CanApplyOptimizationAsync");
  return native->CanApplyOptimizationAsync(env, base::android::JavaParamRef<jobject>(env, url),
      optimizationType, base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MqwRdGjQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOptimizationGuideBridge,
    jobject url,
    jint optimizationType,
    jobject callback) {
  OptimizationGuideBridge* native =
      reinterpret_cast<OptimizationGuideBridge*>(nativeOptimizationGuideBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "CanApplyOptimization");
  return native->CanApplyOptimization(env, base::android::JavaParamRef<jobject>(env, url),
      optimizationType, base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MqLNrhjY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOptimizationGuideBridge,
    jbyteArray encodedNotification) {
  OptimizationGuideBridge* native =
      reinterpret_cast<OptimizationGuideBridge*>(nativeOptimizationGuideBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnNewPushNotification");
  return native->OnNewPushNotification(env, base::android::JavaParamRef<jbyteArray>(env,
      encodedNotification));
}

JNI_GENERATOR_EXPORT void Java_J_N_M83D7rt6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOptimizationGuideBridge) {
  OptimizationGuideBridge* native =
      reinterpret_cast<OptimizationGuideBridge*>(nativeOptimizationGuideBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDeferredStartup");
  return native->OnDeferredStartup(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_onOptimizationGuideDecision(nullptr);
static void Java_OptimizationGuideBridge_onOptimizationGuideDecision(JNIEnv* env, const
    base::android::JavaRef<jobject>& callback,
    JniIntWrapper optimizationGuideDecision,
    const base::android::JavaRef<jbyteArray>& serializedAnyMetadata) {
  jclass clazz = org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onOptimizationGuideDecision",
"(Lorg/chromium/chrome/browser/optimization_guide/OptimizationGuideBridge$OptimizationGuideCallback;I[B)V",
&g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_onOptimizationGuideDecision);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, callback.obj(), as_jint(optimizationGuideDecision),
              serializedAnyMetadata.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clearCachedPushNotifications(nullptr);
static void Java_OptimizationGuideBridge_clearCachedPushNotifications(JNIEnv* env, JniIntWrapper
    optimizationTypeInt) {
  jclass clazz = org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "clearCachedPushNotifications",
          "(I)V",
&g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clearCachedPushNotifications);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(optimizationTypeInt));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_getOptTypesWithPushNotifications(nullptr);
static base::android::ScopedJavaLocalRef<jintArray>
    Java_OptimizationGuideBridge_getOptTypesWithPushNotifications(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getOptTypesWithPushNotifications",
          "()[I",
&g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_getOptTypesWithPushNotifications);

  jintArray ret =
      static_cast<jintArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jintArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_getOptTypesThatOverflowedPushNotifications(nullptr);
static base::android::ScopedJavaLocalRef<jintArray>
    Java_OptimizationGuideBridge_getOptTypesThatOverflowedPushNotifications(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getOptTypesThatOverflowedPushNotifications",
          "()[I",
&g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_getOptTypesThatOverflowedPushNotifications);

  jintArray ret =
      static_cast<jintArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jintArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_getEncodedPushNotifications(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_OptimizationGuideBridge_getEncodedPushNotifications(JNIEnv* env, JniIntWrapper
    optimizationTypeInt) {
  jclass clazz = org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getEncodedPushNotifications",
          "(I)[[B",
&g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_getEncodedPushNotifications);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(optimizationTypeInt)));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_onPushNotificationNotHandledByNative(nullptr);
static void Java_OptimizationGuideBridge_onPushNotificationNotHandledByNative(JNIEnv* env, const
    base::android::JavaRef<jbyteArray>& encodedNotification) {
  jclass clazz = org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onPushNotificationNotHandledByNative",
          "([B)V",
&g_org_chromium_chrome_browser_optimization_1guide_OptimizationGuideBridge_onPushNotificationNotHandledByNative);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, encodedNotification.obj());
}

}  // namespace android
}  // namespace optimization_guide

#endif  // org_chromium_chrome_browser_optimization_guide_OptimizationGuideBridge_JNI
