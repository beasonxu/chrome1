// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/feedback/ProcessIdFeedbackSource

#ifndef org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_JNI
#define org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource[];
const char kClassPath_org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource[] =
    "org/chromium/chrome/browser/feedback/ProcessIdFeedbackSource";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_clazz(nullptr);
#ifndef org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_clazz_defined
#define org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_clazz_defined
inline jclass org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource,
      &g_org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace chrome {
namespace android {

static jlong JNI_ProcessIdFeedbackSource_GetCurrentPid(JNIEnv* env);

JNI_GENERATOR_EXPORT jlong Java_J_N_MXN_1TQGn(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_ProcessIdFeedbackSource_GetCurrentPid(env);
}

static void JNI_ProcessIdFeedbackSource_Start(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& source);

JNI_GENERATOR_EXPORT void Java_J_N_Mx7ChZtk(
    JNIEnv* env,
    jclass jcaller,
    jobject source) {
  return JNI_ProcessIdFeedbackSource_Start(env, base::android::JavaParamRef<jobject>(env, source));
}

JNI_GENERATOR_EXPORT jlongArray Java_J_N_MKHKXOCT(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProcessIdFeedbackSource,
    jobject caller,
    jint processType) {
  ProcessIdFeedbackSource* native =
      reinterpret_cast<ProcessIdFeedbackSource*>(nativeProcessIdFeedbackSource);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetProcessIdsForType", NULL);
  return native->GetProcessIdsForType(env, base::android::JavaParamRef<jobject>(env, caller),
      processType).Release();
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_prepareCompleted(nullptr);
static void Java_ProcessIdFeedbackSource_prepareCompleted(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativeSource) {
  jclass clazz = org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "prepareCompleted",
          "(J)V",
          &g_org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_prepareCompleted);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativeSource);
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_feedback_ProcessIdFeedbackSource_JNI
