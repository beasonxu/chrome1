// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/feed/FeedImageFetchClient

#ifndef org_chromium_chrome_browser_feed_FeedImageFetchClient_JNI
#define org_chromium_chrome_browser_feed_FeedImageFetchClient_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_feed_FeedImageFetchClient[];
const char kClassPath_org_chromium_chrome_browser_feed_FeedImageFetchClient[] =
    "org/chromium/chrome/browser/feed/FeedImageFetchClient";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_feed_FeedImageFetchClient_clazz(nullptr);
#ifndef org_chromium_chrome_browser_feed_FeedImageFetchClient_clazz_defined
#define org_chromium_chrome_browser_feed_FeedImageFetchClient_clazz_defined
inline jclass org_chromium_chrome_browser_feed_FeedImageFetchClient_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_feed_FeedImageFetchClient,
      &g_org_chromium_chrome_browser_feed_FeedImageFetchClient_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace feed {

static jint JNI_FeedImageFetchClient_SendRequest(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jobject>& responseConsumer);

JNI_GENERATOR_EXPORT jint Java_J_N_Mo7SE551(
    JNIEnv* env,
    jclass jcaller,
    jstring url,
    jobject responseConsumer) {
  return JNI_FeedImageFetchClient_SendRequest(env, base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jobject>(env, responseConsumer));
}

static void JNI_FeedImageFetchClient_Cancel(JNIEnv* env, jint requestId);

JNI_GENERATOR_EXPORT void Java_J_N_MTcrFcWk(
    JNIEnv* env,
    jclass jcaller,
    jint requestId) {
  return JNI_FeedImageFetchClient_Cancel(env, requestId);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_feed_FeedImageFetchClient_onHttpResponse(nullptr);
static void Java_FeedImageFetchClient_onHttpResponse(JNIEnv* env, const
    base::android::JavaRef<jobject>& responseConsumer,
    JniIntWrapper status,
    const base::android::JavaRef<jbyteArray>& body) {
  jclass clazz = org_chromium_chrome_browser_feed_FeedImageFetchClient_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_feed_FeedImageFetchClient_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onHttpResponse",
          "(Lorg/chromium/chrome/browser/xsurface/ImageFetchClient$HttpResponseConsumer;I[B)V",
          &g_org_chromium_chrome_browser_feed_FeedImageFetchClient_onHttpResponse);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, responseConsumer.obj(), as_jint(status), body.obj());
}

}  // namespace feed

#endif  // org_chromium_chrome_browser_feed_FeedImageFetchClient_JNI
