// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/permissions/PermissionUpdateRequester

#ifndef org_chromium_chrome_browser_permissions_PermissionUpdateRequester_JNI
#define org_chromium_chrome_browser_permissions_PermissionUpdateRequester_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_permissions_PermissionUpdateRequester[];
const char kClassPath_org_chromium_chrome_browser_permissions_PermissionUpdateRequester[] =
    "org/chromium/chrome/browser/permissions/PermissionUpdateRequester";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_permissions_PermissionUpdateRequester_clazz(nullptr);
#ifndef org_chromium_chrome_browser_permissions_PermissionUpdateRequester_clazz_defined
#define org_chromium_chrome_browser_permissions_PermissionUpdateRequester_clazz_defined
inline jclass org_chromium_chrome_browser_permissions_PermissionUpdateRequester_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_permissions_PermissionUpdateRequester,
      &g_org_chromium_chrome_browser_permissions_PermissionUpdateRequester_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_ML3pG92D(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePermissionUpdateRequester,
    jboolean allPermissionsGranted) {
  PermissionUpdateRequester* native =
      reinterpret_cast<PermissionUpdateRequester*>(nativePermissionUpdateRequester);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPermissionResult");
  return native->OnPermissionResult(env, allPermissionsGranted);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_permissions_PermissionUpdateRequester_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_PermissionUpdateRequester_create(JNIEnv* env,
    jlong nativePtr,
    const base::android::JavaRef<jobject>& webContents,
    const base::android::JavaRef<jobjectArray>& requiredPermissions,
    const base::android::JavaRef<jobjectArray>& optionalPermissions) {
  jclass clazz = org_chromium_chrome_browser_permissions_PermissionUpdateRequester_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_permissions_PermissionUpdateRequester_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLorg/chromium/content_public/browser/WebContents;[Ljava/lang/String;[Ljava/lang/String;)Lorg/chromium/chrome/browser/permissions/PermissionUpdateRequester;",
          &g_org_chromium_chrome_browser_permissions_PermissionUpdateRequester_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePtr, webContents.obj(), requiredPermissions.obj(),
              optionalPermissions.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_permissions_PermissionUpdateRequester_onNativeDestroyed(nullptr);
static void Java_PermissionUpdateRequester_onNativeDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_permissions_PermissionUpdateRequester_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_permissions_PermissionUpdateRequester_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroyed",
          "()V",
          &g_org_chromium_chrome_browser_permissions_PermissionUpdateRequester_onNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_permissions_PermissionUpdateRequester_requestPermissions(nullptr);
static void Java_PermissionUpdateRequester_requestPermissions(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_permissions_PermissionUpdateRequester_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_permissions_PermissionUpdateRequester_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "requestPermissions",
          "()V",
          &g_org_chromium_chrome_browser_permissions_PermissionUpdateRequester_requestPermissions);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_permissions_PermissionUpdateRequester_JNI
