// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/metrics/UmaSessionStats

#ifndef org_chromium_chrome_browser_metrics_UmaSessionStats_JNI
#define org_chromium_chrome_browser_metrics_UmaSessionStats_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_metrics_UmaSessionStats[];
const char kClassPath_org_chromium_chrome_browser_metrics_UmaSessionStats[] =
    "org/chromium/chrome/browser/metrics/UmaSessionStats";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_metrics_UmaSessionStats_clazz(nullptr);
#ifndef org_chromium_chrome_browser_metrics_UmaSessionStats_clazz_defined
#define org_chromium_chrome_browser_metrics_UmaSessionStats_clazz_defined
inline jclass org_chromium_chrome_browser_metrics_UmaSessionStats_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_metrics_UmaSessionStats,
      &g_org_chromium_chrome_browser_metrics_UmaSessionStats_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_UmaSessionStats_Init(JNIEnv* env);

JNI_GENERATOR_EXPORT jlong Java_J_N_MU4tSmY3(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_UmaSessionStats_Init(env);
}

static void JNI_UmaSessionStats_ChangeMetricsReportingConsent(JNIEnv* env, jboolean consent);

JNI_GENERATOR_EXPORT void Java_J_N_Mh1r7OJ_00024(
    JNIEnv* env,
    jclass jcaller,
    jboolean consent) {
  return JNI_UmaSessionStats_ChangeMetricsReportingConsent(env, consent);
}

static void JNI_UmaSessionStats_InitMetricsAndCrashReportingForTesting(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MUxX7QtQ_1ForTesting(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_UmaSessionStats_InitMetricsAndCrashReportingForTesting(env);
}

static void JNI_UmaSessionStats_UnsetMetricsAndCrashReportingForTesting(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MECd7f6K_1ForTesting(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_UmaSessionStats_UnsetMetricsAndCrashReportingForTesting(env);
}

static void JNI_UmaSessionStats_UpdateMetricsAndCrashReportingForTesting(JNIEnv* env, jboolean
    consent);

JNI_GENERATOR_EXPORT void Java_J_N_MyAuEISA_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jboolean consent) {
  return JNI_UmaSessionStats_UpdateMetricsAndCrashReportingForTesting(env, consent);
}

static void JNI_UmaSessionStats_UpdateMetricsServiceState(JNIEnv* env, jboolean mayUpload);

JNI_GENERATOR_EXPORT void Java_J_N_Mq3Hvtdc(
    JNIEnv* env,
    jclass jcaller,
    jboolean mayUpload) {
  return JNI_UmaSessionStats_UpdateMetricsServiceState(env, mayUpload);
}

JNI_GENERATOR_EXPORT void Java_J_N_M950EFso(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeUmaSessionStats,
    jobject caller) {
  UmaSessionStats* native = reinterpret_cast<UmaSessionStats*>(nativeUmaSessionStats);
  CHECK_NATIVE_PTR(env, jcaller, native, "UmaResumeSession");
  return native->UmaResumeSession(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MAKAEiev(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeUmaSessionStats,
    jobject caller) {
  UmaSessionStats* native = reinterpret_cast<UmaSessionStats*>(nativeUmaSessionStats);
  CHECK_NATIVE_PTR(env, jcaller, native, "UmaEndSession");
  return native->UmaEndSession(env, base::android::JavaParamRef<jobject>(env, caller));
}

static void JNI_UmaSessionStats_RegisterExternalExperiment(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& studyName,
    const base::android::JavaParamRef<jintArray>& experimentIds,
    jboolean overrideExistingIds);

JNI_GENERATOR_EXPORT void Java_J_N_MwmPuE_00024v(
    JNIEnv* env,
    jclass jcaller,
    jstring studyName,
    jintArray experimentIds,
    jboolean overrideExistingIds) {
  return JNI_UmaSessionStats_RegisterExternalExperiment(env,
      base::android::JavaParamRef<jstring>(env, studyName),
      base::android::JavaParamRef<jintArray>(env, experimentIds), overrideExistingIds);
}

static void JNI_UmaSessionStats_RegisterSyntheticFieldTrial(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& trialName,
    const base::android::JavaParamRef<jstring>& groupName,
    jint annotationMode);

JNI_GENERATOR_EXPORT void Java_J_N_MT4iKtWs(
    JNIEnv* env,
    jclass jcaller,
    jstring trialName,
    jstring groupName,
    jint annotationMode) {
  return JNI_UmaSessionStats_RegisterSyntheticFieldTrial(env,
      base::android::JavaParamRef<jstring>(env, trialName),
      base::android::JavaParamRef<jstring>(env, groupName), annotationMode);
}

static void JNI_UmaSessionStats_RecordTabCountPerLoad(JNIEnv* env, jint numTabsOpen);

JNI_GENERATOR_EXPORT void Java_J_N_MP6JTEGK(
    JNIEnv* env,
    jclass jcaller,
    jint numTabsOpen) {
  return JNI_UmaSessionStats_RecordTabCountPerLoad(env, numTabsOpen);
}

static void JNI_UmaSessionStats_RecordPageLoaded(JNIEnv* env, jboolean isDesktopUserAgent);

JNI_GENERATOR_EXPORT void Java_J_N_MZTfl9lI(
    JNIEnv* env,
    jclass jcaller,
    jboolean isDesktopUserAgent) {
  return JNI_UmaSessionStats_RecordPageLoaded(env, isDesktopUserAgent);
}

static void JNI_UmaSessionStats_RecordPageLoadedWithKeyboard(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MeATiwBk(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_UmaSessionStats_RecordPageLoadedWithKeyboard(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_metrics_UmaSessionStats_hasVisibleActivity(nullptr);
static jboolean Java_UmaSessionStats_hasVisibleActivity(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_metrics_UmaSessionStats_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_metrics_UmaSessionStats_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "hasVisibleActivity",
          "()Z",
          &g_org_chromium_chrome_browser_metrics_UmaSessionStats_hasVisibleActivity);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

#endif  // org_chromium_chrome_browser_metrics_UmaSessionStats_JNI
