// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/browserservices/permissiondelegation/InstalledWebappGeolocationBridge

#ifndef org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_JNI
#define org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge[];
const char
    kClassPath_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge[]
    =
    "org/chromium/chrome/browser/browserservices/permissiondelegation/InstalledWebappGeolocationBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_clazz_defined
#define org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_clazz_defined
inline jclass
    org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge,
      &g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_M5uE1cdn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInstalledWebappGeolocationBridge,
    jdouble latitude,
    jdouble longitude,
    jdouble timeStamp,
    jboolean hasAltitude,
    jdouble altitude,
    jboolean hasAccuracy,
    jdouble accuracy,
    jboolean hasHeading,
    jdouble heading,
    jboolean hasSpeed,
    jdouble speed) {
  InstalledWebappGeolocationBridge* native =
      reinterpret_cast<InstalledWebappGeolocationBridge*>(nativeInstalledWebappGeolocationBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnNewLocationAvailable");
  return native->OnNewLocationAvailable(env, latitude, longitude, timeStamp, hasAltitude, altitude,
      hasAccuracy, accuracy, hasHeading, heading, hasSpeed, speed);
}

JNI_GENERATOR_EXPORT void Java_J_N_M243l30e(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInstalledWebappGeolocationBridge,
    jstring message) {
  InstalledWebappGeolocationBridge* native =
      reinterpret_cast<InstalledWebappGeolocationBridge*>(nativeInstalledWebappGeolocationBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnNewErrorAvailable");
  return native->OnNewErrorAvailable(env, base::android::JavaParamRef<jstring>(env, message));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_InstalledWebappGeolocationBridge_create(JNIEnv* env, jlong nativePtr,
    const base::android::JavaRef<jstring>& url) {
  jclass clazz =
      org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_clazz(env),
          NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLjava/lang/String;)Lorg/chromium/chrome/browser/browserservices/permissiondelegation/InstalledWebappGeolocationBridge;",
&g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePtr, url.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_start(nullptr);
static void Java_InstalledWebappGeolocationBridge_start(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean highAccuracy) {
  jclass clazz =
      org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "start",
          "(Z)V",
&g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_start);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, highAccuracy);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_stopAndDestroy(nullptr);
static void Java_InstalledWebappGeolocationBridge_stopAndDestroy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz =
      org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "stopAndDestroy",
          "()V",
&g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_stopAndDestroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappGeolocationBridge_JNI
