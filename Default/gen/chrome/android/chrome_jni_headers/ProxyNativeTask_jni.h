// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/background_task_scheduler/ProxyNativeTask

#ifndef org_chromium_chrome_browser_background_task_scheduler_ProxyNativeTask_JNI
#define org_chromium_chrome_browser_background_task_scheduler_ProxyNativeTask_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_ProxyNativeTask_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    jint taskType,
    const base::android::JavaParamRef<jstring>& extras,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT jlong Java_J_N_MFWoHdRt(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jint taskType,
    jstring extras,
    jobject callback) {
  return JNI_ProxyNativeTask_Init(env, base::android::JavaParamRef<jobject>(env, caller), taskType,
      base::android::JavaParamRef<jstring>(env, extras), base::android::JavaParamRef<jobject>(env,
      callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MgNysWkl(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProxyNativeTask,
    jobject caller,
    jobject key) {
  ProxyNativeTask* native = reinterpret_cast<ProxyNativeTask*>(nativeProxyNativeTask);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartBackgroundTaskInReducedMode");
  return native->StartBackgroundTaskInReducedMode(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, key));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mh0pzgZH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProxyNativeTask,
    jobject caller,
    jobject profile) {
  ProxyNativeTask* native = reinterpret_cast<ProxyNativeTask*>(nativeProxyNativeTask);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartBackgroundTaskWithFullBrowser");
  return native->StartBackgroundTaskWithFullBrowser(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, profile));
}

JNI_GENERATOR_EXPORT void Java_J_N_MlPuxSGY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProxyNativeTask,
    jobject caller,
    jobject profile) {
  ProxyNativeTask* native = reinterpret_cast<ProxyNativeTask*>(nativeProxyNativeTask);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnFullBrowserLoaded");
  return native->OnFullBrowserLoaded(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, profile));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MQTaGJay(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProxyNativeTask,
    jobject caller) {
  ProxyNativeTask* native = reinterpret_cast<ProxyNativeTask*>(nativeProxyNativeTask);
  CHECK_NATIVE_PTR(env, jcaller, native, "StopBackgroundTask", false);
  return native->StopBackgroundTask(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MJHnuE5A(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProxyNativeTask,
    jobject caller) {
  ProxyNativeTask* native = reinterpret_cast<ProxyNativeTask*>(nativeProxyNativeTask);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}


#endif  // org_chromium_chrome_browser_background_task_scheduler_ProxyNativeTask_JNI
