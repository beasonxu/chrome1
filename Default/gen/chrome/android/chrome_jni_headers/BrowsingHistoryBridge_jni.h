// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/history/BrowsingHistoryBridge

#ifndef org_chromium_chrome_browser_history_BrowsingHistoryBridge_JNI
#define org_chromium_chrome_browser_history_BrowsingHistoryBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_history_BrowsingHistoryBridge[];
const char kClassPath_org_chromium_chrome_browser_history_BrowsingHistoryBridge[] =
    "org/chromium/chrome/browser/history/BrowsingHistoryBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz_defined
#define org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz_defined
inline jclass org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_history_BrowsingHistoryBridge,
      &g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_BrowsingHistoryBridge_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    const base::android::JavaParamRef<jobject>& profile);

JNI_GENERATOR_EXPORT jlong Java_J_N_Mj1_1ZHGA(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject profile) {
  return JNI_BrowsingHistoryBridge_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, profile));
}

JNI_GENERATOR_EXPORT void Java_J_N_MZEuRD6z(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowsingHistoryBridge,
    jobject caller) {
  BrowsingHistoryBridge* native =
      reinterpret_cast<BrowsingHistoryBridge*>(nativeBrowsingHistoryBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_ML_00024TCyGp(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowsingHistoryBridge,
    jobject caller,
    jobject historyItems,
    jstring query,
    jboolean hostOnly) {
  BrowsingHistoryBridge* native =
      reinterpret_cast<BrowsingHistoryBridge*>(nativeBrowsingHistoryBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "QueryHistory");
  return native->QueryHistory(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, historyItems),
      base::android::JavaParamRef<jstring>(env, query), hostOnly);
}

JNI_GENERATOR_EXPORT void Java_J_N_MuGq8Vn6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowsingHistoryBridge,
    jobject caller,
    jobject historyItems) {
  BrowsingHistoryBridge* native =
      reinterpret_cast<BrowsingHistoryBridge*>(nativeBrowsingHistoryBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "QueryHistoryContinuation");
  return native->QueryHistoryContinuation(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, historyItems));
}

JNI_GENERATOR_EXPORT void Java_J_N_MN48Z3Io(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowsingHistoryBridge,
    jobject caller,
    jstring hostName,
    jobject callback) {
  BrowsingHistoryBridge* native =
      reinterpret_cast<BrowsingHistoryBridge*>(nativeBrowsingHistoryBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLastVisitToHostBeforeRecentNavigations");
  return native->GetLastVisitToHostBeforeRecentNavigations(env,
      base::android::JavaParamRef<jobject>(env, caller), base::android::JavaParamRef<jstring>(env,
      hostName), base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mya3ANHw(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowsingHistoryBridge,
    jobject caller,
    jobject url,
    jlongArray nativeTimestamps) {
  BrowsingHistoryBridge* native =
      reinterpret_cast<BrowsingHistoryBridge*>(nativeBrowsingHistoryBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "MarkItemForRemoval");
  return native->MarkItemForRemoval(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, url), base::android::JavaParamRef<jlongArray>(env,
      nativeTimestamps));
}

JNI_GENERATOR_EXPORT void Java_J_N_MVl9wW5M(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowsingHistoryBridge,
    jobject caller) {
  BrowsingHistoryBridge* native =
      reinterpret_cast<BrowsingHistoryBridge*>(nativeBrowsingHistoryBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveItems");
  return native->RemoveItems(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_createHistoryItemAndAddToList(nullptr);
static void Java_BrowsingHistoryBridge_createHistoryItemAndAddToList(JNIEnv* env, const
    base::android::JavaRef<jobject>& items,
    const base::android::JavaRef<jobject>& url,
    const base::android::JavaRef<jstring>& domain,
    const base::android::JavaRef<jstring>& title,
    jlong mostRecentJavaTimestamp,
    const base::android::JavaRef<jlongArray>& nativeTimestamps,
    jboolean blockedVisit) {
  jclass clazz = org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createHistoryItemAndAddToList",
          "(Ljava/util/List;Lorg/chromium/url/GURL;Ljava/lang/String;Ljava/lang/String;J[JZ)V",
&g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_createHistoryItemAndAddToList);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, items.obj(), url.obj(), domain.obj(), title.obj(),
              mostRecentJavaTimestamp, nativeTimestamps.obj(), blockedVisit);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_onQueryHistoryComplete(nullptr);
static void Java_BrowsingHistoryBridge_onQueryHistoryComplete(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& items,
    jboolean hasMorePotentialMatches) {
  jclass clazz = org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onQueryHistoryComplete",
          "(Ljava/util/List;Z)V",
          &g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_onQueryHistoryComplete);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, items.obj(), hasMorePotentialMatches);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_onRemoveComplete(nullptr);
static void Java_BrowsingHistoryBridge_onRemoveComplete(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onRemoveComplete",
          "()V",
          &g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_onRemoveComplete);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_onRemoveFailed(nullptr);
static void Java_BrowsingHistoryBridge_onRemoveFailed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onRemoveFailed",
          "()V",
          &g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_onRemoveFailed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_onHistoryDeleted(nullptr);
static void Java_BrowsingHistoryBridge_onHistoryDeleted(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onHistoryDeleted",
          "()V",
          &g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_onHistoryDeleted);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_hasOtherFormsOfBrowsingData(nullptr);
static void Java_BrowsingHistoryBridge_hasOtherFormsOfBrowsingData(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean hasOtherForms) {
  jclass clazz = org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_history_BrowsingHistoryBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "hasOtherFormsOfBrowsingData",
          "(Z)V",
          &g_org_chromium_chrome_browser_history_BrowsingHistoryBridge_hasOtherFormsOfBrowsingData);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, hasOtherForms);
}

#endif  // org_chromium_chrome_browser_history_BrowsingHistoryBridge_JNI
