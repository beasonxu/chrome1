// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/offlinepages/downloads/OfflinePageDownloadBridge

#ifndef org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_JNI
#define org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge[];
const char kClassPath_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge[]
    = "org/chromium/chrome/browser/offlinepages/downloads/OfflinePageDownloadBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_clazz_defined
#define org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_clazz_defined
inline jclass
    org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge,
      &g_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace offline_pages {
namespace android {

static jlong JNI_OfflinePageDownloadBridge_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MnuITPuJ(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_OfflinePageDownloadBridge_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MZ6TBRPK(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageDownloadBridge,
    jobject caller) {
  OfflinePageDownloadBridge* native =
      reinterpret_cast<OfflinePageDownloadBridge*>(nativeOfflinePageDownloadBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

static void JNI_OfflinePageDownloadBridge_StartDownload(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& tab,
    const base::android::JavaParamRef<jstring>& origin);

JNI_GENERATOR_EXPORT void Java_J_N_MgaTXnFG(
    JNIEnv* env,
    jclass jcaller,
    jobject tab,
    jstring origin) {
  return JNI_OfflinePageDownloadBridge_StartDownload(env, base::android::JavaParamRef<jobject>(env,
      tab), base::android::JavaParamRef<jstring>(env, origin));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_openItem(nullptr);
static void Java_OfflinePageDownloadBridge_openItem(JNIEnv* env, const
    base::android::JavaRef<jstring>& url,
    jlong offlineId,
    JniIntWrapper location,
    jboolean isIncognito,
    jboolean openInCct) {
  jclass clazz =
      org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "openItem",
          "(Ljava/lang/String;JIZZ)V",
          &g_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_openItem);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, url.obj(), offlineId, as_jint(location), isIncognito,
              openInCct);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_showDownloadingToast(nullptr);
static void Java_OfflinePageDownloadBridge_showDownloadingToast(JNIEnv* env) {
  jclass clazz =
      org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "showDownloadingToast",
          "()V",
&g_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_showDownloadingToast);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

}  // namespace android
}  // namespace offline_pages

#endif  // org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_JNI
