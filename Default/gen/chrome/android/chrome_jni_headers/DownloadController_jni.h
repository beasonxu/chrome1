// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/download/DownloadController

#ifndef org_chromium_chrome_browser_download_DownloadController_JNI
#define org_chromium_chrome_browser_download_DownloadController_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_download_DownloadController[];
const char kClassPath_org_chromium_chrome_browser_download_DownloadController[] =
    "org/chromium/chrome/browser/download/DownloadController";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_download_DownloadController_clazz(nullptr);
#ifndef org_chromium_chrome_browser_download_DownloadController_clazz_defined
#define org_chromium_chrome_browser_download_DownloadController_clazz_defined
inline jclass org_chromium_chrome_browser_download_DownloadController_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_download_DownloadController,
      &g_org_chromium_chrome_browser_download_DownloadController_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_DownloadController_OnAcquirePermissionResult(JNIEnv* env, jlong callbackId,
    jboolean granted,
    const base::android::JavaParamRef<jstring>& permissionToUpdate);

JNI_GENERATOR_EXPORT void Java_J_N_MLbF8aR_1(
    JNIEnv* env,
    jclass jcaller,
    jlong callbackId,
    jboolean granted,
    jstring permissionToUpdate) {
  return JNI_DownloadController_OnAcquirePermissionResult(env, callbackId, granted,
      base::android::JavaParamRef<jstring>(env, permissionToUpdate));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadController_onDownloadCompleted(nullptr);
static void Java_DownloadController_onDownloadCompleted(JNIEnv* env, const
    base::android::JavaRef<jobject>& downloadInfo) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadController_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onDownloadCompleted",
          "(Lorg/chromium/chrome/browser/download/DownloadInfo;)V",
          &g_org_chromium_chrome_browser_download_DownloadController_onDownloadCompleted);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, downloadInfo.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadController_onDownloadInterrupted(nullptr);
static void Java_DownloadController_onDownloadInterrupted(JNIEnv* env, const
    base::android::JavaRef<jobject>& downloadInfo,
    jboolean isAutoResumable) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadController_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onDownloadInterrupted",
          "(Lorg/chromium/chrome/browser/download/DownloadInfo;Z)V",
          &g_org_chromium_chrome_browser_download_DownloadController_onDownloadInterrupted);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, downloadInfo.obj(), isAutoResumable);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadController_onDownloadCancelled(nullptr);
static void Java_DownloadController_onDownloadCancelled(JNIEnv* env, const
    base::android::JavaRef<jobject>& downloadInfo) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadController_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onDownloadCancelled",
          "(Lorg/chromium/chrome/browser/download/DownloadInfo;)V",
          &g_org_chromium_chrome_browser_download_DownloadController_onDownloadCancelled);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, downloadInfo.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadController_onDownloadUpdated(nullptr);
static void Java_DownloadController_onDownloadUpdated(JNIEnv* env, const
    base::android::JavaRef<jobject>& downloadInfo) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadController_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onDownloadUpdated",
          "(Lorg/chromium/chrome/browser/download/DownloadInfo;)V",
          &g_org_chromium_chrome_browser_download_DownloadController_onDownloadUpdated);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, downloadInfo.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadController_hasFileAccess(nullptr);
static jboolean Java_DownloadController_hasFileAccess(JNIEnv* env, const
    base::android::JavaRef<jobject>& windowAndroid) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadController_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadController_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "hasFileAccess",
          "(Lorg/chromium/ui/base/WindowAndroid;)Z",
          &g_org_chromium_chrome_browser_download_DownloadController_hasFileAccess);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, windowAndroid.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadController_requestFileAccess(nullptr);
static void Java_DownloadController_requestFileAccess(JNIEnv* env, jlong callbackId,
    const base::android::JavaRef<jobject>& windowAndroid) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadController_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "requestFileAccess",
          "(JLorg/chromium/ui/base/WindowAndroid;)V",
          &g_org_chromium_chrome_browser_download_DownloadController_requestFileAccess);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, callbackId, windowAndroid.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadController_enqueueAndroidDownloadManagerRequest(nullptr);
static void Java_DownloadController_enqueueAndroidDownloadManagerRequest(JNIEnv* env, const
    base::android::JavaRef<jobject>& url,
    const base::android::JavaRef<jstring>& userAgent,
    const base::android::JavaRef<jstring>& fileName,
    const base::android::JavaRef<jstring>& mimeType,
    const base::android::JavaRef<jstring>& cookie,
    const base::android::JavaRef<jobject>& referrer) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadController_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "enqueueAndroidDownloadManagerRequest",
"(Lorg/chromium/url/GURL;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/chromium/url/GURL;)V",
&g_org_chromium_chrome_browser_download_DownloadController_enqueueAndroidDownloadManagerRequest);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, url.obj(), userAgent.obj(), fileName.obj(), mimeType.obj(),
              cookie.obj(), referrer.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadController_onDownloadStarted(nullptr);
static void Java_DownloadController_onDownloadStarted(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadController_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onDownloadStarted",
          "()V",
          &g_org_chromium_chrome_browser_download_DownloadController_onDownloadStarted);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_download_DownloadController_JNI
