// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/tabmodel/TabModelJniBridge

#ifndef org_chromium_chrome_browser_tabmodel_TabModelJniBridge_JNI
#define org_chromium_chrome_browser_tabmodel_TabModelJniBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_tabmodel_TabModelJniBridge[];
const char kClassPath_org_chromium_chrome_browser_tabmodel_TabModelJniBridge[] =
    "org/chromium/chrome/browser/tabmodel/TabModelJniBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz_defined
#define org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz_defined
inline jclass org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_tabmodel_TabModelJniBridge,
      &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_TabModelJniBridge_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    const base::android::JavaParamRef<jobject>& profile,
    jint activityType);

JNI_GENERATOR_EXPORT jlong Java_J_N_M15HofTq(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject profile,
    jint activityType) {
  return JNI_TabModelJniBridge_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, profile), activityType);
}

JNI_GENERATOR_EXPORT jobject Java_J_N_McKCR2Q3(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelJniBridge,
    jobject caller) {
  TabModelJniBridge* native = reinterpret_cast<TabModelJniBridge*>(nativeTabModelJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetProfileAndroid", NULL);
  return native->GetProfileAndroid(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MY_1BqaOA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelJniBridge,
    jobject caller) {
  TabModelJniBridge* native = reinterpret_cast<TabModelJniBridge*>(nativeTabModelJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "BroadcastSessionRestoreComplete");
  return native->BroadcastSessionRestoreComplete(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mg3Aho0E(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelJniBridge,
    jobject caller) {
  TabModelJniBridge* native = reinterpret_cast<TabModelJniBridge*>(nativeTabModelJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2Pb3_000249r(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelJniBridge,
    jobject caller,
    jobject tab) {
  TabModelJniBridge* native = reinterpret_cast<TabModelJniBridge*>(nativeTabModelJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "TabAddedToModel");
  return native->TabAddedToModel(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_setIndex(nullptr);
static void Java_TabModelJniBridge_setIndex(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    JniIntWrapper index) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setIndex",
          "(I)V",
          &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_setIndex);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(index));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_getTabAt(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TabModelJniBridge_getTabAt(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper index) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getTabAt",
          "(I)Lorg/chromium/chrome/browser/tab/Tab;",
          &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_getTabAt);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, as_jint(index));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_closeTabAt(nullptr);
static jboolean Java_TabModelJniBridge_closeTabAt(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper index) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "closeTabAt",
          "(I)Z",
          &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_closeTabAt);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, as_jint(index));
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_createTabWithWebContents(nullptr);
static jboolean Java_TabModelJniBridge_createTabWithWebContents(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& parent,
    const base::android::JavaRef<jobject>& profile,
    const base::android::JavaRef<jobject>& webContents) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "createTabWithWebContents",
"(Lorg/chromium/chrome/browser/tab/Tab;Lorg/chromium/chrome/browser/profiles/Profile;Lorg/chromium/content_public/browser/WebContents;)Z",
          &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_createTabWithWebContents);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, parent.obj(), profile.obj(), webContents.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_openNewTab(nullptr);
static void Java_TabModelJniBridge_openNewTab(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& parent,
    const base::android::JavaRef<jobject>& url,
    const base::android::JavaRef<jobject>& initiatorOrigin,
    const base::android::JavaRef<jstring>& extraHeaders,
    const base::android::JavaRef<jobject>& postData,
    JniIntWrapper disposition,
    jboolean persistParentage,
    jboolean isRendererInitiated) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "openNewTab",
"(Lorg/chromium/chrome/browser/tab/Tab;Lorg/chromium/url/GURL;Lorg/chromium/url/Origin;Ljava/lang/String;Lorg/chromium/content_public/common/ResourceRequestBody;IZZ)V",
          &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_openNewTab);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, parent.obj(), url.obj(), initiatorOrigin.obj(),
              extraHeaders.obj(), postData.obj(), as_jint(disposition), persistParentage,
              isRendererInitiated);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_createNewTabForDevTools(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_TabModelJniBridge_createNewTabForDevTools(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& url) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "createNewTabForDevTools",
          "(Lorg/chromium/url/GURL;)Lorg/chromium/chrome/browser/tab/Tab;",
          &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_createNewTabForDevTools);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, url.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_hasOtherRelatedTabs(nullptr);
static jboolean Java_TabModelJniBridge_hasOtherRelatedTabs(JNIEnv* env, const
    base::android::JavaRef<jobject>& tab) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "hasOtherRelatedTabs",
          "(Lorg/chromium/chrome/browser/tab/Tab;)Z",
          &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_hasOtherRelatedTabs);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, tab.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_getCount(nullptr);
static jint Java_TabModelJniBridge_getCount(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getCount",
          "()I",
          &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_getCount);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_index(nullptr);
static jint Java_TabModelJniBridge_index(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "index",
          "()I",
          &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_index);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_isSessionRestoreInProgress(nullptr);
static jboolean Java_TabModelJniBridge_isSessionRestoreInProgress(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isSessionRestoreInProgress",
          "()Z",
          &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_isSessionRestoreInProgress);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_isActiveModel(nullptr);
static jboolean Java_TabModelJniBridge_isActiveModel(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tabmodel_TabModelJniBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isActiveModel",
          "()Z",
          &g_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_isActiveModel);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

#endif  // org_chromium_chrome_browser_tabmodel_TabModelJniBridge_JNI
