// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/webapps/WebApkInstallCoordinatorBridge

#ifndef org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_JNI
#define org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge[];
const char kClassPath_org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge[] =
    "org/chromium/chrome/browser/webapps/WebApkInstallCoordinatorBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_clazz_defined
#define org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_clazz_defined
inline jclass org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge,
      &g_org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace webapps {

static jlong JNI_WebApkInstallCoordinatorBridge_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MpLwMZHi(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_WebApkInstallCoordinatorBridge_Init(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2rXsUfq(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebApkInstallCoordinatorBridge,
    jobject caller,
    jbyteArray apkProto,
    jobject primaryIcon,
    jboolean isPrimaryIconMaskable) {
  WebApkInstallCoordinatorBridge* native =
      reinterpret_cast<WebApkInstallCoordinatorBridge*>(nativeWebApkInstallCoordinatorBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Install");
  return native->Install(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jbyteArray>(env, apkProto),
      base::android::JavaParamRef<jobject>(env, primaryIcon), isPrimaryIconMaskable);
}

JNI_GENERATOR_EXPORT void Java_J_N_MIO1A7Cv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebApkInstallCoordinatorBridge) {
  WebApkInstallCoordinatorBridge* native =
      reinterpret_cast<WebApkInstallCoordinatorBridge*>(nativeWebApkInstallCoordinatorBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_onFinishedInstall(nullptr);
static void Java_WebApkInstallCoordinatorBridge_onFinishedInstall(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper result) {
  jclass clazz = org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onFinishedInstall",
          "(I)V",
          &g_org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_onFinishedInstall);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(result));
}

}  // namespace webapps

#endif  // org_chromium_chrome_browser_webapps_WebApkInstallCoordinatorBridge_JNI
