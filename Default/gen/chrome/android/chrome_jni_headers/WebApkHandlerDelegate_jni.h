// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/webapps/WebApkHandlerDelegate

#ifndef org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_JNI
#define org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_webapps_WebApkHandlerDelegate[];
const char kClassPath_org_chromium_chrome_browser_webapps_WebApkHandlerDelegate[] =
    "org/chromium/chrome/browser/webapps/WebApkHandlerDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_clazz(nullptr);
#ifndef org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_clazz_defined
#define org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_clazz_defined
inline jclass org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_webapps_WebApkHandlerDelegate,
      &g_org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_MXibFIFs(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebApkHandlerDelegate,
    jstring name,
    jstring shortName,
    jstring packageName,
    jstring id,
    jint shellApkVersion,
    jint versionCode,
    jstring uri,
    jstring scope,
    jstring manifestUrl,
    jstring manifestStartUrl,
    jstring manifestId,
    jint displayMode,
    jint orientation,
    jlong themeColor,
    jlong backgroundColor,
    jlong lastUpdateCheckTimeMs,
    jlong lastUpdateCompletionTimeMs,
    jboolean relaxUpdates,
    jstring backingBrowserPackageName,
    jboolean isBackingBrowser,
    jstring updateStatus) {
  WebApkHandlerDelegate* native =
      reinterpret_cast<WebApkHandlerDelegate*>(nativeWebApkHandlerDelegate);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnWebApkInfoRetrieved");
  return native->OnWebApkInfoRetrieved(env, base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jstring>(env, shortName),
      base::android::JavaParamRef<jstring>(env, packageName),
      base::android::JavaParamRef<jstring>(env, id), shellApkVersion, versionCode,
      base::android::JavaParamRef<jstring>(env, uri), base::android::JavaParamRef<jstring>(env,
      scope), base::android::JavaParamRef<jstring>(env, manifestUrl),
      base::android::JavaParamRef<jstring>(env, manifestStartUrl),
      base::android::JavaParamRef<jstring>(env, manifestId), displayMode, orientation, themeColor,
      backgroundColor, lastUpdateCheckTimeMs, lastUpdateCompletionTimeMs, relaxUpdates,
      base::android::JavaParamRef<jstring>(env, backingBrowserPackageName), isBackingBrowser,
      base::android::JavaParamRef<jstring>(env, updateStatus));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_WebApkHandlerDelegate_create(JNIEnv* env,
    jlong nativePointer) {
  jclass clazz = org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/webapps/WebApkHandlerDelegate;",
          &g_org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePointer);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_reset(nullptr);
static void Java_WebApkHandlerDelegate_reset(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "reset",
          "()V",
          &g_org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_reset);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_retrieveWebApks(nullptr);
static void Java_WebApkHandlerDelegate_retrieveWebApks(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "retrieveWebApks",
          "()V",
          &g_org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_retrieveWebApks);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_webapps_WebApkHandlerDelegate_JNI
