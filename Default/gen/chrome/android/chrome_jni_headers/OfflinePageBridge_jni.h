// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/offlinepages/OfflinePageBridge

#ifndef org_chromium_chrome_browser_offlinepages_OfflinePageBridge_JNI
#define org_chromium_chrome_browser_offlinepages_OfflinePageBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_offlinepages_OfflinePageBridge[];
const char kClassPath_org_chromium_chrome_browser_offlinepages_OfflinePageBridge[] =
    "org/chromium/chrome/browser/offlinepages/OfflinePageBridge";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback[];
const char
    kClassPath_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback[] =
    "org/chromium/chrome/browser/offlinepages/OfflinePageBridge$SavePageCallback";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz_defined
#define org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz_defined
inline jclass org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_offlinepages_OfflinePageBridge,
      &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback_clazz(nullptr);
#ifndef org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback_clazz_defined
#define org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback_clazz_defined
inline jclass
    org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback,
      &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace offline_pages {
namespace android {

static jboolean JNI_OfflinePageBridge_CanSavePage(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& url);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MXyz2Okt(
    JNIEnv* env,
    jclass jcaller,
    jobject url) {
  return JNI_OfflinePageBridge_CanSavePage(env, base::android::JavaParamRef<jobject>(env, url));
}

static base::android::ScopedJavaLocalRef<jobject>
    JNI_OfflinePageBridge_GetOfflinePageBridgeForProfileKey(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& profileKey);

JNI_GENERATOR_EXPORT jobject Java_J_N_MspGcmXb(
    JNIEnv* env,
    jclass jcaller,
    jobject profileKey) {
  return JNI_OfflinePageBridge_GetOfflinePageBridgeForProfileKey(env,
      base::android::JavaParamRef<jobject>(env, profileKey)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MBAG2og_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject offlinePages,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAllPages");
  return native->GetAllPages(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, offlinePages),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MIDiWOi_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject webContents) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "WillCloseTab");
  return native->WillCloseTab(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_M8YdeM7z(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jlong offlineId,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPageByOfflineId");
  return native->GetPageByOfflineId(env, base::android::JavaParamRef<jobject>(env, caller),
      offlineId, base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MnXU5_00024QT(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject result,
    jobjectArray namespaces,
    jobjectArray ids,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPagesByClientId");
  return native->GetPagesByClientId(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, result),
      base::android::JavaParamRef<jobjectArray>(env, namespaces),
      base::android::JavaParamRef<jobjectArray>(env, ids), base::android::JavaParamRef<jobject>(env,
      callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MIDl27P6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject result,
    jstring requestOrigin,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPagesByRequestOrigin");
  return native->GetPagesByRequestOrigin(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, result), base::android::JavaParamRef<jstring>(env,
      requestOrigin), base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MJ_00024y30Dy(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject result,
    jstring nameSpace,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPagesByNamespace");
  return native->GetPagesByNamespace(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, result), base::android::JavaParamRef<jstring>(env,
      nameSpace), base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mwp3hyBt(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobjectArray namespaces,
    jobjectArray ids,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeletePagesByClientId");
  return native->DeletePagesByClientId(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobjectArray>(env, namespaces),
      base::android::JavaParamRef<jobjectArray>(env, ids), base::android::JavaParamRef<jobject>(env,
      callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MXul9JQQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobjectArray namespaces,
    jobjectArray ids,
    jstring origin,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeletePagesByClientIdAndOrigin");
  return native->DeletePagesByClientIdAndOrigin(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobjectArray>(env, namespaces),
      base::android::JavaParamRef<jobjectArray>(env, ids), base::android::JavaParamRef<jstring>(env,
      origin), base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MdLxBRGW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jlongArray offlineIds,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeletePagesByOfflineId");
  return native->DeletePagesByOfflineId(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jlongArray>(env, offlineIds),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MSHYzaXq(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jlong offlineId,
    jobject publishedCallback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "PublishInternalPageByOfflineId");
  return native->PublishInternalPageByOfflineId(env, base::android::JavaParamRef<jobject>(env,
      caller), offlineId, base::android::JavaParamRef<jobject>(env, publishedCallback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MLQauPJ1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jstring guid,
    jobject publishedCallback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "PublishInternalPageByGuid");
  return native->PublishInternalPageByGuid(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, guid), base::android::JavaParamRef<jobject>(env,
      publishedCallback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MR_137z77(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject onlineUrl,
    jint tabId,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SelectPageForOnlineUrl");
  return native->SelectPageForOnlineUrl(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, onlineUrl), tabId,
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MD7l7nn_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject callback,
    jobject webContents,
    jstring clientNamespace,
    jstring clientId,
    jstring origin) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SavePage");
  return native->SavePage(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, callback), base::android::JavaParamRef<jobject>(env,
      webContents), base::android::JavaParamRef<jstring>(env, clientNamespace),
      base::android::JavaParamRef<jstring>(env, clientId), base::android::JavaParamRef<jstring>(env,
      origin));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MRMfaXXV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject webContents) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOfflinePageHeaderForReload", NULL);
  return native->GetOfflinePageHeaderForReload(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, webContents)).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MYT2RMuB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject webContents) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsShowingOfflinePreview", false);
  return native->IsShowingOfflinePreview(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mvkx0jqI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject webContents) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsShowingDownloadButtonInErrorPage", false);
  return native->IsShowingDownloadButtonInErrorPage(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_MNR_1O1IV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject webContents,
    jstring nameSpace,
    jstring url,
    jint uiAction,
    jstring origin) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScheduleDownload");
  return native->ScheduleDownload(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents),
      base::android::JavaParamRef<jstring>(env, nameSpace),
      base::android::JavaParamRef<jstring>(env, url), uiAction,
      base::android::JavaParamRef<jstring>(env, origin));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mmgl0zEx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject webContents) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsOfflinePage", false);
  return native->IsOfflinePage(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MT9xecBl(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jstring filePath) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsInPrivateDirectory", false);
  return native->IsInPrivateDirectory(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, filePath));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MB5pa3Na(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jstring nameSpace) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsTemporaryNamespace", false);
  return native->IsTemporaryNamespace(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, nameSpace));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MzjNdQag(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject webContents) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOfflinePage", NULL);
  return native->GetOfflinePage(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MBaVkYrR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jlong offlineId,
    jint location,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLoadUrlParamsByOfflineId");
  return native->GetLoadUrlParamsByOfflineId(env, base::android::JavaParamRef<jobject>(env, caller),
      offlineId, location, base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MD0P9_1ar(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject webContents) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsShowingTrustedOfflinePage", false);
  return native->IsShowingTrustedOfflinePage(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_MRrUWI5B(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jstring url,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLoadUrlParamsForOpeningMhtmlFileOrContent");
  return native->GetLoadUrlParamsForOpeningMhtmlFileOrContent(env,
      base::android::JavaParamRef<jobject>(env, caller), base::android::JavaParamRef<jstring>(env,
      url), base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_M5gQgQvs(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOfflinePageBridge,
    jobject caller,
    jobject webContents,
    jobject callback) {
  OfflinePageBridge* native = reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "AcquireFileAccessPermission");
  return native->AcquireFileAccessPermission(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents),
      base::android::JavaParamRef<jobject>(env, callback));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback_onSavePageDone(nullptr);
static void Java_SavePageCallback_onSavePageDone(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper savePageResult,
    const base::android::JavaRef<jstring>& url,
    jlong offlineId) {
  jclass clazz =
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onSavePageDone",
          "(ILjava/lang/String;J)V",
&g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_00024SavePageCallback_onSavePageDone);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(savePageResult), url.obj(), offlineId);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_OfflinePageBridge_create(JNIEnv* env, jlong
    nativeOfflinePageBridge) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/offlinepages/OfflinePageBridge;",
          &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeOfflinePageBridge);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_getEncodedOriginApp(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_OfflinePageBridge_getEncodedOriginApp(JNIEnv*
    env, const base::android::JavaRef<jobject>& tab) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getEncodedOriginApp",
          "(Lorg/chromium/chrome/browser/tab/Tab;)Ljava/lang/String;",
          &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_getEncodedOriginApp);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, tab.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_offlinePageModelLoaded(nullptr);
static void Java_OfflinePageBridge_offlinePageModelLoaded(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "offlinePageModelLoaded",
          "()V",
          &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_offlinePageModelLoaded);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_offlinePageAdded(nullptr);
static void Java_OfflinePageBridge_offlinePageAdded(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& addedPage) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "offlinePageAdded",
          "(Lorg/chromium/chrome/browser/offlinepages/OfflinePageItem;)V",
          &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_offlinePageAdded);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, addedPage.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_offlinePageBridgeDestroyed(nullptr);
static void Java_OfflinePageBridge_offlinePageBridgeDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "offlinePageBridgeDestroyed",
          "()V",
          &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_offlinePageBridgeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_offlinePageDeleted(nullptr);
static void Java_OfflinePageBridge_offlinePageDeleted(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& deletedPage) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "offlinePageDeleted",
          "(Lorg/chromium/chrome/browser/offlinepages/DeletedPageInfo;)V",
          &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_offlinePageDeleted);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, deletedPage.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_createOfflinePageAndAddToList(nullptr);
static void Java_OfflinePageBridge_createOfflinePageAndAddToList(JNIEnv* env, const
    base::android::JavaRef<jobject>& offlinePagesList,
    const base::android::JavaRef<jstring>& url,
    jlong offlineId,
    const base::android::JavaRef<jstring>& clientNamespace,
    const base::android::JavaRef<jstring>& clientId,
    const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jstring>& filePath,
    jlong fileSize,
    jlong creationTime,
    JniIntWrapper accessCount,
    jlong lastAccessTimeMs,
    const base::android::JavaRef<jstring>& requestOrigin) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createOfflinePageAndAddToList",
"(Ljava/util/List;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJIJLjava/lang/String;)V",
&g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_createOfflinePageAndAddToList);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, offlinePagesList.obj(), url.obj(), offlineId,
              clientNamespace.obj(), clientId.obj(), title.obj(), filePath.obj(), fileSize,
              creationTime, as_jint(accessCount), lastAccessTimeMs, requestOrigin.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_createOfflinePageItem(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_OfflinePageBridge_createOfflinePageItem(JNIEnv* env, const base::android::JavaRef<jstring>&
    url,
    jlong offlineId,
    const base::android::JavaRef<jstring>& clientNamespace,
    const base::android::JavaRef<jstring>& clientId,
    const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jstring>& filePath,
    jlong fileSize,
    jlong creationTime,
    JniIntWrapper accessCount,
    jlong lastAccessTimeMs,
    const base::android::JavaRef<jstring>& requestOrigin) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createOfflinePageItem",
"(Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJIJLjava/lang/String;)Lorg/chromium/chrome/browser/offlinepages/OfflinePageItem;",
          &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_createOfflinePageItem);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, url.obj(), offlineId, clientNamespace.obj(), clientId.obj(),
              title.obj(), filePath.obj(), fileSize, creationTime, as_jint(accessCount),
              lastAccessTimeMs, requestOrigin.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_createClientId(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_OfflinePageBridge_createClientId(JNIEnv* env,
    const base::android::JavaRef<jstring>& clientNamespace,
    const base::android::JavaRef<jstring>& id) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createClientId",
"(Ljava/lang/String;Ljava/lang/String;)Lorg/chromium/chrome/browser/offlinepages/ClientId;",
          &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_createClientId);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, clientNamespace.obj(), id.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_createDeletedPageInfo(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_OfflinePageBridge_createDeletedPageInfo(JNIEnv* env, jlong offlineId,
    const base::android::JavaRef<jstring>& clientNamespace,
    const base::android::JavaRef<jstring>& clientId,
    const base::android::JavaRef<jstring>& requestOrigin) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createDeletedPageInfo",
"(JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/chromium/chrome/browser/offlinepages/DeletedPageInfo;",
          &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_createDeletedPageInfo);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, offlineId, clientNamespace.obj(), clientId.obj(),
              requestOrigin.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_createLoadUrlParams(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_OfflinePageBridge_createLoadUrlParams(JNIEnv*
    env, const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& extraHeaderKey,
    const base::android::JavaRef<jstring>& extraHeaderValue) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_OfflinePageBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createLoadUrlParams",
"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/chromium/content_public/browser/LoadUrlParams;",
          &g_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_createLoadUrlParams);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, url.obj(), extraHeaderKey.obj(), extraHeaderValue.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace android
}  // namespace offline_pages

#endif  // org_chromium_chrome_browser_offlinepages_OfflinePageBridge_JNI
