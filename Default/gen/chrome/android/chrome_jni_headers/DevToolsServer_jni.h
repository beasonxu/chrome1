// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/DevToolsServer

#ifndef org_chromium_chrome_browser_DevToolsServer_JNI
#define org_chromium_chrome_browser_DevToolsServer_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_chrome_browser_DevToolsServer[];
const char kClassPath_org_chromium_chrome_browser_DevToolsServer[] =
    "org/chromium/chrome/browser/DevToolsServer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_DevToolsServer_clazz(nullptr);
#ifndef org_chromium_chrome_browser_DevToolsServer_clazz_defined
#define org_chromium_chrome_browser_DevToolsServer_clazz_defined
inline jclass org_chromium_chrome_browser_DevToolsServer_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_chrome_browser_DevToolsServer,
      &g_org_chromium_chrome_browser_DevToolsServer_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_DevToolsServer_InitRemoteDebugging(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jstring>& socketNamePrefix);

JNI_GENERATOR_EXPORT jlong Java_J_N_M7TBtHQi(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jstring socketNamePrefix) {
  return JNI_DevToolsServer_InitRemoteDebugging(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jstring>(env, socketNamePrefix));
}

static void JNI_DevToolsServer_DestroyRemoteDebugging(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jlong devToolsServer);

JNI_GENERATOR_EXPORT void Java_J_N_MBXUOsDP(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong devToolsServer) {
  return JNI_DevToolsServer_DestroyRemoteDebugging(env, base::android::JavaParamRef<jobject>(env,
      caller), devToolsServer);
}

static jboolean JNI_DevToolsServer_IsRemoteDebuggingEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jlong devToolsServer);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MDHwGyUP(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong devToolsServer) {
  return JNI_DevToolsServer_IsRemoteDebuggingEnabled(env, base::android::JavaParamRef<jobject>(env,
      caller), devToolsServer);
}

static void JNI_DevToolsServer_SetRemoteDebuggingEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jlong devToolsServer,
    jboolean enabled,
    jboolean allowDebugPermission);

JNI_GENERATOR_EXPORT void Java_J_N_M0ZKpN7w(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong devToolsServer,
    jboolean enabled,
    jboolean allowDebugPermission) {
  return JNI_DevToolsServer_SetRemoteDebuggingEnabled(env, base::android::JavaParamRef<jobject>(env,
      caller), devToolsServer, enabled, allowDebugPermission);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_DevToolsServer_checkDebugPermission(nullptr);
static jboolean Java_DevToolsServer_checkDebugPermission(JNIEnv* env, JniIntWrapper pid,
    JniIntWrapper uid) {
  jclass clazz = org_chromium_chrome_browser_DevToolsServer_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_DevToolsServer_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "checkDebugPermission",
          "(II)Z",
          &g_org_chromium_chrome_browser_DevToolsServer_checkDebugPermission);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(pid), as_jint(uid));
  return ret;
}

#endif  // org_chromium_chrome_browser_DevToolsServer_JNI
