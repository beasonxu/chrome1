// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/password_manager/settings/PasswordUIView

#ifndef org_chromium_chrome_browser_password_manager_settings_PasswordUIView_JNI
#define org_chromium_chrome_browser_password_manager_settings_PasswordUIView_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_password_1manager_settings_PasswordUIView[];
const char kClassPath_org_chromium_chrome_browser_password_1manager_settings_PasswordUIView[] =
    "org/chromium/chrome/browser/password_manager/settings/PasswordUIView";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_clazz(nullptr);
#ifndef org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_clazz_defined
#define org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_clazz_defined
inline jclass org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_password_1manager_settings_PasswordUIView,
      &g_org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_PasswordUIView_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_Mx3ZU1Lr(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_PasswordUIView_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MjQDF7P2_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordUIViewAndroid,
    jstring origin,
    jstring username,
    jstring password) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "InsertPasswordEntryForTesting");
  return native->InsertPasswordEntryForTesting(env, base::android::JavaParamRef<jstring>(env,
      origin), base::android::JavaParamRef<jstring>(env, username),
      base::android::JavaParamRef<jstring>(env, password));
}

JNI_GENERATOR_EXPORT void Java_J_N_MG_1PqeQw(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordUIViewAndroid,
    jobject caller) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdatePasswordLists");
  return native->UpdatePasswordLists(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MkSJC9m5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordUIViewAndroid,
    jobject caller,
    jint index) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSavedPasswordEntry", NULL);
  return native->GetSavedPasswordEntry(env, base::android::JavaParamRef<jobject>(env, caller),
      index).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_Mtl3_1dvG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordUIViewAndroid,
    jobject caller,
    jint index) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSavedPasswordException", NULL);
  return native->GetSavedPasswordException(env, base::android::JavaParamRef<jobject>(env, caller),
      index).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_M6hPIdj7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordUIViewAndroid,
    jobject caller,
    jint index) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleRemoveSavedPasswordEntry");
  return native->HandleRemoveSavedPasswordEntry(env, base::android::JavaParamRef<jobject>(env,
      caller), index);
}

JNI_GENERATOR_EXPORT void Java_J_N_MnG4h9CU(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordUIViewAndroid,
    jobject caller,
    jint index) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleRemoveSavedPasswordException");
  return native->HandleRemoveSavedPasswordException(env, base::android::JavaParamRef<jobject>(env,
      caller), index);
}

static base::android::ScopedJavaLocalRef<jstring> JNI_PasswordUIView_GetAccountDashboardURL(JNIEnv*
    env);

JNI_GENERATOR_EXPORT jstring Java_J_N_MTEEGYRd(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PasswordUIView_GetAccountDashboardURL(env).Release();
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_PasswordUIView_GetTrustedVaultLearnMoreURL(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_M1Os1N9P(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PasswordUIView_GetTrustedVaultLearnMoreURL(env).Release();
}

static jboolean JNI_PasswordUIView_HasAccountForLeakCheckRequest(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MnopluAe(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PasswordUIView_HasAccountForLeakCheckRequest(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MFhG46xL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordUIViewAndroid,
    jobject caller) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MihpS3i5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordUIViewAndroid,
    jobject caller,
    jstring targetPath,
    jobject successCallback,
    jobject errorCallback) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleSerializePasswords");
  return native->HandleSerializePasswords(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, targetPath),
      base::android::JavaParamRef<jobject>(env, successCallback),
      base::android::JavaParamRef<jobject>(env, errorCallback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MH0CF_000244w(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordUIViewAndroid,
    jobject context,
    jobject launcher,
    jint index,
    jobject caller) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleShowPasswordEntryEditingView");
  return native->HandleShowPasswordEntryEditingView(env, base::android::JavaParamRef<jobject>(env,
      context), base::android::JavaParamRef<jobject>(env, launcher), index,
      base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M_00024XUdEaY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordUIViewAndroid,
    jobject context,
    jobject launcher,
    jint index,
    jobject caller) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleShowBlockedCredentialView");
  return native->HandleShowBlockedCredentialView(env, base::android::JavaParamRef<jobject>(env,
      context), base::android::JavaParamRef<jobject>(env, launcher), index,
      base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_createSavedPasswordEntry(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_PasswordUIView_createSavedPasswordEntry(JNIEnv* env, const base::android::JavaRef<jstring>&
    url,
    const base::android::JavaRef<jstring>& name,
    const base::android::JavaRef<jstring>& password) {
  jclass clazz = org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createSavedPasswordEntry",
"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/chromium/chrome/browser/password_manager/settings/SavedPasswordEntry;",
&g_org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_createSavedPasswordEntry);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, url.obj(), name.obj(), password.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_passwordListAvailable(nullptr);
static void Java_PasswordUIView_passwordListAvailable(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper count) {
  jclass clazz = org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "passwordListAvailable",
          "(I)V",
&g_org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_passwordListAvailable);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(count));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_passwordExceptionListAvailable(nullptr);
static void Java_PasswordUIView_passwordExceptionListAvailable(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper count) {
  jclass clazz = org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "passwordExceptionListAvailable",
          "(I)V",
&g_org_chromium_chrome_browser_password_1manager_settings_PasswordUIView_passwordExceptionListAvailable);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(count));
}

#endif  // org_chromium_chrome_browser_password_manager_settings_PasswordUIView_JNI
