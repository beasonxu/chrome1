// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/download/DuplicateDownloadDialogBridge

#ifndef org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_JNI
#define org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge[];
const char kClassPath_org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge[] =
    "org/chromium/chrome/browser/download/DuplicateDownloadDialogBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_clazz_defined
#define org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_clazz_defined
inline jclass org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge,
      &g_org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_MQbifKYb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDuplicateDownloadDialogBridge,
    jlong callbackId,
    jboolean accepted) {
  DuplicateDownloadDialogBridge* native =
      reinterpret_cast<DuplicateDownloadDialogBridge*>(nativeDuplicateDownloadDialogBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnConfirmed");
  return native->OnConfirmed(env, callbackId, accepted);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_DuplicateDownloadDialogBridge_create(JNIEnv*
    env, jlong nativeDialog) {
  jclass clazz = org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/download/DuplicateDownloadDialogBridge;",
          &g_org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeDialog);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_showDialog(nullptr);
static void Java_DuplicateDownloadDialogBridge_showDialog(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& windowAndroid,
    const base::android::JavaRef<jstring>& filePath,
    const base::android::JavaRef<jstring>& pageUrl,
    jlong totalBytes,
    jboolean duplicateExists,
    const base::android::JavaRef<jobject>& otrProfileID,
    jlong callbackId) {
  jclass clazz = org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "showDialog",
"(Lorg/chromium/ui/base/WindowAndroid;Ljava/lang/String;Ljava/lang/String;JZLorg/chromium/chrome/browser/profiles/OTRProfileID;J)V",
          &g_org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_showDialog);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, windowAndroid.obj(), filePath.obj(), pageUrl.obj(),
              totalBytes, duplicateExists, otrProfileID.obj(), callbackId);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_destroy(nullptr);
static void Java_DuplicateDownloadDialogBridge_destroy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_download_DuplicateDownloadDialogBridge_JNI
