// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/webapps/WebApkUpdateDataFetcher

#ifndef org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_JNI
#define org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher[];
const char kClassPath_org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher[] =
    "org/chromium/chrome/browser/webapps/WebApkUpdateDataFetcher";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_clazz(nullptr);
#ifndef org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_clazz_defined
#define org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_clazz_defined
inline jclass org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher,
      &g_org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_WebApkUpdateDataFetcher_Initialize(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jstring>& startUrl,
    const base::android::JavaParamRef<jstring>& scope,
    const base::android::JavaParamRef<jstring>& webManifestUrl,
    const base::android::JavaParamRef<jstring>& webManifestId);

JNI_GENERATOR_EXPORT jlong Java_J_N_M76SYHnX(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jstring startUrl,
    jstring scope,
    jstring webManifestUrl,
    jstring webManifestId) {
  return JNI_WebApkUpdateDataFetcher_Initialize(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jstring>(env, startUrl),
      base::android::JavaParamRef<jstring>(env, scope), base::android::JavaParamRef<jstring>(env,
      webManifestUrl), base::android::JavaParamRef<jstring>(env, webManifestId));
}

JNI_GENERATOR_EXPORT void Java_J_N_M_1a8xBBL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebApkUpdateDataFetcher,
    jobject caller,
    jobject webContents) {
  WebApkUpdateDataFetcher* native =
      reinterpret_cast<WebApkUpdateDataFetcher*>(nativeWebApkUpdateDataFetcher);
  CHECK_NATIVE_PTR(env, jcaller, native, "ReplaceWebContents");
  return native->ReplaceWebContents(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_MbkiXMEf(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebApkUpdateDataFetcher,
    jobject caller) {
  WebApkUpdateDataFetcher* native =
      reinterpret_cast<WebApkUpdateDataFetcher*>(nativeWebApkUpdateDataFetcher);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mj3efCOU(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebApkUpdateDataFetcher,
    jobject caller,
    jobject webContents) {
  WebApkUpdateDataFetcher* native =
      reinterpret_cast<WebApkUpdateDataFetcher*>(nativeWebApkUpdateDataFetcher);
  CHECK_NATIVE_PTR(env, jcaller, native, "Start");
  return native->Start(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_onDataAvailable(nullptr);
static void Java_WebApkUpdateDataFetcher_onDataAvailable(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& manifestStartUrl,
    const base::android::JavaRef<jstring>& scopeUrl,
    const base::android::JavaRef<jstring>& name,
    const base::android::JavaRef<jstring>& shortName,
    const base::android::JavaRef<jstring>& manifestId,
    const base::android::JavaRef<jstring>& primaryIconUrl,
    const base::android::JavaRef<jstring>& primaryIconMurmur2Hash,
    const base::android::JavaRef<jobject>& primaryIconBitmap,
    jboolean isPrimaryIconMaskable,
    const base::android::JavaRef<jstring>& splashIconUrl,
    const base::android::JavaRef<jstring>& splashIconMurmur2Hash,
    const base::android::JavaRef<jobject>& splashIconBitmap,
    jboolean isSplashIconMaskable,
    const base::android::JavaRef<jobjectArray>& iconUrls,
    JniIntWrapper displayMode,
    JniIntWrapper orientation,
    jlong themeColor,
    jlong backgroundColor,
    const base::android::JavaRef<jstring>& shareAction,
    const base::android::JavaRef<jstring>& shareParamsTitle,
    const base::android::JavaRef<jstring>& shareParamsText,
    jboolean isShareMethodPost,
    jboolean isShareEncTypeMultipart,
    const base::android::JavaRef<jobjectArray>& shareParamsFileNames,
    const base::android::JavaRef<jobjectArray>& shareParamsAccepts,
    const base::android::JavaRef<jobjectArray>& shortcuts,
    const base::android::JavaRef<jobjectArray>& shortcutIconData) {
  jclass clazz = org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onDataAvailable",
"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Bitmap;ZLjava/lang/String;Ljava/lang/String;Landroid/graphics/Bitmap;Z[Ljava/lang/String;IIJJLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ[Ljava/lang/String;[[Ljava/lang/String;[[Ljava/lang/String;[[B)V",
          &g_org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_onDataAvailable);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, manifestStartUrl.obj(), scopeUrl.obj(), name.obj(),
              shortName.obj(), manifestId.obj(), primaryIconUrl.obj(), primaryIconMurmur2Hash.obj(),
              primaryIconBitmap.obj(), isPrimaryIconMaskable, splashIconUrl.obj(),
              splashIconMurmur2Hash.obj(), splashIconBitmap.obj(), isSplashIconMaskable,
              iconUrls.obj(), as_jint(displayMode), as_jint(orientation), themeColor,
              backgroundColor, shareAction.obj(), shareParamsTitle.obj(), shareParamsText.obj(),
              isShareMethodPost, isShareEncTypeMultipart, shareParamsFileNames.obj(),
              shareParamsAccepts.obj(), shortcuts.obj(), shortcutIconData.obj());
}

#endif  // org_chromium_chrome_browser_webapps_WebApkUpdateDataFetcher_JNI
