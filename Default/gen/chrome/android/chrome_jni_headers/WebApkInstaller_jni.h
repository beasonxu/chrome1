// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/webapps/WebApkInstaller

#ifndef org_chromium_chrome_browser_webapps_WebApkInstaller_JNI
#define org_chromium_chrome_browser_webapps_WebApkInstaller_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_webapps_WebApkInstaller[];
const char kClassPath_org_chromium_chrome_browser_webapps_WebApkInstaller[] =
    "org/chromium/chrome/browser/webapps/WebApkInstaller";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(nullptr);
#ifndef org_chromium_chrome_browser_webapps_WebApkInstaller_clazz_defined
#define org_chromium_chrome_browser_webapps_WebApkInstaller_clazz_defined
inline jclass org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_webapps_WebApkInstaller,
      &g_org_chromium_chrome_browser_webapps_WebApkInstaller_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_MQ3SBZxh(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebApkInstaller,
    jobject caller,
    jint result) {
  WebApkInstaller* native = reinterpret_cast<WebApkInstaller*>(nativeWebApkInstaller);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnInstallFinished");
  return native->OnInstallFinished(env, base::android::JavaParamRef<jobject>(env, caller), result);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mz0ZUPry(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebApkInstaller,
    jobject caller,
    jint status) {
  WebApkInstaller* native = reinterpret_cast<WebApkInstaller*>(nativeWebApkInstaller);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnGotSpaceStatus");
  return native->OnGotSpaceStatus(env, base::android::JavaParamRef<jobject>(env, caller), status);
}


static std::atomic<jmethodID> g_org_chromium_chrome_browser_webapps_WebApkInstaller_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_WebApkInstaller_create(JNIEnv* env, jlong
    nativePtr) {
  jclass clazz = org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/webapps/WebApkInstaller;",
          &g_org_chromium_chrome_browser_webapps_WebApkInstaller_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePtr);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_webapps_WebApkInstaller_destroy(nullptr);
static void Java_WebApkInstaller_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_chrome_browser_webapps_WebApkInstaller_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_webapps_WebApkInstaller_installWebApkAsync(nullptr);
static void Java_WebApkInstaller_installWebApkAsync(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& packageName,
    JniIntWrapper version,
    const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jstring>& token,
    JniIntWrapper source,
    const base::android::JavaRef<jobject>& icon) {
  jclass clazz = org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "installWebApkAsync",
          "(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;ILandroid/graphics/Bitmap;)V",
          &g_org_chromium_chrome_browser_webapps_WebApkInstaller_installWebApkAsync);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, packageName.obj(), as_jint(version), title.obj(),
              token.obj(), as_jint(source), icon.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_webapps_WebApkInstaller_updateAsync(nullptr);
static void Java_WebApkInstaller_updateAsync(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jstring>& packageName,
    JniIntWrapper version,
    const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jstring>& token) {
  jclass clazz = org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateAsync",
          "(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_chrome_browser_webapps_WebApkInstaller_updateAsync);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, packageName.obj(), as_jint(version), title.obj(),
              token.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_webapps_WebApkInstaller_checkFreeSpace(nullptr);
static void Java_WebApkInstaller_checkFreeSpace(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "checkFreeSpace",
          "()V",
          &g_org_chromium_chrome_browser_webapps_WebApkInstaller_checkFreeSpace);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_webapps_WebApkInstaller_getWebApkServerUrl(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_WebApkInstaller_getWebApkServerUrl(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_webapps_WebApkInstaller_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getWebApkServerUrl",
          "()Ljava/lang/String;",
          &g_org_chromium_chrome_browser_webapps_WebApkInstaller_getWebApkServerUrl);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

#endif  // org_chromium_chrome_browser_webapps_WebApkInstaller_JNI
