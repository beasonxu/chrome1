// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/sharing/SharingServiceProxy

#ifndef org_chromium_chrome_browser_sharing_SharingServiceProxy_JNI
#define org_chromium_chrome_browser_sharing_SharingServiceProxy_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_sharing_SharingServiceProxy[];
const char kClassPath_org_chromium_chrome_browser_sharing_SharingServiceProxy[] =
    "org/chromium/chrome/browser/sharing/SharingServiceProxy";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_sharing_SharingServiceProxy_clazz(nullptr);
#ifndef org_chromium_chrome_browser_sharing_SharingServiceProxy_clazz_defined
#define org_chromium_chrome_browser_sharing_SharingServiceProxy_clazz_defined
inline jclass org_chromium_chrome_browser_sharing_SharingServiceProxy_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_sharing_SharingServiceProxy,
      &g_org_chromium_chrome_browser_sharing_SharingServiceProxy_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_SharingServiceProxy_InitSharingService(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& profile);

JNI_GENERATOR_EXPORT void Java_J_N_MI_00024va2Pq(
    JNIEnv* env,
    jclass jcaller,
    jobject profile) {
  return JNI_SharingServiceProxy_InitSharingService(env, base::android::JavaParamRef<jobject>(env,
      profile));
}

JNI_GENERATOR_EXPORT void Java_J_N_ML9GlI7W(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSharingServiceProxyAndroid,
    jstring guid,
    jstring text,
    jobject callback) {
  SharingServiceProxyAndroid* native =
      reinterpret_cast<SharingServiceProxyAndroid*>(nativeSharingServiceProxyAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendSharedClipboardMessage");
  return native->SendSharedClipboardMessage(env, base::android::JavaParamRef<jstring>(env, guid),
      base::android::JavaParamRef<jstring>(env, text), base::android::JavaParamRef<jobject>(env,
      callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MScf15Ou(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSharingServiceProxyAndroid,
    jobject deviceInfo,
    jint requiredFeature) {
  SharingServiceProxyAndroid* native =
      reinterpret_cast<SharingServiceProxyAndroid*>(nativeSharingServiceProxyAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetDeviceCandidates");
  return native->GetDeviceCandidates(env, base::android::JavaParamRef<jobject>(env, deviceInfo),
      requiredFeature);
}

JNI_GENERATOR_EXPORT void Java_J_N_MBEvP57R(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSharingServiceProxyAndroid,
    jobject runnable) {
  SharingServiceProxyAndroid* native =
      reinterpret_cast<SharingServiceProxyAndroid*>(nativeSharingServiceProxyAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddDeviceCandidatesInitializedObserver");
  return native->AddDeviceCandidatesInitializedObserver(env,
      base::android::JavaParamRef<jobject>(env, runnable));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sharing_SharingServiceProxy_onProxyCreated(nullptr);
static void Java_SharingServiceProxy_onProxyCreated(JNIEnv* env, jlong
    nativeSharingServiceProxyAndroid) {
  jclass clazz = org_chromium_chrome_browser_sharing_SharingServiceProxy_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sharing_SharingServiceProxy_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onProxyCreated",
          "(J)V",
          &g_org_chromium_chrome_browser_sharing_SharingServiceProxy_onProxyCreated);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, nativeSharingServiceProxyAndroid);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sharing_SharingServiceProxy_onProxyDestroyed(nullptr);
static void Java_SharingServiceProxy_onProxyDestroyed(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_sharing_SharingServiceProxy_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sharing_SharingServiceProxy_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onProxyDestroyed",
          "()V",
          &g_org_chromium_chrome_browser_sharing_SharingServiceProxy_onProxyDestroyed);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sharing_SharingServiceProxy_createDeviceInfoAndAppendToList(nullptr);
static void Java_SharingServiceProxy_createDeviceInfoAndAppendToList(JNIEnv* env, const
    base::android::JavaRef<jobject>& deviceInfo,
    const base::android::JavaRef<jstring>& guid,
    const base::android::JavaRef<jstring>& clientName,
    JniIntWrapper deviceType,
    jlong lastUpdatedTimestampMillis) {
  jclass clazz = org_chromium_chrome_browser_sharing_SharingServiceProxy_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sharing_SharingServiceProxy_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createDeviceInfoAndAppendToList",
          "(Ljava/util/ArrayList;Ljava/lang/String;Ljava/lang/String;IJ)V",
&g_org_chromium_chrome_browser_sharing_SharingServiceProxy_createDeviceInfoAndAppendToList);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, deviceInfo.obj(), guid.obj(), clientName.obj(),
              as_jint(deviceType), lastUpdatedTimestampMillis);
}

#endif  // org_chromium_chrome_browser_sharing_SharingServiceProxy_JNI
