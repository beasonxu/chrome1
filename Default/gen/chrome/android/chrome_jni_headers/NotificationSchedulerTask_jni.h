// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/notifications/scheduler/NotificationSchedulerTask

#ifndef org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_JNI
#define org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask[];
const char
    kClassPath_org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask[] =
    "org/chromium/chrome/browser/notifications/scheduler/NotificationSchedulerTask";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_clazz(nullptr);
#ifndef org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_clazz_defined
#define org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_clazz_defined
inline jclass
    org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask,
      &g_org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_NotificationSchedulerTask_OnStartTask(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_Mgeg_1Rc9(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject callback) {
  return JNI_NotificationSchedulerTask_OnStartTask(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, callback));
}

static jboolean JNI_NotificationSchedulerTask_OnStopTask(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M91xgL_1Z(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_NotificationSchedulerTask_OnStopTask(env, base::android::JavaParamRef<jobject>(env,
      caller));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_schedule(nullptr);
static void Java_NotificationSchedulerTask_schedule(JNIEnv* env, jlong windowStartMs,
    jlong windowEndMs) {
  jclass clazz =
      org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "schedule",
          "(JJ)V",
&g_org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_schedule);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, windowStartMs, windowEndMs);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_cancel(nullptr);
static void Java_NotificationSchedulerTask_cancel(JNIEnv* env) {
  jclass clazz =
      org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "cancel",
          "()V",
          &g_org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_cancel);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_notifications_scheduler_NotificationSchedulerTask_JNI
