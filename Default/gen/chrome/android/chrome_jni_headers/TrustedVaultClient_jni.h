// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/sync/TrustedVaultClient

#ifndef org_chromium_chrome_browser_sync_TrustedVaultClient_JNI
#define org_chromium_chrome_browser_sync_TrustedVaultClient_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_sync_TrustedVaultClient[];
const char kClassPath_org_chromium_chrome_browser_sync_TrustedVaultClient[] =
    "org/chromium/chrome/browser/sync/TrustedVaultClient";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(nullptr);
#ifndef org_chromium_chrome_browser_sync_TrustedVaultClient_clazz_defined
#define org_chromium_chrome_browser_sync_TrustedVaultClient_clazz_defined
inline jclass org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_sync_TrustedVaultClient,
      &g_org_chromium_chrome_browser_sync_TrustedVaultClient_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_M0S8oNZH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrustedVaultClientAndroid,
    jint requestId,
    jstring gaiaId,
    jobjectArray keys) {
  TrustedVaultClientAndroid* native =
      reinterpret_cast<TrustedVaultClientAndroid*>(nativeTrustedVaultClientAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "FetchKeysCompleted");
  return native->FetchKeysCompleted(env, requestId, base::android::JavaParamRef<jstring>(env,
      gaiaId), base::android::JavaParamRef<jobjectArray>(env, keys));
}

JNI_GENERATOR_EXPORT void Java_J_N_MtarWfOd(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrustedVaultClientAndroid,
    jint requestId,
    jboolean succeeded) {
  TrustedVaultClientAndroid* native =
      reinterpret_cast<TrustedVaultClientAndroid*>(nativeTrustedVaultClientAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "MarkLocalKeysAsStaleCompleted");
  return native->MarkLocalKeysAsStaleCompleted(env, requestId, succeeded);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mi0CgY2y(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrustedVaultClientAndroid,
    jint requestId,
    jboolean isDegraded) {
  TrustedVaultClientAndroid* native =
      reinterpret_cast<TrustedVaultClientAndroid*>(nativeTrustedVaultClientAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetIsRecoverabilityDegradedCompleted");
  return native->GetIsRecoverabilityDegradedCompleted(env, requestId, isDegraded);
}

JNI_GENERATOR_EXPORT void Java_J_N_MKOQxzuE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrustedVaultClientAndroid,
    jint requestId) {
  TrustedVaultClientAndroid* native =
      reinterpret_cast<TrustedVaultClientAndroid*>(nativeTrustedVaultClientAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddTrustedRecoveryMethodCompleted");
  return native->AddTrustedRecoveryMethodCompleted(env, requestId);
}

JNI_GENERATOR_EXPORT void Java_J_N_MlSGBpm_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrustedVaultClientAndroid) {
  TrustedVaultClientAndroid* native =
      reinterpret_cast<TrustedVaultClientAndroid*>(nativeTrustedVaultClientAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NotifyKeysChanged");
  return native->NotifyKeysChanged(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mv4bfVgt(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrustedVaultClientAndroid) {
  TrustedVaultClientAndroid* native =
      reinterpret_cast<TrustedVaultClientAndroid*>(nativeTrustedVaultClientAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NotifyRecoverabilityChanged");
  return native->NotifyRecoverabilityChanged(env);
}

static void JNI_TrustedVaultClient_RecordKeyRetrievalTrigger(JNIEnv* env, jint trigger);

JNI_GENERATOR_EXPORT void Java_J_N_M5G1GV5m(
    JNIEnv* env,
    jclass jcaller,
    jint trigger) {
  return JNI_TrustedVaultClient_RecordKeyRetrievalTrigger(env, trigger);
}

static void JNI_TrustedVaultClient_RecordRecoverabilityDegradedFixTrigger(JNIEnv* env, jint
    trigger);

JNI_GENERATOR_EXPORT void Java_J_N_MUbRl2B_1(
    JNIEnv* env,
    jclass jcaller,
    jint trigger) {
  return JNI_TrustedVaultClient_RecordRecoverabilityDegradedFixTrigger(env, trigger);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sync_TrustedVaultClient_registerNative(nullptr);
static void Java_TrustedVaultClient_registerNative(JNIEnv* env, jlong
    nativeTrustedVaultClientAndroid) {
  jclass clazz = org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "registerNative",
          "(J)V",
          &g_org_chromium_chrome_browser_sync_TrustedVaultClient_registerNative);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, nativeTrustedVaultClientAndroid);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sync_TrustedVaultClient_unregisterNative(nullptr);
static void Java_TrustedVaultClient_unregisterNative(JNIEnv* env, jlong
    nativeTrustedVaultClientAndroid) {
  jclass clazz = org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "unregisterNative",
          "(J)V",
          &g_org_chromium_chrome_browser_sync_TrustedVaultClient_unregisterNative);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, nativeTrustedVaultClientAndroid);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sync_TrustedVaultClient_fetchKeys(nullptr);
static void Java_TrustedVaultClient_fetchKeys(JNIEnv* env, JniIntWrapper requestId,
    const base::android::JavaRef<jobject>& accountInfo) {
  jclass clazz = org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "fetchKeys",
          "(ILorg/chromium/components/signin/base/CoreAccountInfo;)V",
          &g_org_chromium_chrome_browser_sync_TrustedVaultClient_fetchKeys);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(requestId), accountInfo.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sync_TrustedVaultClient_markLocalKeysAsStale(nullptr);
static void Java_TrustedVaultClient_markLocalKeysAsStale(JNIEnv* env, JniIntWrapper requestId,
    const base::android::JavaRef<jobject>& accountInfo) {
  jclass clazz = org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "markLocalKeysAsStale",
          "(ILorg/chromium/components/signin/base/CoreAccountInfo;)V",
          &g_org_chromium_chrome_browser_sync_TrustedVaultClient_markLocalKeysAsStale);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(requestId), accountInfo.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sync_TrustedVaultClient_getIsRecoverabilityDegraded(nullptr);
static void Java_TrustedVaultClient_getIsRecoverabilityDegraded(JNIEnv* env, JniIntWrapper
    requestId,
    const base::android::JavaRef<jobject>& accountInfo) {
  jclass clazz = org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getIsRecoverabilityDegraded",
          "(ILorg/chromium/components/signin/base/CoreAccountInfo;)V",
          &g_org_chromium_chrome_browser_sync_TrustedVaultClient_getIsRecoverabilityDegraded);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(requestId), accountInfo.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sync_TrustedVaultClient_addTrustedRecoveryMethod(nullptr);
static void Java_TrustedVaultClient_addTrustedRecoveryMethod(JNIEnv* env, JniIntWrapper requestId,
    const base::android::JavaRef<jobject>& accountInfo,
    const base::android::JavaRef<jbyteArray>& publicKey,
    JniIntWrapper methodTypeHint) {
  jclass clazz = org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sync_TrustedVaultClient_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addTrustedRecoveryMethod",
          "(ILorg/chromium/components/signin/base/CoreAccountInfo;[BI)V",
          &g_org_chromium_chrome_browser_sync_TrustedVaultClient_addTrustedRecoveryMethod);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(requestId), accountInfo.obj(), publicKey.obj(),
              as_jint(methodTypeHint));
}

#endif  // org_chromium_chrome_browser_sync_TrustedVaultClient_JNI
