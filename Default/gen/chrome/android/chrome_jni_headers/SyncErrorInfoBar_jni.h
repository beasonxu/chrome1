// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/infobar/SyncErrorInfoBar

#ifndef org_chromium_chrome_browser_infobar_SyncErrorInfoBar_JNI
#define org_chromium_chrome_browser_infobar_SyncErrorInfoBar_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_infobar_SyncErrorInfoBar[];
const char kClassPath_org_chromium_chrome_browser_infobar_SyncErrorInfoBar[] =
    "org/chromium/chrome/browser/infobar/SyncErrorInfoBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_infobar_SyncErrorInfoBar_clazz(nullptr);
#ifndef org_chromium_chrome_browser_infobar_SyncErrorInfoBar_clazz_defined
#define org_chromium_chrome_browser_infobar_SyncErrorInfoBar_clazz_defined
inline jclass org_chromium_chrome_browser_infobar_SyncErrorInfoBar_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_infobar_SyncErrorInfoBar,
      &g_org_chromium_chrome_browser_infobar_SyncErrorInfoBar_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_SyncErrorInfoBar_Launch(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    webContents);

JNI_GENERATOR_EXPORT void Java_J_N_MWmaDLti(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents) {
  return JNI_SyncErrorInfoBar_Launch(env, base::android::JavaParamRef<jobject>(env, webContents));
}


static std::atomic<jmethodID> g_org_chromium_chrome_browser_infobar_SyncErrorInfoBar_show(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_SyncErrorInfoBar_show(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_infobar_SyncErrorInfoBar_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_infobar_SyncErrorInfoBar_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "show",
          "()Lorg/chromium/components/infobars/InfoBar;",
          &g_org_chromium_chrome_browser_infobar_SyncErrorInfoBar_show);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_infobar_SyncErrorInfoBar_accept(nullptr);
static void Java_SyncErrorInfoBar_accept(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_infobar_SyncErrorInfoBar_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_infobar_SyncErrorInfoBar_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "accept",
          "()V",
          &g_org_chromium_chrome_browser_infobar_SyncErrorInfoBar_accept);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_infobar_SyncErrorInfoBar_dismissed(nullptr);
static void Java_SyncErrorInfoBar_dismissed(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_chrome_browser_infobar_SyncErrorInfoBar_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_infobar_SyncErrorInfoBar_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "dismissed",
          "()V",
          &g_org_chromium_chrome_browser_infobar_SyncErrorInfoBar_dismissed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_infobar_SyncErrorInfoBar_JNI
