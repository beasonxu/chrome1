// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/notifications/NotificationPlatformBridge

#ifndef org_chromium_chrome_browser_notifications_NotificationPlatformBridge_JNI
#define org_chromium_chrome_browser_notifications_NotificationPlatformBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_notifications_NotificationPlatformBridge[];
const char kClassPath_org_chromium_chrome_browser_notifications_NotificationPlatformBridge[] =
    "org/chromium/chrome/browser/notifications/NotificationPlatformBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz_defined
#define org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz_defined
inline jclass org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_notifications_NotificationPlatformBridge,
      &g_org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_NotificationPlatformBridge_InitializeNotificationPlatformBridge(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MMmsCv9_1(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_NotificationPlatformBridge_InitializeNotificationPlatformBridge(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MLnX7Uof(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNotificationPlatformBridgeAndroid,
    jobject caller,
    jstring notificationId,
    jint notificationType,
    jstring origin,
    jstring scopeUrl,
    jstring profileId,
    jboolean incognito,
    jstring webApkPackage,
    jint actionIndex,
    jstring reply) {
  NotificationPlatformBridgeAndroid* native =
      reinterpret_cast<NotificationPlatformBridgeAndroid*>(nativeNotificationPlatformBridgeAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnNotificationClicked");
  return native->OnNotificationClicked(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, notificationId), notificationType,
      base::android::JavaParamRef<jstring>(env, origin), base::android::JavaParamRef<jstring>(env,
      scopeUrl), base::android::JavaParamRef<jstring>(env, profileId), incognito,
      base::android::JavaParamRef<jstring>(env, webApkPackage), actionIndex,
      base::android::JavaParamRef<jstring>(env, reply));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mu4UlKd1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNotificationPlatformBridgeAndroid,
    jobject caller,
    jstring notificationId,
    jint notificationType,
    jstring origin,
    jstring profileId,
    jboolean incognito,
    jboolean byUser) {
  NotificationPlatformBridgeAndroid* native =
      reinterpret_cast<NotificationPlatformBridgeAndroid*>(nativeNotificationPlatformBridgeAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnNotificationClosed");
  return native->OnNotificationClosed(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, notificationId), notificationType,
      base::android::JavaParamRef<jstring>(env, origin), base::android::JavaParamRef<jstring>(env,
      profileId), incognito, byUser);
}

JNI_GENERATOR_EXPORT void Java_J_N_MlTGi82B(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNotificationPlatformBridgeAndroid,
    jobject caller,
    jstring notificationId,
    jstring webApkPackage) {
  NotificationPlatformBridgeAndroid* native =
      reinterpret_cast<NotificationPlatformBridgeAndroid*>(nativeNotificationPlatformBridgeAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "StoreCachedWebApkPackageForNotificationId");
  return native->StoreCachedWebApkPackageForNotificationId(env,
      base::android::JavaParamRef<jobject>(env, caller), base::android::JavaParamRef<jstring>(env,
      notificationId), base::android::JavaParamRef<jstring>(env, webApkPackage));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_notifications_NotificationPlatformBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_NotificationPlatformBridge_create(JNIEnv*
    env, jlong nativeNotificationPlatformBridge) {
  jclass clazz = org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/notifications/NotificationPlatformBridge;",
          &g_org_chromium_chrome_browser_notifications_NotificationPlatformBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeNotificationPlatformBridge);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_notifications_NotificationPlatformBridge_destroy(nullptr);
static void Java_NotificationPlatformBridge_destroy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_chrome_browser_notifications_NotificationPlatformBridge_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_notifications_NotificationPlatformBridge_displayNotification(nullptr);
static void Java_NotificationPlatformBridge_displayNotification(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& notificationId,
    JniIntWrapper notificationType,
    const base::android::JavaRef<jstring>& origin,
    const base::android::JavaRef<jstring>& scopeUrl,
    const base::android::JavaRef<jstring>& profileId,
    const base::android::JavaRef<jobject>& profile,
    const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jstring>& body,
    const base::android::JavaRef<jobject>& image,
    const base::android::JavaRef<jobject>& icon,
    const base::android::JavaRef<jobject>& badge,
    const base::android::JavaRef<jintArray>& vibrationPattern,
    jlong timestamp,
    jboolean renotify,
    jboolean silent,
    const base::android::JavaRef<jobjectArray>& actions) {
  jclass clazz = org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "displayNotification",
"(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/chromium/chrome/browser/profiles/Profile;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;[IJZZ[Lorg/chromium/chrome/browser/notifications/ActionInfo;)V",
&g_org_chromium_chrome_browser_notifications_NotificationPlatformBridge_displayNotification);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, notificationId.obj(), as_jint(notificationType),
              origin.obj(), scopeUrl.obj(), profileId.obj(), profile.obj(), title.obj(), body.obj(),
              image.obj(), icon.obj(), badge.obj(), vibrationPattern.obj(), timestamp, renotify,
              silent, actions.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_notifications_NotificationPlatformBridge_closeNotification(nullptr);
static void Java_NotificationPlatformBridge_closeNotification(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& notificationId,
    const base::android::JavaRef<jstring>& scopeUrl,
    jboolean hasQueriedWebApkPackage,
    const base::android::JavaRef<jstring>& webApkPackage) {
  jclass clazz = org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_notifications_NotificationPlatformBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "closeNotification",
          "(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
&g_org_chromium_chrome_browser_notifications_NotificationPlatformBridge_closeNotification);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, notificationId.obj(), scopeUrl.obj(),
              hasQueriedWebApkPackage, webApkPackage.obj());
}

#endif  // org_chromium_chrome_browser_notifications_NotificationPlatformBridge_JNI
