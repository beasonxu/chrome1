// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/site_settings/CookieControlsServiceBridge

#ifndef org_chromium_chrome_browser_site_settings_CookieControlsServiceBridge_JNI
#define org_chromium_chrome_browser_site_settings_CookieControlsServiceBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge[];
const char kClassPath_org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge[] =
    "org/chromium/chrome/browser/site_settings/CookieControlsServiceBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge_clazz_defined
#define org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge_clazz_defined
inline jclass org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge,
      &g_org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_CookieControlsServiceBridge_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MDQjbYOx(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_CookieControlsServiceBridge_Init(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MIoKPT_1n(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieControlsServiceBridge,
    jobject caller) {
  CookieControlsServiceBridge* native =
      reinterpret_cast<CookieControlsServiceBridge*>(nativeCookieControlsServiceBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MIu6BVKt(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieControlsServiceBridge,
    jboolean enable) {
  CookieControlsServiceBridge* native =
      reinterpret_cast<CookieControlsServiceBridge*>(nativeCookieControlsServiceBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleCookieControlsToggleChanged");
  return native->HandleCookieControlsToggleChanged(env, enable);
}

JNI_GENERATOR_EXPORT void Java_J_N_Ml_000248f4xR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieControlsServiceBridge) {
  CookieControlsServiceBridge* native =
      reinterpret_cast<CookieControlsServiceBridge*>(nativeCookieControlsServiceBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateServiceIfNecessary");
  return native->UpdateServiceIfNecessary(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge_sendCookieControlsUIChanges(nullptr);
static void Java_CookieControlsServiceBridge_sendCookieControlsUIChanges(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean checked,
    JniIntWrapper enforcement) {
  jclass clazz = org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "sendCookieControlsUIChanges",
          "(ZI)V",
&g_org_chromium_chrome_browser_site_1settings_CookieControlsServiceBridge_sendCookieControlsUIChanges);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, checked, as_jint(enforcement));
}

#endif  // org_chromium_chrome_browser_site_settings_CookieControlsServiceBridge_JNI
