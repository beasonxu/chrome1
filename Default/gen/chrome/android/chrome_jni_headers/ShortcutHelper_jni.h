// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/ShortcutHelper

#ifndef org_chromium_chrome_browser_ShortcutHelper_JNI
#define org_chromium_chrome_browser_ShortcutHelper_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_chrome_browser_ShortcutHelper[];
const char kClassPath_org_chromium_chrome_browser_ShortcutHelper[] =
    "org/chromium/chrome/browser/ShortcutHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_ShortcutHelper_clazz(nullptr);
#ifndef org_chromium_chrome_browser_ShortcutHelper_clazz_defined
#define org_chromium_chrome_browser_ShortcutHelper_clazz_defined
inline jclass org_chromium_chrome_browser_ShortcutHelper_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_chrome_browser_ShortcutHelper,
      &g_org_chromium_chrome_browser_ShortcutHelper_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID> g_org_chromium_chrome_browser_ShortcutHelper_addWebapp(nullptr);
static void Java_ShortcutHelper_addWebapp(JNIEnv* env, const base::android::JavaRef<jstring>& id,
    const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& scopeUrl,
    const base::android::JavaRef<jstring>& userTitle,
    const base::android::JavaRef<jstring>& name,
    const base::android::JavaRef<jstring>& shortName,
    const base::android::JavaRef<jstring>& iconUrl,
    const base::android::JavaRef<jobject>& icon,
    jboolean isIconAdaptive,
    JniIntWrapper displayMode,
    JniIntWrapper orientation,
    JniIntWrapper source,
    jlong themeColor,
    jlong backgroundColor) {
  jclass clazz = org_chromium_chrome_browser_ShortcutHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ShortcutHelper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addWebapp",
"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Bitmap;ZIIIJJ)V",
          &g_org_chromium_chrome_browser_ShortcutHelper_addWebapp);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, id.obj(), url.obj(), scopeUrl.obj(), userTitle.obj(),
              name.obj(), shortName.obj(), iconUrl.obj(), icon.obj(), isIconAdaptive,
              as_jint(displayMode), as_jint(orientation), as_jint(source), themeColor,
              backgroundColor);
}

static std::atomic<jmethodID> g_org_chromium_chrome_browser_ShortcutHelper_addShortcut(nullptr);
static void Java_ShortcutHelper_addShortcut(JNIEnv* env, const base::android::JavaRef<jstring>& id,
    const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& userTitle,
    const base::android::JavaRef<jobject>& icon,
    jboolean isIconAdaptive,
    JniIntWrapper source,
    const base::android::JavaRef<jstring>& iconUrl) {
  jclass clazz = org_chromium_chrome_browser_ShortcutHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ShortcutHelper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addShortcut",
"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Bitmap;ZILjava/lang/String;)V",
          &g_org_chromium_chrome_browser_ShortcutHelper_addShortcut);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, id.obj(), url.obj(), userTitle.obj(), icon.obj(),
              isIconAdaptive, as_jint(source), iconUrl.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ShortcutHelper_storeWebappSplashImage(nullptr);
static void Java_ShortcutHelper_storeWebappSplashImage(JNIEnv* env, const
    base::android::JavaRef<jstring>& id,
    const base::android::JavaRef<jobject>& splashImage) {
  jclass clazz = org_chromium_chrome_browser_ShortcutHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ShortcutHelper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "storeWebappSplashImage",
          "(Ljava/lang/String;Landroid/graphics/Bitmap;)V",
          &g_org_chromium_chrome_browser_ShortcutHelper_storeWebappSplashImage);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, id.obj(), splashImage.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ShortcutHelper_doesOriginContainAnyInstalledWebApk(nullptr);
static jboolean Java_ShortcutHelper_doesOriginContainAnyInstalledWebApk(JNIEnv* env, const
    base::android::JavaRef<jstring>& origin) {
  jclass clazz = org_chromium_chrome_browser_ShortcutHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ShortcutHelper_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "doesOriginContainAnyInstalledWebApk",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_chrome_browser_ShortcutHelper_doesOriginContainAnyInstalledWebApk);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, origin.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ShortcutHelper_doesOriginContainAnyInstalledTwa(nullptr);
static jboolean Java_ShortcutHelper_doesOriginContainAnyInstalledTwa(JNIEnv* env, const
    base::android::JavaRef<jstring>& origin) {
  jclass clazz = org_chromium_chrome_browser_ShortcutHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ShortcutHelper_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "doesOriginContainAnyInstalledTwa",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_chrome_browser_ShortcutHelper_doesOriginContainAnyInstalledTwa);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, origin.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ShortcutHelper_getOriginsWithInstalledWebApksOrTwas(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_ShortcutHelper_getOriginsWithInstalledWebApksOrTwas(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_ShortcutHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ShortcutHelper_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getOriginsWithInstalledWebApksOrTwas",
          "()[Ljava/lang/String;",
          &g_org_chromium_chrome_browser_ShortcutHelper_getOriginsWithInstalledWebApksOrTwas);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ShortcutHelper_setForceWebApkUpdate(nullptr);
static void Java_ShortcutHelper_setForceWebApkUpdate(JNIEnv* env, const
    base::android::JavaRef<jstring>& id) {
  jclass clazz = org_chromium_chrome_browser_ShortcutHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ShortcutHelper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setForceWebApkUpdate",
          "(Ljava/lang/String;)V",
          &g_org_chromium_chrome_browser_ShortcutHelper_setForceWebApkUpdate);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, id.obj());
}

#endif  // org_chromium_chrome_browser_ShortcutHelper_JNI
