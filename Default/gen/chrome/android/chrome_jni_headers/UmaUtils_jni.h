// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/metrics/UmaUtils

#ifndef org_chromium_chrome_browser_metrics_UmaUtils_JNI
#define org_chromium_chrome_browser_metrics_UmaUtils_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_chrome_browser_metrics_UmaUtils[];
const char kClassPath_org_chromium_chrome_browser_metrics_UmaUtils[] =
    "org/chromium/chrome/browser/metrics/UmaUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_metrics_UmaUtils_clazz(nullptr);
#ifndef org_chromium_chrome_browser_metrics_UmaUtils_clazz_defined
#define org_chromium_chrome_browser_metrics_UmaUtils_clazz_defined
inline jclass org_chromium_chrome_browser_metrics_UmaUtils_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_chrome_browser_metrics_UmaUtils,
      &g_org_chromium_chrome_browser_metrics_UmaUtils_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace chrome {
namespace android {

static jboolean JNI_UmaUtils_IsClientInMetricsReportingSample(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MGJFzlge(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_UmaUtils_IsClientInMetricsReportingSample(env);
}

static void JNI_UmaUtils_RecordMetricsReportingDefaultOptIn(JNIEnv* env, jboolean optIn);

JNI_GENERATOR_EXPORT void Java_J_N_M76Za3Tu(
    JNIEnv* env,
    jclass jcaller,
    jboolean optIn) {
  return JNI_UmaUtils_RecordMetricsReportingDefaultOptIn(env, optIn);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_metrics_UmaUtils_getApplicationStartTime(nullptr);
static jlong Java_UmaUtils_getApplicationStartTime(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_metrics_UmaUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_metrics_UmaUtils_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getApplicationStartTime",
          "()J",
          &g_org_chromium_chrome_browser_metrics_UmaUtils_getApplicationStartTime);

  jlong ret =
      env->CallStaticLongMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_metrics_UmaUtils_getProcessStartTime(nullptr);
static jlong Java_UmaUtils_getProcessStartTime(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_metrics_UmaUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_metrics_UmaUtils_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getProcessStartTime",
          "()J",
          &g_org_chromium_chrome_browser_metrics_UmaUtils_getProcessStartTime);

  jlong ret =
      env->CallStaticLongMethod(clazz,
          call_context.base.method_id);
  return ret;
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_metrics_UmaUtils_JNI
