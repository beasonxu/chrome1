// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/signin/SigninManagerImpl

#ifndef org_chromium_chrome_browser_signin_SigninManagerImpl_JNI
#define org_chromium_chrome_browser_signin_SigninManagerImpl_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_signin_SigninManagerImpl[];
const char kClassPath_org_chromium_chrome_browser_signin_SigninManagerImpl[] =
    "org/chromium/chrome/browser/signin/SigninManagerImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_signin_SigninManagerImpl_clazz(nullptr);
#ifndef org_chromium_chrome_browser_signin_SigninManagerImpl_clazz_defined
#define org_chromium_chrome_browser_signin_SigninManagerImpl_clazz_defined
inline jclass org_chromium_chrome_browser_signin_SigninManagerImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_signin_SigninManagerImpl,
      &g_org_chromium_chrome_browser_signin_SigninManagerImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT jboolean Java_J_N_Mo0prJ3k(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSigninAllowedByPolicy", false);
  return native->IsSigninAllowedByPolicy(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MRa0T_1Mz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsForceSigninEnabled", false);
  return native->IsForceSigninEnabled(env);
}

static base::android::ScopedJavaLocalRef<jstring> JNI_SigninManagerImpl_ExtractDomainName(JNIEnv*
    env, const base::android::JavaParamRef<jstring>& email);

JNI_GENERATOR_EXPORT jstring Java_J_N_MiQjxiSl(
    JNIEnv* env,
    jclass jcaller,
    jstring email) {
  return JNI_SigninManagerImpl_ExtractDomainName(env, base::android::JavaParamRef<jstring>(env,
      email)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_Mn1Rv_00024d9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSigninManagerAndroid,
    jobject account,
    jobject callback) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "FetchAndApplyCloudPolicy");
  return native->FetchAndApplyCloudPolicy(env, base::android::JavaParamRef<jobject>(env, account),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MREkQQeM(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "StopApplyingCloudPolicy");
  return native->StopApplyingCloudPolicy(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_M7ZP5quR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSigninManagerAndroid,
    jobject account,
    jobject callback) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsAccountManaged");
  return native->IsAccountManaged(env, base::android::JavaParamRef<jobject>(env, account),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MM6ImjTk(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetManagementDomain", NULL);
  return native->GetManagementDomain(env).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MyfLWqOr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSigninManagerAndroid,
    jobject callback) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "WipeProfileData");
  return native->WipeProfileData(env, base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_M3tTsu_00024h(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSigninManagerAndroid,
    jobject callback) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "WipeGoogleServiceWorkerCaches");
  return native->WipeGoogleServiceWorkerCaches(env, base::android::JavaParamRef<jobject>(env,
      callback));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_signin_SigninManagerImpl_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_SigninManagerImpl_create(JNIEnv* env, jlong
    nativeSigninManagerAndroid,
    const base::android::JavaRef<jobject>& accountTrackerService,
    const base::android::JavaRef<jobject>& identityManager,
    const base::android::JavaRef<jobject>& identityMutator) {
  jclass clazz = org_chromium_chrome_browser_signin_SigninManagerImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_signin_SigninManagerImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLorg/chromium/components/signin/identitymanager/AccountTrackerService;Lorg/chromium/components/signin/identitymanager/IdentityManager;Lorg/chromium/components/signin/identitymanager/IdentityMutator;)Lorg/chromium/chrome/browser/signin/services/SigninManager;",
          &g_org_chromium_chrome_browser_signin_SigninManagerImpl_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeSigninManagerAndroid, accountTrackerService.obj(),
              identityManager.obj(), identityMutator.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_signin_SigninManagerImpl_destroy(nullptr);
static void Java_SigninManagerImpl_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_chrome_browser_signin_SigninManagerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_signin_SigninManagerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_chrome_browser_signin_SigninManagerImpl_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_signin_SigninManagerImpl_onSigninAllowedByPolicyChanged(nullptr);
static void Java_SigninManagerImpl_onSigninAllowedByPolicyChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean newSigninAllowedByPolicy) {
  jclass clazz = org_chromium_chrome_browser_signin_SigninManagerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_signin_SigninManagerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onSigninAllowedByPolicyChanged",
          "(Z)V",
          &g_org_chromium_chrome_browser_signin_SigninManagerImpl_onSigninAllowedByPolicyChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, newSigninAllowedByPolicy);
}

#endif  // org_chromium_chrome_browser_signin_SigninManagerImpl_JNI
