// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/webapps/WebApkUpdateManager

#ifndef org_chromium_chrome_browser_webapps_WebApkUpdateManager_JNI
#define org_chromium_chrome_browser_webapps_WebApkUpdateManager_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_webapps_WebApkUpdateManager[];
const char kClassPath_org_chromium_chrome_browser_webapps_WebApkUpdateManager[] =
    "org/chromium/chrome/browser/webapps/WebApkUpdateManager";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback[];
const char
    kClassPath_org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback[] =
    "org/chromium/chrome/browser/webapps/WebApkUpdateManager$WebApkUpdateCallback";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_webapps_WebApkUpdateManager_clazz(nullptr);
#ifndef org_chromium_chrome_browser_webapps_WebApkUpdateManager_clazz_defined
#define org_chromium_chrome_browser_webapps_WebApkUpdateManager_clazz_defined
inline jclass org_chromium_chrome_browser_webapps_WebApkUpdateManager_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_webapps_WebApkUpdateManager,
      &g_org_chromium_chrome_browser_webapps_WebApkUpdateManager_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback_clazz(nullptr);
#ifndef org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback_clazz_defined
#define org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback_clazz_defined
inline jclass
    org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback,
      &g_org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_WebApkUpdateManager_StoreWebApkUpdateRequestToFile(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& updateRequestPath,
    const base::android::JavaParamRef<jstring>& startUrl,
    const base::android::JavaParamRef<jstring>& scope,
    const base::android::JavaParamRef<jstring>& name,
    const base::android::JavaParamRef<jstring>& shortName,
    const base::android::JavaParamRef<jstring>& manifestId,
    const base::android::JavaParamRef<jstring>& appKey,
    const base::android::JavaParamRef<jstring>& primaryIconUrl,
    const base::android::JavaParamRef<jstring>& primaryIconData,
    jboolean isPrimaryIconMaskable,
    const base::android::JavaParamRef<jstring>& splashIconUrl,
    const base::android::JavaParamRef<jstring>& splashIconData,
    jboolean isSplashIconMaskable,
    const base::android::JavaParamRef<jobjectArray>& iconUrls,
    const base::android::JavaParamRef<jobjectArray>& iconHashes,
    jint displayMode,
    jint orientation,
    jlong themeColor,
    jlong backgroundColor,
    const base::android::JavaParamRef<jstring>& shareTargetAction,
    const base::android::JavaParamRef<jstring>& shareTargetParamTitle,
    const base::android::JavaParamRef<jstring>& shareTargetParamText,
    jboolean shareTargetParamIsMethodPost,
    jboolean shareTargetParamIsEncTypeMultipart,
    const base::android::JavaParamRef<jobjectArray>& shareTargetParamFileNames,
    const base::android::JavaParamRef<jobjectArray>& shareTargetParamAccepts,
    const base::android::JavaParamRef<jobjectArray>& shortcuts,
    const base::android::JavaParamRef<jobjectArray>& shortcutIconData,
    const base::android::JavaParamRef<jstring>& manifestUrl,
    const base::android::JavaParamRef<jstring>& webApkPackage,
    jint webApkVersion,
    jboolean isManifestStale,
    jboolean isAppIdentityUpdateSupported,
    const base::android::JavaParamRef<jintArray>& updateReasons,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MBaSXT5X(
    JNIEnv* env,
    jclass jcaller,
    jstring updateRequestPath,
    jstring startUrl,
    jstring scope,
    jstring name,
    jstring shortName,
    jstring manifestId,
    jstring appKey,
    jstring primaryIconUrl,
    jstring primaryIconData,
    jboolean isPrimaryIconMaskable,
    jstring splashIconUrl,
    jstring splashIconData,
    jboolean isSplashIconMaskable,
    jobjectArray iconUrls,
    jobjectArray iconHashes,
    jint displayMode,
    jint orientation,
    jlong themeColor,
    jlong backgroundColor,
    jstring shareTargetAction,
    jstring shareTargetParamTitle,
    jstring shareTargetParamText,
    jboolean shareTargetParamIsMethodPost,
    jboolean shareTargetParamIsEncTypeMultipart,
    jobjectArray shareTargetParamFileNames,
    jobjectArray shareTargetParamAccepts,
    jobjectArray shortcuts,
    jobjectArray shortcutIconData,
    jstring manifestUrl,
    jstring webApkPackage,
    jint webApkVersion,
    jboolean isManifestStale,
    jboolean isAppIdentityUpdateSupported,
    jintArray updateReasons,
    jobject callback) {
  return JNI_WebApkUpdateManager_StoreWebApkUpdateRequestToFile(env,
      base::android::JavaParamRef<jstring>(env, updateRequestPath),
      base::android::JavaParamRef<jstring>(env, startUrl), base::android::JavaParamRef<jstring>(env,
      scope), base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jstring>(env, shortName),
      base::android::JavaParamRef<jstring>(env, manifestId),
      base::android::JavaParamRef<jstring>(env, appKey), base::android::JavaParamRef<jstring>(env,
      primaryIconUrl), base::android::JavaParamRef<jstring>(env, primaryIconData),
      isPrimaryIconMaskable, base::android::JavaParamRef<jstring>(env, splashIconUrl),
      base::android::JavaParamRef<jstring>(env, splashIconData), isSplashIconMaskable,
      base::android::JavaParamRef<jobjectArray>(env, iconUrls),
      base::android::JavaParamRef<jobjectArray>(env, iconHashes), displayMode, orientation,
      themeColor, backgroundColor, base::android::JavaParamRef<jstring>(env, shareTargetAction),
      base::android::JavaParamRef<jstring>(env, shareTargetParamTitle),
      base::android::JavaParamRef<jstring>(env, shareTargetParamText), shareTargetParamIsMethodPost,
      shareTargetParamIsEncTypeMultipart, base::android::JavaParamRef<jobjectArray>(env,
      shareTargetParamFileNames), base::android::JavaParamRef<jobjectArray>(env,
      shareTargetParamAccepts), base::android::JavaParamRef<jobjectArray>(env, shortcuts),
      base::android::JavaParamRef<jobjectArray>(env, shortcutIconData),
      base::android::JavaParamRef<jstring>(env, manifestUrl),
      base::android::JavaParamRef<jstring>(env, webApkPackage), webApkVersion, isManifestStale,
      isAppIdentityUpdateSupported, base::android::JavaParamRef<jintArray>(env, updateReasons),
      base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_WebApkUpdateManager_UpdateWebApkFromFile(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& updateRequestPath,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MEqkTChv(
    JNIEnv* env,
    jclass jcaller,
    jstring updateRequestPath,
    jobject callback) {
  return JNI_WebApkUpdateManager_UpdateWebApkFromFile(env, base::android::JavaParamRef<jstring>(env,
      updateRequestPath), base::android::JavaParamRef<jobject>(env, callback));
}

static jint JNI_WebApkUpdateManager_GetWebApkTargetShellVersion(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_MXmzBYjM(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_WebApkUpdateManager_GetWebApkTargetShellVersion(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback_onResultFromNative(nullptr);
static void Java_WebApkUpdateCallback_onResultFromNative(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper result,
    jboolean relaxUpdates) {
  jclass clazz =
      org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onResultFromNative",
          "(IZ)V",
&g_org_chromium_chrome_browser_webapps_WebApkUpdateManager_00024WebApkUpdateCallback_onResultFromNative);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(result), relaxUpdates);
}

#endif  // org_chromium_chrome_browser_webapps_WebApkUpdateManager_JNI
