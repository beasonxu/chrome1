// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/password_manager/CredentialLeakDialogBridge

#ifndef org_chromium_chrome_browser_password_manager_CredentialLeakDialogBridge_JNI
#define org_chromium_chrome_browser_password_manager_CredentialLeakDialogBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge[];
const char kClassPath_org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge[] =
    "org/chromium/chrome/browser/password_manager/CredentialLeakDialogBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_clazz_defined
#define org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_clazz_defined
inline jclass org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge,
      &g_org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_Mmumo5h_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCredentialLeakDialogViewAndroid,
    jobject caller) {
  CredentialLeakDialogViewAndroid* native =
      reinterpret_cast<CredentialLeakDialogViewAndroid*>(nativeCredentialLeakDialogViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Accepted");
  return native->Accepted(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2h75In5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCredentialLeakDialogViewAndroid,
    jobject caller) {
  CredentialLeakDialogViewAndroid* native =
      reinterpret_cast<CredentialLeakDialogViewAndroid*>(nativeCredentialLeakDialogViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Cancelled");
  return native->Cancelled(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MEu0f3Ks(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCredentialLeakDialogViewAndroid,
    jobject caller) {
  CredentialLeakDialogViewAndroid* native =
      reinterpret_cast<CredentialLeakDialogViewAndroid*>(nativeCredentialLeakDialogViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Closed");
  return native->Closed(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_CredentialLeakDialogBridge_create(JNIEnv*
    env, const base::android::JavaRef<jobject>& windowAndroid,
    jlong nativeDialog) {
  jclass clazz =
      org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(Lorg/chromium/ui/base/WindowAndroid;J)Lorg/chromium/chrome/browser/password_manager/CredentialLeakDialogBridge;",
          &g_org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, windowAndroid.obj(), nativeDialog);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_showDialog(nullptr);
static void Java_CredentialLeakDialogBridge_showDialog(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>&
    credentialLeakTitle,
    const base::android::JavaRef<jstring>& credentialLeakDetails,
    jboolean isChangeAutomaticallyAvailable,
    const base::android::JavaRef<jstring>& positiveButton,
    const base::android::JavaRef<jstring>& negativeButton) {
  jclass clazz =
      org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "showDialog",
          "(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_showDialog);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, credentialLeakTitle.obj(), credentialLeakDetails.obj(),
              isChangeAutomaticallyAvailable, positiveButton.obj(), negativeButton.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_destroy(nullptr);
static void Java_CredentialLeakDialogBridge_destroy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz =
      org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_chrome_browser_password_1manager_CredentialLeakDialogBridge_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_password_manager_CredentialLeakDialogBridge_JNI
