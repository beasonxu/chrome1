// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/sharing/sms_fetcher/SmsFetcherMessageHandler

#ifndef org_chromium_chrome_browser_sharing_sms_fetcher_SmsFetcherMessageHandler_JNI
#define org_chromium_chrome_browser_sharing_sms_fetcher_SmsFetcherMessageHandler_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler[];
const char kClassPath_org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler[] =
    "org/chromium/chrome/browser/sharing/sms_fetcher/SmsFetcherMessageHandler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_clazz(nullptr);
#ifndef org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_clazz_defined
#define org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_clazz_defined
inline jclass
    org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler,
      &g_org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_MXRanUGo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSmsFetchRequestHandler,
    jstring topOrigin,
    jstring embeddedOrigin) {
  SmsFetchRequestHandler* native =
      reinterpret_cast<SmsFetchRequestHandler*>(nativeSmsFetchRequestHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnConfirm");
  return native->OnConfirm(env, base::android::JavaParamRef<jstring>(env, topOrigin),
      base::android::JavaParamRef<jstring>(env, embeddedOrigin));
}

JNI_GENERATOR_EXPORT void Java_J_N_MOhxjMCQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSmsFetchRequestHandler,
    jstring topOrigin,
    jstring embeddedOrigin) {
  SmsFetchRequestHandler* native =
      reinterpret_cast<SmsFetchRequestHandler*>(nativeSmsFetchRequestHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDismiss");
  return native->OnDismiss(env, base::android::JavaParamRef<jstring>(env, topOrigin),
      base::android::JavaParamRef<jstring>(env, embeddedOrigin));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_showNotification(nullptr);
static void Java_SmsFetcherMessageHandler_showNotification(JNIEnv* env, const
    base::android::JavaRef<jstring>& oneTimeCode,
    const base::android::JavaRef<jstring>& topOrigin,
    const base::android::JavaRef<jstring>& embeddedOrigin,
    const base::android::JavaRef<jstring>& clientName,
    jlong smsFetcherMessageHandlerAndroid) {
  jclass clazz =
      org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "showNotification",
          "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V",
&g_org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_showNotification);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, oneTimeCode.obj(), topOrigin.obj(), embeddedOrigin.obj(),
              clientName.obj(), smsFetcherMessageHandlerAndroid);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_dismissNotification(nullptr);
static void Java_SmsFetcherMessageHandler_dismissNotification(JNIEnv* env) {
  jclass clazz =
      org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "dismissNotification",
          "()V",
&g_org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_dismissNotification);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_reset(nullptr);
static void Java_SmsFetcherMessageHandler_reset(JNIEnv* env) {
  jclass clazz =
      org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "reset",
          "()V",
          &g_org_chromium_chrome_browser_sharing_sms_1fetcher_SmsFetcherMessageHandler_reset);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_sharing_sms_fetcher_SmsFetcherMessageHandler_JNI
