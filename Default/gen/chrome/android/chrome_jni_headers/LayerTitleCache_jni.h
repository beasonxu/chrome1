// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/compositor/LayerTitleCache

#ifndef org_chromium_chrome_browser_compositor_LayerTitleCache_JNI
#define org_chromium_chrome_browser_compositor_LayerTitleCache_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_compositor_LayerTitleCache[];
const char kClassPath_org_chromium_chrome_browser_compositor_LayerTitleCache[] =
    "org/chromium/chrome/browser/compositor/LayerTitleCache";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_compositor_LayerTitleCache_clazz(nullptr);
#ifndef org_chromium_chrome_browser_compositor_LayerTitleCache_clazz_defined
#define org_chromium_chrome_browser_compositor_LayerTitleCache_clazz_defined
inline jclass org_chromium_chrome_browser_compositor_LayerTitleCache_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_compositor_LayerTitleCache,
      &g_org_chromium_chrome_browser_compositor_LayerTitleCache_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android {

static jlong JNI_LayerTitleCache_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    jint fadeWidth,
    jint faviconStartlPadding,
    jint faviconEndPadding,
    jint spinnerResId,
    jint spinnerIncognitoResId,
    const base::android::JavaParamRef<jobject>& resourceManager);

JNI_GENERATOR_EXPORT jlong Java_J_N_MTbG5FQ5(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jint fadeWidth,
    jint faviconStartlPadding,
    jint faviconEndPadding,
    jint spinnerResId,
    jint spinnerIncognitoResId,
    jobject resourceManager) {
  return JNI_LayerTitleCache_Init(env, base::android::JavaParamRef<jobject>(env, caller), fadeWidth,
      faviconStartlPadding, faviconEndPadding, spinnerResId, spinnerIncognitoResId,
      base::android::JavaParamRef<jobject>(env, resourceManager));
}

JNI_GENERATOR_EXPORT void Java_J_N_M4YKMV3h(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLayerTitleCache) {
  LayerTitleCache* native = reinterpret_cast<LayerTitleCache*>(nativeLayerTitleCache);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MearVShy(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLayerTitleCache,
    jobject caller,
    jint exceptId) {
  LayerTitleCache* native = reinterpret_cast<LayerTitleCache*>(nativeLayerTitleCache);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearExcept");
  return native->ClearExcept(env, base::android::JavaParamRef<jobject>(env, caller), exceptId);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mn77UQtR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLayerTitleCache,
    jobject caller,
    jint tabId,
    jint titleResId,
    jint faviconResId,
    jboolean isIncognito,
    jboolean isRtl) {
  LayerTitleCache* native = reinterpret_cast<LayerTitleCache*>(nativeLayerTitleCache);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateLayer");
  return native->UpdateLayer(env, base::android::JavaParamRef<jobject>(env, caller), tabId,
      titleResId, faviconResId, isIncognito, isRtl);
}

JNI_GENERATOR_EXPORT void Java_J_N_MJ3tyP3k(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLayerTitleCache,
    jobject caller,
    jint tabId,
    jint faviconResId) {
  LayerTitleCache* native = reinterpret_cast<LayerTitleCache*>(nativeLayerTitleCache);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateFavicon");
  return native->UpdateFavicon(env, base::android::JavaParamRef<jobject>(env, caller), tabId,
      faviconResId);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_compositor_LayerTitleCache_getNativePtr(nullptr);
static jlong Java_LayerTitleCache_getNativePtr(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_compositor_LayerTitleCache_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_compositor_LayerTitleCache_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativePtr",
          "()J",
          &g_org_chromium_chrome_browser_compositor_LayerTitleCache_getNativePtr);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_compositor_LayerTitleCache_buildUpdatedTitle(nullptr);
static void Java_LayerTitleCache_buildUpdatedTitle(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper tabId) {
  jclass clazz = org_chromium_chrome_browser_compositor_LayerTitleCache_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_compositor_LayerTitleCache_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "buildUpdatedTitle",
          "(I)V",
          &g_org_chromium_chrome_browser_compositor_LayerTitleCache_buildUpdatedTitle);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(tabId));
}

}  // namespace android

#endif  // org_chromium_chrome_browser_compositor_LayerTitleCache_JNI
