// chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-params-data.h"
namespace qrcode_generator {
namespace mojom {

static NOINLINE const char* QRCodeGeneratorErrorToStringHelper(QRCodeGeneratorError value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case QRCodeGeneratorError::NONE:
      return "NONE";
    case QRCodeGeneratorError::INPUT_TOO_LONG:
      return "INPUT_TOO_LONG";
    case QRCodeGeneratorError::UNKNOWN_ERROR:
      return "UNKNOWN_ERROR";
    default:
      return nullptr;
  }
}

std::string QRCodeGeneratorErrorToString(QRCodeGeneratorError value) {
  const char *str = QRCodeGeneratorErrorToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown QRCodeGeneratorError value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, QRCodeGeneratorError value) {
  return os << QRCodeGeneratorErrorToString(value);
}

static NOINLINE const char* ModuleStyleToStringHelper(ModuleStyle value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case ModuleStyle::DEFAULT_SQUARES:
      return "DEFAULT_SQUARES";
    case ModuleStyle::CIRCLES:
      return "CIRCLES";
    default:
      return nullptr;
  }
}

std::string ModuleStyleToString(ModuleStyle value) {
  const char *str = ModuleStyleToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown ModuleStyle value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, ModuleStyle value) {
  return os << ModuleStyleToString(value);
}

static NOINLINE const char* LocatorStyleToStringHelper(LocatorStyle value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case LocatorStyle::DEFAULT_SQUARE:
      return "DEFAULT_SQUARE";
    case LocatorStyle::ROUNDED:
      return "ROUNDED";
    default:
      return nullptr;
  }
}

std::string LocatorStyleToString(LocatorStyle value) {
  const char *str = LocatorStyleToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown LocatorStyle value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, LocatorStyle value) {
  return os << LocatorStyleToString(value);
}

namespace internal {


// static
bool GenerateQRCodeRequest_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GenerateQRCodeRequest_Data* object =
      static_cast<const GenerateQRCodeRequest_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->data, validation_context,
                                         &data_validate_params)) {
    return false;
  }


  if (!::qrcode_generator::mojom::internal::ModuleStyle_Data
        ::Validate(object->render_module_style, validation_context))
    return false;


  if (!::qrcode_generator::mojom::internal::LocatorStyle_Data
        ::Validate(object->render_locator_style, validation_context))
    return false;

  return true;
}

GenerateQRCodeRequest_Data::GenerateQRCodeRequest_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GenerateQRCodeResponse_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GenerateQRCodeResponse_Data* object =
      static_cast<const GenerateQRCodeResponse_Data*>(data);


  if (!::qrcode_generator::mojom::internal::QRCodeGeneratorError_Data
        ::Validate(object->error_code, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->bitmap, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->data, validation_context,
                                         &data_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data_size, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->data_size, validation_context))
    return false;

  return true;
}

GenerateQRCodeResponse_Data::GenerateQRCodeResponse_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool QRCodeGeneratorService_GenerateQRCode_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const QRCodeGeneratorService_GenerateQRCode_Params_Data* object =
      static_cast<const QRCodeGeneratorService_GenerateQRCode_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->request, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->request, validation_context))
    return false;

  return true;
}

QRCodeGeneratorService_GenerateQRCode_Params_Data::QRCodeGeneratorService_GenerateQRCode_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data* object =
      static_cast<const QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->response, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->response, validation_context))
    return false;

  return true;
}

QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data::QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace qrcode_generator

namespace perfetto {

// static
void TraceFormatTraits<::qrcode_generator::mojom::QRCodeGeneratorError>::WriteIntoTrace(
   perfetto::TracedValue context, ::qrcode_generator::mojom::QRCodeGeneratorError value) {
  return std::move(context).WriteString(::qrcode_generator::mojom::QRCodeGeneratorErrorToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::qrcode_generator::mojom::ModuleStyle>::WriteIntoTrace(
   perfetto::TracedValue context, ::qrcode_generator::mojom::ModuleStyle value) {
  return std::move(context).WriteString(::qrcode_generator::mojom::ModuleStyleToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::qrcode_generator::mojom::LocatorStyle>::WriteIntoTrace(
   perfetto::TracedValue context, ::qrcode_generator::mojom::LocatorStyle value) {
  return std::move(context).WriteString(::qrcode_generator::mojom::LocatorStyleToString(value));
}

} // namespace perfetto