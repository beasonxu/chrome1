// chrome/common/chrome_render_frame.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_CHROME_RENDER_FRAME_MOJOM_H_
#define CHROME_COMMON_CHROME_RENDER_FRAME_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/common/chrome_render_frame.mojom-shared.h"
#include "chrome/common/chrome_render_frame.mojom-forward.h"
#include "mojo/public/mojom/base/string16.mojom.h"
#include "third_party/blink/public/mojom/window_features/window_features.mojom-forward.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"
#include "url/mojom/url.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace chrome {
namespace mojom {

class ChromeRenderFrameProxy;

template <typename ImplRefTraits>
class ChromeRenderFrameStub;

class ChromeRenderFrameRequestValidator;
class ChromeRenderFrameResponseValidator;


class  ChromeRenderFrame
    : public ChromeRenderFrameInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = ChromeRenderFrameInterfaceBase;
  using Proxy_ = ChromeRenderFrameProxy;

  template <typename ImplRefTraits>
  using Stub_ = ChromeRenderFrameStub<ImplRefTraits>;

  using RequestValidator_ = ChromeRenderFrameRequestValidator;
  using ResponseValidator_ = ChromeRenderFrameResponseValidator;
  enum MethodMinVersions : uint32_t {
    kSetWindowFeaturesMinVersion = 0,
    kRequestReloadImageForContextNodeMinVersion = 0,
    kRequestImageForContextNodeMinVersion = 0,
    kExecuteWebUIJavaScriptMinVersion = 0,
    kSetCCTClientHeaderMinVersion = 0,
    kGetMediaFeedURLMinVersion = 0,
    kLoadBlockedPluginsMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct SetWindowFeatures_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct RequestReloadImageForContextNode_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct RequestImageForContextNode_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ExecuteWebUIJavaScript_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetCCTClientHeader_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetMediaFeedURL_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct LoadBlockedPlugins_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~ChromeRenderFrame() = default;

  
  virtual void SetWindowFeatures(::blink::mojom::WindowFeaturesPtr window_features) = 0;

  
  virtual void RequestReloadImageForContextNode() = 0;


  using RequestImageForContextNodeCallback = base::OnceCallback<void(const std::vector<uint8_t>&, const ::gfx::Size&, const std::string&)>;
  
  virtual void RequestImageForContextNode(int32_t image_min_area_pixels, const ::gfx::Size& image_max_size_pixels, ImageFormat image_format, RequestImageForContextNodeCallback callback) = 0;

  
  virtual void ExecuteWebUIJavaScript(const ::std::u16string& javascript) = 0;

  
  virtual void SetCCTClientHeader(const std::string& header) = 0;


  using GetMediaFeedURLCallback = base::OnceCallback<void(const absl::optional<::GURL>&)>;
  
  virtual void GetMediaFeedURL(GetMediaFeedURLCallback callback) = 0;

  
  virtual void LoadBlockedPlugins(const std::string& identifier) = 0;
};



class  ChromeRenderFrameProxy
    : public ChromeRenderFrame {
 public:
  using InterfaceType = ChromeRenderFrame;

  explicit ChromeRenderFrameProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void SetWindowFeatures(::blink::mojom::WindowFeaturesPtr window_features) final;
  
  void RequestReloadImageForContextNode() final;
  
  void RequestImageForContextNode(int32_t image_min_area_pixels, const ::gfx::Size& image_max_size_pixels, ImageFormat image_format, RequestImageForContextNodeCallback callback) final;
  
  void ExecuteWebUIJavaScript(const ::std::u16string& javascript) final;
  
  void SetCCTClientHeader(const std::string& header) final;
  
  void GetMediaFeedURL(GetMediaFeedURLCallback callback) final;
  
  void LoadBlockedPlugins(const std::string& identifier) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  ChromeRenderFrameStubDispatch {
 public:
  static bool Accept(ChromeRenderFrame* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      ChromeRenderFrame* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<ChromeRenderFrame>>
class ChromeRenderFrameStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ChromeRenderFrameStub() = default;
  ~ChromeRenderFrameStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ChromeRenderFrameStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ChromeRenderFrameStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  ChromeRenderFrameRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  ChromeRenderFrameResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace chrome

namespace mojo {

}  // namespace mojo

#endif  // CHROME_COMMON_CHROME_RENDER_FRAME_MOJOM_H_