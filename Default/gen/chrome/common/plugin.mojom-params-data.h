// chrome/common/plugin.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_PLUGIN_MOJOM_PARAMS_DATA_H_
#define CHROME_COMMON_PLUGIN_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace chrome {
namespace mojom {
namespace internal {

class ValidationContext;
class  PluginHost_OpenPDF_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<PluginHost_OpenPDF_Params_Data>;

  PluginHost_OpenPDF_Params_Data();
  ~PluginHost_OpenPDF_Params_Data() = delete;
};
static_assert(sizeof(PluginHost_OpenPDF_Params_Data) == 16,
              "Bad sizeof(PluginHost_OpenPDF_Params_Data)");
class  PluginAuthHost_BlockedUnauthorizedPlugin_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> name;
  mojo::internal::Pointer<mojo::internal::String_Data> group_id;

 private:
  friend class mojo::internal::MessageFragment<PluginAuthHost_BlockedUnauthorizedPlugin_Params_Data>;

  PluginAuthHost_BlockedUnauthorizedPlugin_Params_Data();
  ~PluginAuthHost_BlockedUnauthorizedPlugin_Params_Data() = delete;
};
static_assert(sizeof(PluginAuthHost_BlockedUnauthorizedPlugin_Params_Data) == 24,
              "Bad sizeof(PluginAuthHost_BlockedUnauthorizedPlugin_Params_Data)");
class  PluginInfoHost_GetPluginInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Pointer<mojo::internal::String_Data> mime_type;

 private:
  friend class mojo::internal::MessageFragment<PluginInfoHost_GetPluginInfo_Params_Data>;

  PluginInfoHost_GetPluginInfo_Params_Data();
  ~PluginInfoHost_GetPluginInfo_Params_Data() = delete;
};
static_assert(sizeof(PluginInfoHost_GetPluginInfo_Params_Data) == 32,
              "Bad sizeof(PluginInfoHost_GetPluginInfo_Params_Data)");
class  PluginInfoHost_GetPluginInfo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PluginInfo_Data> plugin_info;

 private:
  friend class mojo::internal::MessageFragment<PluginInfoHost_GetPluginInfo_ResponseParams_Data>;

  PluginInfoHost_GetPluginInfo_ResponseParams_Data();
  ~PluginInfoHost_GetPluginInfo_ResponseParams_Data() = delete;
};
static_assert(sizeof(PluginInfoHost_GetPluginInfo_ResponseParams_Data) == 16,
              "Bad sizeof(PluginInfoHost_GetPluginInfo_ResponseParams_Data)");
class  PluginRenderer_FinishedDownloading_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PluginRenderer_FinishedDownloading_Params_Data>;

  PluginRenderer_FinishedDownloading_Params_Data();
  ~PluginRenderer_FinishedDownloading_Params_Data() = delete;
};
static_assert(sizeof(PluginRenderer_FinishedDownloading_Params_Data) == 8,
              "Bad sizeof(PluginRenderer_FinishedDownloading_Params_Data)");
class  PluginRenderer_UpdateSuccess_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PluginRenderer_UpdateSuccess_Params_Data>;

  PluginRenderer_UpdateSuccess_Params_Data();
  ~PluginRenderer_UpdateSuccess_Params_Data() = delete;
};
static_assert(sizeof(PluginRenderer_UpdateSuccess_Params_Data) == 8,
              "Bad sizeof(PluginRenderer_UpdateSuccess_Params_Data)");
class  PluginRenderer_UpdateFailure_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PluginRenderer_UpdateFailure_Params_Data>;

  PluginRenderer_UpdateFailure_Params_Data();
  ~PluginRenderer_UpdateFailure_Params_Data() = delete;
};
static_assert(sizeof(PluginRenderer_UpdateFailure_Params_Data) == 8,
              "Bad sizeof(PluginRenderer_UpdateFailure_Params_Data)");
class  PluginRenderer_UpdateDownloading_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PluginRenderer_UpdateDownloading_Params_Data>;

  PluginRenderer_UpdateDownloading_Params_Data();
  ~PluginRenderer_UpdateDownloading_Params_Data() = delete;
};
static_assert(sizeof(PluginRenderer_UpdateDownloading_Params_Data) == 8,
              "Bad sizeof(PluginRenderer_UpdateDownloading_Params_Data)");

}  // namespace internal


class PluginHost_OpenPDF_ParamsDataView {
 public:
  PluginHost_OpenPDF_ParamsDataView() = default;

  PluginHost_OpenPDF_ParamsDataView(
      internal::PluginHost_OpenPDF_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::PluginHost_OpenPDF_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PluginAuthHost_BlockedUnauthorizedPlugin_ParamsDataView {
 public:
  PluginAuthHost_BlockedUnauthorizedPlugin_ParamsDataView() = default;

  PluginAuthHost_BlockedUnauthorizedPlugin_ParamsDataView(
      internal::PluginAuthHost_BlockedUnauthorizedPlugin_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetGroupIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGroupId(UserType* output) {
    
    auto* pointer = data_->group_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PluginAuthHost_BlockedUnauthorizedPlugin_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PluginInfoHost_GetPluginInfo_ParamsDataView {
 public:
  PluginInfoHost_GetPluginInfo_ParamsDataView() = default;

  PluginInfoHost_GetPluginInfo_ParamsDataView(
      internal::PluginInfoHost_GetPluginInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetMimeTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMimeType(UserType* output) {
    
    auto* pointer = data_->mime_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PluginInfoHost_GetPluginInfo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PluginInfoHost_GetPluginInfo_ResponseParamsDataView {
 public:
  PluginInfoHost_GetPluginInfo_ResponseParamsDataView() = default;

  PluginInfoHost_GetPluginInfo_ResponseParamsDataView(
      internal::PluginInfoHost_GetPluginInfo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPluginInfoDataView(
      PluginInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPluginInfo(UserType* output) {
    
    auto* pointer = data_->plugin_info.Get();
    return mojo::internal::Deserialize<::chrome::mojom::PluginInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::PluginInfoHost_GetPluginInfo_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PluginRenderer_FinishedDownloading_ParamsDataView {
 public:
  PluginRenderer_FinishedDownloading_ParamsDataView() = default;

  PluginRenderer_FinishedDownloading_ParamsDataView(
      internal::PluginRenderer_FinishedDownloading_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PluginRenderer_FinishedDownloading_Params_Data* data_ = nullptr;
};



class PluginRenderer_UpdateSuccess_ParamsDataView {
 public:
  PluginRenderer_UpdateSuccess_ParamsDataView() = default;

  PluginRenderer_UpdateSuccess_ParamsDataView(
      internal::PluginRenderer_UpdateSuccess_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PluginRenderer_UpdateSuccess_Params_Data* data_ = nullptr;
};



class PluginRenderer_UpdateFailure_ParamsDataView {
 public:
  PluginRenderer_UpdateFailure_ParamsDataView() = default;

  PluginRenderer_UpdateFailure_ParamsDataView(
      internal::PluginRenderer_UpdateFailure_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PluginRenderer_UpdateFailure_Params_Data* data_ = nullptr;
};



class PluginRenderer_UpdateDownloading_ParamsDataView {
 public:
  PluginRenderer_UpdateDownloading_ParamsDataView() = default;

  PluginRenderer_UpdateDownloading_ParamsDataView(
      internal::PluginRenderer_UpdateDownloading_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PluginRenderer_UpdateDownloading_Params_Data* data_ = nullptr;
};


inline void PluginHost_OpenPDF_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void PluginAuthHost_BlockedUnauthorizedPlugin_ParamsDataView::GetNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void PluginAuthHost_BlockedUnauthorizedPlugin_ParamsDataView::GetGroupIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->group_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void PluginInfoHost_GetPluginInfo_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void PluginInfoHost_GetPluginInfo_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void PluginInfoHost_GetPluginInfo_ParamsDataView::GetMimeTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->mime_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void PluginInfoHost_GetPluginInfo_ResponseParamsDataView::GetPluginInfoDataView(
    PluginInfoDataView* output) {
  auto pointer = data_->plugin_info.Get();
  *output = PluginInfoDataView(pointer, message_);
}









}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_COMMON_PLUGIN_MOJOM_PARAMS_DATA_H_