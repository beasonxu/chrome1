// chrome/common/chrome_render_frame.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/common/chrome_render_frame.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/common/chrome_render_frame.mojom-params-data.h"
#include "chrome/common/chrome_render_frame.mojom-shared-message-ids.h"

#include "chrome/common/chrome_render_frame.mojom-import-headers.h"
#include "chrome/common/chrome_render_frame.mojom-test-utils.h"


#ifndef CHROME_COMMON_CHROME_RENDER_FRAME_MOJOM_JUMBO_H_
#define CHROME_COMMON_CHROME_RENDER_FRAME_MOJOM_JUMBO_H_
#endif



namespace chrome {
namespace mojom {
const char ChromeRenderFrame::Name_[] = "chrome.mojom.ChromeRenderFrame";

ChromeRenderFrame::IPCStableHashFunction ChromeRenderFrame::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kChromeRenderFrame_SetWindowFeatures_Name: {
      return &ChromeRenderFrame::SetWindowFeatures_Sym::IPCStableHash;
    }
    case internal::kChromeRenderFrame_RequestReloadImageForContextNode_Name: {
      return &ChromeRenderFrame::RequestReloadImageForContextNode_Sym::IPCStableHash;
    }
    case internal::kChromeRenderFrame_RequestImageForContextNode_Name: {
      return &ChromeRenderFrame::RequestImageForContextNode_Sym::IPCStableHash;
    }
    case internal::kChromeRenderFrame_ExecuteWebUIJavaScript_Name: {
      return &ChromeRenderFrame::ExecuteWebUIJavaScript_Sym::IPCStableHash;
    }
    case internal::kChromeRenderFrame_SetCCTClientHeader_Name: {
      return &ChromeRenderFrame::SetCCTClientHeader_Sym::IPCStableHash;
    }
    case internal::kChromeRenderFrame_GetMediaFeedURL_Name: {
      return &ChromeRenderFrame::GetMediaFeedURL_Sym::IPCStableHash;
    }
    case internal::kChromeRenderFrame_LoadBlockedPlugins_Name: {
      return &ChromeRenderFrame::LoadBlockedPlugins_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ChromeRenderFrame::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kChromeRenderFrame_SetWindowFeatures_Name:
            return "Receive chrome::mojom::ChromeRenderFrame::SetWindowFeatures";
      case internal::kChromeRenderFrame_RequestReloadImageForContextNode_Name:
            return "Receive chrome::mojom::ChromeRenderFrame::RequestReloadImageForContextNode";
      case internal::kChromeRenderFrame_RequestImageForContextNode_Name:
            return "Receive chrome::mojom::ChromeRenderFrame::RequestImageForContextNode";
      case internal::kChromeRenderFrame_ExecuteWebUIJavaScript_Name:
            return "Receive chrome::mojom::ChromeRenderFrame::ExecuteWebUIJavaScript";
      case internal::kChromeRenderFrame_SetCCTClientHeader_Name:
            return "Receive chrome::mojom::ChromeRenderFrame::SetCCTClientHeader";
      case internal::kChromeRenderFrame_GetMediaFeedURL_Name:
            return "Receive chrome::mojom::ChromeRenderFrame::GetMediaFeedURL";
      case internal::kChromeRenderFrame_LoadBlockedPlugins_Name:
            return "Receive chrome::mojom::ChromeRenderFrame::LoadBlockedPlugins";
    }
  } else {
    switch (message.name()) {
      case internal::kChromeRenderFrame_SetWindowFeatures_Name:
            return "Receive reply chrome::mojom::ChromeRenderFrame::SetWindowFeatures";
      case internal::kChromeRenderFrame_RequestReloadImageForContextNode_Name:
            return "Receive reply chrome::mojom::ChromeRenderFrame::RequestReloadImageForContextNode";
      case internal::kChromeRenderFrame_RequestImageForContextNode_Name:
            return "Receive reply chrome::mojom::ChromeRenderFrame::RequestImageForContextNode";
      case internal::kChromeRenderFrame_ExecuteWebUIJavaScript_Name:
            return "Receive reply chrome::mojom::ChromeRenderFrame::ExecuteWebUIJavaScript";
      case internal::kChromeRenderFrame_SetCCTClientHeader_Name:
            return "Receive reply chrome::mojom::ChromeRenderFrame::SetCCTClientHeader";
      case internal::kChromeRenderFrame_GetMediaFeedURL_Name:
            return "Receive reply chrome::mojom::ChromeRenderFrame::GetMediaFeedURL";
      case internal::kChromeRenderFrame_LoadBlockedPlugins_Name:
            return "Receive reply chrome::mojom::ChromeRenderFrame::LoadBlockedPlugins";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ChromeRenderFrame::SetWindowFeatures_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::ChromeRenderFrame::SetWindowFeatures");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ChromeRenderFrame::RequestReloadImageForContextNode_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::ChromeRenderFrame::RequestReloadImageForContextNode");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ChromeRenderFrame::RequestImageForContextNode_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::ChromeRenderFrame::RequestImageForContextNode");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ChromeRenderFrame::ExecuteWebUIJavaScript_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::ChromeRenderFrame::ExecuteWebUIJavaScript");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ChromeRenderFrame::SetCCTClientHeader_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::ChromeRenderFrame::SetCCTClientHeader");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ChromeRenderFrame::GetMediaFeedURL_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::ChromeRenderFrame::GetMediaFeedURL");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ChromeRenderFrame::LoadBlockedPlugins_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::ChromeRenderFrame::LoadBlockedPlugins");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class ChromeRenderFrame_RequestImageForContextNode_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ChromeRenderFrame_RequestImageForContextNode_ForwardToCallback(
      ChromeRenderFrame::RequestImageForContextNodeCallback callback
      ) : callback_(std::move(callback)) {
  }

  ChromeRenderFrame_RequestImageForContextNode_ForwardToCallback(const ChromeRenderFrame_RequestImageForContextNode_ForwardToCallback&) = delete;
  ChromeRenderFrame_RequestImageForContextNode_ForwardToCallback& operator=(const ChromeRenderFrame_RequestImageForContextNode_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ChromeRenderFrame::RequestImageForContextNodeCallback callback_;
};

class ChromeRenderFrame_GetMediaFeedURL_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ChromeRenderFrame_GetMediaFeedURL_ForwardToCallback(
      ChromeRenderFrame::GetMediaFeedURLCallback callback
      ) : callback_(std::move(callback)) {
  }

  ChromeRenderFrame_GetMediaFeedURL_ForwardToCallback(const ChromeRenderFrame_GetMediaFeedURL_ForwardToCallback&) = delete;
  ChromeRenderFrame_GetMediaFeedURL_ForwardToCallback& operator=(const ChromeRenderFrame_GetMediaFeedURL_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ChromeRenderFrame::GetMediaFeedURLCallback callback_;
};

ChromeRenderFrameProxy::ChromeRenderFrameProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ChromeRenderFrameProxy::SetWindowFeatures(
    ::blink::mojom::WindowFeaturesPtr in_window_features) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send chrome::mojom::ChromeRenderFrame::SetWindowFeatures", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("window_features"), in_window_features,
                        "<value of type ::blink::mojom::WindowFeaturesPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kChromeRenderFrame_SetWindowFeatures_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::ChromeRenderFrame_SetWindowFeatures_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->window_features)::BaseType> window_features_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::WindowFeaturesDataView>(
      in_window_features, window_features_fragment);
  params->window_features.Set(
      window_features_fragment.is_null() ? nullptr : window_features_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->window_features.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null window_features in ChromeRenderFrame.SetWindowFeatures request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ChromeRenderFrame::Name_);
  message.set_method_name("SetWindowFeatures");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void ChromeRenderFrameProxy::RequestReloadImageForContextNode(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send chrome::mojom::ChromeRenderFrame::RequestReloadImageForContextNode");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kChromeRenderFrame_RequestReloadImageForContextNode_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::ChromeRenderFrame_RequestReloadImageForContextNode_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ChromeRenderFrame::Name_);
  message.set_method_name("RequestReloadImageForContextNode");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void ChromeRenderFrameProxy::RequestImageForContextNode(
    int32_t in_image_min_area_pixels, const ::gfx::Size& in_image_max_size_pixels, ImageFormat in_image_format, RequestImageForContextNodeCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send chrome::mojom::ChromeRenderFrame::RequestImageForContextNode", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("image_min_area_pixels"), in_image_min_area_pixels,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("image_max_size_pixels"), in_image_max_size_pixels,
                        "<value of type const ::gfx::Size&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("image_format"), in_image_format,
                        "<value of type ImageFormat>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kChromeRenderFrame_RequestImageForContextNode_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::ChromeRenderFrame_RequestImageForContextNode_Params_Data> params(
          message);
  params.Allocate();
  params->image_min_area_pixels = in_image_min_area_pixels;
  mojo::internal::MessageFragment<
      typename decltype(params->image_max_size_pixels)::BaseType> image_max_size_pixels_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
      in_image_max_size_pixels, image_max_size_pixels_fragment);
  params->image_max_size_pixels.Set(
      image_max_size_pixels_fragment.is_null() ? nullptr : image_max_size_pixels_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->image_max_size_pixels.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null image_max_size_pixels in ChromeRenderFrame.RequestImageForContextNode request");
  mojo::internal::Serialize<::chrome::mojom::ImageFormat>(
      in_image_format, &params->image_format);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ChromeRenderFrame::Name_);
  message.set_method_name("RequestImageForContextNode");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ChromeRenderFrame_RequestImageForContextNode_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void ChromeRenderFrameProxy::ExecuteWebUIJavaScript(
    const ::std::u16string& in_javascript) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send chrome::mojom::ChromeRenderFrame::ExecuteWebUIJavaScript", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("javascript"), in_javascript,
                        "<value of type const ::std::u16string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kChromeRenderFrame_ExecuteWebUIJavaScript_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::ChromeRenderFrame_ExecuteWebUIJavaScript_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->javascript)::BaseType> javascript_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_javascript, javascript_fragment);
  params->javascript.Set(
      javascript_fragment.is_null() ? nullptr : javascript_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->javascript.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null javascript in ChromeRenderFrame.ExecuteWebUIJavaScript request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ChromeRenderFrame::Name_);
  message.set_method_name("ExecuteWebUIJavaScript");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void ChromeRenderFrameProxy::SetCCTClientHeader(
    const std::string& in_header) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send chrome::mojom::ChromeRenderFrame::SetCCTClientHeader", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("header"), in_header,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kChromeRenderFrame_SetCCTClientHeader_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::ChromeRenderFrame_SetCCTClientHeader_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->header)::BaseType> header_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_header, header_fragment);
  params->header.Set(
      header_fragment.is_null() ? nullptr : header_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->header.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null header in ChromeRenderFrame.SetCCTClientHeader request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ChromeRenderFrame::Name_);
  message.set_method_name("SetCCTClientHeader");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void ChromeRenderFrameProxy::GetMediaFeedURL(
    GetMediaFeedURLCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send chrome::mojom::ChromeRenderFrame::GetMediaFeedURL");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kChromeRenderFrame_GetMediaFeedURL_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::ChromeRenderFrame_GetMediaFeedURL_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ChromeRenderFrame::Name_);
  message.set_method_name("GetMediaFeedURL");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ChromeRenderFrame_GetMediaFeedURL_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void ChromeRenderFrameProxy::LoadBlockedPlugins(
    const std::string& in_identifier) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send chrome::mojom::ChromeRenderFrame::LoadBlockedPlugins", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("identifier"), in_identifier,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kChromeRenderFrame_LoadBlockedPlugins_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::ChromeRenderFrame_LoadBlockedPlugins_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->identifier)::BaseType> identifier_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_identifier, identifier_fragment);
  params->identifier.Set(
      identifier_fragment.is_null() ? nullptr : identifier_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->identifier.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null identifier in ChromeRenderFrame.LoadBlockedPlugins request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ChromeRenderFrame::Name_);
  message.set_method_name("LoadBlockedPlugins");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class ChromeRenderFrame_RequestImageForContextNode_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ChromeRenderFrame::RequestImageForContextNodeCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ChromeRenderFrame_RequestImageForContextNode_ProxyToResponder> proxy(
        new ChromeRenderFrame_RequestImageForContextNode_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&ChromeRenderFrame_RequestImageForContextNode_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~ChromeRenderFrame_RequestImageForContextNode_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ChromeRenderFrame_RequestImageForContextNode_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ChromeRenderFrame::RequestImageForContextNodeCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::vector<uint8_t>& in_image_data, const ::gfx::Size& in_original_size, const std::string& in_encoded_extension);
};

bool ChromeRenderFrame_RequestImageForContextNode_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::ChromeRenderFrame_RequestImageForContextNode_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ChromeRenderFrame_RequestImageForContextNode_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<uint8_t> p_image_data{};
  ::gfx::Size p_original_size{};
  std::string p_encoded_extension{};
  ChromeRenderFrame_RequestImageForContextNode_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadImageData(&p_image_data))
    success = false;
  if (success && !input_data_view.ReadOriginalSize(&p_original_size))
    success = false;
  if (success && !input_data_view.ReadEncodedExtension(&p_encoded_extension))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ChromeRenderFrame::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_image_data), 
std::move(p_original_size), 
std::move(p_encoded_extension));
  return true;
}

void ChromeRenderFrame_RequestImageForContextNode_ProxyToResponder::Run(
    const std::vector<uint8_t>& in_image_data, const ::gfx::Size& in_original_size, const std::string& in_encoded_extension) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply chrome::mojom::ChromeRenderFrame::RequestImageForContextNode", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("image_data"), in_image_data,
                        "<value of type const std::vector<uint8_t>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("original_size"), in_original_size,
                        "<value of type const ::gfx::Size&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("encoded_extension"), in_encoded_extension,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kChromeRenderFrame_RequestImageForContextNode_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::ChromeRenderFrame_RequestImageForContextNode_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->image_data)::BaseType>
      image_data_fragment(params.message());
  const mojo::internal::ContainerValidateParams image_data_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      in_image_data, image_data_fragment, &image_data_validate_params);
  params->image_data.Set(
      image_data_fragment.is_null() ? nullptr : image_data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->image_data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null image_data in ");
  mojo::internal::MessageFragment<
      typename decltype(params->original_size)::BaseType> original_size_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
      in_original_size, original_size_fragment);
  params->original_size.Set(
      original_size_fragment.is_null() ? nullptr : original_size_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->original_size.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null original_size in ");
  mojo::internal::MessageFragment<
      typename decltype(params->encoded_extension)::BaseType> encoded_extension_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_encoded_extension, encoded_extension_fragment);
  params->encoded_extension.Set(
      encoded_extension_fragment.is_null() ? nullptr : encoded_extension_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->encoded_extension.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null encoded_extension in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ChromeRenderFrame::Name_);
  message.set_method_name("RequestImageForContextNode");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class ChromeRenderFrame_GetMediaFeedURL_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ChromeRenderFrame::GetMediaFeedURLCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ChromeRenderFrame_GetMediaFeedURL_ProxyToResponder> proxy(
        new ChromeRenderFrame_GetMediaFeedURL_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&ChromeRenderFrame_GetMediaFeedURL_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~ChromeRenderFrame_GetMediaFeedURL_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ChromeRenderFrame_GetMediaFeedURL_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ChromeRenderFrame::GetMediaFeedURLCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const absl::optional<::GURL>& in_url);
};

bool ChromeRenderFrame_GetMediaFeedURL_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::ChromeRenderFrame_GetMediaFeedURL_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ChromeRenderFrame_GetMediaFeedURL_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  absl::optional<::GURL> p_url{};
  ChromeRenderFrame_GetMediaFeedURL_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadUrl(&p_url))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ChromeRenderFrame::Name_, 5, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_url));
  return true;
}

void ChromeRenderFrame_GetMediaFeedURL_ProxyToResponder::Run(
    const absl::optional<::GURL>& in_url) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply chrome::mojom::ChromeRenderFrame::GetMediaFeedURL", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const absl::optional<::GURL>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kChromeRenderFrame_GetMediaFeedURL_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::ChromeRenderFrame_GetMediaFeedURL_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ChromeRenderFrame::Name_);
  message.set_method_name("GetMediaFeedURL");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool ChromeRenderFrameStubDispatch::Accept(
    ChromeRenderFrame* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kChromeRenderFrame_SetWindowFeatures_Name: {

      DCHECK(message->is_serialized());
      internal::ChromeRenderFrame_SetWindowFeatures_Params_Data* params =
          reinterpret_cast<internal::ChromeRenderFrame_SetWindowFeatures_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::mojom::WindowFeaturesPtr p_window_features{};
      ChromeRenderFrame_SetWindowFeatures_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadWindowFeatures(&p_window_features))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ChromeRenderFrame::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetWindowFeatures(
std::move(p_window_features));
      return true;
    }
    case internal::kChromeRenderFrame_RequestReloadImageForContextNode_Name: {

      DCHECK(message->is_serialized());
      internal::ChromeRenderFrame_RequestReloadImageForContextNode_Params_Data* params =
          reinterpret_cast<internal::ChromeRenderFrame_RequestReloadImageForContextNode_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ChromeRenderFrame_RequestReloadImageForContextNode_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ChromeRenderFrame::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestReloadImageForContextNode();
      return true;
    }
    case internal::kChromeRenderFrame_RequestImageForContextNode_Name: {
      break;
    }
    case internal::kChromeRenderFrame_ExecuteWebUIJavaScript_Name: {

      DCHECK(message->is_serialized());
      internal::ChromeRenderFrame_ExecuteWebUIJavaScript_Params_Data* params =
          reinterpret_cast<internal::ChromeRenderFrame_ExecuteWebUIJavaScript_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::std::u16string p_javascript{};
      ChromeRenderFrame_ExecuteWebUIJavaScript_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadJavascript(&p_javascript))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ChromeRenderFrame::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ExecuteWebUIJavaScript(
std::move(p_javascript));
      return true;
    }
    case internal::kChromeRenderFrame_SetCCTClientHeader_Name: {

      DCHECK(message->is_serialized());
      internal::ChromeRenderFrame_SetCCTClientHeader_Params_Data* params =
          reinterpret_cast<internal::ChromeRenderFrame_SetCCTClientHeader_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_header{};
      ChromeRenderFrame_SetCCTClientHeader_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadHeader(&p_header))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ChromeRenderFrame::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetCCTClientHeader(
std::move(p_header));
      return true;
    }
    case internal::kChromeRenderFrame_GetMediaFeedURL_Name: {
      break;
    }
    case internal::kChromeRenderFrame_LoadBlockedPlugins_Name: {

      DCHECK(message->is_serialized());
      internal::ChromeRenderFrame_LoadBlockedPlugins_Params_Data* params =
          reinterpret_cast<internal::ChromeRenderFrame_LoadBlockedPlugins_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_identifier{};
      ChromeRenderFrame_LoadBlockedPlugins_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadIdentifier(&p_identifier))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ChromeRenderFrame::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LoadBlockedPlugins(
std::move(p_identifier));
      return true;
    }
  }
  return false;
}

// static
bool ChromeRenderFrameStubDispatch::AcceptWithResponder(
    ChromeRenderFrame* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kChromeRenderFrame_SetWindowFeatures_Name: {
      break;
    }
    case internal::kChromeRenderFrame_RequestReloadImageForContextNode_Name: {
      break;
    }
    case internal::kChromeRenderFrame_RequestImageForContextNode_Name: {

      internal::ChromeRenderFrame_RequestImageForContextNode_Params_Data* params =
          reinterpret_cast<
              internal::ChromeRenderFrame_RequestImageForContextNode_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_image_min_area_pixels{};
      ::gfx::Size p_image_max_size_pixels{};
      ImageFormat p_image_format{};
      ChromeRenderFrame_RequestImageForContextNode_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_image_min_area_pixels = input_data_view.image_min_area_pixels();
      if (success && !input_data_view.ReadImageMaxSizePixels(&p_image_max_size_pixels))
        success = false;
      if (success && !input_data_view.ReadImageFormat(&p_image_format))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ChromeRenderFrame::Name_, 2, false);
        return false;
      }
      ChromeRenderFrame::RequestImageForContextNodeCallback callback =
          ChromeRenderFrame_RequestImageForContextNode_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestImageForContextNode(
std::move(p_image_min_area_pixels), 
std::move(p_image_max_size_pixels), 
std::move(p_image_format), std::move(callback));
      return true;
    }
    case internal::kChromeRenderFrame_ExecuteWebUIJavaScript_Name: {
      break;
    }
    case internal::kChromeRenderFrame_SetCCTClientHeader_Name: {
      break;
    }
    case internal::kChromeRenderFrame_GetMediaFeedURL_Name: {

      internal::ChromeRenderFrame_GetMediaFeedURL_Params_Data* params =
          reinterpret_cast<
              internal::ChromeRenderFrame_GetMediaFeedURL_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ChromeRenderFrame_GetMediaFeedURL_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ChromeRenderFrame::Name_, 5, false);
        return false;
      }
      ChromeRenderFrame::GetMediaFeedURLCallback callback =
          ChromeRenderFrame_GetMediaFeedURL_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetMediaFeedURL(std::move(callback));
      return true;
    }
    case internal::kChromeRenderFrame_LoadBlockedPlugins_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kChromeRenderFrameValidationInfo[] = {
    {&internal::ChromeRenderFrame_SetWindowFeatures_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::ChromeRenderFrame_RequestReloadImageForContextNode_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::ChromeRenderFrame_RequestImageForContextNode_Params_Data::Validate,
     &internal::ChromeRenderFrame_RequestImageForContextNode_ResponseParams_Data::Validate},
    {&internal::ChromeRenderFrame_ExecuteWebUIJavaScript_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::ChromeRenderFrame_SetCCTClientHeader_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::ChromeRenderFrame_GetMediaFeedURL_Params_Data::Validate,
     &internal::ChromeRenderFrame_GetMediaFeedURL_ResponseParams_Data::Validate},
    {&internal::ChromeRenderFrame_LoadBlockedPlugins_Params_Data::Validate,
     nullptr /* no response */},
};

bool ChromeRenderFrameRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::chrome::mojom::ChromeRenderFrame::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kChromeRenderFrameValidationInfo);
}

bool ChromeRenderFrameResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::chrome::mojom::ChromeRenderFrame::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kChromeRenderFrameValidationInfo);
}


}  // namespace mojom
}  // namespace chrome


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace chrome {
namespace mojom {


void ChromeRenderFrameInterceptorForTesting::SetWindowFeatures(::blink::mojom::WindowFeaturesPtr window_features) {
  GetForwardingInterface()->SetWindowFeatures(std::move(window_features));
}
void ChromeRenderFrameInterceptorForTesting::RequestReloadImageForContextNode() {
  GetForwardingInterface()->RequestReloadImageForContextNode();
}
void ChromeRenderFrameInterceptorForTesting::RequestImageForContextNode(int32_t image_min_area_pixels, const ::gfx::Size& image_max_size_pixels, ImageFormat image_format, RequestImageForContextNodeCallback callback) {
  GetForwardingInterface()->RequestImageForContextNode(std::move(image_min_area_pixels), std::move(image_max_size_pixels), std::move(image_format), std::move(callback));
}
void ChromeRenderFrameInterceptorForTesting::ExecuteWebUIJavaScript(const ::std::u16string& javascript) {
  GetForwardingInterface()->ExecuteWebUIJavaScript(std::move(javascript));
}
void ChromeRenderFrameInterceptorForTesting::SetCCTClientHeader(const std::string& header) {
  GetForwardingInterface()->SetCCTClientHeader(std::move(header));
}
void ChromeRenderFrameInterceptorForTesting::GetMediaFeedURL(GetMediaFeedURLCallback callback) {
  GetForwardingInterface()->GetMediaFeedURL(std::move(callback));
}
void ChromeRenderFrameInterceptorForTesting::LoadBlockedPlugins(const std::string& identifier) {
  GetForwardingInterface()->LoadBlockedPlugins(std::move(identifier));
}
ChromeRenderFrameAsyncWaiter::ChromeRenderFrameAsyncWaiter(
    ChromeRenderFrame* proxy) : proxy_(proxy) {}

ChromeRenderFrameAsyncWaiter::~ChromeRenderFrameAsyncWaiter() = default;

void ChromeRenderFrameAsyncWaiter::RequestImageForContextNode(
    int32_t image_min_area_pixels, const ::gfx::Size& image_max_size_pixels, ImageFormat image_format, std::vector<uint8_t>* out_image_data, ::gfx::Size* out_original_size, std::string* out_encoded_extension) {
  base::RunLoop loop;
  proxy_->RequestImageForContextNode(std::move(image_min_area_pixels),std::move(image_max_size_pixels),std::move(image_format),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<uint8_t>* out_image_data
,
             ::gfx::Size* out_original_size
,
             std::string* out_encoded_extension
,
             const std::vector<uint8_t>& image_data,
             const ::gfx::Size& original_size,
             const std::string& encoded_extension) {*out_image_data = std::move(image_data);*out_original_size = std::move(original_size);*out_encoded_extension = std::move(encoded_extension);
            loop->Quit();
          },
          &loop,
          out_image_data,
          out_original_size,
          out_encoded_extension));
  loop.Run();
}
void ChromeRenderFrameAsyncWaiter::GetMediaFeedURL(
    absl::optional<::GURL>* out_url) {
  base::RunLoop loop;
  proxy_->GetMediaFeedURL(
      base::BindOnce(
          [](base::RunLoop* loop,
             absl::optional<::GURL>* out_url
,
             const absl::optional<::GURL>& url) {*out_url = std::move(url);
            loop->Quit();
          },
          &loop,
          out_url));
  loop.Run();
}





}  // namespace mojom
}  // namespace chrome


#if defined(__clang__)
#pragma clang diagnostic pop
#endif