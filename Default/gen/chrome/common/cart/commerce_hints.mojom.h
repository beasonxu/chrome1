// chrome/common/cart/commerce_hints.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_CART_COMMERCE_HINTS_MOJOM_H_
#define CHROME_COMMON_CART_COMMERCE_HINTS_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/common/cart/commerce_hints.mojom-shared.h"
#include "chrome/common/cart/commerce_hints.mojom-forward.h"
#include "url/mojom/url.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace cart {
namespace mojom {

class CommerceHintObserverProxy;

template <typename ImplRefTraits>
class CommerceHintObserverStub;

class CommerceHintObserverRequestValidator;
class CommerceHintObserverResponseValidator;


class  CommerceHintObserver
    : public CommerceHintObserverInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = CommerceHintObserverInterfaceBase;
  using Proxy_ = CommerceHintObserverProxy;

  template <typename ImplRefTraits>
  using Stub_ = CommerceHintObserverStub<ImplRefTraits>;

  using RequestValidator_ = CommerceHintObserverRequestValidator;
  using ResponseValidator_ = CommerceHintObserverResponseValidator;
  enum MethodMinVersions : uint32_t {
    kOnAddToCartMinVersion = 0,
    kOnVisitCartMinVersion = 0,
    kOnCartProductUpdatedMinVersion = 0,
    kOnVisitCheckoutMinVersion = 0,
    kOnPurchaseMinVersion = 0,
    kOnFormSubmitMinVersion = 0,
    kOnWillSendRequestMinVersion = 0,
    kOnNavigationMinVersion = 0,
    kOnCartExtractionMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct OnAddToCart_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnVisitCart_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnCartProductUpdated_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnVisitCheckout_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnPurchase_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnFormSubmit_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnWillSendRequest_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnNavigation_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnCartExtraction_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~CommerceHintObserver() = default;

  
  virtual void OnAddToCart(const absl::optional<::GURL>& cart_url, const std::string& product_id) = 0;

  
  virtual void OnVisitCart() = 0;

  
  virtual void OnCartProductUpdated(std::vector<ProductPtr> products) = 0;

  
  virtual void OnVisitCheckout() = 0;

  
  virtual void OnPurchase() = 0;

  
  virtual void OnFormSubmit(bool is_purchase) = 0;

  
  virtual void OnWillSendRequest(bool is_addtocart) = 0;


  using OnNavigationCallback = base::OnceCallback<void(bool, HeuristicsPtr)>;
  
  virtual void OnNavigation(const ::GURL& url, const std::string& version_number, OnNavigationCallback callback) = 0;


  using OnCartExtractionCallback = base::OnceCallback<void(const std::string&, const std::string&)>;
  
  virtual void OnCartExtraction(OnCartExtractionCallback callback) = 0;
};



class  CommerceHintObserverProxy
    : public CommerceHintObserver {
 public:
  using InterfaceType = CommerceHintObserver;

  explicit CommerceHintObserverProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnAddToCart(const absl::optional<::GURL>& cart_url, const std::string& product_id) final;
  
  void OnVisitCart() final;
  
  void OnCartProductUpdated(std::vector<ProductPtr> products) final;
  
  void OnVisitCheckout() final;
  
  void OnPurchase() final;
  
  void OnFormSubmit(bool is_purchase) final;
  
  void OnWillSendRequest(bool is_addtocart) final;
  
  void OnNavigation(const ::GURL& url, const std::string& version_number, OnNavigationCallback callback) final;
  
  void OnCartExtraction(OnCartExtractionCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  CommerceHintObserverStubDispatch {
 public:
  static bool Accept(CommerceHintObserver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      CommerceHintObserver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<CommerceHintObserver>>
class CommerceHintObserverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  CommerceHintObserverStub() = default;
  ~CommerceHintObserverStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CommerceHintObserverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CommerceHintObserverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  CommerceHintObserverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  CommerceHintObserverResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};






class  Heuristics {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Heuristics, T>::value>;
  using DataView = HeuristicsDataView;
  using Data_ = internal::Heuristics_Data;

  template <typename... Args>
  static HeuristicsPtr New(Args&&... args) {
    return HeuristicsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static HeuristicsPtr From(const U& u) {
    return mojo::TypeConverter<HeuristicsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Heuristics>::Convert(*this);
  }


  Heuristics();

  Heuristics(
      const std::string& version_number,
      const std::string& hint_json_data,
      const std::string& global_json_data);


  ~Heuristics();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = HeuristicsPtr>
  HeuristicsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Heuristics::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Heuristics::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Heuristics::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Heuristics::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Heuristics_UnserializedMessageContext<
            UserType, Heuristics::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Heuristics::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Heuristics::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Heuristics_UnserializedMessageContext<
            UserType, Heuristics::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Heuristics::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string version_number;
  
  std::string hint_json_data;
  
  std::string global_json_data;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Heuristics::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Heuristics::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Heuristics::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Heuristics::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







class  Product {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Product, T>::value>;
  using DataView = ProductDataView;
  using Data_ = internal::Product_Data;

  template <typename... Args>
  static ProductPtr New(Args&&... args) {
    return ProductPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ProductPtr From(const U& u) {
    return mojo::TypeConverter<ProductPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Product>::Convert(*this);
  }


  Product();

  Product(
      const ::GURL& image_url,
      const std::string& name,
      const std::string& product_id);


  ~Product();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ProductPtr>
  ProductPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Product::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Product::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Product::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Product::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Product_UnserializedMessageContext<
            UserType, Product::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Product::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Product::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Product_UnserializedMessageContext<
            UserType, Product::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Product::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::GURL image_url;
  
  std::string name;
  
  std::string product_id;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Product::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Product::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Product::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Product::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}


template <typename StructPtrType>
ProductPtr Product::Clone() const {
  return New(
      mojo::Clone(image_url),
      mojo::Clone(name),
      mojo::Clone(product_id)
  );
}

template <typename T, Product::EnableIfSame<T>*>
bool Product::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->image_url, other_struct.image_url))
    return false;
  if (!mojo::Equals(this->name, other_struct.name))
    return false;
  if (!mojo::Equals(this->product_id, other_struct.product_id))
    return false;
  return true;
}

template <typename T, Product::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.image_url < rhs.image_url)
    return true;
  if (rhs.image_url < lhs.image_url)
    return false;
  if (lhs.name < rhs.name)
    return true;
  if (rhs.name < lhs.name)
    return false;
  if (lhs.product_id < rhs.product_id)
    return true;
  if (rhs.product_id < lhs.product_id)
    return false;
  return false;
}
template <typename StructPtrType>
HeuristicsPtr Heuristics::Clone() const {
  return New(
      mojo::Clone(version_number),
      mojo::Clone(hint_json_data),
      mojo::Clone(global_json_data)
  );
}

template <typename T, Heuristics::EnableIfSame<T>*>
bool Heuristics::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->version_number, other_struct.version_number))
    return false;
  if (!mojo::Equals(this->hint_json_data, other_struct.hint_json_data))
    return false;
  if (!mojo::Equals(this->global_json_data, other_struct.global_json_data))
    return false;
  return true;
}

template <typename T, Heuristics::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.version_number < rhs.version_number)
    return true;
  if (rhs.version_number < lhs.version_number)
    return false;
  if (lhs.hint_json_data < rhs.hint_json_data)
    return true;
  if (rhs.hint_json_data < lhs.hint_json_data)
    return false;
  if (lhs.global_json_data < rhs.global_json_data)
    return true;
  if (rhs.global_json_data < lhs.global_json_data)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace cart

namespace mojo {


template <>
struct  StructTraits<::cart::mojom::Product::DataView,
                                         ::cart::mojom::ProductPtr> {
  static bool IsNull(const ::cart::mojom::ProductPtr& input) { return !input; }
  static void SetToNull(::cart::mojom::ProductPtr* output) { output->reset(); }

  static const decltype(::cart::mojom::Product::image_url)& image_url(
      const ::cart::mojom::ProductPtr& input) {
    return input->image_url;
  }

  static const decltype(::cart::mojom::Product::name)& name(
      const ::cart::mojom::ProductPtr& input) {
    return input->name;
  }

  static const decltype(::cart::mojom::Product::product_id)& product_id(
      const ::cart::mojom::ProductPtr& input) {
    return input->product_id;
  }

  static bool Read(::cart::mojom::Product::DataView input, ::cart::mojom::ProductPtr* output);
};


template <>
struct  StructTraits<::cart::mojom::Heuristics::DataView,
                                         ::cart::mojom::HeuristicsPtr> {
  static bool IsNull(const ::cart::mojom::HeuristicsPtr& input) { return !input; }
  static void SetToNull(::cart::mojom::HeuristicsPtr* output) { output->reset(); }

  static const decltype(::cart::mojom::Heuristics::version_number)& version_number(
      const ::cart::mojom::HeuristicsPtr& input) {
    return input->version_number;
  }

  static const decltype(::cart::mojom::Heuristics::hint_json_data)& hint_json_data(
      const ::cart::mojom::HeuristicsPtr& input) {
    return input->hint_json_data;
  }

  static const decltype(::cart::mojom::Heuristics::global_json_data)& global_json_data(
      const ::cart::mojom::HeuristicsPtr& input) {
    return input->global_json_data;
  }

  static bool Read(::cart::mojom::Heuristics::DataView input, ::cart::mojom::HeuristicsPtr* output);
};

}  // namespace mojo

#endif  // CHROME_COMMON_CART_COMMERCE_HINTS_MOJOM_H_