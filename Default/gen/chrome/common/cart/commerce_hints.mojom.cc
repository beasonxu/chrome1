// chrome/common/cart/commerce_hints.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/common/cart/commerce_hints.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/common/cart/commerce_hints.mojom-params-data.h"
#include "chrome/common/cart/commerce_hints.mojom-shared-message-ids.h"

#include "chrome/common/cart/commerce_hints.mojom-import-headers.h"
#include "chrome/common/cart/commerce_hints.mojom-test-utils.h"


#ifndef CHROME_COMMON_CART_COMMERCE_HINTS_MOJOM_JUMBO_H_
#define CHROME_COMMON_CART_COMMERCE_HINTS_MOJOM_JUMBO_H_
#endif



namespace cart {
namespace mojom {
Product::Product()
    : image_url(),
      name(),
      product_id() {}

Product::Product(
    const ::GURL& image_url_in,
    const std::string& name_in,
    const std::string& product_id_in)
    : image_url(std::move(image_url_in)),
      name(std::move(name_in)),
      product_id(std::move(product_id_in)) {}

Product::~Product() = default;

void Product::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "image_url"), this->image_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "product_id"), this->product_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool Product::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
Heuristics::Heuristics()
    : version_number(),
      hint_json_data(),
      global_json_data() {}

Heuristics::Heuristics(
    const std::string& version_number_in,
    const std::string& hint_json_data_in,
    const std::string& global_json_data_in)
    : version_number(std::move(version_number_in)),
      hint_json_data(std::move(hint_json_data_in)),
      global_json_data(std::move(global_json_data_in)) {}

Heuristics::~Heuristics() = default;
size_t Heuristics::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->version_number);
  seed = mojo::internal::Hash(seed, this->hint_json_data);
  seed = mojo::internal::Hash(seed, this->global_json_data);
  return seed;
}

void Heuristics::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "version_number"), this->version_number,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "hint_json_data"), this->hint_json_data,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "global_json_data"), this->global_json_data,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool Heuristics::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char CommerceHintObserver::Name_[] = "cart.mojom.CommerceHintObserver";

CommerceHintObserver::IPCStableHashFunction CommerceHintObserver::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kCommerceHintObserver_OnAddToCart_Name: {
      return &CommerceHintObserver::OnAddToCart_Sym::IPCStableHash;
    }
    case internal::kCommerceHintObserver_OnVisitCart_Name: {
      return &CommerceHintObserver::OnVisitCart_Sym::IPCStableHash;
    }
    case internal::kCommerceHintObserver_OnCartProductUpdated_Name: {
      return &CommerceHintObserver::OnCartProductUpdated_Sym::IPCStableHash;
    }
    case internal::kCommerceHintObserver_OnVisitCheckout_Name: {
      return &CommerceHintObserver::OnVisitCheckout_Sym::IPCStableHash;
    }
    case internal::kCommerceHintObserver_OnPurchase_Name: {
      return &CommerceHintObserver::OnPurchase_Sym::IPCStableHash;
    }
    case internal::kCommerceHintObserver_OnFormSubmit_Name: {
      return &CommerceHintObserver::OnFormSubmit_Sym::IPCStableHash;
    }
    case internal::kCommerceHintObserver_OnWillSendRequest_Name: {
      return &CommerceHintObserver::OnWillSendRequest_Sym::IPCStableHash;
    }
    case internal::kCommerceHintObserver_OnNavigation_Name: {
      return &CommerceHintObserver::OnNavigation_Sym::IPCStableHash;
    }
    case internal::kCommerceHintObserver_OnCartExtraction_Name: {
      return &CommerceHintObserver::OnCartExtraction_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* CommerceHintObserver::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kCommerceHintObserver_OnAddToCart_Name:
            return "Receive cart::mojom::CommerceHintObserver::OnAddToCart";
      case internal::kCommerceHintObserver_OnVisitCart_Name:
            return "Receive cart::mojom::CommerceHintObserver::OnVisitCart";
      case internal::kCommerceHintObserver_OnCartProductUpdated_Name:
            return "Receive cart::mojom::CommerceHintObserver::OnCartProductUpdated";
      case internal::kCommerceHintObserver_OnVisitCheckout_Name:
            return "Receive cart::mojom::CommerceHintObserver::OnVisitCheckout";
      case internal::kCommerceHintObserver_OnPurchase_Name:
            return "Receive cart::mojom::CommerceHintObserver::OnPurchase";
      case internal::kCommerceHintObserver_OnFormSubmit_Name:
            return "Receive cart::mojom::CommerceHintObserver::OnFormSubmit";
      case internal::kCommerceHintObserver_OnWillSendRequest_Name:
            return "Receive cart::mojom::CommerceHintObserver::OnWillSendRequest";
      case internal::kCommerceHintObserver_OnNavigation_Name:
            return "Receive cart::mojom::CommerceHintObserver::OnNavigation";
      case internal::kCommerceHintObserver_OnCartExtraction_Name:
            return "Receive cart::mojom::CommerceHintObserver::OnCartExtraction";
    }
  } else {
    switch (message.name()) {
      case internal::kCommerceHintObserver_OnAddToCart_Name:
            return "Receive reply cart::mojom::CommerceHintObserver::OnAddToCart";
      case internal::kCommerceHintObserver_OnVisitCart_Name:
            return "Receive reply cart::mojom::CommerceHintObserver::OnVisitCart";
      case internal::kCommerceHintObserver_OnCartProductUpdated_Name:
            return "Receive reply cart::mojom::CommerceHintObserver::OnCartProductUpdated";
      case internal::kCommerceHintObserver_OnVisitCheckout_Name:
            return "Receive reply cart::mojom::CommerceHintObserver::OnVisitCheckout";
      case internal::kCommerceHintObserver_OnPurchase_Name:
            return "Receive reply cart::mojom::CommerceHintObserver::OnPurchase";
      case internal::kCommerceHintObserver_OnFormSubmit_Name:
            return "Receive reply cart::mojom::CommerceHintObserver::OnFormSubmit";
      case internal::kCommerceHintObserver_OnWillSendRequest_Name:
            return "Receive reply cart::mojom::CommerceHintObserver::OnWillSendRequest";
      case internal::kCommerceHintObserver_OnNavigation_Name:
            return "Receive reply cart::mojom::CommerceHintObserver::OnNavigation";
      case internal::kCommerceHintObserver_OnCartExtraction_Name:
            return "Receive reply cart::mojom::CommerceHintObserver::OnCartExtraction";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t CommerceHintObserver::OnAddToCart_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cart::mojom::CommerceHintObserver::OnAddToCart");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CommerceHintObserver::OnVisitCart_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cart::mojom::CommerceHintObserver::OnVisitCart");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CommerceHintObserver::OnCartProductUpdated_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cart::mojom::CommerceHintObserver::OnCartProductUpdated");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CommerceHintObserver::OnVisitCheckout_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cart::mojom::CommerceHintObserver::OnVisitCheckout");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CommerceHintObserver::OnPurchase_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cart::mojom::CommerceHintObserver::OnPurchase");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CommerceHintObserver::OnFormSubmit_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cart::mojom::CommerceHintObserver::OnFormSubmit");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CommerceHintObserver::OnWillSendRequest_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cart::mojom::CommerceHintObserver::OnWillSendRequest");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CommerceHintObserver::OnNavigation_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cart::mojom::CommerceHintObserver::OnNavigation");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CommerceHintObserver::OnCartExtraction_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cart::mojom::CommerceHintObserver::OnCartExtraction");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class CommerceHintObserver_OnNavigation_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CommerceHintObserver_OnNavigation_ForwardToCallback(
      CommerceHintObserver::OnNavigationCallback callback
      ) : callback_(std::move(callback)) {
  }

  CommerceHintObserver_OnNavigation_ForwardToCallback(const CommerceHintObserver_OnNavigation_ForwardToCallback&) = delete;
  CommerceHintObserver_OnNavigation_ForwardToCallback& operator=(const CommerceHintObserver_OnNavigation_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CommerceHintObserver::OnNavigationCallback callback_;
};

class CommerceHintObserver_OnCartExtraction_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CommerceHintObserver_OnCartExtraction_ForwardToCallback(
      CommerceHintObserver::OnCartExtractionCallback callback
      ) : callback_(std::move(callback)) {
  }

  CommerceHintObserver_OnCartExtraction_ForwardToCallback(const CommerceHintObserver_OnCartExtraction_ForwardToCallback&) = delete;
  CommerceHintObserver_OnCartExtraction_ForwardToCallback& operator=(const CommerceHintObserver_OnCartExtraction_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CommerceHintObserver::OnCartExtractionCallback callback_;
};

CommerceHintObserverProxy::CommerceHintObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void CommerceHintObserverProxy::OnAddToCart(
    const absl::optional<::GURL>& in_cart_url, const std::string& in_product_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cart::mojom::CommerceHintObserver::OnAddToCart", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cart_url"), in_cart_url,
                        "<value of type const absl::optional<::GURL>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("product_id"), in_product_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCommerceHintObserver_OnAddToCart_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cart::mojom::internal::CommerceHintObserver_OnAddToCart_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->cart_url)::BaseType> cart_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_cart_url, cart_url_fragment);
  params->cart_url.Set(
      cart_url_fragment.is_null() ? nullptr : cart_url_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->product_id)::BaseType> product_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_product_id, product_id_fragment);
  params->product_id.Set(
      product_id_fragment.is_null() ? nullptr : product_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->product_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null product_id in CommerceHintObserver.OnAddToCart request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CommerceHintObserver::Name_);
  message.set_method_name("OnAddToCart");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void CommerceHintObserverProxy::OnVisitCart(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send cart::mojom::CommerceHintObserver::OnVisitCart");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCommerceHintObserver_OnVisitCart_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cart::mojom::internal::CommerceHintObserver_OnVisitCart_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CommerceHintObserver::Name_);
  message.set_method_name("OnVisitCart");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void CommerceHintObserverProxy::OnCartProductUpdated(
    std::vector<ProductPtr> in_products) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cart::mojom::CommerceHintObserver::OnCartProductUpdated", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("products"), in_products,
                        "<value of type std::vector<ProductPtr>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCommerceHintObserver_OnCartProductUpdated_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cart::mojom::internal::CommerceHintObserver_OnCartProductUpdated_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->products)::BaseType>
      products_fragment(params.message());
  const mojo::internal::ContainerValidateParams products_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::cart::mojom::ProductDataView>>(
      in_products, products_fragment, &products_validate_params);
  params->products.Set(
      products_fragment.is_null() ? nullptr : products_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->products.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null products in CommerceHintObserver.OnCartProductUpdated request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CommerceHintObserver::Name_);
  message.set_method_name("OnCartProductUpdated");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void CommerceHintObserverProxy::OnVisitCheckout(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send cart::mojom::CommerceHintObserver::OnVisitCheckout");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCommerceHintObserver_OnVisitCheckout_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cart::mojom::internal::CommerceHintObserver_OnVisitCheckout_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CommerceHintObserver::Name_);
  message.set_method_name("OnVisitCheckout");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void CommerceHintObserverProxy::OnPurchase(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send cart::mojom::CommerceHintObserver::OnPurchase");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCommerceHintObserver_OnPurchase_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cart::mojom::internal::CommerceHintObserver_OnPurchase_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CommerceHintObserver::Name_);
  message.set_method_name("OnPurchase");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void CommerceHintObserverProxy::OnFormSubmit(
    bool in_is_purchase) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cart::mojom::CommerceHintObserver::OnFormSubmit", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_purchase"), in_is_purchase,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCommerceHintObserver_OnFormSubmit_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cart::mojom::internal::CommerceHintObserver_OnFormSubmit_Params_Data> params(
          message);
  params.Allocate();
  params->is_purchase = in_is_purchase;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CommerceHintObserver::Name_);
  message.set_method_name("OnFormSubmit");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void CommerceHintObserverProxy::OnWillSendRequest(
    bool in_is_addtocart) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cart::mojom::CommerceHintObserver::OnWillSendRequest", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_addtocart"), in_is_addtocart,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCommerceHintObserver_OnWillSendRequest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cart::mojom::internal::CommerceHintObserver_OnWillSendRequest_Params_Data> params(
          message);
  params.Allocate();
  params->is_addtocart = in_is_addtocart;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CommerceHintObserver::Name_);
  message.set_method_name("OnWillSendRequest");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void CommerceHintObserverProxy::OnNavigation(
    const ::GURL& in_url, const std::string& in_version_number, OnNavigationCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cart::mojom::CommerceHintObserver::OnNavigation", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::GURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("version_number"), in_version_number,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCommerceHintObserver_OnNavigation_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cart::mojom::internal::CommerceHintObserver_OnNavigation_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in CommerceHintObserver.OnNavigation request");
  mojo::internal::MessageFragment<
      typename decltype(params->version_number)::BaseType> version_number_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_version_number, version_number_fragment);
  params->version_number.Set(
      version_number_fragment.is_null() ? nullptr : version_number_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->version_number.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null version_number in CommerceHintObserver.OnNavigation request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CommerceHintObserver::Name_);
  message.set_method_name("OnNavigation");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CommerceHintObserver_OnNavigation_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CommerceHintObserverProxy::OnCartExtraction(
    OnCartExtractionCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send cart::mojom::CommerceHintObserver::OnCartExtraction");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCommerceHintObserver_OnCartExtraction_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cart::mojom::internal::CommerceHintObserver_OnCartExtraction_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CommerceHintObserver::Name_);
  message.set_method_name("OnCartExtraction");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CommerceHintObserver_OnCartExtraction_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class CommerceHintObserver_OnNavigation_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CommerceHintObserver::OnNavigationCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CommerceHintObserver_OnNavigation_ProxyToResponder> proxy(
        new CommerceHintObserver_OnNavigation_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CommerceHintObserver_OnNavigation_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CommerceHintObserver_OnNavigation_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CommerceHintObserver_OnNavigation_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CommerceHintObserver::OnNavigationCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_should_skip, HeuristicsPtr in_heuristics);
};

bool CommerceHintObserver_OnNavigation_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CommerceHintObserver_OnNavigation_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CommerceHintObserver_OnNavigation_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_should_skip{};
  HeuristicsPtr p_heuristics{};
  CommerceHintObserver_OnNavigation_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_should_skip = input_data_view.should_skip();
  if (success && !input_data_view.ReadHeuristics(&p_heuristics))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CommerceHintObserver::Name_, 7, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_should_skip), 
std::move(p_heuristics));
  return true;
}

void CommerceHintObserver_OnNavigation_ProxyToResponder::Run(
    bool in_should_skip, HeuristicsPtr in_heuristics) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply cart::mojom::CommerceHintObserver::OnNavigation", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("should_skip"), in_should_skip,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("heuristics"), in_heuristics,
                        "<value of type HeuristicsPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCommerceHintObserver_OnNavigation_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cart::mojom::internal::CommerceHintObserver_OnNavigation_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->should_skip = in_should_skip;
  mojo::internal::MessageFragment<
      typename decltype(params->heuristics)::BaseType> heuristics_fragment(
          params.message());
  mojo::internal::Serialize<::cart::mojom::HeuristicsDataView>(
      in_heuristics, heuristics_fragment);
  params->heuristics.Set(
      heuristics_fragment.is_null() ? nullptr : heuristics_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->heuristics.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null heuristics in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CommerceHintObserver::Name_);
  message.set_method_name("OnNavigation");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CommerceHintObserver_OnCartExtraction_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CommerceHintObserver::OnCartExtractionCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CommerceHintObserver_OnCartExtraction_ProxyToResponder> proxy(
        new CommerceHintObserver_OnCartExtraction_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CommerceHintObserver_OnCartExtraction_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CommerceHintObserver_OnCartExtraction_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CommerceHintObserver_OnCartExtraction_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CommerceHintObserver::OnCartExtractionCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_product_id_json, const std::string& in_cart_extraction_script);
};

bool CommerceHintObserver_OnCartExtraction_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CommerceHintObserver_OnCartExtraction_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CommerceHintObserver_OnCartExtraction_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::string p_product_id_json{};
  std::string p_cart_extraction_script{};
  CommerceHintObserver_OnCartExtraction_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadProductIdJson(&p_product_id_json))
    success = false;
  if (success && !input_data_view.ReadCartExtractionScript(&p_cart_extraction_script))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CommerceHintObserver::Name_, 8, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_product_id_json), 
std::move(p_cart_extraction_script));
  return true;
}

void CommerceHintObserver_OnCartExtraction_ProxyToResponder::Run(
    const std::string& in_product_id_json, const std::string& in_cart_extraction_script) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply cart::mojom::CommerceHintObserver::OnCartExtraction", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("product_id_json"), in_product_id_json,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cart_extraction_script"), in_cart_extraction_script,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCommerceHintObserver_OnCartExtraction_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cart::mojom::internal::CommerceHintObserver_OnCartExtraction_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->product_id_json)::BaseType> product_id_json_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_product_id_json, product_id_json_fragment);
  params->product_id_json.Set(
      product_id_json_fragment.is_null() ? nullptr : product_id_json_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->product_id_json.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null product_id_json in ");
  mojo::internal::MessageFragment<
      typename decltype(params->cart_extraction_script)::BaseType> cart_extraction_script_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_cart_extraction_script, cart_extraction_script_fragment);
  params->cart_extraction_script.Set(
      cart_extraction_script_fragment.is_null() ? nullptr : cart_extraction_script_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->cart_extraction_script.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null cart_extraction_script in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CommerceHintObserver::Name_);
  message.set_method_name("OnCartExtraction");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool CommerceHintObserverStubDispatch::Accept(
    CommerceHintObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kCommerceHintObserver_OnAddToCart_Name: {

      DCHECK(message->is_serialized());
      internal::CommerceHintObserver_OnAddToCart_Params_Data* params =
          reinterpret_cast<internal::CommerceHintObserver_OnAddToCart_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      absl::optional<::GURL> p_cart_url{};
      std::string p_product_id{};
      CommerceHintObserver_OnAddToCart_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadCartUrl(&p_cart_url))
        success = false;
      if (success && !input_data_view.ReadProductId(&p_product_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CommerceHintObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnAddToCart(
std::move(p_cart_url), 
std::move(p_product_id));
      return true;
    }
    case internal::kCommerceHintObserver_OnVisitCart_Name: {

      DCHECK(message->is_serialized());
      internal::CommerceHintObserver_OnVisitCart_Params_Data* params =
          reinterpret_cast<internal::CommerceHintObserver_OnVisitCart_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      CommerceHintObserver_OnVisitCart_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CommerceHintObserver::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnVisitCart();
      return true;
    }
    case internal::kCommerceHintObserver_OnCartProductUpdated_Name: {

      DCHECK(message->is_serialized());
      internal::CommerceHintObserver_OnCartProductUpdated_Params_Data* params =
          reinterpret_cast<internal::CommerceHintObserver_OnCartProductUpdated_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::vector<ProductPtr> p_products{};
      CommerceHintObserver_OnCartProductUpdated_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadProducts(&p_products))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CommerceHintObserver::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnCartProductUpdated(
std::move(p_products));
      return true;
    }
    case internal::kCommerceHintObserver_OnVisitCheckout_Name: {

      DCHECK(message->is_serialized());
      internal::CommerceHintObserver_OnVisitCheckout_Params_Data* params =
          reinterpret_cast<internal::CommerceHintObserver_OnVisitCheckout_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      CommerceHintObserver_OnVisitCheckout_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CommerceHintObserver::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnVisitCheckout();
      return true;
    }
    case internal::kCommerceHintObserver_OnPurchase_Name: {

      DCHECK(message->is_serialized());
      internal::CommerceHintObserver_OnPurchase_Params_Data* params =
          reinterpret_cast<internal::CommerceHintObserver_OnPurchase_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      CommerceHintObserver_OnPurchase_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CommerceHintObserver::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnPurchase();
      return true;
    }
    case internal::kCommerceHintObserver_OnFormSubmit_Name: {

      DCHECK(message->is_serialized());
      internal::CommerceHintObserver_OnFormSubmit_Params_Data* params =
          reinterpret_cast<internal::CommerceHintObserver_OnFormSubmit_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_is_purchase{};
      CommerceHintObserver_OnFormSubmit_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_is_purchase = input_data_view.is_purchase();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CommerceHintObserver::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnFormSubmit(
std::move(p_is_purchase));
      return true;
    }
    case internal::kCommerceHintObserver_OnWillSendRequest_Name: {

      DCHECK(message->is_serialized());
      internal::CommerceHintObserver_OnWillSendRequest_Params_Data* params =
          reinterpret_cast<internal::CommerceHintObserver_OnWillSendRequest_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_is_addtocart{};
      CommerceHintObserver_OnWillSendRequest_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_is_addtocart = input_data_view.is_addtocart();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CommerceHintObserver::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnWillSendRequest(
std::move(p_is_addtocart));
      return true;
    }
    case internal::kCommerceHintObserver_OnNavigation_Name: {
      break;
    }
    case internal::kCommerceHintObserver_OnCartExtraction_Name: {
      break;
    }
  }
  return false;
}

// static
bool CommerceHintObserverStubDispatch::AcceptWithResponder(
    CommerceHintObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kCommerceHintObserver_OnAddToCart_Name: {
      break;
    }
    case internal::kCommerceHintObserver_OnVisitCart_Name: {
      break;
    }
    case internal::kCommerceHintObserver_OnCartProductUpdated_Name: {
      break;
    }
    case internal::kCommerceHintObserver_OnVisitCheckout_Name: {
      break;
    }
    case internal::kCommerceHintObserver_OnPurchase_Name: {
      break;
    }
    case internal::kCommerceHintObserver_OnFormSubmit_Name: {
      break;
    }
    case internal::kCommerceHintObserver_OnWillSendRequest_Name: {
      break;
    }
    case internal::kCommerceHintObserver_OnNavigation_Name: {

      internal::CommerceHintObserver_OnNavigation_Params_Data* params =
          reinterpret_cast<
              internal::CommerceHintObserver_OnNavigation_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::GURL p_url{};
      std::string p_version_number{};
      CommerceHintObserver_OnNavigation_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (success && !input_data_view.ReadVersionNumber(&p_version_number))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CommerceHintObserver::Name_, 7, false);
        return false;
      }
      CommerceHintObserver::OnNavigationCallback callback =
          CommerceHintObserver_OnNavigation_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnNavigation(
std::move(p_url), 
std::move(p_version_number), std::move(callback));
      return true;
    }
    case internal::kCommerceHintObserver_OnCartExtraction_Name: {

      internal::CommerceHintObserver_OnCartExtraction_Params_Data* params =
          reinterpret_cast<
              internal::CommerceHintObserver_OnCartExtraction_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      CommerceHintObserver_OnCartExtraction_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CommerceHintObserver::Name_, 8, false);
        return false;
      }
      CommerceHintObserver::OnCartExtractionCallback callback =
          CommerceHintObserver_OnCartExtraction_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnCartExtraction(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kCommerceHintObserverValidationInfo[] = {
    {&internal::CommerceHintObserver_OnAddToCart_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::CommerceHintObserver_OnVisitCart_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::CommerceHintObserver_OnCartProductUpdated_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::CommerceHintObserver_OnVisitCheckout_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::CommerceHintObserver_OnPurchase_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::CommerceHintObserver_OnFormSubmit_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::CommerceHintObserver_OnWillSendRequest_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::CommerceHintObserver_OnNavigation_Params_Data::Validate,
     &internal::CommerceHintObserver_OnNavigation_ResponseParams_Data::Validate},
    {&internal::CommerceHintObserver_OnCartExtraction_Params_Data::Validate,
     &internal::CommerceHintObserver_OnCartExtraction_ResponseParams_Data::Validate},
};

bool CommerceHintObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::cart::mojom::CommerceHintObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kCommerceHintObserverValidationInfo);
}

bool CommerceHintObserverResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::cart::mojom::CommerceHintObserver::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kCommerceHintObserverValidationInfo);
}


}  // namespace mojom
}  // namespace cart


namespace mojo {


// static
bool StructTraits<::cart::mojom::Product::DataView, ::cart::mojom::ProductPtr>::Read(
    ::cart::mojom::Product::DataView input,
    ::cart::mojom::ProductPtr* output) {
  bool success = true;
  ::cart::mojom::ProductPtr result(::cart::mojom::Product::New());
  
      if (success && !input.ReadImageUrl(&result->image_url))
        success = false;
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadProductId(&result->product_id))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::cart::mojom::Heuristics::DataView, ::cart::mojom::HeuristicsPtr>::Read(
    ::cart::mojom::Heuristics::DataView input,
    ::cart::mojom::HeuristicsPtr* output) {
  bool success = true;
  ::cart::mojom::HeuristicsPtr result(::cart::mojom::Heuristics::New());
  
      if (success && !input.ReadVersionNumber(&result->version_number))
        success = false;
      if (success && !input.ReadHintJsonData(&result->hint_json_data))
        success = false;
      if (success && !input.ReadGlobalJsonData(&result->global_json_data))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace cart {
namespace mojom {


void CommerceHintObserverInterceptorForTesting::OnAddToCart(const absl::optional<::GURL>& cart_url, const std::string& product_id) {
  GetForwardingInterface()->OnAddToCart(std::move(cart_url), std::move(product_id));
}
void CommerceHintObserverInterceptorForTesting::OnVisitCart() {
  GetForwardingInterface()->OnVisitCart();
}
void CommerceHintObserverInterceptorForTesting::OnCartProductUpdated(std::vector<ProductPtr> products) {
  GetForwardingInterface()->OnCartProductUpdated(std::move(products));
}
void CommerceHintObserverInterceptorForTesting::OnVisitCheckout() {
  GetForwardingInterface()->OnVisitCheckout();
}
void CommerceHintObserverInterceptorForTesting::OnPurchase() {
  GetForwardingInterface()->OnPurchase();
}
void CommerceHintObserverInterceptorForTesting::OnFormSubmit(bool is_purchase) {
  GetForwardingInterface()->OnFormSubmit(std::move(is_purchase));
}
void CommerceHintObserverInterceptorForTesting::OnWillSendRequest(bool is_addtocart) {
  GetForwardingInterface()->OnWillSendRequest(std::move(is_addtocart));
}
void CommerceHintObserverInterceptorForTesting::OnNavigation(const ::GURL& url, const std::string& version_number, OnNavigationCallback callback) {
  GetForwardingInterface()->OnNavigation(std::move(url), std::move(version_number), std::move(callback));
}
void CommerceHintObserverInterceptorForTesting::OnCartExtraction(OnCartExtractionCallback callback) {
  GetForwardingInterface()->OnCartExtraction(std::move(callback));
}
CommerceHintObserverAsyncWaiter::CommerceHintObserverAsyncWaiter(
    CommerceHintObserver* proxy) : proxy_(proxy) {}

CommerceHintObserverAsyncWaiter::~CommerceHintObserverAsyncWaiter() = default;

void CommerceHintObserverAsyncWaiter::OnNavigation(
    const ::GURL& url, const std::string& version_number, bool* out_should_skip, HeuristicsPtr* out_heuristics) {
  base::RunLoop loop;
  proxy_->OnNavigation(std::move(url),std::move(version_number),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_should_skip
,
             HeuristicsPtr* out_heuristics
,
             bool should_skip,
             HeuristicsPtr heuristics) {*out_should_skip = std::move(should_skip);*out_heuristics = std::move(heuristics);
            loop->Quit();
          },
          &loop,
          out_should_skip,
          out_heuristics));
  loop.Run();
}
void CommerceHintObserverAsyncWaiter::OnCartExtraction(
    std::string* out_product_id_json, std::string* out_cart_extraction_script) {
  base::RunLoop loop;
  proxy_->OnCartExtraction(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_product_id_json
,
             std::string* out_cart_extraction_script
,
             const std::string& product_id_json,
             const std::string& cart_extraction_script) {*out_product_id_json = std::move(product_id_json);*out_cart_extraction_script = std::move(cart_extraction_script);
            loop->Quit();
          },
          &loop,
          out_product_id_json,
          out_cart_extraction_script));
  loop.Run();
}





}  // namespace mojom
}  // namespace cart


#if defined(__clang__)
#pragma clang diagnostic pop
#endif