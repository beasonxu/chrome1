// chrome/common/draggable_regions.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/common/draggable_regions.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/common/draggable_regions.mojom-params-data.h"
#include "chrome/common/draggable_regions.mojom-shared-message-ids.h"

#include "chrome/common/draggable_regions.mojom-import-headers.h"
#include "chrome/common/draggable_regions.mojom-test-utils.h"


#ifndef CHROME_COMMON_DRAGGABLE_REGIONS_MOJOM_JUMBO_H_
#define CHROME_COMMON_DRAGGABLE_REGIONS_MOJOM_JUMBO_H_
#endif



namespace chrome {
namespace mojom {
DraggableRegion::DraggableRegion()
    : bounds(),
      draggable(false) {}

DraggableRegion::DraggableRegion(
    const ::gfx::Rect& bounds_in,
    bool draggable_in)
    : bounds(std::move(bounds_in)),
      draggable(std::move(draggable_in)) {}

DraggableRegion::~DraggableRegion() = default;

void DraggableRegion::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bounds"), this->bounds,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Rect&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "draggable"), this->draggable,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DraggableRegion::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char DraggableRegions::Name_[] = "chrome.mojom.DraggableRegions";

DraggableRegions::IPCStableHashFunction DraggableRegions::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kDraggableRegions_UpdateDraggableRegions_Name: {
      return &DraggableRegions::UpdateDraggableRegions_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* DraggableRegions::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kDraggableRegions_UpdateDraggableRegions_Name:
            return "Receive chrome::mojom::DraggableRegions::UpdateDraggableRegions";
    }
  } else {
    switch (message.name()) {
      case internal::kDraggableRegions_UpdateDraggableRegions_Name:
            return "Receive reply chrome::mojom::DraggableRegions::UpdateDraggableRegions";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t DraggableRegions::UpdateDraggableRegions_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::DraggableRegions::UpdateDraggableRegions");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

DraggableRegionsProxy::DraggableRegionsProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DraggableRegionsProxy::UpdateDraggableRegions(
    std::vector<DraggableRegionPtr> in_draggable_region) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send chrome::mojom::DraggableRegions::UpdateDraggableRegions", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("draggable_region"), in_draggable_region,
                        "<value of type std::vector<DraggableRegionPtr>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDraggableRegions_UpdateDraggableRegions_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::DraggableRegions_UpdateDraggableRegions_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->draggable_region)::BaseType>
      draggable_region_fragment(params.message());
  const mojo::internal::ContainerValidateParams draggable_region_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::chrome::mojom::DraggableRegionDataView>>(
      in_draggable_region, draggable_region_fragment, &draggable_region_validate_params);
  params->draggable_region.Set(
      draggable_region_fragment.is_null() ? nullptr : draggable_region_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->draggable_region.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null draggable_region in DraggableRegions.UpdateDraggableRegions request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DraggableRegions::Name_);
  message.set_method_name("UpdateDraggableRegions");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool DraggableRegionsStubDispatch::Accept(
    DraggableRegions* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDraggableRegions_UpdateDraggableRegions_Name: {

      DCHECK(message->is_serialized());
      internal::DraggableRegions_UpdateDraggableRegions_Params_Data* params =
          reinterpret_cast<internal::DraggableRegions_UpdateDraggableRegions_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::vector<DraggableRegionPtr> p_draggable_region{};
      DraggableRegions_UpdateDraggableRegions_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDraggableRegion(&p_draggable_region))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DraggableRegions::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->UpdateDraggableRegions(
std::move(p_draggable_region));
      return true;
    }
  }
  return false;
}

// static
bool DraggableRegionsStubDispatch::AcceptWithResponder(
    DraggableRegions* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kDraggableRegions_UpdateDraggableRegions_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDraggableRegionsValidationInfo[] = {
    {&internal::DraggableRegions_UpdateDraggableRegions_Params_Data::Validate,
     nullptr /* no response */},
};

bool DraggableRegionsRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::chrome::mojom::DraggableRegions::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDraggableRegionsValidationInfo);
}



}  // namespace mojom
}  // namespace chrome


namespace mojo {


// static
bool StructTraits<::chrome::mojom::DraggableRegion::DataView, ::chrome::mojom::DraggableRegionPtr>::Read(
    ::chrome::mojom::DraggableRegion::DataView input,
    ::chrome::mojom::DraggableRegionPtr* output) {
  bool success = true;
  ::chrome::mojom::DraggableRegionPtr result(::chrome::mojom::DraggableRegion::New());
  
      if (success && !input.ReadBounds(&result->bounds))
        success = false;
      if (success)
        result->draggable = input.draggable();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace chrome {
namespace mojom {


void DraggableRegionsInterceptorForTesting::UpdateDraggableRegions(std::vector<DraggableRegionPtr> draggable_region) {
  GetForwardingInterface()->UpdateDraggableRegions(std::move(draggable_region));
}
DraggableRegionsAsyncWaiter::DraggableRegionsAsyncWaiter(
    DraggableRegions* proxy) : proxy_(proxy) {}

DraggableRegionsAsyncWaiter::~DraggableRegionsAsyncWaiter() = default;






}  // namespace mojom
}  // namespace chrome


#if defined(__clang__)
#pragma clang diagnostic pop
#endif