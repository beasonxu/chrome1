// chrome/common/available_offline_content.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_AVAILABLE_OFFLINE_CONTENT_MOJOM_PARAMS_DATA_H_
#define CHROME_COMMON_AVAILABLE_OFFLINE_CONTENT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace chrome {
namespace mojom {
namespace internal {

class ValidationContext;
class  AvailableOfflineContentProvider_List_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<AvailableOfflineContentProvider_List_Params_Data>;

  AvailableOfflineContentProvider_List_Params_Data();
  ~AvailableOfflineContentProvider_List_Params_Data() = delete;
};
static_assert(sizeof(AvailableOfflineContentProvider_List_Params_Data) == 8,
              "Bad sizeof(AvailableOfflineContentProvider_List_Params_Data)");
class  AvailableOfflineContentProvider_List_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t list_visible_by_prefs : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::AvailableOfflineContent_Data>>> out;

 private:
  friend class mojo::internal::MessageFragment<AvailableOfflineContentProvider_List_ResponseParams_Data>;

  AvailableOfflineContentProvider_List_ResponseParams_Data();
  ~AvailableOfflineContentProvider_List_ResponseParams_Data() = delete;
};
static_assert(sizeof(AvailableOfflineContentProvider_List_ResponseParams_Data) == 24,
              "Bad sizeof(AvailableOfflineContentProvider_List_ResponseParams_Data)");
class  AvailableOfflineContentProvider_LaunchItem_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> item_id;
  mojo::internal::Pointer<mojo::internal::String_Data> name_space;

 private:
  friend class mojo::internal::MessageFragment<AvailableOfflineContentProvider_LaunchItem_Params_Data>;

  AvailableOfflineContentProvider_LaunchItem_Params_Data();
  ~AvailableOfflineContentProvider_LaunchItem_Params_Data() = delete;
};
static_assert(sizeof(AvailableOfflineContentProvider_LaunchItem_Params_Data) == 24,
              "Bad sizeof(AvailableOfflineContentProvider_LaunchItem_Params_Data)");
class  AvailableOfflineContentProvider_LaunchDownloadsPage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t open_prefetched_articles_tab : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<AvailableOfflineContentProvider_LaunchDownloadsPage_Params_Data>;

  AvailableOfflineContentProvider_LaunchDownloadsPage_Params_Data();
  ~AvailableOfflineContentProvider_LaunchDownloadsPage_Params_Data() = delete;
};
static_assert(sizeof(AvailableOfflineContentProvider_LaunchDownloadsPage_Params_Data) == 16,
              "Bad sizeof(AvailableOfflineContentProvider_LaunchDownloadsPage_Params_Data)");
class  AvailableOfflineContentProvider_ListVisibilityChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_visible : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<AvailableOfflineContentProvider_ListVisibilityChanged_Params_Data>;

  AvailableOfflineContentProvider_ListVisibilityChanged_Params_Data();
  ~AvailableOfflineContentProvider_ListVisibilityChanged_Params_Data() = delete;
};
static_assert(sizeof(AvailableOfflineContentProvider_ListVisibilityChanged_Params_Data) == 16,
              "Bad sizeof(AvailableOfflineContentProvider_ListVisibilityChanged_Params_Data)");

}  // namespace internal


class AvailableOfflineContentProvider_List_ParamsDataView {
 public:
  AvailableOfflineContentProvider_List_ParamsDataView() = default;

  AvailableOfflineContentProvider_List_ParamsDataView(
      internal::AvailableOfflineContentProvider_List_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AvailableOfflineContentProvider_List_Params_Data* data_ = nullptr;
};



class AvailableOfflineContentProvider_List_ResponseParamsDataView {
 public:
  AvailableOfflineContentProvider_List_ResponseParamsDataView() = default;

  AvailableOfflineContentProvider_List_ResponseParamsDataView(
      internal::AvailableOfflineContentProvider_List_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool list_visible_by_prefs() const {
    return data_->list_visible_by_prefs;
  }
  inline void GetOutDataView(
      mojo::ArrayDataView<AvailableOfflineContentDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOut(UserType* output) {
    
    auto* pointer = data_->out.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::chrome::mojom::AvailableOfflineContentDataView>>(
        pointer, output, message_);
  }
 private:
  internal::AvailableOfflineContentProvider_List_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AvailableOfflineContentProvider_LaunchItem_ParamsDataView {
 public:
  AvailableOfflineContentProvider_LaunchItem_ParamsDataView() = default;

  AvailableOfflineContentProvider_LaunchItem_ParamsDataView(
      internal::AvailableOfflineContentProvider_LaunchItem_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetItemIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadItemId(UserType* output) {
    
    auto* pointer = data_->item_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetNameSpaceDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNameSpace(UserType* output) {
    
    auto* pointer = data_->name_space.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::AvailableOfflineContentProvider_LaunchItem_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AvailableOfflineContentProvider_LaunchDownloadsPage_ParamsDataView {
 public:
  AvailableOfflineContentProvider_LaunchDownloadsPage_ParamsDataView() = default;

  AvailableOfflineContentProvider_LaunchDownloadsPage_ParamsDataView(
      internal::AvailableOfflineContentProvider_LaunchDownloadsPage_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool open_prefetched_articles_tab() const {
    return data_->open_prefetched_articles_tab;
  }
 private:
  internal::AvailableOfflineContentProvider_LaunchDownloadsPage_Params_Data* data_ = nullptr;
};



class AvailableOfflineContentProvider_ListVisibilityChanged_ParamsDataView {
 public:
  AvailableOfflineContentProvider_ListVisibilityChanged_ParamsDataView() = default;

  AvailableOfflineContentProvider_ListVisibilityChanged_ParamsDataView(
      internal::AvailableOfflineContentProvider_ListVisibilityChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_visible() const {
    return data_->is_visible;
  }
 private:
  internal::AvailableOfflineContentProvider_ListVisibilityChanged_Params_Data* data_ = nullptr;
};




inline void AvailableOfflineContentProvider_List_ResponseParamsDataView::GetOutDataView(
    mojo::ArrayDataView<AvailableOfflineContentDataView>* output) {
  auto pointer = data_->out.Get();
  *output = mojo::ArrayDataView<AvailableOfflineContentDataView>(pointer, message_);
}


inline void AvailableOfflineContentProvider_LaunchItem_ParamsDataView::GetItemIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->item_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void AvailableOfflineContentProvider_LaunchItem_ParamsDataView::GetNameSpaceDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name_space.Get();
  *output = mojo::StringDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_COMMON_AVAILABLE_OFFLINE_CONTENT_MOJOM_PARAMS_DATA_H_