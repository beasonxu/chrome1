// chrome/common/media/webrtc_logging.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_MEDIA_WEBRTC_LOGGING_MOJOM_PARAMS_DATA_H_
#define CHROME_COMMON_MEDIA_WEBRTC_LOGGING_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace chrome {
namespace mojom {
namespace internal {

class ValidationContext;
class  WebRtcLoggingClient_OnAddMessages_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebRtcLoggingMessage_Data>>> messages;

 private:
  friend class mojo::internal::MessageFragment<WebRtcLoggingClient_OnAddMessages_Params_Data>;

  WebRtcLoggingClient_OnAddMessages_Params_Data();
  ~WebRtcLoggingClient_OnAddMessages_Params_Data() = delete;
};
static_assert(sizeof(WebRtcLoggingClient_OnAddMessages_Params_Data) == 16,
              "Bad sizeof(WebRtcLoggingClient_OnAddMessages_Params_Data)");
class  WebRtcLoggingClient_OnStopped_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<WebRtcLoggingClient_OnStopped_Params_Data>;

  WebRtcLoggingClient_OnStopped_Params_Data();
  ~WebRtcLoggingClient_OnStopped_Params_Data() = delete;
};
static_assert(sizeof(WebRtcLoggingClient_OnStopped_Params_Data) == 8,
              "Bad sizeof(WebRtcLoggingClient_OnStopped_Params_Data)");
class  WebRtcLoggingAgent_Start_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<WebRtcLoggingAgent_Start_Params_Data>;

  WebRtcLoggingAgent_Start_Params_Data();
  ~WebRtcLoggingAgent_Start_Params_Data() = delete;
};
static_assert(sizeof(WebRtcLoggingAgent_Start_Params_Data) == 16,
              "Bad sizeof(WebRtcLoggingAgent_Start_Params_Data)");
class  WebRtcLoggingAgent_Stop_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<WebRtcLoggingAgent_Stop_Params_Data>;

  WebRtcLoggingAgent_Stop_Params_Data();
  ~WebRtcLoggingAgent_Stop_Params_Data() = delete;
};
static_assert(sizeof(WebRtcLoggingAgent_Stop_Params_Data) == 8,
              "Bad sizeof(WebRtcLoggingAgent_Stop_Params_Data)");

}  // namespace internal


class WebRtcLoggingClient_OnAddMessages_ParamsDataView {
 public:
  WebRtcLoggingClient_OnAddMessages_ParamsDataView() = default;

  WebRtcLoggingClient_OnAddMessages_ParamsDataView(
      internal::WebRtcLoggingClient_OnAddMessages_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessagesDataView(
      mojo::ArrayDataView<WebRtcLoggingMessageDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessages(UserType* output) {
    
    auto* pointer = data_->messages.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::chrome::mojom::WebRtcLoggingMessageDataView>>(
        pointer, output, message_);
  }
 private:
  internal::WebRtcLoggingClient_OnAddMessages_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebRtcLoggingClient_OnStopped_ParamsDataView {
 public:
  WebRtcLoggingClient_OnStopped_ParamsDataView() = default;

  WebRtcLoggingClient_OnStopped_ParamsDataView(
      internal::WebRtcLoggingClient_OnStopped_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WebRtcLoggingClient_OnStopped_Params_Data* data_ = nullptr;
};



class WebRtcLoggingAgent_Start_ParamsDataView {
 public:
  WebRtcLoggingAgent_Start_ParamsDataView() = default;

  WebRtcLoggingAgent_Start_ParamsDataView(
      internal::WebRtcLoggingAgent_Start_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::chrome::mojom::WebRtcLoggingClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::WebRtcLoggingAgent_Start_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebRtcLoggingAgent_Stop_ParamsDataView {
 public:
  WebRtcLoggingAgent_Stop_ParamsDataView() = default;

  WebRtcLoggingAgent_Stop_ParamsDataView(
      internal::WebRtcLoggingAgent_Stop_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WebRtcLoggingAgent_Stop_Params_Data* data_ = nullptr;
};


inline void WebRtcLoggingClient_OnAddMessages_ParamsDataView::GetMessagesDataView(
    mojo::ArrayDataView<WebRtcLoggingMessageDataView>* output) {
  auto pointer = data_->messages.Get();
  *output = mojo::ArrayDataView<WebRtcLoggingMessageDataView>(pointer, message_);
}







}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_COMMON_MEDIA_WEBRTC_LOGGING_MOJOM_PARAMS_DATA_H_