// chrome/common/media/webrtc_logging.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/common/media/webrtc_logging.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/common/media/webrtc_logging.mojom-params-data.h"
#include "chrome/common/media/webrtc_logging.mojom-shared-message-ids.h"

#include "chrome/common/media/webrtc_logging.mojom-import-headers.h"
#include "chrome/common/media/webrtc_logging.mojom-test-utils.h"


#ifndef CHROME_COMMON_MEDIA_WEBRTC_LOGGING_MOJOM_JUMBO_H_
#define CHROME_COMMON_MEDIA_WEBRTC_LOGGING_MOJOM_JUMBO_H_
#endif



namespace chrome {
namespace mojom {
WebRtcLoggingMessage::WebRtcLoggingMessage()
    : timestamp(),
      data() {}

WebRtcLoggingMessage::WebRtcLoggingMessage(
    ::base::Time timestamp_in,
    const std::string& data_in)
    : timestamp(std::move(timestamp_in)),
      data(std::move(data_in)) {}

WebRtcLoggingMessage::~WebRtcLoggingMessage() = default;

void WebRtcLoggingMessage::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "timestamp"), this->timestamp,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::Time>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "data"), this->data,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool WebRtcLoggingMessage::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char WebRtcLoggingClient::Name_[] = "chrome.mojom.WebRtcLoggingClient";

WebRtcLoggingClient::IPCStableHashFunction WebRtcLoggingClient::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kWebRtcLoggingClient_OnAddMessages_Name: {
      return &WebRtcLoggingClient::OnAddMessages_Sym::IPCStableHash;
    }
    case internal::kWebRtcLoggingClient_OnStopped_Name: {
      return &WebRtcLoggingClient::OnStopped_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* WebRtcLoggingClient::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kWebRtcLoggingClient_OnAddMessages_Name:
            return "Receive chrome::mojom::WebRtcLoggingClient::OnAddMessages";
      case internal::kWebRtcLoggingClient_OnStopped_Name:
            return "Receive chrome::mojom::WebRtcLoggingClient::OnStopped";
    }
  } else {
    switch (message.name()) {
      case internal::kWebRtcLoggingClient_OnAddMessages_Name:
            return "Receive reply chrome::mojom::WebRtcLoggingClient::OnAddMessages";
      case internal::kWebRtcLoggingClient_OnStopped_Name:
            return "Receive reply chrome::mojom::WebRtcLoggingClient::OnStopped";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t WebRtcLoggingClient::OnAddMessages_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::WebRtcLoggingClient::OnAddMessages");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebRtcLoggingClient::OnStopped_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::WebRtcLoggingClient::OnStopped");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

WebRtcLoggingClientProxy::WebRtcLoggingClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WebRtcLoggingClientProxy::OnAddMessages(
    std::vector<WebRtcLoggingMessagePtr> in_messages) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send chrome::mojom::WebRtcLoggingClient::OnAddMessages", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("messages"), in_messages,
                        "<value of type std::vector<WebRtcLoggingMessagePtr>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebRtcLoggingClient_OnAddMessages_Name, kFlags, 0, 0,
      MOJO_CREATE_MESSAGE_FLAG_UNLIMITED_SIZE, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::WebRtcLoggingClient_OnAddMessages_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->messages)::BaseType>
      messages_fragment(params.message());
  const mojo::internal::ContainerValidateParams messages_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::chrome::mojom::WebRtcLoggingMessageDataView>>(
      in_messages, messages_fragment, &messages_validate_params);
  params->messages.Set(
      messages_fragment.is_null() ? nullptr : messages_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->messages.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null messages in WebRtcLoggingClient.OnAddMessages request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebRtcLoggingClient::Name_);
  message.set_method_name("OnAddMessages");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void WebRtcLoggingClientProxy::OnStopped(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send chrome::mojom::WebRtcLoggingClient::OnStopped");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebRtcLoggingClient_OnStopped_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::WebRtcLoggingClient_OnStopped_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebRtcLoggingClient::Name_);
  message.set_method_name("OnStopped");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool WebRtcLoggingClientStubDispatch::Accept(
    WebRtcLoggingClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWebRtcLoggingClient_OnAddMessages_Name: {

      DCHECK(message->is_serialized());
      internal::WebRtcLoggingClient_OnAddMessages_Params_Data* params =
          reinterpret_cast<internal::WebRtcLoggingClient_OnAddMessages_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::vector<WebRtcLoggingMessagePtr> p_messages{};
      WebRtcLoggingClient_OnAddMessages_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadMessages(&p_messages))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebRtcLoggingClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnAddMessages(
std::move(p_messages));
      return true;
    }
    case internal::kWebRtcLoggingClient_OnStopped_Name: {

      DCHECK(message->is_serialized());
      internal::WebRtcLoggingClient_OnStopped_Params_Data* params =
          reinterpret_cast<internal::WebRtcLoggingClient_OnStopped_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      WebRtcLoggingClient_OnStopped_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebRtcLoggingClient::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnStopped();
      return true;
    }
  }
  return false;
}

// static
bool WebRtcLoggingClientStubDispatch::AcceptWithResponder(
    WebRtcLoggingClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kWebRtcLoggingClient_OnAddMessages_Name: {
      break;
    }
    case internal::kWebRtcLoggingClient_OnStopped_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kWebRtcLoggingClientValidationInfo[] = {
    {&internal::WebRtcLoggingClient_OnAddMessages_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::WebRtcLoggingClient_OnStopped_Params_Data::Validate,
     nullptr /* no response */},
};

bool WebRtcLoggingClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::chrome::mojom::WebRtcLoggingClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kWebRtcLoggingClientValidationInfo);
}

const char WebRtcLoggingAgent::Name_[] = "chrome.mojom.WebRtcLoggingAgent";

WebRtcLoggingAgent::IPCStableHashFunction WebRtcLoggingAgent::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kWebRtcLoggingAgent_Start_Name: {
      return &WebRtcLoggingAgent::Start_Sym::IPCStableHash;
    }
    case internal::kWebRtcLoggingAgent_Stop_Name: {
      return &WebRtcLoggingAgent::Stop_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* WebRtcLoggingAgent::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kWebRtcLoggingAgent_Start_Name:
            return "Receive chrome::mojom::WebRtcLoggingAgent::Start";
      case internal::kWebRtcLoggingAgent_Stop_Name:
            return "Receive chrome::mojom::WebRtcLoggingAgent::Stop";
    }
  } else {
    switch (message.name()) {
      case internal::kWebRtcLoggingAgent_Start_Name:
            return "Receive reply chrome::mojom::WebRtcLoggingAgent::Start";
      case internal::kWebRtcLoggingAgent_Stop_Name:
            return "Receive reply chrome::mojom::WebRtcLoggingAgent::Stop";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t WebRtcLoggingAgent::Start_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::WebRtcLoggingAgent::Start");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebRtcLoggingAgent::Stop_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::WebRtcLoggingAgent::Stop");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

WebRtcLoggingAgentProxy::WebRtcLoggingAgentProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WebRtcLoggingAgentProxy::Start(
    ::mojo::PendingRemote<WebRtcLoggingClient> in_client) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send chrome::mojom::WebRtcLoggingAgent::Start", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client"), in_client,
                        "<value of type ::mojo::PendingRemote<WebRtcLoggingClient>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebRtcLoggingAgent_Start_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::WebRtcLoggingAgent_Start_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::chrome::mojom::WebRtcLoggingClientInterfaceBase>>(
      in_client, &params->client, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in WebRtcLoggingAgent.Start request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebRtcLoggingAgent::Name_);
  message.set_method_name("Start");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void WebRtcLoggingAgentProxy::Stop(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send chrome::mojom::WebRtcLoggingAgent::Stop");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebRtcLoggingAgent_Stop_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::WebRtcLoggingAgent_Stop_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebRtcLoggingAgent::Name_);
  message.set_method_name("Stop");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool WebRtcLoggingAgentStubDispatch::Accept(
    WebRtcLoggingAgent* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWebRtcLoggingAgent_Start_Name: {

      DCHECK(message->is_serialized());
      internal::WebRtcLoggingAgent_Start_Params_Data* params =
          reinterpret_cast<internal::WebRtcLoggingAgent_Start_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<WebRtcLoggingClient> p_client{};
      WebRtcLoggingAgent_Start_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebRtcLoggingAgent::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Start(
std::move(p_client));
      return true;
    }
    case internal::kWebRtcLoggingAgent_Stop_Name: {

      DCHECK(message->is_serialized());
      internal::WebRtcLoggingAgent_Stop_Params_Data* params =
          reinterpret_cast<internal::WebRtcLoggingAgent_Stop_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      WebRtcLoggingAgent_Stop_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebRtcLoggingAgent::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Stop();
      return true;
    }
  }
  return false;
}

// static
bool WebRtcLoggingAgentStubDispatch::AcceptWithResponder(
    WebRtcLoggingAgent* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kWebRtcLoggingAgent_Start_Name: {
      break;
    }
    case internal::kWebRtcLoggingAgent_Stop_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kWebRtcLoggingAgentValidationInfo[] = {
    {&internal::WebRtcLoggingAgent_Start_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::WebRtcLoggingAgent_Stop_Params_Data::Validate,
     nullptr /* no response */},
};

bool WebRtcLoggingAgentRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::chrome::mojom::WebRtcLoggingAgent::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kWebRtcLoggingAgentValidationInfo);
}



}  // namespace mojom
}  // namespace chrome


namespace mojo {


// static
bool StructTraits<::chrome::mojom::WebRtcLoggingMessage::DataView, ::chrome::mojom::WebRtcLoggingMessagePtr>::Read(
    ::chrome::mojom::WebRtcLoggingMessage::DataView input,
    ::chrome::mojom::WebRtcLoggingMessagePtr* output) {
  bool success = true;
  ::chrome::mojom::WebRtcLoggingMessagePtr result(::chrome::mojom::WebRtcLoggingMessage::New());
  
      if (success && !input.ReadTimestamp(&result->timestamp))
        success = false;
      if (success && !input.ReadData(&result->data))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace chrome {
namespace mojom {


void WebRtcLoggingClientInterceptorForTesting::OnAddMessages(std::vector<WebRtcLoggingMessagePtr> messages) {
  GetForwardingInterface()->OnAddMessages(std::move(messages));
}
void WebRtcLoggingClientInterceptorForTesting::OnStopped() {
  GetForwardingInterface()->OnStopped();
}
WebRtcLoggingClientAsyncWaiter::WebRtcLoggingClientAsyncWaiter(
    WebRtcLoggingClient* proxy) : proxy_(proxy) {}

WebRtcLoggingClientAsyncWaiter::~WebRtcLoggingClientAsyncWaiter() = default;




void WebRtcLoggingAgentInterceptorForTesting::Start(::mojo::PendingRemote<WebRtcLoggingClient> client) {
  GetForwardingInterface()->Start(std::move(client));
}
void WebRtcLoggingAgentInterceptorForTesting::Stop() {
  GetForwardingInterface()->Stop();
}
WebRtcLoggingAgentAsyncWaiter::WebRtcLoggingAgentAsyncWaiter(
    WebRtcLoggingAgent* proxy) : proxy_(proxy) {}

WebRtcLoggingAgentAsyncWaiter::~WebRtcLoggingAgentAsyncWaiter() = default;






}  // namespace mojom
}  // namespace chrome


#if defined(__clang__)
#pragma clang diagnostic pop
#endif