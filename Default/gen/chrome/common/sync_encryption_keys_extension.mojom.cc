// chrome/common/sync_encryption_keys_extension.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/common/sync_encryption_keys_extension.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/common/sync_encryption_keys_extension.mojom-params-data.h"
#include "chrome/common/sync_encryption_keys_extension.mojom-shared-message-ids.h"

#include "chrome/common/sync_encryption_keys_extension.mojom-import-headers.h"
#include "chrome/common/sync_encryption_keys_extension.mojom-test-utils.h"


#ifndef CHROME_COMMON_SYNC_ENCRYPTION_KEYS_EXTENSION_MOJOM_JUMBO_H_
#define CHROME_COMMON_SYNC_ENCRYPTION_KEYS_EXTENSION_MOJOM_JUMBO_H_
#endif



namespace chrome {
namespace mojom {
const char SyncEncryptionKeysExtension::Name_[] = "chrome.mojom.SyncEncryptionKeysExtension";

SyncEncryptionKeysExtension::IPCStableHashFunction SyncEncryptionKeysExtension::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kSyncEncryptionKeysExtension_SetEncryptionKeys_Name: {
      return &SyncEncryptionKeysExtension::SetEncryptionKeys_Sym::IPCStableHash;
    }
    case internal::kSyncEncryptionKeysExtension_AddTrustedRecoveryMethod_Name: {
      return &SyncEncryptionKeysExtension::AddTrustedRecoveryMethod_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* SyncEncryptionKeysExtension::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kSyncEncryptionKeysExtension_SetEncryptionKeys_Name:
            return "Receive chrome::mojom::SyncEncryptionKeysExtension::SetEncryptionKeys";
      case internal::kSyncEncryptionKeysExtension_AddTrustedRecoveryMethod_Name:
            return "Receive chrome::mojom::SyncEncryptionKeysExtension::AddTrustedRecoveryMethod";
    }
  } else {
    switch (message.name()) {
      case internal::kSyncEncryptionKeysExtension_SetEncryptionKeys_Name:
            return "Receive reply chrome::mojom::SyncEncryptionKeysExtension::SetEncryptionKeys";
      case internal::kSyncEncryptionKeysExtension_AddTrustedRecoveryMethod_Name:
            return "Receive reply chrome::mojom::SyncEncryptionKeysExtension::AddTrustedRecoveryMethod";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t SyncEncryptionKeysExtension::SetEncryptionKeys_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::SyncEncryptionKeysExtension::SetEncryptionKeys");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SyncEncryptionKeysExtension::AddTrustedRecoveryMethod_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)chrome::mojom::SyncEncryptionKeysExtension::AddTrustedRecoveryMethod");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class SyncEncryptionKeysExtension_SetEncryptionKeys_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SyncEncryptionKeysExtension_SetEncryptionKeys_ForwardToCallback(
      SyncEncryptionKeysExtension::SetEncryptionKeysCallback callback
      ) : callback_(std::move(callback)) {
  }

  SyncEncryptionKeysExtension_SetEncryptionKeys_ForwardToCallback(const SyncEncryptionKeysExtension_SetEncryptionKeys_ForwardToCallback&) = delete;
  SyncEncryptionKeysExtension_SetEncryptionKeys_ForwardToCallback& operator=(const SyncEncryptionKeysExtension_SetEncryptionKeys_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SyncEncryptionKeysExtension::SetEncryptionKeysCallback callback_;
};

class SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ForwardToCallback(
      SyncEncryptionKeysExtension::AddTrustedRecoveryMethodCallback callback
      ) : callback_(std::move(callback)) {
  }

  SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ForwardToCallback(const SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ForwardToCallback&) = delete;
  SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ForwardToCallback& operator=(const SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SyncEncryptionKeysExtension::AddTrustedRecoveryMethodCallback callback_;
};

SyncEncryptionKeysExtensionProxy::SyncEncryptionKeysExtensionProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SyncEncryptionKeysExtensionProxy::SetEncryptionKeys(
    const std::string& in_gaia_id, const std::vector<std::vector<uint8_t>>& in_encryption_keys, int32_t in_last_key_version, SetEncryptionKeysCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send chrome::mojom::SyncEncryptionKeysExtension::SetEncryptionKeys", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("gaia_id"), in_gaia_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("encryption_keys"), in_encryption_keys,
                        "<value of type const std::vector<std::vector<uint8_t>>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("last_key_version"), in_last_key_version,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSyncEncryptionKeysExtension_SetEncryptionKeys_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::SyncEncryptionKeysExtension_SetEncryptionKeys_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->gaia_id)::BaseType> gaia_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_gaia_id, gaia_id_fragment);
  params->gaia_id.Set(
      gaia_id_fragment.is_null() ? nullptr : gaia_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->gaia_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null gaia_id in SyncEncryptionKeysExtension.SetEncryptionKeys request");
  mojo::internal::MessageFragment<
      typename decltype(params->encryption_keys)::BaseType>
      encryption_keys_fragment(params.message());
  const mojo::internal::ContainerValidateParams encryption_keys_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::ArrayDataView<mojo::ArrayDataView<uint8_t>>>(
      in_encryption_keys, encryption_keys_fragment, &encryption_keys_validate_params);
  params->encryption_keys.Set(
      encryption_keys_fragment.is_null() ? nullptr : encryption_keys_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->encryption_keys.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null encryption_keys in SyncEncryptionKeysExtension.SetEncryptionKeys request");
  params->last_key_version = in_last_key_version;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SyncEncryptionKeysExtension::Name_);
  message.set_method_name("SetEncryptionKeys");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SyncEncryptionKeysExtension_SetEncryptionKeys_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SyncEncryptionKeysExtensionProxy::AddTrustedRecoveryMethod(
    const std::string& in_gaia_id, const std::vector<uint8_t>& in_public_key, int32_t in_method_type_hint, AddTrustedRecoveryMethodCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send chrome::mojom::SyncEncryptionKeysExtension::AddTrustedRecoveryMethod", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("gaia_id"), in_gaia_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("public_key"), in_public_key,
                        "<value of type const std::vector<uint8_t>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("method_type_hint"), in_method_type_hint,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSyncEncryptionKeysExtension_AddTrustedRecoveryMethod_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->gaia_id)::BaseType> gaia_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_gaia_id, gaia_id_fragment);
  params->gaia_id.Set(
      gaia_id_fragment.is_null() ? nullptr : gaia_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->gaia_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null gaia_id in SyncEncryptionKeysExtension.AddTrustedRecoveryMethod request");
  mojo::internal::MessageFragment<
      typename decltype(params->public_key)::BaseType>
      public_key_fragment(params.message());
  const mojo::internal::ContainerValidateParams public_key_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      in_public_key, public_key_fragment, &public_key_validate_params);
  params->public_key.Set(
      public_key_fragment.is_null() ? nullptr : public_key_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->public_key.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null public_key in SyncEncryptionKeysExtension.AddTrustedRecoveryMethod request");
  params->method_type_hint = in_method_type_hint;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SyncEncryptionKeysExtension::Name_);
  message.set_method_name("AddTrustedRecoveryMethod");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class SyncEncryptionKeysExtension_SetEncryptionKeys_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SyncEncryptionKeysExtension::SetEncryptionKeysCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SyncEncryptionKeysExtension_SetEncryptionKeys_ProxyToResponder> proxy(
        new SyncEncryptionKeysExtension_SetEncryptionKeys_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SyncEncryptionKeysExtension_SetEncryptionKeys_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SyncEncryptionKeysExtension_SetEncryptionKeys_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SyncEncryptionKeysExtension_SetEncryptionKeys_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SyncEncryptionKeysExtension::SetEncryptionKeysCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool SyncEncryptionKeysExtension_SetEncryptionKeys_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SyncEncryptionKeysExtension_SetEncryptionKeys_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SyncEncryptionKeysExtension_SetEncryptionKeys_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  SyncEncryptionKeysExtension_SetEncryptionKeys_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SyncEncryptionKeysExtension::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void SyncEncryptionKeysExtension_SetEncryptionKeys_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply chrome::mojom::SyncEncryptionKeysExtension::SetEncryptionKeys");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSyncEncryptionKeysExtension_SetEncryptionKeys_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::SyncEncryptionKeysExtension_SetEncryptionKeys_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SyncEncryptionKeysExtension::Name_);
  message.set_method_name("SetEncryptionKeys");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SyncEncryptionKeysExtension::AddTrustedRecoveryMethodCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ProxyToResponder> proxy(
        new SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SyncEncryptionKeysExtension::AddTrustedRecoveryMethodCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SyncEncryptionKeysExtension::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply chrome::mojom::SyncEncryptionKeysExtension::AddTrustedRecoveryMethod");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSyncEncryptionKeysExtension_AddTrustedRecoveryMethod_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::chrome::mojom::internal::SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SyncEncryptionKeysExtension::Name_);
  message.set_method_name("AddTrustedRecoveryMethod");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool SyncEncryptionKeysExtensionStubDispatch::Accept(
    SyncEncryptionKeysExtension* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSyncEncryptionKeysExtension_SetEncryptionKeys_Name: {
      break;
    }
    case internal::kSyncEncryptionKeysExtension_AddTrustedRecoveryMethod_Name: {
      break;
    }
  }
  return false;
}

// static
bool SyncEncryptionKeysExtensionStubDispatch::AcceptWithResponder(
    SyncEncryptionKeysExtension* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kSyncEncryptionKeysExtension_SetEncryptionKeys_Name: {

      internal::SyncEncryptionKeysExtension_SetEncryptionKeys_Params_Data* params =
          reinterpret_cast<
              internal::SyncEncryptionKeysExtension_SetEncryptionKeys_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_gaia_id{};
      std::vector<std::vector<uint8_t>> p_encryption_keys{};
      int32_t p_last_key_version{};
      SyncEncryptionKeysExtension_SetEncryptionKeys_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadGaiaId(&p_gaia_id))
        success = false;
      if (success && !input_data_view.ReadEncryptionKeys(&p_encryption_keys))
        success = false;
      if (success)
        p_last_key_version = input_data_view.last_key_version();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SyncEncryptionKeysExtension::Name_, 0, false);
        return false;
      }
      SyncEncryptionKeysExtension::SetEncryptionKeysCallback callback =
          SyncEncryptionKeysExtension_SetEncryptionKeys_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetEncryptionKeys(
std::move(p_gaia_id), 
std::move(p_encryption_keys), 
std::move(p_last_key_version), std::move(callback));
      return true;
    }
    case internal::kSyncEncryptionKeysExtension_AddTrustedRecoveryMethod_Name: {

      internal::SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_Params_Data* params =
          reinterpret_cast<
              internal::SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_gaia_id{};
      std::vector<uint8_t> p_public_key{};
      int32_t p_method_type_hint{};
      SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadGaiaId(&p_gaia_id))
        success = false;
      if (success && !input_data_view.ReadPublicKey(&p_public_key))
        success = false;
      if (success)
        p_method_type_hint = input_data_view.method_type_hint();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SyncEncryptionKeysExtension::Name_, 1, false);
        return false;
      }
      SyncEncryptionKeysExtension::AddTrustedRecoveryMethodCallback callback =
          SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddTrustedRecoveryMethod(
std::move(p_gaia_id), 
std::move(p_public_key), 
std::move(p_method_type_hint), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSyncEncryptionKeysExtensionValidationInfo[] = {
    {&internal::SyncEncryptionKeysExtension_SetEncryptionKeys_Params_Data::Validate,
     &internal::SyncEncryptionKeysExtension_SetEncryptionKeys_ResponseParams_Data::Validate},
    {&internal::SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_Params_Data::Validate,
     &internal::SyncEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams_Data::Validate},
};

bool SyncEncryptionKeysExtensionRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::chrome::mojom::SyncEncryptionKeysExtension::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSyncEncryptionKeysExtensionValidationInfo);
}

bool SyncEncryptionKeysExtensionResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::chrome::mojom::SyncEncryptionKeysExtension::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kSyncEncryptionKeysExtensionValidationInfo);
}


}  // namespace mojom
}  // namespace chrome


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace chrome {
namespace mojom {


void SyncEncryptionKeysExtensionInterceptorForTesting::SetEncryptionKeys(const std::string& gaia_id, const std::vector<std::vector<uint8_t>>& encryption_keys, int32_t last_key_version, SetEncryptionKeysCallback callback) {
  GetForwardingInterface()->SetEncryptionKeys(std::move(gaia_id), std::move(encryption_keys), std::move(last_key_version), std::move(callback));
}
void SyncEncryptionKeysExtensionInterceptorForTesting::AddTrustedRecoveryMethod(const std::string& gaia_id, const std::vector<uint8_t>& public_key, int32_t method_type_hint, AddTrustedRecoveryMethodCallback callback) {
  GetForwardingInterface()->AddTrustedRecoveryMethod(std::move(gaia_id), std::move(public_key), std::move(method_type_hint), std::move(callback));
}
SyncEncryptionKeysExtensionAsyncWaiter::SyncEncryptionKeysExtensionAsyncWaiter(
    SyncEncryptionKeysExtension* proxy) : proxy_(proxy) {}

SyncEncryptionKeysExtensionAsyncWaiter::~SyncEncryptionKeysExtensionAsyncWaiter() = default;

void SyncEncryptionKeysExtensionAsyncWaiter::SetEncryptionKeys(
    const std::string& gaia_id, const std::vector<std::vector<uint8_t>>& encryption_keys, int32_t last_key_version) {
  base::RunLoop loop;
  proxy_->SetEncryptionKeys(std::move(gaia_id),std::move(encryption_keys),std::move(last_key_version),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void SyncEncryptionKeysExtensionAsyncWaiter::AddTrustedRecoveryMethod(
    const std::string& gaia_id, const std::vector<uint8_t>& public_key, int32_t method_type_hint) {
  base::RunLoop loop;
  proxy_->AddTrustedRecoveryMethod(std::move(gaia_id),std::move(public_key),std::move(method_type_hint),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}





}  // namespace mojom
}  // namespace chrome


#if defined(__clang__)
#pragma clang diagnostic pop
#endif