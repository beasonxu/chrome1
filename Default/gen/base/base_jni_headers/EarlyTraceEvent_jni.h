// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/EarlyTraceEvent

#ifndef org_chromium_base_EarlyTraceEvent_JNI
#define org_chromium_base_EarlyTraceEvent_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_EarlyTraceEvent[];
const char kClassPath_org_chromium_base_EarlyTraceEvent[] = "org/chromium/base/EarlyTraceEvent";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_base_EarlyTraceEvent_clazz(nullptr);
#ifndef org_chromium_base_EarlyTraceEvent_clazz_defined
#define org_chromium_base_EarlyTraceEvent_clazz_defined
inline jclass org_chromium_base_EarlyTraceEvent_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_EarlyTraceEvent,
      &g_org_chromium_base_EarlyTraceEvent_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static void JNI_EarlyTraceEvent_RecordEarlyBeginEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_GENERATOR_EXPORT void Java_J_N_MrWG2uUW(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  return JNI_EarlyTraceEvent_RecordEarlyBeginEvent(env, base::android::JavaParamRef<jstring>(env,
      name), timeNanos, threadId, threadMillis);
}

static void JNI_EarlyTraceEvent_RecordEarlyEndEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_GENERATOR_EXPORT void Java_J_N_MmyrhqXB(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  return JNI_EarlyTraceEvent_RecordEarlyEndEvent(env, base::android::JavaParamRef<jstring>(env,
      name), timeNanos, threadId, threadMillis);
}

static void JNI_EarlyTraceEvent_RecordEarlyToplevelBeginEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_GENERATOR_EXPORT void Java_J_N_M7UXCmoq(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  return JNI_EarlyTraceEvent_RecordEarlyToplevelBeginEvent(env,
      base::android::JavaParamRef<jstring>(env, name), timeNanos, threadId, threadMillis);
}

static void JNI_EarlyTraceEvent_RecordEarlyToplevelEndEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_GENERATOR_EXPORT void Java_J_N_MRlw2LEn(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  return JNI_EarlyTraceEvent_RecordEarlyToplevelEndEvent(env,
      base::android::JavaParamRef<jstring>(env, name), timeNanos, threadId, threadMillis);
}

static void JNI_EarlyTraceEvent_RecordEarlyAsyncBeginEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong id,
    jlong timeNanos);

JNI_GENERATOR_EXPORT void Java_J_N_M_1Gv8TwM(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id,
    jlong timeNanos) {
  return JNI_EarlyTraceEvent_RecordEarlyAsyncBeginEvent(env,
      base::android::JavaParamRef<jstring>(env, name), id, timeNanos);
}

static void JNI_EarlyTraceEvent_RecordEarlyAsyncEndEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong id,
    jlong timeNanos);

JNI_GENERATOR_EXPORT void Java_J_N_MrKsqeCD(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id,
    jlong timeNanos) {
  return JNI_EarlyTraceEvent_RecordEarlyAsyncEndEvent(env, base::android::JavaParamRef<jstring>(env,
      name), id, timeNanos);
}


static std::atomic<jmethodID>
    g_org_chromium_base_EarlyTraceEvent_setBackgroundStartupTracingFlag(nullptr);
static void Java_EarlyTraceEvent_setBackgroundStartupTracingFlag(JNIEnv* env, jboolean enabled) {
  jclass clazz = org_chromium_base_EarlyTraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_EarlyTraceEvent_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setBackgroundStartupTracingFlag",
          "(Z)V",
          &g_org_chromium_base_EarlyTraceEvent_setBackgroundStartupTracingFlag);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, enabled);
}

static std::atomic<jmethodID>
    g_org_chromium_base_EarlyTraceEvent_getBackgroundStartupTracingFlag(nullptr);
static jboolean Java_EarlyTraceEvent_getBackgroundStartupTracingFlag(JNIEnv* env) {
  jclass clazz = org_chromium_base_EarlyTraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_EarlyTraceEvent_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getBackgroundStartupTracingFlag",
          "()Z",
          &g_org_chromium_base_EarlyTraceEvent_getBackgroundStartupTracingFlag);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

}  // namespace android
}  // namespace base

#endif  // org_chromium_base_EarlyTraceEvent_JNI
