// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/metrics/NativeUmaRecorder

#ifndef org_chromium_base_metrics_NativeUmaRecorder_JNI
#define org_chromium_base_metrics_NativeUmaRecorder_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static jlong JNI_NativeUmaRecorder_RecordBooleanHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jboolean sample);

JNI_GENERATOR_EXPORT jlong Java_J_N_MtKTTHie(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jboolean sample) {
  return JNI_NativeUmaRecorder_RecordBooleanHistogram(env, base::android::JavaParamRef<jstring>(env,
      name), nativeHint, sample);
}

static jlong JNI_NativeUmaRecorder_RecordExponentialHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets);

JNI_GENERATOR_EXPORT jlong Java_J_N_MILRV9Ch(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets) {
  return JNI_NativeUmaRecorder_RecordExponentialHistogram(env,
      base::android::JavaParamRef<jstring>(env, name), nativeHint, sample, min, max, numBuckets);
}

static jlong JNI_NativeUmaRecorder_RecordLinearHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets);

JNI_GENERATOR_EXPORT jlong Java_J_N_M_00024oMD214(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets) {
  return JNI_NativeUmaRecorder_RecordLinearHistogram(env, base::android::JavaParamRef<jstring>(env,
      name), nativeHint, sample, min, max, numBuckets);
}

static jlong JNI_NativeUmaRecorder_RecordSparseHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jint sample);

JNI_GENERATOR_EXPORT jlong Java_J_N_Mk1ai9mx(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jint sample) {
  return JNI_NativeUmaRecorder_RecordSparseHistogram(env, base::android::JavaParamRef<jstring>(env,
      name), nativeHint, sample);
}

static void JNI_NativeUmaRecorder_RecordUserAction(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong millisSinceEvent);

JNI_GENERATOR_EXPORT void Java_J_N_MTDsfZGe(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong millisSinceEvent) {
  return JNI_NativeUmaRecorder_RecordUserAction(env, base::android::JavaParamRef<jstring>(env,
      name), millisSinceEvent);
}

static jint JNI_NativeUmaRecorder_GetHistogramValueCountForTesting(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jint sample,
    jlong snapshotPtr);

JNI_GENERATOR_EXPORT jint Java_J_N_M_11WxmXI_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jint sample,
    jlong snapshotPtr) {
  return JNI_NativeUmaRecorder_GetHistogramValueCountForTesting(env,
      base::android::JavaParamRef<jstring>(env, name), sample, snapshotPtr);
}

static jint JNI_NativeUmaRecorder_GetHistogramTotalCountForTesting(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong snapshotPtr);

JNI_GENERATOR_EXPORT jint Java_J_N_MP_00024RSyC4_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong snapshotPtr) {
  return JNI_NativeUmaRecorder_GetHistogramTotalCountForTesting(env,
      base::android::JavaParamRef<jstring>(env, name), snapshotPtr);
}

static jlong JNI_NativeUmaRecorder_CreateHistogramSnapshotForTesting(JNIEnv* env);

JNI_GENERATOR_EXPORT jlong Java_J_N_MlZcyPle_1ForTesting(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_NativeUmaRecorder_CreateHistogramSnapshotForTesting(env);
}

static void JNI_NativeUmaRecorder_DestroyHistogramSnapshotForTesting(JNIEnv* env, jlong
    snapshotPtr);

JNI_GENERATOR_EXPORT void Java_J_N_MqHgOQAN_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong snapshotPtr) {
  return JNI_NativeUmaRecorder_DestroyHistogramSnapshotForTesting(env, snapshotPtr);
}

static jlong JNI_NativeUmaRecorder_AddActionCallbackForTesting(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT jlong Java_J_N_MEfoV_00024c9_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject callback) {
  return JNI_NativeUmaRecorder_AddActionCallbackForTesting(env,
      base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_NativeUmaRecorder_RemoveActionCallbackForTesting(JNIEnv* env, jlong callbackId);

JNI_GENERATOR_EXPORT void Java_J_N_MUBbgum1_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong callbackId) {
  return JNI_NativeUmaRecorder_RemoveActionCallbackForTesting(env, callbackId);
}


}  // namespace android
}  // namespace base

#endif  // org_chromium_base_metrics_NativeUmaRecorder_JNI
