// device/vr/public/mojom/isolated_xr_service.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "device/vr/public/mojom/isolated_xr_service.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "device/vr/public/mojom/isolated_xr_service.mojom-params-data.h"
#include "device/vr/public/mojom/isolated_xr_service.mojom-shared-message-ids.h"

#include "device/vr/public/mojom/isolated_xr_service.mojom-import-headers.h"
#include "device/vr/public/mojom/isolated_xr_service.mojom-test-utils.h"


#ifndef DEVICE_VR_PUBLIC_MOJOM_ISOLATED_XR_SERVICE_MOJOM_JUMBO_H_
#define DEVICE_VR_PUBLIC_MOJOM_ISOLATED_XR_SERVICE_MOJOM_JUMBO_H_
#endif



namespace device {
namespace mojom {
XRRuntimeSessionOptions::XRRuntimeSessionOptions()
    : mode(),
      required_features(),
      optional_features(),
      render_process_id(),
      render_frame_id(),
      tracked_images(),
      depth_options(),
      trace_id() {}

XRRuntimeSessionOptions::XRRuntimeSessionOptions(
    ::device::mojom::XRSessionMode mode_in,
    std::vector<::device::mojom::XRSessionFeature> required_features_in,
    std::vector<::device::mojom::XRSessionFeature> optional_features_in,
    int32_t render_process_id_in,
    int32_t render_frame_id_in,
    std::vector<::device::mojom::XRTrackedImagePtr> tracked_images_in,
    ::device::mojom::XRDepthOptionsPtr depth_options_in,
    uint64_t trace_id_in)
    : mode(std::move(mode_in)),
      required_features(std::move(required_features_in)),
      optional_features(std::move(optional_features_in)),
      render_process_id(std::move(render_process_id_in)),
      render_frame_id(std::move(render_frame_id_in)),
      tracked_images(std::move(tracked_images_in)),
      depth_options(std::move(depth_options_in)),
      trace_id(std::move(trace_id_in)) {}

XRRuntimeSessionOptions::~XRRuntimeSessionOptions() = default;

void XRRuntimeSessionOptions::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "mode"), this->mode,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::device::mojom::XRSessionMode>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "required_features"), this->required_features,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::device::mojom::XRSessionFeature>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "optional_features"), this->optional_features,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::device::mojom::XRSessionFeature>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "render_process_id"), this->render_process_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "render_frame_id"), this->render_frame_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "tracked_images"), this->tracked_images,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<::device::mojom::XRTrackedImagePtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "depth_options"), this->depth_options,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::device::mojom::XRDepthOptionsPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "trace_id"), this->trace_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool XRRuntimeSessionOptions::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
XRRuntimeSessionResult::XRRuntimeSessionResult()
    : controller(),
      session(),
      frame_sink_id() {}

XRRuntimeSessionResult::XRRuntimeSessionResult(
    ::mojo::PendingRemote<XRSessionController> controller_in,
    ::device::mojom::XRSessionPtr session_in,
    const absl::optional<::viz::FrameSinkId>& frame_sink_id_in)
    : controller(std::move(controller_in)),
      session(std::move(session_in)),
      frame_sink_id(std::move(frame_sink_id_in)) {}

XRRuntimeSessionResult::~XRRuntimeSessionResult() = default;

void XRRuntimeSessionResult::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "controller"), this->controller,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<XRSessionController>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "session"), this->session,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::device::mojom::XRSessionPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "frame_sink_id"), this->frame_sink_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::viz::FrameSinkId>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool XRRuntimeSessionResult::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
XRRenderInfo::XRRenderInfo()
    : frame_id(),
      mojo_from_viewer(),
      views() {}

XRRenderInfo::XRRenderInfo(
    int16_t frame_id_in,
    ::device::mojom::VRPosePtr mojo_from_viewer_in,
    std::vector<::device::mojom::XRViewPtr> views_in)
    : frame_id(std::move(frame_id_in)),
      mojo_from_viewer(std::move(mojo_from_viewer_in)),
      views(std::move(views_in)) {}

XRRenderInfo::~XRRenderInfo() = default;

void XRRenderInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "frame_id"), this->frame_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int16_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "mojo_from_viewer"), this->mojo_from_viewer,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::device::mojom::VRPosePtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "views"), this->views,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<::device::mojom::XRViewPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool XRRenderInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
XRDeviceData::XRDeviceData()
    : supported_features(),
      is_ar_blend_mode_supported() {}

XRDeviceData::XRDeviceData(
    std::vector<::device::mojom::XRSessionFeature> supported_features_in,
    bool is_ar_blend_mode_supported_in)
    : supported_features(std::move(supported_features_in)),
      is_ar_blend_mode_supported(std::move(is_ar_blend_mode_supported_in)) {}

XRDeviceData::~XRDeviceData() = default;

void XRDeviceData::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "supported_features"), this->supported_features,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::device::mojom::XRSessionFeature>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_ar_blend_mode_supported"), this->is_ar_blend_mode_supported,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool XRDeviceData::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char XRSessionController::Name_[] = "device.mojom.XRSessionController";

XRSessionController::IPCStableHashFunction XRSessionController::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kXRSessionController_SetFrameDataRestricted_Name: {
      return &XRSessionController::SetFrameDataRestricted_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* XRSessionController::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kXRSessionController_SetFrameDataRestricted_Name:
            return "Receive device::mojom::XRSessionController::SetFrameDataRestricted";
    }
  } else {
    switch (message.name()) {
      case internal::kXRSessionController_SetFrameDataRestricted_Name:
            return "Receive reply device::mojom::XRSessionController::SetFrameDataRestricted";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t XRSessionController::SetFrameDataRestricted_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::XRSessionController::SetFrameDataRestricted");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

XRSessionControllerProxy::XRSessionControllerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void XRSessionControllerProxy::SetFrameDataRestricted(
    bool in_restricted) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::XRSessionController::SetFrameDataRestricted", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("restricted"), in_restricted,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRSessionController_SetFrameDataRestricted_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRSessionController_SetFrameDataRestricted_Params_Data> params(
          message);
  params.Allocate();
  params->restricted = in_restricted;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRSessionController::Name_);
  message.set_method_name("SetFrameDataRestricted");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool XRSessionControllerStubDispatch::Accept(
    XRSessionController* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kXRSessionController_SetFrameDataRestricted_Name: {

      DCHECK(message->is_serialized());
      internal::XRSessionController_SetFrameDataRestricted_Params_Data* params =
          reinterpret_cast<internal::XRSessionController_SetFrameDataRestricted_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_restricted{};
      XRSessionController_SetFrameDataRestricted_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_restricted = input_data_view.restricted();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            XRSessionController::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetFrameDataRestricted(
std::move(p_restricted));
      return true;
    }
  }
  return false;
}

// static
bool XRSessionControllerStubDispatch::AcceptWithResponder(
    XRSessionController* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kXRSessionController_SetFrameDataRestricted_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kXRSessionControllerValidationInfo[] = {
    {&internal::XRSessionController_SetFrameDataRestricted_Params_Data::Validate,
     nullptr /* no response */},
};

bool XRSessionControllerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::XRSessionController::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kXRSessionControllerValidationInfo);
}

const char XRRuntimeEventListener::Name_[] = "device.mojom.XRRuntimeEventListener";

XRRuntimeEventListener::IPCStableHashFunction XRRuntimeEventListener::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kXRRuntimeEventListener_OnVisibilityStateChanged_Name: {
      return &XRRuntimeEventListener::OnVisibilityStateChanged_Sym::IPCStableHash;
    }
    case internal::kXRRuntimeEventListener_OnExitPresent_Name: {
      return &XRRuntimeEventListener::OnExitPresent_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* XRRuntimeEventListener::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kXRRuntimeEventListener_OnVisibilityStateChanged_Name:
            return "Receive device::mojom::XRRuntimeEventListener::OnVisibilityStateChanged";
      case internal::kXRRuntimeEventListener_OnExitPresent_Name:
            return "Receive device::mojom::XRRuntimeEventListener::OnExitPresent";
    }
  } else {
    switch (message.name()) {
      case internal::kXRRuntimeEventListener_OnVisibilityStateChanged_Name:
            return "Receive reply device::mojom::XRRuntimeEventListener::OnVisibilityStateChanged";
      case internal::kXRRuntimeEventListener_OnExitPresent_Name:
            return "Receive reply device::mojom::XRRuntimeEventListener::OnExitPresent";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t XRRuntimeEventListener::OnVisibilityStateChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::XRRuntimeEventListener::OnVisibilityStateChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t XRRuntimeEventListener::OnExitPresent_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::XRRuntimeEventListener::OnExitPresent");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

XRRuntimeEventListenerProxy::XRRuntimeEventListenerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void XRRuntimeEventListenerProxy::OnVisibilityStateChanged(
    ::device::mojom::XRVisibilityState in_visibility_state) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::XRRuntimeEventListener::OnVisibilityStateChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("visibility_state"), in_visibility_state,
                        "<value of type ::device::mojom::XRVisibilityState>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRRuntimeEventListener_OnVisibilityStateChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::device::mojom::XRVisibilityState>(
      in_visibility_state, &params->visibility_state);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRRuntimeEventListener::Name_);
  message.set_method_name("OnVisibilityStateChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void XRRuntimeEventListenerProxy::OnExitPresent(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send device::mojom::XRRuntimeEventListener::OnExitPresent");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRRuntimeEventListener_OnExitPresent_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRRuntimeEventListener_OnExitPresent_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRRuntimeEventListener::Name_);
  message.set_method_name("OnExitPresent");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool XRRuntimeEventListenerStubDispatch::Accept(
    XRRuntimeEventListener* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kXRRuntimeEventListener_OnVisibilityStateChanged_Name: {

      DCHECK(message->is_serialized());
      internal::XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data* params =
          reinterpret_cast<internal::XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::device::mojom::XRVisibilityState p_visibility_state{};
      XRRuntimeEventListener_OnVisibilityStateChanged_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadVisibilityState(&p_visibility_state))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            XRRuntimeEventListener::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnVisibilityStateChanged(
std::move(p_visibility_state));
      return true;
    }
    case internal::kXRRuntimeEventListener_OnExitPresent_Name: {

      DCHECK(message->is_serialized());
      internal::XRRuntimeEventListener_OnExitPresent_Params_Data* params =
          reinterpret_cast<internal::XRRuntimeEventListener_OnExitPresent_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      XRRuntimeEventListener_OnExitPresent_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            XRRuntimeEventListener::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnExitPresent();
      return true;
    }
  }
  return false;
}

// static
bool XRRuntimeEventListenerStubDispatch::AcceptWithResponder(
    XRRuntimeEventListener* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kXRRuntimeEventListener_OnVisibilityStateChanged_Name: {
      break;
    }
    case internal::kXRRuntimeEventListener_OnExitPresent_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kXRRuntimeEventListenerValidationInfo[] = {
    {&internal::XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::XRRuntimeEventListener_OnExitPresent_Params_Data::Validate,
     nullptr /* no response */},
};

bool XRRuntimeEventListenerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::XRRuntimeEventListener::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kXRRuntimeEventListenerValidationInfo);
}

const char XRRuntime::Name_[] = "device.mojom.XRRuntime";

XRRuntime::IPCStableHashFunction XRRuntime::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kXRRuntime_RequestSession_Name: {
      return &XRRuntime::RequestSession_Sym::IPCStableHash;
    }
    case internal::kXRRuntime_ShutdownSession_Name: {
      return &XRRuntime::ShutdownSession_Sym::IPCStableHash;
    }
    case internal::kXRRuntime_ListenToDeviceChanges_Name: {
      return &XRRuntime::ListenToDeviceChanges_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* XRRuntime::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kXRRuntime_RequestSession_Name:
            return "Receive device::mojom::XRRuntime::RequestSession";
      case internal::kXRRuntime_ShutdownSession_Name:
            return "Receive device::mojom::XRRuntime::ShutdownSession";
      case internal::kXRRuntime_ListenToDeviceChanges_Name:
            return "Receive device::mojom::XRRuntime::ListenToDeviceChanges";
    }
  } else {
    switch (message.name()) {
      case internal::kXRRuntime_RequestSession_Name:
            return "Receive reply device::mojom::XRRuntime::RequestSession";
      case internal::kXRRuntime_ShutdownSession_Name:
            return "Receive reply device::mojom::XRRuntime::ShutdownSession";
      case internal::kXRRuntime_ListenToDeviceChanges_Name:
            return "Receive reply device::mojom::XRRuntime::ListenToDeviceChanges";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t XRRuntime::RequestSession_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::XRRuntime::RequestSession");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t XRRuntime::ShutdownSession_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::XRRuntime::ShutdownSession");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t XRRuntime::ListenToDeviceChanges_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::XRRuntime::ListenToDeviceChanges");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class XRRuntime_RequestSession_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  XRRuntime_RequestSession_ForwardToCallback(
      XRRuntime::RequestSessionCallback callback
      ) : callback_(std::move(callback)) {
  }

  XRRuntime_RequestSession_ForwardToCallback(const XRRuntime_RequestSession_ForwardToCallback&) = delete;
  XRRuntime_RequestSession_ForwardToCallback& operator=(const XRRuntime_RequestSession_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  XRRuntime::RequestSessionCallback callback_;
};

class XRRuntime_ShutdownSession_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  XRRuntime_ShutdownSession_ForwardToCallback(
      XRRuntime::ShutdownSessionCallback callback
      ) : callback_(std::move(callback)) {
  }

  XRRuntime_ShutdownSession_ForwardToCallback(const XRRuntime_ShutdownSession_ForwardToCallback&) = delete;
  XRRuntime_ShutdownSession_ForwardToCallback& operator=(const XRRuntime_ShutdownSession_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  XRRuntime::ShutdownSessionCallback callback_;
};

XRRuntimeProxy::XRRuntimeProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void XRRuntimeProxy::RequestSession(
    XRRuntimeSessionOptionsPtr in_options, RequestSessionCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::XRRuntime::RequestSession", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("options"), in_options,
                        "<value of type XRRuntimeSessionOptionsPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRRuntime_RequestSession_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRRuntime_RequestSession_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->options)::BaseType> options_fragment(
          params.message());
  mojo::internal::Serialize<::device::mojom::XRRuntimeSessionOptionsDataView>(
      in_options, options_fragment);
  params->options.Set(
      options_fragment.is_null() ? nullptr : options_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->options.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null options in XRRuntime.RequestSession request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRRuntime::Name_);
  message.set_method_name("RequestSession");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new XRRuntime_RequestSession_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void XRRuntimeProxy::ShutdownSession(
    ShutdownSessionCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send device::mojom::XRRuntime::ShutdownSession");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRRuntime_ShutdownSession_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRRuntime_ShutdownSession_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRRuntime::Name_);
  message.set_method_name("ShutdownSession");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new XRRuntime_ShutdownSession_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void XRRuntimeProxy::ListenToDeviceChanges(
    ::mojo::PendingAssociatedRemote<XRRuntimeEventListener> in_listener) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::XRRuntime::ListenToDeviceChanges", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("listener"), in_listener,
                        "<value of type ::mojo::PendingAssociatedRemote<XRRuntimeEventListener>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRRuntime_ListenToDeviceChanges_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRRuntime_ListenToDeviceChanges_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::device::mojom::XRRuntimeEventListenerAssociatedPtrInfoDataView>(
      in_listener, &params->listener, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->listener),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid listener in XRRuntime.ListenToDeviceChanges request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRRuntime::Name_);
  message.set_method_name("ListenToDeviceChanges");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class XRRuntime_RequestSession_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static XRRuntime::RequestSessionCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<XRRuntime_RequestSession_ProxyToResponder> proxy(
        new XRRuntime_RequestSession_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&XRRuntime_RequestSession_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~XRRuntime_RequestSession_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  XRRuntime_RequestSession_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "XRRuntime::RequestSessionCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      XRRuntimeSessionResultPtr in_session);
};

bool XRRuntime_RequestSession_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::XRRuntime_RequestSession_ResponseParams_Data* params =
      reinterpret_cast<
          internal::XRRuntime_RequestSession_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  XRRuntimeSessionResultPtr p_session{};
  XRRuntime_RequestSession_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadSession(&p_session))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        XRRuntime::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_session));
  return true;
}

void XRRuntime_RequestSession_ProxyToResponder::Run(
    XRRuntimeSessionResultPtr in_session) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply device::mojom::XRRuntime::RequestSession", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("session"), in_session,
                        "<value of type XRRuntimeSessionResultPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRRuntime_RequestSession_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRRuntime_RequestSession_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->session)::BaseType> session_fragment(
          params.message());
  mojo::internal::Serialize<::device::mojom::XRRuntimeSessionResultDataView>(
      in_session, session_fragment);
  params->session.Set(
      session_fragment.is_null() ? nullptr : session_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRRuntime::Name_);
  message.set_method_name("RequestSession");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class XRRuntime_ShutdownSession_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static XRRuntime::ShutdownSessionCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<XRRuntime_ShutdownSession_ProxyToResponder> proxy(
        new XRRuntime_ShutdownSession_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&XRRuntime_ShutdownSession_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~XRRuntime_ShutdownSession_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  XRRuntime_ShutdownSession_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "XRRuntime::ShutdownSessionCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool XRRuntime_ShutdownSession_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::XRRuntime_ShutdownSession_ResponseParams_Data* params =
      reinterpret_cast<
          internal::XRRuntime_ShutdownSession_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  XRRuntime_ShutdownSession_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        XRRuntime::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void XRRuntime_ShutdownSession_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply device::mojom::XRRuntime::ShutdownSession");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRRuntime_ShutdownSession_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRRuntime_ShutdownSession_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRRuntime::Name_);
  message.set_method_name("ShutdownSession");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool XRRuntimeStubDispatch::Accept(
    XRRuntime* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kXRRuntime_RequestSession_Name: {
      break;
    }
    case internal::kXRRuntime_ShutdownSession_Name: {
      break;
    }
    case internal::kXRRuntime_ListenToDeviceChanges_Name: {

      DCHECK(message->is_serialized());
      internal::XRRuntime_ListenToDeviceChanges_Params_Data* params =
          reinterpret_cast<internal::XRRuntime_ListenToDeviceChanges_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedRemote<XRRuntimeEventListener> p_listener{};
      XRRuntime_ListenToDeviceChanges_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_listener =
            input_data_view.TakeListener<decltype(p_listener)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            XRRuntime::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ListenToDeviceChanges(
std::move(p_listener));
      return true;
    }
  }
  return false;
}

// static
bool XRRuntimeStubDispatch::AcceptWithResponder(
    XRRuntime* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kXRRuntime_RequestSession_Name: {

      internal::XRRuntime_RequestSession_Params_Data* params =
          reinterpret_cast<
              internal::XRRuntime_RequestSession_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      XRRuntimeSessionOptionsPtr p_options{};
      XRRuntime_RequestSession_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadOptions(&p_options))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            XRRuntime::Name_, 0, false);
        return false;
      }
      XRRuntime::RequestSessionCallback callback =
          XRRuntime_RequestSession_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestSession(
std::move(p_options), std::move(callback));
      return true;
    }
    case internal::kXRRuntime_ShutdownSession_Name: {

      internal::XRRuntime_ShutdownSession_Params_Data* params =
          reinterpret_cast<
              internal::XRRuntime_ShutdownSession_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      XRRuntime_ShutdownSession_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            XRRuntime::Name_, 1, false);
        return false;
      }
      XRRuntime::ShutdownSessionCallback callback =
          XRRuntime_ShutdownSession_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ShutdownSession(std::move(callback));
      return true;
    }
    case internal::kXRRuntime_ListenToDeviceChanges_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kXRRuntimeValidationInfo[] = {
    {&internal::XRRuntime_RequestSession_Params_Data::Validate,
     &internal::XRRuntime_RequestSession_ResponseParams_Data::Validate},
    {&internal::XRRuntime_ShutdownSession_Params_Data::Validate,
     &internal::XRRuntime_ShutdownSession_ResponseParams_Data::Validate},
    {&internal::XRRuntime_ListenToDeviceChanges_Params_Data::Validate,
     nullptr /* no response */},
};

bool XRRuntimeRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::XRRuntime::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kXRRuntimeValidationInfo);
}

bool XRRuntimeResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::XRRuntime::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kXRRuntimeValidationInfo);
}
const char ImmersiveOverlay::Name_[] = "device.mojom.ImmersiveOverlay";

ImmersiveOverlay::IPCStableHashFunction ImmersiveOverlay::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kImmersiveOverlay_RequestNextOverlayPose_Name: {
      return &ImmersiveOverlay::RequestNextOverlayPose_Sym::IPCStableHash;
    }
    case internal::kImmersiveOverlay_SubmitOverlayTexture_Name: {
      return &ImmersiveOverlay::SubmitOverlayTexture_Sym::IPCStableHash;
    }
    case internal::kImmersiveOverlay_SetOverlayAndWebXRVisibility_Name: {
      return &ImmersiveOverlay::SetOverlayAndWebXRVisibility_Sym::IPCStableHash;
    }
    case internal::kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name: {
      return &ImmersiveOverlay::RequestNotificationOnWebXrSubmitted_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ImmersiveOverlay::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kImmersiveOverlay_RequestNextOverlayPose_Name:
            return "Receive device::mojom::ImmersiveOverlay::RequestNextOverlayPose";
      case internal::kImmersiveOverlay_SubmitOverlayTexture_Name:
            return "Receive device::mojom::ImmersiveOverlay::SubmitOverlayTexture";
      case internal::kImmersiveOverlay_SetOverlayAndWebXRVisibility_Name:
            return "Receive device::mojom::ImmersiveOverlay::SetOverlayAndWebXRVisibility";
      case internal::kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name:
            return "Receive device::mojom::ImmersiveOverlay::RequestNotificationOnWebXrSubmitted";
    }
  } else {
    switch (message.name()) {
      case internal::kImmersiveOverlay_RequestNextOverlayPose_Name:
            return "Receive reply device::mojom::ImmersiveOverlay::RequestNextOverlayPose";
      case internal::kImmersiveOverlay_SubmitOverlayTexture_Name:
            return "Receive reply device::mojom::ImmersiveOverlay::SubmitOverlayTexture";
      case internal::kImmersiveOverlay_SetOverlayAndWebXRVisibility_Name:
            return "Receive reply device::mojom::ImmersiveOverlay::SetOverlayAndWebXRVisibility";
      case internal::kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name:
            return "Receive reply device::mojom::ImmersiveOverlay::RequestNotificationOnWebXrSubmitted";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ImmersiveOverlay::RequestNextOverlayPose_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::ImmersiveOverlay::RequestNextOverlayPose");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ImmersiveOverlay::SubmitOverlayTexture_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::ImmersiveOverlay::SubmitOverlayTexture");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ImmersiveOverlay::SetOverlayAndWebXRVisibility_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::ImmersiveOverlay::SetOverlayAndWebXRVisibility");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ImmersiveOverlay::RequestNotificationOnWebXrSubmitted_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::ImmersiveOverlay::RequestNotificationOnWebXrSubmitted");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class ImmersiveOverlay_RequestNextOverlayPose_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ImmersiveOverlay_RequestNextOverlayPose_ForwardToCallback(
      ImmersiveOverlay::RequestNextOverlayPoseCallback callback
      ) : callback_(std::move(callback)) {
  }

  ImmersiveOverlay_RequestNextOverlayPose_ForwardToCallback(const ImmersiveOverlay_RequestNextOverlayPose_ForwardToCallback&) = delete;
  ImmersiveOverlay_RequestNextOverlayPose_ForwardToCallback& operator=(const ImmersiveOverlay_RequestNextOverlayPose_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ImmersiveOverlay::RequestNextOverlayPoseCallback callback_;
};

class ImmersiveOverlay_SubmitOverlayTexture_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ImmersiveOverlay_SubmitOverlayTexture_ForwardToCallback(
      ImmersiveOverlay::SubmitOverlayTextureCallback callback
      ) : callback_(std::move(callback)) {
  }

  ImmersiveOverlay_SubmitOverlayTexture_ForwardToCallback(const ImmersiveOverlay_SubmitOverlayTexture_ForwardToCallback&) = delete;
  ImmersiveOverlay_SubmitOverlayTexture_ForwardToCallback& operator=(const ImmersiveOverlay_SubmitOverlayTexture_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ImmersiveOverlay::SubmitOverlayTextureCallback callback_;
};

class ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ForwardToCallback(
      ImmersiveOverlay::RequestNotificationOnWebXrSubmittedCallback callback
      ) : callback_(std::move(callback)) {
  }

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ForwardToCallback(const ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ForwardToCallback&) = delete;
  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ForwardToCallback& operator=(const ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ImmersiveOverlay::RequestNotificationOnWebXrSubmittedCallback callback_;
};

ImmersiveOverlayProxy::ImmersiveOverlayProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ImmersiveOverlayProxy::RequestNextOverlayPose(
    RequestNextOverlayPoseCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send device::mojom::ImmersiveOverlay::RequestNextOverlayPose");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kImmersiveOverlay_RequestNextOverlayPose_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::ImmersiveOverlay_RequestNextOverlayPose_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ImmersiveOverlay::Name_);
  message.set_method_name("RequestNextOverlayPose");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ImmersiveOverlay_RequestNextOverlayPose_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void ImmersiveOverlayProxy::SubmitOverlayTexture(
    int16_t in_frame_id, ::mojo::PlatformHandle in_texture, const ::gpu::SyncToken& in_sync_token, const ::gfx::RectF& in_left_bounds, const ::gfx::RectF& in_right_bounds, SubmitOverlayTextureCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::ImmersiveOverlay::SubmitOverlayTexture", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("frame_id"), in_frame_id,
                        "<value of type int16_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("texture"), in_texture,
                        "<value of type ::mojo::PlatformHandle>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("sync_token"), in_sync_token,
                        "<value of type const ::gpu::SyncToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("left_bounds"), in_left_bounds,
                        "<value of type const ::gfx::RectF&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("right_bounds"), in_right_bounds,
                        "<value of type const ::gfx::RectF&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kImmersiveOverlay_SubmitOverlayTexture_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::ImmersiveOverlay_SubmitOverlayTexture_Params_Data> params(
          message);
  params.Allocate();
  params->frame_id = in_frame_id;
  mojo::internal::Serialize<mojo::PlatformHandle>(
      in_texture, &params->texture, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->texture),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid texture in ImmersiveOverlay.SubmitOverlayTexture request");
  mojo::internal::MessageFragment<
      typename decltype(params->sync_token)::BaseType> sync_token_fragment(
          params.message());
  mojo::internal::Serialize<::gpu::mojom::SyncTokenDataView>(
      in_sync_token, sync_token_fragment);
  params->sync_token.Set(
      sync_token_fragment.is_null() ? nullptr : sync_token_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->sync_token.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null sync_token in ImmersiveOverlay.SubmitOverlayTexture request");
  mojo::internal::MessageFragment<
      typename decltype(params->left_bounds)::BaseType> left_bounds_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::RectFDataView>(
      in_left_bounds, left_bounds_fragment);
  params->left_bounds.Set(
      left_bounds_fragment.is_null() ? nullptr : left_bounds_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->left_bounds.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null left_bounds in ImmersiveOverlay.SubmitOverlayTexture request");
  mojo::internal::MessageFragment<
      typename decltype(params->right_bounds)::BaseType> right_bounds_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::RectFDataView>(
      in_right_bounds, right_bounds_fragment);
  params->right_bounds.Set(
      right_bounds_fragment.is_null() ? nullptr : right_bounds_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->right_bounds.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null right_bounds in ImmersiveOverlay.SubmitOverlayTexture request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ImmersiveOverlay::Name_);
  message.set_method_name("SubmitOverlayTexture");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ImmersiveOverlay_SubmitOverlayTexture_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void ImmersiveOverlayProxy::SetOverlayAndWebXRVisibility(
    bool in_overlay_visible, bool in_webxr_visible) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::ImmersiveOverlay::SetOverlayAndWebXRVisibility", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("overlay_visible"), in_overlay_visible,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("webxr_visible"), in_webxr_visible,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kImmersiveOverlay_SetOverlayAndWebXRVisibility_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data> params(
          message);
  params.Allocate();
  params->overlay_visible = in_overlay_visible;
  params->webxr_visible = in_webxr_visible;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ImmersiveOverlay::Name_);
  message.set_method_name("SetOverlayAndWebXRVisibility");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void ImmersiveOverlayProxy::RequestNotificationOnWebXrSubmitted(
    RequestNotificationOnWebXrSubmittedCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send device::mojom::ImmersiveOverlay::RequestNotificationOnWebXrSubmitted");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ImmersiveOverlay::Name_);
  message.set_method_name("RequestNotificationOnWebXrSubmitted");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class ImmersiveOverlay_RequestNextOverlayPose_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ImmersiveOverlay::RequestNextOverlayPoseCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ImmersiveOverlay_RequestNextOverlayPose_ProxyToResponder> proxy(
        new ImmersiveOverlay_RequestNextOverlayPose_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&ImmersiveOverlay_RequestNextOverlayPose_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~ImmersiveOverlay_RequestNextOverlayPose_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ImmersiveOverlay_RequestNextOverlayPose_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ImmersiveOverlay::RequestNextOverlayPoseCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      XRRenderInfoPtr in_render_info);
};

bool ImmersiveOverlay_RequestNextOverlayPose_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  XRRenderInfoPtr p_render_info{};
  ImmersiveOverlay_RequestNextOverlayPose_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadRenderInfo(&p_render_info))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ImmersiveOverlay::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_render_info));
  return true;
}

void ImmersiveOverlay_RequestNextOverlayPose_ProxyToResponder::Run(
    XRRenderInfoPtr in_render_info) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply device::mojom::ImmersiveOverlay::RequestNextOverlayPose", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("render_info"), in_render_info,
                        "<value of type XRRenderInfoPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kImmersiveOverlay_RequestNextOverlayPose_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->render_info)::BaseType> render_info_fragment(
          params.message());
  mojo::internal::Serialize<::device::mojom::XRRenderInfoDataView>(
      in_render_info, render_info_fragment);
  params->render_info.Set(
      render_info_fragment.is_null() ? nullptr : render_info_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->render_info.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null render_info in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ImmersiveOverlay::Name_);
  message.set_method_name("RequestNextOverlayPose");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class ImmersiveOverlay_SubmitOverlayTexture_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ImmersiveOverlay::SubmitOverlayTextureCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ImmersiveOverlay_SubmitOverlayTexture_ProxyToResponder> proxy(
        new ImmersiveOverlay_SubmitOverlayTexture_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&ImmersiveOverlay_SubmitOverlayTexture_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~ImmersiveOverlay_SubmitOverlayTexture_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ImmersiveOverlay_SubmitOverlayTexture_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ImmersiveOverlay::SubmitOverlayTextureCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool ImmersiveOverlay_SubmitOverlayTexture_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  ImmersiveOverlay_SubmitOverlayTexture_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ImmersiveOverlay::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void ImmersiveOverlay_SubmitOverlayTexture_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply device::mojom::ImmersiveOverlay::SubmitOverlayTexture", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kImmersiveOverlay_SubmitOverlayTexture_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ImmersiveOverlay::Name_);
  message.set_method_name("SubmitOverlayTexture");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ImmersiveOverlay::RequestNotificationOnWebXrSubmittedCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ProxyToResponder> proxy(
        new ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ImmersiveOverlay::RequestNotificationOnWebXrSubmittedCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ImmersiveOverlay::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply device::mojom::ImmersiveOverlay::RequestNotificationOnWebXrSubmitted");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ImmersiveOverlay::Name_);
  message.set_method_name("RequestNotificationOnWebXrSubmitted");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool ImmersiveOverlayStubDispatch::Accept(
    ImmersiveOverlay* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kImmersiveOverlay_RequestNextOverlayPose_Name: {
      break;
    }
    case internal::kImmersiveOverlay_SubmitOverlayTexture_Name: {
      break;
    }
    case internal::kImmersiveOverlay_SetOverlayAndWebXRVisibility_Name: {

      DCHECK(message->is_serialized());
      internal::ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data* params =
          reinterpret_cast<internal::ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_overlay_visible{};
      bool p_webxr_visible{};
      ImmersiveOverlay_SetOverlayAndWebXRVisibility_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_overlay_visible = input_data_view.overlay_visible();
      if (success)
        p_webxr_visible = input_data_view.webxr_visible();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ImmersiveOverlay::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetOverlayAndWebXRVisibility(
std::move(p_overlay_visible), 
std::move(p_webxr_visible));
      return true;
    }
    case internal::kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name: {
      break;
    }
  }
  return false;
}

// static
bool ImmersiveOverlayStubDispatch::AcceptWithResponder(
    ImmersiveOverlay* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kImmersiveOverlay_RequestNextOverlayPose_Name: {

      internal::ImmersiveOverlay_RequestNextOverlayPose_Params_Data* params =
          reinterpret_cast<
              internal::ImmersiveOverlay_RequestNextOverlayPose_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ImmersiveOverlay_RequestNextOverlayPose_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ImmersiveOverlay::Name_, 0, false);
        return false;
      }
      ImmersiveOverlay::RequestNextOverlayPoseCallback callback =
          ImmersiveOverlay_RequestNextOverlayPose_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestNextOverlayPose(std::move(callback));
      return true;
    }
    case internal::kImmersiveOverlay_SubmitOverlayTexture_Name: {

      internal::ImmersiveOverlay_SubmitOverlayTexture_Params_Data* params =
          reinterpret_cast<
              internal::ImmersiveOverlay_SubmitOverlayTexture_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int16_t p_frame_id{};
      ::mojo::PlatformHandle p_texture{};
      ::gpu::SyncToken p_sync_token{};
      ::gfx::RectF p_left_bounds{};
      ::gfx::RectF p_right_bounds{};
      ImmersiveOverlay_SubmitOverlayTexture_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_frame_id = input_data_view.frame_id();
      if (success)
        p_texture = input_data_view.TakeTexture();
      if (success && !input_data_view.ReadSyncToken(&p_sync_token))
        success = false;
      if (success && !input_data_view.ReadLeftBounds(&p_left_bounds))
        success = false;
      if (success && !input_data_view.ReadRightBounds(&p_right_bounds))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ImmersiveOverlay::Name_, 1, false);
        return false;
      }
      ImmersiveOverlay::SubmitOverlayTextureCallback callback =
          ImmersiveOverlay_SubmitOverlayTexture_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SubmitOverlayTexture(
std::move(p_frame_id), 
std::move(p_texture), 
std::move(p_sync_token), 
std::move(p_left_bounds), 
std::move(p_right_bounds), std::move(callback));
      return true;
    }
    case internal::kImmersiveOverlay_SetOverlayAndWebXRVisibility_Name: {
      break;
    }
    case internal::kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name: {

      internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data* params =
          reinterpret_cast<
              internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ImmersiveOverlay::Name_, 3, false);
        return false;
      }
      ImmersiveOverlay::RequestNotificationOnWebXrSubmittedCallback callback =
          ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestNotificationOnWebXrSubmitted(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kImmersiveOverlayValidationInfo[] = {
    {&internal::ImmersiveOverlay_RequestNextOverlayPose_Params_Data::Validate,
     &internal::ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data::Validate},
    {&internal::ImmersiveOverlay_SubmitOverlayTexture_Params_Data::Validate,
     &internal::ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data::Validate},
    {&internal::ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data::Validate,
     &internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data::Validate},
};

bool ImmersiveOverlayRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::ImmersiveOverlay::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kImmersiveOverlayValidationInfo);
}

bool ImmersiveOverlayResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::ImmersiveOverlay::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kImmersiveOverlayValidationInfo);
}
const char XRCompositorHost::Name_[] = "device.mojom.XRCompositorHost";

XRCompositorHost::IPCStableHashFunction XRCompositorHost::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kXRCompositorHost_CreateImmersiveOverlay_Name: {
      return &XRCompositorHost::CreateImmersiveOverlay_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* XRCompositorHost::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kXRCompositorHost_CreateImmersiveOverlay_Name:
            return "Receive device::mojom::XRCompositorHost::CreateImmersiveOverlay";
    }
  } else {
    switch (message.name()) {
      case internal::kXRCompositorHost_CreateImmersiveOverlay_Name:
            return "Receive reply device::mojom::XRCompositorHost::CreateImmersiveOverlay";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t XRCompositorHost::CreateImmersiveOverlay_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::XRCompositorHost::CreateImmersiveOverlay");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

XRCompositorHostProxy::XRCompositorHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void XRCompositorHostProxy::CreateImmersiveOverlay(
    ::mojo::PendingReceiver<ImmersiveOverlay> in_overlay) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::XRCompositorHost::CreateImmersiveOverlay", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("overlay"), in_overlay,
                        "<value of type ::mojo::PendingReceiver<ImmersiveOverlay>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRCompositorHost_CreateImmersiveOverlay_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRCompositorHost_CreateImmersiveOverlay_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::ImmersiveOverlayInterfaceBase>>(
      in_overlay, &params->overlay, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->overlay),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid overlay in XRCompositorHost.CreateImmersiveOverlay request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRCompositorHost::Name_);
  message.set_method_name("CreateImmersiveOverlay");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool XRCompositorHostStubDispatch::Accept(
    XRCompositorHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kXRCompositorHost_CreateImmersiveOverlay_Name: {

      DCHECK(message->is_serialized());
      internal::XRCompositorHost_CreateImmersiveOverlay_Params_Data* params =
          reinterpret_cast<internal::XRCompositorHost_CreateImmersiveOverlay_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<ImmersiveOverlay> p_overlay{};
      XRCompositorHost_CreateImmersiveOverlay_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_overlay =
            input_data_view.TakeOverlay<decltype(p_overlay)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            XRCompositorHost::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateImmersiveOverlay(
std::move(p_overlay));
      return true;
    }
  }
  return false;
}

// static
bool XRCompositorHostStubDispatch::AcceptWithResponder(
    XRCompositorHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kXRCompositorHost_CreateImmersiveOverlay_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kXRCompositorHostValidationInfo[] = {
    {&internal::XRCompositorHost_CreateImmersiveOverlay_Params_Data::Validate,
     nullptr /* no response */},
};

bool XRCompositorHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::XRCompositorHost::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kXRCompositorHostValidationInfo);
}

const char IsolatedXRRuntimeProviderClient::Name_[] = "device.mojom.IsolatedXRRuntimeProviderClient";

IsolatedXRRuntimeProviderClient::IPCStableHashFunction IsolatedXRRuntimeProviderClient::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kIsolatedXRRuntimeProviderClient_OnDeviceAdded_Name: {
      return &IsolatedXRRuntimeProviderClient::OnDeviceAdded_Sym::IPCStableHash;
    }
    case internal::kIsolatedXRRuntimeProviderClient_OnDeviceRemoved_Name: {
      return &IsolatedXRRuntimeProviderClient::OnDeviceRemoved_Sym::IPCStableHash;
    }
    case internal::kIsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Name: {
      return &IsolatedXRRuntimeProviderClient::OnDevicesEnumerated_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* IsolatedXRRuntimeProviderClient::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kIsolatedXRRuntimeProviderClient_OnDeviceAdded_Name:
            return "Receive device::mojom::IsolatedXRRuntimeProviderClient::OnDeviceAdded";
      case internal::kIsolatedXRRuntimeProviderClient_OnDeviceRemoved_Name:
            return "Receive device::mojom::IsolatedXRRuntimeProviderClient::OnDeviceRemoved";
      case internal::kIsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Name:
            return "Receive device::mojom::IsolatedXRRuntimeProviderClient::OnDevicesEnumerated";
    }
  } else {
    switch (message.name()) {
      case internal::kIsolatedXRRuntimeProviderClient_OnDeviceAdded_Name:
            return "Receive reply device::mojom::IsolatedXRRuntimeProviderClient::OnDeviceAdded";
      case internal::kIsolatedXRRuntimeProviderClient_OnDeviceRemoved_Name:
            return "Receive reply device::mojom::IsolatedXRRuntimeProviderClient::OnDeviceRemoved";
      case internal::kIsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Name:
            return "Receive reply device::mojom::IsolatedXRRuntimeProviderClient::OnDevicesEnumerated";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t IsolatedXRRuntimeProviderClient::OnDeviceAdded_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::IsolatedXRRuntimeProviderClient::OnDeviceAdded");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IsolatedXRRuntimeProviderClient::OnDeviceRemoved_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::IsolatedXRRuntimeProviderClient::OnDeviceRemoved");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IsolatedXRRuntimeProviderClient::OnDevicesEnumerated_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::IsolatedXRRuntimeProviderClient::OnDevicesEnumerated");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

IsolatedXRRuntimeProviderClientProxy::IsolatedXRRuntimeProviderClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void IsolatedXRRuntimeProviderClientProxy::OnDeviceAdded(
    ::mojo::PendingRemote<XRRuntime> in_runtime, ::mojo::PendingRemote<XRCompositorHost> in_compositor_host, XRDeviceDataPtr in_device_data, ::device::mojom::XRDeviceId in_device_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::IsolatedXRRuntimeProviderClient::OnDeviceAdded", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("runtime"), in_runtime,
                        "<value of type ::mojo::PendingRemote<XRRuntime>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("compositor_host"), in_compositor_host,
                        "<value of type ::mojo::PendingRemote<XRCompositorHost>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_data"), in_device_data,
                        "<value of type XRDeviceDataPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_id"), in_device_id,
                        "<value of type ::device::mojom::XRDeviceId>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIsolatedXRRuntimeProviderClient_OnDeviceAdded_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::device::mojom::XRRuntimeInterfaceBase>>(
      in_runtime, &params->runtime, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->runtime),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid runtime in IsolatedXRRuntimeProviderClient.OnDeviceAdded request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::device::mojom::XRCompositorHostInterfaceBase>>(
      in_compositor_host, &params->compositor_host, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->compositor_host),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid compositor_host in IsolatedXRRuntimeProviderClient.OnDeviceAdded request");
  mojo::internal::MessageFragment<
      typename decltype(params->device_data)::BaseType> device_data_fragment(
          params.message());
  mojo::internal::Serialize<::device::mojom::XRDeviceDataDataView>(
      in_device_data, device_data_fragment);
  params->device_data.Set(
      device_data_fragment.is_null() ? nullptr : device_data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_data in IsolatedXRRuntimeProviderClient.OnDeviceAdded request");
  mojo::internal::Serialize<::device::mojom::XRDeviceId>(
      in_device_id, &params->device_id);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IsolatedXRRuntimeProviderClient::Name_);
  message.set_method_name("OnDeviceAdded");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void IsolatedXRRuntimeProviderClientProxy::OnDeviceRemoved(
    ::device::mojom::XRDeviceId in_device_index) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::IsolatedXRRuntimeProviderClient::OnDeviceRemoved", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_index"), in_device_index,
                        "<value of type ::device::mojom::XRDeviceId>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIsolatedXRRuntimeProviderClient_OnDeviceRemoved_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::device::mojom::XRDeviceId>(
      in_device_index, &params->device_index);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IsolatedXRRuntimeProviderClient::Name_);
  message.set_method_name("OnDeviceRemoved");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void IsolatedXRRuntimeProviderClientProxy::OnDevicesEnumerated(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send device::mojom::IsolatedXRRuntimeProviderClient::OnDevicesEnumerated");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IsolatedXRRuntimeProviderClient::Name_);
  message.set_method_name("OnDevicesEnumerated");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool IsolatedXRRuntimeProviderClientStubDispatch::Accept(
    IsolatedXRRuntimeProviderClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kIsolatedXRRuntimeProviderClient_OnDeviceAdded_Name: {

      DCHECK(message->is_serialized());
      internal::IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data* params =
          reinterpret_cast<internal::IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<XRRuntime> p_runtime{};
      ::mojo::PendingRemote<XRCompositorHost> p_compositor_host{};
      XRDeviceDataPtr p_device_data{};
      ::device::mojom::XRDeviceId p_device_id{};
      IsolatedXRRuntimeProviderClient_OnDeviceAdded_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_runtime =
            input_data_view.TakeRuntime<decltype(p_runtime)>();
      }
      if (success) {
        p_compositor_host =
            input_data_view.TakeCompositorHost<decltype(p_compositor_host)>();
      }
      if (success && !input_data_view.ReadDeviceData(&p_device_data))
        success = false;
      if (success && !input_data_view.ReadDeviceId(&p_device_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IsolatedXRRuntimeProviderClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnDeviceAdded(
std::move(p_runtime), 
std::move(p_compositor_host), 
std::move(p_device_data), 
std::move(p_device_id));
      return true;
    }
    case internal::kIsolatedXRRuntimeProviderClient_OnDeviceRemoved_Name: {

      DCHECK(message->is_serialized());
      internal::IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data* params =
          reinterpret_cast<internal::IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::device::mojom::XRDeviceId p_device_index{};
      IsolatedXRRuntimeProviderClient_OnDeviceRemoved_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDeviceIndex(&p_device_index))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IsolatedXRRuntimeProviderClient::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnDeviceRemoved(
std::move(p_device_index));
      return true;
    }
    case internal::kIsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Name: {

      DCHECK(message->is_serialized());
      internal::IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data* params =
          reinterpret_cast<internal::IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IsolatedXRRuntimeProviderClient::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnDevicesEnumerated();
      return true;
    }
  }
  return false;
}

// static
bool IsolatedXRRuntimeProviderClientStubDispatch::AcceptWithResponder(
    IsolatedXRRuntimeProviderClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kIsolatedXRRuntimeProviderClient_OnDeviceAdded_Name: {
      break;
    }
    case internal::kIsolatedXRRuntimeProviderClient_OnDeviceRemoved_Name: {
      break;
    }
    case internal::kIsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kIsolatedXRRuntimeProviderClientValidationInfo[] = {
    {&internal::IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data::Validate,
     nullptr /* no response */},
};

bool IsolatedXRRuntimeProviderClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::IsolatedXRRuntimeProviderClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kIsolatedXRRuntimeProviderClientValidationInfo);
}

const char IsolatedXRRuntimeProvider::Name_[] = "device.mojom.IsolatedXRRuntimeProvider";

IsolatedXRRuntimeProvider::IPCStableHashFunction IsolatedXRRuntimeProvider::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kIsolatedXRRuntimeProvider_RequestDevices_Name: {
      return &IsolatedXRRuntimeProvider::RequestDevices_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* IsolatedXRRuntimeProvider::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kIsolatedXRRuntimeProvider_RequestDevices_Name:
            return "Receive device::mojom::IsolatedXRRuntimeProvider::RequestDevices";
    }
  } else {
    switch (message.name()) {
      case internal::kIsolatedXRRuntimeProvider_RequestDevices_Name:
            return "Receive reply device::mojom::IsolatedXRRuntimeProvider::RequestDevices";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t IsolatedXRRuntimeProvider::RequestDevices_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::IsolatedXRRuntimeProvider::RequestDevices");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

IsolatedXRRuntimeProviderProxy::IsolatedXRRuntimeProviderProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void IsolatedXRRuntimeProviderProxy::RequestDevices(
    ::mojo::PendingRemote<IsolatedXRRuntimeProviderClient> in_client) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::IsolatedXRRuntimeProvider::RequestDevices", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client"), in_client,
                        "<value of type ::mojo::PendingRemote<IsolatedXRRuntimeProviderClient>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIsolatedXRRuntimeProvider_RequestDevices_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::IsolatedXRRuntimeProvider_RequestDevices_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::device::mojom::IsolatedXRRuntimeProviderClientInterfaceBase>>(
      in_client, &params->client, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in IsolatedXRRuntimeProvider.RequestDevices request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IsolatedXRRuntimeProvider::Name_);
  message.set_method_name("RequestDevices");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool IsolatedXRRuntimeProviderStubDispatch::Accept(
    IsolatedXRRuntimeProvider* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kIsolatedXRRuntimeProvider_RequestDevices_Name: {

      DCHECK(message->is_serialized());
      internal::IsolatedXRRuntimeProvider_RequestDevices_Params_Data* params =
          reinterpret_cast<internal::IsolatedXRRuntimeProvider_RequestDevices_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<IsolatedXRRuntimeProviderClient> p_client{};
      IsolatedXRRuntimeProvider_RequestDevices_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IsolatedXRRuntimeProvider::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestDevices(
std::move(p_client));
      return true;
    }
  }
  return false;
}

// static
bool IsolatedXRRuntimeProviderStubDispatch::AcceptWithResponder(
    IsolatedXRRuntimeProvider* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kIsolatedXRRuntimeProvider_RequestDevices_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kIsolatedXRRuntimeProviderValidationInfo[] = {
    {&internal::IsolatedXRRuntimeProvider_RequestDevices_Params_Data::Validate,
     nullptr /* no response */},
};

bool IsolatedXRRuntimeProviderRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::IsolatedXRRuntimeProvider::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kIsolatedXRRuntimeProviderValidationInfo);
}

const char XRDeviceService::Name_[] = "device.mojom.XRDeviceService";

XRDeviceService::IPCStableHashFunction XRDeviceService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kXRDeviceService_BindRuntimeProvider_Name: {
      return &XRDeviceService::BindRuntimeProvider_Sym::IPCStableHash;
    }
    case internal::kXRDeviceService_BindTestHook_Name: {
      return &XRDeviceService::BindTestHook_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* XRDeviceService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kXRDeviceService_BindRuntimeProvider_Name:
            return "Receive device::mojom::XRDeviceService::BindRuntimeProvider";
      case internal::kXRDeviceService_BindTestHook_Name:
            return "Receive device::mojom::XRDeviceService::BindTestHook";
    }
  } else {
    switch (message.name()) {
      case internal::kXRDeviceService_BindRuntimeProvider_Name:
            return "Receive reply device::mojom::XRDeviceService::BindRuntimeProvider";
      case internal::kXRDeviceService_BindTestHook_Name:
            return "Receive reply device::mojom::XRDeviceService::BindTestHook";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t XRDeviceService::BindRuntimeProvider_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::XRDeviceService::BindRuntimeProvider");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t XRDeviceService::BindTestHook_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::XRDeviceService::BindTestHook");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

XRDeviceServiceProxy::XRDeviceServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void XRDeviceServiceProxy::BindRuntimeProvider(
    ::mojo::PendingReceiver<IsolatedXRRuntimeProvider> in_receiver, ::mojo::PendingRemote<XRDeviceServiceHost> in_host) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::XRDeviceService::BindRuntimeProvider", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<IsolatedXRRuntimeProvider>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("host"), in_host,
                        "<value of type ::mojo::PendingRemote<XRDeviceServiceHost>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRDeviceService_BindRuntimeProvider_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRDeviceService_BindRuntimeProvider_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::IsolatedXRRuntimeProviderInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in XRDeviceService.BindRuntimeProvider request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::device::mojom::XRDeviceServiceHostInterfaceBase>>(
      in_host, &params->host, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->host),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid host in XRDeviceService.BindRuntimeProvider request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRDeviceService::Name_);
  message.set_method_name("BindRuntimeProvider");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void XRDeviceServiceProxy::BindTestHook(
    ::mojo::PendingReceiver<::device_test::mojom::XRServiceTestHook> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::XRDeviceService::BindTestHook", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device_test::mojom::XRServiceTestHook>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRDeviceService_BindTestHook_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRDeviceService_BindTestHook_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device_test::mojom::XRServiceTestHookInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in XRDeviceService.BindTestHook request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRDeviceService::Name_);
  message.set_method_name("BindTestHook");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool XRDeviceServiceStubDispatch::Accept(
    XRDeviceService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kXRDeviceService_BindRuntimeProvider_Name: {

      DCHECK(message->is_serialized());
      internal::XRDeviceService_BindRuntimeProvider_Params_Data* params =
          reinterpret_cast<internal::XRDeviceService_BindRuntimeProvider_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<IsolatedXRRuntimeProvider> p_receiver{};
      ::mojo::PendingRemote<XRDeviceServiceHost> p_host{};
      XRDeviceService_BindRuntimeProvider_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success) {
        p_host =
            input_data_view.TakeHost<decltype(p_host)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            XRDeviceService::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindRuntimeProvider(
std::move(p_receiver), 
std::move(p_host));
      return true;
    }
    case internal::kXRDeviceService_BindTestHook_Name: {

      DCHECK(message->is_serialized());
      internal::XRDeviceService_BindTestHook_Params_Data* params =
          reinterpret_cast<internal::XRDeviceService_BindTestHook_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device_test::mojom::XRServiceTestHook> p_receiver{};
      XRDeviceService_BindTestHook_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            XRDeviceService::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindTestHook(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool XRDeviceServiceStubDispatch::AcceptWithResponder(
    XRDeviceService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kXRDeviceService_BindRuntimeProvider_Name: {
      break;
    }
    case internal::kXRDeviceService_BindTestHook_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kXRDeviceServiceValidationInfo[] = {
    {&internal::XRDeviceService_BindRuntimeProvider_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::XRDeviceService_BindTestHook_Params_Data::Validate,
     nullptr /* no response */},
};

bool XRDeviceServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::XRDeviceService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kXRDeviceServiceValidationInfo);
}

const char XRDeviceServiceHost::Name_[] = "device.mojom.XRDeviceServiceHost";

XRDeviceServiceHost::IPCStableHashFunction XRDeviceServiceHost::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kXRDeviceServiceHost_BindGpu_Name: {
      return &XRDeviceServiceHost::BindGpu_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* XRDeviceServiceHost::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kXRDeviceServiceHost_BindGpu_Name:
            return "Receive device::mojom::XRDeviceServiceHost::BindGpu";
    }
  } else {
    switch (message.name()) {
      case internal::kXRDeviceServiceHost_BindGpu_Name:
            return "Receive reply device::mojom::XRDeviceServiceHost::BindGpu";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t XRDeviceServiceHost::BindGpu_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::XRDeviceServiceHost::BindGpu");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

XRDeviceServiceHostProxy::XRDeviceServiceHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void XRDeviceServiceHostProxy::BindGpu(
    ::mojo::PendingReceiver<::viz::mojom::Gpu> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::XRDeviceServiceHost::BindGpu", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::viz::mojom::Gpu>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kXRDeviceServiceHost_BindGpu_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::XRDeviceServiceHost_BindGpu_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::viz::mojom::GpuInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in XRDeviceServiceHost.BindGpu request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(XRDeviceServiceHost::Name_);
  message.set_method_name("BindGpu");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool XRDeviceServiceHostStubDispatch::Accept(
    XRDeviceServiceHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kXRDeviceServiceHost_BindGpu_Name: {

      DCHECK(message->is_serialized());
      internal::XRDeviceServiceHost_BindGpu_Params_Data* params =
          reinterpret_cast<internal::XRDeviceServiceHost_BindGpu_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::viz::mojom::Gpu> p_receiver{};
      XRDeviceServiceHost_BindGpu_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            XRDeviceServiceHost::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindGpu(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool XRDeviceServiceHostStubDispatch::AcceptWithResponder(
    XRDeviceServiceHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kXRDeviceServiceHost_BindGpu_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kXRDeviceServiceHostValidationInfo[] = {
    {&internal::XRDeviceServiceHost_BindGpu_Params_Data::Validate,
     nullptr /* no response */},
};

bool XRDeviceServiceHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::XRDeviceServiceHost::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kXRDeviceServiceHostValidationInfo);
}



}  // namespace mojom
}  // namespace device


namespace mojo {


// static
bool StructTraits<::device::mojom::XRRuntimeSessionOptions::DataView, ::device::mojom::XRRuntimeSessionOptionsPtr>::Read(
    ::device::mojom::XRRuntimeSessionOptions::DataView input,
    ::device::mojom::XRRuntimeSessionOptionsPtr* output) {
  bool success = true;
  ::device::mojom::XRRuntimeSessionOptionsPtr result(::device::mojom::XRRuntimeSessionOptions::New());
  
      if (success && !input.ReadMode(&result->mode))
        success = false;
      if (success && !input.ReadRequiredFeatures(&result->required_features))
        success = false;
      if (success && !input.ReadOptionalFeatures(&result->optional_features))
        success = false;
      if (success)
        result->render_process_id = input.render_process_id();
      if (success)
        result->render_frame_id = input.render_frame_id();
      if (success && !input.ReadTrackedImages(&result->tracked_images))
        success = false;
      if (success && !input.ReadDepthOptions(&result->depth_options))
        success = false;
      if (success)
        result->trace_id = input.trace_id();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::device::mojom::XRRuntimeSessionResult::DataView, ::device::mojom::XRRuntimeSessionResultPtr>::Read(
    ::device::mojom::XRRuntimeSessionResult::DataView input,
    ::device::mojom::XRRuntimeSessionResultPtr* output) {
  bool success = true;
  ::device::mojom::XRRuntimeSessionResultPtr result(::device::mojom::XRRuntimeSessionResult::New());
  
      if (success) {
        result->controller =
            input.TakeController<decltype(result->controller)>();
      }
      if (success && !input.ReadSession(&result->session))
        success = false;
      if (success && !input.ReadFrameSinkId(&result->frame_sink_id))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::device::mojom::XRRenderInfo::DataView, ::device::mojom::XRRenderInfoPtr>::Read(
    ::device::mojom::XRRenderInfo::DataView input,
    ::device::mojom::XRRenderInfoPtr* output) {
  bool success = true;
  ::device::mojom::XRRenderInfoPtr result(::device::mojom::XRRenderInfo::New());
  
      if (success)
        result->frame_id = input.frame_id();
      if (success && !input.ReadMojoFromViewer(&result->mojo_from_viewer))
        success = false;
      if (success && !input.ReadViews(&result->views))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::device::mojom::XRDeviceData::DataView, ::device::mojom::XRDeviceDataPtr>::Read(
    ::device::mojom::XRDeviceData::DataView input,
    ::device::mojom::XRDeviceDataPtr* output) {
  bool success = true;
  ::device::mojom::XRDeviceDataPtr result(::device::mojom::XRDeviceData::New());
  
      if (success && !input.ReadSupportedFeatures(&result->supported_features))
        success = false;
      if (success)
        result->is_ar_blend_mode_supported = input.is_ar_blend_mode_supported();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace device {
namespace mojom {


void XRSessionControllerInterceptorForTesting::SetFrameDataRestricted(bool restricted) {
  GetForwardingInterface()->SetFrameDataRestricted(std::move(restricted));
}
XRSessionControllerAsyncWaiter::XRSessionControllerAsyncWaiter(
    XRSessionController* proxy) : proxy_(proxy) {}

XRSessionControllerAsyncWaiter::~XRSessionControllerAsyncWaiter() = default;




void XRRuntimeEventListenerInterceptorForTesting::OnVisibilityStateChanged(::device::mojom::XRVisibilityState visibility_state) {
  GetForwardingInterface()->OnVisibilityStateChanged(std::move(visibility_state));
}
void XRRuntimeEventListenerInterceptorForTesting::OnExitPresent() {
  GetForwardingInterface()->OnExitPresent();
}
XRRuntimeEventListenerAsyncWaiter::XRRuntimeEventListenerAsyncWaiter(
    XRRuntimeEventListener* proxy) : proxy_(proxy) {}

XRRuntimeEventListenerAsyncWaiter::~XRRuntimeEventListenerAsyncWaiter() = default;




void XRRuntimeInterceptorForTesting::RequestSession(XRRuntimeSessionOptionsPtr options, RequestSessionCallback callback) {
  GetForwardingInterface()->RequestSession(std::move(options), std::move(callback));
}
void XRRuntimeInterceptorForTesting::ShutdownSession(ShutdownSessionCallback callback) {
  GetForwardingInterface()->ShutdownSession(std::move(callback));
}
void XRRuntimeInterceptorForTesting::ListenToDeviceChanges(::mojo::PendingAssociatedRemote<XRRuntimeEventListener> listener) {
  GetForwardingInterface()->ListenToDeviceChanges(std::move(listener));
}
XRRuntimeAsyncWaiter::XRRuntimeAsyncWaiter(
    XRRuntime* proxy) : proxy_(proxy) {}

XRRuntimeAsyncWaiter::~XRRuntimeAsyncWaiter() = default;

void XRRuntimeAsyncWaiter::RequestSession(
    XRRuntimeSessionOptionsPtr options, XRRuntimeSessionResultPtr* out_session) {
  base::RunLoop loop;
  proxy_->RequestSession(std::move(options),
      base::BindOnce(
          [](base::RunLoop* loop,
             XRRuntimeSessionResultPtr* out_session
,
             XRRuntimeSessionResultPtr session) {*out_session = std::move(session);
            loop->Quit();
          },
          &loop,
          out_session));
  loop.Run();
}
void XRRuntimeAsyncWaiter::ShutdownSession(
    ) {
  base::RunLoop loop;
  proxy_->ShutdownSession(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}



void ImmersiveOverlayInterceptorForTesting::RequestNextOverlayPose(RequestNextOverlayPoseCallback callback) {
  GetForwardingInterface()->RequestNextOverlayPose(std::move(callback));
}
void ImmersiveOverlayInterceptorForTesting::SubmitOverlayTexture(int16_t frame_id, ::mojo::PlatformHandle texture, const ::gpu::SyncToken& sync_token, const ::gfx::RectF& left_bounds, const ::gfx::RectF& right_bounds, SubmitOverlayTextureCallback callback) {
  GetForwardingInterface()->SubmitOverlayTexture(std::move(frame_id), std::move(texture), std::move(sync_token), std::move(left_bounds), std::move(right_bounds), std::move(callback));
}
void ImmersiveOverlayInterceptorForTesting::SetOverlayAndWebXRVisibility(bool overlay_visible, bool webxr_visible) {
  GetForwardingInterface()->SetOverlayAndWebXRVisibility(std::move(overlay_visible), std::move(webxr_visible));
}
void ImmersiveOverlayInterceptorForTesting::RequestNotificationOnWebXrSubmitted(RequestNotificationOnWebXrSubmittedCallback callback) {
  GetForwardingInterface()->RequestNotificationOnWebXrSubmitted(std::move(callback));
}
ImmersiveOverlayAsyncWaiter::ImmersiveOverlayAsyncWaiter(
    ImmersiveOverlay* proxy) : proxy_(proxy) {}

ImmersiveOverlayAsyncWaiter::~ImmersiveOverlayAsyncWaiter() = default;

void ImmersiveOverlayAsyncWaiter::RequestNextOverlayPose(
    XRRenderInfoPtr* out_render_info) {
  base::RunLoop loop;
  proxy_->RequestNextOverlayPose(
      base::BindOnce(
          [](base::RunLoop* loop,
             XRRenderInfoPtr* out_render_info
,
             XRRenderInfoPtr render_info) {*out_render_info = std::move(render_info);
            loop->Quit();
          },
          &loop,
          out_render_info));
  loop.Run();
}
void ImmersiveOverlayAsyncWaiter::SubmitOverlayTexture(
    int16_t frame_id, ::mojo::PlatformHandle texture, const ::gpu::SyncToken& sync_token, const ::gfx::RectF& left_bounds, const ::gfx::RectF& right_bounds, bool* out_success) {
  base::RunLoop loop;
  proxy_->SubmitOverlayTexture(std::move(frame_id),std::move(texture),std::move(sync_token),std::move(left_bounds),std::move(right_bounds),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void ImmersiveOverlayAsyncWaiter::RequestNotificationOnWebXrSubmitted(
    ) {
  base::RunLoop loop;
  proxy_->RequestNotificationOnWebXrSubmitted(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}



void XRCompositorHostInterceptorForTesting::CreateImmersiveOverlay(::mojo::PendingReceiver<ImmersiveOverlay> overlay) {
  GetForwardingInterface()->CreateImmersiveOverlay(std::move(overlay));
}
XRCompositorHostAsyncWaiter::XRCompositorHostAsyncWaiter(
    XRCompositorHost* proxy) : proxy_(proxy) {}

XRCompositorHostAsyncWaiter::~XRCompositorHostAsyncWaiter() = default;




void IsolatedXRRuntimeProviderClientInterceptorForTesting::OnDeviceAdded(::mojo::PendingRemote<XRRuntime> runtime, ::mojo::PendingRemote<XRCompositorHost> compositor_host, XRDeviceDataPtr device_data, ::device::mojom::XRDeviceId device_id) {
  GetForwardingInterface()->OnDeviceAdded(std::move(runtime), std::move(compositor_host), std::move(device_data), std::move(device_id));
}
void IsolatedXRRuntimeProviderClientInterceptorForTesting::OnDeviceRemoved(::device::mojom::XRDeviceId device_index) {
  GetForwardingInterface()->OnDeviceRemoved(std::move(device_index));
}
void IsolatedXRRuntimeProviderClientInterceptorForTesting::OnDevicesEnumerated() {
  GetForwardingInterface()->OnDevicesEnumerated();
}
IsolatedXRRuntimeProviderClientAsyncWaiter::IsolatedXRRuntimeProviderClientAsyncWaiter(
    IsolatedXRRuntimeProviderClient* proxy) : proxy_(proxy) {}

IsolatedXRRuntimeProviderClientAsyncWaiter::~IsolatedXRRuntimeProviderClientAsyncWaiter() = default;




void IsolatedXRRuntimeProviderInterceptorForTesting::RequestDevices(::mojo::PendingRemote<IsolatedXRRuntimeProviderClient> client) {
  GetForwardingInterface()->RequestDevices(std::move(client));
}
IsolatedXRRuntimeProviderAsyncWaiter::IsolatedXRRuntimeProviderAsyncWaiter(
    IsolatedXRRuntimeProvider* proxy) : proxy_(proxy) {}

IsolatedXRRuntimeProviderAsyncWaiter::~IsolatedXRRuntimeProviderAsyncWaiter() = default;




void XRDeviceServiceInterceptorForTesting::BindRuntimeProvider(::mojo::PendingReceiver<IsolatedXRRuntimeProvider> receiver, ::mojo::PendingRemote<XRDeviceServiceHost> host) {
  GetForwardingInterface()->BindRuntimeProvider(std::move(receiver), std::move(host));
}
void XRDeviceServiceInterceptorForTesting::BindTestHook(::mojo::PendingReceiver<::device_test::mojom::XRServiceTestHook> receiver) {
  GetForwardingInterface()->BindTestHook(std::move(receiver));
}
XRDeviceServiceAsyncWaiter::XRDeviceServiceAsyncWaiter(
    XRDeviceService* proxy) : proxy_(proxy) {}

XRDeviceServiceAsyncWaiter::~XRDeviceServiceAsyncWaiter() = default;




void XRDeviceServiceHostInterceptorForTesting::BindGpu(::mojo::PendingReceiver<::viz::mojom::Gpu> receiver) {
  GetForwardingInterface()->BindGpu(std::move(receiver));
}
XRDeviceServiceHostAsyncWaiter::XRDeviceServiceHostAsyncWaiter(
    XRDeviceServiceHost* proxy) : proxy_(proxy) {}

XRDeviceServiceHostAsyncWaiter::~XRDeviceServiceHostAsyncWaiter() = default;






}  // namespace mojom
}  // namespace device


#if defined(__clang__)
#pragma clang diagnostic pop
#endif