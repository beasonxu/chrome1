// device/vr/public/mojom/isolated_xr_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_VR_PUBLIC_MOJOM_ISOLATED_XR_SERVICE_MOJOM_PARAMS_DATA_H_
#define DEVICE_VR_PUBLIC_MOJOM_ISOLATED_XR_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRSessionController_SetFrameDataRestricted_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t restricted : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<XRSessionController_SetFrameDataRestricted_Params_Data>;

  XRSessionController_SetFrameDataRestricted_Params_Data();
  ~XRSessionController_SetFrameDataRestricted_Params_Data() = delete;
};
static_assert(sizeof(XRSessionController_SetFrameDataRestricted_Params_Data) == 16,
              "Bad sizeof(XRSessionController_SetFrameDataRestricted_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t visibility_state;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data>;

  XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data();
  ~XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data() = delete;
};
static_assert(sizeof(XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data) == 16,
              "Bad sizeof(XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRRuntimeEventListener_OnExitPresent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<XRRuntimeEventListener_OnExitPresent_Params_Data>;

  XRRuntimeEventListener_OnExitPresent_Params_Data();
  ~XRRuntimeEventListener_OnExitPresent_Params_Data() = delete;
};
static_assert(sizeof(XRRuntimeEventListener_OnExitPresent_Params_Data) == 8,
              "Bad sizeof(XRRuntimeEventListener_OnExitPresent_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRRuntime_RequestSession_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::XRRuntimeSessionOptions_Data> options;

 private:
  friend class mojo::internal::MessageFragment<XRRuntime_RequestSession_Params_Data>;

  XRRuntime_RequestSession_Params_Data();
  ~XRRuntime_RequestSession_Params_Data() = delete;
};
static_assert(sizeof(XRRuntime_RequestSession_Params_Data) == 16,
              "Bad sizeof(XRRuntime_RequestSession_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRRuntime_RequestSession_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::XRRuntimeSessionResult_Data> session;

 private:
  friend class mojo::internal::MessageFragment<XRRuntime_RequestSession_ResponseParams_Data>;

  XRRuntime_RequestSession_ResponseParams_Data();
  ~XRRuntime_RequestSession_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRRuntime_RequestSession_ResponseParams_Data) == 16,
              "Bad sizeof(XRRuntime_RequestSession_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRRuntime_ShutdownSession_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<XRRuntime_ShutdownSession_Params_Data>;

  XRRuntime_ShutdownSession_Params_Data();
  ~XRRuntime_ShutdownSession_Params_Data() = delete;
};
static_assert(sizeof(XRRuntime_ShutdownSession_Params_Data) == 8,
              "Bad sizeof(XRRuntime_ShutdownSession_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRRuntime_ShutdownSession_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<XRRuntime_ShutdownSession_ResponseParams_Data>;

  XRRuntime_ShutdownSession_ResponseParams_Data();
  ~XRRuntime_ShutdownSession_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRRuntime_ShutdownSession_ResponseParams_Data) == 8,
              "Bad sizeof(XRRuntime_ShutdownSession_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRRuntime_ListenToDeviceChanges_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data listener;

 private:
  friend class mojo::internal::MessageFragment<XRRuntime_ListenToDeviceChanges_Params_Data>;

  XRRuntime_ListenToDeviceChanges_Params_Data();
  ~XRRuntime_ListenToDeviceChanges_Params_Data() = delete;
};
static_assert(sizeof(XRRuntime_ListenToDeviceChanges_Params_Data) == 16,
              "Bad sizeof(XRRuntime_ListenToDeviceChanges_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) ImmersiveOverlay_RequestNextOverlayPose_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ImmersiveOverlay_RequestNextOverlayPose_Params_Data>;

  ImmersiveOverlay_RequestNextOverlayPose_Params_Data();
  ~ImmersiveOverlay_RequestNextOverlayPose_Params_Data() = delete;
};
static_assert(sizeof(ImmersiveOverlay_RequestNextOverlayPose_Params_Data) == 8,
              "Bad sizeof(ImmersiveOverlay_RequestNextOverlayPose_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::XRRenderInfo_Data> render_info;

 private:
  friend class mojo::internal::MessageFragment<ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data>;

  ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data();
  ~ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data() = delete;
};
static_assert(sizeof(ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data) == 16,
              "Bad sizeof(ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) ImmersiveOverlay_SubmitOverlayTexture_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int16_t frame_id;
  uint8_t pad0_[2];
  mojo::internal::Handle_Data texture;
  mojo::internal::Pointer<::gpu::mojom::internal::SyncToken_Data> sync_token;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> left_bounds;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> right_bounds;

 private:
  friend class mojo::internal::MessageFragment<ImmersiveOverlay_SubmitOverlayTexture_Params_Data>;

  ImmersiveOverlay_SubmitOverlayTexture_Params_Data();
  ~ImmersiveOverlay_SubmitOverlayTexture_Params_Data() = delete;
};
static_assert(sizeof(ImmersiveOverlay_SubmitOverlayTexture_Params_Data) == 40,
              "Bad sizeof(ImmersiveOverlay_SubmitOverlayTexture_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data>;

  ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data();
  ~ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data() = delete;
};
static_assert(sizeof(ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data) == 16,
              "Bad sizeof(ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t overlay_visible : 1;
  uint8_t webxr_visible : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data>;

  ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data();
  ~ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data() = delete;
};
static_assert(sizeof(ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data) == 16,
              "Bad sizeof(ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data>;

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data();
  ~ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data() = delete;
};
static_assert(sizeof(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data) == 8,
              "Bad sizeof(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data>;

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data();
  ~ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data() = delete;
};
static_assert(sizeof(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data) == 8,
              "Bad sizeof(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRCompositorHost_CreateImmersiveOverlay_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data overlay;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<XRCompositorHost_CreateImmersiveOverlay_Params_Data>;

  XRCompositorHost_CreateImmersiveOverlay_Params_Data();
  ~XRCompositorHost_CreateImmersiveOverlay_Params_Data() = delete;
};
static_assert(sizeof(XRCompositorHost_CreateImmersiveOverlay_Params_Data) == 16,
              "Bad sizeof(XRCompositorHost_CreateImmersiveOverlay_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data runtime;
  mojo::internal::Interface_Data compositor_host;
  mojo::internal::Pointer<internal::XRDeviceData_Data> device_data;
  int32_t device_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data>;

  IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data();
  ~IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data() = delete;
};
static_assert(sizeof(IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data) == 40,
              "Bad sizeof(IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t device_index;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data>;

  IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data();
  ~IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data() = delete;
};
static_assert(sizeof(IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data) == 16,
              "Bad sizeof(IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data>;

  IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data();
  ~IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data() = delete;
};
static_assert(sizeof(IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data) == 8,
              "Bad sizeof(IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) IsolatedXRRuntimeProvider_RequestDevices_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<IsolatedXRRuntimeProvider_RequestDevices_Params_Data>;

  IsolatedXRRuntimeProvider_RequestDevices_Params_Data();
  ~IsolatedXRRuntimeProvider_RequestDevices_Params_Data() = delete;
};
static_assert(sizeof(IsolatedXRRuntimeProvider_RequestDevices_Params_Data) == 16,
              "Bad sizeof(IsolatedXRRuntimeProvider_RequestDevices_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRDeviceService_BindRuntimeProvider_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  mojo::internal::Interface_Data host;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<XRDeviceService_BindRuntimeProvider_Params_Data>;

  XRDeviceService_BindRuntimeProvider_Params_Data();
  ~XRDeviceService_BindRuntimeProvider_Params_Data() = delete;
};
static_assert(sizeof(XRDeviceService_BindRuntimeProvider_Params_Data) == 24,
              "Bad sizeof(XRDeviceService_BindRuntimeProvider_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRDeviceService_BindTestHook_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<XRDeviceService_BindTestHook_Params_Data>;

  XRDeviceService_BindTestHook_Params_Data();
  ~XRDeviceService_BindTestHook_Params_Data() = delete;
};
static_assert(sizeof(XRDeviceService_BindTestHook_Params_Data) == 16,
              "Bad sizeof(XRDeviceService_BindTestHook_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRDeviceServiceHost_BindGpu_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<XRDeviceServiceHost_BindGpu_Params_Data>;

  XRDeviceServiceHost_BindGpu_Params_Data();
  ~XRDeviceServiceHost_BindGpu_Params_Data() = delete;
};
static_assert(sizeof(XRDeviceServiceHost_BindGpu_Params_Data) == 16,
              "Bad sizeof(XRDeviceServiceHost_BindGpu_Params_Data)");

}  // namespace internal


class XRSessionController_SetFrameDataRestricted_ParamsDataView {
 public:
  XRSessionController_SetFrameDataRestricted_ParamsDataView() = default;

  XRSessionController_SetFrameDataRestricted_ParamsDataView(
      internal::XRSessionController_SetFrameDataRestricted_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool restricted() const {
    return data_->restricted;
  }
 private:
  internal::XRSessionController_SetFrameDataRestricted_Params_Data* data_ = nullptr;
};



class XRRuntimeEventListener_OnVisibilityStateChanged_ParamsDataView {
 public:
  XRRuntimeEventListener_OnVisibilityStateChanged_ParamsDataView() = default;

  XRRuntimeEventListener_OnVisibilityStateChanged_ParamsDataView(
      internal::XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadVisibilityState(UserType* output) const {
    auto data_value = data_->visibility_state;
    return mojo::internal::Deserialize<::device::mojom::XRVisibilityState>(
        data_value, output);
  }
  ::device::mojom::XRVisibilityState visibility_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::XRVisibilityState>(data_->visibility_state));
  }
 private:
  internal::XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data* data_ = nullptr;
};



class XRRuntimeEventListener_OnExitPresent_ParamsDataView {
 public:
  XRRuntimeEventListener_OnExitPresent_ParamsDataView() = default;

  XRRuntimeEventListener_OnExitPresent_ParamsDataView(
      internal::XRRuntimeEventListener_OnExitPresent_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::XRRuntimeEventListener_OnExitPresent_Params_Data* data_ = nullptr;
};



class XRRuntime_RequestSession_ParamsDataView {
 public:
  XRRuntime_RequestSession_ParamsDataView() = default;

  XRRuntime_RequestSession_ParamsDataView(
      internal::XRRuntime_RequestSession_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOptionsDataView(
      XRRuntimeSessionOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::device::mojom::XRRuntimeSessionOptionsDataView>(
        pointer, output, message_);
  }
 private:
  internal::XRRuntime_RequestSession_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class XRRuntime_RequestSession_ResponseParamsDataView {
 public:
  XRRuntime_RequestSession_ResponseParamsDataView() = default;

  XRRuntime_RequestSession_ResponseParamsDataView(
      internal::XRRuntime_RequestSession_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSessionDataView(
      XRRuntimeSessionResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSession(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::device::mojom::XRRuntimeSessionResultDataView, UserType>(),
    "Attempting to read the optional `session` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSession` instead "
    "of `ReadSession if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->session.Get();
    return mojo::internal::Deserialize<::device::mojom::XRRuntimeSessionResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::XRRuntime_RequestSession_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class XRRuntime_ShutdownSession_ParamsDataView {
 public:
  XRRuntime_ShutdownSession_ParamsDataView() = default;

  XRRuntime_ShutdownSession_ParamsDataView(
      internal::XRRuntime_ShutdownSession_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::XRRuntime_ShutdownSession_Params_Data* data_ = nullptr;
};



class XRRuntime_ShutdownSession_ResponseParamsDataView {
 public:
  XRRuntime_ShutdownSession_ResponseParamsDataView() = default;

  XRRuntime_ShutdownSession_ResponseParamsDataView(
      internal::XRRuntime_ShutdownSession_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::XRRuntime_ShutdownSession_ResponseParams_Data* data_ = nullptr;
};



class XRRuntime_ListenToDeviceChanges_ParamsDataView {
 public:
  XRRuntime_ListenToDeviceChanges_ParamsDataView() = default;

  XRRuntime_ListenToDeviceChanges_ParamsDataView(
      internal::XRRuntime_ListenToDeviceChanges_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeListener() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::device::mojom::XRRuntimeEventListenerAssociatedPtrInfoDataView>(
            &data_->listener, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::XRRuntime_ListenToDeviceChanges_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ImmersiveOverlay_RequestNextOverlayPose_ParamsDataView {
 public:
  ImmersiveOverlay_RequestNextOverlayPose_ParamsDataView() = default;

  ImmersiveOverlay_RequestNextOverlayPose_ParamsDataView(
      internal::ImmersiveOverlay_RequestNextOverlayPose_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ImmersiveOverlay_RequestNextOverlayPose_Params_Data* data_ = nullptr;
};



class ImmersiveOverlay_RequestNextOverlayPose_ResponseParamsDataView {
 public:
  ImmersiveOverlay_RequestNextOverlayPose_ResponseParamsDataView() = default;

  ImmersiveOverlay_RequestNextOverlayPose_ResponseParamsDataView(
      internal::ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRenderInfoDataView(
      XRRenderInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRenderInfo(UserType* output) {
    
    auto* pointer = data_->render_info.Get();
    return mojo::internal::Deserialize<::device::mojom::XRRenderInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ImmersiveOverlay_SubmitOverlayTexture_ParamsDataView {
 public:
  ImmersiveOverlay_SubmitOverlayTexture_ParamsDataView() = default;

  ImmersiveOverlay_SubmitOverlayTexture_ParamsDataView(
      internal::ImmersiveOverlay_SubmitOverlayTexture_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int16_t frame_id() const {
    return data_->frame_id;
  }
  mojo::PlatformHandle TakeTexture() {
    mojo::PlatformHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::PlatformHandle>(
            &data_->texture, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetSyncTokenDataView(
      ::gpu::mojom::SyncTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSyncToken(UserType* output) {
    
    auto* pointer = data_->sync_token.Get();
    return mojo::internal::Deserialize<::gpu::mojom::SyncTokenDataView>(
        pointer, output, message_);
  }
  inline void GetLeftBoundsDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLeftBounds(UserType* output) {
    
    auto* pointer = data_->left_bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
  inline void GetRightBoundsDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRightBounds(UserType* output) {
    
    auto* pointer = data_->right_bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
 private:
  internal::ImmersiveOverlay_SubmitOverlayTexture_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ImmersiveOverlay_SubmitOverlayTexture_ResponseParamsDataView {
 public:
  ImmersiveOverlay_SubmitOverlayTexture_ResponseParamsDataView() = default;

  ImmersiveOverlay_SubmitOverlayTexture_ResponseParamsDataView(
      internal::ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data* data_ = nullptr;
};



class ImmersiveOverlay_SetOverlayAndWebXRVisibility_ParamsDataView {
 public:
  ImmersiveOverlay_SetOverlayAndWebXRVisibility_ParamsDataView() = default;

  ImmersiveOverlay_SetOverlayAndWebXRVisibility_ParamsDataView(
      internal::ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool overlay_visible() const {
    return data_->overlay_visible;
  }
  bool webxr_visible() const {
    return data_->webxr_visible;
  }
 private:
  internal::ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data* data_ = nullptr;
};



class ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ParamsDataView {
 public:
  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ParamsDataView() = default;

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ParamsDataView(
      internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data* data_ = nullptr;
};



class ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParamsDataView {
 public:
  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParamsDataView() = default;

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParamsDataView(
      internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data* data_ = nullptr;
};



class XRCompositorHost_CreateImmersiveOverlay_ParamsDataView {
 public:
  XRCompositorHost_CreateImmersiveOverlay_ParamsDataView() = default;

  XRCompositorHost_CreateImmersiveOverlay_ParamsDataView(
      internal::XRCompositorHost_CreateImmersiveOverlay_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeOverlay() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::ImmersiveOverlayInterfaceBase>>(
            &data_->overlay, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::XRCompositorHost_CreateImmersiveOverlay_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IsolatedXRRuntimeProviderClient_OnDeviceAdded_ParamsDataView {
 public:
  IsolatedXRRuntimeProviderClient_OnDeviceAdded_ParamsDataView() = default;

  IsolatedXRRuntimeProviderClient_OnDeviceAdded_ParamsDataView(
      internal::IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeRuntime() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::XRRuntimeInterfaceBase>>(
            &data_->runtime, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeCompositorHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::XRCompositorHostInterfaceBase>>(
            &data_->compositor_host, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetDeviceDataDataView(
      XRDeviceDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceData(UserType* output) {
    
    auto* pointer = data_->device_data.Get();
    return mojo::internal::Deserialize<::device::mojom::XRDeviceDataDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) const {
    auto data_value = data_->device_id;
    return mojo::internal::Deserialize<::device::mojom::XRDeviceId>(
        data_value, output);
  }
  ::device::mojom::XRDeviceId device_id() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::XRDeviceId>(data_->device_id));
  }
 private:
  internal::IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IsolatedXRRuntimeProviderClient_OnDeviceRemoved_ParamsDataView {
 public:
  IsolatedXRRuntimeProviderClient_OnDeviceRemoved_ParamsDataView() = default;

  IsolatedXRRuntimeProviderClient_OnDeviceRemoved_ParamsDataView(
      internal::IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadDeviceIndex(UserType* output) const {
    auto data_value = data_->device_index;
    return mojo::internal::Deserialize<::device::mojom::XRDeviceId>(
        data_value, output);
  }
  ::device::mojom::XRDeviceId device_index() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::XRDeviceId>(data_->device_index));
  }
 private:
  internal::IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data* data_ = nullptr;
};



class IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_ParamsDataView {
 public:
  IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_ParamsDataView() = default;

  IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_ParamsDataView(
      internal::IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data* data_ = nullptr;
};



class IsolatedXRRuntimeProvider_RequestDevices_ParamsDataView {
 public:
  IsolatedXRRuntimeProvider_RequestDevices_ParamsDataView() = default;

  IsolatedXRRuntimeProvider_RequestDevices_ParamsDataView(
      internal::IsolatedXRRuntimeProvider_RequestDevices_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::IsolatedXRRuntimeProviderClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IsolatedXRRuntimeProvider_RequestDevices_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class XRDeviceService_BindRuntimeProvider_ParamsDataView {
 public:
  XRDeviceService_BindRuntimeProvider_ParamsDataView() = default;

  XRDeviceService_BindRuntimeProvider_ParamsDataView(
      internal::XRDeviceService_BindRuntimeProvider_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::IsolatedXRRuntimeProviderInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::XRDeviceServiceHostInterfaceBase>>(
            &data_->host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::XRDeviceService_BindRuntimeProvider_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class XRDeviceService_BindTestHook_ParamsDataView {
 public:
  XRDeviceService_BindTestHook_ParamsDataView() = default;

  XRDeviceService_BindTestHook_ParamsDataView(
      internal::XRDeviceService_BindTestHook_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device_test::mojom::XRServiceTestHookInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::XRDeviceService_BindTestHook_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class XRDeviceServiceHost_BindGpu_ParamsDataView {
 public:
  XRDeviceServiceHost_BindGpu_ParamsDataView() = default;

  XRDeviceServiceHost_BindGpu_ParamsDataView(
      internal::XRDeviceServiceHost_BindGpu_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::viz::mojom::GpuInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::XRDeviceServiceHost_BindGpu_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};








inline void XRRuntime_RequestSession_ParamsDataView::GetOptionsDataView(
    XRRuntimeSessionOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = XRRuntimeSessionOptionsDataView(pointer, message_);
}


inline void XRRuntime_RequestSession_ResponseParamsDataView::GetSessionDataView(
    XRRuntimeSessionResultDataView* output) {
  auto pointer = data_->session.Get();
  *output = XRRuntimeSessionResultDataView(pointer, message_);
}










inline void ImmersiveOverlay_RequestNextOverlayPose_ResponseParamsDataView::GetRenderInfoDataView(
    XRRenderInfoDataView* output) {
  auto pointer = data_->render_info.Get();
  *output = XRRenderInfoDataView(pointer, message_);
}


inline void ImmersiveOverlay_SubmitOverlayTexture_ParamsDataView::GetSyncTokenDataView(
    ::gpu::mojom::SyncTokenDataView* output) {
  auto pointer = data_->sync_token.Get();
  *output = ::gpu::mojom::SyncTokenDataView(pointer, message_);
}
inline void ImmersiveOverlay_SubmitOverlayTexture_ParamsDataView::GetLeftBoundsDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->left_bounds.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}
inline void ImmersiveOverlay_SubmitOverlayTexture_ParamsDataView::GetRightBoundsDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->right_bounds.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}












inline void IsolatedXRRuntimeProviderClient_OnDeviceAdded_ParamsDataView::GetDeviceDataDataView(
    XRDeviceDataDataView* output) {
  auto pointer = data_->device_data.Get();
  *output = XRDeviceDataDataView(pointer, message_);
}













}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // DEVICE_VR_PUBLIC_MOJOM_ISOLATED_XR_SERVICE_MOJOM_PARAMS_DATA_H_