// device/vr/public/mojom/isolated_xr_service.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_VR_PUBLIC_MOJOM_ISOLATED_XR_SERVICE_MOJOM_SHARED_H_
#define DEVICE_VR_PUBLIC_MOJOM_ISOLATED_XR_SERVICE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "device/vr/public/mojom/isolated_xr_service.mojom-shared-internal.h"
#include "device/vr/public/mojom/browser_test_interfaces.mojom-shared.h"
#include "device/vr/public/mojom/vr_service.mojom-shared.h"
#include "gpu/ipc/common/sync_token.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "sandbox/policy/mojom/sandbox.mojom-shared.h"
#include "services/viz/public/mojom/compositing/frame_sink_id.mojom-shared.h"
#include "services/viz/public/mojom/gpu.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace device {
namespace mojom {
class XRRuntimeSessionOptionsDataView;

class XRRuntimeSessionResultDataView;

class XRRenderInfoDataView;

class XRDeviceDataDataView;



}  // namespace mojom
}  // namespace device

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::device::mojom::XRRuntimeSessionOptionsDataView> {
  using Data = ::device::mojom::internal::XRRuntimeSessionOptions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::device::mojom::XRRuntimeSessionResultDataView> {
  using Data = ::device::mojom::internal::XRRuntimeSessionResult_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::device::mojom::XRRenderInfoDataView> {
  using Data = ::device::mojom::internal::XRRenderInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::device::mojom::XRDeviceDataDataView> {
  using Data = ::device::mojom::internal::XRDeviceData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace device {
namespace mojom {
// Interface base classes. They are used for type safety check.
class XRSessionControllerInterfaceBase {};

using XRSessionControllerPtrDataView =
    mojo::InterfacePtrDataView<XRSessionControllerInterfaceBase>;
using XRSessionControllerRequestDataView =
    mojo::InterfaceRequestDataView<XRSessionControllerInterfaceBase>;
using XRSessionControllerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<XRSessionControllerInterfaceBase>;
using XRSessionControllerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<XRSessionControllerInterfaceBase>;
class XRRuntimeEventListenerInterfaceBase {};

using XRRuntimeEventListenerPtrDataView =
    mojo::InterfacePtrDataView<XRRuntimeEventListenerInterfaceBase>;
using XRRuntimeEventListenerRequestDataView =
    mojo::InterfaceRequestDataView<XRRuntimeEventListenerInterfaceBase>;
using XRRuntimeEventListenerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<XRRuntimeEventListenerInterfaceBase>;
using XRRuntimeEventListenerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<XRRuntimeEventListenerInterfaceBase>;
class XRRuntimeInterfaceBase {};

using XRRuntimePtrDataView =
    mojo::InterfacePtrDataView<XRRuntimeInterfaceBase>;
using XRRuntimeRequestDataView =
    mojo::InterfaceRequestDataView<XRRuntimeInterfaceBase>;
using XRRuntimeAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<XRRuntimeInterfaceBase>;
using XRRuntimeAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<XRRuntimeInterfaceBase>;
class ImmersiveOverlayInterfaceBase {};

using ImmersiveOverlayPtrDataView =
    mojo::InterfacePtrDataView<ImmersiveOverlayInterfaceBase>;
using ImmersiveOverlayRequestDataView =
    mojo::InterfaceRequestDataView<ImmersiveOverlayInterfaceBase>;
using ImmersiveOverlayAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ImmersiveOverlayInterfaceBase>;
using ImmersiveOverlayAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ImmersiveOverlayInterfaceBase>;
class XRCompositorHostInterfaceBase {};

using XRCompositorHostPtrDataView =
    mojo::InterfacePtrDataView<XRCompositorHostInterfaceBase>;
using XRCompositorHostRequestDataView =
    mojo::InterfaceRequestDataView<XRCompositorHostInterfaceBase>;
using XRCompositorHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<XRCompositorHostInterfaceBase>;
using XRCompositorHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<XRCompositorHostInterfaceBase>;
class IsolatedXRRuntimeProviderClientInterfaceBase {};

using IsolatedXRRuntimeProviderClientPtrDataView =
    mojo::InterfacePtrDataView<IsolatedXRRuntimeProviderClientInterfaceBase>;
using IsolatedXRRuntimeProviderClientRequestDataView =
    mojo::InterfaceRequestDataView<IsolatedXRRuntimeProviderClientInterfaceBase>;
using IsolatedXRRuntimeProviderClientAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<IsolatedXRRuntimeProviderClientInterfaceBase>;
using IsolatedXRRuntimeProviderClientAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<IsolatedXRRuntimeProviderClientInterfaceBase>;
class IsolatedXRRuntimeProviderInterfaceBase {};

using IsolatedXRRuntimeProviderPtrDataView =
    mojo::InterfacePtrDataView<IsolatedXRRuntimeProviderInterfaceBase>;
using IsolatedXRRuntimeProviderRequestDataView =
    mojo::InterfaceRequestDataView<IsolatedXRRuntimeProviderInterfaceBase>;
using IsolatedXRRuntimeProviderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<IsolatedXRRuntimeProviderInterfaceBase>;
using IsolatedXRRuntimeProviderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<IsolatedXRRuntimeProviderInterfaceBase>;
class XRDeviceServiceInterfaceBase {};

using XRDeviceServicePtrDataView =
    mojo::InterfacePtrDataView<XRDeviceServiceInterfaceBase>;
using XRDeviceServiceRequestDataView =
    mojo::InterfaceRequestDataView<XRDeviceServiceInterfaceBase>;
using XRDeviceServiceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<XRDeviceServiceInterfaceBase>;
using XRDeviceServiceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<XRDeviceServiceInterfaceBase>;
class XRDeviceServiceHostInterfaceBase {};

using XRDeviceServiceHostPtrDataView =
    mojo::InterfacePtrDataView<XRDeviceServiceHostInterfaceBase>;
using XRDeviceServiceHostRequestDataView =
    mojo::InterfaceRequestDataView<XRDeviceServiceHostInterfaceBase>;
using XRDeviceServiceHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<XRDeviceServiceHostInterfaceBase>;
using XRDeviceServiceHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<XRDeviceServiceHostInterfaceBase>;


class XRRuntimeSessionOptionsDataView {
 public:
  XRRuntimeSessionOptionsDataView() = default;

  XRRuntimeSessionOptionsDataView(
      internal::XRRuntimeSessionOptions_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadMode(UserType* output) const {
    auto data_value = data_->mode;
    return mojo::internal::Deserialize<::device::mojom::XRSessionMode>(
        data_value, output);
  }
  ::device::mojom::XRSessionMode mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::XRSessionMode>(data_->mode));
  }
  inline void GetRequiredFeaturesDataView(
      mojo::ArrayDataView<::device::mojom::XRSessionFeature>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequiredFeatures(UserType* output) {
    
    auto* pointer = data_->required_features.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::XRSessionFeature>>(
        pointer, output, message_);
  }
  inline void GetOptionalFeaturesDataView(
      mojo::ArrayDataView<::device::mojom::XRSessionFeature>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptionalFeatures(UserType* output) {
    
    auto* pointer = data_->optional_features.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::XRSessionFeature>>(
        pointer, output, message_);
  }
  int32_t render_process_id() const {
    return data_->render_process_id;
  }
  int32_t render_frame_id() const {
    return data_->render_frame_id;
  }
  inline void GetTrackedImagesDataView(
      mojo::ArrayDataView<::device::mojom::XRTrackedImageDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTrackedImages(UserType* output) {
    
    auto* pointer = data_->tracked_images.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::XRTrackedImageDataView>>(
        pointer, output, message_);
  }
  inline void GetDepthOptionsDataView(
      ::device::mojom::XRDepthOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDepthOptions(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::device::mojom::XRDepthOptionsDataView, UserType>(),
    "Attempting to read the optional `depth_options` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadDepthOptions` instead "
    "of `ReadDepthOptions if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->depth_options.Get();
    return mojo::internal::Deserialize<::device::mojom::XRDepthOptionsDataView>(
        pointer, output, message_);
  }
  uint64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::XRRuntimeSessionOptions_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class XRRuntimeSessionResultDataView {
 public:
  XRRuntimeSessionResultDataView() = default;

  XRRuntimeSessionResultDataView(
      internal::XRRuntimeSessionResult_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeController() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::XRSessionControllerInterfaceBase>>(
            &data_->controller, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetSessionDataView(
      ::device::mojom::XRSessionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSession(UserType* output) {
    
    auto* pointer = data_->session.Get();
    return mojo::internal::Deserialize<::device::mojom::XRSessionDataView>(
        pointer, output, message_);
  }
  inline void GetFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameSinkId(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::viz::mojom::FrameSinkIdDataView, UserType>(),
    "Attempting to read the optional `frame_sink_id` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFrameSinkId` instead "
    "of `ReadFrameSinkId if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::XRRuntimeSessionResult_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class XRRenderInfoDataView {
 public:
  XRRenderInfoDataView() = default;

  XRRenderInfoDataView(
      internal::XRRenderInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int16_t frame_id() const {
    return data_->frame_id;
  }
  inline void GetMojoFromViewerDataView(
      ::device::mojom::VRPoseDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMojoFromViewer(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::device::mojom::VRPoseDataView, UserType>(),
    "Attempting to read the optional `mojo_from_viewer` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadMojoFromViewer` instead "
    "of `ReadMojoFromViewer if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->mojo_from_viewer.Get();
    return mojo::internal::Deserialize<::device::mojom::VRPoseDataView>(
        pointer, output, message_);
  }
  inline void GetViewsDataView(
      mojo::ArrayDataView<::device::mojom::XRViewDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadViews(UserType* output) {
    
    auto* pointer = data_->views.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::XRViewDataView>>(
        pointer, output, message_);
  }
 private:
  internal::XRRenderInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class XRDeviceDataDataView {
 public:
  XRDeviceDataDataView() = default;

  XRDeviceDataDataView(
      internal::XRDeviceData_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSupportedFeaturesDataView(
      mojo::ArrayDataView<::device::mojom::XRSessionFeature>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSupportedFeatures(UserType* output) {
    
    auto* pointer = data_->supported_features.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::XRSessionFeature>>(
        pointer, output, message_);
  }
  bool is_ar_blend_mode_supported() const {
    return data_->is_ar_blend_mode_supported;
  }
 private:
  internal::XRDeviceData_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace device

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::device::mojom::XRRuntimeSessionOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::device::mojom::XRRuntimeSessionOptionsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::device::mojom::internal::XRRuntimeSessionOptions_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::device::mojom::XRSessionMode>(
        Traits::mode(input), &fragment->mode);
    decltype(Traits::required_features(input)) in_required_features = Traits::required_features(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->required_features)::BaseType>
        required_features_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams required_features_validate_params(
        0, ::device::mojom::internal::XRSessionFeature_Data::Validate);
    mojo::internal::Serialize<mojo::ArrayDataView<::device::mojom::XRSessionFeature>>(
        in_required_features, required_features_fragment, &required_features_validate_params);
    fragment->required_features.Set(
        required_features_fragment.is_null() ? nullptr : required_features_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->required_features.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null required_features in XRRuntimeSessionOptions struct");
    decltype(Traits::optional_features(input)) in_optional_features = Traits::optional_features(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->optional_features)::BaseType>
        optional_features_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams optional_features_validate_params(
        0, ::device::mojom::internal::XRSessionFeature_Data::Validate);
    mojo::internal::Serialize<mojo::ArrayDataView<::device::mojom::XRSessionFeature>>(
        in_optional_features, optional_features_fragment, &optional_features_validate_params);
    fragment->optional_features.Set(
        optional_features_fragment.is_null() ? nullptr : optional_features_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->optional_features.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null optional_features in XRRuntimeSessionOptions struct");
    fragment->render_process_id = Traits::render_process_id(input);
    fragment->render_frame_id = Traits::render_frame_id(input);
    decltype(Traits::tracked_images(input)) in_tracked_images = Traits::tracked_images(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->tracked_images)::BaseType>
        tracked_images_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams tracked_images_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::device::mojom::XRTrackedImageDataView>>(
        in_tracked_images, tracked_images_fragment, &tracked_images_validate_params);
    fragment->tracked_images.Set(
        tracked_images_fragment.is_null() ? nullptr : tracked_images_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->tracked_images.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null tracked_images in XRRuntimeSessionOptions struct");
    decltype(Traits::depth_options(input)) in_depth_options = Traits::depth_options(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->depth_options)::BaseType> depth_options_fragment(
            fragment.message());
    mojo::internal::Serialize<::device::mojom::XRDepthOptionsDataView>(
        in_depth_options, depth_options_fragment);
    fragment->depth_options.Set(
        depth_options_fragment.is_null() ? nullptr : depth_options_fragment.data());
    fragment->trace_id = Traits::trace_id(input);
  }

  static bool Deserialize(::device::mojom::internal::XRRuntimeSessionOptions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::device::mojom::XRRuntimeSessionOptionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::device::mojom::XRRuntimeSessionResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::device::mojom::XRRuntimeSessionResultDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::device::mojom::internal::XRRuntimeSessionResult_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::controller(input)) in_controller = Traits::controller(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::device::mojom::XRSessionControllerInterfaceBase>>(
        in_controller, &fragment->controller, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->controller),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid controller in XRRuntimeSessionResult struct");
    decltype(Traits::session(input)) in_session = Traits::session(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->session)::BaseType> session_fragment(
            fragment.message());
    mojo::internal::Serialize<::device::mojom::XRSessionDataView>(
        in_session, session_fragment);
    fragment->session.Set(
        session_fragment.is_null() ? nullptr : session_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->session.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null session in XRRuntimeSessionResult struct");
    decltype(Traits::frame_sink_id(input)) in_frame_sink_id = Traits::frame_sink_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->frame_sink_id)::BaseType> frame_sink_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::FrameSinkIdDataView>(
        in_frame_sink_id, frame_sink_id_fragment);
    fragment->frame_sink_id.Set(
        frame_sink_id_fragment.is_null() ? nullptr : frame_sink_id_fragment.data());
  }

  static bool Deserialize(::device::mojom::internal::XRRuntimeSessionResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::device::mojom::XRRuntimeSessionResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::device::mojom::XRRenderInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::device::mojom::XRRenderInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::device::mojom::internal::XRRenderInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->frame_id = Traits::frame_id(input);
    decltype(Traits::mojo_from_viewer(input)) in_mojo_from_viewer = Traits::mojo_from_viewer(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->mojo_from_viewer)::BaseType> mojo_from_viewer_fragment(
            fragment.message());
    mojo::internal::Serialize<::device::mojom::VRPoseDataView>(
        in_mojo_from_viewer, mojo_from_viewer_fragment);
    fragment->mojo_from_viewer.Set(
        mojo_from_viewer_fragment.is_null() ? nullptr : mojo_from_viewer_fragment.data());
    decltype(Traits::views(input)) in_views = Traits::views(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->views)::BaseType>
        views_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams views_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::device::mojom::XRViewDataView>>(
        in_views, views_fragment, &views_validate_params);
    fragment->views.Set(
        views_fragment.is_null() ? nullptr : views_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->views.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null views in XRRenderInfo struct");
  }

  static bool Deserialize(::device::mojom::internal::XRRenderInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::device::mojom::XRRenderInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::device::mojom::XRDeviceDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::device::mojom::XRDeviceDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::device::mojom::internal::XRDeviceData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::supported_features(input)) in_supported_features = Traits::supported_features(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->supported_features)::BaseType>
        supported_features_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams supported_features_validate_params(
        0, ::device::mojom::internal::XRSessionFeature_Data::Validate);
    mojo::internal::Serialize<mojo::ArrayDataView<::device::mojom::XRSessionFeature>>(
        in_supported_features, supported_features_fragment, &supported_features_validate_params);
    fragment->supported_features.Set(
        supported_features_fragment.is_null() ? nullptr : supported_features_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->supported_features.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null supported_features in XRDeviceData struct");
    fragment->is_ar_blend_mode_supported = Traits::is_ar_blend_mode_supported(input);
  }

  static bool Deserialize(::device::mojom::internal::XRDeviceData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::device::mojom::XRDeviceDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace device {
namespace mojom {

inline void XRRuntimeSessionOptionsDataView::GetRequiredFeaturesDataView(
    mojo::ArrayDataView<::device::mojom::XRSessionFeature>* output) {
  auto pointer = data_->required_features.Get();
  *output = mojo::ArrayDataView<::device::mojom::XRSessionFeature>(pointer, message_);
}
inline void XRRuntimeSessionOptionsDataView::GetOptionalFeaturesDataView(
    mojo::ArrayDataView<::device::mojom::XRSessionFeature>* output) {
  auto pointer = data_->optional_features.Get();
  *output = mojo::ArrayDataView<::device::mojom::XRSessionFeature>(pointer, message_);
}
inline void XRRuntimeSessionOptionsDataView::GetTrackedImagesDataView(
    mojo::ArrayDataView<::device::mojom::XRTrackedImageDataView>* output) {
  auto pointer = data_->tracked_images.Get();
  *output = mojo::ArrayDataView<::device::mojom::XRTrackedImageDataView>(pointer, message_);
}
inline void XRRuntimeSessionOptionsDataView::GetDepthOptionsDataView(
    ::device::mojom::XRDepthOptionsDataView* output) {
  auto pointer = data_->depth_options.Get();
  *output = ::device::mojom::XRDepthOptionsDataView(pointer, message_);
}


inline void XRRuntimeSessionResultDataView::GetSessionDataView(
    ::device::mojom::XRSessionDataView* output) {
  auto pointer = data_->session.Get();
  *output = ::device::mojom::XRSessionDataView(pointer, message_);
}
inline void XRRuntimeSessionResultDataView::GetFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, message_);
}


inline void XRRenderInfoDataView::GetMojoFromViewerDataView(
    ::device::mojom::VRPoseDataView* output) {
  auto pointer = data_->mojo_from_viewer.Get();
  *output = ::device::mojom::VRPoseDataView(pointer, message_);
}
inline void XRRenderInfoDataView::GetViewsDataView(
    mojo::ArrayDataView<::device::mojom::XRViewDataView>* output) {
  auto pointer = data_->views.Get();
  *output = mojo::ArrayDataView<::device::mojom::XRViewDataView>(pointer, message_);
}


inline void XRDeviceDataDataView::GetSupportedFeaturesDataView(
    mojo::ArrayDataView<::device::mojom::XRSessionFeature>* output) {
  auto pointer = data_->supported_features.Get();
  *output = mojo::ArrayDataView<::device::mojom::XRSessionFeature>(pointer, message_);
}



}  // namespace mojom
}  // namespace device

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // DEVICE_VR_PUBLIC_MOJOM_ISOLATED_XR_SERVICE_MOJOM_SHARED_H_