// mojom-webui/chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom-webui.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '//resources/mojo/mojo/public/js/bindings.js';

import {
  AdapterRemote as bluetooth_mojom_AdapterRemote,
  AdapterPendingReceiver as bluetooth_mojom_AdapterPendingReceiver
} from './adapter.mojom-webui.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class DebugLogsChangeHandlerPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojom.DebugLogsChangeHandler', scope);
  }
}

/** @interface */
export class DebugLogsChangeHandlerInterface {
  
  /**
   * @param { !boolean } shouldDebugLogsBeEnabled
   */

  changeDebugLogsState(shouldDebugLogsBeEnabled) {}
}

/**
 * @implements { DebugLogsChangeHandlerInterface }
 */
export class DebugLogsChangeHandlerRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!DebugLogsChangeHandlerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          DebugLogsChangeHandlerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!DebugLogsChangeHandlerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !boolean } shouldDebugLogsBeEnabled
   */

  changeDebugLogsState(
      shouldDebugLogsBeEnabled) {
    this.proxy.sendMessage(
        0,
        DebugLogsChangeHandler_ChangeDebugLogsState_ParamsSpec.$,
        null,
        [
          shouldDebugLogsBeEnabled
        ]);
  }
}

/**
 * An object which receives request messages for the DebugLogsChangeHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class DebugLogsChangeHandlerReceiver {
  /**
   * @param {!DebugLogsChangeHandlerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!DebugLogsChangeHandlerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        DebugLogsChangeHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!DebugLogsChangeHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        DebugLogsChangeHandler_ChangeDebugLogsState_ParamsSpec.$,
        null,
        impl.changeDebugLogsState.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class DebugLogsChangeHandler {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojom.DebugLogsChangeHandler";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!DebugLogsChangeHandlerRemote}
   */
  static getRemote() {
    let remote = new DebugLogsChangeHandlerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the DebugLogsChangeHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class DebugLogsChangeHandlerCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      DebugLogsChangeHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!DebugLogsChangeHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.changeDebugLogsState =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        DebugLogsChangeHandler_ChangeDebugLogsState_ParamsSpec.$,
        null,
        this.changeDebugLogsState.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class BluetoothInternalsHandlerPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mojom.BluetoothInternalsHandler', scope);
  }
}

/** @interface */
export class BluetoothInternalsHandlerInterface {
  
  /**
   * @return {!Promise<{
        adapter: ?bluetooth_mojom_AdapterRemote,
   *  }>}
   */

  getAdapter() {}
  
  /**
   * @return {!Promise<{
        handler: ?DebugLogsChangeHandlerRemote,
        initialToggleValue: !boolean,
   *  }>}
   */

  getDebugLogsChangeHandler() {}
}

/**
 * @implements { BluetoothInternalsHandlerInterface }
 */
export class BluetoothInternalsHandlerRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!BluetoothInternalsHandlerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          BluetoothInternalsHandlerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!BluetoothInternalsHandlerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        adapter: ?bluetooth_mojom_AdapterRemote,
   *  }>}
   */

  getAdapter() {
    return this.proxy.sendMessage(
        0,
        BluetoothInternalsHandler_GetAdapter_ParamsSpec.$,
        BluetoothInternalsHandler_GetAdapter_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @return {!Promise<{
        handler: ?DebugLogsChangeHandlerRemote,
        initialToggleValue: !boolean,
   *  }>}
   */

  getDebugLogsChangeHandler() {
    return this.proxy.sendMessage(
        1,
        BluetoothInternalsHandler_GetDebugLogsChangeHandler_ParamsSpec.$,
        BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParamsSpec.$,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the BluetoothInternalsHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class BluetoothInternalsHandlerReceiver {
  /**
   * @param {!BluetoothInternalsHandlerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!BluetoothInternalsHandlerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        BluetoothInternalsHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!BluetoothInternalsHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        BluetoothInternalsHandler_GetAdapter_ParamsSpec.$,
        BluetoothInternalsHandler_GetAdapter_ResponseParamsSpec.$,
        impl.getAdapter.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        BluetoothInternalsHandler_GetDebugLogsChangeHandler_ParamsSpec.$,
        BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParamsSpec.$,
        impl.getDebugLogsChangeHandler.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class BluetoothInternalsHandler {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojom.BluetoothInternalsHandler";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!BluetoothInternalsHandlerRemote}
   */
  static getRemote() {
    let remote = new BluetoothInternalsHandlerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the BluetoothInternalsHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class BluetoothInternalsHandlerCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      BluetoothInternalsHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!BluetoothInternalsHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAdapter =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        BluetoothInternalsHandler_GetAdapter_ParamsSpec.$,
        BluetoothInternalsHandler_GetAdapter_ResponseParamsSpec.$,
        this.getAdapter.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getDebugLogsChangeHandler =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        BluetoothInternalsHandler_GetDebugLogsChangeHandler_ParamsSpec.$,
        BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParamsSpec.$,
        this.getDebugLogsChangeHandler.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const DebugLogsChangeHandler_ChangeDebugLogsState_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BluetoothInternalsHandler_GetAdapter_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BluetoothInternalsHandler_GetAdapter_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BluetoothInternalsHandler_GetDebugLogsChangeHandler_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    DebugLogsChangeHandler_ChangeDebugLogsState_ParamsSpec.$,
    'DebugLogsChangeHandler_ChangeDebugLogsState_Params',
    [
      mojo.internal.StructField(
        'shouldDebugLogsBeEnabled', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class DebugLogsChangeHandler_ChangeDebugLogsState_Params {
  constructor() {
    /** @type { !boolean } */
    this.shouldDebugLogsBeEnabled;
  }
}



mojo.internal.Struct(
    BluetoothInternalsHandler_GetAdapter_ParamsSpec.$,
    'BluetoothInternalsHandler_GetAdapter_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class BluetoothInternalsHandler_GetAdapter_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    BluetoothInternalsHandler_GetAdapter_ResponseParamsSpec.$,
    'BluetoothInternalsHandler_GetAdapter_ResponseParams',
    [
      mojo.internal.StructField(
        'adapter', 0,
        0,
        mojo.internal.InterfaceProxy(bluetooth_mojom_AdapterRemote),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class BluetoothInternalsHandler_GetAdapter_ResponseParams {
  constructor() {
    /** @type { (bluetooth_mojom_AdapterRemote|undefined) } */
    this.adapter;
  }
}



mojo.internal.Struct(
    BluetoothInternalsHandler_GetDebugLogsChangeHandler_ParamsSpec.$,
    'BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParamsSpec.$,
    'BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams',
    [
      mojo.internal.StructField(
        'handler', 0,
        0,
        mojo.internal.InterfaceProxy(DebugLogsChangeHandlerRemote),
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'initialToggleValue', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams {
  constructor() {
    /** @type { (DebugLogsChangeHandlerRemote|undefined) } */
    this.handler;
    /** @type { !boolean } */
    this.initialToggleValue;
  }
}

