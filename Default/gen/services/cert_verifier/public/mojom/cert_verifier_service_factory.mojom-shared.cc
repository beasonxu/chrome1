// services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-params-data.h"
namespace cert_verifier {
namespace mojom {

namespace internal {


// static
bool CertVerifierCreationParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CertVerifierCreationParams_Data* object =
      static_cast<const CertVerifierCreationParams_Data*>(data);

  return true;
}

CertVerifierCreationParams_Data::CertVerifierCreationParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ChromeRootStore_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ChromeRootStore_Data* object =
      static_cast<const ChromeRootStore_Data*>(data);

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->serialized_proto_root_store, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->serialized_proto_root_store, validation_context))
    return false;

  return true;
}

ChromeRootStore_Data::ChromeRootStore_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ChromeRootCertInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ChromeRootCertInfo_Data* object =
      static_cast<const ChromeRootCertInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->name, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->name, validation_context,
                                         &name_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->sha256hash_hex, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams sha256hash_hex_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->sha256hash_hex, validation_context,
                                         &sha256hash_hex_validate_params)) {
    return false;
  }

  return true;
}

ChromeRootCertInfo_Data::ChromeRootCertInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ChromeRootStoreInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ChromeRootStoreInfo_Data* object =
      static_cast<const ChromeRootStoreInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->root_cert_info, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams root_cert_info_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->root_cert_info, validation_context,
                                         &root_cert_info_validate_params)) {
    return false;
  }

  return true;
}

ChromeRootStoreInfo_Data::ChromeRootStoreInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CertVerifierServiceFactory_GetNewCertVerifier_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CertVerifierServiceFactory_GetNewCertVerifier_Params_Data* object =
      static_cast<const CertVerifierServiceFactory_GetNewCertVerifier_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->creation_params, validation_context))
    return false;

  return true;
}

CertVerifierServiceFactory_GetNewCertVerifier_Params_Data::CertVerifierServiceFactory_GetNewCertVerifier_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace cert_verifier