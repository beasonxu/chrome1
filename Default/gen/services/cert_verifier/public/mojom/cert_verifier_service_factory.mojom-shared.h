// services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_SHARED_H_
#define SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-shared-internal.h"
#include "mojo/public/mojom/base/big_buffer.mojom-shared.h"
#include "mojo/public/mojom/base/file_path.mojom-shared.h"
#include "services/network/public/mojom/cert_verifier_service.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace cert_verifier {
namespace mojom {
class CertVerifierCreationParamsDataView;

class ChromeRootStoreDataView;

class ChromeRootCertInfoDataView;

class ChromeRootStoreInfoDataView;



}  // namespace mojom
}  // namespace cert_verifier

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::cert_verifier::mojom::CertVerifierCreationParamsDataView> {
  using Data = ::cert_verifier::mojom::internal::CertVerifierCreationParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::cert_verifier::mojom::ChromeRootStoreDataView> {
  using Data = ::cert_verifier::mojom::internal::ChromeRootStore_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::cert_verifier::mojom::ChromeRootCertInfoDataView> {
  using Data = ::cert_verifier::mojom::internal::ChromeRootCertInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::cert_verifier::mojom::ChromeRootStoreInfoDataView> {
  using Data = ::cert_verifier::mojom::internal::ChromeRootStoreInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace cert_verifier {
namespace mojom {
// Interface base classes. They are used for type safety check.
class CertVerifierServiceFactoryInterfaceBase {};

using CertVerifierServiceFactoryPtrDataView =
    mojo::InterfacePtrDataView<CertVerifierServiceFactoryInterfaceBase>;
using CertVerifierServiceFactoryRequestDataView =
    mojo::InterfaceRequestDataView<CertVerifierServiceFactoryInterfaceBase>;
using CertVerifierServiceFactoryAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CertVerifierServiceFactoryInterfaceBase>;
using CertVerifierServiceFactoryAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CertVerifierServiceFactoryInterfaceBase>;


class CertVerifierCreationParamsDataView {
 public:
  CertVerifierCreationParamsDataView() = default;

  CertVerifierCreationParamsDataView(
      internal::CertVerifierCreationParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CertVerifierCreationParams_Data* data_ = nullptr;
};



class ChromeRootStoreDataView {
 public:
  ChromeRootStoreDataView() = default;

  ChromeRootStoreDataView(
      internal::ChromeRootStore_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSerializedProtoRootStoreDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSerializedProtoRootStore(UserType* output) {
    
    auto* pointer = !data_->serialized_proto_root_store.is_null() ? &data_->serialized_proto_root_store : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::ChromeRootStore_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ChromeRootCertInfoDataView {
 public:
  ChromeRootCertInfoDataView() = default;

  ChromeRootCertInfoDataView(
      internal::ChromeRootCertInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSha256hashHexDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSha256hashHex(UserType* output) {
    
    auto* pointer = data_->sha256hash_hex.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ChromeRootCertInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ChromeRootStoreInfoDataView {
 public:
  ChromeRootStoreInfoDataView() = default;

  ChromeRootStoreInfoDataView(
      internal::ChromeRootStoreInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t version() const {
    return data_->version;
  }
  inline void GetRootCertInfoDataView(
      mojo::ArrayDataView<ChromeRootCertInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRootCertInfo(UserType* output) {
    
    auto* pointer = data_->root_cert_info.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::cert_verifier::mojom::ChromeRootCertInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ChromeRootStoreInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace cert_verifier

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::cert_verifier::mojom::CertVerifierCreationParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::cert_verifier::mojom::CertVerifierCreationParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::cert_verifier::mojom::internal::CertVerifierCreationParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
  }

  static bool Deserialize(::cert_verifier::mojom::internal::CertVerifierCreationParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::cert_verifier::mojom::CertVerifierCreationParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::cert_verifier::mojom::ChromeRootStoreDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::cert_verifier::mojom::ChromeRootStoreDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::cert_verifier::mojom::internal::ChromeRootStore_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::serialized_proto_root_store(input)) in_serialized_proto_root_store = Traits::serialized_proto_root_store(input);
    mojo::internal::MessageFragment<decltype(fragment->serialized_proto_root_store)>
        serialized_proto_root_store_fragment(fragment.message());
    serialized_proto_root_store_fragment.Claim(&fragment->serialized_proto_root_store);
    mojo::internal::Serialize<::mojo_base::mojom::BigBufferDataView>(
        in_serialized_proto_root_store, serialized_proto_root_store_fragment, true);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->serialized_proto_root_store.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null serialized_proto_root_store in ChromeRootStore struct");
  }

  static bool Deserialize(::cert_verifier::mojom::internal::ChromeRootStore_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::cert_verifier::mojom::ChromeRootStoreDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::cert_verifier::mojom::ChromeRootCertInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::cert_verifier::mojom::ChromeRootCertInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::cert_verifier::mojom::internal::ChromeRootCertInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::name(input)) in_name = Traits::name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name)::BaseType> name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, name_fragment);
    fragment->name.Set(
        name_fragment.is_null() ? nullptr : name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in ChromeRootCertInfo struct");
    decltype(Traits::sha256hash_hex(input)) in_sha256hash_hex = Traits::sha256hash_hex(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->sha256hash_hex)::BaseType> sha256hash_hex_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_sha256hash_hex, sha256hash_hex_fragment);
    fragment->sha256hash_hex.Set(
        sha256hash_hex_fragment.is_null() ? nullptr : sha256hash_hex_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->sha256hash_hex.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null sha256hash_hex in ChromeRootCertInfo struct");
  }

  static bool Deserialize(::cert_verifier::mojom::internal::ChromeRootCertInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::cert_verifier::mojom::ChromeRootCertInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::cert_verifier::mojom::ChromeRootStoreInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::cert_verifier::mojom::ChromeRootStoreInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::cert_verifier::mojom::internal::ChromeRootStoreInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->version = Traits::version(input);
    decltype(Traits::root_cert_info(input)) in_root_cert_info = Traits::root_cert_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->root_cert_info)::BaseType>
        root_cert_info_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams root_cert_info_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::cert_verifier::mojom::ChromeRootCertInfoDataView>>(
        in_root_cert_info, root_cert_info_fragment, &root_cert_info_validate_params);
    fragment->root_cert_info.Set(
        root_cert_info_fragment.is_null() ? nullptr : root_cert_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->root_cert_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null root_cert_info in ChromeRootStoreInfo struct");
  }

  static bool Deserialize(::cert_verifier::mojom::internal::ChromeRootStoreInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::cert_verifier::mojom::ChromeRootStoreInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace cert_verifier {
namespace mojom {



inline void ChromeRootStoreDataView::GetSerializedProtoRootStoreDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->serialized_proto_root_store;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}


inline void ChromeRootCertInfoDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ChromeRootCertInfoDataView::GetSha256hashHexDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->sha256hash_hex.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ChromeRootStoreInfoDataView::GetRootCertInfoDataView(
    mojo::ArrayDataView<ChromeRootCertInfoDataView>* output) {
  auto pointer = data_->root_cert_info.Get();
  *output = mojo::ArrayDataView<ChromeRootCertInfoDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace cert_verifier

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_SHARED_H_