// services/service_manager/public/mojom/interface_provider.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_SERVICE_MANAGER_PUBLIC_MOJOM_INTERFACE_PROVIDER_MOJOM_PARAMS_DATA_H_
#define SERVICES_SERVICE_MANAGER_PUBLIC_MOJOM_INTERFACE_PROVIDER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace service_manager {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(SERVICE_MANAGER_MOJOM_SHARED) InterfaceProvider_GetInterface_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> interface_name;
  mojo::internal::Handle_Data pipe;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<InterfaceProvider_GetInterface_Params_Data>;

  InterfaceProvider_GetInterface_Params_Data();
  ~InterfaceProvider_GetInterface_Params_Data() = delete;
};
static_assert(sizeof(InterfaceProvider_GetInterface_Params_Data) == 24,
              "Bad sizeof(InterfaceProvider_GetInterface_Params_Data)");

}  // namespace internal


class InterfaceProvider_GetInterface_ParamsDataView {
 public:
  InterfaceProvider_GetInterface_ParamsDataView() = default;

  InterfaceProvider_GetInterface_ParamsDataView(
      internal::InterfaceProvider_GetInterface_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInterfaceNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInterfaceName(UserType* output) {
    
    auto* pointer = data_->interface_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  mojo::ScopedMessagePipeHandle TakePipe() {
    mojo::ScopedMessagePipeHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedMessagePipeHandle>(
            &data_->pipe, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::InterfaceProvider_GetInterface_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void InterfaceProvider_GetInterface_ParamsDataView::GetInterfaceNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->interface_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace service_manager

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_SERVICE_MANAGER_PUBLIC_MOJOM_INTERFACE_PROVIDER_MOJOM_PARAMS_DATA_H_