// services/service_manager/public/mojom/interface_provider_spec.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/service_manager/public/mojom/interface_provider_spec.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/service_manager/public/mojom/interface_provider_spec.mojom-params-data.h"
#include "services/service_manager/public/mojom/interface_provider_spec.mojom-shared-message-ids.h"

#include "services/service_manager/public/mojom/interface_provider_spec.mojom-import-headers.h"
#include "services/service_manager/public/mojom/interface_provider_spec.mojom-test-utils.h"


#ifndef SERVICES_SERVICE_MANAGER_PUBLIC_MOJOM_INTERFACE_PROVIDER_SPEC_MOJOM_JUMBO_H_
#define SERVICES_SERVICE_MANAGER_PUBLIC_MOJOM_INTERFACE_PROVIDER_SPEC_MOJOM_JUMBO_H_
#endif



namespace service_manager {
namespace mojom {
const char kServiceManager_ConnectorSpec[] = "service_manager:connector";
InterfaceSet::InterfaceSet()
    : interfaces() {}

InterfaceSet::InterfaceSet(
    std::vector<std::string> interfaces_in)
    : interfaces(std::move(interfaces_in)) {}

InterfaceSet::~InterfaceSet() = default;

void InterfaceSet::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "interfaces"), this->interfaces,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool InterfaceSet::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CapabilitySet::CapabilitySet()
    : capabilities() {}

CapabilitySet::CapabilitySet(
    std::vector<std::string> capabilities_in)
    : capabilities(std::move(capabilities_in)) {}

CapabilitySet::~CapabilitySet() = default;

void CapabilitySet::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "capabilities"), this->capabilities,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool CapabilitySet::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
InterfaceProviderSpec::InterfaceProviderSpec()
    : provides(),
      needs() {}

InterfaceProviderSpec::InterfaceProviderSpec(
    const base::flat_map<std::string, ::service_manager::InterfaceSet>& provides_in,
    const base::flat_map<std::string, ::service_manager::CapabilitySet>& needs_in)
    : provides(std::move(provides_in)),
      needs(std::move(needs_in)) {}

InterfaceProviderSpec::~InterfaceProviderSpec() = default;

void InterfaceProviderSpec::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "provides"), this->provides,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const base::flat_map<std::string, ::service_manager::InterfaceSet>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "needs"), this->needs,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const base::flat_map<std::string, ::service_manager::CapabilitySet>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool InterfaceProviderSpec::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace service_manager


namespace mojo {


// static
bool StructTraits<::service_manager::mojom::InterfaceSet::DataView, ::service_manager::mojom::InterfaceSetPtr>::Read(
    ::service_manager::mojom::InterfaceSet::DataView input,
    ::service_manager::mojom::InterfaceSetPtr* output) {
  bool success = true;
  ::service_manager::mojom::InterfaceSetPtr result(::service_manager::mojom::InterfaceSet::New());
  
      if (success && !input.ReadInterfaces(&result->interfaces))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::service_manager::mojom::CapabilitySet::DataView, ::service_manager::mojom::CapabilitySetPtr>::Read(
    ::service_manager::mojom::CapabilitySet::DataView input,
    ::service_manager::mojom::CapabilitySetPtr* output) {
  bool success = true;
  ::service_manager::mojom::CapabilitySetPtr result(::service_manager::mojom::CapabilitySet::New());
  
      if (success && !input.ReadCapabilities(&result->capabilities))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::service_manager::mojom::InterfaceProviderSpec::DataView, ::service_manager::mojom::InterfaceProviderSpecPtr>::Read(
    ::service_manager::mojom::InterfaceProviderSpec::DataView input,
    ::service_manager::mojom::InterfaceProviderSpecPtr* output) {
  bool success = true;
  ::service_manager::mojom::InterfaceProviderSpecPtr result(::service_manager::mojom::InterfaceProviderSpec::New());
  
      if (success && !input.ReadProvides(&result->provides))
        success = false;
      if (success && !input.ReadNeeds(&result->needs))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace service_manager {
namespace mojom {




}  // namespace mojom
}  // namespace service_manager


#if defined(__clang__)
#pragma clang diagnostic pop
#endif