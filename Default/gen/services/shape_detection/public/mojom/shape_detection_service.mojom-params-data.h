// services/shape_detection/public/mojom/shape_detection_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_SHAPE_DETECTION_PUBLIC_MOJOM_SHAPE_DETECTION_SERVICE_MOJOM_PARAMS_DATA_H_
#define SERVICES_SHAPE_DETECTION_PUBLIC_MOJOM_SHAPE_DETECTION_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace shape_detection {
namespace mojom {
namespace internal {

class ValidationContext;
class  ShapeDetectionService_BindBarcodeDetectionProvider_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ShapeDetectionService_BindBarcodeDetectionProvider_Params_Data>;

  ShapeDetectionService_BindBarcodeDetectionProvider_Params_Data();
  ~ShapeDetectionService_BindBarcodeDetectionProvider_Params_Data() = delete;
};
static_assert(sizeof(ShapeDetectionService_BindBarcodeDetectionProvider_Params_Data) == 16,
              "Bad sizeof(ShapeDetectionService_BindBarcodeDetectionProvider_Params_Data)");
class  ShapeDetectionService_BindFaceDetectionProvider_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ShapeDetectionService_BindFaceDetectionProvider_Params_Data>;

  ShapeDetectionService_BindFaceDetectionProvider_Params_Data();
  ~ShapeDetectionService_BindFaceDetectionProvider_Params_Data() = delete;
};
static_assert(sizeof(ShapeDetectionService_BindFaceDetectionProvider_Params_Data) == 16,
              "Bad sizeof(ShapeDetectionService_BindFaceDetectionProvider_Params_Data)");
class  ShapeDetectionService_BindTextDetection_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ShapeDetectionService_BindTextDetection_Params_Data>;

  ShapeDetectionService_BindTextDetection_Params_Data();
  ~ShapeDetectionService_BindTextDetection_Params_Data() = delete;
};
static_assert(sizeof(ShapeDetectionService_BindTextDetection_Params_Data) == 16,
              "Bad sizeof(ShapeDetectionService_BindTextDetection_Params_Data)");

}  // namespace internal


class ShapeDetectionService_BindBarcodeDetectionProvider_ParamsDataView {
 public:
  ShapeDetectionService_BindBarcodeDetectionProvider_ParamsDataView() = default;

  ShapeDetectionService_BindBarcodeDetectionProvider_ParamsDataView(
      internal::ShapeDetectionService_BindBarcodeDetectionProvider_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::shape_detection::mojom::BarcodeDetectionProviderInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ShapeDetectionService_BindBarcodeDetectionProvider_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ShapeDetectionService_BindFaceDetectionProvider_ParamsDataView {
 public:
  ShapeDetectionService_BindFaceDetectionProvider_ParamsDataView() = default;

  ShapeDetectionService_BindFaceDetectionProvider_ParamsDataView(
      internal::ShapeDetectionService_BindFaceDetectionProvider_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::shape_detection::mojom::FaceDetectionProviderInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ShapeDetectionService_BindFaceDetectionProvider_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ShapeDetectionService_BindTextDetection_ParamsDataView {
 public:
  ShapeDetectionService_BindTextDetection_ParamsDataView() = default;

  ShapeDetectionService_BindTextDetection_ParamsDataView(
      internal::ShapeDetectionService_BindTextDetection_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::shape_detection::mojom::TextDetectionInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ShapeDetectionService_BindTextDetection_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};







}  // namespace mojom
}  // namespace shape_detection

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_SHAPE_DETECTION_PUBLIC_MOJOM_SHAPE_DETECTION_SERVICE_MOJOM_PARAMS_DATA_H_