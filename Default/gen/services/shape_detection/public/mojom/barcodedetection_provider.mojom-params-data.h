// services/shape_detection/public/mojom/barcodedetection_provider.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_SHAPE_DETECTION_PUBLIC_MOJOM_BARCODEDETECTION_PROVIDER_MOJOM_PARAMS_DATA_H_
#define SERVICES_SHAPE_DETECTION_PUBLIC_MOJOM_BARCODEDETECTION_PROVIDER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace shape_detection {
namespace mojom {
namespace internal {

class ValidationContext;
class  BarcodeDetectionProvider_CreateBarcodeDetection_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::BarcodeDetectorOptions_Data> options;

 private:
  friend class mojo::internal::MessageFragment<BarcodeDetectionProvider_CreateBarcodeDetection_Params_Data>;

  BarcodeDetectionProvider_CreateBarcodeDetection_Params_Data();
  ~BarcodeDetectionProvider_CreateBarcodeDetection_Params_Data() = delete;
};
static_assert(sizeof(BarcodeDetectionProvider_CreateBarcodeDetection_Params_Data) == 24,
              "Bad sizeof(BarcodeDetectionProvider_CreateBarcodeDetection_Params_Data)");
class  BarcodeDetectionProvider_EnumerateSupportedFormats_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BarcodeDetectionProvider_EnumerateSupportedFormats_Params_Data>;

  BarcodeDetectionProvider_EnumerateSupportedFormats_Params_Data();
  ~BarcodeDetectionProvider_EnumerateSupportedFormats_Params_Data() = delete;
};
static_assert(sizeof(BarcodeDetectionProvider_EnumerateSupportedFormats_Params_Data) == 8,
              "Bad sizeof(BarcodeDetectionProvider_EnumerateSupportedFormats_Params_Data)");
class  BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> supported_formats;

 private:
  friend class mojo::internal::MessageFragment<BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParams_Data>;

  BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParams_Data();
  ~BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParams_Data() = delete;
};
static_assert(sizeof(BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParams_Data) == 16,
              "Bad sizeof(BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParams_Data)");

}  // namespace internal


class BarcodeDetectionProvider_CreateBarcodeDetection_ParamsDataView {
 public:
  BarcodeDetectionProvider_CreateBarcodeDetection_ParamsDataView() = default;

  BarcodeDetectionProvider_CreateBarcodeDetection_ParamsDataView(
      internal::BarcodeDetectionProvider_CreateBarcodeDetection_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::shape_detection::mojom::BarcodeDetectionInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetOptionsDataView(
      BarcodeDetectorOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::shape_detection::mojom::BarcodeDetectorOptionsDataView>(
        pointer, output, message_);
  }
 private:
  internal::BarcodeDetectionProvider_CreateBarcodeDetection_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BarcodeDetectionProvider_EnumerateSupportedFormats_ParamsDataView {
 public:
  BarcodeDetectionProvider_EnumerateSupportedFormats_ParamsDataView() = default;

  BarcodeDetectionProvider_EnumerateSupportedFormats_ParamsDataView(
      internal::BarcodeDetectionProvider_EnumerateSupportedFormats_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BarcodeDetectionProvider_EnumerateSupportedFormats_Params_Data* data_ = nullptr;
};



class BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParamsDataView {
 public:
  BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParamsDataView() = default;

  BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParamsDataView(
      internal::BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSupportedFormatsDataView(
      mojo::ArrayDataView<::shape_detection::mojom::BarcodeFormat>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSupportedFormats(UserType* output) {
    
    auto* pointer = data_->supported_formats.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::shape_detection::mojom::BarcodeFormat>>(
        pointer, output, message_);
  }
 private:
  internal::BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void BarcodeDetectionProvider_CreateBarcodeDetection_ParamsDataView::GetOptionsDataView(
    BarcodeDetectorOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = BarcodeDetectorOptionsDataView(pointer, message_);
}




inline void BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParamsDataView::GetSupportedFormatsDataView(
    mojo::ArrayDataView<::shape_detection::mojom::BarcodeFormat>* output) {
  auto pointer = data_->supported_formats.Get();
  *output = mojo::ArrayDataView<::shape_detection::mojom::BarcodeFormat>(pointer, message_);
}

}  // namespace mojom
}  // namespace shape_detection

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_SHAPE_DETECTION_PUBLIC_MOJOM_BARCODEDETECTION_PROVIDER_MOJOM_PARAMS_DATA_H_