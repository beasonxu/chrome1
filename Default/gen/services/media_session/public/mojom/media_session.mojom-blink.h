// services/media_session/public/mojom/media_session.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_MEDIA_SESSION_PUBLIC_MOJOM_MEDIA_SESSION_MOJOM_BLINK_H_
#define SERVICES_MEDIA_SESSION_PUBLIC_MOJOM_MEDIA_SESSION_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/media_session/public/mojom/media_session.mojom-shared.h"
#include "services/media_session/public/mojom/media_session.mojom-blink-forward.h"
#include "mojo/public/mojom/base/string16.mojom-blink.h"
#include "mojo/public/mojom/base/time.mojom-blink.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-blink.h"
#include "url/mojom/url.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/platform/web_common.h"




namespace WTF {
struct media_session_mojom_internal_MediaPlaybackState_DataHashFn {
  static unsigned GetHash(const ::media_session::mojom::MediaPlaybackState& value) {
    using utype = std::underlying_type<::media_session::mojom::MediaPlaybackState>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::media_session::mojom::MediaPlaybackState& left, const ::media_session::mojom::MediaPlaybackState& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::media_session::mojom::MediaPlaybackState>
    : public GenericHashTraits<::media_session::mojom::MediaPlaybackState> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::media_session::mojom::MediaPlaybackState EmptyValue() { return static_cast<::media_session::mojom::MediaPlaybackState>(-1000000); }
  static void ConstructDeletedValue(::media_session::mojom::MediaPlaybackState& slot, bool) {
    slot = static_cast<::media_session::mojom::MediaPlaybackState>(-1000001);
  }
  static bool IsDeletedValue(const ::media_session::mojom::MediaPlaybackState& value) {
    return value == static_cast<::media_session::mojom::MediaPlaybackState>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct media_session_mojom_internal_MediaSessionAction_DataHashFn {
  static unsigned GetHash(const ::media_session::mojom::MediaSessionAction& value) {
    using utype = std::underlying_type<::media_session::mojom::MediaSessionAction>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::media_session::mojom::MediaSessionAction& left, const ::media_session::mojom::MediaSessionAction& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::media_session::mojom::MediaSessionAction>
    : public GenericHashTraits<::media_session::mojom::MediaSessionAction> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::media_session::mojom::MediaSessionAction EmptyValue() { return static_cast<::media_session::mojom::MediaSessionAction>(-1000000); }
  static void ConstructDeletedValue(::media_session::mojom::MediaSessionAction& slot, bool) {
    slot = static_cast<::media_session::mojom::MediaSessionAction>(-1000001);
  }
  static bool IsDeletedValue(const ::media_session::mojom::MediaSessionAction& value) {
    return value == static_cast<::media_session::mojom::MediaSessionAction>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct media_session_mojom_internal_MediaSessionImageType_DataHashFn {
  static unsigned GetHash(const ::media_session::mojom::MediaSessionImageType& value) {
    using utype = std::underlying_type<::media_session::mojom::MediaSessionImageType>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::media_session::mojom::MediaSessionImageType& left, const ::media_session::mojom::MediaSessionImageType& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::media_session::mojom::MediaSessionImageType>
    : public GenericHashTraits<::media_session::mojom::MediaSessionImageType> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::media_session::mojom::MediaSessionImageType EmptyValue() { return static_cast<::media_session::mojom::MediaSessionImageType>(-1000000); }
  static void ConstructDeletedValue(::media_session::mojom::MediaSessionImageType& slot, bool) {
    slot = static_cast<::media_session::mojom::MediaSessionImageType>(-1000001);
  }
  static bool IsDeletedValue(const ::media_session::mojom::MediaSessionImageType& value) {
    return value == static_cast<::media_session::mojom::MediaSessionImageType>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct media_session_mojom_internal_MediaPictureInPictureState_DataHashFn {
  static unsigned GetHash(const ::media_session::mojom::MediaPictureInPictureState& value) {
    using utype = std::underlying_type<::media_session::mojom::MediaPictureInPictureState>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::media_session::mojom::MediaPictureInPictureState& left, const ::media_session::mojom::MediaPictureInPictureState& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::media_session::mojom::MediaPictureInPictureState>
    : public GenericHashTraits<::media_session::mojom::MediaPictureInPictureState> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::media_session::mojom::MediaPictureInPictureState EmptyValue() { return static_cast<::media_session::mojom::MediaPictureInPictureState>(-1000000); }
  static void ConstructDeletedValue(::media_session::mojom::MediaPictureInPictureState& slot, bool) {
    slot = static_cast<::media_session::mojom::MediaPictureInPictureState>(-1000001);
  }
  static bool IsDeletedValue(const ::media_session::mojom::MediaPictureInPictureState& value) {
    return value == static_cast<::media_session::mojom::MediaPictureInPictureState>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct media_session_mojom_internal_MediaAudioVideoState_DataHashFn {
  static unsigned GetHash(const ::media_session::mojom::MediaAudioVideoState& value) {
    using utype = std::underlying_type<::media_session::mojom::MediaAudioVideoState>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::media_session::mojom::MediaAudioVideoState& left, const ::media_session::mojom::MediaAudioVideoState& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::media_session::mojom::MediaAudioVideoState>
    : public GenericHashTraits<::media_session::mojom::MediaAudioVideoState> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::media_session::mojom::MediaAudioVideoState EmptyValue() { return static_cast<::media_session::mojom::MediaAudioVideoState>(-1000000); }
  static void ConstructDeletedValue(::media_session::mojom::MediaAudioVideoState& slot, bool) {
    slot = static_cast<::media_session::mojom::MediaAudioVideoState>(-1000001);
  }
  static bool IsDeletedValue(const ::media_session::mojom::MediaAudioVideoState& value) {
    return value == static_cast<::media_session::mojom::MediaAudioVideoState>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct media_session_mojom_internal_MediaImageBitmapColorType_DataHashFn {
  static unsigned GetHash(const ::media_session::mojom::MediaImageBitmapColorType& value) {
    using utype = std::underlying_type<::media_session::mojom::MediaImageBitmapColorType>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::media_session::mojom::MediaImageBitmapColorType& left, const ::media_session::mojom::MediaImageBitmapColorType& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::media_session::mojom::MediaImageBitmapColorType>
    : public GenericHashTraits<::media_session::mojom::MediaImageBitmapColorType> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::media_session::mojom::MediaImageBitmapColorType EmptyValue() { return static_cast<::media_session::mojom::MediaImageBitmapColorType>(-1000000); }
  static void ConstructDeletedValue(::media_session::mojom::MediaImageBitmapColorType& slot, bool) {
    slot = static_cast<::media_session::mojom::MediaImageBitmapColorType>(-1000001);
  }
  static bool IsDeletedValue(const ::media_session::mojom::MediaImageBitmapColorType& value) {
    return value == static_cast<::media_session::mojom::MediaImageBitmapColorType>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct media_session_mojom_internal_MicrophoneState_DataHashFn {
  static unsigned GetHash(const ::media_session::mojom::MicrophoneState& value) {
    using utype = std::underlying_type<::media_session::mojom::MicrophoneState>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::media_session::mojom::MicrophoneState& left, const ::media_session::mojom::MicrophoneState& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::media_session::mojom::MicrophoneState>
    : public GenericHashTraits<::media_session::mojom::MicrophoneState> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::media_session::mojom::MicrophoneState EmptyValue() { return static_cast<::media_session::mojom::MicrophoneState>(-1000000); }
  static void ConstructDeletedValue(::media_session::mojom::MicrophoneState& slot, bool) {
    slot = static_cast<::media_session::mojom::MicrophoneState>(-1000001);
  }
  static bool IsDeletedValue(const ::media_session::mojom::MicrophoneState& value) {
    return value == static_cast<::media_session::mojom::MicrophoneState>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct media_session_mojom_internal_CameraState_DataHashFn {
  static unsigned GetHash(const ::media_session::mojom::CameraState& value) {
    using utype = std::underlying_type<::media_session::mojom::CameraState>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::media_session::mojom::CameraState& left, const ::media_session::mojom::CameraState& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::media_session::mojom::CameraState>
    : public GenericHashTraits<::media_session::mojom::CameraState> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::media_session::mojom::CameraState EmptyValue() { return static_cast<::media_session::mojom::CameraState>(-1000000); }
  static void ConstructDeletedValue(::media_session::mojom::CameraState& slot, bool) {
    slot = static_cast<::media_session::mojom::CameraState>(-1000001);
  }
  static bool IsDeletedValue(const ::media_session::mojom::CameraState& value) {
    return value == static_cast<::media_session::mojom::CameraState>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct media_session_mojom_internal_MediaSessionInfo_SessionState_DataHashFn {
  static unsigned GetHash(const ::media_session::mojom::MediaSessionInfo_SessionState& value) {
    using utype = std::underlying_type<::media_session::mojom::MediaSessionInfo_SessionState>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::media_session::mojom::MediaSessionInfo_SessionState& left, const ::media_session::mojom::MediaSessionInfo_SessionState& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::media_session::mojom::MediaSessionInfo_SessionState>
    : public GenericHashTraits<::media_session::mojom::MediaSessionInfo_SessionState> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::media_session::mojom::MediaSessionInfo_SessionState EmptyValue() { return static_cast<::media_session::mojom::MediaSessionInfo_SessionState>(-1000000); }
  static void ConstructDeletedValue(::media_session::mojom::MediaSessionInfo_SessionState& slot, bool) {
    slot = static_cast<::media_session::mojom::MediaSessionInfo_SessionState>(-1000001);
  }
  static bool IsDeletedValue(const ::media_session::mojom::MediaSessionInfo_SessionState& value) {
    return value == static_cast<::media_session::mojom::MediaSessionInfo_SessionState>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct media_session_mojom_internal_MediaSession_SuspendType_DataHashFn {
  static unsigned GetHash(const ::media_session::mojom::MediaSession_SuspendType& value) {
    using utype = std::underlying_type<::media_session::mojom::MediaSession_SuspendType>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::media_session::mojom::MediaSession_SuspendType& left, const ::media_session::mojom::MediaSession_SuspendType& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::media_session::mojom::MediaSession_SuspendType>
    : public GenericHashTraits<::media_session::mojom::MediaSession_SuspendType> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::media_session::mojom::MediaSession_SuspendType EmptyValue() { return static_cast<::media_session::mojom::MediaSession_SuspendType>(-1000000); }
  static void ConstructDeletedValue(::media_session::mojom::MediaSession_SuspendType& slot, bool) {
    slot = static_cast<::media_session::mojom::MediaSession_SuspendType>(-1000001);
  }
  static bool IsDeletedValue(const ::media_session::mojom::MediaSession_SuspendType& value) {
    return value == static_cast<::media_session::mojom::MediaSession_SuspendType>(-1000001);
  }
};
}  // namespace WTF


namespace media_session {
namespace mojom {
namespace blink {

class MediaSessionObserverProxy;

template <typename ImplRefTraits>
class MediaSessionObserverStub;

class MediaSessionObserverRequestValidator;


class BLINK_PLATFORM_EXPORT MediaSessionObserver
    : public MediaSessionObserverInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = MediaSessionObserverInterfaceBase;
  using Proxy_ = MediaSessionObserverProxy;

  template <typename ImplRefTraits>
  using Stub_ = MediaSessionObserverStub<ImplRefTraits>;

  using RequestValidator_ = MediaSessionObserverRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kMediaSessionInfoChangedMinVersion = 0,
    kMediaSessionMetadataChangedMinVersion = 0,
    kMediaSessionActionsChangedMinVersion = 0,
    kMediaSessionImagesChangedMinVersion = 0,
    kMediaSessionPositionChangedMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct MediaSessionInfoChanged_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct MediaSessionMetadataChanged_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct MediaSessionActionsChanged_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct MediaSessionImagesChanged_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct MediaSessionPositionChanged_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~MediaSessionObserver() = default;

  
  virtual void MediaSessionInfoChanged(MediaSessionInfoPtr info) = 0;

  
  virtual void MediaSessionMetadataChanged(MediaMetadataPtr metadata) = 0;

  
  virtual void MediaSessionActionsChanged(const WTF::Vector<MediaSessionAction>& action) = 0;

  
  virtual void MediaSessionImagesChanged(WTF::HashMap<MediaSessionImageType, WTF::Vector<MediaImagePtr>> images) = 0;

  
  virtual void MediaSessionPositionChanged(MediaPositionPtr position) = 0;
};

class MediaSessionProxy;

template <typename ImplRefTraits>
class MediaSessionStub;

class MediaSessionRequestValidator;
class MediaSessionResponseValidator;


class BLINK_PLATFORM_EXPORT MediaSession
    : public MediaSessionInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 13;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = MediaSessionInterfaceBase;
  using Proxy_ = MediaSessionProxy;

  template <typename ImplRefTraits>
  using Stub_ = MediaSessionStub<ImplRefTraits>;

  using RequestValidator_ = MediaSessionRequestValidator;
  using ResponseValidator_ = MediaSessionResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetMediaSessionInfoMinVersion = 0,
    kGetDebugInfoMinVersion = 0,
    kStartDuckingMinVersion = 0,
    kStopDuckingMinVersion = 0,
    kSuspendMinVersion = 0,
    kResumeMinVersion = 0,
    kAddObserverMinVersion = 0,
    kPreviousTrackMinVersion = 0,
    kNextTrackMinVersion = 0,
    kSeekMinVersion = 0,
    kStopMinVersion = 0,
    kSkipAdMinVersion = 0,
    kGetMediaImageBitmapMinVersion = 0,
    kSeekToMinVersion = 0,
    kScrubToMinVersion = 0,
    kEnterPictureInPictureMinVersion = 0,
    kExitPictureInPictureMinVersion = 0,
    kSetAudioSinkIdMinVersion = 0,
    kToggleMicrophoneMinVersion = 11,
    kToggleCameraMinVersion = 11,
    kHangUpMinVersion = 11,
    kRaiseMinVersion = 12,
    kSetMuteMinVersion = 13,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GetMediaSessionInfo_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetDebugInfo_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct StartDucking_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct StopDucking_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Suspend_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Resume_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct AddObserver_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct PreviousTrack_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct NextTrack_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Seek_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Stop_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SkipAd_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetMediaImageBitmap_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SeekTo_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ScrubTo_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct EnterPictureInPicture_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ExitPictureInPicture_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetAudioSinkId_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ToggleMicrophone_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ToggleCamera_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct HangUp_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Raise_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetMute_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  
  using SuspendType = MediaSession_SuspendType;
  virtual ~MediaSession() = default;


  using GetMediaSessionInfoCallback = base::OnceCallback<void(MediaSessionInfoPtr)>;
  
  virtual void GetMediaSessionInfo(GetMediaSessionInfoCallback callback) = 0;


  using GetDebugInfoCallback = base::OnceCallback<void(MediaSessionDebugInfoPtr)>;
  
  virtual void GetDebugInfo(GetDebugInfoCallback callback) = 0;

  
  virtual void StartDucking() = 0;

  
  virtual void StopDucking() = 0;

  
  virtual void Suspend(MediaSession::SuspendType suspend_type) = 0;

  
  virtual void Resume(MediaSession::SuspendType suspend_type) = 0;

  
  virtual void AddObserver(::mojo::PendingRemote<MediaSessionObserver> observer) = 0;

  
  virtual void PreviousTrack() = 0;

  
  virtual void NextTrack() = 0;

  
  virtual void Seek(::base::TimeDelta seek_time) = 0;

  
  virtual void Stop(MediaSession::SuspendType suspend_type) = 0;

  
  virtual void SkipAd() = 0;


  using GetMediaImageBitmapCallback = base::OnceCallback<void(MediaImageBitmapPtr)>;
  
  virtual void GetMediaImageBitmap(MediaImagePtr image, int32_t minimum_size_px, int32_t desired_size_px, GetMediaImageBitmapCallback callback) = 0;

  
  virtual void SeekTo(::base::TimeDelta seek_time) = 0;

  
  virtual void ScrubTo(::base::TimeDelta seek_time) = 0;

  
  virtual void EnterPictureInPicture() = 0;

  
  virtual void ExitPictureInPicture() = 0;

  
  virtual void SetAudioSinkId(const WTF::String& id) = 0;

  
  virtual void ToggleMicrophone() = 0;

  
  virtual void ToggleCamera() = 0;

  
  virtual void HangUp() = 0;

  
  virtual void Raise() = 0;

  
  virtual void SetMute(bool mute) = 0;
};



class BLINK_PLATFORM_EXPORT MediaSessionObserverProxy
    : public MediaSessionObserver {
 public:
  using InterfaceType = MediaSessionObserver;

  explicit MediaSessionObserverProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void MediaSessionInfoChanged(MediaSessionInfoPtr info) final;
  
  void MediaSessionMetadataChanged(MediaMetadataPtr metadata) final;
  
  void MediaSessionActionsChanged(const WTF::Vector<MediaSessionAction>& action) final;
  
  void MediaSessionImagesChanged(WTF::HashMap<MediaSessionImageType, WTF::Vector<MediaImagePtr>> images) final;
  
  void MediaSessionPositionChanged(MediaPositionPtr position) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_PLATFORM_EXPORT MediaSessionProxy
    : public MediaSession {
 public:
  using InterfaceType = MediaSession;

  explicit MediaSessionProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetMediaSessionInfo(GetMediaSessionInfoCallback callback) final;
  
  void GetDebugInfo(GetDebugInfoCallback callback) final;
  
  void StartDucking() final;
  
  void StopDucking() final;
  
  void Suspend(MediaSession::SuspendType suspend_type) final;
  
  void Resume(MediaSession::SuspendType suspend_type) final;
  
  void AddObserver(::mojo::PendingRemote<MediaSessionObserver> observer) final;
  
  void PreviousTrack() final;
  
  void NextTrack() final;
  
  void Seek(::base::TimeDelta seek_time) final;
  
  void Stop(MediaSession::SuspendType suspend_type) final;
  
  void SkipAd() final;
  
  void GetMediaImageBitmap(MediaImagePtr image, int32_t minimum_size_px, int32_t desired_size_px, GetMediaImageBitmapCallback callback) final;
  
  void SeekTo(::base::TimeDelta seek_time) final;
  
  void ScrubTo(::base::TimeDelta seek_time) final;
  
  void EnterPictureInPicture() final;
  
  void ExitPictureInPicture() final;
  
  void SetAudioSinkId(const WTF::String& id) final;
  
  void ToggleMicrophone() final;
  
  void ToggleCamera() final;
  
  void HangUp() final;
  
  void Raise() final;
  
  void SetMute(bool mute) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_PLATFORM_EXPORT MediaSessionObserverStubDispatch {
 public:
  static bool Accept(MediaSessionObserver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      MediaSessionObserver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<MediaSessionObserver>>
class MediaSessionObserverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  MediaSessionObserverStub() = default;
  ~MediaSessionObserverStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return MediaSessionObserverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return MediaSessionObserverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT MediaSessionStubDispatch {
 public:
  static bool Accept(MediaSession* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      MediaSession* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<MediaSession>>
class MediaSessionStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  MediaSessionStub() = default;
  ~MediaSessionStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return MediaSessionStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return MediaSessionStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT MediaSessionObserverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT MediaSessionRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT MediaSessionResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};










class BLINK_PLATFORM_EXPORT MediaSessionDebugInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<MediaSessionDebugInfo, T>::value>;
  using DataView = MediaSessionDebugInfoDataView;
  using Data_ = internal::MediaSessionDebugInfo_Data;

  template <typename... Args>
  static MediaSessionDebugInfoPtr New(Args&&... args) {
    return MediaSessionDebugInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static MediaSessionDebugInfoPtr From(const U& u) {
    return mojo::TypeConverter<MediaSessionDebugInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MediaSessionDebugInfo>::Convert(*this);
  }


  MediaSessionDebugInfo();

  MediaSessionDebugInfo(
      const WTF::String& name,
      const WTF::String& owner,
      const WTF::String& state);


  ~MediaSessionDebugInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = MediaSessionDebugInfoPtr>
  MediaSessionDebugInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, MediaSessionDebugInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, MediaSessionDebugInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        MediaSessionDebugInfo::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        MediaSessionDebugInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::MediaSessionDebugInfo_UnserializedMessageContext<
            UserType, MediaSessionDebugInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<MediaSessionDebugInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return MediaSessionDebugInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::MediaSessionDebugInfo_UnserializedMessageContext<
            UserType, MediaSessionDebugInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<MediaSessionDebugInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  WTF::String name;
  
  WTF::String owner;
  
  WTF::String state;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, MediaSessionDebugInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, MediaSessionDebugInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, MediaSessionDebugInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, MediaSessionDebugInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







class BLINK_PLATFORM_EXPORT MediaImage {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<MediaImage, T>::value>;
  using DataView = MediaImageDataView;
  using Data_ = internal::MediaImage_Data;

  template <typename... Args>
  static MediaImagePtr New(Args&&... args) {
    return MediaImagePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static MediaImagePtr From(const U& u) {
    return mojo::TypeConverter<MediaImagePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MediaImage>::Convert(*this);
  }


  MediaImage();

  MediaImage(
      const ::blink::KURL& src,
      const ::WTF::String& type,
      WTF::Vector<::gfx::Size> sizes);


  ~MediaImage();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = MediaImagePtr>
  MediaImagePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, MediaImage::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, MediaImage::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        MediaImage::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        MediaImage::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::MediaImage_UnserializedMessageContext<
            UserType, MediaImage::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<MediaImage::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return MediaImage::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::MediaImage_UnserializedMessageContext<
            UserType, MediaImage::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<MediaImage::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::blink::KURL src;
  
  ::WTF::String type;
  
  WTF::Vector<::gfx::Size> sizes;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, MediaImage::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, MediaImage::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, MediaImage::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, MediaImage::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT MediaMetadata {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<MediaMetadata, T>::value>;
  using DataView = MediaMetadataDataView;
  using Data_ = internal::MediaMetadata_Data;

  template <typename... Args>
  static MediaMetadataPtr New(Args&&... args) {
    return MediaMetadataPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static MediaMetadataPtr From(const U& u) {
    return mojo::TypeConverter<MediaMetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MediaMetadata>::Convert(*this);
  }


  MediaMetadata();

  MediaMetadata(
      const ::WTF::String& title,
      const ::WTF::String& artist,
      const ::WTF::String& album,
      const ::WTF::String& source_title);


  ~MediaMetadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = MediaMetadataPtr>
  MediaMetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, MediaMetadata::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, MediaMetadata::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        MediaMetadata::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        MediaMetadata::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::MediaMetadata_UnserializedMessageContext<
            UserType, MediaMetadata::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<MediaMetadata::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return MediaMetadata::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::MediaMetadata_UnserializedMessageContext<
            UserType, MediaMetadata::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<MediaMetadata::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::WTF::String title;
  
  ::WTF::String artist;
  
  ::WTF::String album;
  
  ::WTF::String source_title;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, MediaMetadata::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, MediaMetadata::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, MediaMetadata::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, MediaMetadata::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT MediaImageBitmap {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<MediaImageBitmap, T>::value>;
  using DataView = MediaImageBitmapDataView;
  using Data_ = internal::MediaImageBitmap_Data;

  template <typename... Args>
  static MediaImageBitmapPtr New(Args&&... args) {
    return MediaImageBitmapPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static MediaImageBitmapPtr From(const U& u) {
    return mojo::TypeConverter<MediaImageBitmapPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MediaImageBitmap>::Convert(*this);
  }


  MediaImageBitmap();

  MediaImageBitmap(
      int32_t width,
      int32_t height,
      WTF::Vector<uint8_t> pixel_data);

  MediaImageBitmap(
      int32_t width,
      int32_t height,
      WTF::Vector<uint8_t> pixel_data,
      MediaImageBitmapColorType color_type);


  ~MediaImageBitmap();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = MediaImageBitmapPtr>
  MediaImageBitmapPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, MediaImageBitmap::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, MediaImageBitmap::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        MediaImageBitmap::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        MediaImageBitmap::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::MediaImageBitmap_UnserializedMessageContext<
            UserType, MediaImageBitmap::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<MediaImageBitmap::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return MediaImageBitmap::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::MediaImageBitmap_UnserializedMessageContext<
            UserType, MediaImageBitmap::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<MediaImageBitmap::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t width;
  
  int32_t height;
  
  WTF::Vector<uint8_t> pixel_data;
  
  MediaImageBitmapColorType color_type;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, MediaImageBitmap::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, MediaImageBitmap::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, MediaImageBitmap::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, MediaImageBitmap::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT MediaPosition {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<MediaPosition, T>::value>;
  using DataView = MediaPositionDataView;
  using Data_ = internal::MediaPosition_Data;

  template <typename... Args>
  static MediaPositionPtr New(Args&&... args) {
    return MediaPositionPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static MediaPositionPtr From(const U& u) {
    return mojo::TypeConverter<MediaPositionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MediaPosition>::Convert(*this);
  }


  MediaPosition();

  MediaPosition(
      double playback_rate,
      ::base::TimeDelta duration,
      ::base::TimeDelta position,
      ::base::TimeTicks last_updated_time);

  MediaPosition(
      double playback_rate,
      ::base::TimeDelta duration,
      ::base::TimeDelta position,
      ::base::TimeTicks last_updated_time,
      bool end_of_media);


  ~MediaPosition();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = MediaPositionPtr>
  MediaPositionPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, MediaPosition::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, MediaPosition::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        MediaPosition::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        MediaPosition::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::MediaPosition_UnserializedMessageContext<
            UserType, MediaPosition::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<MediaPosition::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return MediaPosition::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::MediaPosition_UnserializedMessageContext<
            UserType, MediaPosition::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<MediaPosition::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  double playback_rate;
  
  ::base::TimeDelta duration;
  
  ::base::TimeDelta position;
  
  ::base::TimeTicks last_updated_time;
  
  bool end_of_media;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, MediaPosition::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, MediaPosition::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, MediaPosition::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, MediaPosition::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT MediaSessionInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<MediaSessionInfo, T>::value>;
  using DataView = MediaSessionInfoDataView;
  using Data_ = internal::MediaSessionInfo_Data;
  using SessionState = MediaSessionInfo_SessionState;

  template <typename... Args>
  static MediaSessionInfoPtr New(Args&&... args) {
    return MediaSessionInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static MediaSessionInfoPtr From(const U& u) {
    return mojo::TypeConverter<MediaSessionInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MediaSessionInfo>::Convert(*this);
  }


  MediaSessionInfo();

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck);

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck,
      MediaPlaybackState playback_state);

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck,
      MediaPlaybackState playback_state,
      bool is_controllable);

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck,
      MediaPlaybackState playback_state,
      bool is_controllable,
      bool prefer_stop_for_gain_focus_loss);

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck,
      MediaPlaybackState playback_state,
      bool is_controllable,
      bool prefer_stop_for_gain_focus_loss,
      bool is_sensitive);

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck,
      MediaPlaybackState playback_state,
      bool is_controllable,
      bool prefer_stop_for_gain_focus_loss,
      bool is_sensitive,
      MediaPictureInPictureState picture_in_picture_state);

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck,
      MediaPlaybackState playback_state,
      bool is_controllable,
      bool prefer_stop_for_gain_focus_loss,
      bool is_sensitive,
      MediaPictureInPictureState picture_in_picture_state,
      MediaAudioVideoState deprecated_audio_video_state);

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck,
      MediaPlaybackState playback_state,
      bool is_controllable,
      bool prefer_stop_for_gain_focus_loss,
      bool is_sensitive,
      MediaPictureInPictureState picture_in_picture_state,
      MediaAudioVideoState deprecated_audio_video_state,
      const WTF::String& audio_sink_id);

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck,
      MediaPlaybackState playback_state,
      bool is_controllable,
      bool prefer_stop_for_gain_focus_loss,
      bool is_sensitive,
      MediaPictureInPictureState picture_in_picture_state,
      MediaAudioVideoState deprecated_audio_video_state,
      const WTF::String& audio_sink_id,
      absl::optional<WTF::Vector<MediaAudioVideoState>> audio_video_states);

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck,
      MediaPlaybackState playback_state,
      bool is_controllable,
      bool prefer_stop_for_gain_focus_loss,
      bool is_sensitive,
      MediaPictureInPictureState picture_in_picture_state,
      MediaAudioVideoState deprecated_audio_video_state,
      const WTF::String& audio_sink_id,
      absl::optional<WTF::Vector<MediaAudioVideoState>> audio_video_states,
      MicrophoneState microphone_state,
      CameraState camera_state);

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck,
      MediaPlaybackState playback_state,
      bool is_controllable,
      bool prefer_stop_for_gain_focus_loss,
      bool is_sensitive,
      MediaPictureInPictureState picture_in_picture_state,
      MediaAudioVideoState deprecated_audio_video_state,
      const WTF::String& audio_sink_id,
      absl::optional<WTF::Vector<MediaAudioVideoState>> audio_video_states,
      MicrophoneState microphone_state,
      CameraState camera_state,
      bool muted);

  MediaSessionInfo(
      MediaSessionInfo::SessionState state,
      bool force_duck,
      MediaPlaybackState playback_state,
      bool is_controllable,
      bool prefer_stop_for_gain_focus_loss,
      bool is_sensitive,
      MediaPictureInPictureState picture_in_picture_state,
      MediaAudioVideoState deprecated_audio_video_state,
      const WTF::String& audio_sink_id,
      absl::optional<WTF::Vector<MediaAudioVideoState>> audio_video_states,
      MicrophoneState microphone_state,
      CameraState camera_state,
      bool muted,
      bool has_presentation);


  ~MediaSessionInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = MediaSessionInfoPtr>
  MediaSessionInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, MediaSessionInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, MediaSessionInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        MediaSessionInfo::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        MediaSessionInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::MediaSessionInfo_UnserializedMessageContext<
            UserType, MediaSessionInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<MediaSessionInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return MediaSessionInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::MediaSessionInfo_UnserializedMessageContext<
            UserType, MediaSessionInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<MediaSessionInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  MediaSessionInfo::SessionState state;
  
  bool force_duck;
  
  MediaPlaybackState playback_state;
  
  bool is_controllable;
  
  bool prefer_stop_for_gain_focus_loss;
  
  bool is_sensitive;
  
  MediaPictureInPictureState picture_in_picture_state;
  
  MediaAudioVideoState deprecated_audio_video_state;
  
  WTF::String audio_sink_id;
  
  absl::optional<WTF::Vector<MediaAudioVideoState>> audio_video_states;
  
  MicrophoneState microphone_state;
  
  CameraState camera_state;
  
  bool muted;
  
  bool has_presentation;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, MediaSessionInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, MediaSessionInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, MediaSessionInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, MediaSessionInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}


template <typename StructPtrType>
MediaImagePtr MediaImage::Clone() const {
  return New(
      mojo::Clone(src),
      mojo::Clone(type),
      mojo::Clone(sizes)
  );
}

template <typename T, MediaImage::EnableIfSame<T>*>
bool MediaImage::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->src, other_struct.src))
    return false;
  if (!mojo::Equals(this->type, other_struct.type))
    return false;
  if (!mojo::Equals(this->sizes, other_struct.sizes))
    return false;
  return true;
}

template <typename T, MediaImage::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.src < rhs.src)
    return true;
  if (rhs.src < lhs.src)
    return false;
  if (lhs.type < rhs.type)
    return true;
  if (rhs.type < lhs.type)
    return false;
  if (lhs.sizes < rhs.sizes)
    return true;
  if (rhs.sizes < lhs.sizes)
    return false;
  return false;
}
template <typename StructPtrType>
MediaMetadataPtr MediaMetadata::Clone() const {
  return New(
      mojo::Clone(title),
      mojo::Clone(artist),
      mojo::Clone(album),
      mojo::Clone(source_title)
  );
}

template <typename T, MediaMetadata::EnableIfSame<T>*>
bool MediaMetadata::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->title, other_struct.title))
    return false;
  if (!mojo::Equals(this->artist, other_struct.artist))
    return false;
  if (!mojo::Equals(this->album, other_struct.album))
    return false;
  if (!mojo::Equals(this->source_title, other_struct.source_title))
    return false;
  return true;
}

template <typename T, MediaMetadata::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.title < rhs.title)
    return true;
  if (rhs.title < lhs.title)
    return false;
  if (lhs.artist < rhs.artist)
    return true;
  if (rhs.artist < lhs.artist)
    return false;
  if (lhs.album < rhs.album)
    return true;
  if (rhs.album < lhs.album)
    return false;
  if (lhs.source_title < rhs.source_title)
    return true;
  if (rhs.source_title < lhs.source_title)
    return false;
  return false;
}
template <typename StructPtrType>
MediaImageBitmapPtr MediaImageBitmap::Clone() const {
  return New(
      mojo::Clone(width),
      mojo::Clone(height),
      mojo::Clone(pixel_data),
      mojo::Clone(color_type)
  );
}

template <typename T, MediaImageBitmap::EnableIfSame<T>*>
bool MediaImageBitmap::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->width, other_struct.width))
    return false;
  if (!mojo::Equals(this->height, other_struct.height))
    return false;
  if (!mojo::Equals(this->pixel_data, other_struct.pixel_data))
    return false;
  if (!mojo::Equals(this->color_type, other_struct.color_type))
    return false;
  return true;
}

template <typename T, MediaImageBitmap::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.width < rhs.width)
    return true;
  if (rhs.width < lhs.width)
    return false;
  if (lhs.height < rhs.height)
    return true;
  if (rhs.height < lhs.height)
    return false;
  if (lhs.pixel_data < rhs.pixel_data)
    return true;
  if (rhs.pixel_data < lhs.pixel_data)
    return false;
  if (lhs.color_type < rhs.color_type)
    return true;
  if (rhs.color_type < lhs.color_type)
    return false;
  return false;
}
template <typename StructPtrType>
MediaPositionPtr MediaPosition::Clone() const {
  return New(
      mojo::Clone(playback_rate),
      mojo::Clone(duration),
      mojo::Clone(position),
      mojo::Clone(last_updated_time),
      mojo::Clone(end_of_media)
  );
}

template <typename T, MediaPosition::EnableIfSame<T>*>
bool MediaPosition::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->playback_rate, other_struct.playback_rate))
    return false;
  if (!mojo::Equals(this->duration, other_struct.duration))
    return false;
  if (!mojo::Equals(this->position, other_struct.position))
    return false;
  if (!mojo::Equals(this->last_updated_time, other_struct.last_updated_time))
    return false;
  if (!mojo::Equals(this->end_of_media, other_struct.end_of_media))
    return false;
  return true;
}

template <typename T, MediaPosition::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.playback_rate < rhs.playback_rate)
    return true;
  if (rhs.playback_rate < lhs.playback_rate)
    return false;
  if (lhs.duration < rhs.duration)
    return true;
  if (rhs.duration < lhs.duration)
    return false;
  if (lhs.position < rhs.position)
    return true;
  if (rhs.position < lhs.position)
    return false;
  if (lhs.last_updated_time < rhs.last_updated_time)
    return true;
  if (rhs.last_updated_time < lhs.last_updated_time)
    return false;
  if (lhs.end_of_media < rhs.end_of_media)
    return true;
  if (rhs.end_of_media < lhs.end_of_media)
    return false;
  return false;
}
template <typename StructPtrType>
MediaSessionInfoPtr MediaSessionInfo::Clone() const {
  return New(
      mojo::Clone(state),
      mojo::Clone(force_duck),
      mojo::Clone(playback_state),
      mojo::Clone(is_controllable),
      mojo::Clone(prefer_stop_for_gain_focus_loss),
      mojo::Clone(is_sensitive),
      mojo::Clone(picture_in_picture_state),
      mojo::Clone(deprecated_audio_video_state),
      mojo::Clone(audio_sink_id),
      mojo::Clone(audio_video_states),
      mojo::Clone(microphone_state),
      mojo::Clone(camera_state),
      mojo::Clone(muted),
      mojo::Clone(has_presentation)
  );
}

template <typename T, MediaSessionInfo::EnableIfSame<T>*>
bool MediaSessionInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->state, other_struct.state))
    return false;
  if (!mojo::Equals(this->force_duck, other_struct.force_duck))
    return false;
  if (!mojo::Equals(this->playback_state, other_struct.playback_state))
    return false;
  if (!mojo::Equals(this->is_controllable, other_struct.is_controllable))
    return false;
  if (!mojo::Equals(this->prefer_stop_for_gain_focus_loss, other_struct.prefer_stop_for_gain_focus_loss))
    return false;
  if (!mojo::Equals(this->is_sensitive, other_struct.is_sensitive))
    return false;
  if (!mojo::Equals(this->picture_in_picture_state, other_struct.picture_in_picture_state))
    return false;
  if (!mojo::Equals(this->deprecated_audio_video_state, other_struct.deprecated_audio_video_state))
    return false;
  if (!mojo::Equals(this->audio_sink_id, other_struct.audio_sink_id))
    return false;
  if (!mojo::Equals(this->audio_video_states, other_struct.audio_video_states))
    return false;
  if (!mojo::Equals(this->microphone_state, other_struct.microphone_state))
    return false;
  if (!mojo::Equals(this->camera_state, other_struct.camera_state))
    return false;
  if (!mojo::Equals(this->muted, other_struct.muted))
    return false;
  if (!mojo::Equals(this->has_presentation, other_struct.has_presentation))
    return false;
  return true;
}

template <typename T, MediaSessionInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.state < rhs.state)
    return true;
  if (rhs.state < lhs.state)
    return false;
  if (lhs.force_duck < rhs.force_duck)
    return true;
  if (rhs.force_duck < lhs.force_duck)
    return false;
  if (lhs.playback_state < rhs.playback_state)
    return true;
  if (rhs.playback_state < lhs.playback_state)
    return false;
  if (lhs.is_controllable < rhs.is_controllable)
    return true;
  if (rhs.is_controllable < lhs.is_controllable)
    return false;
  if (lhs.prefer_stop_for_gain_focus_loss < rhs.prefer_stop_for_gain_focus_loss)
    return true;
  if (rhs.prefer_stop_for_gain_focus_loss < lhs.prefer_stop_for_gain_focus_loss)
    return false;
  if (lhs.is_sensitive < rhs.is_sensitive)
    return true;
  if (rhs.is_sensitive < lhs.is_sensitive)
    return false;
  if (lhs.picture_in_picture_state < rhs.picture_in_picture_state)
    return true;
  if (rhs.picture_in_picture_state < lhs.picture_in_picture_state)
    return false;
  if (lhs.deprecated_audio_video_state < rhs.deprecated_audio_video_state)
    return true;
  if (rhs.deprecated_audio_video_state < lhs.deprecated_audio_video_state)
    return false;
  if (lhs.audio_sink_id < rhs.audio_sink_id)
    return true;
  if (rhs.audio_sink_id < lhs.audio_sink_id)
    return false;
  if (lhs.audio_video_states < rhs.audio_video_states)
    return true;
  if (rhs.audio_video_states < lhs.audio_video_states)
    return false;
  if (lhs.microphone_state < rhs.microphone_state)
    return true;
  if (rhs.microphone_state < lhs.microphone_state)
    return false;
  if (lhs.camera_state < rhs.camera_state)
    return true;
  if (rhs.camera_state < lhs.camera_state)
    return false;
  if (lhs.muted < rhs.muted)
    return true;
  if (rhs.muted < lhs.muted)
    return false;
  if (lhs.has_presentation < rhs.has_presentation)
    return true;
  if (rhs.has_presentation < lhs.has_presentation)
    return false;
  return false;
}
template <typename StructPtrType>
MediaSessionDebugInfoPtr MediaSessionDebugInfo::Clone() const {
  return New(
      mojo::Clone(name),
      mojo::Clone(owner),
      mojo::Clone(state)
  );
}

template <typename T, MediaSessionDebugInfo::EnableIfSame<T>*>
bool MediaSessionDebugInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->name, other_struct.name))
    return false;
  if (!mojo::Equals(this->owner, other_struct.owner))
    return false;
  if (!mojo::Equals(this->state, other_struct.state))
    return false;
  return true;
}

template <typename T, MediaSessionDebugInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.name < rhs.name)
    return true;
  if (rhs.name < lhs.name)
    return false;
  if (lhs.owner < rhs.owner)
    return true;
  if (rhs.owner < lhs.owner)
    return false;
  if (lhs.state < rhs.state)
    return true;
  if (rhs.state < lhs.state)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace media_session

namespace mojo {


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media_session::mojom::blink::MediaImage::DataView,
                                         ::media_session::mojom::blink::MediaImagePtr> {
  static bool IsNull(const ::media_session::mojom::blink::MediaImagePtr& input) { return !input; }
  static void SetToNull(::media_session::mojom::blink::MediaImagePtr* output) { output->reset(); }

  static const decltype(::media_session::mojom::blink::MediaImage::src)& src(
      const ::media_session::mojom::blink::MediaImagePtr& input) {
    return input->src;
  }

  static const decltype(::media_session::mojom::blink::MediaImage::type)& type(
      const ::media_session::mojom::blink::MediaImagePtr& input) {
    return input->type;
  }

  static const decltype(::media_session::mojom::blink::MediaImage::sizes)& sizes(
      const ::media_session::mojom::blink::MediaImagePtr& input) {
    return input->sizes;
  }

  static bool Read(::media_session::mojom::blink::MediaImage::DataView input, ::media_session::mojom::blink::MediaImagePtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media_session::mojom::blink::MediaMetadata::DataView,
                                         ::media_session::mojom::blink::MediaMetadataPtr> {
  static bool IsNull(const ::media_session::mojom::blink::MediaMetadataPtr& input) { return !input; }
  static void SetToNull(::media_session::mojom::blink::MediaMetadataPtr* output) { output->reset(); }

  static const decltype(::media_session::mojom::blink::MediaMetadata::title)& title(
      const ::media_session::mojom::blink::MediaMetadataPtr& input) {
    return input->title;
  }

  static const decltype(::media_session::mojom::blink::MediaMetadata::artist)& artist(
      const ::media_session::mojom::blink::MediaMetadataPtr& input) {
    return input->artist;
  }

  static const decltype(::media_session::mojom::blink::MediaMetadata::album)& album(
      const ::media_session::mojom::blink::MediaMetadataPtr& input) {
    return input->album;
  }

  static const decltype(::media_session::mojom::blink::MediaMetadata::source_title)& source_title(
      const ::media_session::mojom::blink::MediaMetadataPtr& input) {
    return input->source_title;
  }

  static bool Read(::media_session::mojom::blink::MediaMetadata::DataView input, ::media_session::mojom::blink::MediaMetadataPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media_session::mojom::blink::MediaImageBitmap::DataView,
                                         ::media_session::mojom::blink::MediaImageBitmapPtr> {
  static bool IsNull(const ::media_session::mojom::blink::MediaImageBitmapPtr& input) { return !input; }
  static void SetToNull(::media_session::mojom::blink::MediaImageBitmapPtr* output) { output->reset(); }

  static decltype(::media_session::mojom::blink::MediaImageBitmap::width) width(
      const ::media_session::mojom::blink::MediaImageBitmapPtr& input) {
    return input->width;
  }

  static decltype(::media_session::mojom::blink::MediaImageBitmap::height) height(
      const ::media_session::mojom::blink::MediaImageBitmapPtr& input) {
    return input->height;
  }

  static const decltype(::media_session::mojom::blink::MediaImageBitmap::pixel_data)& pixel_data(
      const ::media_session::mojom::blink::MediaImageBitmapPtr& input) {
    return input->pixel_data;
  }

  static decltype(::media_session::mojom::blink::MediaImageBitmap::color_type) color_type(
      const ::media_session::mojom::blink::MediaImageBitmapPtr& input) {
    return input->color_type;
  }

  static bool Read(::media_session::mojom::blink::MediaImageBitmap::DataView input, ::media_session::mojom::blink::MediaImageBitmapPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media_session::mojom::blink::MediaPosition::DataView,
                                         ::media_session::mojom::blink::MediaPositionPtr> {
  static bool IsNull(const ::media_session::mojom::blink::MediaPositionPtr& input) { return !input; }
  static void SetToNull(::media_session::mojom::blink::MediaPositionPtr* output) { output->reset(); }

  static decltype(::media_session::mojom::blink::MediaPosition::playback_rate) playback_rate(
      const ::media_session::mojom::blink::MediaPositionPtr& input) {
    return input->playback_rate;
  }

  static const decltype(::media_session::mojom::blink::MediaPosition::duration)& duration(
      const ::media_session::mojom::blink::MediaPositionPtr& input) {
    return input->duration;
  }

  static const decltype(::media_session::mojom::blink::MediaPosition::position)& position(
      const ::media_session::mojom::blink::MediaPositionPtr& input) {
    return input->position;
  }

  static const decltype(::media_session::mojom::blink::MediaPosition::last_updated_time)& last_updated_time(
      const ::media_session::mojom::blink::MediaPositionPtr& input) {
    return input->last_updated_time;
  }

  static decltype(::media_session::mojom::blink::MediaPosition::end_of_media) end_of_media(
      const ::media_session::mojom::blink::MediaPositionPtr& input) {
    return input->end_of_media;
  }

  static bool Read(::media_session::mojom::blink::MediaPosition::DataView input, ::media_session::mojom::blink::MediaPositionPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media_session::mojom::blink::MediaSessionInfo::DataView,
                                         ::media_session::mojom::blink::MediaSessionInfoPtr> {
  static bool IsNull(const ::media_session::mojom::blink::MediaSessionInfoPtr& input) { return !input; }
  static void SetToNull(::media_session::mojom::blink::MediaSessionInfoPtr* output) { output->reset(); }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::state) state(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->state;
  }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::force_duck) force_duck(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->force_duck;
  }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::playback_state) playback_state(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->playback_state;
  }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::is_controllable) is_controllable(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->is_controllable;
  }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::prefer_stop_for_gain_focus_loss) prefer_stop_for_gain_focus_loss(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->prefer_stop_for_gain_focus_loss;
  }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::is_sensitive) is_sensitive(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->is_sensitive;
  }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::picture_in_picture_state) picture_in_picture_state(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->picture_in_picture_state;
  }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::deprecated_audio_video_state) deprecated_audio_video_state(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->deprecated_audio_video_state;
  }

  static const decltype(::media_session::mojom::blink::MediaSessionInfo::audio_sink_id)& audio_sink_id(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->audio_sink_id;
  }

  static const decltype(::media_session::mojom::blink::MediaSessionInfo::audio_video_states)& audio_video_states(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->audio_video_states;
  }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::microphone_state) microphone_state(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->microphone_state;
  }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::camera_state) camera_state(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->camera_state;
  }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::muted) muted(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->muted;
  }

  static decltype(::media_session::mojom::blink::MediaSessionInfo::has_presentation) has_presentation(
      const ::media_session::mojom::blink::MediaSessionInfoPtr& input) {
    return input->has_presentation;
  }

  static bool Read(::media_session::mojom::blink::MediaSessionInfo::DataView input, ::media_session::mojom::blink::MediaSessionInfoPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media_session::mojom::blink::MediaSessionDebugInfo::DataView,
                                         ::media_session::mojom::blink::MediaSessionDebugInfoPtr> {
  static bool IsNull(const ::media_session::mojom::blink::MediaSessionDebugInfoPtr& input) { return !input; }
  static void SetToNull(::media_session::mojom::blink::MediaSessionDebugInfoPtr* output) { output->reset(); }

  static const decltype(::media_session::mojom::blink::MediaSessionDebugInfo::name)& name(
      const ::media_session::mojom::blink::MediaSessionDebugInfoPtr& input) {
    return input->name;
  }

  static const decltype(::media_session::mojom::blink::MediaSessionDebugInfo::owner)& owner(
      const ::media_session::mojom::blink::MediaSessionDebugInfoPtr& input) {
    return input->owner;
  }

  static const decltype(::media_session::mojom::blink::MediaSessionDebugInfo::state)& state(
      const ::media_session::mojom::blink::MediaSessionDebugInfoPtr& input) {
    return input->state;
  }

  static bool Read(::media_session::mojom::blink::MediaSessionDebugInfo::DataView input, ::media_session::mojom::blink::MediaSessionDebugInfoPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_MEDIA_SESSION_PUBLIC_MOJOM_MEDIA_SESSION_MOJOM_BLINK_H_