// services/preferences/public/mojom/tracked_preference_validation_delegate.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_PREFERENCES_PUBLIC_MOJOM_TRACKED_PREFERENCE_VALIDATION_DELEGATE_MOJOM_PARAMS_DATA_H_
#define SERVICES_PREFERENCES_PUBLIC_MOJOM_TRACKED_PREFERENCE_VALIDATION_DELEGATE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace prefs {
namespace mojom {
namespace internal {

class ValidationContext;
class  TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> pref_path;
  ::mojo_base::mojom::internal::Value_Data value;
  int32_t value_state;
  int32_t external_validation_value_state;
  uint8_t is_personal : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_Params_Data>;

  TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_Params_Data();
  ~TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_Params_Data() = delete;
};
static_assert(sizeof(TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_Params_Data) == 48,
              "Bad sizeof(TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_Params_Data)");
class  TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> pref_path;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> invalid_keys;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> external_validation_invalid_keys;
  int32_t value_state;
  int32_t external_validation_value_state;
  uint8_t is_personal : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_Params_Data>;

  TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_Params_Data();
  ~TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_Params_Data() = delete;
};
static_assert(sizeof(TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_Params_Data) == 48,
              "Bad sizeof(TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_Params_Data)");

}  // namespace internal


class TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_ParamsDataView {
 public:
  TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_ParamsDataView() = default;

  TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_ParamsDataView(
      internal::TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPrefPathDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrefPath(UserType* output) {
    
    auto* pointer = data_->pref_path.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetValueDataView(
      ::mojo_base::mojom::ValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::ValueDataView, UserType>(),
    "Attempting to read the optional `value` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadValue` instead "
    "of `ReadValue if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->value.is_null() ? &data_->value : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::ValueDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadValueState(UserType* output) const {
    auto data_value = data_->value_state;
    return mojo::internal::Deserialize<::prefs::mojom::TrackedPreferenceValidationDelegate_ValueState>(
        data_value, output);
  }
  TrackedPreferenceValidationDelegate_ValueState value_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::prefs::mojom::TrackedPreferenceValidationDelegate_ValueState>(data_->value_state));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadExternalValidationValueState(UserType* output) const {
    auto data_value = data_->external_validation_value_state;
    return mojo::internal::Deserialize<::prefs::mojom::TrackedPreferenceValidationDelegate_ValueState>(
        data_value, output);
  }
  TrackedPreferenceValidationDelegate_ValueState external_validation_value_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::prefs::mojom::TrackedPreferenceValidationDelegate_ValueState>(data_->external_validation_value_state));
  }
  bool is_personal() const {
    return data_->is_personal;
  }
 private:
  internal::TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_ParamsDataView {
 public:
  TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_ParamsDataView() = default;

  TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_ParamsDataView(
      internal::TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPrefPathDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrefPath(UserType* output) {
    
    auto* pointer = data_->pref_path.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetInvalidKeysDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInvalidKeys(UserType* output) {
    
    auto* pointer = data_->invalid_keys.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
  inline void GetExternalValidationInvalidKeysDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadExternalValidationInvalidKeys(UserType* output) {
    
    auto* pointer = data_->external_validation_invalid_keys.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadValueState(UserType* output) const {
    auto data_value = data_->value_state;
    return mojo::internal::Deserialize<::prefs::mojom::TrackedPreferenceValidationDelegate_ValueState>(
        data_value, output);
  }
  TrackedPreferenceValidationDelegate_ValueState value_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::prefs::mojom::TrackedPreferenceValidationDelegate_ValueState>(data_->value_state));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadExternalValidationValueState(UserType* output) const {
    auto data_value = data_->external_validation_value_state;
    return mojo::internal::Deserialize<::prefs::mojom::TrackedPreferenceValidationDelegate_ValueState>(
        data_value, output);
  }
  TrackedPreferenceValidationDelegate_ValueState external_validation_value_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::prefs::mojom::TrackedPreferenceValidationDelegate_ValueState>(data_->external_validation_value_state));
  }
  bool is_personal() const {
    return data_->is_personal;
  }
 private:
  internal::TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_ParamsDataView::GetPrefPathDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->pref_path.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void TrackedPreferenceValidationDelegate_OnAtomicPreferenceValidation_ParamsDataView::GetValueDataView(
    ::mojo_base::mojom::ValueDataView* output) {
  auto pointer = &data_->value;
  *output = ::mojo_base::mojom::ValueDataView(pointer, message_);
}


inline void TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_ParamsDataView::GetPrefPathDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->pref_path.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_ParamsDataView::GetInvalidKeysDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->invalid_keys.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}
inline void TrackedPreferenceValidationDelegate_OnSplitPreferenceValidation_ParamsDataView::GetExternalValidationInvalidKeysDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->external_validation_invalid_keys.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace prefs

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_PREFERENCES_PUBLIC_MOJOM_TRACKED_PREFERENCE_VALIDATION_DELEGATE_MOJOM_PARAMS_DATA_H_