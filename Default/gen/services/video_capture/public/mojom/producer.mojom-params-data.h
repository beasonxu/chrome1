// services/video_capture/public/mojom/producer.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_PRODUCER_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_PRODUCER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace video_capture {
namespace mojom {
namespace internal {

class ValidationContext;
class  Producer_OnNewBuffer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t buffer_id;
  uint8_t pad0_[4];
  ::media::mojom::internal::VideoBufferHandle_Data buffer_handle;

 private:
  friend class mojo::internal::MessageFragment<Producer_OnNewBuffer_Params_Data>;

  Producer_OnNewBuffer_Params_Data();
  ~Producer_OnNewBuffer_Params_Data() = delete;
};
static_assert(sizeof(Producer_OnNewBuffer_Params_Data) == 32,
              "Bad sizeof(Producer_OnNewBuffer_Params_Data)");
class  Producer_OnNewBuffer_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Producer_OnNewBuffer_ResponseParams_Data>;

  Producer_OnNewBuffer_ResponseParams_Data();
  ~Producer_OnNewBuffer_ResponseParams_Data() = delete;
};
static_assert(sizeof(Producer_OnNewBuffer_ResponseParams_Data) == 8,
              "Bad sizeof(Producer_OnNewBuffer_ResponseParams_Data)");
class  Producer_OnBufferRetired_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t buffer_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Producer_OnBufferRetired_Params_Data>;

  Producer_OnBufferRetired_Params_Data();
  ~Producer_OnBufferRetired_Params_Data() = delete;
};
static_assert(sizeof(Producer_OnBufferRetired_Params_Data) == 16,
              "Bad sizeof(Producer_OnBufferRetired_Params_Data)");

}  // namespace internal


class Producer_OnNewBuffer_ParamsDataView {
 public:
  Producer_OnNewBuffer_ParamsDataView() = default;

  Producer_OnNewBuffer_ParamsDataView(
      internal::Producer_OnNewBuffer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t buffer_id() const {
    return data_->buffer_id;
  }
  inline void GetBufferHandleDataView(
      ::media::mojom::VideoBufferHandleDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBufferHandle(UserType* output) {
    
    auto* pointer = !data_->buffer_handle.is_null() ? &data_->buffer_handle : nullptr;
    return mojo::internal::Deserialize<::media::mojom::VideoBufferHandleDataView>(
        pointer, output, message_);
  }
 private:
  internal::Producer_OnNewBuffer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Producer_OnNewBuffer_ResponseParamsDataView {
 public:
  Producer_OnNewBuffer_ResponseParamsDataView() = default;

  Producer_OnNewBuffer_ResponseParamsDataView(
      internal::Producer_OnNewBuffer_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Producer_OnNewBuffer_ResponseParams_Data* data_ = nullptr;
};



class Producer_OnBufferRetired_ParamsDataView {
 public:
  Producer_OnBufferRetired_ParamsDataView() = default;

  Producer_OnBufferRetired_ParamsDataView(
      internal::Producer_OnBufferRetired_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t buffer_id() const {
    return data_->buffer_id;
  }
 private:
  internal::Producer_OnBufferRetired_Params_Data* data_ = nullptr;
};


inline void Producer_OnNewBuffer_ParamsDataView::GetBufferHandleDataView(
    ::media::mojom::VideoBufferHandleDataView* output) {
  auto pointer = &data_->buffer_handle;
  *output = ::media::mojom::VideoBufferHandleDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace video_capture

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_PRODUCER_MOJOM_PARAMS_DATA_H_