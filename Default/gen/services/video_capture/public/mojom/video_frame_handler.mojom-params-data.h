// services/video_capture/public/mojom/video_frame_handler.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_FRAME_HANDLER_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_FRAME_HANDLER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace video_capture {
namespace mojom {
namespace internal {

class ValidationContext;
class  VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t buffer_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params_Data>;

  VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params_Data();
  ~VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params_Data) == 16,
              "Bad sizeof(VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params_Data)");
class  VideoFrameHandler_OnNewBuffer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t buffer_id;
  uint8_t pad0_[4];
  ::media::mojom::internal::VideoBufferHandle_Data buffer_handle;

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnNewBuffer_Params_Data>;

  VideoFrameHandler_OnNewBuffer_Params_Data();
  ~VideoFrameHandler_OnNewBuffer_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnNewBuffer_Params_Data) == 32,
              "Bad sizeof(VideoFrameHandler_OnNewBuffer_Params_Data)");
class  VideoFrameHandler_OnFrameAccessHandlerReady_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data frame_access_handler;

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnFrameAccessHandlerReady_Params_Data>;

  VideoFrameHandler_OnFrameAccessHandlerReady_Params_Data();
  ~VideoFrameHandler_OnFrameAccessHandlerReady_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnFrameAccessHandlerReady_Params_Data) == 16,
              "Bad sizeof(VideoFrameHandler_OnFrameAccessHandlerReady_Params_Data)");
class  VideoFrameHandler_OnFrameReadyInBuffer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ReadyFrameInBuffer_Data> buffer;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ReadyFrameInBuffer_Data>>> scaled_buffers;

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnFrameReadyInBuffer_Params_Data>;

  VideoFrameHandler_OnFrameReadyInBuffer_Params_Data();
  ~VideoFrameHandler_OnFrameReadyInBuffer_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnFrameReadyInBuffer_Params_Data) == 24,
              "Bad sizeof(VideoFrameHandler_OnFrameReadyInBuffer_Params_Data)");
class  VideoFrameHandler_OnBufferRetired_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t buffer_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnBufferRetired_Params_Data>;

  VideoFrameHandler_OnBufferRetired_Params_Data();
  ~VideoFrameHandler_OnBufferRetired_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnBufferRetired_Params_Data) == 16,
              "Bad sizeof(VideoFrameHandler_OnBufferRetired_Params_Data)");
class  VideoFrameHandler_OnError_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnError_Params_Data>;

  VideoFrameHandler_OnError_Params_Data();
  ~VideoFrameHandler_OnError_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnError_Params_Data) == 16,
              "Bad sizeof(VideoFrameHandler_OnError_Params_Data)");
class  VideoFrameHandler_OnFrameDropped_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t reason;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnFrameDropped_Params_Data>;

  VideoFrameHandler_OnFrameDropped_Params_Data();
  ~VideoFrameHandler_OnFrameDropped_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnFrameDropped_Params_Data) == 16,
              "Bad sizeof(VideoFrameHandler_OnFrameDropped_Params_Data)");
class  VideoFrameHandler_OnNewCropVersion_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t crop_version;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnNewCropVersion_Params_Data>;

  VideoFrameHandler_OnNewCropVersion_Params_Data();
  ~VideoFrameHandler_OnNewCropVersion_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnNewCropVersion_Params_Data) == 16,
              "Bad sizeof(VideoFrameHandler_OnNewCropVersion_Params_Data)");
class  VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params_Data>;

  VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params_Data();
  ~VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params_Data) == 8,
              "Bad sizeof(VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params_Data)");
class  VideoFrameHandler_OnLog_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnLog_Params_Data>;

  VideoFrameHandler_OnLog_Params_Data();
  ~VideoFrameHandler_OnLog_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnLog_Params_Data) == 16,
              "Bad sizeof(VideoFrameHandler_OnLog_Params_Data)");
class  VideoFrameHandler_OnStarted_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnStarted_Params_Data>;

  VideoFrameHandler_OnStarted_Params_Data();
  ~VideoFrameHandler_OnStarted_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnStarted_Params_Data) == 8,
              "Bad sizeof(VideoFrameHandler_OnStarted_Params_Data)");
class  VideoFrameHandler_OnStartedUsingGpuDecode_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnStartedUsingGpuDecode_Params_Data>;

  VideoFrameHandler_OnStartedUsingGpuDecode_Params_Data();
  ~VideoFrameHandler_OnStartedUsingGpuDecode_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnStartedUsingGpuDecode_Params_Data) == 8,
              "Bad sizeof(VideoFrameHandler_OnStartedUsingGpuDecode_Params_Data)");
class  VideoFrameHandler_OnStopped_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<VideoFrameHandler_OnStopped_Params_Data>;

  VideoFrameHandler_OnStopped_Params_Data();
  ~VideoFrameHandler_OnStopped_Params_Data() = delete;
};
static_assert(sizeof(VideoFrameHandler_OnStopped_Params_Data) == 8,
              "Bad sizeof(VideoFrameHandler_OnStopped_Params_Data)");

}  // namespace internal


class VideoFrameAccessHandler_OnFinishedConsumingBuffer_ParamsDataView {
 public:
  VideoFrameAccessHandler_OnFinishedConsumingBuffer_ParamsDataView() = default;

  VideoFrameAccessHandler_OnFinishedConsumingBuffer_ParamsDataView(
      internal::VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t buffer_id() const {
    return data_->buffer_id;
  }
 private:
  internal::VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params_Data* data_ = nullptr;
};



class VideoFrameHandler_OnNewBuffer_ParamsDataView {
 public:
  VideoFrameHandler_OnNewBuffer_ParamsDataView() = default;

  VideoFrameHandler_OnNewBuffer_ParamsDataView(
      internal::VideoFrameHandler_OnNewBuffer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t buffer_id() const {
    return data_->buffer_id;
  }
  inline void GetBufferHandleDataView(
      ::media::mojom::VideoBufferHandleDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBufferHandle(UserType* output) {
    
    auto* pointer = !data_->buffer_handle.is_null() ? &data_->buffer_handle : nullptr;
    return mojo::internal::Deserialize<::media::mojom::VideoBufferHandleDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoFrameHandler_OnNewBuffer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoFrameHandler_OnFrameAccessHandlerReady_ParamsDataView {
 public:
  VideoFrameHandler_OnFrameAccessHandlerReady_ParamsDataView() = default;

  VideoFrameHandler_OnFrameAccessHandlerReady_ParamsDataView(
      internal::VideoFrameHandler_OnFrameAccessHandlerReady_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeFrameAccessHandler() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::video_capture::mojom::VideoFrameAccessHandlerInterfaceBase>>(
            &data_->frame_access_handler, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::VideoFrameHandler_OnFrameAccessHandlerReady_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoFrameHandler_OnFrameReadyInBuffer_ParamsDataView {
 public:
  VideoFrameHandler_OnFrameReadyInBuffer_ParamsDataView() = default;

  VideoFrameHandler_OnFrameReadyInBuffer_ParamsDataView(
      internal::VideoFrameHandler_OnFrameReadyInBuffer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBufferDataView(
      ReadyFrameInBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBuffer(UserType* output) {
    
    auto* pointer = data_->buffer.Get();
    return mojo::internal::Deserialize<::video_capture::mojom::ReadyFrameInBufferDataView>(
        pointer, output, message_);
  }
  inline void GetScaledBuffersDataView(
      mojo::ArrayDataView<ReadyFrameInBufferDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScaledBuffers(UserType* output) {
    
    auto* pointer = data_->scaled_buffers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::video_capture::mojom::ReadyFrameInBufferDataView>>(
        pointer, output, message_);
  }
 private:
  internal::VideoFrameHandler_OnFrameReadyInBuffer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoFrameHandler_OnBufferRetired_ParamsDataView {
 public:
  VideoFrameHandler_OnBufferRetired_ParamsDataView() = default;

  VideoFrameHandler_OnBufferRetired_ParamsDataView(
      internal::VideoFrameHandler_OnBufferRetired_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t buffer_id() const {
    return data_->buffer_id;
  }
 private:
  internal::VideoFrameHandler_OnBufferRetired_Params_Data* data_ = nullptr;
};



class VideoFrameHandler_OnError_ParamsDataView {
 public:
  VideoFrameHandler_OnError_ParamsDataView() = default;

  VideoFrameHandler_OnError_ParamsDataView(
      internal::VideoFrameHandler_OnError_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureError>(
        data_value, output);
  }
  ::media::mojom::VideoCaptureError error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media::mojom::VideoCaptureError>(data_->error));
  }
 private:
  internal::VideoFrameHandler_OnError_Params_Data* data_ = nullptr;
};



class VideoFrameHandler_OnFrameDropped_ParamsDataView {
 public:
  VideoFrameHandler_OnFrameDropped_ParamsDataView() = default;

  VideoFrameHandler_OnFrameDropped_ParamsDataView(
      internal::VideoFrameHandler_OnFrameDropped_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureFrameDropReason>(
        data_value, output);
  }
  ::media::mojom::VideoCaptureFrameDropReason reason() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media::mojom::VideoCaptureFrameDropReason>(data_->reason));
  }
 private:
  internal::VideoFrameHandler_OnFrameDropped_Params_Data* data_ = nullptr;
};



class VideoFrameHandler_OnNewCropVersion_ParamsDataView {
 public:
  VideoFrameHandler_OnNewCropVersion_ParamsDataView() = default;

  VideoFrameHandler_OnNewCropVersion_ParamsDataView(
      internal::VideoFrameHandler_OnNewCropVersion_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t crop_version() const {
    return data_->crop_version;
  }
 private:
  internal::VideoFrameHandler_OnNewCropVersion_Params_Data* data_ = nullptr;
};



class VideoFrameHandler_OnFrameWithEmptyRegionCapture_ParamsDataView {
 public:
  VideoFrameHandler_OnFrameWithEmptyRegionCapture_ParamsDataView() = default;

  VideoFrameHandler_OnFrameWithEmptyRegionCapture_ParamsDataView(
      internal::VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params_Data* data_ = nullptr;
};



class VideoFrameHandler_OnLog_ParamsDataView {
 public:
  VideoFrameHandler_OnLog_ParamsDataView() = default;

  VideoFrameHandler_OnLog_ParamsDataView(
      internal::VideoFrameHandler_OnLog_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoFrameHandler_OnLog_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoFrameHandler_OnStarted_ParamsDataView {
 public:
  VideoFrameHandler_OnStarted_ParamsDataView() = default;

  VideoFrameHandler_OnStarted_ParamsDataView(
      internal::VideoFrameHandler_OnStarted_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VideoFrameHandler_OnStarted_Params_Data* data_ = nullptr;
};



class VideoFrameHandler_OnStartedUsingGpuDecode_ParamsDataView {
 public:
  VideoFrameHandler_OnStartedUsingGpuDecode_ParamsDataView() = default;

  VideoFrameHandler_OnStartedUsingGpuDecode_ParamsDataView(
      internal::VideoFrameHandler_OnStartedUsingGpuDecode_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VideoFrameHandler_OnStartedUsingGpuDecode_Params_Data* data_ = nullptr;
};



class VideoFrameHandler_OnStopped_ParamsDataView {
 public:
  VideoFrameHandler_OnStopped_ParamsDataView() = default;

  VideoFrameHandler_OnStopped_ParamsDataView(
      internal::VideoFrameHandler_OnStopped_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VideoFrameHandler_OnStopped_Params_Data* data_ = nullptr;
};




inline void VideoFrameHandler_OnNewBuffer_ParamsDataView::GetBufferHandleDataView(
    ::media::mojom::VideoBufferHandleDataView* output) {
  auto pointer = &data_->buffer_handle;
  *output = ::media::mojom::VideoBufferHandleDataView(pointer, message_);
}




inline void VideoFrameHandler_OnFrameReadyInBuffer_ParamsDataView::GetBufferDataView(
    ReadyFrameInBufferDataView* output) {
  auto pointer = data_->buffer.Get();
  *output = ReadyFrameInBufferDataView(pointer, message_);
}
inline void VideoFrameHandler_OnFrameReadyInBuffer_ParamsDataView::GetScaledBuffersDataView(
    mojo::ArrayDataView<ReadyFrameInBufferDataView>* output) {
  auto pointer = data_->scaled_buffers.Get();
  *output = mojo::ArrayDataView<ReadyFrameInBufferDataView>(pointer, message_);
}












inline void VideoFrameHandler_OnLog_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}







}  // namespace mojom
}  // namespace video_capture

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_FRAME_HANDLER_MOJOM_PARAMS_DATA_H_