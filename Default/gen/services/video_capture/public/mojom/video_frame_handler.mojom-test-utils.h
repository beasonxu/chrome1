// services/video_capture/public/mojom/video_frame_handler.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_FRAME_HANDLER_MOJOM_TEST_UTILS_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_FRAME_HANDLER_MOJOM_TEST_UTILS_H_

#include "services/video_capture/public/mojom/video_frame_handler.mojom.h"


namespace video_capture {
namespace mojom {


class  VideoFrameAccessHandlerInterceptorForTesting : public VideoFrameAccessHandler {
  virtual VideoFrameAccessHandler* GetForwardingInterface() = 0;
  void OnFinishedConsumingBuffer(int32_t buffer_id) override;
};
class  VideoFrameAccessHandlerAsyncWaiter {
 public:
  explicit VideoFrameAccessHandlerAsyncWaiter(VideoFrameAccessHandler* proxy);

  VideoFrameAccessHandlerAsyncWaiter(const VideoFrameAccessHandlerAsyncWaiter&) = delete;
  VideoFrameAccessHandlerAsyncWaiter& operator=(const VideoFrameAccessHandlerAsyncWaiter&) = delete;

  ~VideoFrameAccessHandlerAsyncWaiter();

 private:
  VideoFrameAccessHandler* const proxy_;
};


class  VideoFrameHandlerInterceptorForTesting : public VideoFrameHandler {
  virtual VideoFrameHandler* GetForwardingInterface() = 0;
  void OnNewBuffer(int32_t buffer_id, ::media::mojom::VideoBufferHandlePtr buffer_handle) override;
  void OnFrameAccessHandlerReady(::mojo::PendingRemote<VideoFrameAccessHandler> frame_access_handler) override;
  void OnFrameReadyInBuffer(ReadyFrameInBufferPtr buffer, std::vector<ReadyFrameInBufferPtr> scaled_buffers) override;
  void OnBufferRetired(int32_t buffer_id) override;
  void OnError(::media::VideoCaptureError error) override;
  void OnFrameDropped(::media::VideoCaptureFrameDropReason reason) override;
  void OnNewCropVersion(uint32_t crop_version) override;
  void OnFrameWithEmptyRegionCapture() override;
  void OnLog(const std::string& message) override;
  void OnStarted() override;
  void OnStartedUsingGpuDecode() override;
  void OnStopped() override;
};
class  VideoFrameHandlerAsyncWaiter {
 public:
  explicit VideoFrameHandlerAsyncWaiter(VideoFrameHandler* proxy);

  VideoFrameHandlerAsyncWaiter(const VideoFrameHandlerAsyncWaiter&) = delete;
  VideoFrameHandlerAsyncWaiter& operator=(const VideoFrameHandlerAsyncWaiter&) = delete;

  ~VideoFrameHandlerAsyncWaiter();

 private:
  VideoFrameHandler* const proxy_;
};




}  // namespace mojom
}  // namespace video_capture

#endif  // SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_FRAME_HANDLER_MOJOM_TEST_UTILS_H_