// services/video_capture/public/mojom/video_capture_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_CAPTURE_SERVICE_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_CAPTURE_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace video_capture {
namespace mojom {
namespace internal {

class ValidationContext;
class  VideoCaptureService_ConnectToDeviceFactory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureService_ConnectToDeviceFactory_Params_Data>;

  VideoCaptureService_ConnectToDeviceFactory_Params_Data();
  ~VideoCaptureService_ConnectToDeviceFactory_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureService_ConnectToDeviceFactory_Params_Data) == 16,
              "Bad sizeof(VideoCaptureService_ConnectToDeviceFactory_Params_Data)");
class  VideoCaptureService_ConnectToVideoSourceProvider_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureService_ConnectToVideoSourceProvider_Params_Data>;

  VideoCaptureService_ConnectToVideoSourceProvider_Params_Data();
  ~VideoCaptureService_ConnectToVideoSourceProvider_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureService_ConnectToVideoSourceProvider_Params_Data) == 16,
              "Bad sizeof(VideoCaptureService_ConnectToVideoSourceProvider_Params_Data)");
class  VideoCaptureService_SetRetryCount_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t count;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureService_SetRetryCount_Params_Data>;

  VideoCaptureService_SetRetryCount_Params_Data();
  ~VideoCaptureService_SetRetryCount_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureService_SetRetryCount_Params_Data) == 16,
              "Bad sizeof(VideoCaptureService_SetRetryCount_Params_Data)");
class  VideoCaptureService_BindControlsForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureService_BindControlsForTesting_Params_Data>;

  VideoCaptureService_BindControlsForTesting_Params_Data();
  ~VideoCaptureService_BindControlsForTesting_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureService_BindControlsForTesting_Params_Data) == 16,
              "Bad sizeof(VideoCaptureService_BindControlsForTesting_Params_Data)");

}  // namespace internal


class VideoCaptureService_ConnectToDeviceFactory_ParamsDataView {
 public:
  VideoCaptureService_ConnectToDeviceFactory_ParamsDataView() = default;

  VideoCaptureService_ConnectToDeviceFactory_ParamsDataView(
      internal::VideoCaptureService_ConnectToDeviceFactory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::DeviceFactoryInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::VideoCaptureService_ConnectToDeviceFactory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureService_ConnectToVideoSourceProvider_ParamsDataView {
 public:
  VideoCaptureService_ConnectToVideoSourceProvider_ParamsDataView() = default;

  VideoCaptureService_ConnectToVideoSourceProvider_ParamsDataView(
      internal::VideoCaptureService_ConnectToVideoSourceProvider_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::VideoSourceProviderInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::VideoCaptureService_ConnectToVideoSourceProvider_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureService_SetRetryCount_ParamsDataView {
 public:
  VideoCaptureService_SetRetryCount_ParamsDataView() = default;

  VideoCaptureService_SetRetryCount_ParamsDataView(
      internal::VideoCaptureService_SetRetryCount_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t count() const {
    return data_->count;
  }
 private:
  internal::VideoCaptureService_SetRetryCount_Params_Data* data_ = nullptr;
};



class VideoCaptureService_BindControlsForTesting_ParamsDataView {
 public:
  VideoCaptureService_BindControlsForTesting_ParamsDataView() = default;

  VideoCaptureService_BindControlsForTesting_ParamsDataView(
      internal::VideoCaptureService_BindControlsForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::TestingControlsInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::VideoCaptureService_BindControlsForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};









}  // namespace mojom
}  // namespace video_capture

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_CAPTURE_SERVICE_MOJOM_PARAMS_DATA_H_