// services/network/public/mojom/network_change_manager.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/network/public/mojom/network_change_manager.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/network/public/mojom/network_change_manager.mojom-params-data.h"
#include "services/network/public/mojom/network_change_manager.mojom-shared-message-ids.h"

#include "services/network/public/mojom/network_change_manager.mojom-import-headers.h"
#include "services/network/public/mojom/network_change_manager.mojom-test-utils.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CHANGE_MANAGER_MOJOM_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CHANGE_MANAGER_MOJOM_JUMBO_H_
#endif



namespace network {
namespace mojom {
const char NetworkChangeManagerClient::Name_[] = "network.mojom.NetworkChangeManagerClient";

NetworkChangeManagerClient::IPCStableHashFunction NetworkChangeManagerClient::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kNetworkChangeManagerClient_OnInitialConnectionType_Name: {
      return &NetworkChangeManagerClient::OnInitialConnectionType_Sym::IPCStableHash;
    }
    case internal::kNetworkChangeManagerClient_OnNetworkChanged_Name: {
      return &NetworkChangeManagerClient::OnNetworkChanged_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* NetworkChangeManagerClient::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kNetworkChangeManagerClient_OnInitialConnectionType_Name:
            return "Receive network::mojom::NetworkChangeManagerClient::OnInitialConnectionType";
      case internal::kNetworkChangeManagerClient_OnNetworkChanged_Name:
            return "Receive network::mojom::NetworkChangeManagerClient::OnNetworkChanged";
    }
  } else {
    switch (message.name()) {
      case internal::kNetworkChangeManagerClient_OnInitialConnectionType_Name:
            return "Receive reply network::mojom::NetworkChangeManagerClient::OnInitialConnectionType";
      case internal::kNetworkChangeManagerClient_OnNetworkChanged_Name:
            return "Receive reply network::mojom::NetworkChangeManagerClient::OnNetworkChanged";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t NetworkChangeManagerClient::OnInitialConnectionType_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)network::mojom::NetworkChangeManagerClient::OnInitialConnectionType");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t NetworkChangeManagerClient::OnNetworkChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)network::mojom::NetworkChangeManagerClient::OnNetworkChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

NetworkChangeManagerClientProxy::NetworkChangeManagerClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void NetworkChangeManagerClientProxy::OnInitialConnectionType(
    ConnectionType in_type) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send network::mojom::NetworkChangeManagerClient::OnInitialConnectionType", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("type"), in_type,
                        "<value of type ConnectionType>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kNetworkChangeManagerClient_OnInitialConnectionType_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::NetworkChangeManagerClient_OnInitialConnectionType_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::network::mojom::ConnectionType>(
      in_type, &params->type);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(NetworkChangeManagerClient::Name_);
  message.set_method_name("OnInitialConnectionType");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void NetworkChangeManagerClientProxy::OnNetworkChanged(
    ConnectionType in_type) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send network::mojom::NetworkChangeManagerClient::OnNetworkChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("type"), in_type,
                        "<value of type ConnectionType>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kNetworkChangeManagerClient_OnNetworkChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::NetworkChangeManagerClient_OnNetworkChanged_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::network::mojom::ConnectionType>(
      in_type, &params->type);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(NetworkChangeManagerClient::Name_);
  message.set_method_name("OnNetworkChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool NetworkChangeManagerClientStubDispatch::Accept(
    NetworkChangeManagerClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kNetworkChangeManagerClient_OnInitialConnectionType_Name: {

      DCHECK(message->is_serialized());
      internal::NetworkChangeManagerClient_OnInitialConnectionType_Params_Data* params =
          reinterpret_cast<internal::NetworkChangeManagerClient_OnInitialConnectionType_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ConnectionType p_type{};
      NetworkChangeManagerClient_OnInitialConnectionType_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadType(&p_type))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            NetworkChangeManagerClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnInitialConnectionType(
std::move(p_type));
      return true;
    }
    case internal::kNetworkChangeManagerClient_OnNetworkChanged_Name: {

      DCHECK(message->is_serialized());
      internal::NetworkChangeManagerClient_OnNetworkChanged_Params_Data* params =
          reinterpret_cast<internal::NetworkChangeManagerClient_OnNetworkChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ConnectionType p_type{};
      NetworkChangeManagerClient_OnNetworkChanged_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadType(&p_type))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            NetworkChangeManagerClient::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnNetworkChanged(
std::move(p_type));
      return true;
    }
  }
  return false;
}

// static
bool NetworkChangeManagerClientStubDispatch::AcceptWithResponder(
    NetworkChangeManagerClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kNetworkChangeManagerClient_OnInitialConnectionType_Name: {
      break;
    }
    case internal::kNetworkChangeManagerClient_OnNetworkChanged_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kNetworkChangeManagerClientValidationInfo[] = {
    {&internal::NetworkChangeManagerClient_OnInitialConnectionType_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::NetworkChangeManagerClient_OnNetworkChanged_Params_Data::Validate,
     nullptr /* no response */},
};

bool NetworkChangeManagerClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::network::mojom::NetworkChangeManagerClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kNetworkChangeManagerClientValidationInfo);
}

const char NetworkChangeManager::Name_[] = "network.mojom.NetworkChangeManager";

NetworkChangeManager::IPCStableHashFunction NetworkChangeManager::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kNetworkChangeManager_RequestNotifications_Name: {
      return &NetworkChangeManager::RequestNotifications_Sym::IPCStableHash;
    }
    case internal::kNetworkChangeManager_OnNetworkChanged_Name: {
      return &NetworkChangeManager::OnNetworkChanged_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* NetworkChangeManager::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kNetworkChangeManager_RequestNotifications_Name:
            return "Receive network::mojom::NetworkChangeManager::RequestNotifications";
      case internal::kNetworkChangeManager_OnNetworkChanged_Name:
            return "Receive network::mojom::NetworkChangeManager::OnNetworkChanged";
    }
  } else {
    switch (message.name()) {
      case internal::kNetworkChangeManager_RequestNotifications_Name:
            return "Receive reply network::mojom::NetworkChangeManager::RequestNotifications";
      case internal::kNetworkChangeManager_OnNetworkChanged_Name:
            return "Receive reply network::mojom::NetworkChangeManager::OnNetworkChanged";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t NetworkChangeManager::RequestNotifications_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)network::mojom::NetworkChangeManager::RequestNotifications");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t NetworkChangeManager::OnNetworkChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)network::mojom::NetworkChangeManager::OnNetworkChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

NetworkChangeManagerProxy::NetworkChangeManagerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void NetworkChangeManagerProxy::RequestNotifications(
    ::mojo::PendingRemote<NetworkChangeManagerClient> in_client_remote) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send network::mojom::NetworkChangeManager::RequestNotifications", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_remote"), in_client_remote,
                        "<value of type ::mojo::PendingRemote<NetworkChangeManagerClient>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kNetworkChangeManager_RequestNotifications_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::NetworkChangeManager_RequestNotifications_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::network::mojom::NetworkChangeManagerClientInterfaceBase>>(
      in_client_remote, &params->client_remote, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client_remote),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client_remote in NetworkChangeManager.RequestNotifications request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(NetworkChangeManager::Name_);
  message.set_method_name("RequestNotifications");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void NetworkChangeManagerProxy::OnNetworkChanged(
    bool in_dns_changed, bool in_ip_address_changed, bool in_connection_type_changed, ConnectionType in_new_connection_type, bool in_connection_subtype_changed, ConnectionSubtype in_new_connection_subtype) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send network::mojom::NetworkChangeManager::OnNetworkChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("dns_changed"), in_dns_changed,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("ip_address_changed"), in_ip_address_changed,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("connection_type_changed"), in_connection_type_changed,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("new_connection_type"), in_new_connection_type,
                        "<value of type ConnectionType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("connection_subtype_changed"), in_connection_subtype_changed,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("new_connection_subtype"), in_new_connection_subtype,
                        "<value of type ConnectionSubtype>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kNetworkChangeManager_OnNetworkChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::NetworkChangeManager_OnNetworkChanged_Params_Data> params(
          message);
  params.Allocate();
  params->dns_changed = in_dns_changed;
  params->ip_address_changed = in_ip_address_changed;
  params->connection_type_changed = in_connection_type_changed;
  mojo::internal::Serialize<::network::mojom::ConnectionType>(
      in_new_connection_type, &params->new_connection_type);
  params->connection_subtype_changed = in_connection_subtype_changed;
  mojo::internal::Serialize<::network::mojom::ConnectionSubtype>(
      in_new_connection_subtype, &params->new_connection_subtype);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(NetworkChangeManager::Name_);
  message.set_method_name("OnNetworkChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool NetworkChangeManagerStubDispatch::Accept(
    NetworkChangeManager* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kNetworkChangeManager_RequestNotifications_Name: {

      DCHECK(message->is_serialized());
      internal::NetworkChangeManager_RequestNotifications_Params_Data* params =
          reinterpret_cast<internal::NetworkChangeManager_RequestNotifications_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<NetworkChangeManagerClient> p_client_remote{};
      NetworkChangeManager_RequestNotifications_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_client_remote =
            input_data_view.TakeClientRemote<decltype(p_client_remote)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            NetworkChangeManager::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestNotifications(
std::move(p_client_remote));
      return true;
    }
    case internal::kNetworkChangeManager_OnNetworkChanged_Name: {

      DCHECK(message->is_serialized());
      internal::NetworkChangeManager_OnNetworkChanged_Params_Data* params =
          reinterpret_cast<internal::NetworkChangeManager_OnNetworkChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_dns_changed{};
      bool p_ip_address_changed{};
      bool p_connection_type_changed{};
      ConnectionType p_new_connection_type{};
      bool p_connection_subtype_changed{};
      ConnectionSubtype p_new_connection_subtype{};
      NetworkChangeManager_OnNetworkChanged_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_dns_changed = input_data_view.dns_changed();
      if (success)
        p_ip_address_changed = input_data_view.ip_address_changed();
      if (success)
        p_connection_type_changed = input_data_view.connection_type_changed();
      if (success && !input_data_view.ReadNewConnectionType(&p_new_connection_type))
        success = false;
      if (success)
        p_connection_subtype_changed = input_data_view.connection_subtype_changed();
      if (success && !input_data_view.ReadNewConnectionSubtype(&p_new_connection_subtype))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            NetworkChangeManager::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnNetworkChanged(
std::move(p_dns_changed), 
std::move(p_ip_address_changed), 
std::move(p_connection_type_changed), 
std::move(p_new_connection_type), 
std::move(p_connection_subtype_changed), 
std::move(p_new_connection_subtype));
      return true;
    }
  }
  return false;
}

// static
bool NetworkChangeManagerStubDispatch::AcceptWithResponder(
    NetworkChangeManager* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kNetworkChangeManager_RequestNotifications_Name: {
      break;
    }
    case internal::kNetworkChangeManager_OnNetworkChanged_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kNetworkChangeManagerValidationInfo[] = {
    {&internal::NetworkChangeManager_RequestNotifications_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::NetworkChangeManager_OnNetworkChanged_Params_Data::Validate,
     nullptr /* no response */},
};

bool NetworkChangeManagerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::network::mojom::NetworkChangeManager::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kNetworkChangeManagerValidationInfo);
}



}  // namespace mojom
}  // namespace network


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace network {
namespace mojom {


void NetworkChangeManagerClientInterceptorForTesting::OnInitialConnectionType(ConnectionType type) {
  GetForwardingInterface()->OnInitialConnectionType(std::move(type));
}
void NetworkChangeManagerClientInterceptorForTesting::OnNetworkChanged(ConnectionType type) {
  GetForwardingInterface()->OnNetworkChanged(std::move(type));
}
NetworkChangeManagerClientAsyncWaiter::NetworkChangeManagerClientAsyncWaiter(
    NetworkChangeManagerClient* proxy) : proxy_(proxy) {}

NetworkChangeManagerClientAsyncWaiter::~NetworkChangeManagerClientAsyncWaiter() = default;




void NetworkChangeManagerInterceptorForTesting::RequestNotifications(::mojo::PendingRemote<NetworkChangeManagerClient> client_remote) {
  GetForwardingInterface()->RequestNotifications(std::move(client_remote));
}
void NetworkChangeManagerInterceptorForTesting::OnNetworkChanged(bool dns_changed, bool ip_address_changed, bool connection_type_changed, ConnectionType new_connection_type, bool connection_subtype_changed, ConnectionSubtype new_connection_subtype) {
  GetForwardingInterface()->OnNetworkChanged(std::move(dns_changed), std::move(ip_address_changed), std::move(connection_type_changed), std::move(new_connection_type), std::move(connection_subtype_changed), std::move(new_connection_subtype));
}
NetworkChangeManagerAsyncWaiter::NetworkChangeManagerAsyncWaiter(
    NetworkChangeManager* proxy) : proxy_(proxy) {}

NetworkChangeManagerAsyncWaiter::~NetworkChangeManagerAsyncWaiter() = default;






}  // namespace mojom
}  // namespace network


#if defined(__clang__)
#pragma clang diagnostic pop
#endif