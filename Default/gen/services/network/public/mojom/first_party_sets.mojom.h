// services/network/public/mojom/first_party_sets.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_FIRST_PARTY_SETS_MOJOM_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_FIRST_PARTY_SETS_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/first_party_sets.mojom-shared.h"
#include "services/network/public/mojom/first_party_sets.mojom-forward.h"
#include "services/network/public/mojom/schemeful_site.mojom.h"
#include <string>
#include <vector>




#include "services/network/public/cpp/first_party_sets_mojom_traits.h"




namespace network {
namespace mojom {





class  SiteIndex {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SiteIndex, T>::value>;
  using DataView = SiteIndexDataView;
  using Data_ = internal::SiteIndex_Data;

  template <typename... Args>
  static SiteIndexPtr New(Args&&... args) {
    return SiteIndexPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SiteIndexPtr From(const U& u) {
    return mojo::TypeConverter<SiteIndexPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SiteIndex>::Convert(*this);
  }


  SiteIndex();

  explicit SiteIndex(
      uint32_t value);


  ~SiteIndex();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SiteIndexPtr>
  SiteIndexPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SiteIndex::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, SiteIndex::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SiteIndex::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SiteIndex::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SiteIndex_UnserializedMessageContext<
            UserType, SiteIndex::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<SiteIndex::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SiteIndex::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SiteIndex_UnserializedMessageContext<
            UserType, SiteIndex::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SiteIndex::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint32_t value;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SiteIndex::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SiteIndex::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SiteIndex::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SiteIndex::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class  SamePartyContext {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SamePartyContext, T>::value>;
  using DataView = SamePartyContextDataView;
  using Data_ = internal::SamePartyContext_Data;

  template <typename... Args>
  static SamePartyContextPtr New(Args&&... args) {
    return SamePartyContextPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SamePartyContextPtr From(const U& u) {
    return mojo::TypeConverter<SamePartyContextPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SamePartyContext>::Convert(*this);
  }


  SamePartyContext();

  explicit SamePartyContext(
      SamePartyCookieContextType context_type);


  ~SamePartyContext();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SamePartyContextPtr>
  SamePartyContextPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SamePartyContext::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, SamePartyContext::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SamePartyContext::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SamePartyContext::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SamePartyContext_UnserializedMessageContext<
            UserType, SamePartyContext::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<SamePartyContext::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SamePartyContext::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SamePartyContext_UnserializedMessageContext<
            UserType, SamePartyContext::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SamePartyContext::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  SamePartyCookieContextType context_type;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SamePartyContext::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SamePartyContext::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SamePartyContext::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SamePartyContext::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}









class  FirstPartySetEntry {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<FirstPartySetEntry, T>::value>;
  using DataView = FirstPartySetEntryDataView;
  using Data_ = internal::FirstPartySetEntry_Data;

  template <typename... Args>
  static FirstPartySetEntryPtr New(Args&&... args) {
    return FirstPartySetEntryPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static FirstPartySetEntryPtr From(const U& u) {
    return mojo::TypeConverter<FirstPartySetEntryPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FirstPartySetEntry>::Convert(*this);
  }


  FirstPartySetEntry();

  FirstPartySetEntry(
      const ::net::SchemefulSite& primary,
      SiteType site_type,
      const absl::optional<::net::FirstPartySetEntry::SiteIndex>& site_index);


  ~FirstPartySetEntry();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = FirstPartySetEntryPtr>
  FirstPartySetEntryPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, FirstPartySetEntry::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, FirstPartySetEntry::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        FirstPartySetEntry::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        FirstPartySetEntry::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::FirstPartySetEntry_UnserializedMessageContext<
            UserType, FirstPartySetEntry::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<FirstPartySetEntry::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return FirstPartySetEntry::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::FirstPartySetEntry_UnserializedMessageContext<
            UserType, FirstPartySetEntry::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<FirstPartySetEntry::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::net::SchemefulSite primary;
  
  SiteType site_type;
  
  absl::optional<::net::FirstPartySetEntry::SiteIndex> site_index;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, FirstPartySetEntry::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, FirstPartySetEntry::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, FirstPartySetEntry::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, FirstPartySetEntry::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class  FirstPartySetMetadata {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<FirstPartySetMetadata, T>::value>;
  using DataView = FirstPartySetMetadataDataView;
  using Data_ = internal::FirstPartySetMetadata_Data;

  template <typename... Args>
  static FirstPartySetMetadataPtr New(Args&&... args) {
    return FirstPartySetMetadataPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static FirstPartySetMetadataPtr From(const U& u) {
    return mojo::TypeConverter<FirstPartySetMetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FirstPartySetMetadata>::Convert(*this);
  }


  FirstPartySetMetadata();

  FirstPartySetMetadata(
      SamePartyContextPtr context,
      const absl::optional<::net::FirstPartySetEntry>& frame_entry,
      const absl::optional<::net::FirstPartySetEntry>& top_frame_entry);

FirstPartySetMetadata(const FirstPartySetMetadata&) = delete;
FirstPartySetMetadata& operator=(const FirstPartySetMetadata&) = delete;

  ~FirstPartySetMetadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = FirstPartySetMetadataPtr>
  FirstPartySetMetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, FirstPartySetMetadata::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, FirstPartySetMetadata::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        FirstPartySetMetadata::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        FirstPartySetMetadata::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::FirstPartySetMetadata_UnserializedMessageContext<
            UserType, FirstPartySetMetadata::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<FirstPartySetMetadata::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return FirstPartySetMetadata::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::FirstPartySetMetadata_UnserializedMessageContext<
            UserType, FirstPartySetMetadata::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<FirstPartySetMetadata::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  SamePartyContextPtr context;
  
  absl::optional<::net::FirstPartySetEntry> frame_entry;
  
  absl::optional<::net::FirstPartySetEntry> top_frame_entry;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, FirstPartySetMetadata::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, FirstPartySetMetadata::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, FirstPartySetMetadata::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, FirstPartySetMetadata::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
SiteIndexPtr SiteIndex::Clone() const {
  return New(
      mojo::Clone(value)
  );
}

template <typename T, SiteIndex::EnableIfSame<T>*>
bool SiteIndex::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, SiteIndex::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
FirstPartySetEntryPtr FirstPartySetEntry::Clone() const {
  return New(
      mojo::Clone(primary),
      mojo::Clone(site_type),
      mojo::Clone(site_index)
  );
}

template <typename T, FirstPartySetEntry::EnableIfSame<T>*>
bool FirstPartySetEntry::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->primary, other_struct.primary))
    return false;
  if (!mojo::Equals(this->site_type, other_struct.site_type))
    return false;
  if (!mojo::Equals(this->site_index, other_struct.site_index))
    return false;
  return true;
}

template <typename T, FirstPartySetEntry::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.primary < rhs.primary)
    return true;
  if (rhs.primary < lhs.primary)
    return false;
  if (lhs.site_type < rhs.site_type)
    return true;
  if (rhs.site_type < lhs.site_type)
    return false;
  if (lhs.site_index < rhs.site_index)
    return true;
  if (rhs.site_index < lhs.site_index)
    return false;
  return false;
}
template <typename StructPtrType>
SamePartyContextPtr SamePartyContext::Clone() const {
  return New(
      mojo::Clone(context_type)
  );
}

template <typename T, SamePartyContext::EnableIfSame<T>*>
bool SamePartyContext::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->context_type, other_struct.context_type))
    return false;
  return true;
}

template <typename T, SamePartyContext::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.context_type < rhs.context_type)
    return true;
  if (rhs.context_type < lhs.context_type)
    return false;
  return false;
}
template <typename StructPtrType>
FirstPartySetMetadataPtr FirstPartySetMetadata::Clone() const {
  return New(
      mojo::Clone(context),
      mojo::Clone(frame_entry),
      mojo::Clone(top_frame_entry)
  );
}

template <typename T, FirstPartySetMetadata::EnableIfSame<T>*>
bool FirstPartySetMetadata::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->context, other_struct.context))
    return false;
  if (!mojo::Equals(this->frame_entry, other_struct.frame_entry))
    return false;
  if (!mojo::Equals(this->top_frame_entry, other_struct.top_frame_entry))
    return false;
  return true;
}

template <typename T, FirstPartySetMetadata::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.context < rhs.context)
    return true;
  if (rhs.context < lhs.context)
    return false;
  if (lhs.frame_entry < rhs.frame_entry)
    return true;
  if (rhs.frame_entry < lhs.frame_entry)
    return false;
  if (lhs.top_frame_entry < rhs.top_frame_entry)
    return true;
  if (rhs.top_frame_entry < lhs.top_frame_entry)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace network

namespace mojo {


template <>
struct  StructTraits<::network::mojom::SiteIndex::DataView,
                                         ::network::mojom::SiteIndexPtr> {
  static bool IsNull(const ::network::mojom::SiteIndexPtr& input) { return !input; }
  static void SetToNull(::network::mojom::SiteIndexPtr* output) { output->reset(); }

  static decltype(::network::mojom::SiteIndex::value) value(
      const ::network::mojom::SiteIndexPtr& input) {
    return input->value;
  }

  static bool Read(::network::mojom::SiteIndex::DataView input, ::network::mojom::SiteIndexPtr* output);
};


template <>
struct  StructTraits<::network::mojom::FirstPartySetEntry::DataView,
                                         ::network::mojom::FirstPartySetEntryPtr> {
  static bool IsNull(const ::network::mojom::FirstPartySetEntryPtr& input) { return !input; }
  static void SetToNull(::network::mojom::FirstPartySetEntryPtr* output) { output->reset(); }

  static const decltype(::network::mojom::FirstPartySetEntry::primary)& primary(
      const ::network::mojom::FirstPartySetEntryPtr& input) {
    return input->primary;
  }

  static decltype(::network::mojom::FirstPartySetEntry::site_type) site_type(
      const ::network::mojom::FirstPartySetEntryPtr& input) {
    return input->site_type;
  }

  static const decltype(::network::mojom::FirstPartySetEntry::site_index)& site_index(
      const ::network::mojom::FirstPartySetEntryPtr& input) {
    return input->site_index;
  }

  static bool Read(::network::mojom::FirstPartySetEntry::DataView input, ::network::mojom::FirstPartySetEntryPtr* output);
};


template <>
struct  StructTraits<::network::mojom::SamePartyContext::DataView,
                                         ::network::mojom::SamePartyContextPtr> {
  static bool IsNull(const ::network::mojom::SamePartyContextPtr& input) { return !input; }
  static void SetToNull(::network::mojom::SamePartyContextPtr* output) { output->reset(); }

  static decltype(::network::mojom::SamePartyContext::context_type) context_type(
      const ::network::mojom::SamePartyContextPtr& input) {
    return input->context_type;
  }

  static bool Read(::network::mojom::SamePartyContext::DataView input, ::network::mojom::SamePartyContextPtr* output);
};


template <>
struct  StructTraits<::network::mojom::FirstPartySetMetadata::DataView,
                                         ::network::mojom::FirstPartySetMetadataPtr> {
  static bool IsNull(const ::network::mojom::FirstPartySetMetadataPtr& input) { return !input; }
  static void SetToNull(::network::mojom::FirstPartySetMetadataPtr* output) { output->reset(); }

  static const decltype(::network::mojom::FirstPartySetMetadata::context)& context(
      const ::network::mojom::FirstPartySetMetadataPtr& input) {
    return input->context;
  }

  static const decltype(::network::mojom::FirstPartySetMetadata::frame_entry)& frame_entry(
      const ::network::mojom::FirstPartySetMetadataPtr& input) {
    return input->frame_entry;
  }

  static const decltype(::network::mojom::FirstPartySetMetadata::top_frame_entry)& top_frame_entry(
      const ::network::mojom::FirstPartySetMetadataPtr& input) {
    return input->top_frame_entry;
  }

  static bool Read(::network::mojom::FirstPartySetMetadata::DataView input, ::network::mojom::FirstPartySetMetadataPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_FIRST_PARTY_SETS_MOJOM_H_