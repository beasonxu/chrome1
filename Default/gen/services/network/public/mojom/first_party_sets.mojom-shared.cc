// services/network/public/mojom/first_party_sets.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "services/network/public/mojom/first_party_sets.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/network/public/mojom/first_party_sets.mojom-params-data.h"
namespace network {
namespace mojom {

static NOINLINE const char* SiteTypeToStringHelper(SiteType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case SiteType::kPrimary:
      return "kPrimary";
    case SiteType::kAssociated:
      return "kAssociated";
    default:
      return nullptr;
  }
}

std::string SiteTypeToString(SiteType value) {
  const char *str = SiteTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown SiteType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, SiteType value) {
  return os << SiteTypeToString(value);
}

static NOINLINE const char* SamePartyCookieContextTypeToStringHelper(SamePartyCookieContextType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case SamePartyCookieContextType::kCrossParty:
      return "kCrossParty";
    case SamePartyCookieContextType::kSameParty:
      return "kSameParty";
    default:
      return nullptr;
  }
}

std::string SamePartyCookieContextTypeToString(SamePartyCookieContextType value) {
  const char *str = SamePartyCookieContextTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown SamePartyCookieContextType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, SamePartyCookieContextType value) {
  return os << SamePartyCookieContextTypeToString(value);
}

namespace internal {


// static
bool SiteIndex_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SiteIndex_Data* object =
      static_cast<const SiteIndex_Data*>(data);

  return true;
}

SiteIndex_Data::SiteIndex_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool FirstPartySetEntry_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const FirstPartySetEntry_Data* object =
      static_cast<const FirstPartySetEntry_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->primary, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->primary, validation_context))
    return false;


  if (!::network::mojom::internal::SiteType_Data
        ::Validate(object->site_type, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->site_index, validation_context))
    return false;

  return true;
}

FirstPartySetEntry_Data::FirstPartySetEntry_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SamePartyContext_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SamePartyContext_Data* object =
      static_cast<const SamePartyContext_Data*>(data);


  if (!::network::mojom::internal::SamePartyCookieContextType_Data
        ::Validate(object->context_type, validation_context))
    return false;

  return true;
}

SamePartyContext_Data::SamePartyContext_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool FirstPartySetMetadata_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const FirstPartySetMetadata_Data* object =
      static_cast<const FirstPartySetMetadata_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->context, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->context, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->frame_entry, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->top_frame_entry, validation_context))
    return false;

  return true;
}

FirstPartySetMetadata_Data::FirstPartySetMetadata_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace network

namespace perfetto {

// static
void TraceFormatTraits<::network::mojom::SiteType>::WriteIntoTrace(
   perfetto::TracedValue context, ::network::mojom::SiteType value) {
  return std::move(context).WriteString(::network::mojom::SiteTypeToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::network::mojom::SamePartyCookieContextType>::WriteIntoTrace(
   perfetto::TracedValue context, ::network::mojom::SamePartyCookieContextType value) {
  return std::move(context).WriteString(::network::mojom::SamePartyCookieContextTypeToString(value));
}

} // namespace perfetto