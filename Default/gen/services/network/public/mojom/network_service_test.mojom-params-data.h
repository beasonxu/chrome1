// services/network/public/mojom/network_service_test.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_TEST_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_TEST_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {

class ValidationContext;
class  SimpleCacheEntry_WriteData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t index;
  int32_t offset;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> data;
  uint8_t truncate : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntry_WriteData_Params_Data>;

  SimpleCacheEntry_WriteData_Params_Data();
  ~SimpleCacheEntry_WriteData_Params_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntry_WriteData_Params_Data) == 32,
              "Bad sizeof(SimpleCacheEntry_WriteData_Params_Data)");
class  SimpleCacheEntry_WriteData_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntry_WriteData_ResponseParams_Data>;

  SimpleCacheEntry_WriteData_ResponseParams_Data();
  ~SimpleCacheEntry_WriteData_ResponseParams_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntry_WriteData_ResponseParams_Data) == 16,
              "Bad sizeof(SimpleCacheEntry_WriteData_ResponseParams_Data)");
class  SimpleCacheEntry_ReadData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t index;
  int32_t offset;
  uint32_t length;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntry_ReadData_Params_Data>;

  SimpleCacheEntry_ReadData_Params_Data();
  ~SimpleCacheEntry_ReadData_Params_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntry_ReadData_Params_Data) == 24,
              "Bad sizeof(SimpleCacheEntry_ReadData_Params_Data)");
class  SimpleCacheEntry_ReadData_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> data;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntry_ReadData_ResponseParams_Data>;

  SimpleCacheEntry_ReadData_ResponseParams_Data();
  ~SimpleCacheEntry_ReadData_ResponseParams_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntry_ReadData_ResponseParams_Data) == 24,
              "Bad sizeof(SimpleCacheEntry_ReadData_ResponseParams_Data)");
class  SimpleCacheEntry_WriteSparseData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t offset;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> data;

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntry_WriteSparseData_Params_Data>;

  SimpleCacheEntry_WriteSparseData_Params_Data();
  ~SimpleCacheEntry_WriteSparseData_Params_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntry_WriteSparseData_Params_Data) == 24,
              "Bad sizeof(SimpleCacheEntry_WriteSparseData_Params_Data)");
class  SimpleCacheEntry_WriteSparseData_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntry_WriteSparseData_ResponseParams_Data>;

  SimpleCacheEntry_WriteSparseData_ResponseParams_Data();
  ~SimpleCacheEntry_WriteSparseData_ResponseParams_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntry_WriteSparseData_ResponseParams_Data) == 16,
              "Bad sizeof(SimpleCacheEntry_WriteSparseData_ResponseParams_Data)");
class  SimpleCacheEntry_ReadSparseData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t offset;
  uint32_t length;

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntry_ReadSparseData_Params_Data>;

  SimpleCacheEntry_ReadSparseData_Params_Data();
  ~SimpleCacheEntry_ReadSparseData_Params_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntry_ReadSparseData_Params_Data) == 16,
              "Bad sizeof(SimpleCacheEntry_ReadSparseData_Params_Data)");
class  SimpleCacheEntry_ReadSparseData_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> data;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntry_ReadSparseData_ResponseParams_Data>;

  SimpleCacheEntry_ReadSparseData_ResponseParams_Data();
  ~SimpleCacheEntry_ReadSparseData_ResponseParams_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntry_ReadSparseData_ResponseParams_Data) == 24,
              "Bad sizeof(SimpleCacheEntry_ReadSparseData_ResponseParams_Data)");
class  SimpleCacheEntry_Close_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntry_Close_Params_Data>;

  SimpleCacheEntry_Close_Params_Data();
  ~SimpleCacheEntry_Close_Params_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntry_Close_Params_Data) == 8,
              "Bad sizeof(SimpleCacheEntry_Close_Params_Data)");
class  SimpleCacheEntry_Close_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntry_Close_ResponseParams_Data>;

  SimpleCacheEntry_Close_ResponseParams_Data();
  ~SimpleCacheEntry_Close_ResponseParams_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntry_Close_ResponseParams_Data) == 8,
              "Bad sizeof(SimpleCacheEntry_Close_ResponseParams_Data)");
class  SimpleCacheEntryEnumerator_GetNext_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntryEnumerator_GetNext_Params_Data>;

  SimpleCacheEntryEnumerator_GetNext_Params_Data();
  ~SimpleCacheEntryEnumerator_GetNext_Params_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntryEnumerator_GetNext_Params_Data) == 8,
              "Bad sizeof(SimpleCacheEntryEnumerator_GetNext_Params_Data)");
class  SimpleCacheEntryEnumerator_GetNext_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SimpleCacheOpenEntryResult_Data> result;

 private:
  friend class mojo::internal::MessageFragment<SimpleCacheEntryEnumerator_GetNext_ResponseParams_Data>;

  SimpleCacheEntryEnumerator_GetNext_ResponseParams_Data();
  ~SimpleCacheEntryEnumerator_GetNext_ResponseParams_Data() = delete;
};
static_assert(sizeof(SimpleCacheEntryEnumerator_GetNext_ResponseParams_Data) == 16,
              "Bad sizeof(SimpleCacheEntryEnumerator_GetNext_ResponseParams_Data)");
class  SimpleCache_CreateEntry_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> key;

 private:
  friend class mojo::internal::MessageFragment<SimpleCache_CreateEntry_Params_Data>;

  SimpleCache_CreateEntry_Params_Data();
  ~SimpleCache_CreateEntry_Params_Data() = delete;
};
static_assert(sizeof(SimpleCache_CreateEntry_Params_Data) == 16,
              "Bad sizeof(SimpleCache_CreateEntry_Params_Data)");
class  SimpleCache_CreateEntry_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data entry;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SimpleCache_CreateEntry_ResponseParams_Data>;

  SimpleCache_CreateEntry_ResponseParams_Data();
  ~SimpleCache_CreateEntry_ResponseParams_Data() = delete;
};
static_assert(sizeof(SimpleCache_CreateEntry_ResponseParams_Data) == 24,
              "Bad sizeof(SimpleCache_CreateEntry_ResponseParams_Data)");
class  SimpleCache_OpenEntry_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> key;

 private:
  friend class mojo::internal::MessageFragment<SimpleCache_OpenEntry_Params_Data>;

  SimpleCache_OpenEntry_Params_Data();
  ~SimpleCache_OpenEntry_Params_Data() = delete;
};
static_assert(sizeof(SimpleCache_OpenEntry_Params_Data) == 16,
              "Bad sizeof(SimpleCache_OpenEntry_Params_Data)");
class  SimpleCache_OpenEntry_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data entry;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SimpleCache_OpenEntry_ResponseParams_Data>;

  SimpleCache_OpenEntry_ResponseParams_Data();
  ~SimpleCache_OpenEntry_ResponseParams_Data() = delete;
};
static_assert(sizeof(SimpleCache_OpenEntry_ResponseParams_Data) == 24,
              "Bad sizeof(SimpleCache_OpenEntry_ResponseParams_Data)");
class  SimpleCache_DoomEntry_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> key;

 private:
  friend class mojo::internal::MessageFragment<SimpleCache_DoomEntry_Params_Data>;

  SimpleCache_DoomEntry_Params_Data();
  ~SimpleCache_DoomEntry_Params_Data() = delete;
};
static_assert(sizeof(SimpleCache_DoomEntry_Params_Data) == 16,
              "Bad sizeof(SimpleCache_DoomEntry_Params_Data)");
class  SimpleCache_DoomEntry_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SimpleCache_DoomEntry_ResponseParams_Data>;

  SimpleCache_DoomEntry_ResponseParams_Data();
  ~SimpleCache_DoomEntry_ResponseParams_Data() = delete;
};
static_assert(sizeof(SimpleCache_DoomEntry_ResponseParams_Data) == 16,
              "Bad sizeof(SimpleCache_DoomEntry_ResponseParams_Data)");
class  SimpleCache_DoomAllEntries_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SimpleCache_DoomAllEntries_Params_Data>;

  SimpleCache_DoomAllEntries_Params_Data();
  ~SimpleCache_DoomAllEntries_Params_Data() = delete;
};
static_assert(sizeof(SimpleCache_DoomAllEntries_Params_Data) == 8,
              "Bad sizeof(SimpleCache_DoomAllEntries_Params_Data)");
class  SimpleCache_DoomAllEntries_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SimpleCache_DoomAllEntries_ResponseParams_Data>;

  SimpleCache_DoomAllEntries_ResponseParams_Data();
  ~SimpleCache_DoomAllEntries_ResponseParams_Data() = delete;
};
static_assert(sizeof(SimpleCache_DoomAllEntries_ResponseParams_Data) == 16,
              "Bad sizeof(SimpleCache_DoomAllEntries_ResponseParams_Data)");
class  SimpleCache_EnumerateEntries_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SimpleCache_EnumerateEntries_Params_Data>;

  SimpleCache_EnumerateEntries_Params_Data();
  ~SimpleCache_EnumerateEntries_Params_Data() = delete;
};
static_assert(sizeof(SimpleCache_EnumerateEntries_Params_Data) == 16,
              "Bad sizeof(SimpleCache_EnumerateEntries_Params_Data)");
class  SimpleCache_Detach_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SimpleCache_Detach_Params_Data>;

  SimpleCache_Detach_Params_Data();
  ~SimpleCache_Detach_Params_Data() = delete;
};
static_assert(sizeof(SimpleCache_Detach_Params_Data) == 8,
              "Bad sizeof(SimpleCache_Detach_Params_Data)");
class  SimpleCache_Detach_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SimpleCache_Detach_ResponseParams_Data>;

  SimpleCache_Detach_ResponseParams_Data();
  ~SimpleCache_Detach_ResponseParams_Data() = delete;
};
static_assert(sizeof(SimpleCache_Detach_ResponseParams_Data) == 8,
              "Bad sizeof(SimpleCache_Detach_ResponseParams_Data)");
class  NetworkServiceTest_AddRules_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::Rule_Data>>> rules;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_AddRules_Params_Data>;

  NetworkServiceTest_AddRules_Params_Data();
  ~NetworkServiceTest_AddRules_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_AddRules_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_AddRules_Params_Data)");
class  NetworkServiceTest_AddRules_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_AddRules_ResponseParams_Data>;

  NetworkServiceTest_AddRules_ResponseParams_Data();
  ~NetworkServiceTest_AddRules_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_AddRules_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_AddRules_ResponseParams_Data)");
class  NetworkServiceTest_SimulateNetworkChange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SimulateNetworkChange_Params_Data>;

  NetworkServiceTest_SimulateNetworkChange_Params_Data();
  ~NetworkServiceTest_SimulateNetworkChange_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SimulateNetworkChange_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_SimulateNetworkChange_Params_Data)");
class  NetworkServiceTest_SimulateNetworkChange_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SimulateNetworkChange_ResponseParams_Data>;

  NetworkServiceTest_SimulateNetworkChange_ResponseParams_Data();
  ~NetworkServiceTest_SimulateNetworkChange_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SimulateNetworkChange_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_SimulateNetworkChange_ResponseParams_Data)");
class  NetworkServiceTest_SimulateNetworkQualityChange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SimulateNetworkQualityChange_Params_Data>;

  NetworkServiceTest_SimulateNetworkQualityChange_Params_Data();
  ~NetworkServiceTest_SimulateNetworkQualityChange_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SimulateNetworkQualityChange_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_SimulateNetworkQualityChange_Params_Data)");
class  NetworkServiceTest_SimulateNetworkQualityChange_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SimulateNetworkQualityChange_ResponseParams_Data>;

  NetworkServiceTest_SimulateNetworkQualityChange_ResponseParams_Data();
  ~NetworkServiceTest_SimulateNetworkQualityChange_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SimulateNetworkQualityChange_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_SimulateNetworkQualityChange_ResponseParams_Data)");
class  NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_Params_Data>;

  NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_Params_Data();
  ~NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_Params_Data) == 8,
              "Bad sizeof(NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_Params_Data)");
class  NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ResponseParams_Data>;

  NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ResponseParams_Data();
  ~NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ResponseParams_Data)");
class  NetworkServiceTest_SimulateCrash_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SimulateCrash_Params_Data>;

  NetworkServiceTest_SimulateCrash_Params_Data();
  ~NetworkServiceTest_SimulateCrash_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SimulateCrash_Params_Data) == 8,
              "Bad sizeof(NetworkServiceTest_SimulateCrash_Params_Data)");
class  NetworkServiceTest_MockCertVerifierSetDefaultResult_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t default_result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_MockCertVerifierSetDefaultResult_Params_Data>;

  NetworkServiceTest_MockCertVerifierSetDefaultResult_Params_Data();
  ~NetworkServiceTest_MockCertVerifierSetDefaultResult_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_MockCertVerifierSetDefaultResult_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_MockCertVerifierSetDefaultResult_Params_Data)");
class  NetworkServiceTest_MockCertVerifierSetDefaultResult_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_MockCertVerifierSetDefaultResult_ResponseParams_Data>;

  NetworkServiceTest_MockCertVerifierSetDefaultResult_ResponseParams_Data();
  ~NetworkServiceTest_MockCertVerifierSetDefaultResult_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_MockCertVerifierSetDefaultResult_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_MockCertVerifierSetDefaultResult_ResponseParams_Data)");
class  NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::X509Certificate_Data> cert;
  mojo::internal::Pointer<mojo::internal::String_Data> host_pattern;
  mojo::internal::Pointer<::network::mojom::internal::CertVerifyResult_Data> verify_result;
  int32_t rv;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_Params_Data>;

  NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_Params_Data();
  ~NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_Params_Data) == 40,
              "Bad sizeof(NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_Params_Data)");
class  NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ResponseParams_Data>;

  NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ResponseParams_Data();
  ~NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ResponseParams_Data)");
class  NetworkServiceTest_SetRequireCT_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t required;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SetRequireCT_Params_Data>;

  NetworkServiceTest_SetRequireCT_Params_Data();
  ~NetworkServiceTest_SetRequireCT_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SetRequireCT_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_SetRequireCT_Params_Data)");
class  NetworkServiceTest_SetRequireCT_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SetRequireCT_ResponseParams_Data>;

  NetworkServiceTest_SetRequireCT_ResponseParams_Data();
  ~NetworkServiceTest_SetRequireCT_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SetRequireCT_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_SetRequireCT_ResponseParams_Data)");
class  NetworkServiceTest_SetTransportSecurityStateSource_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint16_t reporting_port;
  uint8_t padfinal_[6];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SetTransportSecurityStateSource_Params_Data>;

  NetworkServiceTest_SetTransportSecurityStateSource_Params_Data();
  ~NetworkServiceTest_SetTransportSecurityStateSource_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SetTransportSecurityStateSource_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_SetTransportSecurityStateSource_Params_Data)");
class  NetworkServiceTest_SetTransportSecurityStateSource_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SetTransportSecurityStateSource_ResponseParams_Data>;

  NetworkServiceTest_SetTransportSecurityStateSource_ResponseParams_Data();
  ~NetworkServiceTest_SetTransportSecurityStateSource_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SetTransportSecurityStateSource_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_SetTransportSecurityStateSource_ResponseParams_Data)");
class  NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_Params_Data>;

  NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_Params_Data();
  ~NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_Params_Data) == 8,
              "Bad sizeof(NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_Params_Data)");
class  NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ResponseParams_Data>;

  NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ResponseParams_Data();
  ~NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ResponseParams_Data)");
class  NetworkServiceTest_ReplaceSystemDnsConfig_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_ReplaceSystemDnsConfig_Params_Data>;

  NetworkServiceTest_ReplaceSystemDnsConfig_Params_Data();
  ~NetworkServiceTest_ReplaceSystemDnsConfig_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_ReplaceSystemDnsConfig_Params_Data) == 8,
              "Bad sizeof(NetworkServiceTest_ReplaceSystemDnsConfig_Params_Data)");
class  NetworkServiceTest_ReplaceSystemDnsConfig_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_ReplaceSystemDnsConfig_ResponseParams_Data>;

  NetworkServiceTest_ReplaceSystemDnsConfig_ResponseParams_Data();
  ~NetworkServiceTest_ReplaceSystemDnsConfig_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_ReplaceSystemDnsConfig_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_ReplaceSystemDnsConfig_ResponseParams_Data)");
class  NetworkServiceTest_SetTestDohConfig_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t secure_dns_mode;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::network::mojom::internal::DnsOverHttpsConfig_Data> doh_config;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SetTestDohConfig_Params_Data>;

  NetworkServiceTest_SetTestDohConfig_Params_Data();
  ~NetworkServiceTest_SetTestDohConfig_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SetTestDohConfig_Params_Data) == 24,
              "Bad sizeof(NetworkServiceTest_SetTestDohConfig_Params_Data)");
class  NetworkServiceTest_SetTestDohConfig_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SetTestDohConfig_ResponseParams_Data>;

  NetworkServiceTest_SetTestDohConfig_ResponseParams_Data();
  ~NetworkServiceTest_SetTestDohConfig_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SetTestDohConfig_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_SetTestDohConfig_ResponseParams_Data)");
class  NetworkServiceTest_CrashOnResolveHost_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> host;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_CrashOnResolveHost_Params_Data>;

  NetworkServiceTest_CrashOnResolveHost_Params_Data();
  ~NetworkServiceTest_CrashOnResolveHost_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_CrashOnResolveHost_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_CrashOnResolveHost_Params_Data)");
class  NetworkServiceTest_CrashOnGetCookieList_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_CrashOnGetCookieList_Params_Data>;

  NetworkServiceTest_CrashOnGetCookieList_Params_Data();
  ~NetworkServiceTest_CrashOnGetCookieList_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_CrashOnGetCookieList_Params_Data) == 8,
              "Bad sizeof(NetworkServiceTest_CrashOnGetCookieList_Params_Data)");
class  NetworkServiceTest_GetLatestMemoryPressureLevel_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_GetLatestMemoryPressureLevel_Params_Data>;

  NetworkServiceTest_GetLatestMemoryPressureLevel_Params_Data();
  ~NetworkServiceTest_GetLatestMemoryPressureLevel_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_GetLatestMemoryPressureLevel_Params_Data) == 8,
              "Bad sizeof(NetworkServiceTest_GetLatestMemoryPressureLevel_Params_Data)");
class  NetworkServiceTest_GetLatestMemoryPressureLevel_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t memory_pressure_level;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_GetLatestMemoryPressureLevel_ResponseParams_Data>;

  NetworkServiceTest_GetLatestMemoryPressureLevel_ResponseParams_Data();
  ~NetworkServiceTest_GetLatestMemoryPressureLevel_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_GetLatestMemoryPressureLevel_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkServiceTest_GetLatestMemoryPressureLevel_ResponseParams_Data)");
class  NetworkServiceTest_GetPeerToPeerConnectionsCountChange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_GetPeerToPeerConnectionsCountChange_Params_Data>;

  NetworkServiceTest_GetPeerToPeerConnectionsCountChange_Params_Data();
  ~NetworkServiceTest_GetPeerToPeerConnectionsCountChange_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_GetPeerToPeerConnectionsCountChange_Params_Data) == 8,
              "Bad sizeof(NetworkServiceTest_GetPeerToPeerConnectionsCountChange_Params_Data)");
class  NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t connection_count;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ResponseParams_Data>;

  NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ResponseParams_Data();
  ~NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ResponseParams_Data)");
class  NetworkServiceTest_GetEnvironmentVariableValue_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_GetEnvironmentVariableValue_Params_Data>;

  NetworkServiceTest_GetEnvironmentVariableValue_Params_Data();
  ~NetworkServiceTest_GetEnvironmentVariableValue_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_GetEnvironmentVariableValue_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_GetEnvironmentVariableValue_Params_Data)");
class  NetworkServiceTest_GetEnvironmentVariableValue_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> value;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_GetEnvironmentVariableValue_ResponseParams_Data>;

  NetworkServiceTest_GetEnvironmentVariableValue_ResponseParams_Data();
  ~NetworkServiceTest_GetEnvironmentVariableValue_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_GetEnvironmentVariableValue_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkServiceTest_GetEnvironmentVariableValue_ResponseParams_Data)");
class  NetworkServiceTest_Log_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_Log_Params_Data>;

  NetworkServiceTest_Log_Params_Data();
  ~NetworkServiceTest_Log_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_Log_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_Log_Params_Data)");
class  NetworkServiceTest_Log_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_Log_ResponseParams_Data>;

  NetworkServiceTest_Log_ResponseParams_Data();
  ~NetworkServiceTest_Log_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_Log_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_Log_ResponseParams_Data)");
class  NetworkServiceTest_ActivateFieldTrial_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> field_trial_name;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_ActivateFieldTrial_Params_Data>;

  NetworkServiceTest_ActivateFieldTrial_Params_Data();
  ~NetworkServiceTest_ActivateFieldTrial_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_ActivateFieldTrial_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_ActivateFieldTrial_Params_Data)");
class  NetworkServiceTest_SetSCTAuditingRetryDelay_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> delay;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SetSCTAuditingRetryDelay_Params_Data>;

  NetworkServiceTest_SetSCTAuditingRetryDelay_Params_Data();
  ~NetworkServiceTest_SetSCTAuditingRetryDelay_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SetSCTAuditingRetryDelay_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_SetSCTAuditingRetryDelay_Params_Data)");
class  NetworkServiceTest_SetSCTAuditingRetryDelay_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_SetSCTAuditingRetryDelay_ResponseParams_Data>;

  NetworkServiceTest_SetSCTAuditingRetryDelay_ResponseParams_Data();
  ~NetworkServiceTest_SetSCTAuditingRetryDelay_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_SetSCTAuditingRetryDelay_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceTest_SetSCTAuditingRetryDelay_ResponseParams_Data)");
class  NetworkServiceTest_OpenFile_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_OpenFile_Params_Data>;

  NetworkServiceTest_OpenFile_Params_Data();
  ~NetworkServiceTest_OpenFile_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_OpenFile_Params_Data) == 16,
              "Bad sizeof(NetworkServiceTest_OpenFile_Params_Data)");
class  NetworkServiceTest_OpenFile_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_OpenFile_ResponseParams_Data>;

  NetworkServiceTest_OpenFile_ResponseParams_Data();
  ~NetworkServiceTest_OpenFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_OpenFile_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkServiceTest_OpenFile_ResponseParams_Data)");
class  NetworkServiceTest_EnumerateFiles_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;
  mojo::internal::Interface_Data factory;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_EnumerateFiles_Params_Data>;

  NetworkServiceTest_EnumerateFiles_Params_Data();
  ~NetworkServiceTest_EnumerateFiles_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_EnumerateFiles_Params_Data) == 24,
              "Bad sizeof(NetworkServiceTest_EnumerateFiles_Params_Data)");
class  NetworkServiceTest_EnumerateFiles_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::FileEnumerationEntry_Data>>> entries;
  uint8_t error : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_EnumerateFiles_ResponseParams_Data>;

  NetworkServiceTest_EnumerateFiles_ResponseParams_Data();
  ~NetworkServiceTest_EnumerateFiles_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_EnumerateFiles_ResponseParams_Data) == 24,
              "Bad sizeof(NetworkServiceTest_EnumerateFiles_ResponseParams_Data)");
class  NetworkServiceTest_CreateSimpleCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data factory;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;
  uint8_t reset : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_CreateSimpleCache_Params_Data>;

  NetworkServiceTest_CreateSimpleCache_Params_Data();
  ~NetworkServiceTest_CreateSimpleCache_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_CreateSimpleCache_Params_Data) == 32,
              "Bad sizeof(NetworkServiceTest_CreateSimpleCache_Params_Data)");
class  NetworkServiceTest_CreateSimpleCache_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data backend;

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceTest_CreateSimpleCache_ResponseParams_Data>;

  NetworkServiceTest_CreateSimpleCache_ResponseParams_Data();
  ~NetworkServiceTest_CreateSimpleCache_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceTest_CreateSimpleCache_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkServiceTest_CreateSimpleCache_ResponseParams_Data)");

}  // namespace internal


class SimpleCacheEntry_WriteData_ParamsDataView {
 public:
  SimpleCacheEntry_WriteData_ParamsDataView() = default;

  SimpleCacheEntry_WriteData_ParamsDataView(
      internal::SimpleCacheEntry_WriteData_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t index() const {
    return data_->index;
  }
  int32_t offset() const {
    return data_->offset;
  }
  inline void GetDataDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
  bool truncate() const {
    return data_->truncate;
  }
 private:
  internal::SimpleCacheEntry_WriteData_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SimpleCacheEntry_WriteData_ResponseParamsDataView {
 public:
  SimpleCacheEntry_WriteData_ResponseParamsDataView() = default;

  SimpleCacheEntry_WriteData_ResponseParamsDataView(
      internal::SimpleCacheEntry_WriteData_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
 private:
  internal::SimpleCacheEntry_WriteData_ResponseParams_Data* data_ = nullptr;
};



class SimpleCacheEntry_ReadData_ParamsDataView {
 public:
  SimpleCacheEntry_ReadData_ParamsDataView() = default;

  SimpleCacheEntry_ReadData_ParamsDataView(
      internal::SimpleCacheEntry_ReadData_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t index() const {
    return data_->index;
  }
  int32_t offset() const {
    return data_->offset;
  }
  uint32_t length() const {
    return data_->length;
  }
 private:
  internal::SimpleCacheEntry_ReadData_Params_Data* data_ = nullptr;
};



class SimpleCacheEntry_ReadData_ResponseParamsDataView {
 public:
  SimpleCacheEntry_ReadData_ResponseParamsDataView() = default;

  SimpleCacheEntry_ReadData_ResponseParamsDataView(
      internal::SimpleCacheEntry_ReadData_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
  int32_t result() const {
    return data_->result;
  }
 private:
  internal::SimpleCacheEntry_ReadData_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SimpleCacheEntry_WriteSparseData_ParamsDataView {
 public:
  SimpleCacheEntry_WriteSparseData_ParamsDataView() = default;

  SimpleCacheEntry_WriteSparseData_ParamsDataView(
      internal::SimpleCacheEntry_WriteSparseData_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t offset() const {
    return data_->offset;
  }
  inline void GetDataDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
 private:
  internal::SimpleCacheEntry_WriteSparseData_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SimpleCacheEntry_WriteSparseData_ResponseParamsDataView {
 public:
  SimpleCacheEntry_WriteSparseData_ResponseParamsDataView() = default;

  SimpleCacheEntry_WriteSparseData_ResponseParamsDataView(
      internal::SimpleCacheEntry_WriteSparseData_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
 private:
  internal::SimpleCacheEntry_WriteSparseData_ResponseParams_Data* data_ = nullptr;
};



class SimpleCacheEntry_ReadSparseData_ParamsDataView {
 public:
  SimpleCacheEntry_ReadSparseData_ParamsDataView() = default;

  SimpleCacheEntry_ReadSparseData_ParamsDataView(
      internal::SimpleCacheEntry_ReadSparseData_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t offset() const {
    return data_->offset;
  }
  uint32_t length() const {
    return data_->length;
  }
 private:
  internal::SimpleCacheEntry_ReadSparseData_Params_Data* data_ = nullptr;
};



class SimpleCacheEntry_ReadSparseData_ResponseParamsDataView {
 public:
  SimpleCacheEntry_ReadSparseData_ResponseParamsDataView() = default;

  SimpleCacheEntry_ReadSparseData_ResponseParamsDataView(
      internal::SimpleCacheEntry_ReadSparseData_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
  int32_t result() const {
    return data_->result;
  }
 private:
  internal::SimpleCacheEntry_ReadSparseData_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SimpleCacheEntry_Close_ParamsDataView {
 public:
  SimpleCacheEntry_Close_ParamsDataView() = default;

  SimpleCacheEntry_Close_ParamsDataView(
      internal::SimpleCacheEntry_Close_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SimpleCacheEntry_Close_Params_Data* data_ = nullptr;
};



class SimpleCacheEntry_Close_ResponseParamsDataView {
 public:
  SimpleCacheEntry_Close_ResponseParamsDataView() = default;

  SimpleCacheEntry_Close_ResponseParamsDataView(
      internal::SimpleCacheEntry_Close_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SimpleCacheEntry_Close_ResponseParams_Data* data_ = nullptr;
};



class SimpleCacheEntryEnumerator_GetNext_ParamsDataView {
 public:
  SimpleCacheEntryEnumerator_GetNext_ParamsDataView() = default;

  SimpleCacheEntryEnumerator_GetNext_ParamsDataView(
      internal::SimpleCacheEntryEnumerator_GetNext_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SimpleCacheEntryEnumerator_GetNext_Params_Data* data_ = nullptr;
};



class SimpleCacheEntryEnumerator_GetNext_ResponseParamsDataView {
 public:
  SimpleCacheEntryEnumerator_GetNext_ResponseParamsDataView() = default;

  SimpleCacheEntryEnumerator_GetNext_ResponseParamsDataView(
      internal::SimpleCacheEntryEnumerator_GetNext_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      SimpleCacheOpenEntryResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::network::mojom::SimpleCacheOpenEntryResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::SimpleCacheEntryEnumerator_GetNext_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SimpleCache_CreateEntry_ParamsDataView {
 public:
  SimpleCache_CreateEntry_ParamsDataView() = default;

  SimpleCache_CreateEntry_ParamsDataView(
      internal::SimpleCache_CreateEntry_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = data_->key.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::SimpleCache_CreateEntry_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SimpleCache_CreateEntry_ResponseParamsDataView {
 public:
  SimpleCache_CreateEntry_ResponseParamsDataView() = default;

  SimpleCache_CreateEntry_ResponseParamsDataView(
      internal::SimpleCache_CreateEntry_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeEntry() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::SimpleCacheEntryInterfaceBase>>(
            &data_->entry, &result, message_);
    DCHECK(ret);
    return result;
  }
  int32_t error() const {
    return data_->error;
  }
 private:
  internal::SimpleCache_CreateEntry_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SimpleCache_OpenEntry_ParamsDataView {
 public:
  SimpleCache_OpenEntry_ParamsDataView() = default;

  SimpleCache_OpenEntry_ParamsDataView(
      internal::SimpleCache_OpenEntry_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = data_->key.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::SimpleCache_OpenEntry_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SimpleCache_OpenEntry_ResponseParamsDataView {
 public:
  SimpleCache_OpenEntry_ResponseParamsDataView() = default;

  SimpleCache_OpenEntry_ResponseParamsDataView(
      internal::SimpleCache_OpenEntry_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeEntry() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::SimpleCacheEntryInterfaceBase>>(
            &data_->entry, &result, message_);
    DCHECK(ret);
    return result;
  }
  int32_t error() const {
    return data_->error;
  }
 private:
  internal::SimpleCache_OpenEntry_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SimpleCache_DoomEntry_ParamsDataView {
 public:
  SimpleCache_DoomEntry_ParamsDataView() = default;

  SimpleCache_DoomEntry_ParamsDataView(
      internal::SimpleCache_DoomEntry_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = data_->key.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::SimpleCache_DoomEntry_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SimpleCache_DoomEntry_ResponseParamsDataView {
 public:
  SimpleCache_DoomEntry_ResponseParamsDataView() = default;

  SimpleCache_DoomEntry_ResponseParamsDataView(
      internal::SimpleCache_DoomEntry_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
 private:
  internal::SimpleCache_DoomEntry_ResponseParams_Data* data_ = nullptr;
};



class SimpleCache_DoomAllEntries_ParamsDataView {
 public:
  SimpleCache_DoomAllEntries_ParamsDataView() = default;

  SimpleCache_DoomAllEntries_ParamsDataView(
      internal::SimpleCache_DoomAllEntries_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SimpleCache_DoomAllEntries_Params_Data* data_ = nullptr;
};



class SimpleCache_DoomAllEntries_ResponseParamsDataView {
 public:
  SimpleCache_DoomAllEntries_ResponseParamsDataView() = default;

  SimpleCache_DoomAllEntries_ResponseParamsDataView(
      internal::SimpleCache_DoomAllEntries_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
 private:
  internal::SimpleCache_DoomAllEntries_ResponseParams_Data* data_ = nullptr;
};



class SimpleCache_EnumerateEntries_ParamsDataView {
 public:
  SimpleCache_EnumerateEntries_ParamsDataView() = default;

  SimpleCache_EnumerateEntries_ParamsDataView(
      internal::SimpleCache_EnumerateEntries_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::SimpleCacheEntryEnumeratorInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SimpleCache_EnumerateEntries_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SimpleCache_Detach_ParamsDataView {
 public:
  SimpleCache_Detach_ParamsDataView() = default;

  SimpleCache_Detach_ParamsDataView(
      internal::SimpleCache_Detach_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SimpleCache_Detach_Params_Data* data_ = nullptr;
};



class SimpleCache_Detach_ResponseParamsDataView {
 public:
  SimpleCache_Detach_ResponseParamsDataView() = default;

  SimpleCache_Detach_ResponseParamsDataView(
      internal::SimpleCache_Detach_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SimpleCache_Detach_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_AddRules_ParamsDataView {
 public:
  NetworkServiceTest_AddRules_ParamsDataView() = default;

  NetworkServiceTest_AddRules_ParamsDataView(
      internal::NetworkServiceTest_AddRules_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRulesDataView(
      mojo::ArrayDataView<RuleDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRules(UserType* output) {
    
    auto* pointer = data_->rules.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::RuleDataView>>(
        pointer, output, message_);
  }
 private:
  internal::NetworkServiceTest_AddRules_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_AddRules_ResponseParamsDataView {
 public:
  NetworkServiceTest_AddRules_ResponseParamsDataView() = default;

  NetworkServiceTest_AddRules_ResponseParamsDataView(
      internal::NetworkServiceTest_AddRules_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_AddRules_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_SimulateNetworkChange_ParamsDataView {
 public:
  NetworkServiceTest_SimulateNetworkChange_ParamsDataView() = default;

  NetworkServiceTest_SimulateNetworkChange_ParamsDataView(
      internal::NetworkServiceTest_SimulateNetworkChange_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::network::mojom::ConnectionType>(
        data_value, output);
  }
  ::network::mojom::ConnectionType type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::ConnectionType>(data_->type));
  }
 private:
  internal::NetworkServiceTest_SimulateNetworkChange_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_SimulateNetworkChange_ResponseParamsDataView {
 public:
  NetworkServiceTest_SimulateNetworkChange_ResponseParamsDataView() = default;

  NetworkServiceTest_SimulateNetworkChange_ResponseParamsDataView(
      internal::NetworkServiceTest_SimulateNetworkChange_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_SimulateNetworkChange_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_SimulateNetworkQualityChange_ParamsDataView {
 public:
  NetworkServiceTest_SimulateNetworkQualityChange_ParamsDataView() = default;

  NetworkServiceTest_SimulateNetworkQualityChange_ParamsDataView(
      internal::NetworkServiceTest_SimulateNetworkQualityChange_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::network::mojom::EffectiveConnectionType>(
        data_value, output);
  }
  ::network::mojom::EffectiveConnectionType type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::EffectiveConnectionType>(data_->type));
  }
 private:
  internal::NetworkServiceTest_SimulateNetworkQualityChange_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_SimulateNetworkQualityChange_ResponseParamsDataView {
 public:
  NetworkServiceTest_SimulateNetworkQualityChange_ResponseParamsDataView() = default;

  NetworkServiceTest_SimulateNetworkQualityChange_ResponseParamsDataView(
      internal::NetworkServiceTest_SimulateNetworkQualityChange_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_SimulateNetworkQualityChange_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ParamsDataView {
 public:
  NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ParamsDataView() = default;

  NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ParamsDataView(
      internal::NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ResponseParamsDataView {
 public:
  NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ResponseParamsDataView() = default;

  NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ResponseParamsDataView(
      internal::NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_ForceNetworkQualityEstimatorReportWifiAsSlow2G_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_SimulateCrash_ParamsDataView {
 public:
  NetworkServiceTest_SimulateCrash_ParamsDataView() = default;

  NetworkServiceTest_SimulateCrash_ParamsDataView(
      internal::NetworkServiceTest_SimulateCrash_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_SimulateCrash_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_MockCertVerifierSetDefaultResult_ParamsDataView {
 public:
  NetworkServiceTest_MockCertVerifierSetDefaultResult_ParamsDataView() = default;

  NetworkServiceTest_MockCertVerifierSetDefaultResult_ParamsDataView(
      internal::NetworkServiceTest_MockCertVerifierSetDefaultResult_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t default_result() const {
    return data_->default_result;
  }
 private:
  internal::NetworkServiceTest_MockCertVerifierSetDefaultResult_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_MockCertVerifierSetDefaultResult_ResponseParamsDataView {
 public:
  NetworkServiceTest_MockCertVerifierSetDefaultResult_ResponseParamsDataView() = default;

  NetworkServiceTest_MockCertVerifierSetDefaultResult_ResponseParamsDataView(
      internal::NetworkServiceTest_MockCertVerifierSetDefaultResult_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_MockCertVerifierSetDefaultResult_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ParamsDataView {
 public:
  NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ParamsDataView() = default;

  NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ParamsDataView(
      internal::NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCertDataView(
      ::network::mojom::X509CertificateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCert(UserType* output) {
    
    auto* pointer = data_->cert.Get();
    return mojo::internal::Deserialize<::network::mojom::X509CertificateDataView>(
        pointer, output, message_);
  }
  inline void GetHostPatternDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHostPattern(UserType* output) {
    
    auto* pointer = data_->host_pattern.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetVerifyResultDataView(
      ::network::mojom::CertVerifyResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVerifyResult(UserType* output) {
    
    auto* pointer = data_->verify_result.Get();
    return mojo::internal::Deserialize<::network::mojom::CertVerifyResultDataView>(
        pointer, output, message_);
  }
  int32_t rv() const {
    return data_->rv;
  }
 private:
  internal::NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ResponseParamsDataView {
 public:
  NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ResponseParamsDataView() = default;

  NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ResponseParamsDataView(
      internal::NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_SetRequireCT_ParamsDataView {
 public:
  NetworkServiceTest_SetRequireCT_ParamsDataView() = default;

  NetworkServiceTest_SetRequireCT_ParamsDataView(
      internal::NetworkServiceTest_SetRequireCT_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadRequired(UserType* output) const {
    auto data_value = data_->required;
    return mojo::internal::Deserialize<::network::mojom::NetworkServiceTest_RequireCT>(
        data_value, output);
  }
  NetworkServiceTest_RequireCT required() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::NetworkServiceTest_RequireCT>(data_->required));
  }
 private:
  internal::NetworkServiceTest_SetRequireCT_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_SetRequireCT_ResponseParamsDataView {
 public:
  NetworkServiceTest_SetRequireCT_ResponseParamsDataView() = default;

  NetworkServiceTest_SetRequireCT_ResponseParamsDataView(
      internal::NetworkServiceTest_SetRequireCT_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_SetRequireCT_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_SetTransportSecurityStateSource_ParamsDataView {
 public:
  NetworkServiceTest_SetTransportSecurityStateSource_ParamsDataView() = default;

  NetworkServiceTest_SetTransportSecurityStateSource_ParamsDataView(
      internal::NetworkServiceTest_SetTransportSecurityStateSource_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint16_t reporting_port() const {
    return data_->reporting_port;
  }
 private:
  internal::NetworkServiceTest_SetTransportSecurityStateSource_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_SetTransportSecurityStateSource_ResponseParamsDataView {
 public:
  NetworkServiceTest_SetTransportSecurityStateSource_ResponseParamsDataView() = default;

  NetworkServiceTest_SetTransportSecurityStateSource_ResponseParamsDataView(
      internal::NetworkServiceTest_SetTransportSecurityStateSource_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_SetTransportSecurityStateSource_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ParamsDataView {
 public:
  NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ParamsDataView() = default;

  NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ParamsDataView(
      internal::NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ResponseParamsDataView {
 public:
  NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ResponseParamsDataView() = default;

  NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ResponseParamsDataView(
      internal::NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_SetAllowNetworkAccessToHostResolutions_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_ReplaceSystemDnsConfig_ParamsDataView {
 public:
  NetworkServiceTest_ReplaceSystemDnsConfig_ParamsDataView() = default;

  NetworkServiceTest_ReplaceSystemDnsConfig_ParamsDataView(
      internal::NetworkServiceTest_ReplaceSystemDnsConfig_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_ReplaceSystemDnsConfig_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_ReplaceSystemDnsConfig_ResponseParamsDataView {
 public:
  NetworkServiceTest_ReplaceSystemDnsConfig_ResponseParamsDataView() = default;

  NetworkServiceTest_ReplaceSystemDnsConfig_ResponseParamsDataView(
      internal::NetworkServiceTest_ReplaceSystemDnsConfig_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_ReplaceSystemDnsConfig_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_SetTestDohConfig_ParamsDataView {
 public:
  NetworkServiceTest_SetTestDohConfig_ParamsDataView() = default;

  NetworkServiceTest_SetTestDohConfig_ParamsDataView(
      internal::NetworkServiceTest_SetTestDohConfig_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadSecureDnsMode(UserType* output) const {
    auto data_value = data_->secure_dns_mode;
    return mojo::internal::Deserialize<::network::mojom::SecureDnsMode>(
        data_value, output);
  }
  ::network::mojom::SecureDnsMode secure_dns_mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::SecureDnsMode>(data_->secure_dns_mode));
  }
  inline void GetDohConfigDataView(
      ::network::mojom::DnsOverHttpsConfigDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDohConfig(UserType* output) {
    
    auto* pointer = data_->doh_config.Get();
    return mojo::internal::Deserialize<::network::mojom::DnsOverHttpsConfigDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkServiceTest_SetTestDohConfig_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_SetTestDohConfig_ResponseParamsDataView {
 public:
  NetworkServiceTest_SetTestDohConfig_ResponseParamsDataView() = default;

  NetworkServiceTest_SetTestDohConfig_ResponseParamsDataView(
      internal::NetworkServiceTest_SetTestDohConfig_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_SetTestDohConfig_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_CrashOnResolveHost_ParamsDataView {
 public:
  NetworkServiceTest_CrashOnResolveHost_ParamsDataView() = default;

  NetworkServiceTest_CrashOnResolveHost_ParamsDataView(
      internal::NetworkServiceTest_CrashOnResolveHost_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHostDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHost(UserType* output) {
    
    auto* pointer = data_->host.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkServiceTest_CrashOnResolveHost_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_CrashOnGetCookieList_ParamsDataView {
 public:
  NetworkServiceTest_CrashOnGetCookieList_ParamsDataView() = default;

  NetworkServiceTest_CrashOnGetCookieList_ParamsDataView(
      internal::NetworkServiceTest_CrashOnGetCookieList_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_CrashOnGetCookieList_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_GetLatestMemoryPressureLevel_ParamsDataView {
 public:
  NetworkServiceTest_GetLatestMemoryPressureLevel_ParamsDataView() = default;

  NetworkServiceTest_GetLatestMemoryPressureLevel_ParamsDataView(
      internal::NetworkServiceTest_GetLatestMemoryPressureLevel_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_GetLatestMemoryPressureLevel_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_GetLatestMemoryPressureLevel_ResponseParamsDataView {
 public:
  NetworkServiceTest_GetLatestMemoryPressureLevel_ResponseParamsDataView() = default;

  NetworkServiceTest_GetLatestMemoryPressureLevel_ResponseParamsDataView(
      internal::NetworkServiceTest_GetLatestMemoryPressureLevel_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadMemoryPressureLevel(UserType* output) const {
    auto data_value = data_->memory_pressure_level;
    return mojo::internal::Deserialize<::mojo_base::mojom::MemoryPressureLevel>(
        data_value, output);
  }
  ::mojo_base::mojom::MemoryPressureLevel memory_pressure_level() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::mojo_base::mojom::MemoryPressureLevel>(data_->memory_pressure_level));
  }
 private:
  internal::NetworkServiceTest_GetLatestMemoryPressureLevel_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ParamsDataView {
 public:
  NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ParamsDataView() = default;

  NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ParamsDataView(
      internal::NetworkServiceTest_GetPeerToPeerConnectionsCountChange_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_GetPeerToPeerConnectionsCountChange_Params_Data* data_ = nullptr;
};



class NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ResponseParamsDataView {
 public:
  NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ResponseParamsDataView() = default;

  NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ResponseParamsDataView(
      internal::NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t connection_count() const {
    return data_->connection_count;
  }
 private:
  internal::NetworkServiceTest_GetPeerToPeerConnectionsCountChange_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_GetEnvironmentVariableValue_ParamsDataView {
 public:
  NetworkServiceTest_GetEnvironmentVariableValue_ParamsDataView() = default;

  NetworkServiceTest_GetEnvironmentVariableValue_ParamsDataView(
      internal::NetworkServiceTest_GetEnvironmentVariableValue_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkServiceTest_GetEnvironmentVariableValue_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_GetEnvironmentVariableValue_ResponseParamsDataView {
 public:
  NetworkServiceTest_GetEnvironmentVariableValue_ResponseParamsDataView() = default;

  NetworkServiceTest_GetEnvironmentVariableValue_ResponseParamsDataView(
      internal::NetworkServiceTest_GetEnvironmentVariableValue_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) {
    
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkServiceTest_GetEnvironmentVariableValue_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_Log_ParamsDataView {
 public:
  NetworkServiceTest_Log_ParamsDataView() = default;

  NetworkServiceTest_Log_ParamsDataView(
      internal::NetworkServiceTest_Log_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkServiceTest_Log_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_Log_ResponseParamsDataView {
 public:
  NetworkServiceTest_Log_ResponseParamsDataView() = default;

  NetworkServiceTest_Log_ResponseParamsDataView(
      internal::NetworkServiceTest_Log_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_Log_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_ActivateFieldTrial_ParamsDataView {
 public:
  NetworkServiceTest_ActivateFieldTrial_ParamsDataView() = default;

  NetworkServiceTest_ActivateFieldTrial_ParamsDataView(
      internal::NetworkServiceTest_ActivateFieldTrial_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFieldTrialNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFieldTrialName(UserType* output) {
    
    auto* pointer = data_->field_trial_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkServiceTest_ActivateFieldTrial_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_SetSCTAuditingRetryDelay_ParamsDataView {
 public:
  NetworkServiceTest_SetSCTAuditingRetryDelay_ParamsDataView() = default;

  NetworkServiceTest_SetSCTAuditingRetryDelay_ParamsDataView(
      internal::NetworkServiceTest_SetSCTAuditingRetryDelay_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDelayDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDelay(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::TimeDeltaDataView, UserType>(),
    "Attempting to read the optional `delay` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadDelay` instead "
    "of `ReadDelay if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->delay.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkServiceTest_SetSCTAuditingRetryDelay_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_SetSCTAuditingRetryDelay_ResponseParamsDataView {
 public:
  NetworkServiceTest_SetSCTAuditingRetryDelay_ResponseParamsDataView() = default;

  NetworkServiceTest_SetSCTAuditingRetryDelay_ResponseParamsDataView(
      internal::NetworkServiceTest_SetSCTAuditingRetryDelay_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceTest_SetSCTAuditingRetryDelay_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_OpenFile_ParamsDataView {
 public:
  NetworkServiceTest_OpenFile_ParamsDataView() = default;

  NetworkServiceTest_OpenFile_ParamsDataView(
      internal::NetworkServiceTest_OpenFile_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkServiceTest_OpenFile_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_OpenFile_ResponseParamsDataView {
 public:
  NetworkServiceTest_OpenFile_ResponseParamsDataView() = default;

  NetworkServiceTest_OpenFile_ResponseParamsDataView(
      internal::NetworkServiceTest_OpenFile_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool result() const {
    return data_->result;
  }
 private:
  internal::NetworkServiceTest_OpenFile_ResponseParams_Data* data_ = nullptr;
};



class NetworkServiceTest_EnumerateFiles_ParamsDataView {
 public:
  NetworkServiceTest_EnumerateFiles_ParamsDataView() = default;

  NetworkServiceTest_EnumerateFiles_ParamsDataView(
      internal::NetworkServiceTest_EnumerateFiles_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::HttpCacheBackendFileOperationsFactoryInterfaceBase>>(
            &data_->factory, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkServiceTest_EnumerateFiles_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_EnumerateFiles_ResponseParamsDataView {
 public:
  NetworkServiceTest_EnumerateFiles_ResponseParamsDataView() = default;

  NetworkServiceTest_EnumerateFiles_ResponseParamsDataView(
      internal::NetworkServiceTest_EnumerateFiles_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEntriesDataView(
      mojo::ArrayDataView<::network::mojom::FileEnumerationEntryDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEntries(UserType* output) {
    
    auto* pointer = data_->entries.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::FileEnumerationEntryDataView>>(
        pointer, output, message_);
  }
  bool error() const {
    return data_->error;
  }
 private:
  internal::NetworkServiceTest_EnumerateFiles_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_CreateSimpleCache_ParamsDataView {
 public:
  NetworkServiceTest_CreateSimpleCache_ParamsDataView() = default;

  NetworkServiceTest_CreateSimpleCache_ParamsDataView(
      internal::NetworkServiceTest_CreateSimpleCache_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::HttpCacheBackendFileOperationsFactoryInterfaceBase>>(
            &data_->factory, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
  bool reset() const {
    return data_->reset;
  }
 private:
  internal::NetworkServiceTest_CreateSimpleCache_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkServiceTest_CreateSimpleCache_ResponseParamsDataView {
 public:
  NetworkServiceTest_CreateSimpleCache_ResponseParamsDataView() = default;

  NetworkServiceTest_CreateSimpleCache_ResponseParamsDataView(
      internal::NetworkServiceTest_CreateSimpleCache_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeBackend() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::SimpleCacheInterfaceBase>>(
            &data_->backend, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkServiceTest_CreateSimpleCache_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void SimpleCacheEntry_WriteData_ParamsDataView::GetDataDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->data.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}






inline void SimpleCacheEntry_ReadData_ResponseParamsDataView::GetDataDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->data.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}


inline void SimpleCacheEntry_WriteSparseData_ParamsDataView::GetDataDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->data.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}






inline void SimpleCacheEntry_ReadSparseData_ResponseParamsDataView::GetDataDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->data.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}








inline void SimpleCacheEntryEnumerator_GetNext_ResponseParamsDataView::GetResultDataView(
    SimpleCacheOpenEntryResultDataView* output) {
  auto pointer = data_->result.Get();
  *output = SimpleCacheOpenEntryResultDataView(pointer, message_);
}


inline void SimpleCache_CreateEntry_ParamsDataView::GetKeyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->key.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void SimpleCache_OpenEntry_ParamsDataView::GetKeyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->key.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void SimpleCache_DoomEntry_ParamsDataView::GetKeyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->key.Get();
  *output = mojo::StringDataView(pointer, message_);
}














inline void NetworkServiceTest_AddRules_ParamsDataView::GetRulesDataView(
    mojo::ArrayDataView<RuleDataView>* output) {
  auto pointer = data_->rules.Get();
  *output = mojo::ArrayDataView<RuleDataView>(pointer, message_);
}






















inline void NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ParamsDataView::GetCertDataView(
    ::network::mojom::X509CertificateDataView* output) {
  auto pointer = data_->cert.Get();
  *output = ::network::mojom::X509CertificateDataView(pointer, message_);
}
inline void NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ParamsDataView::GetHostPatternDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->host_pattern.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkServiceTest_MockCertVerifierAddResultForCertAndHost_ParamsDataView::GetVerifyResultDataView(
    ::network::mojom::CertVerifyResultDataView* output) {
  auto pointer = data_->verify_result.Get();
  *output = ::network::mojom::CertVerifyResultDataView(pointer, message_);
}




















inline void NetworkServiceTest_SetTestDohConfig_ParamsDataView::GetDohConfigDataView(
    ::network::mojom::DnsOverHttpsConfigDataView* output) {
  auto pointer = data_->doh_config.Get();
  *output = ::network::mojom::DnsOverHttpsConfigDataView(pointer, message_);
}




inline void NetworkServiceTest_CrashOnResolveHost_ParamsDataView::GetHostDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->host.Get();
  *output = mojo::StringDataView(pointer, message_);
}












inline void NetworkServiceTest_GetEnvironmentVariableValue_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void NetworkServiceTest_GetEnvironmentVariableValue_ResponseParamsDataView::GetValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->value.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void NetworkServiceTest_Log_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void NetworkServiceTest_ActivateFieldTrial_ParamsDataView::GetFieldTrialNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->field_trial_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void NetworkServiceTest_SetSCTAuditingRetryDelay_ParamsDataView::GetDelayDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->delay.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}




inline void NetworkServiceTest_OpenFile_ParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}




inline void NetworkServiceTest_EnumerateFiles_ParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}


inline void NetworkServiceTest_EnumerateFiles_ResponseParamsDataView::GetEntriesDataView(
    mojo::ArrayDataView<::network::mojom::FileEnumerationEntryDataView>* output) {
  auto pointer = data_->entries.Get();
  *output = mojo::ArrayDataView<::network::mojom::FileEnumerationEntryDataView>(pointer, message_);
}


inline void NetworkServiceTest_CreateSimpleCache_ParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_TEST_MOJOM_PARAMS_DATA_H_