// services/network/public/mojom/restricted_cookie_manager.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/network/public/mojom/restricted_cookie_manager.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/network/public/mojom/restricted_cookie_manager.mojom-params-data.h"
#include "services/network/public/mojom/restricted_cookie_manager.mojom-shared-message-ids.h"

#include "services/network/public/mojom/restricted_cookie_manager.mojom-blink-import-headers.h"
#include "services/network/public/mojom/restricted_cookie_manager.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_RESTRICTED_COOKIE_MANAGER_MOJOM_BLINK_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_RESTRICTED_COOKIE_MANAGER_MOJOM_BLINK_JUMBO_H_
#endif



namespace network {
namespace mojom {
namespace blink {
CookieManagerGetOptions::CookieManagerGetOptions()
    : name(),
      match_type() {}

CookieManagerGetOptions::CookieManagerGetOptions(
    const WTF::String& name_in,
    CookieMatchType match_type_in)
    : name(std::move(name_in)),
      match_type(std::move(match_type_in)) {}

CookieManagerGetOptions::~CookieManagerGetOptions() = default;
size_t CookieManagerGetOptions::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->name);
  seed = mojo::internal::WTFHash(seed, this->match_type);
  return seed;
}

void CookieManagerGetOptions::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "match_type"), this->match_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type CookieMatchType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool CookieManagerGetOptions::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char RestrictedCookieManager::Name_[] = "network.mojom.RestrictedCookieManager";

RestrictedCookieManager::IPCStableHashFunction RestrictedCookieManager::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kRestrictedCookieManager_GetAllForUrl_Name: {
      return &RestrictedCookieManager::GetAllForUrl_Sym::IPCStableHash;
    }
    case internal::kRestrictedCookieManager_SetCanonicalCookie_Name: {
      return &RestrictedCookieManager::SetCanonicalCookie_Sym::IPCStableHash;
    }
    case internal::kRestrictedCookieManager_AddChangeListener_Name: {
      return &RestrictedCookieManager::AddChangeListener_Sym::IPCStableHash;
    }
    case internal::kRestrictedCookieManager_SetCookieFromString_Name: {
      return &RestrictedCookieManager::SetCookieFromString_Sym::IPCStableHash;
    }
    case internal::kRestrictedCookieManager_GetCookiesString_Name: {
      return &RestrictedCookieManager::GetCookiesString_Sym::IPCStableHash;
    }
    case internal::kRestrictedCookieManager_CookiesEnabledFor_Name: {
      return &RestrictedCookieManager::CookiesEnabledFor_Sym::IPCStableHash;
    }
    case internal::kRestrictedCookieManager_ConvertPartitionedCookiesToUnpartitioned_Name: {
      return &RestrictedCookieManager::ConvertPartitionedCookiesToUnpartitioned_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* RestrictedCookieManager::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kRestrictedCookieManager_GetAllForUrl_Name:
            return "Receive network::mojom::RestrictedCookieManager::GetAllForUrl";
      case internal::kRestrictedCookieManager_SetCanonicalCookie_Name:
            return "Receive network::mojom::RestrictedCookieManager::SetCanonicalCookie";
      case internal::kRestrictedCookieManager_AddChangeListener_Name:
            return "Receive network::mojom::RestrictedCookieManager::AddChangeListener";
      case internal::kRestrictedCookieManager_SetCookieFromString_Name:
            return "Receive network::mojom::RestrictedCookieManager::SetCookieFromString";
      case internal::kRestrictedCookieManager_GetCookiesString_Name:
            return "Receive network::mojom::RestrictedCookieManager::GetCookiesString";
      case internal::kRestrictedCookieManager_CookiesEnabledFor_Name:
            return "Receive network::mojom::RestrictedCookieManager::CookiesEnabledFor";
      case internal::kRestrictedCookieManager_ConvertPartitionedCookiesToUnpartitioned_Name:
            return "Receive network::mojom::RestrictedCookieManager::ConvertPartitionedCookiesToUnpartitioned";
    }
  } else {
    switch (message.name()) {
      case internal::kRestrictedCookieManager_GetAllForUrl_Name:
            return "Receive reply network::mojom::RestrictedCookieManager::GetAllForUrl";
      case internal::kRestrictedCookieManager_SetCanonicalCookie_Name:
            return "Receive reply network::mojom::RestrictedCookieManager::SetCanonicalCookie";
      case internal::kRestrictedCookieManager_AddChangeListener_Name:
            return "Receive reply network::mojom::RestrictedCookieManager::AddChangeListener";
      case internal::kRestrictedCookieManager_SetCookieFromString_Name:
            return "Receive reply network::mojom::RestrictedCookieManager::SetCookieFromString";
      case internal::kRestrictedCookieManager_GetCookiesString_Name:
            return "Receive reply network::mojom::RestrictedCookieManager::GetCookiesString";
      case internal::kRestrictedCookieManager_CookiesEnabledFor_Name:
            return "Receive reply network::mojom::RestrictedCookieManager::CookiesEnabledFor";
      case internal::kRestrictedCookieManager_ConvertPartitionedCookiesToUnpartitioned_Name:
            return "Receive reply network::mojom::RestrictedCookieManager::ConvertPartitionedCookiesToUnpartitioned";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t RestrictedCookieManager::GetAllForUrl_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)network::mojom::RestrictedCookieManager::GetAllForUrl");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t RestrictedCookieManager::SetCanonicalCookie_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)network::mojom::RestrictedCookieManager::SetCanonicalCookie");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t RestrictedCookieManager::AddChangeListener_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)network::mojom::RestrictedCookieManager::AddChangeListener");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t RestrictedCookieManager::SetCookieFromString_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)network::mojom::RestrictedCookieManager::SetCookieFromString");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t RestrictedCookieManager::GetCookiesString_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)network::mojom::RestrictedCookieManager::GetCookiesString");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t RestrictedCookieManager::CookiesEnabledFor_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)network::mojom::RestrictedCookieManager::CookiesEnabledFor");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t RestrictedCookieManager::ConvertPartitionedCookiesToUnpartitioned_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)network::mojom::RestrictedCookieManager::ConvertPartitionedCookiesToUnpartitioned");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)
bool RestrictedCookieManager::SetCookieFromString(const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, const WTF::String& cookie, bool partitioned_cookies_runtime_feature_enabled, bool* out_site_for_cookies_ok, bool* out_top_frame_origin_ok) {
  NOTREACHED();
  return false;
}
bool RestrictedCookieManager::GetCookiesString(const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, bool partitioned_cookies_runtime_feature_enabled, WTF::String* out_cookies) {
  NOTREACHED();
  return false;
}
bool RestrictedCookieManager::CookiesEnabledFor(const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, bool* out_cookies_enabled) {
  NOTREACHED();
  return false;
}

class RestrictedCookieManager_GetAllForUrl_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  RestrictedCookieManager_GetAllForUrl_ForwardToCallback(
      RestrictedCookieManager::GetAllForUrlCallback callback
      ) : callback_(std::move(callback)) {
  }

  RestrictedCookieManager_GetAllForUrl_ForwardToCallback(const RestrictedCookieManager_GetAllForUrl_ForwardToCallback&) = delete;
  RestrictedCookieManager_GetAllForUrl_ForwardToCallback& operator=(const RestrictedCookieManager_GetAllForUrl_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  RestrictedCookieManager::GetAllForUrlCallback callback_;
};

class RestrictedCookieManager_SetCanonicalCookie_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  RestrictedCookieManager_SetCanonicalCookie_ForwardToCallback(
      RestrictedCookieManager::SetCanonicalCookieCallback callback
      ) : callback_(std::move(callback)) {
  }

  RestrictedCookieManager_SetCanonicalCookie_ForwardToCallback(const RestrictedCookieManager_SetCanonicalCookie_ForwardToCallback&) = delete;
  RestrictedCookieManager_SetCanonicalCookie_ForwardToCallback& operator=(const RestrictedCookieManager_SetCanonicalCookie_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  RestrictedCookieManager::SetCanonicalCookieCallback callback_;
};

class RestrictedCookieManager_AddChangeListener_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  RestrictedCookieManager_AddChangeListener_ForwardToCallback(
      RestrictedCookieManager::AddChangeListenerCallback callback
      ) : callback_(std::move(callback)) {
  }

  RestrictedCookieManager_AddChangeListener_ForwardToCallback(const RestrictedCookieManager_AddChangeListener_ForwardToCallback&) = delete;
  RestrictedCookieManager_AddChangeListener_ForwardToCallback& operator=(const RestrictedCookieManager_AddChangeListener_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  RestrictedCookieManager::AddChangeListenerCallback callback_;
};
class RestrictedCookieManager_SetCookieFromString_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  RestrictedCookieManager_SetCookieFromString_HandleSyncResponse(
      bool* result, bool* out_site_for_cookies_ok, bool* out_top_frame_origin_ok)
      : result_(result), out_site_for_cookies_ok_(out_site_for_cookies_ok), out_top_frame_origin_ok_(out_top_frame_origin_ok) {
    DCHECK(!*result_);
  }

  RestrictedCookieManager_SetCookieFromString_HandleSyncResponse(const RestrictedCookieManager_SetCookieFromString_HandleSyncResponse&) = delete;
  RestrictedCookieManager_SetCookieFromString_HandleSyncResponse& operator=(const RestrictedCookieManager_SetCookieFromString_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  bool* out_site_for_cookies_ok_;
  bool* out_top_frame_origin_ok_;};

class RestrictedCookieManager_SetCookieFromString_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  RestrictedCookieManager_SetCookieFromString_ForwardToCallback(
      RestrictedCookieManager::SetCookieFromStringCallback callback
      ) : callback_(std::move(callback)) {
  }

  RestrictedCookieManager_SetCookieFromString_ForwardToCallback(const RestrictedCookieManager_SetCookieFromString_ForwardToCallback&) = delete;
  RestrictedCookieManager_SetCookieFromString_ForwardToCallback& operator=(const RestrictedCookieManager_SetCookieFromString_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  RestrictedCookieManager::SetCookieFromStringCallback callback_;
};
class RestrictedCookieManager_GetCookiesString_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  RestrictedCookieManager_GetCookiesString_HandleSyncResponse(
      bool* result, WTF::String* out_cookies)
      : result_(result), out_cookies_(out_cookies) {
    DCHECK(!*result_);
  }

  RestrictedCookieManager_GetCookiesString_HandleSyncResponse(const RestrictedCookieManager_GetCookiesString_HandleSyncResponse&) = delete;
  RestrictedCookieManager_GetCookiesString_HandleSyncResponse& operator=(const RestrictedCookieManager_GetCookiesString_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  WTF::String* out_cookies_;};

class RestrictedCookieManager_GetCookiesString_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  RestrictedCookieManager_GetCookiesString_ForwardToCallback(
      RestrictedCookieManager::GetCookiesStringCallback callback
      ) : callback_(std::move(callback)) {
  }

  RestrictedCookieManager_GetCookiesString_ForwardToCallback(const RestrictedCookieManager_GetCookiesString_ForwardToCallback&) = delete;
  RestrictedCookieManager_GetCookiesString_ForwardToCallback& operator=(const RestrictedCookieManager_GetCookiesString_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  RestrictedCookieManager::GetCookiesStringCallback callback_;
};
class RestrictedCookieManager_CookiesEnabledFor_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  RestrictedCookieManager_CookiesEnabledFor_HandleSyncResponse(
      bool* result, bool* out_cookies_enabled)
      : result_(result), out_cookies_enabled_(out_cookies_enabled) {
    DCHECK(!*result_);
  }

  RestrictedCookieManager_CookiesEnabledFor_HandleSyncResponse(const RestrictedCookieManager_CookiesEnabledFor_HandleSyncResponse&) = delete;
  RestrictedCookieManager_CookiesEnabledFor_HandleSyncResponse& operator=(const RestrictedCookieManager_CookiesEnabledFor_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  bool* out_cookies_enabled_;};

class RestrictedCookieManager_CookiesEnabledFor_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  RestrictedCookieManager_CookiesEnabledFor_ForwardToCallback(
      RestrictedCookieManager::CookiesEnabledForCallback callback
      ) : callback_(std::move(callback)) {
  }

  RestrictedCookieManager_CookiesEnabledFor_ForwardToCallback(const RestrictedCookieManager_CookiesEnabledFor_ForwardToCallback&) = delete;
  RestrictedCookieManager_CookiesEnabledFor_ForwardToCallback& operator=(const RestrictedCookieManager_CookiesEnabledFor_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  RestrictedCookieManager::CookiesEnabledForCallback callback_;
};

RestrictedCookieManagerProxy::RestrictedCookieManagerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void RestrictedCookieManagerProxy::GetAllForUrl(
    const ::blink::KURL& in_url, const ::net::SiteForCookies& in_site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& in_top_frame_origin, CookieManagerGetOptionsPtr in_options, bool in_partitioned_cookies_runtime_feature_enabled, GetAllForUrlCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send network::mojom::RestrictedCookieManager::GetAllForUrl", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::blink::KURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("site_for_cookies"), in_site_for_cookies,
                        "<value of type const ::net::SiteForCookies&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_frame_origin"), in_top_frame_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("options"), in_options,
                        "<value of type CookieManagerGetOptionsPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("partitioned_cookies_runtime_feature_enabled"), in_partitioned_cookies_runtime_feature_enabled,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_GetAllForUrl_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_GetAllForUrl_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in RestrictedCookieManager.GetAllForUrl request");
  mojo::internal::MessageFragment<
      typename decltype(params->site_for_cookies)::BaseType> site_for_cookies_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::SiteForCookiesDataView>(
      in_site_for_cookies, site_for_cookies_fragment);
  params->site_for_cookies.Set(
      site_for_cookies_fragment.is_null() ? nullptr : site_for_cookies_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->site_for_cookies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null site_for_cookies in RestrictedCookieManager.GetAllForUrl request");
  mojo::internal::MessageFragment<
      typename decltype(params->top_frame_origin)::BaseType> top_frame_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_top_frame_origin, top_frame_origin_fragment);
  params->top_frame_origin.Set(
      top_frame_origin_fragment.is_null() ? nullptr : top_frame_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->top_frame_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null top_frame_origin in RestrictedCookieManager.GetAllForUrl request");
  mojo::internal::MessageFragment<
      typename decltype(params->options)::BaseType> options_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::CookieManagerGetOptionsDataView>(
      in_options, options_fragment);
  params->options.Set(
      options_fragment.is_null() ? nullptr : options_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->options.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null options in RestrictedCookieManager.GetAllForUrl request");
  params->partitioned_cookies_runtime_feature_enabled = in_partitioned_cookies_runtime_feature_enabled;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("GetAllForUrl");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new RestrictedCookieManager_GetAllForUrl_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void RestrictedCookieManagerProxy::SetCanonicalCookie(
    const ::net::CanonicalCookie& in_cookie, const ::blink::KURL& in_url, const ::net::SiteForCookies& in_site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& in_top_frame_origin, ::net::CookieInclusionStatus in_status, SetCanonicalCookieCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send network::mojom::RestrictedCookieManager::SetCanonicalCookie", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cookie"), in_cookie,
                        "<value of type const ::net::CanonicalCookie&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::blink::KURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("site_for_cookies"), in_site_for_cookies,
                        "<value of type const ::net::SiteForCookies&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_frame_origin"), in_top_frame_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("status"), in_status,
                        "<value of type ::net::CookieInclusionStatus>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_SetCanonicalCookie_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_SetCanonicalCookie_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->cookie)::BaseType> cookie_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::CanonicalCookieDataView>(
      in_cookie, cookie_fragment);
  params->cookie.Set(
      cookie_fragment.is_null() ? nullptr : cookie_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->cookie.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null cookie in RestrictedCookieManager.SetCanonicalCookie request");
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in RestrictedCookieManager.SetCanonicalCookie request");
  mojo::internal::MessageFragment<
      typename decltype(params->site_for_cookies)::BaseType> site_for_cookies_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::SiteForCookiesDataView>(
      in_site_for_cookies, site_for_cookies_fragment);
  params->site_for_cookies.Set(
      site_for_cookies_fragment.is_null() ? nullptr : site_for_cookies_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->site_for_cookies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null site_for_cookies in RestrictedCookieManager.SetCanonicalCookie request");
  mojo::internal::MessageFragment<
      typename decltype(params->top_frame_origin)::BaseType> top_frame_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_top_frame_origin, top_frame_origin_fragment);
  params->top_frame_origin.Set(
      top_frame_origin_fragment.is_null() ? nullptr : top_frame_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->top_frame_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null top_frame_origin in RestrictedCookieManager.SetCanonicalCookie request");
  mojo::internal::MessageFragment<
      typename decltype(params->status)::BaseType> status_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::CookieInclusionStatusDataView>(
      in_status, status_fragment);
  params->status.Set(
      status_fragment.is_null() ? nullptr : status_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->status.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null status in RestrictedCookieManager.SetCanonicalCookie request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("SetCanonicalCookie");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new RestrictedCookieManager_SetCanonicalCookie_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void RestrictedCookieManagerProxy::AddChangeListener(
    const ::blink::KURL& in_url, const ::net::SiteForCookies& in_site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& in_top_frame_origin, ::mojo::PendingRemote<::network::mojom::blink::CookieChangeListener> in_listener, AddChangeListenerCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send network::mojom::RestrictedCookieManager::AddChangeListener", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::blink::KURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("site_for_cookies"), in_site_for_cookies,
                        "<value of type const ::net::SiteForCookies&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_frame_origin"), in_top_frame_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("listener"), in_listener,
                        "<value of type ::mojo::PendingRemote<::network::mojom::blink::CookieChangeListener>>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_AddChangeListener_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_AddChangeListener_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in RestrictedCookieManager.AddChangeListener request");
  mojo::internal::MessageFragment<
      typename decltype(params->site_for_cookies)::BaseType> site_for_cookies_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::SiteForCookiesDataView>(
      in_site_for_cookies, site_for_cookies_fragment);
  params->site_for_cookies.Set(
      site_for_cookies_fragment.is_null() ? nullptr : site_for_cookies_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->site_for_cookies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null site_for_cookies in RestrictedCookieManager.AddChangeListener request");
  mojo::internal::MessageFragment<
      typename decltype(params->top_frame_origin)::BaseType> top_frame_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_top_frame_origin, top_frame_origin_fragment);
  params->top_frame_origin.Set(
      top_frame_origin_fragment.is_null() ? nullptr : top_frame_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->top_frame_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null top_frame_origin in RestrictedCookieManager.AddChangeListener request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::network::mojom::CookieChangeListenerInterfaceBase>>(
      in_listener, &params->listener, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->listener),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid listener in RestrictedCookieManager.AddChangeListener request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("AddChangeListener");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new RestrictedCookieManager_AddChangeListener_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
bool RestrictedCookieManagerProxy::SetCookieFromString(
    const ::blink::KURL& param_url, const ::net::SiteForCookies& param_site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& param_top_frame_origin, const WTF::String& param_cookie, bool param_partitioned_cookies_runtime_feature_enabled, bool* out_param_site_for_cookies_ok, bool* out_param_top_frame_origin_ok) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "Call network::mojom::RestrictedCookieManager::SetCookieFromString (sync)", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), param_url,
                        "<value of type const ::blink::KURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("site_for_cookies"), param_site_for_cookies,
                        "<value of type const ::net::SiteForCookies&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_frame_origin"), param_top_frame_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cookie"), param_cookie,
                        "<value of type const WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("partitioned_cookies_runtime_feature_enabled"), param_partitioned_cookies_runtime_feature_enabled,
                        "<value of type bool>");
   });
#else
  TRACE_EVENT0("mojom", "RestrictedCookieManager::SetCookieFromString");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_SetCookieFromString_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_SetCookieFromString_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      param_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in RestrictedCookieManager.SetCookieFromString request");
  mojo::internal::MessageFragment<
      typename decltype(params->site_for_cookies)::BaseType> site_for_cookies_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::SiteForCookiesDataView>(
      param_site_for_cookies, site_for_cookies_fragment);
  params->site_for_cookies.Set(
      site_for_cookies_fragment.is_null() ? nullptr : site_for_cookies_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->site_for_cookies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null site_for_cookies in RestrictedCookieManager.SetCookieFromString request");
  mojo::internal::MessageFragment<
      typename decltype(params->top_frame_origin)::BaseType> top_frame_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      param_top_frame_origin, top_frame_origin_fragment);
  params->top_frame_origin.Set(
      top_frame_origin_fragment.is_null() ? nullptr : top_frame_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->top_frame_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null top_frame_origin in RestrictedCookieManager.SetCookieFromString request");
  mojo::internal::MessageFragment<
      typename decltype(params->cookie)::BaseType> cookie_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      param_cookie, cookie_fragment);
  params->cookie.Set(
      cookie_fragment.is_null() ? nullptr : cookie_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->cookie.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null cookie in RestrictedCookieManager.SetCookieFromString request");
  params->partitioned_cookies_runtime_feature_enabled = param_partitioned_cookies_runtime_feature_enabled;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("SetCookieFromString");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new RestrictedCookieManager_SetCookieFromString_HandleSyncResponse(
          &result, out_param_site_for_cookies_ok, out_param_top_frame_origin_ok));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "RestrictedCookieManager::SetCookieFromString", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("site_for_cookies_ok"), out_param_site_for_cookies_ok,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_frame_origin_ok"), out_param_top_frame_origin_ok,
                        "<value of type bool>");
   });
#endif
  return result;
}

void RestrictedCookieManagerProxy::SetCookieFromString(
    const ::blink::KURL& in_url, const ::net::SiteForCookies& in_site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& in_top_frame_origin, const WTF::String& in_cookie, bool in_partitioned_cookies_runtime_feature_enabled, SetCookieFromStringCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send network::mojom::RestrictedCookieManager::SetCookieFromString", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::blink::KURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("site_for_cookies"), in_site_for_cookies,
                        "<value of type const ::net::SiteForCookies&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_frame_origin"), in_top_frame_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cookie"), in_cookie,
                        "<value of type const WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("partitioned_cookies_runtime_feature_enabled"), in_partitioned_cookies_runtime_feature_enabled,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_SetCookieFromString_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_SetCookieFromString_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in RestrictedCookieManager.SetCookieFromString request");
  mojo::internal::MessageFragment<
      typename decltype(params->site_for_cookies)::BaseType> site_for_cookies_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::SiteForCookiesDataView>(
      in_site_for_cookies, site_for_cookies_fragment);
  params->site_for_cookies.Set(
      site_for_cookies_fragment.is_null() ? nullptr : site_for_cookies_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->site_for_cookies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null site_for_cookies in RestrictedCookieManager.SetCookieFromString request");
  mojo::internal::MessageFragment<
      typename decltype(params->top_frame_origin)::BaseType> top_frame_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_top_frame_origin, top_frame_origin_fragment);
  params->top_frame_origin.Set(
      top_frame_origin_fragment.is_null() ? nullptr : top_frame_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->top_frame_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null top_frame_origin in RestrictedCookieManager.SetCookieFromString request");
  mojo::internal::MessageFragment<
      typename decltype(params->cookie)::BaseType> cookie_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_cookie, cookie_fragment);
  params->cookie.Set(
      cookie_fragment.is_null() ? nullptr : cookie_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->cookie.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null cookie in RestrictedCookieManager.SetCookieFromString request");
  params->partitioned_cookies_runtime_feature_enabled = in_partitioned_cookies_runtime_feature_enabled;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("SetCookieFromString");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new RestrictedCookieManager_SetCookieFromString_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
bool RestrictedCookieManagerProxy::GetCookiesString(
    const ::blink::KURL& param_url, const ::net::SiteForCookies& param_site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& param_top_frame_origin, bool param_partitioned_cookies_runtime_feature_enabled, WTF::String* out_param_cookies) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "Call network::mojom::RestrictedCookieManager::GetCookiesString (sync)", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), param_url,
                        "<value of type const ::blink::KURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("site_for_cookies"), param_site_for_cookies,
                        "<value of type const ::net::SiteForCookies&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_frame_origin"), param_top_frame_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("partitioned_cookies_runtime_feature_enabled"), param_partitioned_cookies_runtime_feature_enabled,
                        "<value of type bool>");
   });
#else
  TRACE_EVENT0("mojom", "RestrictedCookieManager::GetCookiesString");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_GetCookiesString_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_GetCookiesString_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      param_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in RestrictedCookieManager.GetCookiesString request");
  mojo::internal::MessageFragment<
      typename decltype(params->site_for_cookies)::BaseType> site_for_cookies_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::SiteForCookiesDataView>(
      param_site_for_cookies, site_for_cookies_fragment);
  params->site_for_cookies.Set(
      site_for_cookies_fragment.is_null() ? nullptr : site_for_cookies_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->site_for_cookies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null site_for_cookies in RestrictedCookieManager.GetCookiesString request");
  mojo::internal::MessageFragment<
      typename decltype(params->top_frame_origin)::BaseType> top_frame_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      param_top_frame_origin, top_frame_origin_fragment);
  params->top_frame_origin.Set(
      top_frame_origin_fragment.is_null() ? nullptr : top_frame_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->top_frame_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null top_frame_origin in RestrictedCookieManager.GetCookiesString request");
  params->partitioned_cookies_runtime_feature_enabled = param_partitioned_cookies_runtime_feature_enabled;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("GetCookiesString");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new RestrictedCookieManager_GetCookiesString_HandleSyncResponse(
          &result, out_param_cookies));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "RestrictedCookieManager::GetCookiesString", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cookies"), out_param_cookies,
                        "<value of type const WTF::String&>");
   });
#endif
  return result;
}

void RestrictedCookieManagerProxy::GetCookiesString(
    const ::blink::KURL& in_url, const ::net::SiteForCookies& in_site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& in_top_frame_origin, bool in_partitioned_cookies_runtime_feature_enabled, GetCookiesStringCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send network::mojom::RestrictedCookieManager::GetCookiesString", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::blink::KURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("site_for_cookies"), in_site_for_cookies,
                        "<value of type const ::net::SiteForCookies&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_frame_origin"), in_top_frame_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("partitioned_cookies_runtime_feature_enabled"), in_partitioned_cookies_runtime_feature_enabled,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_GetCookiesString_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_GetCookiesString_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in RestrictedCookieManager.GetCookiesString request");
  mojo::internal::MessageFragment<
      typename decltype(params->site_for_cookies)::BaseType> site_for_cookies_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::SiteForCookiesDataView>(
      in_site_for_cookies, site_for_cookies_fragment);
  params->site_for_cookies.Set(
      site_for_cookies_fragment.is_null() ? nullptr : site_for_cookies_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->site_for_cookies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null site_for_cookies in RestrictedCookieManager.GetCookiesString request");
  mojo::internal::MessageFragment<
      typename decltype(params->top_frame_origin)::BaseType> top_frame_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_top_frame_origin, top_frame_origin_fragment);
  params->top_frame_origin.Set(
      top_frame_origin_fragment.is_null() ? nullptr : top_frame_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->top_frame_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null top_frame_origin in RestrictedCookieManager.GetCookiesString request");
  params->partitioned_cookies_runtime_feature_enabled = in_partitioned_cookies_runtime_feature_enabled;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("GetCookiesString");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new RestrictedCookieManager_GetCookiesString_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
bool RestrictedCookieManagerProxy::CookiesEnabledFor(
    const ::blink::KURL& param_url, const ::net::SiteForCookies& param_site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& param_top_frame_origin, bool* out_param_cookies_enabled) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "Call network::mojom::RestrictedCookieManager::CookiesEnabledFor (sync)", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), param_url,
                        "<value of type const ::blink::KURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("site_for_cookies"), param_site_for_cookies,
                        "<value of type const ::net::SiteForCookies&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_frame_origin"), param_top_frame_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
   });
#else
  TRACE_EVENT0("mojom", "RestrictedCookieManager::CookiesEnabledFor");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_CookiesEnabledFor_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_CookiesEnabledFor_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      param_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in RestrictedCookieManager.CookiesEnabledFor request");
  mojo::internal::MessageFragment<
      typename decltype(params->site_for_cookies)::BaseType> site_for_cookies_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::SiteForCookiesDataView>(
      param_site_for_cookies, site_for_cookies_fragment);
  params->site_for_cookies.Set(
      site_for_cookies_fragment.is_null() ? nullptr : site_for_cookies_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->site_for_cookies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null site_for_cookies in RestrictedCookieManager.CookiesEnabledFor request");
  mojo::internal::MessageFragment<
      typename decltype(params->top_frame_origin)::BaseType> top_frame_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      param_top_frame_origin, top_frame_origin_fragment);
  params->top_frame_origin.Set(
      top_frame_origin_fragment.is_null() ? nullptr : top_frame_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->top_frame_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null top_frame_origin in RestrictedCookieManager.CookiesEnabledFor request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("CookiesEnabledFor");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new RestrictedCookieManager_CookiesEnabledFor_HandleSyncResponse(
          &result, out_param_cookies_enabled));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "RestrictedCookieManager::CookiesEnabledFor", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cookies_enabled"), out_param_cookies_enabled,
                        "<value of type bool>");
   });
#endif
  return result;
}

void RestrictedCookieManagerProxy::CookiesEnabledFor(
    const ::blink::KURL& in_url, const ::net::SiteForCookies& in_site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& in_top_frame_origin, CookiesEnabledForCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send network::mojom::RestrictedCookieManager::CookiesEnabledFor", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::blink::KURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("site_for_cookies"), in_site_for_cookies,
                        "<value of type const ::net::SiteForCookies&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_frame_origin"), in_top_frame_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_CookiesEnabledFor_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_CookiesEnabledFor_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in RestrictedCookieManager.CookiesEnabledFor request");
  mojo::internal::MessageFragment<
      typename decltype(params->site_for_cookies)::BaseType> site_for_cookies_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::SiteForCookiesDataView>(
      in_site_for_cookies, site_for_cookies_fragment);
  params->site_for_cookies.Set(
      site_for_cookies_fragment.is_null() ? nullptr : site_for_cookies_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->site_for_cookies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null site_for_cookies in RestrictedCookieManager.CookiesEnabledFor request");
  mojo::internal::MessageFragment<
      typename decltype(params->top_frame_origin)::BaseType> top_frame_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_top_frame_origin, top_frame_origin_fragment);
  params->top_frame_origin.Set(
      top_frame_origin_fragment.is_null() ? nullptr : top_frame_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->top_frame_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null top_frame_origin in RestrictedCookieManager.CookiesEnabledFor request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("CookiesEnabledFor");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new RestrictedCookieManager_CookiesEnabledFor_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void RestrictedCookieManagerProxy::ConvertPartitionedCookiesToUnpartitioned(
    const ::blink::KURL& in_url) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send network::mojom::RestrictedCookieManager::ConvertPartitionedCookiesToUnpartitioned", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::blink::KURL&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_ConvertPartitionedCookiesToUnpartitioned_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_ConvertPartitionedCookiesToUnpartitioned_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in RestrictedCookieManager.ConvertPartitionedCookiesToUnpartitioned request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("ConvertPartitionedCookiesToUnpartitioned");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class RestrictedCookieManager_GetAllForUrl_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static RestrictedCookieManager::GetAllForUrlCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<RestrictedCookieManager_GetAllForUrl_ProxyToResponder> proxy(
        new RestrictedCookieManager_GetAllForUrl_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&RestrictedCookieManager_GetAllForUrl_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~RestrictedCookieManager_GetAllForUrl_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  RestrictedCookieManager_GetAllForUrl_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "RestrictedCookieManager::GetAllForUrlCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      WTF::Vector<::network::mojom::blink::CookieWithAccessResultPtr> in_cookies);
};

bool RestrictedCookieManager_GetAllForUrl_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::RestrictedCookieManager_GetAllForUrl_ResponseParams_Data* params =
      reinterpret_cast<
          internal::RestrictedCookieManager_GetAllForUrl_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  WTF::Vector<::network::mojom::blink::CookieWithAccessResultPtr> p_cookies{};
  RestrictedCookieManager_GetAllForUrl_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadCookies(&p_cookies))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        RestrictedCookieManager::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_cookies));
  return true;
}

void RestrictedCookieManager_GetAllForUrl_ProxyToResponder::Run(
    WTF::Vector<::network::mojom::blink::CookieWithAccessResultPtr> in_cookies) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply network::mojom::RestrictedCookieManager::GetAllForUrl", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cookies"), in_cookies,
                        "<value of type WTF::Vector<::network::mojom::blink::CookieWithAccessResultPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_GetAllForUrl_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_GetAllForUrl_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->cookies)::BaseType>
      cookies_fragment(params.message());
  const mojo::internal::ContainerValidateParams cookies_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::CookieWithAccessResultDataView>>(
      in_cookies, cookies_fragment, &cookies_validate_params);
  params->cookies.Set(
      cookies_fragment.is_null() ? nullptr : cookies_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->cookies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null cookies in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("GetAllForUrl");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class RestrictedCookieManager_SetCanonicalCookie_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static RestrictedCookieManager::SetCanonicalCookieCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<RestrictedCookieManager_SetCanonicalCookie_ProxyToResponder> proxy(
        new RestrictedCookieManager_SetCanonicalCookie_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&RestrictedCookieManager_SetCanonicalCookie_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~RestrictedCookieManager_SetCanonicalCookie_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  RestrictedCookieManager_SetCanonicalCookie_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "RestrictedCookieManager::SetCanonicalCookieCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool RestrictedCookieManager_SetCanonicalCookie_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::RestrictedCookieManager_SetCanonicalCookie_ResponseParams_Data* params =
      reinterpret_cast<
          internal::RestrictedCookieManager_SetCanonicalCookie_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  RestrictedCookieManager_SetCanonicalCookie_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        RestrictedCookieManager::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void RestrictedCookieManager_SetCanonicalCookie_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply network::mojom::RestrictedCookieManager::SetCanonicalCookie", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_SetCanonicalCookie_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_SetCanonicalCookie_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("SetCanonicalCookie");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class RestrictedCookieManager_AddChangeListener_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static RestrictedCookieManager::AddChangeListenerCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<RestrictedCookieManager_AddChangeListener_ProxyToResponder> proxy(
        new RestrictedCookieManager_AddChangeListener_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&RestrictedCookieManager_AddChangeListener_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~RestrictedCookieManager_AddChangeListener_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  RestrictedCookieManager_AddChangeListener_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "RestrictedCookieManager::AddChangeListenerCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool RestrictedCookieManager_AddChangeListener_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::RestrictedCookieManager_AddChangeListener_ResponseParams_Data* params =
      reinterpret_cast<
          internal::RestrictedCookieManager_AddChangeListener_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  RestrictedCookieManager_AddChangeListener_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        RestrictedCookieManager::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void RestrictedCookieManager_AddChangeListener_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply network::mojom::RestrictedCookieManager::AddChangeListener");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_AddChangeListener_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_AddChangeListener_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("AddChangeListener");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class RestrictedCookieManager_SetCookieFromString_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static RestrictedCookieManager::SetCookieFromStringCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<RestrictedCookieManager_SetCookieFromString_ProxyToResponder> proxy(
        new RestrictedCookieManager_SetCookieFromString_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&RestrictedCookieManager_SetCookieFromString_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~RestrictedCookieManager_SetCookieFromString_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  RestrictedCookieManager_SetCookieFromString_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "RestrictedCookieManager::SetCookieFromStringCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_site_for_cookies_ok, bool in_top_frame_origin_ok);
};

bool RestrictedCookieManager_SetCookieFromString_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::RestrictedCookieManager_SetCookieFromString_ResponseParams_Data* params =
      reinterpret_cast<
          internal::RestrictedCookieManager_SetCookieFromString_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_site_for_cookies_ok{};
  bool p_top_frame_origin_ok{};
  RestrictedCookieManager_SetCookieFromString_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_site_for_cookies_ok = input_data_view.site_for_cookies_ok();
  if (success)
    p_top_frame_origin_ok = input_data_view.top_frame_origin_ok();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        RestrictedCookieManager::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_site_for_cookies_ok), 
std::move(p_top_frame_origin_ok));
  return true;
}

void RestrictedCookieManager_SetCookieFromString_ProxyToResponder::Run(
    bool in_site_for_cookies_ok, bool in_top_frame_origin_ok) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply network::mojom::RestrictedCookieManager::SetCookieFromString", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("site_for_cookies_ok"), in_site_for_cookies_ok,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_frame_origin_ok"), in_top_frame_origin_ok,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_SetCookieFromString_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_SetCookieFromString_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->site_for_cookies_ok = in_site_for_cookies_ok;
  params->top_frame_origin_ok = in_top_frame_origin_ok;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("SetCookieFromString");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool RestrictedCookieManager_SetCookieFromString_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::RestrictedCookieManager_SetCookieFromString_ResponseParams_Data* params =
      reinterpret_cast<internal::RestrictedCookieManager_SetCookieFromString_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  bool p_site_for_cookies_ok{};
  bool p_top_frame_origin_ok{};
  RestrictedCookieManager_SetCookieFromString_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_site_for_cookies_ok = input_data_view.site_for_cookies_ok();
  if (success)
    p_top_frame_origin_ok = input_data_view.top_frame_origin_ok();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        RestrictedCookieManager::Name_, 3, true);
    return false;
  }
  *out_site_for_cookies_ok_ = std::move(p_site_for_cookies_ok);
  *out_top_frame_origin_ok_ = std::move(p_top_frame_origin_ok);
  *result_ = true;
  return true;
}
class RestrictedCookieManager_GetCookiesString_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static RestrictedCookieManager::GetCookiesStringCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<RestrictedCookieManager_GetCookiesString_ProxyToResponder> proxy(
        new RestrictedCookieManager_GetCookiesString_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&RestrictedCookieManager_GetCookiesString_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~RestrictedCookieManager_GetCookiesString_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  RestrictedCookieManager_GetCookiesString_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "RestrictedCookieManager::GetCookiesStringCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const WTF::String& in_cookies);
};

bool RestrictedCookieManager_GetCookiesString_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::RestrictedCookieManager_GetCookiesString_ResponseParams_Data* params =
      reinterpret_cast<
          internal::RestrictedCookieManager_GetCookiesString_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  WTF::String p_cookies{};
  RestrictedCookieManager_GetCookiesString_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadCookies(&p_cookies))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        RestrictedCookieManager::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_cookies));
  return true;
}

void RestrictedCookieManager_GetCookiesString_ProxyToResponder::Run(
    const WTF::String& in_cookies) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply network::mojom::RestrictedCookieManager::GetCookiesString", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cookies"), in_cookies,
                        "<value of type const WTF::String&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_GetCookiesString_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_GetCookiesString_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->cookies)::BaseType> cookies_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_cookies, cookies_fragment);
  params->cookies.Set(
      cookies_fragment.is_null() ? nullptr : cookies_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->cookies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null cookies in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("GetCookiesString");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool RestrictedCookieManager_GetCookiesString_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::RestrictedCookieManager_GetCookiesString_ResponseParams_Data* params =
      reinterpret_cast<internal::RestrictedCookieManager_GetCookiesString_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  WTF::String p_cookies{};
  RestrictedCookieManager_GetCookiesString_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadCookies(&p_cookies))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        RestrictedCookieManager::Name_, 4, true);
    return false;
  }
  *out_cookies_ = std::move(p_cookies);
  *result_ = true;
  return true;
}
class RestrictedCookieManager_CookiesEnabledFor_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static RestrictedCookieManager::CookiesEnabledForCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<RestrictedCookieManager_CookiesEnabledFor_ProxyToResponder> proxy(
        new RestrictedCookieManager_CookiesEnabledFor_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&RestrictedCookieManager_CookiesEnabledFor_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~RestrictedCookieManager_CookiesEnabledFor_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  RestrictedCookieManager_CookiesEnabledFor_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "RestrictedCookieManager::CookiesEnabledForCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_cookies_enabled);
};

bool RestrictedCookieManager_CookiesEnabledFor_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::RestrictedCookieManager_CookiesEnabledFor_ResponseParams_Data* params =
      reinterpret_cast<
          internal::RestrictedCookieManager_CookiesEnabledFor_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_cookies_enabled{};
  RestrictedCookieManager_CookiesEnabledFor_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_cookies_enabled = input_data_view.cookies_enabled();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        RestrictedCookieManager::Name_, 5, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_cookies_enabled));
  return true;
}

void RestrictedCookieManager_CookiesEnabledFor_ProxyToResponder::Run(
    bool in_cookies_enabled) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply network::mojom::RestrictedCookieManager::CookiesEnabledFor", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cookies_enabled"), in_cookies_enabled,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRestrictedCookieManager_CookiesEnabledFor_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::network::mojom::internal::RestrictedCookieManager_CookiesEnabledFor_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->cookies_enabled = in_cookies_enabled;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RestrictedCookieManager::Name_);
  message.set_method_name("CookiesEnabledFor");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool RestrictedCookieManager_CookiesEnabledFor_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::RestrictedCookieManager_CookiesEnabledFor_ResponseParams_Data* params =
      reinterpret_cast<internal::RestrictedCookieManager_CookiesEnabledFor_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  bool p_cookies_enabled{};
  RestrictedCookieManager_CookiesEnabledFor_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_cookies_enabled = input_data_view.cookies_enabled();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        RestrictedCookieManager::Name_, 5, true);
    return false;
  }
  *out_cookies_enabled_ = std::move(p_cookies_enabled);
  *result_ = true;
  return true;
}

// static
bool RestrictedCookieManagerStubDispatch::Accept(
    RestrictedCookieManager* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kRestrictedCookieManager_GetAllForUrl_Name: {
      break;
    }
    case internal::kRestrictedCookieManager_SetCanonicalCookie_Name: {
      break;
    }
    case internal::kRestrictedCookieManager_AddChangeListener_Name: {
      break;
    }
    case internal::kRestrictedCookieManager_SetCookieFromString_Name: {
      break;
    }
    case internal::kRestrictedCookieManager_GetCookiesString_Name: {
      break;
    }
    case internal::kRestrictedCookieManager_CookiesEnabledFor_Name: {
      break;
    }
    case internal::kRestrictedCookieManager_ConvertPartitionedCookiesToUnpartitioned_Name: {

      DCHECK(message->is_serialized());
      internal::RestrictedCookieManager_ConvertPartitionedCookiesToUnpartitioned_Params_Data* params =
          reinterpret_cast<internal::RestrictedCookieManager_ConvertPartitionedCookiesToUnpartitioned_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::KURL p_url{};
      RestrictedCookieManager_ConvertPartitionedCookiesToUnpartitioned_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RestrictedCookieManager::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ConvertPartitionedCookiesToUnpartitioned(
std::move(p_url));
      return true;
    }
  }
  return false;
}

// static
bool RestrictedCookieManagerStubDispatch::AcceptWithResponder(
    RestrictedCookieManager* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kRestrictedCookieManager_GetAllForUrl_Name: {

      internal::RestrictedCookieManager_GetAllForUrl_Params_Data* params =
          reinterpret_cast<
              internal::RestrictedCookieManager_GetAllForUrl_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::KURL p_url{};
      ::net::SiteForCookies p_site_for_cookies{};
      ::scoped_refptr<const ::blink::SecurityOrigin> p_top_frame_origin{};
      CookieManagerGetOptionsPtr p_options{};
      bool p_partitioned_cookies_runtime_feature_enabled{};
      RestrictedCookieManager_GetAllForUrl_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (success && !input_data_view.ReadSiteForCookies(&p_site_for_cookies))
        success = false;
      if (success && !input_data_view.ReadTopFrameOrigin(&p_top_frame_origin))
        success = false;
      if (success && !input_data_view.ReadOptions(&p_options))
        success = false;
      if (success)
        p_partitioned_cookies_runtime_feature_enabled = input_data_view.partitioned_cookies_runtime_feature_enabled();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RestrictedCookieManager::Name_, 0, false);
        return false;
      }
      RestrictedCookieManager::GetAllForUrlCallback callback =
          RestrictedCookieManager_GetAllForUrl_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetAllForUrl(
std::move(p_url), 
std::move(p_site_for_cookies), 
std::move(p_top_frame_origin), 
std::move(p_options), 
std::move(p_partitioned_cookies_runtime_feature_enabled), std::move(callback));
      return true;
    }
    case internal::kRestrictedCookieManager_SetCanonicalCookie_Name: {

      internal::RestrictedCookieManager_SetCanonicalCookie_Params_Data* params =
          reinterpret_cast<
              internal::RestrictedCookieManager_SetCanonicalCookie_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::net::CanonicalCookie p_cookie{};
      ::blink::KURL p_url{};
      ::net::SiteForCookies p_site_for_cookies{};
      ::scoped_refptr<const ::blink::SecurityOrigin> p_top_frame_origin{};
      ::net::CookieInclusionStatus p_status{};
      RestrictedCookieManager_SetCanonicalCookie_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadCookie(&p_cookie))
        success = false;
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (success && !input_data_view.ReadSiteForCookies(&p_site_for_cookies))
        success = false;
      if (success && !input_data_view.ReadTopFrameOrigin(&p_top_frame_origin))
        success = false;
      if (success && !input_data_view.ReadStatus(&p_status))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RestrictedCookieManager::Name_, 1, false);
        return false;
      }
      RestrictedCookieManager::SetCanonicalCookieCallback callback =
          RestrictedCookieManager_SetCanonicalCookie_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetCanonicalCookie(
std::move(p_cookie), 
std::move(p_url), 
std::move(p_site_for_cookies), 
std::move(p_top_frame_origin), 
std::move(p_status), std::move(callback));
      return true;
    }
    case internal::kRestrictedCookieManager_AddChangeListener_Name: {

      internal::RestrictedCookieManager_AddChangeListener_Params_Data* params =
          reinterpret_cast<
              internal::RestrictedCookieManager_AddChangeListener_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::KURL p_url{};
      ::net::SiteForCookies p_site_for_cookies{};
      ::scoped_refptr<const ::blink::SecurityOrigin> p_top_frame_origin{};
      ::mojo::PendingRemote<::network::mojom::blink::CookieChangeListener> p_listener{};
      RestrictedCookieManager_AddChangeListener_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (success && !input_data_view.ReadSiteForCookies(&p_site_for_cookies))
        success = false;
      if (success && !input_data_view.ReadTopFrameOrigin(&p_top_frame_origin))
        success = false;
      if (success) {
        p_listener =
            input_data_view.TakeListener<decltype(p_listener)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RestrictedCookieManager::Name_, 2, false);
        return false;
      }
      RestrictedCookieManager::AddChangeListenerCallback callback =
          RestrictedCookieManager_AddChangeListener_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddChangeListener(
std::move(p_url), 
std::move(p_site_for_cookies), 
std::move(p_top_frame_origin), 
std::move(p_listener), std::move(callback));
      return true;
    }
    case internal::kRestrictedCookieManager_SetCookieFromString_Name: {

      internal::RestrictedCookieManager_SetCookieFromString_Params_Data* params =
          reinterpret_cast<
              internal::RestrictedCookieManager_SetCookieFromString_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::KURL p_url{};
      ::net::SiteForCookies p_site_for_cookies{};
      ::scoped_refptr<const ::blink::SecurityOrigin> p_top_frame_origin{};
      WTF::String p_cookie{};
      bool p_partitioned_cookies_runtime_feature_enabled{};
      RestrictedCookieManager_SetCookieFromString_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (success && !input_data_view.ReadSiteForCookies(&p_site_for_cookies))
        success = false;
      if (success && !input_data_view.ReadTopFrameOrigin(&p_top_frame_origin))
        success = false;
      if (success && !input_data_view.ReadCookie(&p_cookie))
        success = false;
      if (success)
        p_partitioned_cookies_runtime_feature_enabled = input_data_view.partitioned_cookies_runtime_feature_enabled();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RestrictedCookieManager::Name_, 3, false);
        return false;
      }
      RestrictedCookieManager::SetCookieFromStringCallback callback =
          RestrictedCookieManager_SetCookieFromString_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetCookieFromString(
std::move(p_url), 
std::move(p_site_for_cookies), 
std::move(p_top_frame_origin), 
std::move(p_cookie), 
std::move(p_partitioned_cookies_runtime_feature_enabled), std::move(callback));
      return true;
    }
    case internal::kRestrictedCookieManager_GetCookiesString_Name: {

      internal::RestrictedCookieManager_GetCookiesString_Params_Data* params =
          reinterpret_cast<
              internal::RestrictedCookieManager_GetCookiesString_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::KURL p_url{};
      ::net::SiteForCookies p_site_for_cookies{};
      ::scoped_refptr<const ::blink::SecurityOrigin> p_top_frame_origin{};
      bool p_partitioned_cookies_runtime_feature_enabled{};
      RestrictedCookieManager_GetCookiesString_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (success && !input_data_view.ReadSiteForCookies(&p_site_for_cookies))
        success = false;
      if (success && !input_data_view.ReadTopFrameOrigin(&p_top_frame_origin))
        success = false;
      if (success)
        p_partitioned_cookies_runtime_feature_enabled = input_data_view.partitioned_cookies_runtime_feature_enabled();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RestrictedCookieManager::Name_, 4, false);
        return false;
      }
      RestrictedCookieManager::GetCookiesStringCallback callback =
          RestrictedCookieManager_GetCookiesString_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetCookiesString(
std::move(p_url), 
std::move(p_site_for_cookies), 
std::move(p_top_frame_origin), 
std::move(p_partitioned_cookies_runtime_feature_enabled), std::move(callback));
      return true;
    }
    case internal::kRestrictedCookieManager_CookiesEnabledFor_Name: {

      internal::RestrictedCookieManager_CookiesEnabledFor_Params_Data* params =
          reinterpret_cast<
              internal::RestrictedCookieManager_CookiesEnabledFor_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::KURL p_url{};
      ::net::SiteForCookies p_site_for_cookies{};
      ::scoped_refptr<const ::blink::SecurityOrigin> p_top_frame_origin{};
      RestrictedCookieManager_CookiesEnabledFor_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (success && !input_data_view.ReadSiteForCookies(&p_site_for_cookies))
        success = false;
      if (success && !input_data_view.ReadTopFrameOrigin(&p_top_frame_origin))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RestrictedCookieManager::Name_, 5, false);
        return false;
      }
      RestrictedCookieManager::CookiesEnabledForCallback callback =
          RestrictedCookieManager_CookiesEnabledFor_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CookiesEnabledFor(
std::move(p_url), 
std::move(p_site_for_cookies), 
std::move(p_top_frame_origin), std::move(callback));
      return true;
    }
    case internal::kRestrictedCookieManager_ConvertPartitionedCookiesToUnpartitioned_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kRestrictedCookieManagerValidationInfo[] = {
    {&internal::RestrictedCookieManager_GetAllForUrl_Params_Data::Validate,
     &internal::RestrictedCookieManager_GetAllForUrl_ResponseParams_Data::Validate},
    {&internal::RestrictedCookieManager_SetCanonicalCookie_Params_Data::Validate,
     &internal::RestrictedCookieManager_SetCanonicalCookie_ResponseParams_Data::Validate},
    {&internal::RestrictedCookieManager_AddChangeListener_Params_Data::Validate,
     &internal::RestrictedCookieManager_AddChangeListener_ResponseParams_Data::Validate},
    {&internal::RestrictedCookieManager_SetCookieFromString_Params_Data::Validate,
     &internal::RestrictedCookieManager_SetCookieFromString_ResponseParams_Data::Validate},
    {&internal::RestrictedCookieManager_GetCookiesString_Params_Data::Validate,
     &internal::RestrictedCookieManager_GetCookiesString_ResponseParams_Data::Validate},
    {&internal::RestrictedCookieManager_CookiesEnabledFor_Params_Data::Validate,
     &internal::RestrictedCookieManager_CookiesEnabledFor_ResponseParams_Data::Validate},
    {&internal::RestrictedCookieManager_ConvertPartitionedCookiesToUnpartitioned_Params_Data::Validate,
     nullptr /* no response */},
};

bool RestrictedCookieManagerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::network::mojom::blink::RestrictedCookieManager::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kRestrictedCookieManagerValidationInfo);
}

bool RestrictedCookieManagerResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::network::mojom::blink::RestrictedCookieManager::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kRestrictedCookieManagerValidationInfo);
}


}  // namespace blink
}  // namespace mojom
}  // namespace network


namespace mojo {


// static
bool StructTraits<::network::mojom::blink::CookieManagerGetOptions::DataView, ::network::mojom::blink::CookieManagerGetOptionsPtr>::Read(
    ::network::mojom::blink::CookieManagerGetOptions::DataView input,
    ::network::mojom::blink::CookieManagerGetOptionsPtr* output) {
  bool success = true;
  ::network::mojom::blink::CookieManagerGetOptionsPtr result(::network::mojom::blink::CookieManagerGetOptions::New());
  
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadMatchType(&result->match_type))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace network {
namespace mojom {
namespace blink {


void RestrictedCookieManagerInterceptorForTesting::GetAllForUrl(const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, CookieManagerGetOptionsPtr options, bool partitioned_cookies_runtime_feature_enabled, GetAllForUrlCallback callback) {
  GetForwardingInterface()->GetAllForUrl(std::move(url), std::move(site_for_cookies), std::move(top_frame_origin), std::move(options), std::move(partitioned_cookies_runtime_feature_enabled), std::move(callback));
}
void RestrictedCookieManagerInterceptorForTesting::SetCanonicalCookie(const ::net::CanonicalCookie& cookie, const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, ::net::CookieInclusionStatus status, SetCanonicalCookieCallback callback) {
  GetForwardingInterface()->SetCanonicalCookie(std::move(cookie), std::move(url), std::move(site_for_cookies), std::move(top_frame_origin), std::move(status), std::move(callback));
}
void RestrictedCookieManagerInterceptorForTesting::AddChangeListener(const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, ::mojo::PendingRemote<::network::mojom::blink::CookieChangeListener> listener, AddChangeListenerCallback callback) {
  GetForwardingInterface()->AddChangeListener(std::move(url), std::move(site_for_cookies), std::move(top_frame_origin), std::move(listener), std::move(callback));
}
void RestrictedCookieManagerInterceptorForTesting::SetCookieFromString(const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, const WTF::String& cookie, bool partitioned_cookies_runtime_feature_enabled, SetCookieFromStringCallback callback) {
  GetForwardingInterface()->SetCookieFromString(std::move(url), std::move(site_for_cookies), std::move(top_frame_origin), std::move(cookie), std::move(partitioned_cookies_runtime_feature_enabled), std::move(callback));
}
void RestrictedCookieManagerInterceptorForTesting::GetCookiesString(const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, bool partitioned_cookies_runtime_feature_enabled, GetCookiesStringCallback callback) {
  GetForwardingInterface()->GetCookiesString(std::move(url), std::move(site_for_cookies), std::move(top_frame_origin), std::move(partitioned_cookies_runtime_feature_enabled), std::move(callback));
}
void RestrictedCookieManagerInterceptorForTesting::CookiesEnabledFor(const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, CookiesEnabledForCallback callback) {
  GetForwardingInterface()->CookiesEnabledFor(std::move(url), std::move(site_for_cookies), std::move(top_frame_origin), std::move(callback));
}
void RestrictedCookieManagerInterceptorForTesting::ConvertPartitionedCookiesToUnpartitioned(const ::blink::KURL& url) {
  GetForwardingInterface()->ConvertPartitionedCookiesToUnpartitioned(std::move(url));
}
RestrictedCookieManagerAsyncWaiter::RestrictedCookieManagerAsyncWaiter(
    RestrictedCookieManager* proxy) : proxy_(proxy) {}

RestrictedCookieManagerAsyncWaiter::~RestrictedCookieManagerAsyncWaiter() = default;

void RestrictedCookieManagerAsyncWaiter::GetAllForUrl(
    const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, CookieManagerGetOptionsPtr options, bool partitioned_cookies_runtime_feature_enabled, WTF::Vector<::network::mojom::blink::CookieWithAccessResultPtr>* out_cookies) {
  base::RunLoop loop;
  proxy_->GetAllForUrl(std::move(url),std::move(site_for_cookies),std::move(top_frame_origin),std::move(options),std::move(partitioned_cookies_runtime_feature_enabled),
      base::BindOnce(
          [](base::RunLoop* loop,
             WTF::Vector<::network::mojom::blink::CookieWithAccessResultPtr>* out_cookies
,
             WTF::Vector<::network::mojom::blink::CookieWithAccessResultPtr> cookies) {*out_cookies = std::move(cookies);
            loop->Quit();
          },
          &loop,
          out_cookies));
  loop.Run();
}
void RestrictedCookieManagerAsyncWaiter::SetCanonicalCookie(
    const ::net::CanonicalCookie& cookie, const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, ::net::CookieInclusionStatus status, bool* out_success) {
  base::RunLoop loop;
  proxy_->SetCanonicalCookie(std::move(cookie),std::move(url),std::move(site_for_cookies),std::move(top_frame_origin),std::move(status),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void RestrictedCookieManagerAsyncWaiter::AddChangeListener(
    const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, ::mojo::PendingRemote<::network::mojom::blink::CookieChangeListener> listener) {
  base::RunLoop loop;
  proxy_->AddChangeListener(std::move(url),std::move(site_for_cookies),std::move(top_frame_origin),std::move(listener),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void RestrictedCookieManagerAsyncWaiter::SetCookieFromString(
    const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, const WTF::String& cookie, bool partitioned_cookies_runtime_feature_enabled, bool* out_site_for_cookies_ok, bool* out_top_frame_origin_ok) {
  base::RunLoop loop;
  proxy_->SetCookieFromString(std::move(url),std::move(site_for_cookies),std::move(top_frame_origin),std::move(cookie),std::move(partitioned_cookies_runtime_feature_enabled),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_site_for_cookies_ok
,
             bool* out_top_frame_origin_ok
,
             bool site_for_cookies_ok,
             bool top_frame_origin_ok) {*out_site_for_cookies_ok = std::move(site_for_cookies_ok);*out_top_frame_origin_ok = std::move(top_frame_origin_ok);
            loop->Quit();
          },
          &loop,
          out_site_for_cookies_ok,
          out_top_frame_origin_ok));
  loop.Run();
}
void RestrictedCookieManagerAsyncWaiter::GetCookiesString(
    const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, bool partitioned_cookies_runtime_feature_enabled, WTF::String* out_cookies) {
  base::RunLoop loop;
  proxy_->GetCookiesString(std::move(url),std::move(site_for_cookies),std::move(top_frame_origin),std::move(partitioned_cookies_runtime_feature_enabled),
      base::BindOnce(
          [](base::RunLoop* loop,
             WTF::String* out_cookies
,
             const WTF::String& cookies) {*out_cookies = std::move(cookies);
            loop->Quit();
          },
          &loop,
          out_cookies));
  loop.Run();
}
void RestrictedCookieManagerAsyncWaiter::CookiesEnabledFor(
    const ::blink::KURL& url, const ::net::SiteForCookies& site_for_cookies, const ::scoped_refptr<const ::blink::SecurityOrigin>& top_frame_origin, bool* out_cookies_enabled) {
  base::RunLoop loop;
  proxy_->CookiesEnabledFor(std::move(url),std::move(site_for_cookies),std::move(top_frame_origin),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_cookies_enabled
,
             bool cookies_enabled) {*out_cookies_enabled = std::move(cookies_enabled);
            loop->Quit();
          },
          &loop,
          out_cookies_enabled));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace network


#if defined(__clang__)
#pragma clang diagnostic pop
#endif