// services/network/public/mojom/first_party_sets.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/network/public/mojom/first_party_sets.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('network.mojom');
  var schemeful_site$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/schemeful_site.mojom', 'schemeful_site.mojom.js');
  }


  var SiteType = {};
  SiteType.kPrimary = 0;
  SiteType.kAssociated = 1;
  SiteType.MIN_VALUE = 0;
  SiteType.MAX_VALUE = 1;

  SiteType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  SiteType.toKnownEnumValue = function(value) {
    return value;
  };

  SiteType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var SamePartyCookieContextType = {};
  SamePartyCookieContextType.kCrossParty = 0;
  SamePartyCookieContextType.kSameParty = 1;
  SamePartyCookieContextType.MIN_VALUE = 0;
  SamePartyCookieContextType.MAX_VALUE = 1;

  SamePartyCookieContextType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  SamePartyCookieContextType.toKnownEnumValue = function(value) {
    return value;
  };

  SamePartyCookieContextType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function SiteIndex(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SiteIndex.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  SiteIndex.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SiteIndex.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SiteIndex.encodedSize = codec.kStructHeaderSize + 8;

  SiteIndex.decode = function(decoder) {
    var packed;
    var val = new SiteIndex();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SiteIndex.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SiteIndex.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FirstPartySetEntry(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FirstPartySetEntry.prototype.initDefaults_ = function() {
    this.primary = null;
    this.siteType = 0;
    this.siteIndex = null;
  };
  FirstPartySetEntry.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FirstPartySetEntry.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FirstPartySetEntry.primary
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, schemeful_site$.SchemefulSite, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FirstPartySetEntry.siteType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, SiteType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FirstPartySetEntry.siteIndex
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, SiteIndex, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FirstPartySetEntry.encodedSize = codec.kStructHeaderSize + 24;

  FirstPartySetEntry.decode = function(decoder) {
    var packed;
    var val = new FirstPartySetEntry();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.primary =
        decoder.decodeStructPointer(schemeful_site$.SchemefulSite);
    val.siteType =
        decoder.decodeStruct(new codec.Enum(SiteType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.siteIndex =
        decoder.decodeStructPointer(SiteIndex);
    return val;
  };

  FirstPartySetEntry.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FirstPartySetEntry.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(schemeful_site$.SchemefulSite, val.primary);
    encoder.encodeStruct(codec.Int32, val.siteType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(SiteIndex, val.siteIndex);
  };
  function SamePartyContext(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SamePartyContext.prototype.initDefaults_ = function() {
    this.contextType = SamePartyCookieContextType.kCrossParty;
  };
  SamePartyContext.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SamePartyContext.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SamePartyContext.contextType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, SamePartyCookieContextType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SamePartyContext.encodedSize = codec.kStructHeaderSize + 8;

  SamePartyContext.decode = function(decoder) {
    var packed;
    var val = new SamePartyContext();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.contextType =
        decoder.decodeStruct(new codec.Enum(SamePartyCookieContextType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SamePartyContext.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SamePartyContext.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.contextType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FirstPartySetMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FirstPartySetMetadata.prototype.initDefaults_ = function() {
    this.context = null;
    this.frameEntry = null;
    this.topFrameEntry = null;
  };
  FirstPartySetMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FirstPartySetMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FirstPartySetMetadata.context
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SamePartyContext, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FirstPartySetMetadata.frameEntry
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, FirstPartySetEntry, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FirstPartySetMetadata.topFrameEntry
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, FirstPartySetEntry, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FirstPartySetMetadata.encodedSize = codec.kStructHeaderSize + 24;

  FirstPartySetMetadata.decode = function(decoder) {
    var packed;
    var val = new FirstPartySetMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.context =
        decoder.decodeStructPointer(SamePartyContext);
    val.frameEntry =
        decoder.decodeStructPointer(FirstPartySetEntry);
    val.topFrameEntry =
        decoder.decodeStructPointer(FirstPartySetEntry);
    return val;
  };

  FirstPartySetMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FirstPartySetMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SamePartyContext, val.context);
    encoder.encodeStructPointer(FirstPartySetEntry, val.frameEntry);
    encoder.encodeStructPointer(FirstPartySetEntry, val.topFrameEntry);
  };
  exports.SiteType = SiteType;
  exports.SamePartyCookieContextType = SamePartyCookieContextType;
  exports.SiteIndex = SiteIndex;
  exports.FirstPartySetEntry = FirstPartySetEntry;
  exports.SamePartyContext = SamePartyContext;
  exports.FirstPartySetMetadata = FirstPartySetMetadata;
})();