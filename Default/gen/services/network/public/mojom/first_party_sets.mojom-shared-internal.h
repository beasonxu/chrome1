// services/network/public/mojom/first_party_sets.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_FIRST_PARTY_SETS_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_FIRST_PARTY_SETS_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "services/network/public/mojom/schemeful_site.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace network {
namespace mojom {
namespace internal {
class SiteIndex_Data;
class FirstPartySetEntry_Data;
class SamePartyContext_Data;
class FirstPartySetMetadata_Data;

struct SiteType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct SamePartyCookieContextType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class  SiteIndex_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SiteIndex_Data>;

  SiteIndex_Data();
  ~SiteIndex_Data() = delete;
};
static_assert(sizeof(SiteIndex_Data) == 16,
              "Bad sizeof(SiteIndex_Data)");
// Used by SiteIndex::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SiteIndex_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SiteIndex_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SiteIndex_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SiteIndex_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SiteIndex_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  FirstPartySetEntry_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::SchemefulSite_Data> primary;
  int32_t site_type;
  uint8_t pad1_[4];
  mojo::internal::Pointer<internal::SiteIndex_Data> site_index;

 private:
  friend class mojo::internal::MessageFragment<FirstPartySetEntry_Data>;

  FirstPartySetEntry_Data();
  ~FirstPartySetEntry_Data() = delete;
};
static_assert(sizeof(FirstPartySetEntry_Data) == 32,
              "Bad sizeof(FirstPartySetEntry_Data)");
// Used by FirstPartySetEntry::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FirstPartySetEntry_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FirstPartySetEntry_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FirstPartySetEntry_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<FirstPartySetEntry_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FirstPartySetEntry_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SamePartyContext_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t context_type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SamePartyContext_Data>;

  SamePartyContext_Data();
  ~SamePartyContext_Data() = delete;
};
static_assert(sizeof(SamePartyContext_Data) == 16,
              "Bad sizeof(SamePartyContext_Data)");
// Used by SamePartyContext::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SamePartyContext_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SamePartyContext_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SamePartyContext_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SamePartyContext_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SamePartyContext_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  FirstPartySetMetadata_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SamePartyContext_Data> context;
  mojo::internal::Pointer<internal::FirstPartySetEntry_Data> frame_entry;
  mojo::internal::Pointer<internal::FirstPartySetEntry_Data> top_frame_entry;

 private:
  friend class mojo::internal::MessageFragment<FirstPartySetMetadata_Data>;

  FirstPartySetMetadata_Data();
  ~FirstPartySetMetadata_Data() = delete;
};
static_assert(sizeof(FirstPartySetMetadata_Data) == 32,
              "Bad sizeof(FirstPartySetMetadata_Data)");
// Used by FirstPartySetMetadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FirstPartySetMetadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FirstPartySetMetadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FirstPartySetMetadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<FirstPartySetMetadata_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FirstPartySetMetadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_FIRST_PARTY_SETS_MOJOM_SHARED_INTERNAL_H_