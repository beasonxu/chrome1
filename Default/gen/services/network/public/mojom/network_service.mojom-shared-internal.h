// services/network/public/mojom/network_service.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/byte_string.mojom-shared-internal.h"
#include "mojo/public/mojom/base/file.mojom-shared-internal.h"
#include "mojo/public/mojom/base/file_path.mojom-shared-internal.h"
#include "mojo/public/mojom/base/memory_pressure_level.mojom-shared-internal.h"
#include "mojo/public/mojom/base/read_only_buffer.mojom-shared-internal.h"
#include "mojo/public/mojom/base/read_only_file.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared-internal.h"
#include "mojo/public/mojom/base/values.mojom-shared-internal.h"
#include "sandbox/policy/mojom/context.mojom-shared-internal.h"
#include "sandbox/policy/mojom/sandbox.mojom-shared-internal.h"
#include "services/network/public/mojom/first_party_sets.mojom-shared-internal.h"
#include "services/network/public/mojom/host_resolver.mojom-shared-internal.h"
#include "services/network/public/mojom/http_raw_headers.mojom-shared-internal.h"
#include "services/network/public/mojom/key_pinning.mojom-shared-internal.h"
#include "services/network/public/mojom/mutable_network_traffic_annotation_tag.mojom-shared-internal.h"
#include "services/network/public/mojom/net_log.mojom-shared-internal.h"
#include "services/network/public/mojom/network_change_manager.mojom-shared-internal.h"
#include "services/network/public/mojom/network_context.mojom-shared-internal.h"
#include "services/network/public/mojom/ip_address_space.mojom-shared-internal.h"
#include "services/network/public/mojom/network_interface.mojom-shared-internal.h"
#include "services/network/public/mojom/network_param.mojom-shared-internal.h"
#include "services/network/public/mojom/network_quality_estimator_manager.mojom-shared-internal.h"
#include "services/network/public/mojom/network_service_test.mojom-shared-internal.h"
#include "services/network/public/mojom/schemeful_site.mojom-shared-internal.h"
#include "services/network/public/mojom/trust_tokens.mojom-shared-internal.h"
#include "services/network/public/mojom/parsed_headers.mojom-shared-internal.h"
#include "services/network/public/mojom/url_loader_network_service_observer.mojom-shared-internal.h"
#include "services/network/public/mojom/url_request.mojom-shared-internal.h"
#include "services/network/public/mojom/url_response_head.mojom-shared-internal.h"
#include "services/network/public/mojom/client_security_state.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/mojom/base/application_state.mojom-shared-internal.h"
#include "services/network/public/mojom/ct_log_info.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace network {
namespace mojom {
namespace internal {
class HttpAuthStaticParams_Data;
class HttpAuthDynamicParams_Data;
class EnvironmentVariable_Data;
class NetworkServiceParams_Data;
class SCTAuditingConfiguration_Data;

#pragma pack(push, 1)
class  HttpAuthStaticParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> gssapi_library_name;

 private:
  friend class mojo::internal::MessageFragment<HttpAuthStaticParams_Data>;

  HttpAuthStaticParams_Data();
  ~HttpAuthStaticParams_Data() = delete;
};
static_assert(sizeof(HttpAuthStaticParams_Data) == 16,
              "Bad sizeof(HttpAuthStaticParams_Data)");
// Used by HttpAuthStaticParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct HttpAuthStaticParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  HttpAuthStaticParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~HttpAuthStaticParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<HttpAuthStaticParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    HttpAuthStaticParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  HttpAuthDynamicParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> allowed_schemes;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> patterns_allowed_to_use_all_schemes;
  mojo::internal::Pointer<mojo::internal::String_Data> server_allowlist;
  mojo::internal::Pointer<mojo::internal::String_Data> delegate_allowlist;
  uint8_t delegate_by_kdc_policy : 1;
  uint8_t negotiate_disable_cname_lookup : 1;
  uint8_t enable_negotiate_port : 1;
  uint8_t ntlm_v2_enabled : 1;
  uint8_t allow_gssapi_library_load : 1;
  uint8_t basic_over_http_enabled : 1;
  uint8_t pad9_[7];
  mojo::internal::Pointer<mojo::internal::String_Data> android_negotiate_account_type;

 private:
  friend class mojo::internal::MessageFragment<HttpAuthDynamicParams_Data>;

  HttpAuthDynamicParams_Data();
  ~HttpAuthDynamicParams_Data() = delete;
};
static_assert(sizeof(HttpAuthDynamicParams_Data) == 56,
              "Bad sizeof(HttpAuthDynamicParams_Data)");
// Used by HttpAuthDynamicParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct HttpAuthDynamicParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  HttpAuthDynamicParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~HttpAuthDynamicParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<HttpAuthDynamicParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    HttpAuthDynamicParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  EnvironmentVariable_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<mojo::internal::String_Data> value;

 private:
  friend class mojo::internal::MessageFragment<EnvironmentVariable_Data>;

  EnvironmentVariable_Data();
  ~EnvironmentVariable_Data() = delete;
};
static_assert(sizeof(EnvironmentVariable_Data) == 24,
              "Bad sizeof(EnvironmentVariable_Data)");
// Used by EnvironmentVariable::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct EnvironmentVariable_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  EnvironmentVariable_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~EnvironmentVariable_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<EnvironmentVariable_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    EnvironmentVariable_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  NetworkServiceParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t initial_connection_type;
  int32_t initial_connection_subtype;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::EnvironmentVariable_Data>>> environment;
  mojo::internal::Interface_Data default_observer;
  uint8_t first_party_sets_enabled : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkServiceParams_Data>;

  NetworkServiceParams_Data();
  ~NetworkServiceParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceParams_Data) == 40,
              "Bad sizeof(NetworkServiceParams_Data)");
// Used by NetworkServiceParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct NetworkServiceParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  NetworkServiceParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~NetworkServiceParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<NetworkServiceParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    NetworkServiceParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SCTAuditingConfiguration_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  double sampling_rate;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> log_expected_ingestion_delay;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> log_max_ingestion_random_delay;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> report_uri;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> hashdance_lookup_uri;
  mojo::internal::Pointer<::network::mojom::internal::MutableNetworkTrafficAnnotationTag_Data> traffic_annotation;
  mojo::internal::Pointer<::network::mojom::internal::MutableNetworkTrafficAnnotationTag_Data> hashdance_traffic_annotation;

 private:
  friend class mojo::internal::MessageFragment<SCTAuditingConfiguration_Data>;

  SCTAuditingConfiguration_Data();
  ~SCTAuditingConfiguration_Data() = delete;
};
static_assert(sizeof(SCTAuditingConfiguration_Data) == 64,
              "Bad sizeof(SCTAuditingConfiguration_Data)");
// Used by SCTAuditingConfiguration::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SCTAuditingConfiguration_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SCTAuditingConfiguration_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SCTAuditingConfiguration_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SCTAuditingConfiguration_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SCTAuditingConfiguration_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_SHARED_INTERNAL_H_