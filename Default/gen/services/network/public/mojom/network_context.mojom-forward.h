// services/network/public/mojom/network_context.mojom-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CONTEXT_MOJOM_FORWARD_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CONTEXT_MOJOM_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"

#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"


#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"






namespace network {
namespace mojom {
class CustomProxyConfigDataView;

class CertVerifierServiceRemoteParamsDataView;

class HttpAuthStaticNetworkContextParamsDataView;

class CTPolicyDataView;

class NetworkContextFilePathsDataView;

class NetworkContextParamsDataView;

class NetworkConditionsDataView;

class ClearDataFilterDataView;

class SignedExchangeReportDataView;

class URLLoaderFactoryOverrideDataView;

class URLLoaderFactoryParamsDataView;


enum class TrustTokenRedemptionPolicy : int32_t;

enum class SCTAuditingMode : int32_t;

enum class ClearDataFilter_Type : int32_t;

enum class NetworkContext_DomainReliabilityClearMode : int32_t;

constexpr uint32_t kWebSocketOptionNone = 0U;

constexpr uint32_t kWebSocketOptionBlockAllCookies = 1U;

constexpr uint32_t kWebSocketOptionBlockThirdPartyCookies = 2U;

constexpr int32_t kBrowserProcessId = 0;

constexpr int32_t kInvalidProcessId = -1;
class CustomProxyConfig;
using CustomProxyConfigPtr = mojo::StructPtr<CustomProxyConfig>;

class CertVerifierServiceRemoteParams;
using CertVerifierServiceRemoteParamsPtr = mojo::StructPtr<CertVerifierServiceRemoteParams>;

class HttpAuthStaticNetworkContextParams;
using HttpAuthStaticNetworkContextParamsPtr = mojo::InlinedStructPtr<HttpAuthStaticNetworkContextParams>;

class CTPolicy;
using CTPolicyPtr = mojo::StructPtr<CTPolicy>;

class NetworkContextFilePaths;
using NetworkContextFilePathsPtr = mojo::StructPtr<NetworkContextFilePaths>;

class NetworkContextParams;
using NetworkContextParamsPtr = mojo::StructPtr<NetworkContextParams>;

class NetworkConditions;
using NetworkConditionsPtr = mojo::StructPtr<NetworkConditions>;

class ClearDataFilter;
using ClearDataFilterPtr = mojo::StructPtr<ClearDataFilter>;

class SignedExchangeReport;
using SignedExchangeReportPtr = mojo::StructPtr<SignedExchangeReport>;

class URLLoaderFactoryOverride;
using URLLoaderFactoryOverridePtr = mojo::StructPtr<URLLoaderFactoryOverride>;

class URLLoaderFactoryParams;
using URLLoaderFactoryParamsPtr = mojo::StructPtr<URLLoaderFactoryParams>;

class CustomProxyConnectionObserver;

class CustomProxyConfigClient;

class TrustedHeaderClient;

class TrustedURLLoaderHeaderClient;

class NetworkContextClient;

class NetworkContext;




}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CONTEXT_MOJOM_FORWARD_H_