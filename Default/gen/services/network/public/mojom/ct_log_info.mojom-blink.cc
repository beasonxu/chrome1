// services/network/public/mojom/ct_log_info.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/network/public/mojom/ct_log_info.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/network/public/mojom/ct_log_info.mojom-params-data.h"
#include "services/network/public/mojom/ct_log_info.mojom-shared-message-ids.h"

#include "services/network/public/mojom/ct_log_info.mojom-blink-import-headers.h"
#include "services/network/public/mojom/ct_log_info.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_CT_LOG_INFO_MOJOM_BLINK_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_CT_LOG_INFO_MOJOM_BLINK_JUMBO_H_
#endif



namespace network {
namespace mojom {
namespace blink {
PreviousOperatorEntry::PreviousOperatorEntry()
    : name(),
      end_time() {}

PreviousOperatorEntry::PreviousOperatorEntry(
    const WTF::String& name_in,
    ::base::Time end_time_in)
    : name(std::move(name_in)),
      end_time(std::move(end_time_in)) {}

PreviousOperatorEntry::~PreviousOperatorEntry() = default;

void PreviousOperatorEntry::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "end_time"), this->end_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::Time>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool PreviousOperatorEntry::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CTLogInfo::CTLogInfo()
    : id(),
      public_key(),
      name(),
      operated_by_google(false),
      disqualified_at(),
      mmd(),
      current_operator(),
      previous_operators() {}

CTLogInfo::CTLogInfo(
    const WTF::String& id_in,
    const WTF::String& public_key_in,
    const WTF::String& name_in,
    bool operated_by_google_in,
    absl::optional<::base::Time> disqualified_at_in,
    ::base::TimeDelta mmd_in,
    const WTF::String& current_operator_in,
    WTF::Vector<PreviousOperatorEntryPtr> previous_operators_in)
    : id(std::move(id_in)),
      public_key(std::move(public_key_in)),
      name(std::move(name_in)),
      operated_by_google(std::move(operated_by_google_in)),
      disqualified_at(std::move(disqualified_at_in)),
      mmd(std::move(mmd_in)),
      current_operator(std::move(current_operator_in)),
      previous_operators(std::move(previous_operators_in)) {}

CTLogInfo::~CTLogInfo() = default;

void CTLogInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "id"), this->id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "public_key"), this->public_key,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "operated_by_google"), this->operated_by_google,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "disqualified_at"), this->disqualified_at,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type absl::optional<::base::Time>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "mmd"), this->mmd,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "current_operator"), this->current_operator,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "previous_operators"), this->previous_operators,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type WTF::Vector<PreviousOperatorEntryPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool CTLogInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace blink
}  // namespace mojom
}  // namespace network


namespace mojo {


// static
bool StructTraits<::network::mojom::blink::PreviousOperatorEntry::DataView, ::network::mojom::blink::PreviousOperatorEntryPtr>::Read(
    ::network::mojom::blink::PreviousOperatorEntry::DataView input,
    ::network::mojom::blink::PreviousOperatorEntryPtr* output) {
  bool success = true;
  ::network::mojom::blink::PreviousOperatorEntryPtr result(::network::mojom::blink::PreviousOperatorEntry::New());
  
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadEndTime(&result->end_time))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::blink::CTLogInfo::DataView, ::network::mojom::blink::CTLogInfoPtr>::Read(
    ::network::mojom::blink::CTLogInfo::DataView input,
    ::network::mojom::blink::CTLogInfoPtr* output) {
  bool success = true;
  ::network::mojom::blink::CTLogInfoPtr result(::network::mojom::blink::CTLogInfo::New());
  
      if (success && !input.ReadId(&result->id))
        success = false;
      if (success && !input.ReadPublicKey(&result->public_key))
        success = false;
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success)
        result->operated_by_google = input.operated_by_google();
      if (success && !input.ReadDisqualifiedAt(&result->disqualified_at))
        success = false;
      if (success && !input.ReadMmd(&result->mmd))
        success = false;
      if (success && !input.ReadCurrentOperator(&result->current_operator))
        success = false;
      if (success && !input.ReadPreviousOperators(&result->previous_operators))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace network {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace network


#if defined(__clang__)
#pragma clang diagnostic pop
#endif