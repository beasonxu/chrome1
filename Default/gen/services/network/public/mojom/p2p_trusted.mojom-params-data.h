// services/network/public/mojom/p2p_trusted.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_P2P_TRUSTED_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_P2P_TRUSTED_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {

class ValidationContext;
class  P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_Params_Data>;

  P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_Params_Data();
  ~P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_Params_Data() = delete;
};
static_assert(sizeof(P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_Params_Data) == 8,
              "Bad sizeof(P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_Params_Data)");
class  P2PTrustedSocketManagerClient_DumpPacket_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> packet_header;
  uint64_t packet_length;
  uint8_t incoming : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<P2PTrustedSocketManagerClient_DumpPacket_Params_Data>;

  P2PTrustedSocketManagerClient_DumpPacket_Params_Data();
  ~P2PTrustedSocketManagerClient_DumpPacket_Params_Data() = delete;
};
static_assert(sizeof(P2PTrustedSocketManagerClient_DumpPacket_Params_Data) == 32,
              "Bad sizeof(P2PTrustedSocketManagerClient_DumpPacket_Params_Data)");
class  P2PTrustedSocketManager_StartRtpDump_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t incoming : 1;
  uint8_t outgoing : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<P2PTrustedSocketManager_StartRtpDump_Params_Data>;

  P2PTrustedSocketManager_StartRtpDump_Params_Data();
  ~P2PTrustedSocketManager_StartRtpDump_Params_Data() = delete;
};
static_assert(sizeof(P2PTrustedSocketManager_StartRtpDump_Params_Data) == 16,
              "Bad sizeof(P2PTrustedSocketManager_StartRtpDump_Params_Data)");
class  P2PTrustedSocketManager_StopRtpDump_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t incoming : 1;
  uint8_t outgoing : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<P2PTrustedSocketManager_StopRtpDump_Params_Data>;

  P2PTrustedSocketManager_StopRtpDump_Params_Data();
  ~P2PTrustedSocketManager_StopRtpDump_Params_Data() = delete;
};
static_assert(sizeof(P2PTrustedSocketManager_StopRtpDump_Params_Data) == 16,
              "Bad sizeof(P2PTrustedSocketManager_StopRtpDump_Params_Data)");
class  P2PTrustedSocketManager_PauseNetworkChangeNotifications_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<P2PTrustedSocketManager_PauseNetworkChangeNotifications_Params_Data>;

  P2PTrustedSocketManager_PauseNetworkChangeNotifications_Params_Data();
  ~P2PTrustedSocketManager_PauseNetworkChangeNotifications_Params_Data() = delete;
};
static_assert(sizeof(P2PTrustedSocketManager_PauseNetworkChangeNotifications_Params_Data) == 8,
              "Bad sizeof(P2PTrustedSocketManager_PauseNetworkChangeNotifications_Params_Data)");
class  P2PTrustedSocketManager_ResumeNetworkChangeNotifications_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<P2PTrustedSocketManager_ResumeNetworkChangeNotifications_Params_Data>;

  P2PTrustedSocketManager_ResumeNetworkChangeNotifications_Params_Data();
  ~P2PTrustedSocketManager_ResumeNetworkChangeNotifications_Params_Data() = delete;
};
static_assert(sizeof(P2PTrustedSocketManager_ResumeNetworkChangeNotifications_Params_Data) == 8,
              "Bad sizeof(P2PTrustedSocketManager_ResumeNetworkChangeNotifications_Params_Data)");

}  // namespace internal


class P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_ParamsDataView {
 public:
  P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_ParamsDataView() = default;

  P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_ParamsDataView(
      internal::P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_Params_Data* data_ = nullptr;
};



class P2PTrustedSocketManagerClient_DumpPacket_ParamsDataView {
 public:
  P2PTrustedSocketManagerClient_DumpPacket_ParamsDataView() = default;

  P2PTrustedSocketManagerClient_DumpPacket_ParamsDataView(
      internal::P2PTrustedSocketManagerClient_DumpPacket_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPacketHeaderDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPacketHeader(UserType* output) {
    
    auto* pointer = data_->packet_header.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
  uint64_t packet_length() const {
    return data_->packet_length;
  }
  bool incoming() const {
    return data_->incoming;
  }
 private:
  internal::P2PTrustedSocketManagerClient_DumpPacket_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class P2PTrustedSocketManager_StartRtpDump_ParamsDataView {
 public:
  P2PTrustedSocketManager_StartRtpDump_ParamsDataView() = default;

  P2PTrustedSocketManager_StartRtpDump_ParamsDataView(
      internal::P2PTrustedSocketManager_StartRtpDump_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool incoming() const {
    return data_->incoming;
  }
  bool outgoing() const {
    return data_->outgoing;
  }
 private:
  internal::P2PTrustedSocketManager_StartRtpDump_Params_Data* data_ = nullptr;
};



class P2PTrustedSocketManager_StopRtpDump_ParamsDataView {
 public:
  P2PTrustedSocketManager_StopRtpDump_ParamsDataView() = default;

  P2PTrustedSocketManager_StopRtpDump_ParamsDataView(
      internal::P2PTrustedSocketManager_StopRtpDump_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool incoming() const {
    return data_->incoming;
  }
  bool outgoing() const {
    return data_->outgoing;
  }
 private:
  internal::P2PTrustedSocketManager_StopRtpDump_Params_Data* data_ = nullptr;
};



class P2PTrustedSocketManager_PauseNetworkChangeNotifications_ParamsDataView {
 public:
  P2PTrustedSocketManager_PauseNetworkChangeNotifications_ParamsDataView() = default;

  P2PTrustedSocketManager_PauseNetworkChangeNotifications_ParamsDataView(
      internal::P2PTrustedSocketManager_PauseNetworkChangeNotifications_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::P2PTrustedSocketManager_PauseNetworkChangeNotifications_Params_Data* data_ = nullptr;
};



class P2PTrustedSocketManager_ResumeNetworkChangeNotifications_ParamsDataView {
 public:
  P2PTrustedSocketManager_ResumeNetworkChangeNotifications_ParamsDataView() = default;

  P2PTrustedSocketManager_ResumeNetworkChangeNotifications_ParamsDataView(
      internal::P2PTrustedSocketManager_ResumeNetworkChangeNotifications_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::P2PTrustedSocketManager_ResumeNetworkChangeNotifications_Params_Data* data_ = nullptr;
};




inline void P2PTrustedSocketManagerClient_DumpPacket_ParamsDataView::GetPacketHeaderDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->packet_header.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}









}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_P2P_TRUSTED_MOJOM_PARAMS_DATA_H_