// services/network/public/mojom/cert_verifier_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace cert_verifier {
namespace mojom {
namespace internal {

class ValidationContext;
class  URLLoaderFactoryConnector_CreateURLLoaderFactory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data url_loader_factory;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<URLLoaderFactoryConnector_CreateURLLoaderFactory_Params_Data>;

  URLLoaderFactoryConnector_CreateURLLoaderFactory_Params_Data();
  ~URLLoaderFactoryConnector_CreateURLLoaderFactory_Params_Data() = delete;
};
static_assert(sizeof(URLLoaderFactoryConnector_CreateURLLoaderFactory_Params_Data) == 16,
              "Bad sizeof(URLLoaderFactoryConnector_CreateURLLoaderFactory_Params_Data)");
class  CertVerifierService_EnableNetworkAccess_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data url_loader_factory;
  mojo::internal::Interface_Data reconnector;

 private:
  friend class mojo::internal::MessageFragment<CertVerifierService_EnableNetworkAccess_Params_Data>;

  CertVerifierService_EnableNetworkAccess_Params_Data();
  ~CertVerifierService_EnableNetworkAccess_Params_Data() = delete;
};
static_assert(sizeof(CertVerifierService_EnableNetworkAccess_Params_Data) == 24,
              "Bad sizeof(CertVerifierService_EnableNetworkAccess_Params_Data)");
class  CertVerifierService_Verify_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::RequestParams_Data> params;
  uint32_t netlog_source_type;
  uint32_t netlog_source_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> netlog_source_start_time;
  mojo::internal::Interface_Data cert_verifier_request;

 private:
  friend class mojo::internal::MessageFragment<CertVerifierService_Verify_Params_Data>;

  CertVerifierService_Verify_Params_Data();
  ~CertVerifierService_Verify_Params_Data() = delete;
};
static_assert(sizeof(CertVerifierService_Verify_Params_Data) == 40,
              "Bad sizeof(CertVerifierService_Verify_Params_Data)");
class  CertVerifierService_SetConfig_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::CertVerifierConfig_Data> config;

 private:
  friend class mojo::internal::MessageFragment<CertVerifierService_SetConfig_Params_Data>;

  CertVerifierService_SetConfig_Params_Data();
  ~CertVerifierService_SetConfig_Params_Data() = delete;
};
static_assert(sizeof(CertVerifierService_SetConfig_Params_Data) == 16,
              "Bad sizeof(CertVerifierService_SetConfig_Params_Data)");
class  CertVerifierRequest_Complete_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::CertVerifyResult_Data> result;
  int32_t net_error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CertVerifierRequest_Complete_Params_Data>;

  CertVerifierRequest_Complete_Params_Data();
  ~CertVerifierRequest_Complete_Params_Data() = delete;
};
static_assert(sizeof(CertVerifierRequest_Complete_Params_Data) == 24,
              "Bad sizeof(CertVerifierRequest_Complete_Params_Data)");

}  // namespace internal


class URLLoaderFactoryConnector_CreateURLLoaderFactory_ParamsDataView {
 public:
  URLLoaderFactoryConnector_CreateURLLoaderFactory_ParamsDataView() = default;

  URLLoaderFactoryConnector_CreateURLLoaderFactory_ParamsDataView(
      internal::URLLoaderFactoryConnector_CreateURLLoaderFactory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeUrlLoaderFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::URLLoaderFactoryInterfaceBase>>(
            &data_->url_loader_factory, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::URLLoaderFactoryConnector_CreateURLLoaderFactory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CertVerifierService_EnableNetworkAccess_ParamsDataView {
 public:
  CertVerifierService_EnableNetworkAccess_ParamsDataView() = default;

  CertVerifierService_EnableNetworkAccess_ParamsDataView(
      internal::CertVerifierService_EnableNetworkAccess_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeUrlLoaderFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::URLLoaderFactoryInterfaceBase>>(
            &data_->url_loader_factory, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeReconnector() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::cert_verifier::mojom::URLLoaderFactoryConnectorInterfaceBase>>(
            &data_->reconnector, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CertVerifierService_EnableNetworkAccess_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CertVerifierService_Verify_ParamsDataView {
 public:
  CertVerifierService_Verify_ParamsDataView() = default;

  CertVerifierService_Verify_ParamsDataView(
      internal::CertVerifierService_Verify_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      RequestParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::cert_verifier::mojom::RequestParamsDataView>(
        pointer, output, message_);
  }
  uint32_t netlog_source_type() const {
    return data_->netlog_source_type;
  }
  uint32_t netlog_source_id() const {
    return data_->netlog_source_id;
  }
  inline void GetNetlogSourceStartTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetlogSourceStartTime(UserType* output) {
    
    auto* pointer = data_->netlog_source_start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeCertVerifierRequest() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::cert_verifier::mojom::CertVerifierRequestInterfaceBase>>(
            &data_->cert_verifier_request, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CertVerifierService_Verify_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CertVerifierService_SetConfig_ParamsDataView {
 public:
  CertVerifierService_SetConfig_ParamsDataView() = default;

  CertVerifierService_SetConfig_ParamsDataView(
      internal::CertVerifierService_SetConfig_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetConfigDataView(
      CertVerifierConfigDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConfig(UserType* output) {
    
    auto* pointer = data_->config.Get();
    return mojo::internal::Deserialize<::cert_verifier::mojom::CertVerifierConfigDataView>(
        pointer, output, message_);
  }
 private:
  internal::CertVerifierService_SetConfig_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CertVerifierRequest_Complete_ParamsDataView {
 public:
  CertVerifierRequest_Complete_ParamsDataView() = default;

  CertVerifierRequest_Complete_ParamsDataView(
      internal::CertVerifierRequest_Complete_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::network::mojom::CertVerifyResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::network::mojom::CertVerifyResultDataView>(
        pointer, output, message_);
  }
  int32_t net_error() const {
    return data_->net_error;
  }
 private:
  internal::CertVerifierRequest_Complete_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};






inline void CertVerifierService_Verify_ParamsDataView::GetParamsDataView(
    RequestParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = RequestParamsDataView(pointer, message_);
}
inline void CertVerifierService_Verify_ParamsDataView::GetNetlogSourceStartTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->netlog_source_start_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}


inline void CertVerifierService_SetConfig_ParamsDataView::GetConfigDataView(
    CertVerifierConfigDataView* output) {
  auto pointer = data_->config.Get();
  *output = CertVerifierConfigDataView(pointer, message_);
}


inline void CertVerifierRequest_Complete_ParamsDataView::GetResultDataView(
    ::network::mojom::CertVerifyResultDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::network::mojom::CertVerifyResultDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace cert_verifier

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_MOJOM_PARAMS_DATA_H_