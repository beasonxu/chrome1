// services/network/public/mojom/network_change_manager.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CHANGE_MANAGER_MOJOM_SHARED_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CHANGE_MANAGER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/network_change_manager.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace network {
namespace mojom {


}  // namespace mojom
}  // namespace network

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace network {
namespace mojom {


enum class ConnectionType : int32_t {
  
  CONNECTION_UNKNOWN = 0,
  
  CONNECTION_ETHERNET = 1,
  
  CONNECTION_WIFI = 2,
  
  CONNECTION_2G = 3,
  
  CONNECTION_3G = 4,
  
  CONNECTION_4G = 5,
  
  CONNECTION_NONE = 6,
  
  CONNECTION_BLUETOOTH = 7,
  
  CONNECTION_5G = 8,
  
  CONNECTION_LAST = 8,
  kMinValue = 0,
  kMaxValue = 8,
};

 std::ostream& operator<<(std::ostream& os, ConnectionType value);
inline bool IsKnownEnumValue(ConnectionType value) {
  return internal::ConnectionType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ConnectionSubtype : int32_t {
  
  SUBTYPE_UNKNOWN = 0,
  
  SUBTYPE_NONE = 1,
  
  SUBTYPE_OTHER = 2,
  
  SUBTYPE_GSM = 3,
  
  SUBTYPE_IDEN = 4,
  
  SUBTYPE_CDMA = 5,
  
  SUBTYPE_1XRTT = 6,
  
  SUBTYPE_GPRS = 7,
  
  SUBTYPE_EDGE = 8,
  
  SUBTYPE_UMTS = 9,
  
  SUBTYPE_EVDO_REV_0 = 10,
  
  SUBTYPE_EVDO_REV_A = 11,
  
  SUBTYPE_HSPA = 12,
  
  SUBTYPE_EVDO_REV_B = 13,
  
  SUBTYPE_HSDPA = 14,
  
  SUBTYPE_HSUPA = 15,
  
  SUBTYPE_EHRPD = 16,
  
  SUBTYPE_HSPAP = 17,
  
  SUBTYPE_LTE = 18,
  
  SUBTYPE_LTE_ADVANCED = 19,
  
  SUBTYPE_BLUETOOTH_1_2 = 20,
  
  SUBTYPE_BLUETOOTH_2_1 = 21,
  
  SUBTYPE_BLUETOOTH_3_0 = 22,
  
  SUBTYPE_BLUETOOTH_4_0 = 23,
  
  SUBTYPE_ETHERNET = 24,
  
  SUBTYPE_FAST_ETHERNET = 25,
  
  SUBTYPE_GIGABIT_ETHERNET = 26,
  
  SUBTYPE_10_GIGABIT_ETHERNET = 27,
  
  SUBTYPE_WIFI_B = 28,
  
  SUBTYPE_WIFI_G = 29,
  
  SUBTYPE_WIFI_N = 30,
  
  SUBTYPE_WIFI_AC = 31,
  
  SUBTYPE_WIFI_AD = 32,
  
  SUBTYPE_LAST = 32,
  kMinValue = 0,
  kMaxValue = 32,
};

 std::ostream& operator<<(std::ostream& os, ConnectionSubtype value);
inline bool IsKnownEnumValue(ConnectionSubtype value) {
  return internal::ConnectionSubtype_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class NetworkChangeManagerClientInterfaceBase {};

using NetworkChangeManagerClientPtrDataView =
    mojo::InterfacePtrDataView<NetworkChangeManagerClientInterfaceBase>;
using NetworkChangeManagerClientRequestDataView =
    mojo::InterfaceRequestDataView<NetworkChangeManagerClientInterfaceBase>;
using NetworkChangeManagerClientAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<NetworkChangeManagerClientInterfaceBase>;
using NetworkChangeManagerClientAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<NetworkChangeManagerClientInterfaceBase>;
class NetworkChangeManagerInterfaceBase {};

using NetworkChangeManagerPtrDataView =
    mojo::InterfacePtrDataView<NetworkChangeManagerInterfaceBase>;
using NetworkChangeManagerRequestDataView =
    mojo::InterfaceRequestDataView<NetworkChangeManagerInterfaceBase>;
using NetworkChangeManagerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<NetworkChangeManagerInterfaceBase>;
using NetworkChangeManagerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<NetworkChangeManagerInterfaceBase>;


}  // namespace mojom
}  // namespace network

namespace std {

template <>
struct hash<::network::mojom::ConnectionType>
    : public mojo::internal::EnumHashImpl<::network::mojom::ConnectionType> {};

template <>
struct hash<::network::mojom::ConnectionSubtype>
    : public mojo::internal::EnumHashImpl<::network::mojom::ConnectionSubtype> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::ConnectionType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::ConnectionType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::ConnectionType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::ConnectionSubtype, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::ConnectionSubtype, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::ConnectionSubtype>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace network {
namespace mojom {


}  // namespace mojom
}  // namespace network

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::ConnectionType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::ConnectionType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::ConnectionSubtype> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::ConnectionSubtype value);
};

} // namespace perfetto

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CHANGE_MANAGER_MOJOM_SHARED_H_