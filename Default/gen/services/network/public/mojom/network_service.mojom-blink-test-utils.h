// services/network/public/mojom/network_service.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_BLINK_TEST_UTILS_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_BLINK_TEST_UTILS_H_

#include "services/network/public/mojom/network_service.mojom-blink.h"
#include "third_party/blink/public/platform/web_common.h"


namespace network {
namespace mojom {
namespace blink {


class BLINK_PLATFORM_EXPORT NetworkServiceInterceptorForTesting : public NetworkService {
  virtual NetworkService* GetForwardingInterface() = 0;
  void SetParams(NetworkServiceParamsPtr params) override;
  void StartNetLog(::base::File file, ::network::mojom::blink::NetLogCaptureMode capture_mode, ::base::Value::Dict constants) override;
  void AttachNetLogProxy(::mojo::PendingRemote<::network::mojom::blink::NetLogProxySource> proxy_source, ::mojo::PendingReceiver<::network::mojom::blink::NetLogProxySink> proxy_sink) override;
  void SetSSLKeyLogFile(::base::File file) override;
  void CreateNetworkContext(::mojo::PendingReceiver<::network::mojom::blink::NetworkContext> context, ::network::mojom::blink::NetworkContextParamsPtr params) override;
  void ConfigureStubHostResolver(bool insecure_dns_client_enabled, ::network::mojom::blink::SecureDnsMode secure_dns_mode, ::network::mojom::blink::DnsOverHttpsConfigPtr dns_over_https_config, bool additional_dns_types_enabled) override;
  void DisableQuic() override;
  void SetUpHttpAuth(HttpAuthStaticParamsPtr http_auth_static_params) override;
  void ConfigureHttpAuthPrefs(HttpAuthDynamicParamsPtr http_auth_dynamic_params) override;
  void SetRawHeadersAccess(int32_t process_id, const WTF::Vector<::scoped_refptr<const ::blink::SecurityOrigin>>& origins) override;
  void SetMaxConnectionsPerProxy(int32_t max_connections) override;
  void GetNetworkChangeManager(::mojo::PendingReceiver<::network::mojom::blink::NetworkChangeManager> network_change_manager) override;
  void GetNetworkQualityEstimatorManager(::mojo::PendingReceiver<::network::mojom::blink::NetworkQualityEstimatorManager> receiver) override;
  void GetDnsConfigChangeManager(::mojo::PendingReceiver<::network::mojom::blink::DnsConfigChangeManager> receiver) override;
  void GetNetworkList(uint32_t policy, GetNetworkListCallback callback) override;
  void UpdateCRLSet(::base::span<const ::uint8_t> crl_set, UpdateCRLSetCallback callback) override;
  void OnCertDBChanged() override;
  void SetEncryptionKey(const std::string& encryption_key) override;
  void OnMemoryPressure(::mojo_base::mojom::blink::MemoryPressureLevel memory_pressure_level) override;
  void OnPeerToPeerConnectionsCountChange(uint32_t count) override;
  void OnApplicationStateChange(::mojo_base::mojom::blink::ApplicationState state) override;
  void SetEnvironment(WTF::Vector<EnvironmentVariablePtr> environment) override;
  void SetTrustTokenKeyCommitments(const WTF::String& raw_commitments, SetTrustTokenKeyCommitmentsCallback callback) override;
  void ClearSCTAuditingCache() override;
  void ConfigureSCTAuditing(SCTAuditingConfigurationPtr configuration) override;
  void UpdateCtLogList(WTF::Vector<::network::mojom::blink::CTLogInfoPtr> log_list, ::base::Time update_time, UpdateCtLogListCallback callback) override;
  void UpdateCtKnownPopularSCTs(const WTF::Vector<WTF::Vector<uint8_t>>& sct_hashes, UpdateCtKnownPopularSCTsCallback callback) override;
  void SetCtEnforcementEnabled(bool enabled, SetCtEnforcementEnabledCallback callback) override;
  void UpdateKeyPinsList(::network::mojom::blink::PinListPtr pin_list, ::base::Time update_time) override;
  void DumpWithoutCrashing(::base::Time dump_request_time) override;
  void BindTestInterface(::mojo::PendingReceiver<::network::mojom::blink::NetworkServiceTest> receiver) override;
  void SetFirstPartySets(WTF::HashMap<::blink::BlinkSchemefulSite, ::network::mojom::blink::FirstPartySetEntryPtr> sets) override;
  void SetExplicitlyAllowedPorts(const WTF::Vector<uint16_t>& ports) override;
  void ParseHeaders(const ::blink::KURL& url, ::network::mojom::blink::HttpResponseHeadersPtr headers, ParseHeadersCallback callback) override;
};
class BLINK_PLATFORM_EXPORT NetworkServiceAsyncWaiter {
 public:
  explicit NetworkServiceAsyncWaiter(NetworkService* proxy);

  NetworkServiceAsyncWaiter(const NetworkServiceAsyncWaiter&) = delete;
  NetworkServiceAsyncWaiter& operator=(const NetworkServiceAsyncWaiter&) = delete;

  ~NetworkServiceAsyncWaiter();
  void GetNetworkList(
      uint32_t policy, absl::optional<WTF::Vector<::net::NetworkInterface>>* out_networks);
  void UpdateCRLSet(
      ::base::span<const ::uint8_t> crl_set);
  void SetTrustTokenKeyCommitments(
      const WTF::String& raw_commitments);
  void UpdateCtLogList(
      WTF::Vector<::network::mojom::blink::CTLogInfoPtr> log_list, ::base::Time update_time);
  void UpdateCtKnownPopularSCTs(
      const WTF::Vector<WTF::Vector<uint8_t>>& sct_hashes);
  void SetCtEnforcementEnabled(
      bool enabled);
  void ParseHeaders(
      const ::blink::KURL& url, ::network::mojom::blink::HttpResponseHeadersPtr headers, ::network::mojom::blink::ParsedHeadersPtr* out_parsed_headers);

 private:
  NetworkService* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_BLINK_TEST_UTILS_H_