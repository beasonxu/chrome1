// services/network/public/mojom/trust_tokens.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_TRUST_TOKENS_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_TRUST_TOKENS_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace network {
namespace mojom {
namespace internal {
class TrustTokenParams_Data;
class HasTrustTokensResult_Data;
class TrustTokenVerificationKey_Data;
class TrustTokenKeyCommitmentResult_Data;
class FulfillTrustTokenIssuanceRequest_Data;
class FulfillTrustTokenIssuanceAnswer_Data;
class TrustTokenOperationResult_Data;
class StoredTrustTokensForIssuer_Data;

struct TrustTokenProtocolVersion_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct TrustTokenOperationStatus_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct TrustTokenOperationType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct TrustTokenRefreshPolicy_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct TrustTokenSignRequestData_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct DeleteStoredTrustTokensStatus_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct TrustTokenKeyCommitmentResult_Os_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct TrustTokenKeyCommitmentResult_UnavailableLocalOperationFallback_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct FulfillTrustTokenIssuanceAnswer_Status_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class  TrustTokenParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  int32_t refresh_policy;
  mojo::internal::Pointer<mojo::internal::String_Data> custom_key_commitment;
  int32_t sign_request_data;
  uint8_t include_timestamp_header : 1;
  uint8_t pad4_[3];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::url::mojom::internal::Origin_Data>>> issuers;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> additional_signed_headers;
  mojo::internal::Pointer<mojo::internal::String_Data> possibly_unsafe_additional_signing_data;

 private:
  friend class mojo::internal::MessageFragment<TrustTokenParams_Data>;

  TrustTokenParams_Data();
  ~TrustTokenParams_Data() = delete;
};
static_assert(sizeof(TrustTokenParams_Data) == 56,
              "Bad sizeof(TrustTokenParams_Data)");
// Used by TrustTokenParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct TrustTokenParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  TrustTokenParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~TrustTokenParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<TrustTokenParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    TrustTokenParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  HasTrustTokensResult_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t has_trust_tokens : 1;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<HasTrustTokensResult_Data>;

  HasTrustTokensResult_Data();
  ~HasTrustTokensResult_Data() = delete;
};
static_assert(sizeof(HasTrustTokensResult_Data) == 16,
              "Bad sizeof(HasTrustTokensResult_Data)");
// Used by HasTrustTokensResult::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct HasTrustTokensResult_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  HasTrustTokensResult_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~HasTrustTokensResult_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<HasTrustTokensResult_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    HasTrustTokensResult_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  TrustTokenVerificationKey_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> body;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> expiry;

 private:
  friend class mojo::internal::MessageFragment<TrustTokenVerificationKey_Data>;

  TrustTokenVerificationKey_Data();
  ~TrustTokenVerificationKey_Data() = delete;
};
static_assert(sizeof(TrustTokenVerificationKey_Data) == 24,
              "Bad sizeof(TrustTokenVerificationKey_Data)");
// Used by TrustTokenVerificationKey::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct TrustTokenVerificationKey_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  TrustTokenVerificationKey_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~TrustTokenVerificationKey_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<TrustTokenVerificationKey_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    TrustTokenVerificationKey_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  TrustTokenKeyCommitmentResult_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t protocol_version;
  int32_t id;
  int32_t batch_size;
  int32_t unavailable_local_operation_fallback;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::TrustTokenVerificationKey_Data>>> keys;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> request_issuance_locally_on;

 private:
  friend class mojo::internal::MessageFragment<TrustTokenKeyCommitmentResult_Data>;

  TrustTokenKeyCommitmentResult_Data();
  ~TrustTokenKeyCommitmentResult_Data() = delete;
};
static_assert(sizeof(TrustTokenKeyCommitmentResult_Data) == 40,
              "Bad sizeof(TrustTokenKeyCommitmentResult_Data)");
// Used by TrustTokenKeyCommitmentResult::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct TrustTokenKeyCommitmentResult_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  TrustTokenKeyCommitmentResult_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~TrustTokenKeyCommitmentResult_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<TrustTokenKeyCommitmentResult_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    TrustTokenKeyCommitmentResult_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  FulfillTrustTokenIssuanceRequest_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> issuer;
  mojo::internal::Pointer<mojo::internal::String_Data> request;

 private:
  friend class mojo::internal::MessageFragment<FulfillTrustTokenIssuanceRequest_Data>;

  FulfillTrustTokenIssuanceRequest_Data();
  ~FulfillTrustTokenIssuanceRequest_Data() = delete;
};
static_assert(sizeof(FulfillTrustTokenIssuanceRequest_Data) == 24,
              "Bad sizeof(FulfillTrustTokenIssuanceRequest_Data)");
// Used by FulfillTrustTokenIssuanceRequest::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FulfillTrustTokenIssuanceRequest_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FulfillTrustTokenIssuanceRequest_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FulfillTrustTokenIssuanceRequest_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<FulfillTrustTokenIssuanceRequest_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FulfillTrustTokenIssuanceRequest_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  FulfillTrustTokenIssuanceAnswer_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> response;

 private:
  friend class mojo::internal::MessageFragment<FulfillTrustTokenIssuanceAnswer_Data>;

  FulfillTrustTokenIssuanceAnswer_Data();
  ~FulfillTrustTokenIssuanceAnswer_Data() = delete;
};
static_assert(sizeof(FulfillTrustTokenIssuanceAnswer_Data) == 24,
              "Bad sizeof(FulfillTrustTokenIssuanceAnswer_Data)");
// Used by FulfillTrustTokenIssuanceAnswer::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FulfillTrustTokenIssuanceAnswer_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FulfillTrustTokenIssuanceAnswer_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FulfillTrustTokenIssuanceAnswer_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<FulfillTrustTokenIssuanceAnswer_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FulfillTrustTokenIssuanceAnswer_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  TrustTokenOperationResult_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  int32_t status;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> issuer;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> top_level_origin;
  int32_t issued_token_count;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<TrustTokenOperationResult_Data>;

  TrustTokenOperationResult_Data();
  ~TrustTokenOperationResult_Data() = delete;
};
static_assert(sizeof(TrustTokenOperationResult_Data) == 40,
              "Bad sizeof(TrustTokenOperationResult_Data)");
// Used by TrustTokenOperationResult::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct TrustTokenOperationResult_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  TrustTokenOperationResult_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~TrustTokenOperationResult_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<TrustTokenOperationResult_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    TrustTokenOperationResult_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  StoredTrustTokensForIssuer_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> issuer;
  int32_t count;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<StoredTrustTokensForIssuer_Data>;

  StoredTrustTokensForIssuer_Data();
  ~StoredTrustTokensForIssuer_Data() = delete;
};
static_assert(sizeof(StoredTrustTokensForIssuer_Data) == 24,
              "Bad sizeof(StoredTrustTokensForIssuer_Data)");
// Used by StoredTrustTokensForIssuer::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct StoredTrustTokensForIssuer_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  StoredTrustTokensForIssuer_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~StoredTrustTokensForIssuer_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<StoredTrustTokensForIssuer_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    StoredTrustTokensForIssuer_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_TRUST_TOKENS_MOJOM_SHARED_INTERNAL_H_