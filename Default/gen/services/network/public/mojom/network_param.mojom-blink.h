// services/network/public/mojom/network_param.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_PARAM_MOJOM_BLINK_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_PARAM_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/network_param.mojom-shared.h"
#include "services/network/public/mojom/network_param.mojom-blink-forward.h"
#include "url/mojom/scheme_host_port.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"




#include "mojo/public/cpp/bindings/lib/native_enum_serialization.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"
#include "services/network/public/cpp/network_param_mojom_traits.h"
#include "third_party/blink/public/platform/web_common.h"




namespace network {
namespace mojom {
namespace blink {









class BLINK_PLATFORM_EXPORT HttpVersion {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<HttpVersion, T>::value>;
  using DataView = HttpVersionDataView;
  using Data_ = internal::HttpVersion_Data;

  template <typename... Args>
  static HttpVersionPtr New(Args&&... args) {
    return HttpVersionPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static HttpVersionPtr From(const U& u) {
    return mojo::TypeConverter<HttpVersionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpVersion>::Convert(*this);
  }


  HttpVersion();

  HttpVersion(
      uint16_t major_value,
      uint16_t minor_value);


  ~HttpVersion();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = HttpVersionPtr>
  HttpVersionPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, HttpVersion::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, HttpVersion::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        HttpVersion::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        HttpVersion::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::HttpVersion_UnserializedMessageContext<
            UserType, HttpVersion::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<HttpVersion::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return HttpVersion::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::HttpVersion_UnserializedMessageContext<
            UserType, HttpVersion::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<HttpVersion::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint16_t major_value;
  
  uint16_t minor_value;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, HttpVersion::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, HttpVersion::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, HttpVersion::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, HttpVersion::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







class BLINK_PLATFORM_EXPORT ResolveErrorInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ResolveErrorInfo, T>::value>;
  using DataView = ResolveErrorInfoDataView;
  using Data_ = internal::ResolveErrorInfo_Data;

  template <typename... Args>
  static ResolveErrorInfoPtr New(Args&&... args) {
    return ResolveErrorInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ResolveErrorInfoPtr From(const U& u) {
    return mojo::TypeConverter<ResolveErrorInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ResolveErrorInfo>::Convert(*this);
  }


  ResolveErrorInfo();

  ResolveErrorInfo(
      int32_t error,
      bool is_secure_network_error);


  ~ResolveErrorInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ResolveErrorInfoPtr>
  ResolveErrorInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ResolveErrorInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ResolveErrorInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ResolveErrorInfo::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ResolveErrorInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ResolveErrorInfo_UnserializedMessageContext<
            UserType, ResolveErrorInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ResolveErrorInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return ResolveErrorInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ResolveErrorInfo_UnserializedMessageContext<
            UserType, ResolveErrorInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ResolveErrorInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t error;
  
  bool is_secure_network_error;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ResolveErrorInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ResolveErrorInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ResolveErrorInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ResolveErrorInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}










class BLINK_PLATFORM_EXPORT AuthChallengeInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AuthChallengeInfo, T>::value>;
  using DataView = AuthChallengeInfoDataView;
  using Data_ = internal::AuthChallengeInfo_Data;

  template <typename... Args>
  static AuthChallengeInfoPtr New(Args&&... args) {
    return AuthChallengeInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AuthChallengeInfoPtr From(const U& u) {
    return mojo::TypeConverter<AuthChallengeInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthChallengeInfo>::Convert(*this);
  }


  AuthChallengeInfo();

  AuthChallengeInfo(
      bool is_proxy,
      ::url::mojom::blink::SchemeHostPortPtr challenger,
      const WTF::String& scheme,
      const WTF::String& realm,
      const WTF::String& challenge,
      const WTF::String& path);

AuthChallengeInfo(const AuthChallengeInfo&) = delete;
AuthChallengeInfo& operator=(const AuthChallengeInfo&) = delete;

  ~AuthChallengeInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AuthChallengeInfoPtr>
  AuthChallengeInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AuthChallengeInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AuthChallengeInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AuthChallengeInfo::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AuthChallengeInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AuthChallengeInfo_UnserializedMessageContext<
            UserType, AuthChallengeInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AuthChallengeInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return AuthChallengeInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AuthChallengeInfo_UnserializedMessageContext<
            UserType, AuthChallengeInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AuthChallengeInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  bool is_proxy;
  
  ::url::mojom::blink::SchemeHostPortPtr challenger;
  
  WTF::String scheme;
  
  WTF::String realm;
  
  WTF::String challenge;
  
  WTF::String path;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AuthChallengeInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AuthChallengeInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AuthChallengeInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AuthChallengeInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}











template <typename StructPtrType>
AuthChallengeInfoPtr AuthChallengeInfo::Clone() const {
  return New(
      mojo::Clone(is_proxy),
      mojo::Clone(challenger),
      mojo::Clone(scheme),
      mojo::Clone(realm),
      mojo::Clone(challenge),
      mojo::Clone(path)
  );
}

template <typename T, AuthChallengeInfo::EnableIfSame<T>*>
bool AuthChallengeInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->is_proxy, other_struct.is_proxy))
    return false;
  if (!mojo::Equals(this->challenger, other_struct.challenger))
    return false;
  if (!mojo::Equals(this->scheme, other_struct.scheme))
    return false;
  if (!mojo::Equals(this->realm, other_struct.realm))
    return false;
  if (!mojo::Equals(this->challenge, other_struct.challenge))
    return false;
  if (!mojo::Equals(this->path, other_struct.path))
    return false;
  return true;
}

template <typename T, AuthChallengeInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.is_proxy < rhs.is_proxy)
    return true;
  if (rhs.is_proxy < lhs.is_proxy)
    return false;
  if (lhs.challenger < rhs.challenger)
    return true;
  if (rhs.challenger < lhs.challenger)
    return false;
  if (lhs.scheme < rhs.scheme)
    return true;
  if (rhs.scheme < lhs.scheme)
    return false;
  if (lhs.realm < rhs.realm)
    return true;
  if (rhs.realm < lhs.realm)
    return false;
  if (lhs.challenge < rhs.challenge)
    return true;
  if (rhs.challenge < lhs.challenge)
    return false;
  if (lhs.path < rhs.path)
    return true;
  if (rhs.path < lhs.path)
    return false;
  return false;
}
template <typename StructPtrType>
HttpVersionPtr HttpVersion::Clone() const {
  return New(
      mojo::Clone(major_value),
      mojo::Clone(minor_value)
  );
}

template <typename T, HttpVersion::EnableIfSame<T>*>
bool HttpVersion::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->major_value, other_struct.major_value))
    return false;
  if (!mojo::Equals(this->minor_value, other_struct.minor_value))
    return false;
  return true;
}

template <typename T, HttpVersion::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.major_value < rhs.major_value)
    return true;
  if (rhs.major_value < lhs.major_value)
    return false;
  if (lhs.minor_value < rhs.minor_value)
    return true;
  if (rhs.minor_value < lhs.minor_value)
    return false;
  return false;
}
template <typename StructPtrType>
ResolveErrorInfoPtr ResolveErrorInfo::Clone() const {
  return New(
      mojo::Clone(error),
      mojo::Clone(is_secure_network_error)
  );
}

template <typename T, ResolveErrorInfo::EnableIfSame<T>*>
bool ResolveErrorInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->error, other_struct.error))
    return false;
  if (!mojo::Equals(this->is_secure_network_error, other_struct.is_secure_network_error))
    return false;
  return true;
}

template <typename T, ResolveErrorInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.error < rhs.error)
    return true;
  if (rhs.error < lhs.error)
    return false;
  if (lhs.is_secure_network_error < rhs.is_secure_network_error)
    return true;
  if (rhs.is_secure_network_error < lhs.is_secure_network_error)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace network

namespace mojo {


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::network::mojom::blink::AuthChallengeInfo::DataView,
                                         ::network::mojom::blink::AuthChallengeInfoPtr> {
  static bool IsNull(const ::network::mojom::blink::AuthChallengeInfoPtr& input) { return !input; }
  static void SetToNull(::network::mojom::blink::AuthChallengeInfoPtr* output) { output->reset(); }

  static decltype(::network::mojom::blink::AuthChallengeInfo::is_proxy) is_proxy(
      const ::network::mojom::blink::AuthChallengeInfoPtr& input) {
    return input->is_proxy;
  }

  static const decltype(::network::mojom::blink::AuthChallengeInfo::challenger)& challenger(
      const ::network::mojom::blink::AuthChallengeInfoPtr& input) {
    return input->challenger;
  }

  static const decltype(::network::mojom::blink::AuthChallengeInfo::scheme)& scheme(
      const ::network::mojom::blink::AuthChallengeInfoPtr& input) {
    return input->scheme;
  }

  static const decltype(::network::mojom::blink::AuthChallengeInfo::realm)& realm(
      const ::network::mojom::blink::AuthChallengeInfoPtr& input) {
    return input->realm;
  }

  static const decltype(::network::mojom::blink::AuthChallengeInfo::challenge)& challenge(
      const ::network::mojom::blink::AuthChallengeInfoPtr& input) {
    return input->challenge;
  }

  static const decltype(::network::mojom::blink::AuthChallengeInfo::path)& path(
      const ::network::mojom::blink::AuthChallengeInfoPtr& input) {
    return input->path;
  }

  static bool Read(::network::mojom::blink::AuthChallengeInfo::DataView input, ::network::mojom::blink::AuthChallengeInfoPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::network::mojom::blink::HttpVersion::DataView,
                                         ::network::mojom::blink::HttpVersionPtr> {
  static bool IsNull(const ::network::mojom::blink::HttpVersionPtr& input) { return !input; }
  static void SetToNull(::network::mojom::blink::HttpVersionPtr* output) { output->reset(); }

  static decltype(::network::mojom::blink::HttpVersion::major_value) major_value(
      const ::network::mojom::blink::HttpVersionPtr& input) {
    return input->major_value;
  }

  static decltype(::network::mojom::blink::HttpVersion::minor_value) minor_value(
      const ::network::mojom::blink::HttpVersionPtr& input) {
    return input->minor_value;
  }

  static bool Read(::network::mojom::blink::HttpVersion::DataView input, ::network::mojom::blink::HttpVersionPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::network::mojom::blink::ResolveErrorInfo::DataView,
                                         ::network::mojom::blink::ResolveErrorInfoPtr> {
  static bool IsNull(const ::network::mojom::blink::ResolveErrorInfoPtr& input) { return !input; }
  static void SetToNull(::network::mojom::blink::ResolveErrorInfoPtr* output) { output->reset(); }

  static decltype(::network::mojom::blink::ResolveErrorInfo::error) error(
      const ::network::mojom::blink::ResolveErrorInfoPtr& input) {
    return input->error;
  }

  static decltype(::network::mojom::blink::ResolveErrorInfo::is_secure_network_error) is_secure_network_error(
      const ::network::mojom::blink::ResolveErrorInfoPtr& input) {
    return input->is_secure_network_error;
  }

  static bool Read(::network::mojom::blink::ResolveErrorInfo::DataView input, ::network::mojom::blink::ResolveErrorInfoPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_PARAM_MOJOM_BLINK_H_