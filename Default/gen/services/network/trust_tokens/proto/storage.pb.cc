// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#include "storage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace network {
PROTOBUF_CONSTEXPR TrustTokenIssuerConfig::TrustTokenIssuerConfig(
    ::_pbi::ConstantInitialized)
  : tokens_()
  , last_issuance_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TrustTokenIssuerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustTokenIssuerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustTokenIssuerConfigDefaultTypeInternal() {}
  union {
    TrustTokenIssuerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustTokenIssuerConfigDefaultTypeInternal _TrustTokenIssuerConfig_default_instance_;
PROTOBUF_CONSTEXPR TrustTokenToplevelConfig::TrustTokenToplevelConfig(
    ::_pbi::ConstantInitialized)
  : associated_issuers_(){}
struct TrustTokenToplevelConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustTokenToplevelConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustTokenToplevelConfigDefaultTypeInternal() {}
  union {
    TrustTokenToplevelConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustTokenToplevelConfigDefaultTypeInternal _TrustTokenToplevelConfig_default_instance_;
PROTOBUF_CONSTEXPR TrustTokenIssuerToplevelPairConfig::TrustTokenIssuerToplevelPairConfig(
    ::_pbi::ConstantInitialized)
  : last_redemption_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , redemption_record_(nullptr){}
struct TrustTokenIssuerToplevelPairConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustTokenIssuerToplevelPairConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustTokenIssuerToplevelPairConfigDefaultTypeInternal() {}
  union {
    TrustTokenIssuerToplevelPairConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustTokenIssuerToplevelPairConfigDefaultTypeInternal _TrustTokenIssuerToplevelPairConfig_default_instance_;
}  // namespace network
namespace network {

// ===================================================================

class TrustTokenIssuerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustTokenIssuerConfig>()._has_bits_);
  static void set_has_last_issuance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void TrustTokenIssuerConfig::clear_tokens() {
  tokens_.Clear();
}
TrustTokenIssuerConfig::TrustTokenIssuerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  tokens_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:network.TrustTokenIssuerConfig)
}
TrustTokenIssuerConfig::TrustTokenIssuerConfig(const TrustTokenIssuerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  last_issuance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_issuance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_issuance()) {
    last_issuance_.Set(from._internal_last_issuance(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.TrustTokenIssuerConfig)
}

inline void TrustTokenIssuerConfig::SharedCtor() {
last_issuance_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_issuance_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrustTokenIssuerConfig::~TrustTokenIssuerConfig() {
  // @@protoc_insertion_point(destructor:network.TrustTokenIssuerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustTokenIssuerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_issuance_.Destroy();
}

void TrustTokenIssuerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustTokenIssuerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TrustTokenIssuerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    last_issuance_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustTokenIssuerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TrustToken tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string last_issuance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_last_issuance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustTokenIssuerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TrustTokenIssuerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TrustToken tokens = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tokens_size()); i < n; i++) {
    const auto& repfield = this->_internal_tokens(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string last_issuance = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last_issuance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TrustTokenIssuerConfig)
  return target;
}

size_t TrustTokenIssuerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TrustTokenIssuerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TrustToken tokens = 3;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string last_issuance = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_issuance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustTokenIssuerConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustTokenIssuerConfig*>(
      &from));
}

void TrustTokenIssuerConfig::MergeFrom(const TrustTokenIssuerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.TrustTokenIssuerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from._internal_has_last_issuance()) {
    _internal_set_last_issuance(from._internal_last_issuance());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustTokenIssuerConfig::CopyFrom(const TrustTokenIssuerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TrustTokenIssuerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustTokenIssuerConfig::IsInitialized() const {
  return true;
}

void TrustTokenIssuerConfig::InternalSwap(TrustTokenIssuerConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tokens_.InternalSwap(&other->tokens_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_issuance_, lhs_arena,
      &other->last_issuance_, rhs_arena
  );
}

std::string TrustTokenIssuerConfig::GetTypeName() const {
  return "network.TrustTokenIssuerConfig";
}


// ===================================================================

class TrustTokenToplevelConfig::_Internal {
 public:
};

TrustTokenToplevelConfig::TrustTokenToplevelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  associated_issuers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:network.TrustTokenToplevelConfig)
}
TrustTokenToplevelConfig::TrustTokenToplevelConfig(const TrustTokenToplevelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      associated_issuers_(from.associated_issuers_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.TrustTokenToplevelConfig)
}

inline void TrustTokenToplevelConfig::SharedCtor() {
}

TrustTokenToplevelConfig::~TrustTokenToplevelConfig() {
  // @@protoc_insertion_point(destructor:network.TrustTokenToplevelConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustTokenToplevelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustTokenToplevelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustTokenToplevelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TrustTokenToplevelConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  associated_issuers_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustTokenToplevelConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string associated_issuers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_associated_issuers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustTokenToplevelConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TrustTokenToplevelConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string associated_issuers = 1;
  for (int i = 0, n = this->_internal_associated_issuers_size(); i < n; i++) {
    const auto& s = this->_internal_associated_issuers(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TrustTokenToplevelConfig)
  return target;
}

size_t TrustTokenToplevelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TrustTokenToplevelConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string associated_issuers = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(associated_issuers_.size());
  for (int i = 0, n = associated_issuers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      associated_issuers_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustTokenToplevelConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustTokenToplevelConfig*>(
      &from));
}

void TrustTokenToplevelConfig::MergeFrom(const TrustTokenToplevelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.TrustTokenToplevelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  associated_issuers_.MergeFrom(from.associated_issuers_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustTokenToplevelConfig::CopyFrom(const TrustTokenToplevelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TrustTokenToplevelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustTokenToplevelConfig::IsInitialized() const {
  return true;
}

void TrustTokenToplevelConfig::InternalSwap(TrustTokenToplevelConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  associated_issuers_.InternalSwap(&other->associated_issuers_);
}

std::string TrustTokenToplevelConfig::GetTypeName() const {
  return "network.TrustTokenToplevelConfig";
}


// ===================================================================

class TrustTokenIssuerToplevelPairConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustTokenIssuerToplevelPairConfig>()._has_bits_);
  static void set_has_last_redemption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::network::TrustTokenRedemptionRecord& redemption_record(const TrustTokenIssuerToplevelPairConfig* msg);
  static void set_has_redemption_record(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::network::TrustTokenRedemptionRecord&
TrustTokenIssuerToplevelPairConfig::_Internal::redemption_record(const TrustTokenIssuerToplevelPairConfig* msg) {
  return *msg->redemption_record_;
}
void TrustTokenIssuerToplevelPairConfig::clear_redemption_record() {
  if (redemption_record_ != nullptr) redemption_record_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TrustTokenIssuerToplevelPairConfig::TrustTokenIssuerToplevelPairConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:network.TrustTokenIssuerToplevelPairConfig)
}
TrustTokenIssuerToplevelPairConfig::TrustTokenIssuerToplevelPairConfig(const TrustTokenIssuerToplevelPairConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  last_redemption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_redemption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_redemption()) {
    last_redemption_.Set(from._internal_last_redemption(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_redemption_record()) {
    redemption_record_ = new ::network::TrustTokenRedemptionRecord(*from.redemption_record_);
  } else {
    redemption_record_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:network.TrustTokenIssuerToplevelPairConfig)
}

inline void TrustTokenIssuerToplevelPairConfig::SharedCtor() {
last_redemption_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_redemption_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
redemption_record_ = nullptr;
}

TrustTokenIssuerToplevelPairConfig::~TrustTokenIssuerToplevelPairConfig() {
  // @@protoc_insertion_point(destructor:network.TrustTokenIssuerToplevelPairConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustTokenIssuerToplevelPairConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_redemption_.Destroy();
  if (this != internal_default_instance()) delete redemption_record_;
}

void TrustTokenIssuerToplevelPairConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustTokenIssuerToplevelPairConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TrustTokenIssuerToplevelPairConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_redemption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(redemption_record_ != nullptr);
      redemption_record_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrustTokenIssuerToplevelPairConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string last_redemption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_last_redemption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .network.TrustTokenRedemptionRecord redemption_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_redemption_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustTokenIssuerToplevelPairConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TrustTokenIssuerToplevelPairConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string last_redemption = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_last_redemption(), target);
  }

  // optional .network.TrustTokenRedemptionRecord redemption_record = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::redemption_record(this),
        _Internal::redemption_record(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TrustTokenIssuerToplevelPairConfig)
  return target;
}

size_t TrustTokenIssuerToplevelPairConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TrustTokenIssuerToplevelPairConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string last_redemption = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_redemption());
    }

    // optional .network.TrustTokenRedemptionRecord redemption_record = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *redemption_record_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustTokenIssuerToplevelPairConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrustTokenIssuerToplevelPairConfig*>(
      &from));
}

void TrustTokenIssuerToplevelPairConfig::MergeFrom(const TrustTokenIssuerToplevelPairConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.TrustTokenIssuerToplevelPairConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_last_redemption(from._internal_last_redemption());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_redemption_record()->::network::TrustTokenRedemptionRecord::MergeFrom(from._internal_redemption_record());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrustTokenIssuerToplevelPairConfig::CopyFrom(const TrustTokenIssuerToplevelPairConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TrustTokenIssuerToplevelPairConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustTokenIssuerToplevelPairConfig::IsInitialized() const {
  return true;
}

void TrustTokenIssuerToplevelPairConfig::InternalSwap(TrustTokenIssuerToplevelPairConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_redemption_, lhs_arena,
      &other->last_redemption_, rhs_arena
  );
  swap(redemption_record_, other->redemption_record_);
}

std::string TrustTokenIssuerToplevelPairConfig::GetTypeName() const {
  return "network.TrustTokenIssuerToplevelPairConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::network::TrustTokenIssuerConfig*
Arena::CreateMaybeMessage< ::network::TrustTokenIssuerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TrustTokenIssuerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TrustTokenToplevelConfig*
Arena::CreateMaybeMessage< ::network::TrustTokenToplevelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TrustTokenToplevelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TrustTokenIssuerToplevelPairConfig*
Arena::CreateMaybeMessage< ::network::TrustTokenIssuerToplevelPairConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TrustTokenIssuerToplevelPairConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
