// services/resource_coordinator/public/mojom/memory_instrumentation/memory_instrumentation.mojom-blink-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_RESOURCE_COORDINATOR_PUBLIC_MOJOM_MEMORY_INSTRUMENTATION_MEMORY_INSTRUMENTATION_MOJOM_BLINK_FORWARD_H_
#define SERVICES_RESOURCE_COORDINATOR_PUBLIC_MOJOM_MEMORY_INSTRUMENTATION_MEMORY_INSTRUMENTATION_MOJOM_BLINK_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"

#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"


#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"




namespace memory_instrumentation {
namespace mojom {

enum class DumpType : int32_t;

enum class LevelOfDetail : int32_t;

enum class Determinism : int32_t;

enum class ProcessType : int32_t;

enum class MemoryMapOption : int32_t;
class ClientProcessInterfaceBase;
class HeapProfilerInterfaceBase;
class HeapProfilerHelperInterfaceBase;
class CoordinatorInterfaceBase;
class CoordinatorConnectorInterfaceBase;
}  // namespace memory_instrumentation
}  // namespace mojom


namespace memory_instrumentation {
namespace mojom {
namespace blink {
// Aliases for definition in the parent namespace.
using DumpType = DumpType;
using LevelOfDetail = LevelOfDetail;
using Determinism = Determinism;
using ProcessType = ProcessType;
using MemoryMapOption = MemoryMapOption;
using ClientProcessInterfaceBase = ClientProcessInterfaceBase;
using HeapProfilerInterfaceBase = HeapProfilerInterfaceBase;
using HeapProfilerHelperInterfaceBase = HeapProfilerHelperInterfaceBase;
using CoordinatorInterfaceBase = CoordinatorInterfaceBase;
using CoordinatorConnectorInterfaceBase = CoordinatorConnectorInterfaceBase;
class RequestArgs;
using RequestArgsPtr = mojo::InlinedStructPtr<RequestArgs>;

class RawAllocatorDumpEdge;
using RawAllocatorDumpEdgePtr = mojo::InlinedStructPtr<RawAllocatorDumpEdge>;

class RawAllocatorDumpEntry;
using RawAllocatorDumpEntryPtr = mojo::StructPtr<RawAllocatorDumpEntry>;

class RawAllocatorDump;
using RawAllocatorDumpPtr = mojo::StructPtr<RawAllocatorDump>;

class RawProcessMemoryDump;
using RawProcessMemoryDumpPtr = mojo::StructPtr<RawProcessMemoryDump>;

class VmRegion;
using VmRegionPtr = mojo::StructPtr<VmRegion>;

class PlatformPrivateFootprint;
using PlatformPrivateFootprintPtr = mojo::StructPtr<PlatformPrivateFootprint>;

class RawOSMemDump;
using RawOSMemDumpPtr = mojo::StructPtr<RawOSMemDump>;

class OSMemDump;
using OSMemDumpPtr = mojo::StructPtr<OSMemDump>;

class AllocatorMemDump;
using AllocatorMemDumpPtr = mojo::StructPtr<AllocatorMemDump>;

class ProcessMemoryDump;
using ProcessMemoryDumpPtr = mojo::StructPtr<ProcessMemoryDump>;

class AggregatedMetrics;
using AggregatedMetricsPtr = mojo::InlinedStructPtr<AggregatedMetrics>;

class GlobalMemoryDump;
using GlobalMemoryDumpPtr = mojo::StructPtr<GlobalMemoryDump>;

class HeapProfileResult;
using HeapProfileResultPtr = mojo::StructPtr<HeapProfileResult>;

class RawAllocatorDumpEntryValue;

using RawAllocatorDumpEntryValuePtr = mojo::StructPtr<RawAllocatorDumpEntryValue>;

class ClientProcess;

class HeapProfiler;

class HeapProfilerHelper;

class Coordinator;

class CoordinatorConnector;




}  // namespace blink
}  // namespace mojom
}  // namespace memory_instrumentation

#endif  // SERVICES_RESOURCE_COORDINATOR_PUBLIC_MOJOM_MEMORY_INSTRUMENTATION_MEMORY_INSTRUMENTATION_MOJOM_BLINK_FORWARD_H_