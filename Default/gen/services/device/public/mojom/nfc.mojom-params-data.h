// services/device/public/mojom/nfc.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_NFC_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_NFC_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  NFC_SetClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<NFC_SetClient_Params_Data>;

  NFC_SetClient_Params_Data();
  ~NFC_SetClient_Params_Data() = delete;
};
static_assert(sizeof(NFC_SetClient_Params_Data) == 16,
              "Bad sizeof(NFC_SetClient_Params_Data)");
class  NFC_Push_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::NDEFMessage_Data> message;
  mojo::internal::Pointer<internal::NDEFWriteOptions_Data> options;

 private:
  friend class mojo::internal::MessageFragment<NFC_Push_Params_Data>;

  NFC_Push_Params_Data();
  ~NFC_Push_Params_Data() = delete;
};
static_assert(sizeof(NFC_Push_Params_Data) == 24,
              "Bad sizeof(NFC_Push_Params_Data)");
class  NFC_Push_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::NDEFError_Data> error;

 private:
  friend class mojo::internal::MessageFragment<NFC_Push_ResponseParams_Data>;

  NFC_Push_ResponseParams_Data();
  ~NFC_Push_ResponseParams_Data() = delete;
};
static_assert(sizeof(NFC_Push_ResponseParams_Data) == 16,
              "Bad sizeof(NFC_Push_ResponseParams_Data)");
class  NFC_CancelPush_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NFC_CancelPush_Params_Data>;

  NFC_CancelPush_Params_Data();
  ~NFC_CancelPush_Params_Data() = delete;
};
static_assert(sizeof(NFC_CancelPush_Params_Data) == 8,
              "Bad sizeof(NFC_CancelPush_Params_Data)");
class  NFC_MakeReadOnly_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NFC_MakeReadOnly_Params_Data>;

  NFC_MakeReadOnly_Params_Data();
  ~NFC_MakeReadOnly_Params_Data() = delete;
};
static_assert(sizeof(NFC_MakeReadOnly_Params_Data) == 8,
              "Bad sizeof(NFC_MakeReadOnly_Params_Data)");
class  NFC_MakeReadOnly_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::NDEFError_Data> error;

 private:
  friend class mojo::internal::MessageFragment<NFC_MakeReadOnly_ResponseParams_Data>;

  NFC_MakeReadOnly_ResponseParams_Data();
  ~NFC_MakeReadOnly_ResponseParams_Data() = delete;
};
static_assert(sizeof(NFC_MakeReadOnly_ResponseParams_Data) == 16,
              "Bad sizeof(NFC_MakeReadOnly_ResponseParams_Data)");
class  NFC_CancelMakeReadOnly_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NFC_CancelMakeReadOnly_Params_Data>;

  NFC_CancelMakeReadOnly_Params_Data();
  ~NFC_CancelMakeReadOnly_Params_Data() = delete;
};
static_assert(sizeof(NFC_CancelMakeReadOnly_Params_Data) == 8,
              "Bad sizeof(NFC_CancelMakeReadOnly_Params_Data)");
class  NFC_Watch_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NFC_Watch_Params_Data>;

  NFC_Watch_Params_Data();
  ~NFC_Watch_Params_Data() = delete;
};
static_assert(sizeof(NFC_Watch_Params_Data) == 16,
              "Bad sizeof(NFC_Watch_Params_Data)");
class  NFC_Watch_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::NDEFError_Data> error;

 private:
  friend class mojo::internal::MessageFragment<NFC_Watch_ResponseParams_Data>;

  NFC_Watch_ResponseParams_Data();
  ~NFC_Watch_ResponseParams_Data() = delete;
};
static_assert(sizeof(NFC_Watch_ResponseParams_Data) == 16,
              "Bad sizeof(NFC_Watch_ResponseParams_Data)");
class  NFC_CancelWatch_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NFC_CancelWatch_Params_Data>;

  NFC_CancelWatch_Params_Data();
  ~NFC_CancelWatch_Params_Data() = delete;
};
static_assert(sizeof(NFC_CancelWatch_Params_Data) == 16,
              "Bad sizeof(NFC_CancelWatch_Params_Data)");
class  NFCClient_OnWatch_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint32_t>> watch_ids;
  mojo::internal::Pointer<mojo::internal::String_Data> serial_number;
  mojo::internal::Pointer<internal::NDEFMessage_Data> message;

 private:
  friend class mojo::internal::MessageFragment<NFCClient_OnWatch_Params_Data>;

  NFCClient_OnWatch_Params_Data();
  ~NFCClient_OnWatch_Params_Data() = delete;
};
static_assert(sizeof(NFCClient_OnWatch_Params_Data) == 32,
              "Bad sizeof(NFCClient_OnWatch_Params_Data)");
class  NFCClient_OnError_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::NDEFError_Data> error;

 private:
  friend class mojo::internal::MessageFragment<NFCClient_OnError_Params_Data>;

  NFCClient_OnError_Params_Data();
  ~NFCClient_OnError_Params_Data() = delete;
};
static_assert(sizeof(NFCClient_OnError_Params_Data) == 16,
              "Bad sizeof(NFCClient_OnError_Params_Data)");

}  // namespace internal


class NFC_SetClient_ParamsDataView {
 public:
  NFC_SetClient_ParamsDataView() = default;

  NFC_SetClient_ParamsDataView(
      internal::NFC_SetClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::NFCClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NFC_SetClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NFC_Push_ParamsDataView {
 public:
  NFC_Push_ParamsDataView() = default;

  NFC_Push_ParamsDataView(
      internal::NFC_Push_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      NDEFMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::device::mojom::NDEFMessageDataView>(
        pointer, output, message_);
  }
  inline void GetOptionsDataView(
      NDEFWriteOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::device::mojom::NDEFWriteOptionsDataView, UserType>(),
    "Attempting to read the optional `options` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOptions` instead "
    "of `ReadOptions if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::device::mojom::NDEFWriteOptionsDataView>(
        pointer, output, message_);
  }
 private:
  internal::NFC_Push_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NFC_Push_ResponseParamsDataView {
 public:
  NFC_Push_ResponseParamsDataView() = default;

  NFC_Push_ResponseParamsDataView(
      internal::NFC_Push_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetErrorDataView(
      NDEFErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::device::mojom::NDEFErrorDataView, UserType>(),
    "Attempting to read the optional `error` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadError` instead "
    "of `ReadError if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error.Get();
    return mojo::internal::Deserialize<::device::mojom::NDEFErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::NFC_Push_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NFC_CancelPush_ParamsDataView {
 public:
  NFC_CancelPush_ParamsDataView() = default;

  NFC_CancelPush_ParamsDataView(
      internal::NFC_CancelPush_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NFC_CancelPush_Params_Data* data_ = nullptr;
};



class NFC_MakeReadOnly_ParamsDataView {
 public:
  NFC_MakeReadOnly_ParamsDataView() = default;

  NFC_MakeReadOnly_ParamsDataView(
      internal::NFC_MakeReadOnly_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NFC_MakeReadOnly_Params_Data* data_ = nullptr;
};



class NFC_MakeReadOnly_ResponseParamsDataView {
 public:
  NFC_MakeReadOnly_ResponseParamsDataView() = default;

  NFC_MakeReadOnly_ResponseParamsDataView(
      internal::NFC_MakeReadOnly_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetErrorDataView(
      NDEFErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::device::mojom::NDEFErrorDataView, UserType>(),
    "Attempting to read the optional `error` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadError` instead "
    "of `ReadError if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error.Get();
    return mojo::internal::Deserialize<::device::mojom::NDEFErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::NFC_MakeReadOnly_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NFC_CancelMakeReadOnly_ParamsDataView {
 public:
  NFC_CancelMakeReadOnly_ParamsDataView() = default;

  NFC_CancelMakeReadOnly_ParamsDataView(
      internal::NFC_CancelMakeReadOnly_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NFC_CancelMakeReadOnly_Params_Data* data_ = nullptr;
};



class NFC_Watch_ParamsDataView {
 public:
  NFC_Watch_ParamsDataView() = default;

  NFC_Watch_ParamsDataView(
      internal::NFC_Watch_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t id() const {
    return data_->id;
  }
 private:
  internal::NFC_Watch_Params_Data* data_ = nullptr;
};



class NFC_Watch_ResponseParamsDataView {
 public:
  NFC_Watch_ResponseParamsDataView() = default;

  NFC_Watch_ResponseParamsDataView(
      internal::NFC_Watch_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetErrorDataView(
      NDEFErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::device::mojom::NDEFErrorDataView, UserType>(),
    "Attempting to read the optional `error` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadError` instead "
    "of `ReadError if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error.Get();
    return mojo::internal::Deserialize<::device::mojom::NDEFErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::NFC_Watch_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NFC_CancelWatch_ParamsDataView {
 public:
  NFC_CancelWatch_ParamsDataView() = default;

  NFC_CancelWatch_ParamsDataView(
      internal::NFC_CancelWatch_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t id() const {
    return data_->id;
  }
 private:
  internal::NFC_CancelWatch_Params_Data* data_ = nullptr;
};



class NFCClient_OnWatch_ParamsDataView {
 public:
  NFCClient_OnWatch_ParamsDataView() = default;

  NFCClient_OnWatch_ParamsDataView(
      internal::NFCClient_OnWatch_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetWatchIdsDataView(
      mojo::ArrayDataView<uint32_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadWatchIds(UserType* output) {
    
    auto* pointer = data_->watch_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint32_t>>(
        pointer, output, message_);
  }
  inline void GetSerialNumberDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSerialNumber(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `serial_number` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSerialNumber` instead "
    "of `ReadSerialNumber if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->serial_number.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      NDEFMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::device::mojom::NDEFMessageDataView>(
        pointer, output, message_);
  }
 private:
  internal::NFCClient_OnWatch_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NFCClient_OnError_ParamsDataView {
 public:
  NFCClient_OnError_ParamsDataView() = default;

  NFCClient_OnError_ParamsDataView(
      internal::NFCClient_OnError_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetErrorDataView(
      NDEFErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) {
    
    auto* pointer = data_->error.Get();
    return mojo::internal::Deserialize<::device::mojom::NDEFErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::NFCClient_OnError_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void NFC_Push_ParamsDataView::GetMessageDataView(
    NDEFMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = NDEFMessageDataView(pointer, message_);
}
inline void NFC_Push_ParamsDataView::GetOptionsDataView(
    NDEFWriteOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = NDEFWriteOptionsDataView(pointer, message_);
}


inline void NFC_Push_ResponseParamsDataView::GetErrorDataView(
    NDEFErrorDataView* output) {
  auto pointer = data_->error.Get();
  *output = NDEFErrorDataView(pointer, message_);
}






inline void NFC_MakeReadOnly_ResponseParamsDataView::GetErrorDataView(
    NDEFErrorDataView* output) {
  auto pointer = data_->error.Get();
  *output = NDEFErrorDataView(pointer, message_);
}






inline void NFC_Watch_ResponseParamsDataView::GetErrorDataView(
    NDEFErrorDataView* output) {
  auto pointer = data_->error.Get();
  *output = NDEFErrorDataView(pointer, message_);
}




inline void NFCClient_OnWatch_ParamsDataView::GetWatchIdsDataView(
    mojo::ArrayDataView<uint32_t>* output) {
  auto pointer = data_->watch_ids.Get();
  *output = mojo::ArrayDataView<uint32_t>(pointer, message_);
}
inline void NFCClient_OnWatch_ParamsDataView::GetSerialNumberDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->serial_number.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NFCClient_OnWatch_ParamsDataView::GetMessageDataView(
    NDEFMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = NDEFMessageDataView(pointer, message_);
}


inline void NFCClient_OnError_ParamsDataView::GetErrorDataView(
    NDEFErrorDataView* output) {
  auto pointer = data_->error.Get();
  *output = NDEFErrorDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_NFC_MOJOM_PARAMS_DATA_H_