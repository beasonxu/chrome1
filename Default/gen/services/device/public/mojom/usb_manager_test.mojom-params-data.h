// services/device/public/mojom/usb_manager_test.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_TEST_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_TEST_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  UsbDeviceManagerTest_AddDeviceForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<mojo::internal::String_Data> serial_number;
  mojo::internal::Pointer<mojo::internal::String_Data> landing_page;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManagerTest_AddDeviceForTesting_Params_Data>;

  UsbDeviceManagerTest_AddDeviceForTesting_Params_Data();
  ~UsbDeviceManagerTest_AddDeviceForTesting_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_AddDeviceForTesting_Params_Data) == 32,
              "Bad sizeof(UsbDeviceManagerTest_AddDeviceForTesting_Params_Data)");
class  UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data>;

  UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data();
  ~UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data) == 24,
              "Bad sizeof(UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data)");
class  UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> guid;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data>;

  UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data();
  ~UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data) == 16,
              "Bad sizeof(UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data)");
class  UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data>;

  UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data();
  ~UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data) == 8,
              "Bad sizeof(UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data)");
class  UsbDeviceManagerTest_GetTestDevices_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManagerTest_GetTestDevices_Params_Data>;

  UsbDeviceManagerTest_GetTestDevices_Params_Data();
  ~UsbDeviceManagerTest_GetTestDevices_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_GetTestDevices_Params_Data) == 8,
              "Bad sizeof(UsbDeviceManagerTest_GetTestDevices_Params_Data)");
class  UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::TestDeviceInfo_Data>>> devices;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data>;

  UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data();
  ~UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data) == 16,
              "Bad sizeof(UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data)");

}  // namespace internal


class UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView {
 public:
  UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView() = default;

  UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView(
      internal::UsbDeviceManagerTest_AddDeviceForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSerialNumberDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSerialNumber(UserType* output) {
    
    auto* pointer = data_->serial_number.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetLandingPageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLandingPage(UserType* output) {
    
    auto* pointer = data_->landing_page.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::UsbDeviceManagerTest_AddDeviceForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsDataView {
 public:
  UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsDataView() = default;

  UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsDataView(
      internal::UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsDataView {
 public:
  UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsDataView() = default;

  UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsDataView(
      internal::UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetGuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGuid(UserType* output) {
    
    auto* pointer = data_->guid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsDataView {
 public:
  UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsDataView() = default;

  UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsDataView(
      internal::UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data* data_ = nullptr;
};



class UsbDeviceManagerTest_GetTestDevices_ParamsDataView {
 public:
  UsbDeviceManagerTest_GetTestDevices_ParamsDataView() = default;

  UsbDeviceManagerTest_GetTestDevices_ParamsDataView(
      internal::UsbDeviceManagerTest_GetTestDevices_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::UsbDeviceManagerTest_GetTestDevices_Params_Data* data_ = nullptr;
};



class UsbDeviceManagerTest_GetTestDevices_ResponseParamsDataView {
 public:
  UsbDeviceManagerTest_GetTestDevices_ResponseParamsDataView() = default;

  UsbDeviceManagerTest_GetTestDevices_ResponseParamsDataView(
      internal::UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDevicesDataView(
      mojo::ArrayDataView<TestDeviceInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevices(UserType* output) {
    
    auto* pointer = data_->devices.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::TestDeviceInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView::GetSerialNumberDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->serial_number.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView::GetLandingPageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->landing_page.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsDataView::GetGuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->guid.Get();
  *output = mojo::StringDataView(pointer, message_);
}






inline void UsbDeviceManagerTest_GetTestDevices_ResponseParamsDataView::GetDevicesDataView(
    mojo::ArrayDataView<TestDeviceInfoDataView>* output) {
  auto pointer = data_->devices.Get();
  *output = mojo::ArrayDataView<TestDeviceInfoDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_TEST_MOJOM_PARAMS_DATA_H_