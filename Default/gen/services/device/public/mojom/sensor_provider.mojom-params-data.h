// services/device/public/mojom/sensor_provider.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_SENSOR_PROVIDER_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_SENSOR_PROVIDER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  SensorProvider_GetSensor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SensorProvider_GetSensor_Params_Data>;

  SensorProvider_GetSensor_Params_Data();
  ~SensorProvider_GetSensor_Params_Data() = delete;
};
static_assert(sizeof(SensorProvider_GetSensor_Params_Data) == 16,
              "Bad sizeof(SensorProvider_GetSensor_Params_Data)");
class  SensorProvider_GetSensor_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::SensorInitParams_Data> init_params;

 private:
  friend class mojo::internal::MessageFragment<SensorProvider_GetSensor_ResponseParams_Data>;

  SensorProvider_GetSensor_ResponseParams_Data();
  ~SensorProvider_GetSensor_ResponseParams_Data() = delete;
};
static_assert(sizeof(SensorProvider_GetSensor_ResponseParams_Data) == 24,
              "Bad sizeof(SensorProvider_GetSensor_ResponseParams_Data)");

}  // namespace internal


class SensorProvider_GetSensor_ParamsDataView {
 public:
  SensorProvider_GetSensor_ParamsDataView() = default;

  SensorProvider_GetSensor_ParamsDataView(
      internal::SensorProvider_GetSensor_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::device::mojom::SensorType>(
        data_value, output);
  }
  ::device::mojom::SensorType type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::SensorType>(data_->type));
  }
 private:
  internal::SensorProvider_GetSensor_Params_Data* data_ = nullptr;
};



class SensorProvider_GetSensor_ResponseParamsDataView {
 public:
  SensorProvider_GetSensor_ResponseParamsDataView() = default;

  SensorProvider_GetSensor_ResponseParamsDataView(
      internal::SensorProvider_GetSensor_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::device::mojom::SensorCreationResult>(
        data_value, output);
  }
  SensorCreationResult result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::SensorCreationResult>(data_->result));
  }
  inline void GetInitParamsDataView(
      SensorInitParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInitParams(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::device::mojom::SensorInitParamsDataView, UserType>(),
    "Attempting to read the optional `init_params` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadInitParams` instead "
    "of `ReadInitParams if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->init_params.Get();
    return mojo::internal::Deserialize<::device::mojom::SensorInitParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::SensorProvider_GetSensor_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void SensorProvider_GetSensor_ResponseParamsDataView::GetInitParamsDataView(
    SensorInitParamsDataView* output) {
  auto pointer = data_->init_params.Get();
  *output = SensorInitParamsDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_SENSOR_PROVIDER_MOJOM_PARAMS_DATA_H_