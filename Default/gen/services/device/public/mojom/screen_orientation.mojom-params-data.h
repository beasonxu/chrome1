// services/device/public/mojom/screen_orientation.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_SCREEN_ORIENTATION_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_SCREEN_ORIENTATION_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  ScreenOrientation_LockOrientation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t orientation;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ScreenOrientation_LockOrientation_Params_Data>;

  ScreenOrientation_LockOrientation_Params_Data();
  ~ScreenOrientation_LockOrientation_Params_Data() = delete;
};
static_assert(sizeof(ScreenOrientation_LockOrientation_Params_Data) == 16,
              "Bad sizeof(ScreenOrientation_LockOrientation_Params_Data)");
class  ScreenOrientation_LockOrientation_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ScreenOrientation_LockOrientation_ResponseParams_Data>;

  ScreenOrientation_LockOrientation_ResponseParams_Data();
  ~ScreenOrientation_LockOrientation_ResponseParams_Data() = delete;
};
static_assert(sizeof(ScreenOrientation_LockOrientation_ResponseParams_Data) == 16,
              "Bad sizeof(ScreenOrientation_LockOrientation_ResponseParams_Data)");
class  ScreenOrientation_UnlockOrientation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ScreenOrientation_UnlockOrientation_Params_Data>;

  ScreenOrientation_UnlockOrientation_Params_Data();
  ~ScreenOrientation_UnlockOrientation_Params_Data() = delete;
};
static_assert(sizeof(ScreenOrientation_UnlockOrientation_Params_Data) == 8,
              "Bad sizeof(ScreenOrientation_UnlockOrientation_Params_Data)");
class  ScreenOrientationListener_IsAutoRotateEnabledByUser_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ScreenOrientationListener_IsAutoRotateEnabledByUser_Params_Data>;

  ScreenOrientationListener_IsAutoRotateEnabledByUser_Params_Data();
  ~ScreenOrientationListener_IsAutoRotateEnabledByUser_Params_Data() = delete;
};
static_assert(sizeof(ScreenOrientationListener_IsAutoRotateEnabledByUser_Params_Data) == 8,
              "Bad sizeof(ScreenOrientationListener_IsAutoRotateEnabledByUser_Params_Data)");
class  ScreenOrientationListener_IsAutoRotateEnabledByUser_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t enabled : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<ScreenOrientationListener_IsAutoRotateEnabledByUser_ResponseParams_Data>;

  ScreenOrientationListener_IsAutoRotateEnabledByUser_ResponseParams_Data();
  ~ScreenOrientationListener_IsAutoRotateEnabledByUser_ResponseParams_Data() = delete;
};
static_assert(sizeof(ScreenOrientationListener_IsAutoRotateEnabledByUser_ResponseParams_Data) == 16,
              "Bad sizeof(ScreenOrientationListener_IsAutoRotateEnabledByUser_ResponseParams_Data)");

}  // namespace internal


class ScreenOrientation_LockOrientation_ParamsDataView {
 public:
  ScreenOrientation_LockOrientation_ParamsDataView() = default;

  ScreenOrientation_LockOrientation_ParamsDataView(
      internal::ScreenOrientation_LockOrientation_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadOrientation(UserType* output) const {
    auto data_value = data_->orientation;
    return mojo::internal::Deserialize<::device::mojom::ScreenOrientationLockType>(
        data_value, output);
  }
  ::device::mojom::ScreenOrientationLockType orientation() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::ScreenOrientationLockType>(data_->orientation));
  }
 private:
  internal::ScreenOrientation_LockOrientation_Params_Data* data_ = nullptr;
};



class ScreenOrientation_LockOrientation_ResponseParamsDataView {
 public:
  ScreenOrientation_LockOrientation_ResponseParamsDataView() = default;

  ScreenOrientation_LockOrientation_ResponseParamsDataView(
      internal::ScreenOrientation_LockOrientation_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::device::mojom::ScreenOrientationLockResult>(
        data_value, output);
  }
  ::device::mojom::ScreenOrientationLockResult result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::ScreenOrientationLockResult>(data_->result));
  }
 private:
  internal::ScreenOrientation_LockOrientation_ResponseParams_Data* data_ = nullptr;
};



class ScreenOrientation_UnlockOrientation_ParamsDataView {
 public:
  ScreenOrientation_UnlockOrientation_ParamsDataView() = default;

  ScreenOrientation_UnlockOrientation_ParamsDataView(
      internal::ScreenOrientation_UnlockOrientation_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ScreenOrientation_UnlockOrientation_Params_Data* data_ = nullptr;
};



class ScreenOrientationListener_IsAutoRotateEnabledByUser_ParamsDataView {
 public:
  ScreenOrientationListener_IsAutoRotateEnabledByUser_ParamsDataView() = default;

  ScreenOrientationListener_IsAutoRotateEnabledByUser_ParamsDataView(
      internal::ScreenOrientationListener_IsAutoRotateEnabledByUser_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ScreenOrientationListener_IsAutoRotateEnabledByUser_Params_Data* data_ = nullptr;
};



class ScreenOrientationListener_IsAutoRotateEnabledByUser_ResponseParamsDataView {
 public:
  ScreenOrientationListener_IsAutoRotateEnabledByUser_ResponseParamsDataView() = default;

  ScreenOrientationListener_IsAutoRotateEnabledByUser_ResponseParamsDataView(
      internal::ScreenOrientationListener_IsAutoRotateEnabledByUser_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool enabled() const {
    return data_->enabled;
  }
 private:
  internal::ScreenOrientationListener_IsAutoRotateEnabledByUser_ResponseParams_Data* data_ = nullptr;
};











}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_SCREEN_ORIENTATION_MOJOM_PARAMS_DATA_H_