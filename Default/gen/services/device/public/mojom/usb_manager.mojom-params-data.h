// services/device/public/mojom/usb_manager.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  UsbDeviceManager_EnumerateDevicesAndSetClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data client;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManager_EnumerateDevicesAndSetClient_Params_Data>;

  UsbDeviceManager_EnumerateDevicesAndSetClient_Params_Data();
  ~UsbDeviceManager_EnumerateDevicesAndSetClient_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManager_EnumerateDevicesAndSetClient_Params_Data) == 16,
              "Bad sizeof(UsbDeviceManager_EnumerateDevicesAndSetClient_Params_Data)");
class  UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::device::mojom::internal::UsbDeviceInfo_Data>>> results;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParams_Data>;

  UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParams_Data();
  ~UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParams_Data() = delete;
};
static_assert(sizeof(UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParams_Data) == 16,
              "Bad sizeof(UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParams_Data)");
class  UsbDeviceManager_GetDevices_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::device::mojom::internal::UsbEnumerationOptions_Data> options;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManager_GetDevices_Params_Data>;

  UsbDeviceManager_GetDevices_Params_Data();
  ~UsbDeviceManager_GetDevices_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManager_GetDevices_Params_Data) == 16,
              "Bad sizeof(UsbDeviceManager_GetDevices_Params_Data)");
class  UsbDeviceManager_GetDevices_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::device::mojom::internal::UsbDeviceInfo_Data>>> results;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManager_GetDevices_ResponseParams_Data>;

  UsbDeviceManager_GetDevices_ResponseParams_Data();
  ~UsbDeviceManager_GetDevices_ResponseParams_Data() = delete;
};
static_assert(sizeof(UsbDeviceManager_GetDevices_ResponseParams_Data) == 16,
              "Bad sizeof(UsbDeviceManager_GetDevices_ResponseParams_Data)");
class  UsbDeviceManager_GetDevice_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> guid;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> blocked_interface_classes;
  mojo::internal::Handle_Data device_receiver;
  mojo::internal::Interface_Data device_client;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManager_GetDevice_Params_Data>;

  UsbDeviceManager_GetDevice_Params_Data();
  ~UsbDeviceManager_GetDevice_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManager_GetDevice_Params_Data) == 40,
              "Bad sizeof(UsbDeviceManager_GetDevice_Params_Data)");
class  UsbDeviceManager_GetSecurityKeyDevice_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> guid;
  mojo::internal::Handle_Data device_receiver;
  mojo::internal::Interface_Data device_client;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManager_GetSecurityKeyDevice_Params_Data>;

  UsbDeviceManager_GetSecurityKeyDevice_Params_Data();
  ~UsbDeviceManager_GetSecurityKeyDevice_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManager_GetSecurityKeyDevice_Params_Data) == 32,
              "Bad sizeof(UsbDeviceManager_GetSecurityKeyDevice_Params_Data)");
class  UsbDeviceManager_RefreshDeviceInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> guid;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManager_RefreshDeviceInfo_Params_Data>;

  UsbDeviceManager_RefreshDeviceInfo_Params_Data();
  ~UsbDeviceManager_RefreshDeviceInfo_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManager_RefreshDeviceInfo_Params_Data) == 16,
              "Bad sizeof(UsbDeviceManager_RefreshDeviceInfo_Params_Data)");
class  UsbDeviceManager_RefreshDeviceInfo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::device::mojom::internal::UsbDeviceInfo_Data> device_info;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManager_RefreshDeviceInfo_ResponseParams_Data>;

  UsbDeviceManager_RefreshDeviceInfo_ResponseParams_Data();
  ~UsbDeviceManager_RefreshDeviceInfo_ResponseParams_Data() = delete;
};
static_assert(sizeof(UsbDeviceManager_RefreshDeviceInfo_ResponseParams_Data) == 16,
              "Bad sizeof(UsbDeviceManager_RefreshDeviceInfo_ResponseParams_Data)");
class  UsbDeviceManager_SetClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data client;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManager_SetClient_Params_Data>;

  UsbDeviceManager_SetClient_Params_Data();
  ~UsbDeviceManager_SetClient_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManager_SetClient_Params_Data) == 16,
              "Bad sizeof(UsbDeviceManager_SetClient_Params_Data)");

}  // namespace internal


class UsbDeviceManager_EnumerateDevicesAndSetClient_ParamsDataView {
 public:
  UsbDeviceManager_EnumerateDevicesAndSetClient_ParamsDataView() = default;

  UsbDeviceManager_EnumerateDevicesAndSetClient_ParamsDataView(
      internal::UsbDeviceManager_EnumerateDevicesAndSetClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::device::mojom::UsbDeviceManagerClientAssociatedPtrInfoDataView>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::UsbDeviceManager_EnumerateDevicesAndSetClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParamsDataView {
 public:
  UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParamsDataView() = default;

  UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParamsDataView(
      internal::UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultsDataView(
      mojo::ArrayDataView<::device::mojom::UsbDeviceInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResults(UserType* output) {
    
    auto* pointer = data_->results.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::UsbDeviceInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManager_GetDevices_ParamsDataView {
 public:
  UsbDeviceManager_GetDevices_ParamsDataView() = default;

  UsbDeviceManager_GetDevices_ParamsDataView(
      internal::UsbDeviceManager_GetDevices_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOptionsDataView(
      ::device::mojom::UsbEnumerationOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::device::mojom::UsbEnumerationOptionsDataView, UserType>(),
    "Attempting to read the optional `options` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOptions` instead "
    "of `ReadOptions if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::device::mojom::UsbEnumerationOptionsDataView>(
        pointer, output, message_);
  }
 private:
  internal::UsbDeviceManager_GetDevices_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManager_GetDevices_ResponseParamsDataView {
 public:
  UsbDeviceManager_GetDevices_ResponseParamsDataView() = default;

  UsbDeviceManager_GetDevices_ResponseParamsDataView(
      internal::UsbDeviceManager_GetDevices_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultsDataView(
      mojo::ArrayDataView<::device::mojom::UsbDeviceInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResults(UserType* output) {
    
    auto* pointer = data_->results.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::UsbDeviceInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::UsbDeviceManager_GetDevices_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManager_GetDevice_ParamsDataView {
 public:
  UsbDeviceManager_GetDevice_ParamsDataView() = default;

  UsbDeviceManager_GetDevice_ParamsDataView(
      internal::UsbDeviceManager_GetDevice_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetGuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGuid(UserType* output) {
    
    auto* pointer = data_->guid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetBlockedInterfaceClassesDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBlockedInterfaceClasses(UserType* output) {
    
    auto* pointer = data_->blocked_interface_classes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeDeviceReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::UsbDeviceInterfaceBase>>(
            &data_->device_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeDeviceClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::UsbDeviceClientInterfaceBase>>(
            &data_->device_client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::UsbDeviceManager_GetDevice_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManager_GetSecurityKeyDevice_ParamsDataView {
 public:
  UsbDeviceManager_GetSecurityKeyDevice_ParamsDataView() = default;

  UsbDeviceManager_GetSecurityKeyDevice_ParamsDataView(
      internal::UsbDeviceManager_GetSecurityKeyDevice_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetGuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGuid(UserType* output) {
    
    auto* pointer = data_->guid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeDeviceReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::UsbDeviceInterfaceBase>>(
            &data_->device_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeDeviceClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::UsbDeviceClientInterfaceBase>>(
            &data_->device_client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::UsbDeviceManager_GetSecurityKeyDevice_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManager_RefreshDeviceInfo_ParamsDataView {
 public:
  UsbDeviceManager_RefreshDeviceInfo_ParamsDataView() = default;

  UsbDeviceManager_RefreshDeviceInfo_ParamsDataView(
      internal::UsbDeviceManager_RefreshDeviceInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetGuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGuid(UserType* output) {
    
    auto* pointer = data_->guid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::UsbDeviceManager_RefreshDeviceInfo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManager_RefreshDeviceInfo_ResponseParamsDataView {
 public:
  UsbDeviceManager_RefreshDeviceInfo_ResponseParamsDataView() = default;

  UsbDeviceManager_RefreshDeviceInfo_ResponseParamsDataView(
      internal::UsbDeviceManager_RefreshDeviceInfo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfoDataView(
      ::device::mojom::UsbDeviceInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::device::mojom::UsbDeviceInfoDataView, UserType>(),
    "Attempting to read the optional `device_info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadDeviceInfo` instead "
    "of `ReadDeviceInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->device_info.Get();
    return mojo::internal::Deserialize<::device::mojom::UsbDeviceInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::UsbDeviceManager_RefreshDeviceInfo_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManager_SetClient_ParamsDataView {
 public:
  UsbDeviceManager_SetClient_ParamsDataView() = default;

  UsbDeviceManager_SetClient_ParamsDataView(
      internal::UsbDeviceManager_SetClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::device::mojom::UsbDeviceManagerClientAssociatedPtrInfoDataView>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::UsbDeviceManager_SetClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void UsbDeviceManager_EnumerateDevicesAndSetClient_ResponseParamsDataView::GetResultsDataView(
    mojo::ArrayDataView<::device::mojom::UsbDeviceInfoDataView>* output) {
  auto pointer = data_->results.Get();
  *output = mojo::ArrayDataView<::device::mojom::UsbDeviceInfoDataView>(pointer, message_);
}


inline void UsbDeviceManager_GetDevices_ParamsDataView::GetOptionsDataView(
    ::device::mojom::UsbEnumerationOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = ::device::mojom::UsbEnumerationOptionsDataView(pointer, message_);
}


inline void UsbDeviceManager_GetDevices_ResponseParamsDataView::GetResultsDataView(
    mojo::ArrayDataView<::device::mojom::UsbDeviceInfoDataView>* output) {
  auto pointer = data_->results.Get();
  *output = mojo::ArrayDataView<::device::mojom::UsbDeviceInfoDataView>(pointer, message_);
}


inline void UsbDeviceManager_GetDevice_ParamsDataView::GetGuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->guid.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void UsbDeviceManager_GetDevice_ParamsDataView::GetBlockedInterfaceClassesDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->blocked_interface_classes.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}


inline void UsbDeviceManager_GetSecurityKeyDevice_ParamsDataView::GetGuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->guid.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void UsbDeviceManager_RefreshDeviceInfo_ParamsDataView::GetGuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->guid.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void UsbDeviceManager_RefreshDeviceInfo_ResponseParamsDataView::GetDeviceInfoDataView(
    ::device::mojom::UsbDeviceInfoDataView* output) {
  auto pointer = data_->device_info.Get();
  *output = ::device::mojom::UsbDeviceInfoDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_MOJOM_PARAMS_DATA_H_