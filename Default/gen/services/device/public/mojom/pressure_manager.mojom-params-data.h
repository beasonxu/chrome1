// services/device/public/mojom/pressure_manager.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_PRESSURE_MANAGER_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_PRESSURE_MANAGER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  PressureManager_AddClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<PressureManager_AddClient_Params_Data>;

  PressureManager_AddClient_Params_Data();
  ~PressureManager_AddClient_Params_Data() = delete;
};
static_assert(sizeof(PressureManager_AddClient_Params_Data) == 16,
              "Bad sizeof(PressureManager_AddClient_Params_Data)");
class  PressureManager_AddClient_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<PressureManager_AddClient_ResponseParams_Data>;

  PressureManager_AddClient_ResponseParams_Data();
  ~PressureManager_AddClient_ResponseParams_Data() = delete;
};
static_assert(sizeof(PressureManager_AddClient_ResponseParams_Data) == 16,
              "Bad sizeof(PressureManager_AddClient_ResponseParams_Data)");
class  PressureClient_PressureStateChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::device::mojom::internal::PressureState_Data> state;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> timestamp;

 private:
  friend class mojo::internal::MessageFragment<PressureClient_PressureStateChanged_Params_Data>;

  PressureClient_PressureStateChanged_Params_Data();
  ~PressureClient_PressureStateChanged_Params_Data() = delete;
};
static_assert(sizeof(PressureClient_PressureStateChanged_Params_Data) == 24,
              "Bad sizeof(PressureClient_PressureStateChanged_Params_Data)");

}  // namespace internal


class PressureManager_AddClient_ParamsDataView {
 public:
  PressureManager_AddClient_ParamsDataView() = default;

  PressureManager_AddClient_ParamsDataView(
      internal::PressureManager_AddClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::PressureClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::PressureManager_AddClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PressureManager_AddClient_ResponseParamsDataView {
 public:
  PressureManager_AddClient_ResponseParamsDataView() = default;

  PressureManager_AddClient_ResponseParamsDataView(
      internal::PressureManager_AddClient_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::PressureManager_AddClient_ResponseParams_Data* data_ = nullptr;
};



class PressureClient_PressureStateChanged_ParamsDataView {
 public:
  PressureClient_PressureStateChanged_ParamsDataView() = default;

  PressureClient_PressureStateChanged_ParamsDataView(
      internal::PressureClient_PressureStateChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStateDataView(
      ::device::mojom::PressureStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) {
    
    auto* pointer = data_->state.Get();
    return mojo::internal::Deserialize<::device::mojom::PressureStateDataView>(
        pointer, output, message_);
  }
  inline void GetTimestampDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTimestamp(UserType* output) {
    
    auto* pointer = data_->timestamp.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
 private:
  internal::PressureClient_PressureStateChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};






inline void PressureClient_PressureStateChanged_ParamsDataView::GetStateDataView(
    ::device::mojom::PressureStateDataView* output) {
  auto pointer = data_->state.Get();
  *output = ::device::mojom::PressureStateDataView(pointer, message_);
}
inline void PressureClient_PressureStateChanged_ParamsDataView::GetTimestampDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->timestamp.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_PRESSURE_MANAGER_MOJOM_PARAMS_DATA_H_