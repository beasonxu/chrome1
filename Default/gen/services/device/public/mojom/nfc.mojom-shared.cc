// services/device/public/mojom/nfc.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "services/device/public/mojom/nfc.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/device/public/mojom/nfc.mojom-params-data.h"
namespace device {
namespace mojom {

static NOINLINE const char* NDEFErrorTypeToStringHelper(NDEFErrorType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case NDEFErrorType::NOT_ALLOWED:
      return "NOT_ALLOWED";
    case NDEFErrorType::NOT_SUPPORTED:
      return "NOT_SUPPORTED";
    case NDEFErrorType::NOT_READABLE:
      return "NOT_READABLE";
    case NDEFErrorType::INVALID_MESSAGE:
      return "INVALID_MESSAGE";
    case NDEFErrorType::OPERATION_CANCELLED:
      return "OPERATION_CANCELLED";
    case NDEFErrorType::IO_ERROR:
      return "IO_ERROR";
    default:
      return nullptr;
  }
}

std::string NDEFErrorTypeToString(NDEFErrorType value) {
  const char *str = NDEFErrorTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown NDEFErrorType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, NDEFErrorType value) {
  return os << NDEFErrorTypeToString(value);
}

static NOINLINE const char* NDEFRecordTypeCategoryToStringHelper(NDEFRecordTypeCategory value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case NDEFRecordTypeCategory::kStandardized:
      return "kStandardized";
    case NDEFRecordTypeCategory::kExternal:
      return "kExternal";
    case NDEFRecordTypeCategory::kLocal:
      return "kLocal";
    default:
      return nullptr;
  }
}

std::string NDEFRecordTypeCategoryToString(NDEFRecordTypeCategory value) {
  const char *str = NDEFRecordTypeCategoryToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown NDEFRecordTypeCategory value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, NDEFRecordTypeCategory value) {
  return os << NDEFRecordTypeCategoryToString(value);
}

namespace internal {


// static
bool NDEFError_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NDEFError_Data* object =
      static_cast<const NDEFError_Data*>(data);


  if (!::device::mojom::internal::NDEFErrorType_Data
        ::Validate(object->error_type, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->error_message, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams error_message_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error_message, validation_context,
                                         &error_message_validate_params)) {
    return false;
  }

  return true;
}

NDEFError_Data::NDEFError_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NDEFRecord_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 72, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NDEFRecord_Data* object =
      static_cast<const NDEFRecord_Data*>(data);


  if (!::device::mojom::internal::NDEFRecordTypeCategory_Data
        ::Validate(object->category, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->record_type, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams record_type_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->record_type, validation_context,
                                         &record_type_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams media_type_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->media_type, validation_context,
                                         &media_type_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->id, validation_context,
                                         &id_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams encoding_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->encoding, validation_context,
                                         &encoding_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams lang_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->lang, validation_context,
                                         &lang_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 7, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->data, validation_context,
                                         &data_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->payload_message, validation_context))
    return false;

  return true;
}

NDEFRecord_Data::NDEFRecord_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NDEFMessage_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NDEFMessage_Data* object =
      static_cast<const NDEFMessage_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->data, validation_context,
                                         &data_validate_params)) {
    return false;
  }

  return true;
}

NDEFMessage_Data::NDEFMessage_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NDEFWriteOptions_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NDEFWriteOptions_Data* object =
      static_cast<const NDEFWriteOptions_Data*>(data);

  return true;
}

NDEFWriteOptions_Data::NDEFWriteOptions_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFC_SetClient_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFC_SetClient_Params_Data* object =
      static_cast<const NFC_SetClient_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->client, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->client,
                                                 validation_context)) {
    return false;
  }

  return true;
}

NFC_SetClient_Params_Data::NFC_SetClient_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFC_Push_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFC_Push_Params_Data* object =
      static_cast<const NFC_Push_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->message, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->message, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->options, validation_context))
    return false;

  return true;
}

NFC_Push_Params_Data::NFC_Push_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFC_Push_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFC_Push_ResponseParams_Data* object =
      static_cast<const NFC_Push_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->error, validation_context))
    return false;

  return true;
}

NFC_Push_ResponseParams_Data::NFC_Push_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFC_CancelPush_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFC_CancelPush_Params_Data* object =
      static_cast<const NFC_CancelPush_Params_Data*>(data);

  return true;
}

NFC_CancelPush_Params_Data::NFC_CancelPush_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFC_MakeReadOnly_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFC_MakeReadOnly_Params_Data* object =
      static_cast<const NFC_MakeReadOnly_Params_Data*>(data);

  return true;
}

NFC_MakeReadOnly_Params_Data::NFC_MakeReadOnly_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFC_MakeReadOnly_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFC_MakeReadOnly_ResponseParams_Data* object =
      static_cast<const NFC_MakeReadOnly_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->error, validation_context))
    return false;

  return true;
}

NFC_MakeReadOnly_ResponseParams_Data::NFC_MakeReadOnly_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFC_CancelMakeReadOnly_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFC_CancelMakeReadOnly_Params_Data* object =
      static_cast<const NFC_CancelMakeReadOnly_Params_Data*>(data);

  return true;
}

NFC_CancelMakeReadOnly_Params_Data::NFC_CancelMakeReadOnly_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFC_Watch_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFC_Watch_Params_Data* object =
      static_cast<const NFC_Watch_Params_Data*>(data);

  return true;
}

NFC_Watch_Params_Data::NFC_Watch_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFC_Watch_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFC_Watch_ResponseParams_Data* object =
      static_cast<const NFC_Watch_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->error, validation_context))
    return false;

  return true;
}

NFC_Watch_ResponseParams_Data::NFC_Watch_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFC_CancelWatch_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFC_CancelWatch_Params_Data* object =
      static_cast<const NFC_CancelWatch_Params_Data*>(data);

  return true;
}

NFC_CancelWatch_Params_Data::NFC_CancelWatch_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFCClient_OnWatch_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFCClient_OnWatch_Params_Data* object =
      static_cast<const NFCClient_OnWatch_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->watch_ids, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams watch_ids_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->watch_ids, validation_context,
                                         &watch_ids_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams serial_number_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->serial_number, validation_context,
                                         &serial_number_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->message, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->message, validation_context))
    return false;

  return true;
}

NFCClient_OnWatch_Params_Data::NFCClient_OnWatch_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NFCClient_OnError_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NFCClient_OnError_Params_Data* object =
      static_cast<const NFCClient_OnError_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->error, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->error, validation_context))
    return false;

  return true;
}

NFCClient_OnError_Params_Data::NFCClient_OnError_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace device

namespace perfetto {

// static
void TraceFormatTraits<::device::mojom::NDEFErrorType>::WriteIntoTrace(
   perfetto::TracedValue context, ::device::mojom::NDEFErrorType value) {
  return std::move(context).WriteString(::device::mojom::NDEFErrorTypeToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::device::mojom::NDEFRecordTypeCategory>::WriteIntoTrace(
   perfetto::TracedValue context, ::device::mojom::NDEFRecordTypeCategory value) {
  return std::move(context).WriteString(::device::mojom::NDEFRecordTypeCategoryToString(value));
}

} // namespace perfetto