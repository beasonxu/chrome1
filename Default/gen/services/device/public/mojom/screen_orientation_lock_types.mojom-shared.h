// services/device/public/mojom/screen_orientation_lock_types.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_SCREEN_ORIENTATION_LOCK_TYPES_MOJOM_SHARED_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_SCREEN_ORIENTATION_LOCK_TYPES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/device/public/mojom/screen_orientation_lock_types.mojom-shared-internal.h"







namespace device {
namespace mojom {


}  // namespace mojom
}  // namespace device

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace device {
namespace mojom {


enum class ScreenOrientationLockResult : int32_t {
  
  SCREEN_ORIENTATION_LOCK_RESULT_SUCCESS = 0,
  
  SCREEN_ORIENTATION_LOCK_RESULT_ERROR_NOT_AVAILABLE = 1,
  
  SCREEN_ORIENTATION_LOCK_RESULT_ERROR_FULLSCREEN_REQUIRED = 2,
  
  SCREEN_ORIENTATION_LOCK_RESULT_ERROR_CANCELED = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, ScreenOrientationLockResult value);
inline bool IsKnownEnumValue(ScreenOrientationLockResult value) {
  return internal::ScreenOrientationLockResult_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ScreenOrientationLockType : int32_t {
  
  DEFAULT = 0,
  
  PORTRAIT_PRIMARY = 1,
  
  PORTRAIT_SECONDARY = 2,
  
  LANDSCAPE_PRIMARY = 3,
  
  LANDSCAPE_SECONDARY = 4,
  
  ANY = 5,
  
  LANDSCAPE = 6,
  
  PORTRAIT = 7,
  
  NATURAL = 8,
  kMinValue = 0,
  kMaxValue = 8,
};

 std::ostream& operator<<(std::ostream& os, ScreenOrientationLockType value);
inline bool IsKnownEnumValue(ScreenOrientationLockType value) {
  return internal::ScreenOrientationLockType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace device

namespace std {

template <>
struct hash<::device::mojom::ScreenOrientationLockResult>
    : public mojo::internal::EnumHashImpl<::device::mojom::ScreenOrientationLockResult> {};

template <>
struct hash<::device::mojom::ScreenOrientationLockType>
    : public mojo::internal::EnumHashImpl<::device::mojom::ScreenOrientationLockType> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::device::mojom::ScreenOrientationLockResult, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::device::mojom::ScreenOrientationLockResult, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::device::mojom::ScreenOrientationLockResult>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::device::mojom::ScreenOrientationLockType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::device::mojom::ScreenOrientationLockType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::device::mojom::ScreenOrientationLockType>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace device {
namespace mojom {


}  // namespace mojom
}  // namespace device

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::device::mojom::ScreenOrientationLockResult> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::device::mojom::ScreenOrientationLockResult value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::device::mojom::ScreenOrientationLockType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::device::mojom::ScreenOrientationLockType value);
};

} // namespace perfetto

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_SCREEN_ORIENTATION_LOCK_TYPES_MOJOM_SHARED_H_