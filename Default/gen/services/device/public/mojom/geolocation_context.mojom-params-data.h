// services/device/public/mojom/geolocation_context.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_GEOLOCATION_CONTEXT_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_GEOLOCATION_CONTEXT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  GeolocationContext_BindGeolocation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> origin;

 private:
  friend class mojo::internal::MessageFragment<GeolocationContext_BindGeolocation_Params_Data>;

  GeolocationContext_BindGeolocation_Params_Data();
  ~GeolocationContext_BindGeolocation_Params_Data() = delete;
};
static_assert(sizeof(GeolocationContext_BindGeolocation_Params_Data) == 24,
              "Bad sizeof(GeolocationContext_BindGeolocation_Params_Data)");
class  GeolocationContext_SetOverride_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::device::mojom::internal::Geoposition_Data> geoposition;

 private:
  friend class mojo::internal::MessageFragment<GeolocationContext_SetOverride_Params_Data>;

  GeolocationContext_SetOverride_Params_Data();
  ~GeolocationContext_SetOverride_Params_Data() = delete;
};
static_assert(sizeof(GeolocationContext_SetOverride_Params_Data) == 16,
              "Bad sizeof(GeolocationContext_SetOverride_Params_Data)");
class  GeolocationContext_ClearOverride_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<GeolocationContext_ClearOverride_Params_Data>;

  GeolocationContext_ClearOverride_Params_Data();
  ~GeolocationContext_ClearOverride_Params_Data() = delete;
};
static_assert(sizeof(GeolocationContext_ClearOverride_Params_Data) == 8,
              "Bad sizeof(GeolocationContext_ClearOverride_Params_Data)");

}  // namespace internal


class GeolocationContext_BindGeolocation_ParamsDataView {
 public:
  GeolocationContext_BindGeolocation_ParamsDataView() = default;

  GeolocationContext_BindGeolocation_ParamsDataView(
      internal::GeolocationContext_BindGeolocation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::GeolocationInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetOriginDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::GeolocationContext_BindGeolocation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GeolocationContext_SetOverride_ParamsDataView {
 public:
  GeolocationContext_SetOverride_ParamsDataView() = default;

  GeolocationContext_SetOverride_ParamsDataView(
      internal::GeolocationContext_SetOverride_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetGeopositionDataView(
      ::device::mojom::GeopositionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGeoposition(UserType* output) {
    
    auto* pointer = data_->geoposition.Get();
    return mojo::internal::Deserialize<::device::mojom::GeopositionDataView>(
        pointer, output, message_);
  }
 private:
  internal::GeolocationContext_SetOverride_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GeolocationContext_ClearOverride_ParamsDataView {
 public:
  GeolocationContext_ClearOverride_ParamsDataView() = default;

  GeolocationContext_ClearOverride_ParamsDataView(
      internal::GeolocationContext_ClearOverride_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::GeolocationContext_ClearOverride_Params_Data* data_ = nullptr;
};


inline void GeolocationContext_BindGeolocation_ParamsDataView::GetOriginDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void GeolocationContext_SetOverride_ParamsDataView::GetGeopositionDataView(
    ::device::mojom::GeopositionDataView* output) {
  auto pointer = data_->geoposition.Get();
  *output = ::device::mojom::GeopositionDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_GEOLOCATION_CONTEXT_MOJOM_PARAMS_DATA_H_