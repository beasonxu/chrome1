// services/device/public/mojom/input_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_INPUT_SERVICE_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_INPUT_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  InputDeviceManagerClient_InputDeviceAdded_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::InputDeviceInfo_Data> device_info;

 private:
  friend class mojo::internal::MessageFragment<InputDeviceManagerClient_InputDeviceAdded_Params_Data>;

  InputDeviceManagerClient_InputDeviceAdded_Params_Data();
  ~InputDeviceManagerClient_InputDeviceAdded_Params_Data() = delete;
};
static_assert(sizeof(InputDeviceManagerClient_InputDeviceAdded_Params_Data) == 16,
              "Bad sizeof(InputDeviceManagerClient_InputDeviceAdded_Params_Data)");
class  InputDeviceManagerClient_InputDeviceRemoved_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  friend class mojo::internal::MessageFragment<InputDeviceManagerClient_InputDeviceRemoved_Params_Data>;

  InputDeviceManagerClient_InputDeviceRemoved_Params_Data();
  ~InputDeviceManagerClient_InputDeviceRemoved_Params_Data() = delete;
};
static_assert(sizeof(InputDeviceManagerClient_InputDeviceRemoved_Params_Data) == 16,
              "Bad sizeof(InputDeviceManagerClient_InputDeviceRemoved_Params_Data)");
class  InputDeviceManager_GetDevicesAndSetClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data client;

 private:
  friend class mojo::internal::MessageFragment<InputDeviceManager_GetDevicesAndSetClient_Params_Data>;

  InputDeviceManager_GetDevicesAndSetClient_Params_Data();
  ~InputDeviceManager_GetDevicesAndSetClient_Params_Data() = delete;
};
static_assert(sizeof(InputDeviceManager_GetDevicesAndSetClient_Params_Data) == 16,
              "Bad sizeof(InputDeviceManager_GetDevicesAndSetClient_Params_Data)");
class  InputDeviceManager_GetDevicesAndSetClient_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::InputDeviceInfo_Data>>> devices;

 private:
  friend class mojo::internal::MessageFragment<InputDeviceManager_GetDevicesAndSetClient_ResponseParams_Data>;

  InputDeviceManager_GetDevicesAndSetClient_ResponseParams_Data();
  ~InputDeviceManager_GetDevicesAndSetClient_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputDeviceManager_GetDevicesAndSetClient_ResponseParams_Data) == 16,
              "Bad sizeof(InputDeviceManager_GetDevicesAndSetClient_ResponseParams_Data)");
class  InputDeviceManager_GetDevices_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<InputDeviceManager_GetDevices_Params_Data>;

  InputDeviceManager_GetDevices_Params_Data();
  ~InputDeviceManager_GetDevices_Params_Data() = delete;
};
static_assert(sizeof(InputDeviceManager_GetDevices_Params_Data) == 8,
              "Bad sizeof(InputDeviceManager_GetDevices_Params_Data)");
class  InputDeviceManager_GetDevices_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::InputDeviceInfo_Data>>> devices;

 private:
  friend class mojo::internal::MessageFragment<InputDeviceManager_GetDevices_ResponseParams_Data>;

  InputDeviceManager_GetDevices_ResponseParams_Data();
  ~InputDeviceManager_GetDevices_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputDeviceManager_GetDevices_ResponseParams_Data) == 16,
              "Bad sizeof(InputDeviceManager_GetDevices_ResponseParams_Data)");

}  // namespace internal


class InputDeviceManagerClient_InputDeviceAdded_ParamsDataView {
 public:
  InputDeviceManagerClient_InputDeviceAdded_ParamsDataView() = default;

  InputDeviceManagerClient_InputDeviceAdded_ParamsDataView(
      internal::InputDeviceManagerClient_InputDeviceAdded_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfoDataView(
      InputDeviceInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceInfo(UserType* output) {
    
    auto* pointer = data_->device_info.Get();
    return mojo::internal::Deserialize<::device::mojom::InputDeviceInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::InputDeviceManagerClient_InputDeviceAdded_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InputDeviceManagerClient_InputDeviceRemoved_ParamsDataView {
 public:
  InputDeviceManagerClient_InputDeviceRemoved_ParamsDataView() = default;

  InputDeviceManagerClient_InputDeviceRemoved_ParamsDataView(
      internal::InputDeviceManagerClient_InputDeviceRemoved_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::InputDeviceManagerClient_InputDeviceRemoved_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InputDeviceManager_GetDevicesAndSetClient_ParamsDataView {
 public:
  InputDeviceManager_GetDevicesAndSetClient_ParamsDataView() = default;

  InputDeviceManager_GetDevicesAndSetClient_ParamsDataView(
      internal::InputDeviceManager_GetDevicesAndSetClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::device::mojom::InputDeviceManagerClientAssociatedPtrInfoDataView>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::InputDeviceManager_GetDevicesAndSetClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InputDeviceManager_GetDevicesAndSetClient_ResponseParamsDataView {
 public:
  InputDeviceManager_GetDevicesAndSetClient_ResponseParamsDataView() = default;

  InputDeviceManager_GetDevicesAndSetClient_ResponseParamsDataView(
      internal::InputDeviceManager_GetDevicesAndSetClient_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDevicesDataView(
      mojo::ArrayDataView<InputDeviceInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevices(UserType* output) {
    
    auto* pointer = data_->devices.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::InputDeviceInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::InputDeviceManager_GetDevicesAndSetClient_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InputDeviceManager_GetDevices_ParamsDataView {
 public:
  InputDeviceManager_GetDevices_ParamsDataView() = default;

  InputDeviceManager_GetDevices_ParamsDataView(
      internal::InputDeviceManager_GetDevices_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InputDeviceManager_GetDevices_Params_Data* data_ = nullptr;
};



class InputDeviceManager_GetDevices_ResponseParamsDataView {
 public:
  InputDeviceManager_GetDevices_ResponseParamsDataView() = default;

  InputDeviceManager_GetDevices_ResponseParamsDataView(
      internal::InputDeviceManager_GetDevices_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDevicesDataView(
      mojo::ArrayDataView<InputDeviceInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevices(UserType* output) {
    
    auto* pointer = data_->devices.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::InputDeviceInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::InputDeviceManager_GetDevices_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void InputDeviceManagerClient_InputDeviceAdded_ParamsDataView::GetDeviceInfoDataView(
    InputDeviceInfoDataView* output) {
  auto pointer = data_->device_info.Get();
  *output = InputDeviceInfoDataView(pointer, message_);
}


inline void InputDeviceManagerClient_InputDeviceRemoved_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void InputDeviceManager_GetDevicesAndSetClient_ResponseParamsDataView::GetDevicesDataView(
    mojo::ArrayDataView<InputDeviceInfoDataView>* output) {
  auto pointer = data_->devices.Get();
  *output = mojo::ArrayDataView<InputDeviceInfoDataView>(pointer, message_);
}




inline void InputDeviceManager_GetDevices_ResponseParamsDataView::GetDevicesDataView(
    mojo::ArrayDataView<InputDeviceInfoDataView>* output) {
  auto pointer = data_->devices.Get();
  *output = mojo::ArrayDataView<InputDeviceInfoDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_INPUT_SERVICE_MOJOM_PARAMS_DATA_H_