// services/device/public/mojom/bluetooth_system.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/device/public/mojom/bluetooth_system.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/device/public/mojom/bluetooth_system.mojom-params-data.h"
#include "services/device/public/mojom/bluetooth_system.mojom-shared-message-ids.h"

#include "services/device/public/mojom/bluetooth_system.mojom-blink-import-headers.h"
#include "services/device/public/mojom/bluetooth_system.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_BLUETOOTH_SYSTEM_MOJOM_BLINK_JUMBO_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_BLUETOOTH_SYSTEM_MOJOM_BLINK_JUMBO_H_
#endif



namespace device {
namespace mojom {
namespace blink {
BluetoothAddress::BluetoothAddress()
    : address() {}

BluetoothAddress::BluetoothAddress(
    WTF::Vector<uint8_t> address_in)
    : address(std::move(address_in)) {}

BluetoothAddress::~BluetoothAddress() = default;

void BluetoothAddress::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "address"), this->address,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::Vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BluetoothAddress::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BluetoothDeviceBatteryInfo::BluetoothDeviceBatteryInfo()
    : battery_percentage() {}

BluetoothDeviceBatteryInfo::BluetoothDeviceBatteryInfo(
    uint8_t battery_percentage_in)
    : battery_percentage(std::move(battery_percentage_in)) {}

BluetoothDeviceBatteryInfo::~BluetoothDeviceBatteryInfo() = default;
size_t BluetoothDeviceBatteryInfo::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->battery_percentage);
  return seed;
}

void BluetoothDeviceBatteryInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "battery_percentage"), this->battery_percentage,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint8_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BluetoothDeviceBatteryInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BluetoothDeviceInfo::BluetoothDeviceInfo()
    : address(),
      name(),
      connection_state(),
      is_paired(),
      device_type(),
      battery_info(),
      is_blocked_by_policy(false) {}

BluetoothDeviceInfo::BluetoothDeviceInfo(
    BluetoothAddressPtr address_in,
    const WTF::String& name_in,
    BluetoothDeviceInfo::ConnectionState connection_state_in,
    bool is_paired_in,
    BluetoothDeviceInfo::DeviceType device_type_in,
    BluetoothDeviceBatteryInfoPtr battery_info_in,
    bool is_blocked_by_policy_in)
    : address(std::move(address_in)),
      name(std::move(name_in)),
      connection_state(std::move(connection_state_in)),
      is_paired(std::move(is_paired_in)),
      device_type(std::move(device_type_in)),
      battery_info(std::move(battery_info_in)),
      is_blocked_by_policy(std::move(is_blocked_by_policy_in)) {}

BluetoothDeviceInfo::~BluetoothDeviceInfo() = default;

void BluetoothDeviceInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "address"), this->address,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type BluetoothAddressPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "connection_state"), this->connection_state,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type BluetoothDeviceInfo::ConnectionState>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_paired"), this->is_paired,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "device_type"), this->device_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type BluetoothDeviceInfo::DeviceType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "battery_info"), this->battery_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type BluetoothDeviceBatteryInfoPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_blocked_by_policy"), this->is_blocked_by_policy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BluetoothDeviceInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char BluetoothSystemFactory::Name_[] = "device.mojom.BluetoothSystemFactory";

BluetoothSystemFactory::IPCStableHashFunction BluetoothSystemFactory::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kBluetoothSystemFactory_Create_Name: {
      return &BluetoothSystemFactory::Create_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* BluetoothSystemFactory::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kBluetoothSystemFactory_Create_Name:
            return "Receive device::mojom::BluetoothSystemFactory::Create";
    }
  } else {
    switch (message.name()) {
      case internal::kBluetoothSystemFactory_Create_Name:
            return "Receive reply device::mojom::BluetoothSystemFactory::Create";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t BluetoothSystemFactory::Create_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::BluetoothSystemFactory::Create");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

BluetoothSystemFactoryProxy::BluetoothSystemFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void BluetoothSystemFactoryProxy::Create(
    ::mojo::PendingReceiver<BluetoothSystem> in_system, ::mojo::PendingRemote<BluetoothSystemClient> in_system_client) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::BluetoothSystemFactory::Create", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("system"), in_system,
                        "<value of type ::mojo::PendingReceiver<BluetoothSystem>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("system_client"), in_system_client,
                        "<value of type ::mojo::PendingRemote<BluetoothSystemClient>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystemFactory_Create_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystemFactory_Create_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::BluetoothSystemInterfaceBase>>(
      in_system, &params->system, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->system),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid system in BluetoothSystemFactory.Create request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::device::mojom::BluetoothSystemClientInterfaceBase>>(
      in_system_client, &params->system_client, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->system_client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid system_client in BluetoothSystemFactory.Create request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystemFactory::Name_);
  message.set_method_name("Create");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool BluetoothSystemFactoryStubDispatch::Accept(
    BluetoothSystemFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kBluetoothSystemFactory_Create_Name: {

      DCHECK(message->is_serialized());
      internal::BluetoothSystemFactory_Create_Params_Data* params =
          reinterpret_cast<internal::BluetoothSystemFactory_Create_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<BluetoothSystem> p_system{};
      ::mojo::PendingRemote<BluetoothSystemClient> p_system_client{};
      BluetoothSystemFactory_Create_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_system =
            input_data_view.TakeSystem<decltype(p_system)>();
      }
      if (success) {
        p_system_client =
            input_data_view.TakeSystemClient<decltype(p_system_client)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BluetoothSystemFactory::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Create(
std::move(p_system), 
std::move(p_system_client));
      return true;
    }
  }
  return false;
}

// static
bool BluetoothSystemFactoryStubDispatch::AcceptWithResponder(
    BluetoothSystemFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kBluetoothSystemFactory_Create_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kBluetoothSystemFactoryValidationInfo[] = {
    {&internal::BluetoothSystemFactory_Create_Params_Data::Validate,
     nullptr /* no response */},
};

bool BluetoothSystemFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::blink::BluetoothSystemFactory::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kBluetoothSystemFactoryValidationInfo);
}

const char BluetoothSystem::Name_[] = "device.mojom.BluetoothSystem";

BluetoothSystem::IPCStableHashFunction BluetoothSystem::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kBluetoothSystem_GetState_Name: {
      return &BluetoothSystem::GetState_Sym::IPCStableHash;
    }
    case internal::kBluetoothSystem_SetPowered_Name: {
      return &BluetoothSystem::SetPowered_Sym::IPCStableHash;
    }
    case internal::kBluetoothSystem_GetScanState_Name: {
      return &BluetoothSystem::GetScanState_Sym::IPCStableHash;
    }
    case internal::kBluetoothSystem_StartScan_Name: {
      return &BluetoothSystem::StartScan_Sym::IPCStableHash;
    }
    case internal::kBluetoothSystem_StopScan_Name: {
      return &BluetoothSystem::StopScan_Sym::IPCStableHash;
    }
    case internal::kBluetoothSystem_GetAvailableDevices_Name: {
      return &BluetoothSystem::GetAvailableDevices_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* BluetoothSystem::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kBluetoothSystem_GetState_Name:
            return "Receive device::mojom::BluetoothSystem::GetState";
      case internal::kBluetoothSystem_SetPowered_Name:
            return "Receive device::mojom::BluetoothSystem::SetPowered";
      case internal::kBluetoothSystem_GetScanState_Name:
            return "Receive device::mojom::BluetoothSystem::GetScanState";
      case internal::kBluetoothSystem_StartScan_Name:
            return "Receive device::mojom::BluetoothSystem::StartScan";
      case internal::kBluetoothSystem_StopScan_Name:
            return "Receive device::mojom::BluetoothSystem::StopScan";
      case internal::kBluetoothSystem_GetAvailableDevices_Name:
            return "Receive device::mojom::BluetoothSystem::GetAvailableDevices";
    }
  } else {
    switch (message.name()) {
      case internal::kBluetoothSystem_GetState_Name:
            return "Receive reply device::mojom::BluetoothSystem::GetState";
      case internal::kBluetoothSystem_SetPowered_Name:
            return "Receive reply device::mojom::BluetoothSystem::SetPowered";
      case internal::kBluetoothSystem_GetScanState_Name:
            return "Receive reply device::mojom::BluetoothSystem::GetScanState";
      case internal::kBluetoothSystem_StartScan_Name:
            return "Receive reply device::mojom::BluetoothSystem::StartScan";
      case internal::kBluetoothSystem_StopScan_Name:
            return "Receive reply device::mojom::BluetoothSystem::StopScan";
      case internal::kBluetoothSystem_GetAvailableDevices_Name:
            return "Receive reply device::mojom::BluetoothSystem::GetAvailableDevices";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t BluetoothSystem::GetState_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::BluetoothSystem::GetState");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t BluetoothSystem::SetPowered_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::BluetoothSystem::SetPowered");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t BluetoothSystem::GetScanState_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::BluetoothSystem::GetScanState");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t BluetoothSystem::StartScan_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::BluetoothSystem::StartScan");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t BluetoothSystem::StopScan_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::BluetoothSystem::StopScan");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t BluetoothSystem::GetAvailableDevices_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::BluetoothSystem::GetAvailableDevices");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class BluetoothSystem_GetState_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BluetoothSystem_GetState_ForwardToCallback(
      BluetoothSystem::GetStateCallback callback
      ) : callback_(std::move(callback)) {
  }

  BluetoothSystem_GetState_ForwardToCallback(const BluetoothSystem_GetState_ForwardToCallback&) = delete;
  BluetoothSystem_GetState_ForwardToCallback& operator=(const BluetoothSystem_GetState_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  BluetoothSystem::GetStateCallback callback_;
};

class BluetoothSystem_SetPowered_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BluetoothSystem_SetPowered_ForwardToCallback(
      BluetoothSystem::SetPoweredCallback callback
      ) : callback_(std::move(callback)) {
  }

  BluetoothSystem_SetPowered_ForwardToCallback(const BluetoothSystem_SetPowered_ForwardToCallback&) = delete;
  BluetoothSystem_SetPowered_ForwardToCallback& operator=(const BluetoothSystem_SetPowered_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  BluetoothSystem::SetPoweredCallback callback_;
};

class BluetoothSystem_GetScanState_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BluetoothSystem_GetScanState_ForwardToCallback(
      BluetoothSystem::GetScanStateCallback callback
      ) : callback_(std::move(callback)) {
  }

  BluetoothSystem_GetScanState_ForwardToCallback(const BluetoothSystem_GetScanState_ForwardToCallback&) = delete;
  BluetoothSystem_GetScanState_ForwardToCallback& operator=(const BluetoothSystem_GetScanState_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  BluetoothSystem::GetScanStateCallback callback_;
};

class BluetoothSystem_StartScan_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BluetoothSystem_StartScan_ForwardToCallback(
      BluetoothSystem::StartScanCallback callback
      ) : callback_(std::move(callback)) {
  }

  BluetoothSystem_StartScan_ForwardToCallback(const BluetoothSystem_StartScan_ForwardToCallback&) = delete;
  BluetoothSystem_StartScan_ForwardToCallback& operator=(const BluetoothSystem_StartScan_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  BluetoothSystem::StartScanCallback callback_;
};

class BluetoothSystem_StopScan_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BluetoothSystem_StopScan_ForwardToCallback(
      BluetoothSystem::StopScanCallback callback
      ) : callback_(std::move(callback)) {
  }

  BluetoothSystem_StopScan_ForwardToCallback(const BluetoothSystem_StopScan_ForwardToCallback&) = delete;
  BluetoothSystem_StopScan_ForwardToCallback& operator=(const BluetoothSystem_StopScan_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  BluetoothSystem::StopScanCallback callback_;
};

class BluetoothSystem_GetAvailableDevices_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BluetoothSystem_GetAvailableDevices_ForwardToCallback(
      BluetoothSystem::GetAvailableDevicesCallback callback
      ) : callback_(std::move(callback)) {
  }

  BluetoothSystem_GetAvailableDevices_ForwardToCallback(const BluetoothSystem_GetAvailableDevices_ForwardToCallback&) = delete;
  BluetoothSystem_GetAvailableDevices_ForwardToCallback& operator=(const BluetoothSystem_GetAvailableDevices_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  BluetoothSystem::GetAvailableDevicesCallback callback_;
};

BluetoothSystemProxy::BluetoothSystemProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void BluetoothSystemProxy::GetState(
    GetStateCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send device::mojom::BluetoothSystem::GetState");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_GetState_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_GetState_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("GetState");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BluetoothSystem_GetState_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void BluetoothSystemProxy::SetPowered(
    bool in_powered, SetPoweredCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::BluetoothSystem::SetPowered", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("powered"), in_powered,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_SetPowered_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_SetPowered_Params_Data> params(
          message);
  params.Allocate();
  params->powered = in_powered;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("SetPowered");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BluetoothSystem_SetPowered_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void BluetoothSystemProxy::GetScanState(
    GetScanStateCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send device::mojom::BluetoothSystem::GetScanState");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_GetScanState_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_GetScanState_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("GetScanState");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BluetoothSystem_GetScanState_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void BluetoothSystemProxy::StartScan(
    StartScanCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send device::mojom::BluetoothSystem::StartScan");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_StartScan_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_StartScan_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("StartScan");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BluetoothSystem_StartScan_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void BluetoothSystemProxy::StopScan(
    StopScanCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send device::mojom::BluetoothSystem::StopScan");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_StopScan_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_StopScan_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("StopScan");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BluetoothSystem_StopScan_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void BluetoothSystemProxy::GetAvailableDevices(
    GetAvailableDevicesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send device::mojom::BluetoothSystem::GetAvailableDevices");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_GetAvailableDevices_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_GetAvailableDevices_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("GetAvailableDevices");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BluetoothSystem_GetAvailableDevices_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class BluetoothSystem_GetState_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static BluetoothSystem::GetStateCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<BluetoothSystem_GetState_ProxyToResponder> proxy(
        new BluetoothSystem_GetState_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&BluetoothSystem_GetState_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BluetoothSystem_GetState_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  BluetoothSystem_GetState_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BluetoothSystem::GetStateCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      BluetoothSystem::State in_state);
};

bool BluetoothSystem_GetState_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::BluetoothSystem_GetState_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BluetoothSystem_GetState_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  BluetoothSystem::State p_state{};
  BluetoothSystem_GetState_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadState(&p_state))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BluetoothSystem::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_state));
  return true;
}

void BluetoothSystem_GetState_ProxyToResponder::Run(
    BluetoothSystem::State in_state) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply device::mojom::BluetoothSystem::GetState", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("state"), in_state,
                        "<value of type BluetoothSystem::State>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_GetState_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_GetState_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::device::mojom::BluetoothSystem_State>(
      in_state, &params->state);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("GetState");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class BluetoothSystem_SetPowered_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static BluetoothSystem::SetPoweredCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<BluetoothSystem_SetPowered_ProxyToResponder> proxy(
        new BluetoothSystem_SetPowered_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&BluetoothSystem_SetPowered_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BluetoothSystem_SetPowered_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  BluetoothSystem_SetPowered_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BluetoothSystem::SetPoweredCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      BluetoothSystem::SetPoweredResult in_result);
};

bool BluetoothSystem_SetPowered_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::BluetoothSystem_SetPowered_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BluetoothSystem_SetPowered_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  BluetoothSystem::SetPoweredResult p_result{};
  BluetoothSystem_SetPowered_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BluetoothSystem::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void BluetoothSystem_SetPowered_ProxyToResponder::Run(
    BluetoothSystem::SetPoweredResult in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply device::mojom::BluetoothSystem::SetPowered", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type BluetoothSystem::SetPoweredResult>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_SetPowered_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_SetPowered_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::device::mojom::BluetoothSystem_SetPoweredResult>(
      in_result, &params->result);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("SetPowered");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class BluetoothSystem_GetScanState_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static BluetoothSystem::GetScanStateCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<BluetoothSystem_GetScanState_ProxyToResponder> proxy(
        new BluetoothSystem_GetScanState_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&BluetoothSystem_GetScanState_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BluetoothSystem_GetScanState_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  BluetoothSystem_GetScanState_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BluetoothSystem::GetScanStateCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      BluetoothSystem::ScanState in_scan_state);
};

bool BluetoothSystem_GetScanState_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::BluetoothSystem_GetScanState_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BluetoothSystem_GetScanState_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  BluetoothSystem::ScanState p_scan_state{};
  BluetoothSystem_GetScanState_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadScanState(&p_scan_state))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BluetoothSystem::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_scan_state));
  return true;
}

void BluetoothSystem_GetScanState_ProxyToResponder::Run(
    BluetoothSystem::ScanState in_scan_state) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply device::mojom::BluetoothSystem::GetScanState", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("scan_state"), in_scan_state,
                        "<value of type BluetoothSystem::ScanState>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_GetScanState_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_GetScanState_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::device::mojom::BluetoothSystem_ScanState>(
      in_scan_state, &params->scan_state);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("GetScanState");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class BluetoothSystem_StartScan_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static BluetoothSystem::StartScanCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<BluetoothSystem_StartScan_ProxyToResponder> proxy(
        new BluetoothSystem_StartScan_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&BluetoothSystem_StartScan_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BluetoothSystem_StartScan_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  BluetoothSystem_StartScan_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BluetoothSystem::StartScanCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      BluetoothSystem::StartScanResult in_result);
};

bool BluetoothSystem_StartScan_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::BluetoothSystem_StartScan_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BluetoothSystem_StartScan_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  BluetoothSystem::StartScanResult p_result{};
  BluetoothSystem_StartScan_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BluetoothSystem::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void BluetoothSystem_StartScan_ProxyToResponder::Run(
    BluetoothSystem::StartScanResult in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply device::mojom::BluetoothSystem::StartScan", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type BluetoothSystem::StartScanResult>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_StartScan_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_StartScan_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::device::mojom::BluetoothSystem_StartScanResult>(
      in_result, &params->result);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("StartScan");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class BluetoothSystem_StopScan_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static BluetoothSystem::StopScanCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<BluetoothSystem_StopScan_ProxyToResponder> proxy(
        new BluetoothSystem_StopScan_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&BluetoothSystem_StopScan_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BluetoothSystem_StopScan_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  BluetoothSystem_StopScan_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BluetoothSystem::StopScanCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      BluetoothSystem::StopScanResult in_result);
};

bool BluetoothSystem_StopScan_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::BluetoothSystem_StopScan_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BluetoothSystem_StopScan_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  BluetoothSystem::StopScanResult p_result{};
  BluetoothSystem_StopScan_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BluetoothSystem::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void BluetoothSystem_StopScan_ProxyToResponder::Run(
    BluetoothSystem::StopScanResult in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply device::mojom::BluetoothSystem::StopScan", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type BluetoothSystem::StopScanResult>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_StopScan_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_StopScan_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::device::mojom::BluetoothSystem_StopScanResult>(
      in_result, &params->result);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("StopScan");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class BluetoothSystem_GetAvailableDevices_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static BluetoothSystem::GetAvailableDevicesCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<BluetoothSystem_GetAvailableDevices_ProxyToResponder> proxy(
        new BluetoothSystem_GetAvailableDevices_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&BluetoothSystem_GetAvailableDevices_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BluetoothSystem_GetAvailableDevices_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  BluetoothSystem_GetAvailableDevices_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BluetoothSystem::GetAvailableDevicesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      WTF::Vector<BluetoothDeviceInfoPtr> in_devices);
};

bool BluetoothSystem_GetAvailableDevices_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::BluetoothSystem_GetAvailableDevices_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BluetoothSystem_GetAvailableDevices_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  WTF::Vector<BluetoothDeviceInfoPtr> p_devices{};
  BluetoothSystem_GetAvailableDevices_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadDevices(&p_devices))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BluetoothSystem::Name_, 5, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_devices));
  return true;
}

void BluetoothSystem_GetAvailableDevices_ProxyToResponder::Run(
    WTF::Vector<BluetoothDeviceInfoPtr> in_devices) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply device::mojom::BluetoothSystem::GetAvailableDevices", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("devices"), in_devices,
                        "<value of type WTF::Vector<BluetoothDeviceInfoPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystem_GetAvailableDevices_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystem_GetAvailableDevices_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->devices)::BaseType>
      devices_fragment(params.message());
  const mojo::internal::ContainerValidateParams devices_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::device::mojom::BluetoothDeviceInfoDataView>>(
      in_devices, devices_fragment, &devices_validate_params);
  params->devices.Set(
      devices_fragment.is_null() ? nullptr : devices_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->devices.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null devices in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystem::Name_);
  message.set_method_name("GetAvailableDevices");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool BluetoothSystemStubDispatch::Accept(
    BluetoothSystem* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kBluetoothSystem_GetState_Name: {
      break;
    }
    case internal::kBluetoothSystem_SetPowered_Name: {
      break;
    }
    case internal::kBluetoothSystem_GetScanState_Name: {
      break;
    }
    case internal::kBluetoothSystem_StartScan_Name: {
      break;
    }
    case internal::kBluetoothSystem_StopScan_Name: {
      break;
    }
    case internal::kBluetoothSystem_GetAvailableDevices_Name: {
      break;
    }
  }
  return false;
}

// static
bool BluetoothSystemStubDispatch::AcceptWithResponder(
    BluetoothSystem* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kBluetoothSystem_GetState_Name: {

      internal::BluetoothSystem_GetState_Params_Data* params =
          reinterpret_cast<
              internal::BluetoothSystem_GetState_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      BluetoothSystem_GetState_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BluetoothSystem::Name_, 0, false);
        return false;
      }
      BluetoothSystem::GetStateCallback callback =
          BluetoothSystem_GetState_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetState(std::move(callback));
      return true;
    }
    case internal::kBluetoothSystem_SetPowered_Name: {

      internal::BluetoothSystem_SetPowered_Params_Data* params =
          reinterpret_cast<
              internal::BluetoothSystem_SetPowered_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      bool p_powered{};
      BluetoothSystem_SetPowered_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_powered = input_data_view.powered();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BluetoothSystem::Name_, 1, false);
        return false;
      }
      BluetoothSystem::SetPoweredCallback callback =
          BluetoothSystem_SetPowered_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetPowered(
std::move(p_powered), std::move(callback));
      return true;
    }
    case internal::kBluetoothSystem_GetScanState_Name: {

      internal::BluetoothSystem_GetScanState_Params_Data* params =
          reinterpret_cast<
              internal::BluetoothSystem_GetScanState_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      BluetoothSystem_GetScanState_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BluetoothSystem::Name_, 2, false);
        return false;
      }
      BluetoothSystem::GetScanStateCallback callback =
          BluetoothSystem_GetScanState_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetScanState(std::move(callback));
      return true;
    }
    case internal::kBluetoothSystem_StartScan_Name: {

      internal::BluetoothSystem_StartScan_Params_Data* params =
          reinterpret_cast<
              internal::BluetoothSystem_StartScan_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      BluetoothSystem_StartScan_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BluetoothSystem::Name_, 3, false);
        return false;
      }
      BluetoothSystem::StartScanCallback callback =
          BluetoothSystem_StartScan_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StartScan(std::move(callback));
      return true;
    }
    case internal::kBluetoothSystem_StopScan_Name: {

      internal::BluetoothSystem_StopScan_Params_Data* params =
          reinterpret_cast<
              internal::BluetoothSystem_StopScan_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      BluetoothSystem_StopScan_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BluetoothSystem::Name_, 4, false);
        return false;
      }
      BluetoothSystem::StopScanCallback callback =
          BluetoothSystem_StopScan_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StopScan(std::move(callback));
      return true;
    }
    case internal::kBluetoothSystem_GetAvailableDevices_Name: {

      internal::BluetoothSystem_GetAvailableDevices_Params_Data* params =
          reinterpret_cast<
              internal::BluetoothSystem_GetAvailableDevices_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      BluetoothSystem_GetAvailableDevices_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BluetoothSystem::Name_, 5, false);
        return false;
      }
      BluetoothSystem::GetAvailableDevicesCallback callback =
          BluetoothSystem_GetAvailableDevices_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetAvailableDevices(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kBluetoothSystemValidationInfo[] = {
    {&internal::BluetoothSystem_GetState_Params_Data::Validate,
     &internal::BluetoothSystem_GetState_ResponseParams_Data::Validate},
    {&internal::BluetoothSystem_SetPowered_Params_Data::Validate,
     &internal::BluetoothSystem_SetPowered_ResponseParams_Data::Validate},
    {&internal::BluetoothSystem_GetScanState_Params_Data::Validate,
     &internal::BluetoothSystem_GetScanState_ResponseParams_Data::Validate},
    {&internal::BluetoothSystem_StartScan_Params_Data::Validate,
     &internal::BluetoothSystem_StartScan_ResponseParams_Data::Validate},
    {&internal::BluetoothSystem_StopScan_Params_Data::Validate,
     &internal::BluetoothSystem_StopScan_ResponseParams_Data::Validate},
    {&internal::BluetoothSystem_GetAvailableDevices_Params_Data::Validate,
     &internal::BluetoothSystem_GetAvailableDevices_ResponseParams_Data::Validate},
};

bool BluetoothSystemRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::blink::BluetoothSystem::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kBluetoothSystemValidationInfo);
}

bool BluetoothSystemResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::blink::BluetoothSystem::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kBluetoothSystemValidationInfo);
}
const char BluetoothSystemClient::Name_[] = "device.mojom.BluetoothSystemClient";

BluetoothSystemClient::IPCStableHashFunction BluetoothSystemClient::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kBluetoothSystemClient_OnStateChanged_Name: {
      return &BluetoothSystemClient::OnStateChanged_Sym::IPCStableHash;
    }
    case internal::kBluetoothSystemClient_OnScanStateChanged_Name: {
      return &BluetoothSystemClient::OnScanStateChanged_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* BluetoothSystemClient::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kBluetoothSystemClient_OnStateChanged_Name:
            return "Receive device::mojom::BluetoothSystemClient::OnStateChanged";
      case internal::kBluetoothSystemClient_OnScanStateChanged_Name:
            return "Receive device::mojom::BluetoothSystemClient::OnScanStateChanged";
    }
  } else {
    switch (message.name()) {
      case internal::kBluetoothSystemClient_OnStateChanged_Name:
            return "Receive reply device::mojom::BluetoothSystemClient::OnStateChanged";
      case internal::kBluetoothSystemClient_OnScanStateChanged_Name:
            return "Receive reply device::mojom::BluetoothSystemClient::OnScanStateChanged";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t BluetoothSystemClient::OnStateChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::BluetoothSystemClient::OnStateChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t BluetoothSystemClient::OnScanStateChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::BluetoothSystemClient::OnScanStateChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

BluetoothSystemClientProxy::BluetoothSystemClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void BluetoothSystemClientProxy::OnStateChanged(
    BluetoothSystem::State in_new_state) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::BluetoothSystemClient::OnStateChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("new_state"), in_new_state,
                        "<value of type BluetoothSystem::State>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystemClient_OnStateChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystemClient_OnStateChanged_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::device::mojom::BluetoothSystem_State>(
      in_new_state, &params->new_state);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystemClient::Name_);
  message.set_method_name("OnStateChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void BluetoothSystemClientProxy::OnScanStateChanged(
    BluetoothSystem::ScanState in_new_state) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::BluetoothSystemClient::OnScanStateChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("new_state"), in_new_state,
                        "<value of type BluetoothSystem::ScanState>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBluetoothSystemClient_OnScanStateChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::BluetoothSystemClient_OnScanStateChanged_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::device::mojom::BluetoothSystem_ScanState>(
      in_new_state, &params->new_state);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothSystemClient::Name_);
  message.set_method_name("OnScanStateChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool BluetoothSystemClientStubDispatch::Accept(
    BluetoothSystemClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kBluetoothSystemClient_OnStateChanged_Name: {

      DCHECK(message->is_serialized());
      internal::BluetoothSystemClient_OnStateChanged_Params_Data* params =
          reinterpret_cast<internal::BluetoothSystemClient_OnStateChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      BluetoothSystem::State p_new_state{};
      BluetoothSystemClient_OnStateChanged_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadNewState(&p_new_state))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BluetoothSystemClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnStateChanged(
std::move(p_new_state));
      return true;
    }
    case internal::kBluetoothSystemClient_OnScanStateChanged_Name: {

      DCHECK(message->is_serialized());
      internal::BluetoothSystemClient_OnScanStateChanged_Params_Data* params =
          reinterpret_cast<internal::BluetoothSystemClient_OnScanStateChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      BluetoothSystem::ScanState p_new_state{};
      BluetoothSystemClient_OnScanStateChanged_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadNewState(&p_new_state))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BluetoothSystemClient::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnScanStateChanged(
std::move(p_new_state));
      return true;
    }
  }
  return false;
}

// static
bool BluetoothSystemClientStubDispatch::AcceptWithResponder(
    BluetoothSystemClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kBluetoothSystemClient_OnStateChanged_Name: {
      break;
    }
    case internal::kBluetoothSystemClient_OnScanStateChanged_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kBluetoothSystemClientValidationInfo[] = {
    {&internal::BluetoothSystemClient_OnStateChanged_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::BluetoothSystemClient_OnScanStateChanged_Params_Data::Validate,
     nullptr /* no response */},
};

bool BluetoothSystemClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::blink::BluetoothSystemClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kBluetoothSystemClientValidationInfo);
}



}  // namespace blink
}  // namespace mojom
}  // namespace device


namespace mojo {


// static
bool StructTraits<::device::mojom::blink::BluetoothAddress::DataView, ::device::mojom::blink::BluetoothAddressPtr>::Read(
    ::device::mojom::blink::BluetoothAddress::DataView input,
    ::device::mojom::blink::BluetoothAddressPtr* output) {
  bool success = true;
  ::device::mojom::blink::BluetoothAddressPtr result(::device::mojom::blink::BluetoothAddress::New());
  
      if (success && !input.ReadAddress(&result->address))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::device::mojom::blink::BluetoothDeviceBatteryInfo::DataView, ::device::mojom::blink::BluetoothDeviceBatteryInfoPtr>::Read(
    ::device::mojom::blink::BluetoothDeviceBatteryInfo::DataView input,
    ::device::mojom::blink::BluetoothDeviceBatteryInfoPtr* output) {
  bool success = true;
  ::device::mojom::blink::BluetoothDeviceBatteryInfoPtr result(::device::mojom::blink::BluetoothDeviceBatteryInfo::New());
  
      if (success)
        result->battery_percentage = input.battery_percentage();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::device::mojom::blink::BluetoothDeviceInfo::DataView, ::device::mojom::blink::BluetoothDeviceInfoPtr>::Read(
    ::device::mojom::blink::BluetoothDeviceInfo::DataView input,
    ::device::mojom::blink::BluetoothDeviceInfoPtr* output) {
  bool success = true;
  ::device::mojom::blink::BluetoothDeviceInfoPtr result(::device::mojom::blink::BluetoothDeviceInfo::New());
  
      if (success && !input.ReadAddress(&result->address))
        success = false;
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadConnectionState(&result->connection_state))
        success = false;
      if (success)
        result->is_paired = input.is_paired();
      if (success && !input.ReadDeviceType(&result->device_type))
        success = false;
      if (success && !input.ReadBatteryInfo(&result->battery_info))
        success = false;
      if (success)
        result->is_blocked_by_policy = input.is_blocked_by_policy();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace device {
namespace mojom {
namespace blink {


void BluetoothSystemFactoryInterceptorForTesting::Create(::mojo::PendingReceiver<BluetoothSystem> system, ::mojo::PendingRemote<BluetoothSystemClient> system_client) {
  GetForwardingInterface()->Create(std::move(system), std::move(system_client));
}
BluetoothSystemFactoryAsyncWaiter::BluetoothSystemFactoryAsyncWaiter(
    BluetoothSystemFactory* proxy) : proxy_(proxy) {}

BluetoothSystemFactoryAsyncWaiter::~BluetoothSystemFactoryAsyncWaiter() = default;




void BluetoothSystemInterceptorForTesting::GetState(GetStateCallback callback) {
  GetForwardingInterface()->GetState(std::move(callback));
}
void BluetoothSystemInterceptorForTesting::SetPowered(bool powered, SetPoweredCallback callback) {
  GetForwardingInterface()->SetPowered(std::move(powered), std::move(callback));
}
void BluetoothSystemInterceptorForTesting::GetScanState(GetScanStateCallback callback) {
  GetForwardingInterface()->GetScanState(std::move(callback));
}
void BluetoothSystemInterceptorForTesting::StartScan(StartScanCallback callback) {
  GetForwardingInterface()->StartScan(std::move(callback));
}
void BluetoothSystemInterceptorForTesting::StopScan(StopScanCallback callback) {
  GetForwardingInterface()->StopScan(std::move(callback));
}
void BluetoothSystemInterceptorForTesting::GetAvailableDevices(GetAvailableDevicesCallback callback) {
  GetForwardingInterface()->GetAvailableDevices(std::move(callback));
}
BluetoothSystemAsyncWaiter::BluetoothSystemAsyncWaiter(
    BluetoothSystem* proxy) : proxy_(proxy) {}

BluetoothSystemAsyncWaiter::~BluetoothSystemAsyncWaiter() = default;

void BluetoothSystemAsyncWaiter::GetState(
    BluetoothSystem::State* out_state) {
  base::RunLoop loop;
  proxy_->GetState(
      base::BindOnce(
          [](base::RunLoop* loop,
             BluetoothSystem::State* out_state
,
             BluetoothSystem::State state) {*out_state = std::move(state);
            loop->Quit();
          },
          &loop,
          out_state));
  loop.Run();
}
void BluetoothSystemAsyncWaiter::SetPowered(
    bool powered, BluetoothSystem::SetPoweredResult* out_result) {
  base::RunLoop loop;
  proxy_->SetPowered(std::move(powered),
      base::BindOnce(
          [](base::RunLoop* loop,
             BluetoothSystem::SetPoweredResult* out_result
,
             BluetoothSystem::SetPoweredResult result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void BluetoothSystemAsyncWaiter::GetScanState(
    BluetoothSystem::ScanState* out_scan_state) {
  base::RunLoop loop;
  proxy_->GetScanState(
      base::BindOnce(
          [](base::RunLoop* loop,
             BluetoothSystem::ScanState* out_scan_state
,
             BluetoothSystem::ScanState scan_state) {*out_scan_state = std::move(scan_state);
            loop->Quit();
          },
          &loop,
          out_scan_state));
  loop.Run();
}
void BluetoothSystemAsyncWaiter::StartScan(
    BluetoothSystem::StartScanResult* out_result) {
  base::RunLoop loop;
  proxy_->StartScan(
      base::BindOnce(
          [](base::RunLoop* loop,
             BluetoothSystem::StartScanResult* out_result
,
             BluetoothSystem::StartScanResult result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void BluetoothSystemAsyncWaiter::StopScan(
    BluetoothSystem::StopScanResult* out_result) {
  base::RunLoop loop;
  proxy_->StopScan(
      base::BindOnce(
          [](base::RunLoop* loop,
             BluetoothSystem::StopScanResult* out_result
,
             BluetoothSystem::StopScanResult result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void BluetoothSystemAsyncWaiter::GetAvailableDevices(
    WTF::Vector<BluetoothDeviceInfoPtr>* out_devices) {
  base::RunLoop loop;
  proxy_->GetAvailableDevices(
      base::BindOnce(
          [](base::RunLoop* loop,
             WTF::Vector<BluetoothDeviceInfoPtr>* out_devices
,
             WTF::Vector<BluetoothDeviceInfoPtr> devices) {*out_devices = std::move(devices);
            loop->Quit();
          },
          &loop,
          out_devices));
  loop.Run();
}



void BluetoothSystemClientInterceptorForTesting::OnStateChanged(BluetoothSystem::State new_state) {
  GetForwardingInterface()->OnStateChanged(std::move(new_state));
}
void BluetoothSystemClientInterceptorForTesting::OnScanStateChanged(BluetoothSystem::ScanState new_state) {
  GetForwardingInterface()->OnScanStateChanged(std::move(new_state));
}
BluetoothSystemClientAsyncWaiter::BluetoothSystemClientAsyncWaiter(
    BluetoothSystemClient* proxy) : proxy_(proxy) {}

BluetoothSystemClientAsyncWaiter::~BluetoothSystemClientAsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace device


#if defined(__clang__)
#pragma clang diagnostic pop
#endif