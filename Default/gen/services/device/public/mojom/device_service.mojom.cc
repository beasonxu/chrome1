// services/device/public/mojom/device_service.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/device/public/mojom/device_service.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/device/public/mojom/device_service.mojom-params-data.h"
#include "services/device/public/mojom/device_service.mojom-shared-message-ids.h"

#include "services/device/public/mojom/device_service.mojom-import-headers.h"
#include "services/device/public/mojom/device_service.mojom-test-utils.h"


#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_SERVICE_MOJOM_JUMBO_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_SERVICE_MOJOM_JUMBO_H_
#endif



namespace device {
namespace mojom {
const char DeviceService::Name_[] = "device.mojom.DeviceService";

DeviceService::IPCStableHashFunction DeviceService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kDeviceService_BindDevicePostureProvider_Name: {
      return &DeviceService::BindDevicePostureProvider_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindFingerprint_Name: {
      return &DeviceService::BindFingerprint_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindGeolocationConfig_Name: {
      return &DeviceService::BindGeolocationConfig_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindGeolocationContext_Name: {
      return &DeviceService::BindGeolocationContext_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindGeolocationControl_Name: {
      return &DeviceService::BindGeolocationControl_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindBatteryMonitor_Name: {
      return &DeviceService::BindBatteryMonitor_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindPressureManager_Name: {
      return &DeviceService::BindPressureManager_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindNFCProvider_Name: {
      return &DeviceService::BindNFCProvider_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindVibrationManager_Name: {
      return &DeviceService::BindVibrationManager_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindPowerMonitor_Name: {
      return &DeviceService::BindPowerMonitor_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindPublicIpAddressGeolocationProvider_Name: {
      return &DeviceService::BindPublicIpAddressGeolocationProvider_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindScreenOrientationListener_Name: {
      return &DeviceService::BindScreenOrientationListener_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindSensorProvider_Name: {
      return &DeviceService::BindSensorProvider_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindSerialPortManager_Name: {
      return &DeviceService::BindSerialPortManager_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindTimeZoneMonitor_Name: {
      return &DeviceService::BindTimeZoneMonitor_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindWakeLockProvider_Name: {
      return &DeviceService::BindWakeLockProvider_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindUsbDeviceManager_Name: {
      return &DeviceService::BindUsbDeviceManager_Sym::IPCStableHash;
    }
    case internal::kDeviceService_BindUsbDeviceManagerTest_Name: {
      return &DeviceService::BindUsbDeviceManagerTest_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* DeviceService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kDeviceService_BindDevicePostureProvider_Name:
            return "Receive device::mojom::DeviceService::BindDevicePostureProvider";
      case internal::kDeviceService_BindFingerprint_Name:
            return "Receive device::mojom::DeviceService::BindFingerprint";
      case internal::kDeviceService_BindGeolocationConfig_Name:
            return "Receive device::mojom::DeviceService::BindGeolocationConfig";
      case internal::kDeviceService_BindGeolocationContext_Name:
            return "Receive device::mojom::DeviceService::BindGeolocationContext";
      case internal::kDeviceService_BindGeolocationControl_Name:
            return "Receive device::mojom::DeviceService::BindGeolocationControl";
      case internal::kDeviceService_BindBatteryMonitor_Name:
            return "Receive device::mojom::DeviceService::BindBatteryMonitor";
      case internal::kDeviceService_BindPressureManager_Name:
            return "Receive device::mojom::DeviceService::BindPressureManager";
      case internal::kDeviceService_BindNFCProvider_Name:
            return "Receive device::mojom::DeviceService::BindNFCProvider";
      case internal::kDeviceService_BindVibrationManager_Name:
            return "Receive device::mojom::DeviceService::BindVibrationManager";
      case internal::kDeviceService_BindPowerMonitor_Name:
            return "Receive device::mojom::DeviceService::BindPowerMonitor";
      case internal::kDeviceService_BindPublicIpAddressGeolocationProvider_Name:
            return "Receive device::mojom::DeviceService::BindPublicIpAddressGeolocationProvider";
      case internal::kDeviceService_BindScreenOrientationListener_Name:
            return "Receive device::mojom::DeviceService::BindScreenOrientationListener";
      case internal::kDeviceService_BindSensorProvider_Name:
            return "Receive device::mojom::DeviceService::BindSensorProvider";
      case internal::kDeviceService_BindSerialPortManager_Name:
            return "Receive device::mojom::DeviceService::BindSerialPortManager";
      case internal::kDeviceService_BindTimeZoneMonitor_Name:
            return "Receive device::mojom::DeviceService::BindTimeZoneMonitor";
      case internal::kDeviceService_BindWakeLockProvider_Name:
            return "Receive device::mojom::DeviceService::BindWakeLockProvider";
      case internal::kDeviceService_BindUsbDeviceManager_Name:
            return "Receive device::mojom::DeviceService::BindUsbDeviceManager";
      case internal::kDeviceService_BindUsbDeviceManagerTest_Name:
            return "Receive device::mojom::DeviceService::BindUsbDeviceManagerTest";
    }
  } else {
    switch (message.name()) {
      case internal::kDeviceService_BindDevicePostureProvider_Name:
            return "Receive reply device::mojom::DeviceService::BindDevicePostureProvider";
      case internal::kDeviceService_BindFingerprint_Name:
            return "Receive reply device::mojom::DeviceService::BindFingerprint";
      case internal::kDeviceService_BindGeolocationConfig_Name:
            return "Receive reply device::mojom::DeviceService::BindGeolocationConfig";
      case internal::kDeviceService_BindGeolocationContext_Name:
            return "Receive reply device::mojom::DeviceService::BindGeolocationContext";
      case internal::kDeviceService_BindGeolocationControl_Name:
            return "Receive reply device::mojom::DeviceService::BindGeolocationControl";
      case internal::kDeviceService_BindBatteryMonitor_Name:
            return "Receive reply device::mojom::DeviceService::BindBatteryMonitor";
      case internal::kDeviceService_BindPressureManager_Name:
            return "Receive reply device::mojom::DeviceService::BindPressureManager";
      case internal::kDeviceService_BindNFCProvider_Name:
            return "Receive reply device::mojom::DeviceService::BindNFCProvider";
      case internal::kDeviceService_BindVibrationManager_Name:
            return "Receive reply device::mojom::DeviceService::BindVibrationManager";
      case internal::kDeviceService_BindPowerMonitor_Name:
            return "Receive reply device::mojom::DeviceService::BindPowerMonitor";
      case internal::kDeviceService_BindPublicIpAddressGeolocationProvider_Name:
            return "Receive reply device::mojom::DeviceService::BindPublicIpAddressGeolocationProvider";
      case internal::kDeviceService_BindScreenOrientationListener_Name:
            return "Receive reply device::mojom::DeviceService::BindScreenOrientationListener";
      case internal::kDeviceService_BindSensorProvider_Name:
            return "Receive reply device::mojom::DeviceService::BindSensorProvider";
      case internal::kDeviceService_BindSerialPortManager_Name:
            return "Receive reply device::mojom::DeviceService::BindSerialPortManager";
      case internal::kDeviceService_BindTimeZoneMonitor_Name:
            return "Receive reply device::mojom::DeviceService::BindTimeZoneMonitor";
      case internal::kDeviceService_BindWakeLockProvider_Name:
            return "Receive reply device::mojom::DeviceService::BindWakeLockProvider";
      case internal::kDeviceService_BindUsbDeviceManager_Name:
            return "Receive reply device::mojom::DeviceService::BindUsbDeviceManager";
      case internal::kDeviceService_BindUsbDeviceManagerTest_Name:
            return "Receive reply device::mojom::DeviceService::BindUsbDeviceManagerTest";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t DeviceService::BindDevicePostureProvider_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindDevicePostureProvider");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindFingerprint_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindFingerprint");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindGeolocationConfig_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindGeolocationConfig");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindGeolocationContext_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindGeolocationContext");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindGeolocationControl_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindGeolocationControl");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindBatteryMonitor_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindBatteryMonitor");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindPressureManager_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindPressureManager");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindNFCProvider_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindNFCProvider");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindVibrationManager_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindVibrationManager");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindPowerMonitor_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindPowerMonitor");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindPublicIpAddressGeolocationProvider_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindPublicIpAddressGeolocationProvider");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindScreenOrientationListener_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindScreenOrientationListener");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindSensorProvider_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindSensorProvider");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindSerialPortManager_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindSerialPortManager");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindTimeZoneMonitor_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindTimeZoneMonitor");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindWakeLockProvider_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindWakeLockProvider");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindUsbDeviceManager_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindUsbDeviceManager");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceService::BindUsbDeviceManagerTest_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)device::mojom::DeviceService::BindUsbDeviceManagerTest");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

DeviceServiceProxy::DeviceServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DeviceServiceProxy::BindDevicePostureProvider(
    ::mojo::PendingReceiver<::device::mojom::DevicePostureProvider> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindDevicePostureProvider", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::DevicePostureProvider>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindDevicePostureProvider_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindDevicePostureProvider_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::DevicePostureProviderInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindDevicePostureProvider request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindDevicePostureProvider");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindFingerprint(
    ::mojo::PendingReceiver<::device::mojom::Fingerprint> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindFingerprint", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::Fingerprint>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindFingerprint_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindFingerprint_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::FingerprintInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindFingerprint request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindFingerprint");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindGeolocationConfig(
    ::mojo::PendingReceiver<::device::mojom::GeolocationConfig> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindGeolocationConfig", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::GeolocationConfig>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindGeolocationConfig_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindGeolocationConfig_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::GeolocationConfigInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindGeolocationConfig request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindGeolocationConfig");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindGeolocationContext(
    ::mojo::PendingReceiver<::device::mojom::GeolocationContext> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindGeolocationContext", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::GeolocationContext>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindGeolocationContext_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindGeolocationContext_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::GeolocationContextInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindGeolocationContext request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindGeolocationContext");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindGeolocationControl(
    ::mojo::PendingReceiver<::device::mojom::GeolocationControl> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindGeolocationControl", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::GeolocationControl>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindGeolocationControl_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindGeolocationControl_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::GeolocationControlInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindGeolocationControl request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindGeolocationControl");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindBatteryMonitor(
    ::mojo::PendingReceiver<::device::mojom::BatteryMonitor> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindBatteryMonitor", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::BatteryMonitor>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindBatteryMonitor_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindBatteryMonitor_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::BatteryMonitorInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindBatteryMonitor request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindBatteryMonitor");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindPressureManager(
    ::mojo::PendingReceiver<::device::mojom::PressureManager> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindPressureManager", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::PressureManager>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindPressureManager_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindPressureManager_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::PressureManagerInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindPressureManager request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindPressureManager");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindNFCProvider(
    ::mojo::PendingReceiver<::device::mojom::NFCProvider> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindNFCProvider", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::NFCProvider>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindNFCProvider_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindNFCProvider_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::NFCProviderInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindNFCProvider request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindNFCProvider");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindVibrationManager(
    ::mojo::PendingReceiver<::device::mojom::VibrationManager> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindVibrationManager", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::VibrationManager>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindVibrationManager_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindVibrationManager_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::VibrationManagerInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindVibrationManager request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindVibrationManager");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindPowerMonitor(
    ::mojo::PendingReceiver<::device::mojom::PowerMonitor> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindPowerMonitor", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::PowerMonitor>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindPowerMonitor_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindPowerMonitor_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::PowerMonitorInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindPowerMonitor request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindPowerMonitor");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindPublicIpAddressGeolocationProvider(
    ::mojo::PendingReceiver<::device::mojom::PublicIpAddressGeolocationProvider> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindPublicIpAddressGeolocationProvider", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::PublicIpAddressGeolocationProvider>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindPublicIpAddressGeolocationProvider_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::PublicIpAddressGeolocationProviderInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindPublicIpAddressGeolocationProvider request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindPublicIpAddressGeolocationProvider");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindScreenOrientationListener(
    ::mojo::PendingReceiver<::device::mojom::ScreenOrientationListener> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindScreenOrientationListener", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::ScreenOrientationListener>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindScreenOrientationListener_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindScreenOrientationListener_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::ScreenOrientationListenerInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindScreenOrientationListener request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindScreenOrientationListener");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindSensorProvider(
    ::mojo::PendingReceiver<::device::mojom::SensorProvider> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindSensorProvider", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::SensorProvider>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindSensorProvider_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindSensorProvider_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::SensorProviderInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindSensorProvider request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindSensorProvider");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindSerialPortManager(
    ::mojo::PendingReceiver<::device::mojom::SerialPortManager> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindSerialPortManager", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::SerialPortManager>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindSerialPortManager_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindSerialPortManager_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::SerialPortManagerInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindSerialPortManager request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindSerialPortManager");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindTimeZoneMonitor(
    ::mojo::PendingReceiver<::device::mojom::TimeZoneMonitor> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindTimeZoneMonitor", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::TimeZoneMonitor>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindTimeZoneMonitor_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindTimeZoneMonitor_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::TimeZoneMonitorInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindTimeZoneMonitor request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindTimeZoneMonitor");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindWakeLockProvider(
    ::mojo::PendingReceiver<::device::mojom::WakeLockProvider> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindWakeLockProvider", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::WakeLockProvider>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindWakeLockProvider_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindWakeLockProvider_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::WakeLockProviderInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindWakeLockProvider request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindWakeLockProvider");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindUsbDeviceManager(
    ::mojo::PendingReceiver<::device::mojom::UsbDeviceManager> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindUsbDeviceManager", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::UsbDeviceManager>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindUsbDeviceManager_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindUsbDeviceManager_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::UsbDeviceManagerInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindUsbDeviceManager request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindUsbDeviceManager");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceServiceProxy::BindUsbDeviceManagerTest(
    ::mojo::PendingReceiver<::device::mojom::UsbDeviceManagerTest> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send device::mojom::DeviceService::BindUsbDeviceManagerTest", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::device::mojom::UsbDeviceManagerTest>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceService_BindUsbDeviceManagerTest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::device::mojom::internal::DeviceService_BindUsbDeviceManagerTest_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::device::mojom::UsbDeviceManagerTestInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DeviceService.BindUsbDeviceManagerTest request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceService::Name_);
  message.set_method_name("BindUsbDeviceManagerTest");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool DeviceServiceStubDispatch::Accept(
    DeviceService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDeviceService_BindDevicePostureProvider_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindDevicePostureProvider_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindDevicePostureProvider_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::DevicePostureProvider> p_receiver{};
      DeviceService_BindDevicePostureProvider_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindDevicePostureProvider(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindFingerprint_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindFingerprint_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindFingerprint_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::Fingerprint> p_receiver{};
      DeviceService_BindFingerprint_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindFingerprint(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindGeolocationConfig_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindGeolocationConfig_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindGeolocationConfig_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::GeolocationConfig> p_receiver{};
      DeviceService_BindGeolocationConfig_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindGeolocationConfig(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindGeolocationContext_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindGeolocationContext_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindGeolocationContext_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::GeolocationContext> p_receiver{};
      DeviceService_BindGeolocationContext_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindGeolocationContext(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindGeolocationControl_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindGeolocationControl_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindGeolocationControl_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::GeolocationControl> p_receiver{};
      DeviceService_BindGeolocationControl_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindGeolocationControl(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindBatteryMonitor_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindBatteryMonitor_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindBatteryMonitor_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::BatteryMonitor> p_receiver{};
      DeviceService_BindBatteryMonitor_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindBatteryMonitor(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindPressureManager_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindPressureManager_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindPressureManager_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::PressureManager> p_receiver{};
      DeviceService_BindPressureManager_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindPressureManager(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindNFCProvider_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindNFCProvider_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindNFCProvider_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::NFCProvider> p_receiver{};
      DeviceService_BindNFCProvider_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 7, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindNFCProvider(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindVibrationManager_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindVibrationManager_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindVibrationManager_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::VibrationManager> p_receiver{};
      DeviceService_BindVibrationManager_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindVibrationManager(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindPowerMonitor_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindPowerMonitor_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindPowerMonitor_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::PowerMonitor> p_receiver{};
      DeviceService_BindPowerMonitor_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 9, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindPowerMonitor(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindPublicIpAddressGeolocationProvider_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::PublicIpAddressGeolocationProvider> p_receiver{};
      DeviceService_BindPublicIpAddressGeolocationProvider_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 10, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindPublicIpAddressGeolocationProvider(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindScreenOrientationListener_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindScreenOrientationListener_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindScreenOrientationListener_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::ScreenOrientationListener> p_receiver{};
      DeviceService_BindScreenOrientationListener_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 11, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindScreenOrientationListener(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindSensorProvider_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindSensorProvider_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindSensorProvider_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::SensorProvider> p_receiver{};
      DeviceService_BindSensorProvider_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 12, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindSensorProvider(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindSerialPortManager_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindSerialPortManager_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindSerialPortManager_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::SerialPortManager> p_receiver{};
      DeviceService_BindSerialPortManager_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 13, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindSerialPortManager(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindTimeZoneMonitor_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindTimeZoneMonitor_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindTimeZoneMonitor_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::TimeZoneMonitor> p_receiver{};
      DeviceService_BindTimeZoneMonitor_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 14, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindTimeZoneMonitor(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindWakeLockProvider_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindWakeLockProvider_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindWakeLockProvider_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::WakeLockProvider> p_receiver{};
      DeviceService_BindWakeLockProvider_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 15, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindWakeLockProvider(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindUsbDeviceManager_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindUsbDeviceManager_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindUsbDeviceManager_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::UsbDeviceManager> p_receiver{};
      DeviceService_BindUsbDeviceManager_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 16, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindUsbDeviceManager(
std::move(p_receiver));
      return true;
    }
    case internal::kDeviceService_BindUsbDeviceManagerTest_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceService_BindUsbDeviceManagerTest_Params_Data* params =
          reinterpret_cast<internal::DeviceService_BindUsbDeviceManagerTest_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::device::mojom::UsbDeviceManagerTest> p_receiver{};
      DeviceService_BindUsbDeviceManagerTest_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceService::Name_, 17, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindUsbDeviceManagerTest(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool DeviceServiceStubDispatch::AcceptWithResponder(
    DeviceService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kDeviceService_BindDevicePostureProvider_Name: {
      break;
    }
    case internal::kDeviceService_BindFingerprint_Name: {
      break;
    }
    case internal::kDeviceService_BindGeolocationConfig_Name: {
      break;
    }
    case internal::kDeviceService_BindGeolocationContext_Name: {
      break;
    }
    case internal::kDeviceService_BindGeolocationControl_Name: {
      break;
    }
    case internal::kDeviceService_BindBatteryMonitor_Name: {
      break;
    }
    case internal::kDeviceService_BindPressureManager_Name: {
      break;
    }
    case internal::kDeviceService_BindNFCProvider_Name: {
      break;
    }
    case internal::kDeviceService_BindVibrationManager_Name: {
      break;
    }
    case internal::kDeviceService_BindPowerMonitor_Name: {
      break;
    }
    case internal::kDeviceService_BindPublicIpAddressGeolocationProvider_Name: {
      break;
    }
    case internal::kDeviceService_BindScreenOrientationListener_Name: {
      break;
    }
    case internal::kDeviceService_BindSensorProvider_Name: {
      break;
    }
    case internal::kDeviceService_BindSerialPortManager_Name: {
      break;
    }
    case internal::kDeviceService_BindTimeZoneMonitor_Name: {
      break;
    }
    case internal::kDeviceService_BindWakeLockProvider_Name: {
      break;
    }
    case internal::kDeviceService_BindUsbDeviceManager_Name: {
      break;
    }
    case internal::kDeviceService_BindUsbDeviceManagerTest_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDeviceServiceValidationInfo[] = {
    {&internal::DeviceService_BindDevicePostureProvider_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindFingerprint_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindGeolocationConfig_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindGeolocationContext_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindGeolocationControl_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindBatteryMonitor_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindPressureManager_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindNFCProvider_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindVibrationManager_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindPowerMonitor_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindScreenOrientationListener_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindSensorProvider_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindSerialPortManager_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindTimeZoneMonitor_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindWakeLockProvider_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindUsbDeviceManager_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceService_BindUsbDeviceManagerTest_Params_Data::Validate,
     nullptr /* no response */},
};

bool DeviceServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::device::mojom::DeviceService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDeviceServiceValidationInfo);
}



}  // namespace mojom
}  // namespace device


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace device {
namespace mojom {


void DeviceServiceInterceptorForTesting::BindDevicePostureProvider(::mojo::PendingReceiver<::device::mojom::DevicePostureProvider> receiver) {
  GetForwardingInterface()->BindDevicePostureProvider(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindFingerprint(::mojo::PendingReceiver<::device::mojom::Fingerprint> receiver) {
  GetForwardingInterface()->BindFingerprint(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindGeolocationConfig(::mojo::PendingReceiver<::device::mojom::GeolocationConfig> receiver) {
  GetForwardingInterface()->BindGeolocationConfig(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindGeolocationContext(::mojo::PendingReceiver<::device::mojom::GeolocationContext> receiver) {
  GetForwardingInterface()->BindGeolocationContext(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindGeolocationControl(::mojo::PendingReceiver<::device::mojom::GeolocationControl> receiver) {
  GetForwardingInterface()->BindGeolocationControl(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindBatteryMonitor(::mojo::PendingReceiver<::device::mojom::BatteryMonitor> receiver) {
  GetForwardingInterface()->BindBatteryMonitor(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindPressureManager(::mojo::PendingReceiver<::device::mojom::PressureManager> receiver) {
  GetForwardingInterface()->BindPressureManager(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindNFCProvider(::mojo::PendingReceiver<::device::mojom::NFCProvider> receiver) {
  GetForwardingInterface()->BindNFCProvider(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindVibrationManager(::mojo::PendingReceiver<::device::mojom::VibrationManager> receiver) {
  GetForwardingInterface()->BindVibrationManager(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindPowerMonitor(::mojo::PendingReceiver<::device::mojom::PowerMonitor> receiver) {
  GetForwardingInterface()->BindPowerMonitor(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindPublicIpAddressGeolocationProvider(::mojo::PendingReceiver<::device::mojom::PublicIpAddressGeolocationProvider> receiver) {
  GetForwardingInterface()->BindPublicIpAddressGeolocationProvider(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindScreenOrientationListener(::mojo::PendingReceiver<::device::mojom::ScreenOrientationListener> receiver) {
  GetForwardingInterface()->BindScreenOrientationListener(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindSensorProvider(::mojo::PendingReceiver<::device::mojom::SensorProvider> receiver) {
  GetForwardingInterface()->BindSensorProvider(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindSerialPortManager(::mojo::PendingReceiver<::device::mojom::SerialPortManager> receiver) {
  GetForwardingInterface()->BindSerialPortManager(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindTimeZoneMonitor(::mojo::PendingReceiver<::device::mojom::TimeZoneMonitor> receiver) {
  GetForwardingInterface()->BindTimeZoneMonitor(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindWakeLockProvider(::mojo::PendingReceiver<::device::mojom::WakeLockProvider> receiver) {
  GetForwardingInterface()->BindWakeLockProvider(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindUsbDeviceManager(::mojo::PendingReceiver<::device::mojom::UsbDeviceManager> receiver) {
  GetForwardingInterface()->BindUsbDeviceManager(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindUsbDeviceManagerTest(::mojo::PendingReceiver<::device::mojom::UsbDeviceManagerTest> receiver) {
  GetForwardingInterface()->BindUsbDeviceManagerTest(std::move(receiver));
}
DeviceServiceAsyncWaiter::DeviceServiceAsyncWaiter(
    DeviceService* proxy) : proxy_(proxy) {}

DeviceServiceAsyncWaiter::~DeviceServiceAsyncWaiter() = default;






}  // namespace mojom
}  // namespace device


#if defined(__clang__)
#pragma clang diagnostic pop
#endif