// services/device/public/mojom/serial.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_SERIAL_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_SERIAL_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  SerialPortManager_SetClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<SerialPortManager_SetClient_Params_Data>;

  SerialPortManager_SetClient_Params_Data();
  ~SerialPortManager_SetClient_Params_Data() = delete;
};
static_assert(sizeof(SerialPortManager_SetClient_Params_Data) == 16,
              "Bad sizeof(SerialPortManager_SetClient_Params_Data)");
class  SerialPortManager_GetDevices_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SerialPortManager_GetDevices_Params_Data>;

  SerialPortManager_GetDevices_Params_Data();
  ~SerialPortManager_GetDevices_Params_Data() = delete;
};
static_assert(sizeof(SerialPortManager_GetDevices_Params_Data) == 8,
              "Bad sizeof(SerialPortManager_GetDevices_Params_Data)");
class  SerialPortManager_GetDevices_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::SerialPortInfo_Data>>> devices;

 private:
  friend class mojo::internal::MessageFragment<SerialPortManager_GetDevices_ResponseParams_Data>;

  SerialPortManager_GetDevices_ResponseParams_Data();
  ~SerialPortManager_GetDevices_ResponseParams_Data() = delete;
};
static_assert(sizeof(SerialPortManager_GetDevices_ResponseParams_Data) == 16,
              "Bad sizeof(SerialPortManager_GetDevices_ResponseParams_Data)");
class  SerialPortManager_OpenPort_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> token;
  uint8_t use_alternate_path : 1;
  uint8_t pad1_[7];
  mojo::internal::Pointer<internal::SerialConnectionOptions_Data> options;
  mojo::internal::Interface_Data client;
  mojo::internal::Interface_Data watcher;

 private:
  friend class mojo::internal::MessageFragment<SerialPortManager_OpenPort_Params_Data>;

  SerialPortManager_OpenPort_Params_Data();
  ~SerialPortManager_OpenPort_Params_Data() = delete;
};
static_assert(sizeof(SerialPortManager_OpenPort_Params_Data) == 48,
              "Bad sizeof(SerialPortManager_OpenPort_Params_Data)");
class  SerialPortManager_OpenPort_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data port;

 private:
  friend class mojo::internal::MessageFragment<SerialPortManager_OpenPort_ResponseParams_Data>;

  SerialPortManager_OpenPort_ResponseParams_Data();
  ~SerialPortManager_OpenPort_ResponseParams_Data() = delete;
};
static_assert(sizeof(SerialPortManager_OpenPort_ResponseParams_Data) == 16,
              "Bad sizeof(SerialPortManager_OpenPort_ResponseParams_Data)");
class  SerialPortManagerClient_OnPortAdded_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SerialPortInfo_Data> port_info;

 private:
  friend class mojo::internal::MessageFragment<SerialPortManagerClient_OnPortAdded_Params_Data>;

  SerialPortManagerClient_OnPortAdded_Params_Data();
  ~SerialPortManagerClient_OnPortAdded_Params_Data() = delete;
};
static_assert(sizeof(SerialPortManagerClient_OnPortAdded_Params_Data) == 16,
              "Bad sizeof(SerialPortManagerClient_OnPortAdded_Params_Data)");
class  SerialPortManagerClient_OnPortRemoved_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SerialPortInfo_Data> port_info;

 private:
  friend class mojo::internal::MessageFragment<SerialPortManagerClient_OnPortRemoved_Params_Data>;

  SerialPortManagerClient_OnPortRemoved_Params_Data();
  ~SerialPortManagerClient_OnPortRemoved_Params_Data() = delete;
};
static_assert(sizeof(SerialPortManagerClient_OnPortRemoved_Params_Data) == 16,
              "Bad sizeof(SerialPortManagerClient_OnPortRemoved_Params_Data)");
class  SerialPort_StartWriting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data consumer;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SerialPort_StartWriting_Params_Data>;

  SerialPort_StartWriting_Params_Data();
  ~SerialPort_StartWriting_Params_Data() = delete;
};
static_assert(sizeof(SerialPort_StartWriting_Params_Data) == 16,
              "Bad sizeof(SerialPort_StartWriting_Params_Data)");
class  SerialPort_StartReading_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data producer;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SerialPort_StartReading_Params_Data>;

  SerialPort_StartReading_Params_Data();
  ~SerialPort_StartReading_Params_Data() = delete;
};
static_assert(sizeof(SerialPort_StartReading_Params_Data) == 16,
              "Bad sizeof(SerialPort_StartReading_Params_Data)");
class  SerialPort_Flush_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t mode;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SerialPort_Flush_Params_Data>;

  SerialPort_Flush_Params_Data();
  ~SerialPort_Flush_Params_Data() = delete;
};
static_assert(sizeof(SerialPort_Flush_Params_Data) == 16,
              "Bad sizeof(SerialPort_Flush_Params_Data)");
class  SerialPort_Flush_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SerialPort_Flush_ResponseParams_Data>;

  SerialPort_Flush_ResponseParams_Data();
  ~SerialPort_Flush_ResponseParams_Data() = delete;
};
static_assert(sizeof(SerialPort_Flush_ResponseParams_Data) == 8,
              "Bad sizeof(SerialPort_Flush_ResponseParams_Data)");
class  SerialPort_Drain_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SerialPort_Drain_Params_Data>;

  SerialPort_Drain_Params_Data();
  ~SerialPort_Drain_Params_Data() = delete;
};
static_assert(sizeof(SerialPort_Drain_Params_Data) == 8,
              "Bad sizeof(SerialPort_Drain_Params_Data)");
class  SerialPort_Drain_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SerialPort_Drain_ResponseParams_Data>;

  SerialPort_Drain_ResponseParams_Data();
  ~SerialPort_Drain_ResponseParams_Data() = delete;
};
static_assert(sizeof(SerialPort_Drain_ResponseParams_Data) == 8,
              "Bad sizeof(SerialPort_Drain_ResponseParams_Data)");
class  SerialPort_GetControlSignals_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SerialPort_GetControlSignals_Params_Data>;

  SerialPort_GetControlSignals_Params_Data();
  ~SerialPort_GetControlSignals_Params_Data() = delete;
};
static_assert(sizeof(SerialPort_GetControlSignals_Params_Data) == 8,
              "Bad sizeof(SerialPort_GetControlSignals_Params_Data)");
class  SerialPort_GetControlSignals_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SerialPortControlSignals_Data> signals;

 private:
  friend class mojo::internal::MessageFragment<SerialPort_GetControlSignals_ResponseParams_Data>;

  SerialPort_GetControlSignals_ResponseParams_Data();
  ~SerialPort_GetControlSignals_ResponseParams_Data() = delete;
};
static_assert(sizeof(SerialPort_GetControlSignals_ResponseParams_Data) == 16,
              "Bad sizeof(SerialPort_GetControlSignals_ResponseParams_Data)");
class  SerialPort_SetControlSignals_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SerialHostControlSignals_Data> signals;

 private:
  friend class mojo::internal::MessageFragment<SerialPort_SetControlSignals_Params_Data>;

  SerialPort_SetControlSignals_Params_Data();
  ~SerialPort_SetControlSignals_Params_Data() = delete;
};
static_assert(sizeof(SerialPort_SetControlSignals_Params_Data) == 16,
              "Bad sizeof(SerialPort_SetControlSignals_Params_Data)");
class  SerialPort_SetControlSignals_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<SerialPort_SetControlSignals_ResponseParams_Data>;

  SerialPort_SetControlSignals_ResponseParams_Data();
  ~SerialPort_SetControlSignals_ResponseParams_Data() = delete;
};
static_assert(sizeof(SerialPort_SetControlSignals_ResponseParams_Data) == 16,
              "Bad sizeof(SerialPort_SetControlSignals_ResponseParams_Data)");
class  SerialPort_ConfigurePort_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SerialConnectionOptions_Data> options;

 private:
  friend class mojo::internal::MessageFragment<SerialPort_ConfigurePort_Params_Data>;

  SerialPort_ConfigurePort_Params_Data();
  ~SerialPort_ConfigurePort_Params_Data() = delete;
};
static_assert(sizeof(SerialPort_ConfigurePort_Params_Data) == 16,
              "Bad sizeof(SerialPort_ConfigurePort_Params_Data)");
class  SerialPort_ConfigurePort_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<SerialPort_ConfigurePort_ResponseParams_Data>;

  SerialPort_ConfigurePort_ResponseParams_Data();
  ~SerialPort_ConfigurePort_ResponseParams_Data() = delete;
};
static_assert(sizeof(SerialPort_ConfigurePort_ResponseParams_Data) == 16,
              "Bad sizeof(SerialPort_ConfigurePort_ResponseParams_Data)");
class  SerialPort_GetPortInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SerialPort_GetPortInfo_Params_Data>;

  SerialPort_GetPortInfo_Params_Data();
  ~SerialPort_GetPortInfo_Params_Data() = delete;
};
static_assert(sizeof(SerialPort_GetPortInfo_Params_Data) == 8,
              "Bad sizeof(SerialPort_GetPortInfo_Params_Data)");
class  SerialPort_GetPortInfo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SerialConnectionInfo_Data> info;

 private:
  friend class mojo::internal::MessageFragment<SerialPort_GetPortInfo_ResponseParams_Data>;

  SerialPort_GetPortInfo_ResponseParams_Data();
  ~SerialPort_GetPortInfo_ResponseParams_Data() = delete;
};
static_assert(sizeof(SerialPort_GetPortInfo_ResponseParams_Data) == 16,
              "Bad sizeof(SerialPort_GetPortInfo_ResponseParams_Data)");
class  SerialPort_Close_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t flush : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<SerialPort_Close_Params_Data>;

  SerialPort_Close_Params_Data();
  ~SerialPort_Close_Params_Data() = delete;
};
static_assert(sizeof(SerialPort_Close_Params_Data) == 16,
              "Bad sizeof(SerialPort_Close_Params_Data)");
class  SerialPort_Close_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SerialPort_Close_ResponseParams_Data>;

  SerialPort_Close_ResponseParams_Data();
  ~SerialPort_Close_ResponseParams_Data() = delete;
};
static_assert(sizeof(SerialPort_Close_ResponseParams_Data) == 8,
              "Bad sizeof(SerialPort_Close_ResponseParams_Data)");
class  SerialPortClient_OnReadError_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SerialPortClient_OnReadError_Params_Data>;

  SerialPortClient_OnReadError_Params_Data();
  ~SerialPortClient_OnReadError_Params_Data() = delete;
};
static_assert(sizeof(SerialPortClient_OnReadError_Params_Data) == 16,
              "Bad sizeof(SerialPortClient_OnReadError_Params_Data)");
class  SerialPortClient_OnSendError_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SerialPortClient_OnSendError_Params_Data>;

  SerialPortClient_OnSendError_Params_Data();
  ~SerialPortClient_OnSendError_Params_Data() = delete;
};
static_assert(sizeof(SerialPortClient_OnSendError_Params_Data) == 16,
              "Bad sizeof(SerialPortClient_OnSendError_Params_Data)");

}  // namespace internal


class SerialPortManager_SetClient_ParamsDataView {
 public:
  SerialPortManager_SetClient_ParamsDataView() = default;

  SerialPortManager_SetClient_ParamsDataView(
      internal::SerialPortManager_SetClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::SerialPortManagerClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SerialPortManager_SetClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPortManager_GetDevices_ParamsDataView {
 public:
  SerialPortManager_GetDevices_ParamsDataView() = default;

  SerialPortManager_GetDevices_ParamsDataView(
      internal::SerialPortManager_GetDevices_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SerialPortManager_GetDevices_Params_Data* data_ = nullptr;
};



class SerialPortManager_GetDevices_ResponseParamsDataView {
 public:
  SerialPortManager_GetDevices_ResponseParamsDataView() = default;

  SerialPortManager_GetDevices_ResponseParamsDataView(
      internal::SerialPortManager_GetDevices_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDevicesDataView(
      mojo::ArrayDataView<SerialPortInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevices(UserType* output) {
    
    auto* pointer = data_->devices.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::SerialPortInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::SerialPortManager_GetDevices_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPortManager_OpenPort_ParamsDataView {
 public:
  SerialPortManager_OpenPort_ParamsDataView() = default;

  SerialPortManager_OpenPort_ParamsDataView(
      internal::SerialPortManager_OpenPort_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
    auto* pointer = data_->token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  bool use_alternate_path() const {
    return data_->use_alternate_path;
  }
  inline void GetOptionsDataView(
      SerialConnectionOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::device::mojom::SerialConnectionOptionsDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::SerialPortClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeWatcher() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::SerialPortConnectionWatcherInterfaceBase>>(
            &data_->watcher, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SerialPortManager_OpenPort_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPortManager_OpenPort_ResponseParamsDataView {
 public:
  SerialPortManager_OpenPort_ResponseParamsDataView() = default;

  SerialPortManager_OpenPort_ResponseParamsDataView(
      internal::SerialPortManager_OpenPort_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePort() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::SerialPortInterfaceBase>>(
            &data_->port, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SerialPortManager_OpenPort_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPortManagerClient_OnPortAdded_ParamsDataView {
 public:
  SerialPortManagerClient_OnPortAdded_ParamsDataView() = default;

  SerialPortManagerClient_OnPortAdded_ParamsDataView(
      internal::SerialPortManagerClient_OnPortAdded_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPortInfoDataView(
      SerialPortInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPortInfo(UserType* output) {
    
    auto* pointer = data_->port_info.Get();
    return mojo::internal::Deserialize<::device::mojom::SerialPortInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::SerialPortManagerClient_OnPortAdded_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPortManagerClient_OnPortRemoved_ParamsDataView {
 public:
  SerialPortManagerClient_OnPortRemoved_ParamsDataView() = default;

  SerialPortManagerClient_OnPortRemoved_ParamsDataView(
      internal::SerialPortManagerClient_OnPortRemoved_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPortInfoDataView(
      SerialPortInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPortInfo(UserType* output) {
    
    auto* pointer = data_->port_info.Get();
    return mojo::internal::Deserialize<::device::mojom::SerialPortInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::SerialPortManagerClient_OnPortRemoved_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPort_StartWriting_ParamsDataView {
 public:
  SerialPort_StartWriting_ParamsDataView() = default;

  SerialPort_StartWriting_ParamsDataView(
      internal::SerialPort_StartWriting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  mojo::ScopedDataPipeConsumerHandle TakeConsumer() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->consumer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SerialPort_StartWriting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPort_StartReading_ParamsDataView {
 public:
  SerialPort_StartReading_ParamsDataView() = default;

  SerialPort_StartReading_ParamsDataView(
      internal::SerialPort_StartReading_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  mojo::ScopedDataPipeProducerHandle TakeProducer() {
    mojo::ScopedDataPipeProducerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeProducerHandle>(
            &data_->producer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SerialPort_StartReading_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPort_Flush_ParamsDataView {
 public:
  SerialPort_Flush_ParamsDataView() = default;

  SerialPort_Flush_ParamsDataView(
      internal::SerialPort_Flush_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadMode(UserType* output) const {
    auto data_value = data_->mode;
    return mojo::internal::Deserialize<::device::mojom::SerialPortFlushMode>(
        data_value, output);
  }
  SerialPortFlushMode mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::SerialPortFlushMode>(data_->mode));
  }
 private:
  internal::SerialPort_Flush_Params_Data* data_ = nullptr;
};



class SerialPort_Flush_ResponseParamsDataView {
 public:
  SerialPort_Flush_ResponseParamsDataView() = default;

  SerialPort_Flush_ResponseParamsDataView(
      internal::SerialPort_Flush_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SerialPort_Flush_ResponseParams_Data* data_ = nullptr;
};



class SerialPort_Drain_ParamsDataView {
 public:
  SerialPort_Drain_ParamsDataView() = default;

  SerialPort_Drain_ParamsDataView(
      internal::SerialPort_Drain_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SerialPort_Drain_Params_Data* data_ = nullptr;
};



class SerialPort_Drain_ResponseParamsDataView {
 public:
  SerialPort_Drain_ResponseParamsDataView() = default;

  SerialPort_Drain_ResponseParamsDataView(
      internal::SerialPort_Drain_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SerialPort_Drain_ResponseParams_Data* data_ = nullptr;
};



class SerialPort_GetControlSignals_ParamsDataView {
 public:
  SerialPort_GetControlSignals_ParamsDataView() = default;

  SerialPort_GetControlSignals_ParamsDataView(
      internal::SerialPort_GetControlSignals_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SerialPort_GetControlSignals_Params_Data* data_ = nullptr;
};



class SerialPort_GetControlSignals_ResponseParamsDataView {
 public:
  SerialPort_GetControlSignals_ResponseParamsDataView() = default;

  SerialPort_GetControlSignals_ResponseParamsDataView(
      internal::SerialPort_GetControlSignals_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSignalsDataView(
      SerialPortControlSignalsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSignals(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::device::mojom::SerialPortControlSignalsDataView, UserType>(),
    "Attempting to read the optional `signals` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSignals` instead "
    "of `ReadSignals if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->signals.Get();
    return mojo::internal::Deserialize<::device::mojom::SerialPortControlSignalsDataView>(
        pointer, output, message_);
  }
 private:
  internal::SerialPort_GetControlSignals_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPort_SetControlSignals_ParamsDataView {
 public:
  SerialPort_SetControlSignals_ParamsDataView() = default;

  SerialPort_SetControlSignals_ParamsDataView(
      internal::SerialPort_SetControlSignals_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSignalsDataView(
      SerialHostControlSignalsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSignals(UserType* output) {
    
    auto* pointer = data_->signals.Get();
    return mojo::internal::Deserialize<::device::mojom::SerialHostControlSignalsDataView>(
        pointer, output, message_);
  }
 private:
  internal::SerialPort_SetControlSignals_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPort_SetControlSignals_ResponseParamsDataView {
 public:
  SerialPort_SetControlSignals_ResponseParamsDataView() = default;

  SerialPort_SetControlSignals_ResponseParamsDataView(
      internal::SerialPort_SetControlSignals_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::SerialPort_SetControlSignals_ResponseParams_Data* data_ = nullptr;
};



class SerialPort_ConfigurePort_ParamsDataView {
 public:
  SerialPort_ConfigurePort_ParamsDataView() = default;

  SerialPort_ConfigurePort_ParamsDataView(
      internal::SerialPort_ConfigurePort_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOptionsDataView(
      SerialConnectionOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::device::mojom::SerialConnectionOptionsDataView>(
        pointer, output, message_);
  }
 private:
  internal::SerialPort_ConfigurePort_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPort_ConfigurePort_ResponseParamsDataView {
 public:
  SerialPort_ConfigurePort_ResponseParamsDataView() = default;

  SerialPort_ConfigurePort_ResponseParamsDataView(
      internal::SerialPort_ConfigurePort_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::SerialPort_ConfigurePort_ResponseParams_Data* data_ = nullptr;
};



class SerialPort_GetPortInfo_ParamsDataView {
 public:
  SerialPort_GetPortInfo_ParamsDataView() = default;

  SerialPort_GetPortInfo_ParamsDataView(
      internal::SerialPort_GetPortInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SerialPort_GetPortInfo_Params_Data* data_ = nullptr;
};



class SerialPort_GetPortInfo_ResponseParamsDataView {
 public:
  SerialPort_GetPortInfo_ResponseParamsDataView() = default;

  SerialPort_GetPortInfo_ResponseParamsDataView(
      internal::SerialPort_GetPortInfo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      SerialConnectionInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInfo(UserType* output) {
    
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<::device::mojom::SerialConnectionInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::SerialPort_GetPortInfo_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SerialPort_Close_ParamsDataView {
 public:
  SerialPort_Close_ParamsDataView() = default;

  SerialPort_Close_ParamsDataView(
      internal::SerialPort_Close_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool flush() const {
    return data_->flush;
  }
 private:
  internal::SerialPort_Close_Params_Data* data_ = nullptr;
};



class SerialPort_Close_ResponseParamsDataView {
 public:
  SerialPort_Close_ResponseParamsDataView() = default;

  SerialPort_Close_ResponseParamsDataView(
      internal::SerialPort_Close_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SerialPort_Close_ResponseParams_Data* data_ = nullptr;
};



class SerialPortClient_OnReadError_ParamsDataView {
 public:
  SerialPortClient_OnReadError_ParamsDataView() = default;

  SerialPortClient_OnReadError_ParamsDataView(
      internal::SerialPortClient_OnReadError_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::device::mojom::SerialReceiveError>(
        data_value, output);
  }
  SerialReceiveError error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::SerialReceiveError>(data_->error));
  }
 private:
  internal::SerialPortClient_OnReadError_Params_Data* data_ = nullptr;
};



class SerialPortClient_OnSendError_ParamsDataView {
 public:
  SerialPortClient_OnSendError_ParamsDataView() = default;

  SerialPortClient_OnSendError_ParamsDataView(
      internal::SerialPortClient_OnSendError_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::device::mojom::SerialSendError>(
        data_value, output);
  }
  SerialSendError error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::SerialSendError>(data_->error));
  }
 private:
  internal::SerialPortClient_OnSendError_Params_Data* data_ = nullptr;
};






inline void SerialPortManager_GetDevices_ResponseParamsDataView::GetDevicesDataView(
    mojo::ArrayDataView<SerialPortInfoDataView>* output) {
  auto pointer = data_->devices.Get();
  *output = mojo::ArrayDataView<SerialPortInfoDataView>(pointer, message_);
}


inline void SerialPortManager_OpenPort_ParamsDataView::GetTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void SerialPortManager_OpenPort_ParamsDataView::GetOptionsDataView(
    SerialConnectionOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = SerialConnectionOptionsDataView(pointer, message_);
}




inline void SerialPortManagerClient_OnPortAdded_ParamsDataView::GetPortInfoDataView(
    SerialPortInfoDataView* output) {
  auto pointer = data_->port_info.Get();
  *output = SerialPortInfoDataView(pointer, message_);
}


inline void SerialPortManagerClient_OnPortRemoved_ParamsDataView::GetPortInfoDataView(
    SerialPortInfoDataView* output) {
  auto pointer = data_->port_info.Get();
  *output = SerialPortInfoDataView(pointer, message_);
}
















inline void SerialPort_GetControlSignals_ResponseParamsDataView::GetSignalsDataView(
    SerialPortControlSignalsDataView* output) {
  auto pointer = data_->signals.Get();
  *output = SerialPortControlSignalsDataView(pointer, message_);
}


inline void SerialPort_SetControlSignals_ParamsDataView::GetSignalsDataView(
    SerialHostControlSignalsDataView* output) {
  auto pointer = data_->signals.Get();
  *output = SerialHostControlSignalsDataView(pointer, message_);
}




inline void SerialPort_ConfigurePort_ParamsDataView::GetOptionsDataView(
    SerialConnectionOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = SerialConnectionOptionsDataView(pointer, message_);
}






inline void SerialPort_GetPortInfo_ResponseParamsDataView::GetInfoDataView(
    SerialConnectionInfoDataView* output) {
  auto pointer = data_->info.Get();
  *output = SerialConnectionInfoDataView(pointer, message_);
}









}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_SERIAL_MOJOM_PARAMS_DATA_H_