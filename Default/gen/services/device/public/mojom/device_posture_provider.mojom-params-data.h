// services/device/public/mojom/device_posture_provider.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_POSTURE_PROVIDER_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_POSTURE_PROVIDER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  DevicePostureProvider_AddListenerAndGetCurrentPosture_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<DevicePostureProvider_AddListenerAndGetCurrentPosture_Params_Data>;

  DevicePostureProvider_AddListenerAndGetCurrentPosture_Params_Data();
  ~DevicePostureProvider_AddListenerAndGetCurrentPosture_Params_Data() = delete;
};
static_assert(sizeof(DevicePostureProvider_AddListenerAndGetCurrentPosture_Params_Data) == 16,
              "Bad sizeof(DevicePostureProvider_AddListenerAndGetCurrentPosture_Params_Data)");
class  DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t posture;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParams_Data>;

  DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParams_Data();
  ~DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParams_Data() = delete;
};
static_assert(sizeof(DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParams_Data) == 16,
              "Bad sizeof(DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParams_Data)");
class  DevicePostureProviderClient_OnPostureChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t posture;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DevicePostureProviderClient_OnPostureChanged_Params_Data>;

  DevicePostureProviderClient_OnPostureChanged_Params_Data();
  ~DevicePostureProviderClient_OnPostureChanged_Params_Data() = delete;
};
static_assert(sizeof(DevicePostureProviderClient_OnPostureChanged_Params_Data) == 16,
              "Bad sizeof(DevicePostureProviderClient_OnPostureChanged_Params_Data)");

}  // namespace internal


class DevicePostureProvider_AddListenerAndGetCurrentPosture_ParamsDataView {
 public:
  DevicePostureProvider_AddListenerAndGetCurrentPosture_ParamsDataView() = default;

  DevicePostureProvider_AddListenerAndGetCurrentPosture_ParamsDataView(
      internal::DevicePostureProvider_AddListenerAndGetCurrentPosture_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::DevicePostureProviderClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DevicePostureProvider_AddListenerAndGetCurrentPosture_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParamsDataView {
 public:
  DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParamsDataView() = default;

  DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParamsDataView(
      internal::DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadPosture(UserType* output) const {
    auto data_value = data_->posture;
    return mojo::internal::Deserialize<::device::mojom::DevicePostureType>(
        data_value, output);
  }
  DevicePostureType posture() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::DevicePostureType>(data_->posture));
  }
 private:
  internal::DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParams_Data* data_ = nullptr;
};



class DevicePostureProviderClient_OnPostureChanged_ParamsDataView {
 public:
  DevicePostureProviderClient_OnPostureChanged_ParamsDataView() = default;

  DevicePostureProviderClient_OnPostureChanged_ParamsDataView(
      internal::DevicePostureProviderClient_OnPostureChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadPosture(UserType* output) const {
    auto data_value = data_->posture;
    return mojo::internal::Deserialize<::device::mojom::DevicePostureType>(
        data_value, output);
  }
  DevicePostureType posture() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::device::mojom::DevicePostureType>(data_->posture));
  }
 private:
  internal::DevicePostureProviderClient_OnPostureChanged_Params_Data* data_ = nullptr;
};







}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_POSTURE_PROVIDER_MOJOM_PARAMS_DATA_H_