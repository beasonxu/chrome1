// services/device/public/mojom/device_posture_provider.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../mojo/public/js/bindings.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const DevicePostureTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const DevicePostureType = {
  
  kContinuous: 0,
  kFolded: 1,
  kFoldedOver: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class DevicePostureProviderPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'device.mojom.DevicePostureProvider', scope);
  }
}

/** @interface */
export class DevicePostureProviderInterface {
  
  /**
   * @param { !DevicePostureProviderClientRemote } client
   * @return {!Promise<{
        posture: !DevicePostureType,
   *  }>}
   */

  addListenerAndGetCurrentPosture(client) {}
}

/**
 * @implements { DevicePostureProviderInterface }
 */
export class DevicePostureProviderRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!DevicePostureProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          DevicePostureProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!DevicePostureProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !DevicePostureProviderClientRemote } client
   * @return {!Promise<{
        posture: !DevicePostureType,
   *  }>}
   */

  addListenerAndGetCurrentPosture(
      client) {
    return this.proxy.sendMessage(
        0,
        DevicePostureProvider_AddListenerAndGetCurrentPosture_ParamsSpec.$,
        DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParamsSpec.$,
        [
          client
        ]);
  }
}

/**
 * An object which receives request messages for the DevicePostureProvider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class DevicePostureProviderReceiver {
  /**
   * @param {!DevicePostureProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!DevicePostureProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        DevicePostureProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!DevicePostureProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        DevicePostureProvider_AddListenerAndGetCurrentPosture_ParamsSpec.$,
        DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParamsSpec.$,
        impl.addListenerAndGetCurrentPosture.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class DevicePostureProvider {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "device.mojom.DevicePostureProvider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!DevicePostureProviderRemote}
   */
  static getRemote() {
    let remote = new DevicePostureProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the DevicePostureProvider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class DevicePostureProviderCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      DevicePostureProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!DevicePostureProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addListenerAndGetCurrentPosture =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        DevicePostureProvider_AddListenerAndGetCurrentPosture_ParamsSpec.$,
        DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParamsSpec.$,
        this.addListenerAndGetCurrentPosture.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class DevicePostureProviderClientPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'device.mojom.DevicePostureProviderClient', scope);
  }
}

/** @interface */
export class DevicePostureProviderClientInterface {
  
  /**
   * @param { !DevicePostureType } posture
   */

  onPostureChanged(posture) {}
}

/**
 * @implements { DevicePostureProviderClientInterface }
 */
export class DevicePostureProviderClientRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!DevicePostureProviderClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          DevicePostureProviderClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!DevicePostureProviderClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !DevicePostureType } posture
   */

  onPostureChanged(
      posture) {
    this.proxy.sendMessage(
        0,
        DevicePostureProviderClient_OnPostureChanged_ParamsSpec.$,
        null,
        [
          posture
        ]);
  }
}

/**
 * An object which receives request messages for the DevicePostureProviderClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class DevicePostureProviderClientReceiver {
  /**
   * @param {!DevicePostureProviderClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!DevicePostureProviderClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        DevicePostureProviderClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!DevicePostureProviderClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        DevicePostureProviderClient_OnPostureChanged_ParamsSpec.$,
        null,
        impl.onPostureChanged.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class DevicePostureProviderClient {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "device.mojom.DevicePostureProviderClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!DevicePostureProviderClientRemote}
   */
  static getRemote() {
    let remote = new DevicePostureProviderClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the DevicePostureProviderClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class DevicePostureProviderClientCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      DevicePostureProviderClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!DevicePostureProviderClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onPostureChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        DevicePostureProviderClient_OnPostureChanged_ParamsSpec.$,
        null,
        this.onPostureChanged.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const DevicePostureProvider_AddListenerAndGetCurrentPosture_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const DevicePostureProviderClient_OnPostureChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    DevicePostureProvider_AddListenerAndGetCurrentPosture_ParamsSpec.$,
    'DevicePostureProvider_AddListenerAndGetCurrentPosture_Params',
    [
      mojo.internal.StructField(
        'client', 0,
        0,
        mojo.internal.InterfaceProxy(DevicePostureProviderClientRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class DevicePostureProvider_AddListenerAndGetCurrentPosture_Params {
  constructor() {
    /** @type { !DevicePostureProviderClientRemote } */
    this.client;
  }
}



mojo.internal.Struct(
    DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParamsSpec.$,
    'DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParams',
    [
      mojo.internal.StructField(
        'posture', 0,
        0,
        DevicePostureTypeSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class DevicePostureProvider_AddListenerAndGetCurrentPosture_ResponseParams {
  constructor() {
    /** @type { !DevicePostureType } */
    this.posture;
  }
}



mojo.internal.Struct(
    DevicePostureProviderClient_OnPostureChanged_ParamsSpec.$,
    'DevicePostureProviderClient_OnPostureChanged_Params',
    [
      mojo.internal.StructField(
        'posture', 0,
        0,
        DevicePostureTypeSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class DevicePostureProviderClient_OnPostureChanged_Params {
  constructor() {
    /** @type { !DevicePostureType } */
    this.posture;
  }
}

