// services/device/public/mojom/vibration_manager.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_VIBRATION_MANAGER_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_VIBRATION_MANAGER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  VibrationManager_Vibrate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t milliseconds;

 private:
  friend class mojo::internal::MessageFragment<VibrationManager_Vibrate_Params_Data>;

  VibrationManager_Vibrate_Params_Data();
  ~VibrationManager_Vibrate_Params_Data() = delete;
};
static_assert(sizeof(VibrationManager_Vibrate_Params_Data) == 16,
              "Bad sizeof(VibrationManager_Vibrate_Params_Data)");
class  VibrationManager_Vibrate_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<VibrationManager_Vibrate_ResponseParams_Data>;

  VibrationManager_Vibrate_ResponseParams_Data();
  ~VibrationManager_Vibrate_ResponseParams_Data() = delete;
};
static_assert(sizeof(VibrationManager_Vibrate_ResponseParams_Data) == 8,
              "Bad sizeof(VibrationManager_Vibrate_ResponseParams_Data)");
class  VibrationManager_Cancel_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<VibrationManager_Cancel_Params_Data>;

  VibrationManager_Cancel_Params_Data();
  ~VibrationManager_Cancel_Params_Data() = delete;
};
static_assert(sizeof(VibrationManager_Cancel_Params_Data) == 8,
              "Bad sizeof(VibrationManager_Cancel_Params_Data)");
class  VibrationManager_Cancel_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<VibrationManager_Cancel_ResponseParams_Data>;

  VibrationManager_Cancel_ResponseParams_Data();
  ~VibrationManager_Cancel_ResponseParams_Data() = delete;
};
static_assert(sizeof(VibrationManager_Cancel_ResponseParams_Data) == 8,
              "Bad sizeof(VibrationManager_Cancel_ResponseParams_Data)");

}  // namespace internal


class VibrationManager_Vibrate_ParamsDataView {
 public:
  VibrationManager_Vibrate_ParamsDataView() = default;

  VibrationManager_Vibrate_ParamsDataView(
      internal::VibrationManager_Vibrate_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t milliseconds() const {
    return data_->milliseconds;
  }
 private:
  internal::VibrationManager_Vibrate_Params_Data* data_ = nullptr;
};



class VibrationManager_Vibrate_ResponseParamsDataView {
 public:
  VibrationManager_Vibrate_ResponseParamsDataView() = default;

  VibrationManager_Vibrate_ResponseParamsDataView(
      internal::VibrationManager_Vibrate_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VibrationManager_Vibrate_ResponseParams_Data* data_ = nullptr;
};



class VibrationManager_Cancel_ParamsDataView {
 public:
  VibrationManager_Cancel_ParamsDataView() = default;

  VibrationManager_Cancel_ParamsDataView(
      internal::VibrationManager_Cancel_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VibrationManager_Cancel_Params_Data* data_ = nullptr;
};



class VibrationManager_Cancel_ResponseParamsDataView {
 public:
  VibrationManager_Cancel_ResponseParamsDataView() = default;

  VibrationManager_Cancel_ResponseParamsDataView(
      internal::VibrationManager_Cancel_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VibrationManager_Cancel_ResponseParams_Data* data_ = nullptr;
};









}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_VIBRATION_MANAGER_MOJOM_PARAMS_DATA_H_