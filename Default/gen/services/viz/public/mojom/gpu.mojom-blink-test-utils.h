// services/viz/public/mojom/gpu.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PUBLIC_MOJOM_GPU_MOJOM_BLINK_TEST_UTILS_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_GPU_MOJOM_BLINK_TEST_UTILS_H_

#include "services/viz/public/mojom/gpu.mojom-blink.h"
#include "third_party/blink/public/platform/web_common.h"


namespace viz {
namespace mojom {
namespace blink {


class BLINK_PLATFORM_EXPORT GpuMemoryBufferFactoryInterceptorForTesting : public GpuMemoryBufferFactory {
  virtual GpuMemoryBufferFactory* GetForwardingInterface() = 0;
  void CreateGpuMemoryBuffer(::gfx::GpuMemoryBufferId id, const ::gfx::Size& size, ::gfx::BufferFormat format, ::gfx::BufferUsage usage, CreateGpuMemoryBufferCallback callback) override;
  void DestroyGpuMemoryBuffer(::gfx::GpuMemoryBufferId id, const ::gpu::SyncToken& sync_token) override;
  void CopyGpuMemoryBuffer(::gfx::GpuMemoryBufferHandle buffer_handle, ::base::UnsafeSharedMemoryRegion shared_memory, CopyGpuMemoryBufferCallback callback) override;
};
class BLINK_PLATFORM_EXPORT GpuMemoryBufferFactoryAsyncWaiter {
 public:
  explicit GpuMemoryBufferFactoryAsyncWaiter(GpuMemoryBufferFactory* proxy);

  GpuMemoryBufferFactoryAsyncWaiter(const GpuMemoryBufferFactoryAsyncWaiter&) = delete;
  GpuMemoryBufferFactoryAsyncWaiter& operator=(const GpuMemoryBufferFactoryAsyncWaiter&) = delete;

  ~GpuMemoryBufferFactoryAsyncWaiter();
  void CreateGpuMemoryBuffer(
      ::gfx::GpuMemoryBufferId id, const ::gfx::Size& size, ::gfx::BufferFormat format, ::gfx::BufferUsage usage, ::gfx::GpuMemoryBufferHandle* out_buffer_handle);
  void CopyGpuMemoryBuffer(
      ::gfx::GpuMemoryBufferHandle buffer_handle, ::base::UnsafeSharedMemoryRegion shared_memory, bool* out_success);

 private:
  GpuMemoryBufferFactory* const proxy_;
};


class BLINK_PLATFORM_EXPORT GpuInterceptorForTesting : public Gpu {
  virtual Gpu* GetForwardingInterface() = 0;
  void CreateGpuMemoryBufferFactory(::mojo::PendingReceiver<GpuMemoryBufferFactory> receiver) override;
  void EstablishGpuChannel(EstablishGpuChannelCallback callback) override;
  void CreateVideoEncodeAcceleratorProvider(::mojo::PendingReceiver<::media::mojom::blink::VideoEncodeAcceleratorProvider> vea_provider) override;
};
class BLINK_PLATFORM_EXPORT GpuAsyncWaiter {
 public:
  explicit GpuAsyncWaiter(Gpu* proxy);

  GpuAsyncWaiter(const GpuAsyncWaiter&) = delete;
  GpuAsyncWaiter& operator=(const GpuAsyncWaiter&) = delete;

  ~GpuAsyncWaiter();
  void EstablishGpuChannel(
      int32_t* out_client_id, ::mojo::ScopedMessagePipeHandle* out_channel_handle, ::gpu::mojom::blink::GpuInfoPtr* out_gpu_info, ::gpu::mojom::blink::GpuFeatureInfoPtr* out_gpu_feature_info);

 private:
  Gpu* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace viz

#endif  // SERVICES_VIZ_PUBLIC_MOJOM_GPU_MOJOM_BLINK_TEST_UTILS_H_