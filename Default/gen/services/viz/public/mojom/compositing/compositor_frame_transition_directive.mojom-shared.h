// services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_TRANSITION_DIRECTIVE_MOJOM_SHARED_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_TRANSITION_DIRECTIVE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "services/viz/public/mojom/compositing/compositor_render_pass_id.mojom-shared.h"
#include "services/viz/public/mojom/compositing/shared_element_resource_id.mojom-shared.h"







namespace viz {
namespace mojom {
class CompositorFrameTransitionDirectiveConfigDataView;

class CompositorFrameTransitionDirectiveSharedElementDataView;

class CompositorFrameTransitionDirectiveDataView;



}  // namespace mojom
}  // namespace viz

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::viz::mojom::CompositorFrameTransitionDirectiveConfigDataView> {
  using Data = ::viz::mojom::internal::CompositorFrameTransitionDirectiveConfig_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::CompositorFrameTransitionDirectiveSharedElementDataView> {
  using Data = ::viz::mojom::internal::CompositorFrameTransitionDirectiveSharedElement_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::CompositorFrameTransitionDirectiveDataView> {
  using Data = ::viz::mojom::internal::CompositorFrameTransitionDirective_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace viz {
namespace mojom {


enum class CompositorFrameTransitionDirectiveType : int32_t {
  
  kSave = 0,
  
  kAnimate = 1,
  
  kAnimateRenderer = 2,
  
  kRelease = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, CompositorFrameTransitionDirectiveType value);
inline bool IsKnownEnumValue(CompositorFrameTransitionDirectiveType value) {
  return internal::CompositorFrameTransitionDirectiveType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class CompositorFrameTransitionDirectiveEffect : int32_t {
  
  kNone = 0,
  
  kCoverDown = 1,
  
  kCoverLeft = 2,
  
  kCoverRight = 3,
  
  kCoverUp = 4,
  
  kExplode = 5,
  
  kFade = 6,
  
  kImplode = 7,
  
  kRevealDown = 8,
  
  kRevealLeft = 9,
  
  kRevealRight = 10,
  
  kRevealUp = 11,
  kMinValue = 0,
  kMaxValue = 11,
};

 std::ostream& operator<<(std::ostream& os, CompositorFrameTransitionDirectiveEffect value);
inline bool IsKnownEnumValue(CompositorFrameTransitionDirectiveEffect value) {
  return internal::CompositorFrameTransitionDirectiveEffect_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class CompositorFrameTransitionDirectiveConfigDataView {
 public:
  CompositorFrameTransitionDirectiveConfigDataView() = default;

  CompositorFrameTransitionDirectiveConfigDataView(
      internal::CompositorFrameTransitionDirectiveConfig_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDuration(UserType* output) {
    
    auto* pointer = data_->duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
  inline void GetDelayDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDelay(UserType* output) {
    
    auto* pointer = data_->delay.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::CompositorFrameTransitionDirectiveConfig_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameTransitionDirectiveSharedElementDataView {
 public:
  CompositorFrameTransitionDirectiveSharedElementDataView() = default;

  CompositorFrameTransitionDirectiveSharedElementDataView(
      internal::CompositorFrameTransitionDirectiveSharedElement_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRenderPassIdDataView(
      ::viz::mojom::CompositorRenderPassIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRenderPassId(UserType* output) {
    
    auto* pointer = data_->render_pass_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::CompositorRenderPassIdDataView>(
        pointer, output, message_);
  }
  inline void GetConfigDataView(
      CompositorFrameTransitionDirectiveConfigDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConfig(UserType* output) {
    
    auto* pointer = data_->config.Get();
    return mojo::internal::Deserialize<::viz::mojom::CompositorFrameTransitionDirectiveConfigDataView>(
        pointer, output, message_);
  }
  inline void GetSharedElementResourceIdDataView(
      ::viz::mojom::SharedElementResourceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSharedElementResourceId(UserType* output) {
    
    auto* pointer = data_->shared_element_resource_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::SharedElementResourceIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::CompositorFrameTransitionDirectiveSharedElement_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameTransitionDirectiveDataView {
 public:
  CompositorFrameTransitionDirectiveDataView() = default;

  CompositorFrameTransitionDirectiveDataView(
      internal::CompositorFrameTransitionDirective_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t sequence_id() const {
    return data_->sequence_id;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::viz::mojom::CompositorFrameTransitionDirectiveType>(
        data_value, output);
  }
  CompositorFrameTransitionDirectiveType type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::viz::mojom::CompositorFrameTransitionDirectiveType>(data_->type));
  }
  bool is_renderer_driven_animation() const {
    return data_->is_renderer_driven_animation;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadEffect(UserType* output) const {
    auto data_value = data_->effect;
    return mojo::internal::Deserialize<::viz::mojom::CompositorFrameTransitionDirectiveEffect>(
        data_value, output);
  }
  CompositorFrameTransitionDirectiveEffect effect() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::viz::mojom::CompositorFrameTransitionDirectiveEffect>(data_->effect));
  }
  inline void GetRootConfigDataView(
      CompositorFrameTransitionDirectiveConfigDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRootConfig(UserType* output) {
    
    auto* pointer = data_->root_config.Get();
    return mojo::internal::Deserialize<::viz::mojom::CompositorFrameTransitionDirectiveConfigDataView>(
        pointer, output, message_);
  }
  inline void GetSharedElementsDataView(
      mojo::ArrayDataView<CompositorFrameTransitionDirectiveSharedElementDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSharedElements(UserType* output) {
    
    auto* pointer = data_->shared_elements.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::viz::mojom::CompositorFrameTransitionDirectiveSharedElementDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CompositorFrameTransitionDirective_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace viz

namespace std {

template <>
struct hash<::viz::mojom::CompositorFrameTransitionDirectiveType>
    : public mojo::internal::EnumHashImpl<::viz::mojom::CompositorFrameTransitionDirectiveType> {};

template <>
struct hash<::viz::mojom::CompositorFrameTransitionDirectiveEffect>
    : public mojo::internal::EnumHashImpl<::viz::mojom::CompositorFrameTransitionDirectiveEffect> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::CompositorFrameTransitionDirectiveType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::viz::mojom::CompositorFrameTransitionDirectiveType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::viz::mojom::CompositorFrameTransitionDirectiveType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::CompositorFrameTransitionDirectiveEffect, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::viz::mojom::CompositorFrameTransitionDirectiveEffect, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::viz::mojom::CompositorFrameTransitionDirectiveEffect>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::CompositorFrameTransitionDirectiveConfigDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::CompositorFrameTransitionDirectiveConfigDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::CompositorFrameTransitionDirectiveConfig_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::duration(input)) in_duration = Traits::duration(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->duration)::BaseType> duration_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_duration, duration_fragment);
    fragment->duration.Set(
        duration_fragment.is_null() ? nullptr : duration_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->duration.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null duration in CompositorFrameTransitionDirectiveConfig struct");
    decltype(Traits::delay(input)) in_delay = Traits::delay(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->delay)::BaseType> delay_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_delay, delay_fragment);
    fragment->delay.Set(
        delay_fragment.is_null() ? nullptr : delay_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->delay.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null delay in CompositorFrameTransitionDirectiveConfig struct");
  }

  static bool Deserialize(::viz::mojom::internal::CompositorFrameTransitionDirectiveConfig_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::CompositorFrameTransitionDirectiveConfigDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::CompositorFrameTransitionDirectiveSharedElementDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::CompositorFrameTransitionDirectiveSharedElementDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::CompositorFrameTransitionDirectiveSharedElement_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::render_pass_id(input)) in_render_pass_id = Traits::render_pass_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->render_pass_id)::BaseType> render_pass_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::CompositorRenderPassIdDataView>(
        in_render_pass_id, render_pass_id_fragment);
    fragment->render_pass_id.Set(
        render_pass_id_fragment.is_null() ? nullptr : render_pass_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->render_pass_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null render_pass_id in CompositorFrameTransitionDirectiveSharedElement struct");
    decltype(Traits::config(input)) in_config = Traits::config(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->config)::BaseType> config_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::CompositorFrameTransitionDirectiveConfigDataView>(
        in_config, config_fragment);
    fragment->config.Set(
        config_fragment.is_null() ? nullptr : config_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->config.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null config in CompositorFrameTransitionDirectiveSharedElement struct");
    decltype(Traits::shared_element_resource_id(input)) in_shared_element_resource_id = Traits::shared_element_resource_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->shared_element_resource_id)::BaseType> shared_element_resource_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::SharedElementResourceIdDataView>(
        in_shared_element_resource_id, shared_element_resource_id_fragment);
    fragment->shared_element_resource_id.Set(
        shared_element_resource_id_fragment.is_null() ? nullptr : shared_element_resource_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->shared_element_resource_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null shared_element_resource_id in CompositorFrameTransitionDirectiveSharedElement struct");
  }

  static bool Deserialize(::viz::mojom::internal::CompositorFrameTransitionDirectiveSharedElement_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::CompositorFrameTransitionDirectiveSharedElementDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::CompositorFrameTransitionDirectiveDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::CompositorFrameTransitionDirectiveDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::CompositorFrameTransitionDirective_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->sequence_id = Traits::sequence_id(input);
    mojo::internal::Serialize<::viz::mojom::CompositorFrameTransitionDirectiveType>(
        Traits::type(input), &fragment->type);
    fragment->is_renderer_driven_animation = Traits::is_renderer_driven_animation(input);
    mojo::internal::Serialize<::viz::mojom::CompositorFrameTransitionDirectiveEffect>(
        Traits::effect(input), &fragment->effect);
    decltype(Traits::root_config(input)) in_root_config = Traits::root_config(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->root_config)::BaseType> root_config_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::CompositorFrameTransitionDirectiveConfigDataView>(
        in_root_config, root_config_fragment);
    fragment->root_config.Set(
        root_config_fragment.is_null() ? nullptr : root_config_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->root_config.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null root_config in CompositorFrameTransitionDirective struct");
    decltype(Traits::shared_elements(input)) in_shared_elements = Traits::shared_elements(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->shared_elements)::BaseType>
        shared_elements_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams shared_elements_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::viz::mojom::CompositorFrameTransitionDirectiveSharedElementDataView>>(
        in_shared_elements, shared_elements_fragment, &shared_elements_validate_params);
    fragment->shared_elements.Set(
        shared_elements_fragment.is_null() ? nullptr : shared_elements_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->shared_elements.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null shared_elements in CompositorFrameTransitionDirective struct");
  }

  static bool Deserialize(::viz::mojom::internal::CompositorFrameTransitionDirective_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::CompositorFrameTransitionDirectiveDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace viz {
namespace mojom {

inline void CompositorFrameTransitionDirectiveConfigDataView::GetDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}
inline void CompositorFrameTransitionDirectiveConfigDataView::GetDelayDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->delay.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}


inline void CompositorFrameTransitionDirectiveSharedElementDataView::GetRenderPassIdDataView(
    ::viz::mojom::CompositorRenderPassIdDataView* output) {
  auto pointer = data_->render_pass_id.Get();
  *output = ::viz::mojom::CompositorRenderPassIdDataView(pointer, message_);
}
inline void CompositorFrameTransitionDirectiveSharedElementDataView::GetConfigDataView(
    CompositorFrameTransitionDirectiveConfigDataView* output) {
  auto pointer = data_->config.Get();
  *output = CompositorFrameTransitionDirectiveConfigDataView(pointer, message_);
}
inline void CompositorFrameTransitionDirectiveSharedElementDataView::GetSharedElementResourceIdDataView(
    ::viz::mojom::SharedElementResourceIdDataView* output) {
  auto pointer = data_->shared_element_resource_id.Get();
  *output = ::viz::mojom::SharedElementResourceIdDataView(pointer, message_);
}


inline void CompositorFrameTransitionDirectiveDataView::GetRootConfigDataView(
    CompositorFrameTransitionDirectiveConfigDataView* output) {
  auto pointer = data_->root_config.Get();
  *output = CompositorFrameTransitionDirectiveConfigDataView(pointer, message_);
}
inline void CompositorFrameTransitionDirectiveDataView::GetSharedElementsDataView(
    mojo::ArrayDataView<CompositorFrameTransitionDirectiveSharedElementDataView>* output) {
  auto pointer = data_->shared_elements.Get();
  *output = mojo::ArrayDataView<CompositorFrameTransitionDirectiveSharedElementDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace viz

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::viz::mojom::CompositorFrameTransitionDirectiveType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::viz::mojom::CompositorFrameTransitionDirectiveType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::viz::mojom::CompositorFrameTransitionDirectiveEffect> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::viz::mojom::CompositorFrameTransitionDirectiveEffect value);
};

} // namespace perfetto

#endif  // SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_TRANSITION_DIRECTIVE_MOJOM_SHARED_H_