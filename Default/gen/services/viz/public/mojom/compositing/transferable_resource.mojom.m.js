// services/viz/public/mojom/compositing/transferable_resource.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  MailboxHolder as gpu_mojom_MailboxHolder,
  MailboxHolderSpec as gpu_mojom_MailboxHolderSpec
} from '../../../../../gpu/ipc/common/mailbox_holder.mojom.m.js';

import {
  VulkanYCbCrInfo as gpu_mojom_VulkanYCbCrInfo,
  VulkanYCbCrInfoSpec as gpu_mojom_VulkanYCbCrInfoSpec
} from '../../../../../gpu/ipc/common/vulkan_ycbcr_info.mojom.m.js';

import {
  Size as gfx_mojom_Size,
  SizeSpec as gfx_mojom_SizeSpec
} from '../../../../../ui/gfx/geometry/mojom/geometry.mojom.m.js';

import {
  ColorSpace as gfx_mojom_ColorSpace,
  ColorSpaceSpec as gfx_mojom_ColorSpaceSpec
} from '../../../../../ui/gfx/mojom/color_space.mojom.m.js';

import {
  HDRMetadata as gfx_mojom_HDRMetadata,
  HDRMetadataSpec as gfx_mojom_HDRMetadataSpec
} from '../../../../../ui/gfx/mojom/hdr_metadata.mojom.m.js';

import {
  ResourceFormat as viz_mojom_ResourceFormat,
  ResourceFormatSpec as viz_mojom_ResourceFormatSpec
} from './resource_format.mojom.m.js';

import {
  ResourceId as viz_mojom_ResourceId,
  ResourceIdSpec as viz_mojom_ResourceIdSpec
} from './resource_id.mojom.m.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const SynchronizationTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const SynchronizationType = {
  
  kSyncToken: 0,
  kGpuCommandsCompleted: 1,
  kReleaseFence: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};


/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TransferableResourceSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    TransferableResourceSpec.$,
    'TransferableResource',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        viz_mojom_ResourceIdSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'format', 8,
        0,
        viz_mojom_ResourceFormatSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'filter', 12,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'size', 16,
        0,
        gfx_mojom_SizeSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'mailboxHolder', 24,
        0,
        gpu_mojom_MailboxHolderSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'synchronizationType', 32,
        0,
        SynchronizationTypeSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isSoftware', 36,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isOverlayCandidate', 36,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isBackedBySurfaceTexture', 36,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'wantsPromotionHint', 36,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'colorSpace', 40,
        0,
        gfx_mojom_ColorSpaceSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'hdrMetadata', 48,
        0,
        gfx_mojom_HDRMetadataSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'ycbcrInfo', 56,
        0,
        gpu_mojom_VulkanYCbCrInfoSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 72],]);



/**
 * @record
 */
export class TransferableResource {
  constructor() {
    /** @type { !viz_mojom_ResourceId } */
    this.id;
    /** @type { !viz_mojom_ResourceFormat } */
    this.format;
    /** @type { !number } */
    this.filter;
    /** @type { !gfx_mojom_Size } */
    this.size;
    /** @type { !gpu_mojom_MailboxHolder } */
    this.mailboxHolder;
    /** @type { !SynchronizationType } */
    this.synchronizationType;
    /** @type { !boolean } */
    this.isSoftware;
    /** @type { !boolean } */
    this.isOverlayCandidate;
    /** @type { !boolean } */
    this.isBackedBySurfaceTexture;
    /** @type { !boolean } */
    this.wantsPromotionHint;
    /** @type { !gfx_mojom_ColorSpace } */
    this.colorSpace;
    /** @type { (gfx_mojom_HDRMetadata|undefined) } */
    this.hdrMetadata;
    /** @type { (gpu_mojom_VulkanYCbCrInfo|undefined) } */
    this.ycbcrInfo;
  }
}

