// services/viz/public/mojom/compositing/compositor_frame_sink.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_SINK_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_SINK_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace viz {
namespace mojom {
namespace internal {

class ValidationContext;
class  CompositorFrameSink_SetNeedsBeginFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t needs_begin_frame : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSink_SetNeedsBeginFrame_Params_Data>;

  CompositorFrameSink_SetNeedsBeginFrame_Params_Data();
  ~CompositorFrameSink_SetNeedsBeginFrame_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSink_SetNeedsBeginFrame_Params_Data) == 16,
              "Bad sizeof(CompositorFrameSink_SetNeedsBeginFrame_Params_Data)");
class  CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_Params_Data>;

  CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_Params_Data();
  ~CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_Params_Data) == 8,
              "Bad sizeof(CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_Params_Data)");
class  CompositorFrameSink_SubmitCompositorFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::LocalSurfaceId_Data> local_surface_id;
  mojo::internal::Pointer<::viz::mojom::internal::CompositorFrame_Data> frame;
  mojo::internal::Pointer<::viz::mojom::internal::HitTestRegionList_Data> hit_test_region_list;
  uint64_t submit_time;

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSink_SubmitCompositorFrame_Params_Data>;

  CompositorFrameSink_SubmitCompositorFrame_Params_Data();
  ~CompositorFrameSink_SubmitCompositorFrame_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSink_SubmitCompositorFrame_Params_Data) == 40,
              "Bad sizeof(CompositorFrameSink_SubmitCompositorFrame_Params_Data)");
class  CompositorFrameSink_SubmitCompositorFrameSync_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::LocalSurfaceId_Data> local_surface_id;
  mojo::internal::Pointer<::viz::mojom::internal::CompositorFrame_Data> frame;
  mojo::internal::Pointer<::viz::mojom::internal::HitTestRegionList_Data> hit_test_region_list;
  uint64_t submit_time;

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSink_SubmitCompositorFrameSync_Params_Data>;

  CompositorFrameSink_SubmitCompositorFrameSync_Params_Data();
  ~CompositorFrameSink_SubmitCompositorFrameSync_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSink_SubmitCompositorFrameSync_Params_Data) == 40,
              "Bad sizeof(CompositorFrameSink_SubmitCompositorFrameSync_Params_Data)");
class  CompositorFrameSink_SubmitCompositorFrameSync_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::viz::mojom::internal::ReturnedResource_Data>>> resources;

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSink_SubmitCompositorFrameSync_ResponseParams_Data>;

  CompositorFrameSink_SubmitCompositorFrameSync_ResponseParams_Data();
  ~CompositorFrameSink_SubmitCompositorFrameSync_ResponseParams_Data() = delete;
};
static_assert(sizeof(CompositorFrameSink_SubmitCompositorFrameSync_ResponseParams_Data) == 16,
              "Bad sizeof(CompositorFrameSink_SubmitCompositorFrameSync_ResponseParams_Data)");
class  CompositorFrameSink_DidNotProduceFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::BeginFrameAck_Data> ack;

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSink_DidNotProduceFrame_Params_Data>;

  CompositorFrameSink_DidNotProduceFrame_Params_Data();
  ~CompositorFrameSink_DidNotProduceFrame_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSink_DidNotProduceFrame_Params_Data) == 16,
              "Bad sizeof(CompositorFrameSink_DidNotProduceFrame_Params_Data)");
class  CompositorFrameSink_DidAllocateSharedBitmap_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> region;
  mojo::internal::Pointer<::gpu::mojom::internal::Mailbox_Data> id;

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSink_DidAllocateSharedBitmap_Params_Data>;

  CompositorFrameSink_DidAllocateSharedBitmap_Params_Data();
  ~CompositorFrameSink_DidAllocateSharedBitmap_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSink_DidAllocateSharedBitmap_Params_Data) == 24,
              "Bad sizeof(CompositorFrameSink_DidAllocateSharedBitmap_Params_Data)");
class  CompositorFrameSink_DidDeleteSharedBitmap_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gpu::mojom::internal::Mailbox_Data> id;

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSink_DidDeleteSharedBitmap_Params_Data>;

  CompositorFrameSink_DidDeleteSharedBitmap_Params_Data();
  ~CompositorFrameSink_DidDeleteSharedBitmap_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSink_DidDeleteSharedBitmap_Params_Data) == 16,
              "Bad sizeof(CompositorFrameSink_DidDeleteSharedBitmap_Params_Data)");
class  CompositorFrameSink_InitializeCompositorFrameSinkType_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSink_InitializeCompositorFrameSinkType_Params_Data>;

  CompositorFrameSink_InitializeCompositorFrameSinkType_Params_Data();
  ~CompositorFrameSink_InitializeCompositorFrameSinkType_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSink_InitializeCompositorFrameSinkType_Params_Data) == 16,
              "Bad sizeof(CompositorFrameSink_InitializeCompositorFrameSinkType_Params_Data)");
class  CompositorFrameSink_SetThreadIds_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> thread_ids;

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSink_SetThreadIds_Params_Data>;

  CompositorFrameSink_SetThreadIds_Params_Data();
  ~CompositorFrameSink_SetThreadIds_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSink_SetThreadIds_Params_Data) == 16,
              "Bad sizeof(CompositorFrameSink_SetThreadIds_Params_Data)");
class  CompositorFrameSinkClient_DidReceiveCompositorFrameAck_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::viz::mojom::internal::ReturnedResource_Data>>> resources;

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSinkClient_DidReceiveCompositorFrameAck_Params_Data>;

  CompositorFrameSinkClient_DidReceiveCompositorFrameAck_Params_Data();
  ~CompositorFrameSinkClient_DidReceiveCompositorFrameAck_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSinkClient_DidReceiveCompositorFrameAck_Params_Data) == 16,
              "Bad sizeof(CompositorFrameSinkClient_DidReceiveCompositorFrameAck_Params_Data)");
class  CompositorFrameSinkClient_OnBeginFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::BeginFrameArgs_Data> args;
  mojo::internal::Pointer<mojo::internal::Map_Data<uint32_t, mojo::internal::Pointer<::viz::mojom::internal::FrameTimingDetails_Data>>> details;

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSinkClient_OnBeginFrame_Params_Data>;

  CompositorFrameSinkClient_OnBeginFrame_Params_Data();
  ~CompositorFrameSinkClient_OnBeginFrame_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSinkClient_OnBeginFrame_Params_Data) == 24,
              "Bad sizeof(CompositorFrameSinkClient_OnBeginFrame_Params_Data)");
class  CompositorFrameSinkClient_OnBeginFramePausedChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t paused : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSinkClient_OnBeginFramePausedChanged_Params_Data>;

  CompositorFrameSinkClient_OnBeginFramePausedChanged_Params_Data();
  ~CompositorFrameSinkClient_OnBeginFramePausedChanged_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSinkClient_OnBeginFramePausedChanged_Params_Data) == 16,
              "Bad sizeof(CompositorFrameSinkClient_OnBeginFramePausedChanged_Params_Data)");
class  CompositorFrameSinkClient_ReclaimResources_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::viz::mojom::internal::ReturnedResource_Data>>> resources;

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSinkClient_ReclaimResources_Params_Data>;

  CompositorFrameSinkClient_ReclaimResources_Params_Data();
  ~CompositorFrameSinkClient_ReclaimResources_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSinkClient_ReclaimResources_Params_Data) == 16,
              "Bad sizeof(CompositorFrameSinkClient_ReclaimResources_Params_Data)");
class  CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t sequence_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data>;

  CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data();
  ~CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data() = delete;
};
static_assert(sizeof(CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data) == 16,
              "Bad sizeof(CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data)");

}  // namespace internal


class CompositorFrameSink_SetNeedsBeginFrame_ParamsDataView {
 public:
  CompositorFrameSink_SetNeedsBeginFrame_ParamsDataView() = default;

  CompositorFrameSink_SetNeedsBeginFrame_ParamsDataView(
      internal::CompositorFrameSink_SetNeedsBeginFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool needs_begin_frame() const {
    return data_->needs_begin_frame;
  }
 private:
  internal::CompositorFrameSink_SetNeedsBeginFrame_Params_Data* data_ = nullptr;
};



class CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_ParamsDataView {
 public:
  CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_ParamsDataView() = default;

  CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_ParamsDataView(
      internal::CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_Params_Data* data_ = nullptr;
};



class CompositorFrameSink_SubmitCompositorFrame_ParamsDataView {
 public:
  CompositorFrameSink_SubmitCompositorFrame_ParamsDataView() = default;

  CompositorFrameSink_SubmitCompositorFrame_ParamsDataView(
      internal::CompositorFrameSink_SubmitCompositorFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLocalSurfaceIdDataView(
      ::viz::mojom::LocalSurfaceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocalSurfaceId(UserType* output) {
    
    auto* pointer = data_->local_surface_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::LocalSurfaceIdDataView>(
        pointer, output, message_);
  }
  inline void GetFrameDataView(
      ::viz::mojom::CompositorFrameDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrame(UserType* output) {
    
    auto* pointer = data_->frame.Get();
    return mojo::internal::Deserialize<::viz::mojom::CompositorFrameDataView>(
        pointer, output, message_);
  }
  inline void GetHitTestRegionListDataView(
      ::viz::mojom::HitTestRegionListDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHitTestRegionList(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::viz::mojom::HitTestRegionListDataView, UserType>(),
    "Attempting to read the optional `hit_test_region_list` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadHitTestRegionList` instead "
    "of `ReadHitTestRegionList if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->hit_test_region_list.Get();
    return mojo::internal::Deserialize<::viz::mojom::HitTestRegionListDataView>(
        pointer, output, message_);
  }
  uint64_t submit_time() const {
    return data_->submit_time;
  }
 private:
  internal::CompositorFrameSink_SubmitCompositorFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameSink_SubmitCompositorFrameSync_ParamsDataView {
 public:
  CompositorFrameSink_SubmitCompositorFrameSync_ParamsDataView() = default;

  CompositorFrameSink_SubmitCompositorFrameSync_ParamsDataView(
      internal::CompositorFrameSink_SubmitCompositorFrameSync_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLocalSurfaceIdDataView(
      ::viz::mojom::LocalSurfaceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocalSurfaceId(UserType* output) {
    
    auto* pointer = data_->local_surface_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::LocalSurfaceIdDataView>(
        pointer, output, message_);
  }
  inline void GetFrameDataView(
      ::viz::mojom::CompositorFrameDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrame(UserType* output) {
    
    auto* pointer = data_->frame.Get();
    return mojo::internal::Deserialize<::viz::mojom::CompositorFrameDataView>(
        pointer, output, message_);
  }
  inline void GetHitTestRegionListDataView(
      ::viz::mojom::HitTestRegionListDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHitTestRegionList(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::viz::mojom::HitTestRegionListDataView, UserType>(),
    "Attempting to read the optional `hit_test_region_list` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadHitTestRegionList` instead "
    "of `ReadHitTestRegionList if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->hit_test_region_list.Get();
    return mojo::internal::Deserialize<::viz::mojom::HitTestRegionListDataView>(
        pointer, output, message_);
  }
  uint64_t submit_time() const {
    return data_->submit_time;
  }
 private:
  internal::CompositorFrameSink_SubmitCompositorFrameSync_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameSink_SubmitCompositorFrameSync_ResponseParamsDataView {
 public:
  CompositorFrameSink_SubmitCompositorFrameSync_ResponseParamsDataView() = default;

  CompositorFrameSink_SubmitCompositorFrameSync_ResponseParamsDataView(
      internal::CompositorFrameSink_SubmitCompositorFrameSync_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResourcesDataView(
      mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResources(UserType* output) {
    
    auto* pointer = data_->resources.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CompositorFrameSink_SubmitCompositorFrameSync_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameSink_DidNotProduceFrame_ParamsDataView {
 public:
  CompositorFrameSink_DidNotProduceFrame_ParamsDataView() = default;

  CompositorFrameSink_DidNotProduceFrame_ParamsDataView(
      internal::CompositorFrameSink_DidNotProduceFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAckDataView(
      ::viz::mojom::BeginFrameAckDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAck(UserType* output) {
    
    auto* pointer = data_->ack.Get();
    return mojo::internal::Deserialize<::viz::mojom::BeginFrameAckDataView>(
        pointer, output, message_);
  }
 private:
  internal::CompositorFrameSink_DidNotProduceFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameSink_DidAllocateSharedBitmap_ParamsDataView {
 public:
  CompositorFrameSink_DidAllocateSharedBitmap_ParamsDataView() = default;

  CompositorFrameSink_DidAllocateSharedBitmap_ParamsDataView(
      internal::CompositorFrameSink_DidAllocateSharedBitmap_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRegionDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRegion(UserType* output) {
    
    auto* pointer = data_->region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, message_);
  }
  inline void GetIdDataView(
      ::gpu::mojom::MailboxDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::gpu::mojom::MailboxDataView>(
        pointer, output, message_);
  }
 private:
  internal::CompositorFrameSink_DidAllocateSharedBitmap_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameSink_DidDeleteSharedBitmap_ParamsDataView {
 public:
  CompositorFrameSink_DidDeleteSharedBitmap_ParamsDataView() = default;

  CompositorFrameSink_DidDeleteSharedBitmap_ParamsDataView(
      internal::CompositorFrameSink_DidDeleteSharedBitmap_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::gpu::mojom::MailboxDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::gpu::mojom::MailboxDataView>(
        pointer, output, message_);
  }
 private:
  internal::CompositorFrameSink_DidDeleteSharedBitmap_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameSink_InitializeCompositorFrameSinkType_ParamsDataView {
 public:
  CompositorFrameSink_InitializeCompositorFrameSinkType_ParamsDataView() = default;

  CompositorFrameSink_InitializeCompositorFrameSinkType_ParamsDataView(
      internal::CompositorFrameSink_InitializeCompositorFrameSinkType_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::viz::mojom::CompositorFrameSinkType>(
        data_value, output);
  }
  CompositorFrameSinkType type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::viz::mojom::CompositorFrameSinkType>(data_->type));
  }
 private:
  internal::CompositorFrameSink_InitializeCompositorFrameSinkType_Params_Data* data_ = nullptr;
};



class CompositorFrameSink_SetThreadIds_ParamsDataView {
 public:
  CompositorFrameSink_SetThreadIds_ParamsDataView() = default;

  CompositorFrameSink_SetThreadIds_ParamsDataView(
      internal::CompositorFrameSink_SetThreadIds_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetThreadIdsDataView(
      mojo::ArrayDataView<int32_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadThreadIds(UserType* output) {
    
    auto* pointer = data_->thread_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int32_t>>(
        pointer, output, message_);
  }
 private:
  internal::CompositorFrameSink_SetThreadIds_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameSinkClient_DidReceiveCompositorFrameAck_ParamsDataView {
 public:
  CompositorFrameSinkClient_DidReceiveCompositorFrameAck_ParamsDataView() = default;

  CompositorFrameSinkClient_DidReceiveCompositorFrameAck_ParamsDataView(
      internal::CompositorFrameSinkClient_DidReceiveCompositorFrameAck_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResourcesDataView(
      mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResources(UserType* output) {
    
    auto* pointer = data_->resources.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CompositorFrameSinkClient_DidReceiveCompositorFrameAck_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameSinkClient_OnBeginFrame_ParamsDataView {
 public:
  CompositorFrameSinkClient_OnBeginFrame_ParamsDataView() = default;

  CompositorFrameSinkClient_OnBeginFrame_ParamsDataView(
      internal::CompositorFrameSinkClient_OnBeginFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetArgsDataView(
      ::viz::mojom::BeginFrameArgsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadArgs(UserType* output) {
    
    auto* pointer = data_->args.Get();
    return mojo::internal::Deserialize<::viz::mojom::BeginFrameArgsDataView>(
        pointer, output, message_);
  }
  inline void GetDetailsDataView(
      mojo::MapDataView<uint32_t, ::viz::mojom::FrameTimingDetailsDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDetails(UserType* output) {
    
    auto* pointer = data_->details.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<uint32_t, ::viz::mojom::FrameTimingDetailsDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CompositorFrameSinkClient_OnBeginFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameSinkClient_OnBeginFramePausedChanged_ParamsDataView {
 public:
  CompositorFrameSinkClient_OnBeginFramePausedChanged_ParamsDataView() = default;

  CompositorFrameSinkClient_OnBeginFramePausedChanged_ParamsDataView(
      internal::CompositorFrameSinkClient_OnBeginFramePausedChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool paused() const {
    return data_->paused;
  }
 private:
  internal::CompositorFrameSinkClient_OnBeginFramePausedChanged_Params_Data* data_ = nullptr;
};



class CompositorFrameSinkClient_ReclaimResources_ParamsDataView {
 public:
  CompositorFrameSinkClient_ReclaimResources_ParamsDataView() = default;

  CompositorFrameSinkClient_ReclaimResources_ParamsDataView(
      internal::CompositorFrameSinkClient_ReclaimResources_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResourcesDataView(
      mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResources(UserType* output) {
    
    auto* pointer = data_->resources.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CompositorFrameSinkClient_ReclaimResources_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_ParamsDataView {
 public:
  CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_ParamsDataView() = default;

  CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_ParamsDataView(
      internal::CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t sequence_id() const {
    return data_->sequence_id;
  }
 private:
  internal::CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data* data_ = nullptr;
};






inline void CompositorFrameSink_SubmitCompositorFrame_ParamsDataView::GetLocalSurfaceIdDataView(
    ::viz::mojom::LocalSurfaceIdDataView* output) {
  auto pointer = data_->local_surface_id.Get();
  *output = ::viz::mojom::LocalSurfaceIdDataView(pointer, message_);
}
inline void CompositorFrameSink_SubmitCompositorFrame_ParamsDataView::GetFrameDataView(
    ::viz::mojom::CompositorFrameDataView* output) {
  auto pointer = data_->frame.Get();
  *output = ::viz::mojom::CompositorFrameDataView(pointer, message_);
}
inline void CompositorFrameSink_SubmitCompositorFrame_ParamsDataView::GetHitTestRegionListDataView(
    ::viz::mojom::HitTestRegionListDataView* output) {
  auto pointer = data_->hit_test_region_list.Get();
  *output = ::viz::mojom::HitTestRegionListDataView(pointer, message_);
}


inline void CompositorFrameSink_SubmitCompositorFrameSync_ParamsDataView::GetLocalSurfaceIdDataView(
    ::viz::mojom::LocalSurfaceIdDataView* output) {
  auto pointer = data_->local_surface_id.Get();
  *output = ::viz::mojom::LocalSurfaceIdDataView(pointer, message_);
}
inline void CompositorFrameSink_SubmitCompositorFrameSync_ParamsDataView::GetFrameDataView(
    ::viz::mojom::CompositorFrameDataView* output) {
  auto pointer = data_->frame.Get();
  *output = ::viz::mojom::CompositorFrameDataView(pointer, message_);
}
inline void CompositorFrameSink_SubmitCompositorFrameSync_ParamsDataView::GetHitTestRegionListDataView(
    ::viz::mojom::HitTestRegionListDataView* output) {
  auto pointer = data_->hit_test_region_list.Get();
  *output = ::viz::mojom::HitTestRegionListDataView(pointer, message_);
}


inline void CompositorFrameSink_SubmitCompositorFrameSync_ResponseParamsDataView::GetResourcesDataView(
    mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>* output) {
  auto pointer = data_->resources.Get();
  *output = mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>(pointer, message_);
}


inline void CompositorFrameSink_DidNotProduceFrame_ParamsDataView::GetAckDataView(
    ::viz::mojom::BeginFrameAckDataView* output) {
  auto pointer = data_->ack.Get();
  *output = ::viz::mojom::BeginFrameAckDataView(pointer, message_);
}


inline void CompositorFrameSink_DidAllocateSharedBitmap_ParamsDataView::GetRegionDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->region.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, message_);
}
inline void CompositorFrameSink_DidAllocateSharedBitmap_ParamsDataView::GetIdDataView(
    ::gpu::mojom::MailboxDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::gpu::mojom::MailboxDataView(pointer, message_);
}


inline void CompositorFrameSink_DidDeleteSharedBitmap_ParamsDataView::GetIdDataView(
    ::gpu::mojom::MailboxDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::gpu::mojom::MailboxDataView(pointer, message_);
}




inline void CompositorFrameSink_SetThreadIds_ParamsDataView::GetThreadIdsDataView(
    mojo::ArrayDataView<int32_t>* output) {
  auto pointer = data_->thread_ids.Get();
  *output = mojo::ArrayDataView<int32_t>(pointer, message_);
}


inline void CompositorFrameSinkClient_DidReceiveCompositorFrameAck_ParamsDataView::GetResourcesDataView(
    mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>* output) {
  auto pointer = data_->resources.Get();
  *output = mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>(pointer, message_);
}


inline void CompositorFrameSinkClient_OnBeginFrame_ParamsDataView::GetArgsDataView(
    ::viz::mojom::BeginFrameArgsDataView* output) {
  auto pointer = data_->args.Get();
  *output = ::viz::mojom::BeginFrameArgsDataView(pointer, message_);
}
inline void CompositorFrameSinkClient_OnBeginFrame_ParamsDataView::GetDetailsDataView(
    mojo::MapDataView<uint32_t, ::viz::mojom::FrameTimingDetailsDataView>* output) {
  auto pointer = data_->details.Get();
  *output = mojo::MapDataView<uint32_t, ::viz::mojom::FrameTimingDetailsDataView>(pointer, message_);
}




inline void CompositorFrameSinkClient_ReclaimResources_ParamsDataView::GetResourcesDataView(
    mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>* output) {
  auto pointer = data_->resources.Get();
  *output = mojo::ArrayDataView<::viz::mojom::ReturnedResourceDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_SINK_MOJOM_PARAMS_DATA_H_