// services/viz/public/mojom/compositing/compositor_render_pass.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_RENDER_PASS_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_RENDER_PASS_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "services/viz/public/mojom/compositing/compositor_render_pass_id.mojom-shared-internal.h"
#include "services/viz/public/mojom/compositing/copy_output_request.mojom-shared-internal.h"
#include "services/viz/public/mojom/compositing/filter_operations.mojom-shared-internal.h"
#include "services/viz/public/mojom/compositing/quads.mojom-shared-internal.h"
#include "services/viz/public/mojom/compositing/shared_element_resource_id.mojom-shared-internal.h"
#include "services/viz/public/mojom/compositing/subtree_capture_id.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "ui/gfx/mojom/rrect_f.mojom-shared-internal.h"
#include "ui/gfx/mojom/transform.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace viz {
namespace mojom {
namespace internal {
class CompositorRenderPass_Data;

#pragma pack(push, 1)
class  CompositorRenderPass_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::CompositorRenderPassId_Data> id;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> output_rect;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> damage_rect;
  mojo::internal::Pointer<::gfx::mojom::internal::Transform_Data> transform_to_root_target;
  mojo::internal::Pointer<::viz::mojom::internal::FilterOperations_Data> filters;
  mojo::internal::Pointer<::viz::mojom::internal::FilterOperations_Data> backdrop_filters;
  mojo::internal::Pointer<::gfx::mojom::internal::RRectF_Data> backdrop_filter_bounds;
  mojo::internal::Pointer<::viz::mojom::internal::SubtreeCaptureId_Data> subtree_capture_id;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> subtree_size;
  mojo::internal::Pointer<::viz::mojom::internal::SharedElementResourceId_Data> shared_element_resource_id;
  uint8_t has_transparent_background : 1;
  uint8_t cache_render_pass : 1;
  uint8_t has_damage_from_contributing_content : 1;
  uint8_t generate_mipmap : 1;
  uint8_t has_per_quad_damage : 1;
  uint8_t pad14_[7];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::viz::mojom::internal::CopyOutputRequest_Data>>> copy_requests;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::viz::mojom::internal::DrawQuad_Data>>> quad_list;

 private:
  friend class mojo::internal::MessageFragment<CompositorRenderPass_Data>;

  CompositorRenderPass_Data();
  ~CompositorRenderPass_Data() = delete;
};
static_assert(sizeof(CompositorRenderPass_Data) == 112,
              "Bad sizeof(CompositorRenderPass_Data)");
// Used by CompositorRenderPass::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CompositorRenderPass_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CompositorRenderPass_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CompositorRenderPass_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CompositorRenderPass_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CompositorRenderPass_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace viz

#endif  // SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_RENDER_PASS_MOJOM_SHARED_INTERNAL_H_