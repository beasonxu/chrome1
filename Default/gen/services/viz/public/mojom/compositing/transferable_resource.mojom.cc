// services/viz/public/mojom/compositing/transferable_resource.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/viz/public/mojom/compositing/transferable_resource.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/viz/public/mojom/compositing/transferable_resource.mojom-params-data.h"
#include "services/viz/public/mojom/compositing/transferable_resource.mojom-shared-message-ids.h"

#include "services/viz/public/mojom/compositing/transferable_resource.mojom-import-headers.h"
#include "services/viz/public/mojom/compositing/transferable_resource.mojom-test-utils.h"


#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_TRANSFERABLE_RESOURCE_MOJOM_JUMBO_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_TRANSFERABLE_RESOURCE_MOJOM_JUMBO_H_
#endif



namespace viz {
namespace mojom {
TransferableResource::TransferableResource()
    : id(),
      format(),
      filter(),
      size(),
      mailbox_holder(),
      synchronization_type(),
      is_software(),
      is_overlay_candidate(),
      is_backed_by_surface_texture(),
      wants_promotion_hint(),
      color_space(),
      hdr_metadata(),
      ycbcr_info() {}

TransferableResource::TransferableResource(
    const ::viz::ResourceId& id_in,
    ::viz::ResourceFormat format_in,
    uint32_t filter_in,
    const ::gfx::Size& size_in,
    const ::gpu::MailboxHolder& mailbox_holder_in,
    SynchronizationType synchronization_type_in,
    bool is_software_in,
    bool is_overlay_candidate_in,
    bool is_backed_by_surface_texture_in,
    bool wants_promotion_hint_in,
    const ::gfx::ColorSpace& color_space_in,
    const absl::optional<::gfx::HDRMetadata>& hdr_metadata_in,
    absl::optional<::gpu::VulkanYCbCrInfo> ycbcr_info_in)
    : id(std::move(id_in)),
      format(std::move(format_in)),
      filter(std::move(filter_in)),
      size(std::move(size_in)),
      mailbox_holder(std::move(mailbox_holder_in)),
      synchronization_type(std::move(synchronization_type_in)),
      is_software(std::move(is_software_in)),
      is_overlay_candidate(std::move(is_overlay_candidate_in)),
      is_backed_by_surface_texture(std::move(is_backed_by_surface_texture_in)),
      wants_promotion_hint(std::move(wants_promotion_hint_in)),
      color_space(std::move(color_space_in)),
      hdr_metadata(std::move(hdr_metadata_in)),
      ycbcr_info(std::move(ycbcr_info_in)) {}

TransferableResource::~TransferableResource() = default;

void TransferableResource::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "id"), this->id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::viz::ResourceId&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "format"), this->format,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::viz::ResourceFormat>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "filter"), this->filter,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "size"), this->size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Size&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "mailbox_holder"), this->mailbox_holder,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gpu::MailboxHolder&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "synchronization_type"), this->synchronization_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type SynchronizationType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_software"), this->is_software,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_overlay_candidate"), this->is_overlay_candidate,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_backed_by_surface_texture"), this->is_backed_by_surface_texture,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "wants_promotion_hint"), this->wants_promotion_hint,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "color_space"), this->color_space,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::ColorSpace&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "hdr_metadata"), this->hdr_metadata,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::gfx::HDRMetadata>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "ycbcr_info"), this->ycbcr_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type absl::optional<::gpu::VulkanYCbCrInfo>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool TransferableResource::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace viz


namespace mojo {


// static
bool StructTraits<::viz::mojom::TransferableResource::DataView, ::viz::mojom::TransferableResourcePtr>::Read(
    ::viz::mojom::TransferableResource::DataView input,
    ::viz::mojom::TransferableResourcePtr* output) {
  bool success = true;
  ::viz::mojom::TransferableResourcePtr result(::viz::mojom::TransferableResource::New());
  
      if (success && !input.ReadId(&result->id))
        success = false;
      if (success && !input.ReadFormat(&result->format))
        success = false;
      if (success)
        result->filter = input.filter();
      if (success && !input.ReadSize(&result->size))
        success = false;
      if (success && !input.ReadMailboxHolder(&result->mailbox_holder))
        success = false;
      if (success && !input.ReadSynchronizationType(&result->synchronization_type))
        success = false;
      if (success)
        result->is_software = input.is_software();
      if (success)
        result->is_overlay_candidate = input.is_overlay_candidate();
      if (success)
        result->is_backed_by_surface_texture = input.is_backed_by_surface_texture();
      if (success)
        result->wants_promotion_hint = input.wants_promotion_hint();
      if (success && !input.ReadColorSpace(&result->color_space))
        success = false;
      if (success && !input.ReadHdrMetadata(&result->hdr_metadata))
        success = false;
      if (success && !input.ReadYcbcrInfo(&result->ycbcr_info))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace viz {
namespace mojom {




}  // namespace mojom
}  // namespace viz


#if defined(__clang__)
#pragma clang diagnostic pop
#endif