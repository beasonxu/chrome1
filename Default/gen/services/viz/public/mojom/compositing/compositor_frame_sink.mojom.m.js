// services/viz/public/mojom/compositing/compositor_frame_sink.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  Mailbox as gpu_mojom_Mailbox,
  MailboxSpec as gpu_mojom_MailboxSpec
} from '../../../../../gpu/ipc/common/mailbox.mojom.m.js';

import {
  ReadOnlySharedMemoryRegion as mojoBase_mojom_ReadOnlySharedMemoryRegion,
  ReadOnlySharedMemoryRegionSpec as mojoBase_mojom_ReadOnlySharedMemoryRegionSpec
} from '../../../../../mojo/public/mojom/base/shared_memory.mojom.m.js';

import {
  HitTestRegionList as viz_mojom_HitTestRegionList,
  HitTestRegionListSpec as viz_mojom_HitTestRegionListSpec
} from '../hit_test/hit_test_region_list.mojom.m.js';

import {
  BeginFrameAck as viz_mojom_BeginFrameAck,
  BeginFrameAckSpec as viz_mojom_BeginFrameAckSpec,
  BeginFrameArgs as viz_mojom_BeginFrameArgs,
  BeginFrameArgsSpec as viz_mojom_BeginFrameArgsSpec
} from './begin_frame_args.mojom.m.js';

import {
  CompositorFrame as viz_mojom_CompositorFrame,
  CompositorFrameSpec as viz_mojom_CompositorFrameSpec
} from './compositor_frame.mojom.m.js';

import {
  FrameTimingDetails as viz_mojom_FrameTimingDetails,
  FrameTimingDetailsSpec as viz_mojom_FrameTimingDetailsSpec
} from './frame_timing_details.mojom.m.js';

import {
  LocalSurfaceId as viz_mojom_LocalSurfaceId,
  LocalSurfaceIdSpec as viz_mojom_LocalSurfaceIdSpec
} from './local_surface_id.mojom.m.js';

import {
  ReturnedResource as viz_mojom_ReturnedResource,
  ReturnedResourceSpec as viz_mojom_ReturnedResourceSpec
} from './returned_resource.mojom.m.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const CompositorFrameSinkTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const CompositorFrameSinkType = {
  
  kUnspecified: 0,
  kVideo: 1,
  kMediaStream: 2,
  kLayerTree: 3,
  MIN_VALUE: 0,
  MAX_VALUE: 3,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CompositorFrameSinkPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'viz.mojom.CompositorFrameSink', scope);
  }
}

/** @interface */
export class CompositorFrameSinkInterface {
  
  /**
   * @param { !boolean } needsBeginFrame
   */

  setNeedsBeginFrame(needsBeginFrame) {}
  
  /**
   */

  setWantsAnimateOnlyBeginFrames() {}
  
  /**
   * @param { !viz_mojom_LocalSurfaceId } localSurfaceId
   * @param { !viz_mojom_CompositorFrame } frame
   * @param { ?viz_mojom_HitTestRegionList } hitTestRegionList
   * @param { !bigint } submitTime
   */

  submitCompositorFrame(localSurfaceId, frame, hitTestRegionList, submitTime) {}
  
  /**
   * @param { !viz_mojom_LocalSurfaceId } localSurfaceId
   * @param { !viz_mojom_CompositorFrame } frame
   * @param { ?viz_mojom_HitTestRegionList } hitTestRegionList
   * @param { !bigint } submitTime
   * @return {!Promise<{
        resources: !Array<!viz_mojom_ReturnedResource>,
   *  }>}
   */

  submitCompositorFrameSync(localSurfaceId, frame, hitTestRegionList, submitTime) {}
  
  /**
   * @param { !viz_mojom_BeginFrameAck } ack
   */

  didNotProduceFrame(ack) {}
  
  /**
   * @param { !mojoBase_mojom_ReadOnlySharedMemoryRegion } region
   * @param { !gpu_mojom_Mailbox } id
   */

  didAllocateSharedBitmap(region, id) {}
  
  /**
   * @param { !gpu_mojom_Mailbox } id
   */

  didDeleteSharedBitmap(id) {}
  
  /**
   * @param { !CompositorFrameSinkType } type
   */

  initializeCompositorFrameSinkType(type) {}
  
  /**
   * @param { !Array<!number> } threadIds
   */

  setThreadIds(threadIds) {}
}

/**
 * @implements { CompositorFrameSinkInterface }
 */
export class CompositorFrameSinkRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CompositorFrameSinkPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          CompositorFrameSinkPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CompositorFrameSinkPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !boolean } needsBeginFrame
   */

  setNeedsBeginFrame(
      needsBeginFrame) {
    this.proxy.sendMessage(
        0,
        CompositorFrameSink_SetNeedsBeginFrame_ParamsSpec.$,
        null,
        [
          needsBeginFrame
        ]);
  }

  
  /**
   */

  setWantsAnimateOnlyBeginFrames() {
    this.proxy.sendMessage(
        1,
        CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !viz_mojom_LocalSurfaceId } localSurfaceId
   * @param { !viz_mojom_CompositorFrame } frame
   * @param { ?viz_mojom_HitTestRegionList } hitTestRegionList
   * @param { !bigint } submitTime
   */

  submitCompositorFrame(
      localSurfaceId,
      frame,
      hitTestRegionList,
      submitTime) {
    this.proxy.sendMessage(
        2,
        CompositorFrameSink_SubmitCompositorFrame_ParamsSpec.$,
        null,
        [
          localSurfaceId,
          frame,
          hitTestRegionList,
          submitTime
        ]);
  }

  
  /**
   * @param { !viz_mojom_LocalSurfaceId } localSurfaceId
   * @param { !viz_mojom_CompositorFrame } frame
   * @param { ?viz_mojom_HitTestRegionList } hitTestRegionList
   * @param { !bigint } submitTime
   * @return {!Promise<{
        resources: !Array<!viz_mojom_ReturnedResource>,
   *  }>}
   */

  submitCompositorFrameSync(
      localSurfaceId,
      frame,
      hitTestRegionList,
      submitTime) {
    return this.proxy.sendMessage(
        3,
        CompositorFrameSink_SubmitCompositorFrameSync_ParamsSpec.$,
        CompositorFrameSink_SubmitCompositorFrameSync_ResponseParamsSpec.$,
        [
          localSurfaceId,
          frame,
          hitTestRegionList,
          submitTime
        ]);
  }

  
  /**
   * @param { !viz_mojom_BeginFrameAck } ack
   */

  didNotProduceFrame(
      ack) {
    this.proxy.sendMessage(
        4,
        CompositorFrameSink_DidNotProduceFrame_ParamsSpec.$,
        null,
        [
          ack
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_ReadOnlySharedMemoryRegion } region
   * @param { !gpu_mojom_Mailbox } id
   */

  didAllocateSharedBitmap(
      region,
      id) {
    this.proxy.sendMessage(
        5,
        CompositorFrameSink_DidAllocateSharedBitmap_ParamsSpec.$,
        null,
        [
          region,
          id
        ]);
  }

  
  /**
   * @param { !gpu_mojom_Mailbox } id
   */

  didDeleteSharedBitmap(
      id) {
    this.proxy.sendMessage(
        6,
        CompositorFrameSink_DidDeleteSharedBitmap_ParamsSpec.$,
        null,
        [
          id
        ]);
  }

  
  /**
   * @param { !CompositorFrameSinkType } type
   */

  initializeCompositorFrameSinkType(
      type) {
    this.proxy.sendMessage(
        7,
        CompositorFrameSink_InitializeCompositorFrameSinkType_ParamsSpec.$,
        null,
        [
          type
        ]);
  }

  
  /**
   * @param { !Array<!number> } threadIds
   */

  setThreadIds(
      threadIds) {
    this.proxy.sendMessage(
        8,
        CompositorFrameSink_SetThreadIds_ParamsSpec.$,
        null,
        [
          threadIds
        ]);
  }
}

/**
 * An object which receives request messages for the CompositorFrameSink
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CompositorFrameSinkReceiver {
  /**
   * @param {!CompositorFrameSinkInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CompositorFrameSinkRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        CompositorFrameSinkRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CompositorFrameSinkRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        CompositorFrameSink_SetNeedsBeginFrame_ParamsSpec.$,
        null,
        impl.setNeedsBeginFrame.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_ParamsSpec.$,
        null,
        impl.setWantsAnimateOnlyBeginFrames.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        CompositorFrameSink_SubmitCompositorFrame_ParamsSpec.$,
        null,
        impl.submitCompositorFrame.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        CompositorFrameSink_SubmitCompositorFrameSync_ParamsSpec.$,
        CompositorFrameSink_SubmitCompositorFrameSync_ResponseParamsSpec.$,
        impl.submitCompositorFrameSync.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        CompositorFrameSink_DidNotProduceFrame_ParamsSpec.$,
        null,
        impl.didNotProduceFrame.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        CompositorFrameSink_DidAllocateSharedBitmap_ParamsSpec.$,
        null,
        impl.didAllocateSharedBitmap.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        CompositorFrameSink_DidDeleteSharedBitmap_ParamsSpec.$,
        null,
        impl.didDeleteSharedBitmap.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        CompositorFrameSink_InitializeCompositorFrameSinkType_ParamsSpec.$,
        null,
        impl.initializeCompositorFrameSinkType.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        CompositorFrameSink_SetThreadIds_ParamsSpec.$,
        null,
        impl.setThreadIds.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class CompositorFrameSink {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "viz.mojom.CompositorFrameSink";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!CompositorFrameSinkRemote}
   */
  static getRemote() {
    let remote = new CompositorFrameSinkRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the CompositorFrameSink
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CompositorFrameSinkCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      CompositorFrameSinkRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CompositorFrameSinkRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setNeedsBeginFrame =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        CompositorFrameSink_SetNeedsBeginFrame_ParamsSpec.$,
        null,
        this.setNeedsBeginFrame.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setWantsAnimateOnlyBeginFrames =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_ParamsSpec.$,
        null,
        this.setWantsAnimateOnlyBeginFrames.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.submitCompositorFrame =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        CompositorFrameSink_SubmitCompositorFrame_ParamsSpec.$,
        null,
        this.submitCompositorFrame.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.submitCompositorFrameSync =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        CompositorFrameSink_SubmitCompositorFrameSync_ParamsSpec.$,
        CompositorFrameSink_SubmitCompositorFrameSync_ResponseParamsSpec.$,
        this.submitCompositorFrameSync.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.didNotProduceFrame =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        CompositorFrameSink_DidNotProduceFrame_ParamsSpec.$,
        null,
        this.didNotProduceFrame.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.didAllocateSharedBitmap =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        CompositorFrameSink_DidAllocateSharedBitmap_ParamsSpec.$,
        null,
        this.didAllocateSharedBitmap.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.didDeleteSharedBitmap =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        CompositorFrameSink_DidDeleteSharedBitmap_ParamsSpec.$,
        null,
        this.didDeleteSharedBitmap.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.initializeCompositorFrameSinkType =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        CompositorFrameSink_InitializeCompositorFrameSinkType_ParamsSpec.$,
        null,
        this.initializeCompositorFrameSinkType.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setThreadIds =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        CompositorFrameSink_SetThreadIds_ParamsSpec.$,
        null,
        this.setThreadIds.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CompositorFrameSinkClientPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'viz.mojom.CompositorFrameSinkClient', scope);
  }
}

/** @interface */
export class CompositorFrameSinkClientInterface {
  
  /**
   * @param { !Array<!viz_mojom_ReturnedResource> } resources
   */

  didReceiveCompositorFrameAck(resources) {}
  
  /**
   * @param { !viz_mojom_BeginFrameArgs } args
   * @param { !Object<!number, !viz_mojom_FrameTimingDetails> } details
   */

  onBeginFrame(args, details) {}
  
  /**
   * @param { !boolean } paused
   */

  onBeginFramePausedChanged(paused) {}
  
  /**
   * @param { !Array<!viz_mojom_ReturnedResource> } resources
   */

  reclaimResources(resources) {}
  
  /**
   * @param { !number } sequenceId
   */

  onCompositorFrameTransitionDirectiveProcessed(sequenceId) {}
}

/**
 * @implements { CompositorFrameSinkClientInterface }
 */
export class CompositorFrameSinkClientRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CompositorFrameSinkClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          CompositorFrameSinkClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CompositorFrameSinkClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Array<!viz_mojom_ReturnedResource> } resources
   */

  didReceiveCompositorFrameAck(
      resources) {
    this.proxy.sendMessage(
        0,
        CompositorFrameSinkClient_DidReceiveCompositorFrameAck_ParamsSpec.$,
        null,
        [
          resources
        ]);
  }

  
  /**
   * @param { !viz_mojom_BeginFrameArgs } args
   * @param { !Object<!number, !viz_mojom_FrameTimingDetails> } details
   */

  onBeginFrame(
      args,
      details) {
    this.proxy.sendMessage(
        1,
        CompositorFrameSinkClient_OnBeginFrame_ParamsSpec.$,
        null,
        [
          args,
          details
        ]);
  }

  
  /**
   * @param { !boolean } paused
   */

  onBeginFramePausedChanged(
      paused) {
    this.proxy.sendMessage(
        2,
        CompositorFrameSinkClient_OnBeginFramePausedChanged_ParamsSpec.$,
        null,
        [
          paused
        ]);
  }

  
  /**
   * @param { !Array<!viz_mojom_ReturnedResource> } resources
   */

  reclaimResources(
      resources) {
    this.proxy.sendMessage(
        3,
        CompositorFrameSinkClient_ReclaimResources_ParamsSpec.$,
        null,
        [
          resources
        ]);
  }

  
  /**
   * @param { !number } sequenceId
   */

  onCompositorFrameTransitionDirectiveProcessed(
      sequenceId) {
    this.proxy.sendMessage(
        4,
        CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_ParamsSpec.$,
        null,
        [
          sequenceId
        ]);
  }
}

/**
 * An object which receives request messages for the CompositorFrameSinkClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CompositorFrameSinkClientReceiver {
  /**
   * @param {!CompositorFrameSinkClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CompositorFrameSinkClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        CompositorFrameSinkClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CompositorFrameSinkClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        CompositorFrameSinkClient_DidReceiveCompositorFrameAck_ParamsSpec.$,
        null,
        impl.didReceiveCompositorFrameAck.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        CompositorFrameSinkClient_OnBeginFrame_ParamsSpec.$,
        null,
        impl.onBeginFrame.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        CompositorFrameSinkClient_OnBeginFramePausedChanged_ParamsSpec.$,
        null,
        impl.onBeginFramePausedChanged.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        CompositorFrameSinkClient_ReclaimResources_ParamsSpec.$,
        null,
        impl.reclaimResources.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_ParamsSpec.$,
        null,
        impl.onCompositorFrameTransitionDirectiveProcessed.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class CompositorFrameSinkClient {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "viz.mojom.CompositorFrameSinkClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!CompositorFrameSinkClientRemote}
   */
  static getRemote() {
    let remote = new CompositorFrameSinkClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the CompositorFrameSinkClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CompositorFrameSinkClientCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      CompositorFrameSinkClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CompositorFrameSinkClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.didReceiveCompositorFrameAck =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        CompositorFrameSinkClient_DidReceiveCompositorFrameAck_ParamsSpec.$,
        null,
        this.didReceiveCompositorFrameAck.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onBeginFrame =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        CompositorFrameSinkClient_OnBeginFrame_ParamsSpec.$,
        null,
        this.onBeginFrame.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onBeginFramePausedChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        CompositorFrameSinkClient_OnBeginFramePausedChanged_ParamsSpec.$,
        null,
        this.onBeginFramePausedChanged.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.reclaimResources =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        CompositorFrameSinkClient_ReclaimResources_ParamsSpec.$,
        null,
        this.reclaimResources.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onCompositorFrameTransitionDirectiveProcessed =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_ParamsSpec.$,
        null,
        this.onCompositorFrameTransitionDirectiveProcessed.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSink_SetNeedsBeginFrame_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSink_SubmitCompositorFrame_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSink_SubmitCompositorFrameSync_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSink_SubmitCompositorFrameSync_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSink_DidNotProduceFrame_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSink_DidAllocateSharedBitmap_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSink_DidDeleteSharedBitmap_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSink_InitializeCompositorFrameSinkType_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSink_SetThreadIds_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSinkClient_DidReceiveCompositorFrameAck_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSinkClient_OnBeginFrame_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSinkClient_OnBeginFramePausedChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSinkClient_ReclaimResources_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    CompositorFrameSink_SetNeedsBeginFrame_ParamsSpec.$,
    'CompositorFrameSink_SetNeedsBeginFrame_Params',
    [
      mojo.internal.StructField(
        'needsBeginFrame', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CompositorFrameSink_SetNeedsBeginFrame_Params {
  constructor() {
    /** @type { !boolean } */
    this.needsBeginFrame;
  }
}



mojo.internal.Struct(
    CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_ParamsSpec.$,
    'CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class CompositorFrameSink_SetWantsAnimateOnlyBeginFrames_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    CompositorFrameSink_SubmitCompositorFrame_ParamsSpec.$,
    'CompositorFrameSink_SubmitCompositorFrame_Params',
    [
      mojo.internal.StructField(
        'localSurfaceId', 0,
        0,
        viz_mojom_LocalSurfaceIdSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'frame', 8,
        0,
        viz_mojom_CompositorFrameSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'hitTestRegionList', 16,
        0,
        viz_mojom_HitTestRegionListSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'submitTime', 24,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class CompositorFrameSink_SubmitCompositorFrame_Params {
  constructor() {
    /** @type { !viz_mojom_LocalSurfaceId } */
    this.localSurfaceId;
    /** @type { !viz_mojom_CompositorFrame } */
    this.frame;
    /** @type { (viz_mojom_HitTestRegionList|undefined) } */
    this.hitTestRegionList;
    /** @type { !bigint } */
    this.submitTime;
  }
}



mojo.internal.Struct(
    CompositorFrameSink_SubmitCompositorFrameSync_ParamsSpec.$,
    'CompositorFrameSink_SubmitCompositorFrameSync_Params',
    [
      mojo.internal.StructField(
        'localSurfaceId', 0,
        0,
        viz_mojom_LocalSurfaceIdSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'frame', 8,
        0,
        viz_mojom_CompositorFrameSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'hitTestRegionList', 16,
        0,
        viz_mojom_HitTestRegionListSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'submitTime', 24,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class CompositorFrameSink_SubmitCompositorFrameSync_Params {
  constructor() {
    /** @type { !viz_mojom_LocalSurfaceId } */
    this.localSurfaceId;
    /** @type { !viz_mojom_CompositorFrame } */
    this.frame;
    /** @type { (viz_mojom_HitTestRegionList|undefined) } */
    this.hitTestRegionList;
    /** @type { !bigint } */
    this.submitTime;
  }
}



mojo.internal.Struct(
    CompositorFrameSink_SubmitCompositorFrameSync_ResponseParamsSpec.$,
    'CompositorFrameSink_SubmitCompositorFrameSync_ResponseParams',
    [
      mojo.internal.StructField(
        'resources', 0,
        0,
        mojo.internal.Array(viz_mojom_ReturnedResourceSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CompositorFrameSink_SubmitCompositorFrameSync_ResponseParams {
  constructor() {
    /** @type { !Array<!viz_mojom_ReturnedResource> } */
    this.resources;
  }
}



mojo.internal.Struct(
    CompositorFrameSink_DidNotProduceFrame_ParamsSpec.$,
    'CompositorFrameSink_DidNotProduceFrame_Params',
    [
      mojo.internal.StructField(
        'ack', 0,
        0,
        viz_mojom_BeginFrameAckSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CompositorFrameSink_DidNotProduceFrame_Params {
  constructor() {
    /** @type { !viz_mojom_BeginFrameAck } */
    this.ack;
  }
}



mojo.internal.Struct(
    CompositorFrameSink_DidAllocateSharedBitmap_ParamsSpec.$,
    'CompositorFrameSink_DidAllocateSharedBitmap_Params',
    [
      mojo.internal.StructField(
        'region', 0,
        0,
        mojoBase_mojom_ReadOnlySharedMemoryRegionSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'id', 8,
        0,
        gpu_mojom_MailboxSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class CompositorFrameSink_DidAllocateSharedBitmap_Params {
  constructor() {
    /** @type { !mojoBase_mojom_ReadOnlySharedMemoryRegion } */
    this.region;
    /** @type { !gpu_mojom_Mailbox } */
    this.id;
  }
}



mojo.internal.Struct(
    CompositorFrameSink_DidDeleteSharedBitmap_ParamsSpec.$,
    'CompositorFrameSink_DidDeleteSharedBitmap_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        gpu_mojom_MailboxSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CompositorFrameSink_DidDeleteSharedBitmap_Params {
  constructor() {
    /** @type { !gpu_mojom_Mailbox } */
    this.id;
  }
}



mojo.internal.Struct(
    CompositorFrameSink_InitializeCompositorFrameSinkType_ParamsSpec.$,
    'CompositorFrameSink_InitializeCompositorFrameSinkType_Params',
    [
      mojo.internal.StructField(
        'type', 0,
        0,
        CompositorFrameSinkTypeSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CompositorFrameSink_InitializeCompositorFrameSinkType_Params {
  constructor() {
    /** @type { !CompositorFrameSinkType } */
    this.type;
  }
}



mojo.internal.Struct(
    CompositorFrameSink_SetThreadIds_ParamsSpec.$,
    'CompositorFrameSink_SetThreadIds_Params',
    [
      mojo.internal.StructField(
        'threadIds', 0,
        0,
        mojo.internal.Array(mojo.internal.Int32, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CompositorFrameSink_SetThreadIds_Params {
  constructor() {
    /** @type { !Array<!number> } */
    this.threadIds;
  }
}



mojo.internal.Struct(
    CompositorFrameSinkClient_DidReceiveCompositorFrameAck_ParamsSpec.$,
    'CompositorFrameSinkClient_DidReceiveCompositorFrameAck_Params',
    [
      mojo.internal.StructField(
        'resources', 0,
        0,
        mojo.internal.Array(viz_mojom_ReturnedResourceSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CompositorFrameSinkClient_DidReceiveCompositorFrameAck_Params {
  constructor() {
    /** @type { !Array<!viz_mojom_ReturnedResource> } */
    this.resources;
  }
}



mojo.internal.Struct(
    CompositorFrameSinkClient_OnBeginFrame_ParamsSpec.$,
    'CompositorFrameSinkClient_OnBeginFrame_Params',
    [
      mojo.internal.StructField(
        'args', 0,
        0,
        viz_mojom_BeginFrameArgsSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'details', 8,
        0,
        mojo.internal.Map(mojo.internal.Uint32, viz_mojom_FrameTimingDetailsSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class CompositorFrameSinkClient_OnBeginFrame_Params {
  constructor() {
    /** @type { !viz_mojom_BeginFrameArgs } */
    this.args;
    /** @type { !Object<!number, !viz_mojom_FrameTimingDetails> } */
    this.details;
  }
}



mojo.internal.Struct(
    CompositorFrameSinkClient_OnBeginFramePausedChanged_ParamsSpec.$,
    'CompositorFrameSinkClient_OnBeginFramePausedChanged_Params',
    [
      mojo.internal.StructField(
        'paused', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CompositorFrameSinkClient_OnBeginFramePausedChanged_Params {
  constructor() {
    /** @type { !boolean } */
    this.paused;
  }
}



mojo.internal.Struct(
    CompositorFrameSinkClient_ReclaimResources_ParamsSpec.$,
    'CompositorFrameSinkClient_ReclaimResources_Params',
    [
      mojo.internal.StructField(
        'resources', 0,
        0,
        mojo.internal.Array(viz_mojom_ReturnedResourceSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CompositorFrameSinkClient_ReclaimResources_Params {
  constructor() {
    /** @type { !Array<!viz_mojom_ReturnedResource> } */
    this.resources;
  }
}



mojo.internal.Struct(
    CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_ParamsSpec.$,
    'CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_Params',
    [
      mojo.internal.StructField(
        'sequenceId', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CompositorFrameSinkClient_OnCompositorFrameTransitionDirectiveProcessed_Params {
  constructor() {
    /** @type { !number } */
    this.sequenceId;
  }
}

