// services/viz/public/mojom/gpu.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PUBLIC_MOJOM_GPU_MOJOM_BLINK_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_GPU_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/viz/public/mojom/gpu.mojom-shared.h"
#include "services/viz/public/mojom/gpu.mojom-blink-forward.h"
#include "gpu/ipc/common/gpu_feature_info.mojom-blink-forward.h"
#include "gpu/ipc/common/gpu_info.mojom-blink-forward.h"
#include "gpu/ipc/common/sync_token.mojom-blink.h"
#include "media/mojo/mojom/video_encode_accelerator.mojom-blink-forward.h"
#include "mojo/public/mojom/base/shared_memory.mojom-blink.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-blink.h"
#include "ui/gfx/mojom/buffer_types.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/platform/web_common.h"




namespace viz {
namespace mojom {
namespace blink {

class GpuMemoryBufferFactoryProxy;

template <typename ImplRefTraits>
class GpuMemoryBufferFactoryStub;

class GpuMemoryBufferFactoryRequestValidator;
class GpuMemoryBufferFactoryResponseValidator;


class BLINK_PLATFORM_EXPORT GpuMemoryBufferFactory
    : public GpuMemoryBufferFactoryInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = GpuMemoryBufferFactoryInterfaceBase;
  using Proxy_ = GpuMemoryBufferFactoryProxy;

  template <typename ImplRefTraits>
  using Stub_ = GpuMemoryBufferFactoryStub<ImplRefTraits>;

  using RequestValidator_ = GpuMemoryBufferFactoryRequestValidator;
  using ResponseValidator_ = GpuMemoryBufferFactoryResponseValidator;
  enum MethodMinVersions : uint32_t {
    kCreateGpuMemoryBufferMinVersion = 0,
    kDestroyGpuMemoryBufferMinVersion = 0,
    kCopyGpuMemoryBufferMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct CreateGpuMemoryBuffer_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct DestroyGpuMemoryBuffer_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct CopyGpuMemoryBuffer_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~GpuMemoryBufferFactory() = default;


  using CreateGpuMemoryBufferCallback = base::OnceCallback<void(::gfx::GpuMemoryBufferHandle)>;
  
  virtual void CreateGpuMemoryBuffer(::gfx::GpuMemoryBufferId id, const ::gfx::Size& size, ::gfx::BufferFormat format, ::gfx::BufferUsage usage, CreateGpuMemoryBufferCallback callback) = 0;

  
  virtual void DestroyGpuMemoryBuffer(::gfx::GpuMemoryBufferId id, const ::gpu::SyncToken& sync_token) = 0;


  using CopyGpuMemoryBufferCallback = base::OnceCallback<void(bool)>;
  
  virtual void CopyGpuMemoryBuffer(::gfx::GpuMemoryBufferHandle buffer_handle, ::base::UnsafeSharedMemoryRegion shared_memory, CopyGpuMemoryBufferCallback callback) = 0;
};

class GpuProxy;

template <typename ImplRefTraits>
class GpuStub;

class GpuRequestValidator;
class GpuResponseValidator;


class BLINK_PLATFORM_EXPORT Gpu
    : public GpuInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = GpuInterfaceBase;
  using Proxy_ = GpuProxy;

  template <typename ImplRefTraits>
  using Stub_ = GpuStub<ImplRefTraits>;

  using RequestValidator_ = GpuRequestValidator;
  using ResponseValidator_ = GpuResponseValidator;
  enum MethodMinVersions : uint32_t {
    kCreateGpuMemoryBufferFactoryMinVersion = 0,
    kEstablishGpuChannelMinVersion = 0,
    kCreateVideoEncodeAcceleratorProviderMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct CreateGpuMemoryBufferFactory_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct EstablishGpuChannel_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct CreateVideoEncodeAcceleratorProvider_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~Gpu() = default;

  
  virtual void CreateGpuMemoryBufferFactory(::mojo::PendingReceiver<GpuMemoryBufferFactory> receiver) = 0;


  using EstablishGpuChannelCallback = base::OnceCallback<void(int32_t, ::mojo::ScopedMessagePipeHandle, ::gpu::mojom::blink::GpuInfoPtr, ::gpu::mojom::blink::GpuFeatureInfoPtr)>;
  
  virtual void EstablishGpuChannel(EstablishGpuChannelCallback callback) = 0;

  
  virtual void CreateVideoEncodeAcceleratorProvider(::mojo::PendingReceiver<::media::mojom::blink::VideoEncodeAcceleratorProvider> vea_provider) = 0;
};



class BLINK_PLATFORM_EXPORT GpuMemoryBufferFactoryProxy
    : public GpuMemoryBufferFactory {
 public:
  using InterfaceType = GpuMemoryBufferFactory;

  explicit GpuMemoryBufferFactoryProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void CreateGpuMemoryBuffer(::gfx::GpuMemoryBufferId id, const ::gfx::Size& size, ::gfx::BufferFormat format, ::gfx::BufferUsage usage, CreateGpuMemoryBufferCallback callback) final;
  
  void DestroyGpuMemoryBuffer(::gfx::GpuMemoryBufferId id, const ::gpu::SyncToken& sync_token) final;
  
  void CopyGpuMemoryBuffer(::gfx::GpuMemoryBufferHandle buffer_handle, ::base::UnsafeSharedMemoryRegion shared_memory, CopyGpuMemoryBufferCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_PLATFORM_EXPORT GpuProxy
    : public Gpu {
 public:
  using InterfaceType = Gpu;

  explicit GpuProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void CreateGpuMemoryBufferFactory(::mojo::PendingReceiver<GpuMemoryBufferFactory> receiver) final;
  
  void EstablishGpuChannel(EstablishGpuChannelCallback callback) final;
  
  void CreateVideoEncodeAcceleratorProvider(::mojo::PendingReceiver<::media::mojom::blink::VideoEncodeAcceleratorProvider> vea_provider) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_PLATFORM_EXPORT GpuMemoryBufferFactoryStubDispatch {
 public:
  static bool Accept(GpuMemoryBufferFactory* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      GpuMemoryBufferFactory* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<GpuMemoryBufferFactory>>
class GpuMemoryBufferFactoryStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  GpuMemoryBufferFactoryStub() = default;
  ~GpuMemoryBufferFactoryStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return GpuMemoryBufferFactoryStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return GpuMemoryBufferFactoryStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT GpuStubDispatch {
 public:
  static bool Accept(Gpu* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Gpu* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Gpu>>
class GpuStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  GpuStub() = default;
  ~GpuStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return GpuStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return GpuStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT GpuMemoryBufferFactoryRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT GpuRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT GpuMemoryBufferFactoryResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT GpuResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace viz

namespace mojo {

}  // namespace mojo

#endif  // SERVICES_VIZ_PUBLIC_MOJOM_GPU_MOJOM_BLINK_H_