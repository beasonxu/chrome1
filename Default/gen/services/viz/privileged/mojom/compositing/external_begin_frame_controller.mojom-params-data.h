// services/viz/privileged/mojom/compositing/external_begin_frame_controller.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_EXTERNAL_BEGIN_FRAME_CONTROLLER_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_EXTERNAL_BEGIN_FRAME_CONTROLLER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace viz {
namespace mojom {
namespace internal {

class ValidationContext;
class  ExternalBeginFrameController_IssueExternalBeginFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::BeginFrameArgs_Data> args;
  uint8_t force : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<ExternalBeginFrameController_IssueExternalBeginFrame_Params_Data>;

  ExternalBeginFrameController_IssueExternalBeginFrame_Params_Data();
  ~ExternalBeginFrameController_IssueExternalBeginFrame_Params_Data() = delete;
};
static_assert(sizeof(ExternalBeginFrameController_IssueExternalBeginFrame_Params_Data) == 24,
              "Bad sizeof(ExternalBeginFrameController_IssueExternalBeginFrame_Params_Data)");
class  ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::BeginFrameAck_Data> ack;

 private:
  friend class mojo::internal::MessageFragment<ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParams_Data>;

  ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParams_Data();
  ~ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParams_Data() = delete;
};
static_assert(sizeof(ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParams_Data) == 16,
              "Bad sizeof(ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParams_Data)");

}  // namespace internal


class ExternalBeginFrameController_IssueExternalBeginFrame_ParamsDataView {
 public:
  ExternalBeginFrameController_IssueExternalBeginFrame_ParamsDataView() = default;

  ExternalBeginFrameController_IssueExternalBeginFrame_ParamsDataView(
      internal::ExternalBeginFrameController_IssueExternalBeginFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetArgsDataView(
      ::viz::mojom::BeginFrameArgsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadArgs(UserType* output) {
    
    auto* pointer = data_->args.Get();
    return mojo::internal::Deserialize<::viz::mojom::BeginFrameArgsDataView>(
        pointer, output, message_);
  }
  bool force() const {
    return data_->force;
  }
 private:
  internal::ExternalBeginFrameController_IssueExternalBeginFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParamsDataView {
 public:
  ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParamsDataView() = default;

  ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParamsDataView(
      internal::ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAckDataView(
      ::viz::mojom::BeginFrameAckDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAck(UserType* output) {
    
    auto* pointer = data_->ack.Get();
    return mojo::internal::Deserialize<::viz::mojom::BeginFrameAckDataView>(
        pointer, output, message_);
  }
 private:
  internal::ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void ExternalBeginFrameController_IssueExternalBeginFrame_ParamsDataView::GetArgsDataView(
    ::viz::mojom::BeginFrameArgsDataView* output) {
  auto pointer = data_->args.Get();
  *output = ::viz::mojom::BeginFrameArgsDataView(pointer, message_);
}


inline void ExternalBeginFrameController_IssueExternalBeginFrame_ResponseParamsDataView::GetAckDataView(
    ::viz::mojom::BeginFrameAckDataView* output) {
  auto pointer = data_->ack.Get();
  *output = ::viz::mojom::BeginFrameAckDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_EXTERNAL_BEGIN_FRAME_CONTROLLER_MOJOM_PARAMS_DATA_H_