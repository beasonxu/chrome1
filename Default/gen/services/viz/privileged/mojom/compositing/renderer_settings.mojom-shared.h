// services/viz/privileged/mojom/compositing/renderer_settings.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_RENDERER_SETTINGS_MOJOM_SHARED_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_RENDERER_SETTINGS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/viz/privileged/mojom/compositing/renderer_settings.mojom-shared-internal.h"
#include "services/viz/privileged/mojom/compositing/overlay_strategy.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "ui/gfx/mojom/color_space.mojom-shared.h"







namespace viz {
namespace mojom {
class RendererSettingsDataView;

class DebugRendererSettingsDataView;



}  // namespace mojom
}  // namespace viz

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::viz::mojom::RendererSettingsDataView> {
  using Data = ::viz::mojom::internal::RendererSettings_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::DebugRendererSettingsDataView> {
  using Data = ::viz::mojom::internal::DebugRendererSettings_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace viz {
namespace mojom {


class RendererSettingsDataView {
 public:
  RendererSettingsDataView() = default;

  RendererSettingsDataView(
      internal::RendererSettings_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool apply_simple_frame_rate_throttling() const {
    return data_->apply_simple_frame_rate_throttling;
  }
  bool allow_antialiasing() const {
    return data_->allow_antialiasing;
  }
  bool force_antialiasing() const {
    return data_->force_antialiasing;
  }
  bool force_blending_with_shaders() const {
    return data_->force_blending_with_shaders;
  }
  int32_t highp_threshold_min() const {
    return data_->highp_threshold_min;
  }
  bool partial_swap_enabled() const {
    return data_->partial_swap_enabled;
  }
  bool release_overlay_resources_after_gpu_query() const {
    return data_->release_overlay_resources_after_gpu_query;
  }
  bool should_clear_root_render_pass() const {
    return data_->should_clear_root_render_pass;
  }
  int32_t slow_down_compositing_scale_factor() const {
    return data_->slow_down_compositing_scale_factor;
  }
  bool auto_resize_output_surface() const {
    return data_->auto_resize_output_surface;
  }
  bool requires_alpha_channel() const {
    return data_->requires_alpha_channel;
  }
  inline void GetInitialScreenSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInitialScreenSize(UserType* output) {
    
    auto* pointer = data_->initial_screen_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  inline void GetColorSpaceDataView(
      ::gfx::mojom::ColorSpaceDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadColorSpace(UserType* output) {
    
    auto* pointer = data_->color_space.Get();
    return mojo::internal::Deserialize<::gfx::mojom::ColorSpaceDataView>(
        pointer, output, message_);
  }
 private:
  internal::RendererSettings_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DebugRendererSettingsDataView {
 public:
  DebugRendererSettingsDataView() = default;

  DebugRendererSettingsDataView(
      internal::DebugRendererSettings_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool tint_composited_content() const {
    return data_->tint_composited_content;
  }
  bool tint_composited_content_modulate() const {
    return data_->tint_composited_content_modulate;
  }
  bool show_overdraw_feedback() const {
    return data_->show_overdraw_feedback;
  }
  bool show_dc_layer_debug_borders() const {
    return data_->show_dc_layer_debug_borders;
  }
  bool show_aggregated_damage() const {
    return data_->show_aggregated_damage;
  }
 private:
  internal::DebugRendererSettings_Data* data_ = nullptr;
};



}  // namespace mojom
}  // namespace viz

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::RendererSettingsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::RendererSettingsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::RendererSettings_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->apply_simple_frame_rate_throttling = Traits::apply_simple_frame_rate_throttling(input);
    fragment->allow_antialiasing = Traits::allow_antialiasing(input);
    fragment->force_antialiasing = Traits::force_antialiasing(input);
    fragment->force_blending_with_shaders = Traits::force_blending_with_shaders(input);
    fragment->highp_threshold_min = Traits::highp_threshold_min(input);
    fragment->partial_swap_enabled = Traits::partial_swap_enabled(input);
    fragment->release_overlay_resources_after_gpu_query = Traits::release_overlay_resources_after_gpu_query(input);
    fragment->should_clear_root_render_pass = Traits::should_clear_root_render_pass(input);
    fragment->slow_down_compositing_scale_factor = Traits::slow_down_compositing_scale_factor(input);
    fragment->auto_resize_output_surface = Traits::auto_resize_output_surface(input);
    fragment->requires_alpha_channel = Traits::requires_alpha_channel(input);
    decltype(Traits::initial_screen_size(input)) in_initial_screen_size = Traits::initial_screen_size(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->initial_screen_size)::BaseType> initial_screen_size_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_initial_screen_size, initial_screen_size_fragment);
    fragment->initial_screen_size.Set(
        initial_screen_size_fragment.is_null() ? nullptr : initial_screen_size_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->initial_screen_size.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null initial_screen_size in RendererSettings struct");
    decltype(Traits::color_space(input)) in_color_space = Traits::color_space(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->color_space)::BaseType> color_space_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::ColorSpaceDataView>(
        in_color_space, color_space_fragment);
    fragment->color_space.Set(
        color_space_fragment.is_null() ? nullptr : color_space_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->color_space.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null color_space in RendererSettings struct");
  }

  static bool Deserialize(::viz::mojom::internal::RendererSettings_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::RendererSettingsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::DebugRendererSettingsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::DebugRendererSettingsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::DebugRendererSettings_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->tint_composited_content = Traits::tint_composited_content(input);
    fragment->tint_composited_content_modulate = Traits::tint_composited_content_modulate(input);
    fragment->show_overdraw_feedback = Traits::show_overdraw_feedback(input);
    fragment->show_dc_layer_debug_borders = Traits::show_dc_layer_debug_borders(input);
    fragment->show_aggregated_damage = Traits::show_aggregated_damage(input);
  }

  static bool Deserialize(::viz::mojom::internal::DebugRendererSettings_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::DebugRendererSettingsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace viz {
namespace mojom {

inline void RendererSettingsDataView::GetInitialScreenSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->initial_screen_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}
inline void RendererSettingsDataView::GetColorSpaceDataView(
    ::gfx::mojom::ColorSpaceDataView* output) {
  auto pointer = data_->color_space.Get();
  *output = ::gfx::mojom::ColorSpaceDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace viz

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_RENDERER_SETTINGS_MOJOM_SHARED_H_