// services/viz/privileged/mojom/compositing/renderer_settings.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/viz/privileged/mojom/compositing/renderer_settings.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/viz/privileged/mojom/compositing/renderer_settings.mojom-params-data.h"
#include "services/viz/privileged/mojom/compositing/renderer_settings.mojom-shared-message-ids.h"

#include "services/viz/privileged/mojom/compositing/renderer_settings.mojom-import-headers.h"
#include "services/viz/privileged/mojom/compositing/renderer_settings.mojom-test-utils.h"


#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_RENDERER_SETTINGS_MOJOM_JUMBO_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_RENDERER_SETTINGS_MOJOM_JUMBO_H_
#endif



namespace viz {
namespace mojom {
RendererSettings::RendererSettings()
    : apply_simple_frame_rate_throttling(),
      allow_antialiasing(),
      force_antialiasing(),
      force_blending_with_shaders(),
      highp_threshold_min(),
      partial_swap_enabled(),
      release_overlay_resources_after_gpu_query(),
      should_clear_root_render_pass(),
      slow_down_compositing_scale_factor(),
      auto_resize_output_surface(),
      requires_alpha_channel(),
      initial_screen_size(),
      color_space() {}

RendererSettings::RendererSettings(
    bool apply_simple_frame_rate_throttling_in,
    bool allow_antialiasing_in,
    bool force_antialiasing_in,
    bool force_blending_with_shaders_in,
    int32_t highp_threshold_min_in,
    bool partial_swap_enabled_in,
    bool release_overlay_resources_after_gpu_query_in,
    bool should_clear_root_render_pass_in,
    int32_t slow_down_compositing_scale_factor_in,
    bool auto_resize_output_surface_in,
    bool requires_alpha_channel_in,
    const ::gfx::Size& initial_screen_size_in,
    const ::gfx::ColorSpace& color_space_in)
    : apply_simple_frame_rate_throttling(std::move(apply_simple_frame_rate_throttling_in)),
      allow_antialiasing(std::move(allow_antialiasing_in)),
      force_antialiasing(std::move(force_antialiasing_in)),
      force_blending_with_shaders(std::move(force_blending_with_shaders_in)),
      highp_threshold_min(std::move(highp_threshold_min_in)),
      partial_swap_enabled(std::move(partial_swap_enabled_in)),
      release_overlay_resources_after_gpu_query(std::move(release_overlay_resources_after_gpu_query_in)),
      should_clear_root_render_pass(std::move(should_clear_root_render_pass_in)),
      slow_down_compositing_scale_factor(std::move(slow_down_compositing_scale_factor_in)),
      auto_resize_output_surface(std::move(auto_resize_output_surface_in)),
      requires_alpha_channel(std::move(requires_alpha_channel_in)),
      initial_screen_size(std::move(initial_screen_size_in)),
      color_space(std::move(color_space_in)) {}

RendererSettings::~RendererSettings() = default;

void RendererSettings::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "apply_simple_frame_rate_throttling"), this->apply_simple_frame_rate_throttling,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allow_antialiasing"), this->allow_antialiasing,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "force_antialiasing"), this->force_antialiasing,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "force_blending_with_shaders"), this->force_blending_with_shaders,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "highp_threshold_min"), this->highp_threshold_min,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "partial_swap_enabled"), this->partial_swap_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "release_overlay_resources_after_gpu_query"), this->release_overlay_resources_after_gpu_query,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "should_clear_root_render_pass"), this->should_clear_root_render_pass,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "slow_down_compositing_scale_factor"), this->slow_down_compositing_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "auto_resize_output_surface"), this->auto_resize_output_surface,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "requires_alpha_channel"), this->requires_alpha_channel,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "initial_screen_size"), this->initial_screen_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Size&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "color_space"), this->color_space,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::ColorSpace&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool RendererSettings::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
DebugRendererSettings::DebugRendererSettings()
    : tint_composited_content(),
      tint_composited_content_modulate(),
      show_overdraw_feedback(),
      show_dc_layer_debug_borders(),
      show_aggregated_damage() {}

DebugRendererSettings::DebugRendererSettings(
    bool tint_composited_content_in,
    bool tint_composited_content_modulate_in,
    bool show_overdraw_feedback_in,
    bool show_dc_layer_debug_borders_in,
    bool show_aggregated_damage_in)
    : tint_composited_content(std::move(tint_composited_content_in)),
      tint_composited_content_modulate(std::move(tint_composited_content_modulate_in)),
      show_overdraw_feedback(std::move(show_overdraw_feedback_in)),
      show_dc_layer_debug_borders(std::move(show_dc_layer_debug_borders_in)),
      show_aggregated_damage(std::move(show_aggregated_damage_in)) {}

DebugRendererSettings::~DebugRendererSettings() = default;

void DebugRendererSettings::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "tint_composited_content"), this->tint_composited_content,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "tint_composited_content_modulate"), this->tint_composited_content_modulate,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "show_overdraw_feedback"), this->show_overdraw_feedback,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "show_dc_layer_debug_borders"), this->show_dc_layer_debug_borders,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "show_aggregated_damage"), this->show_aggregated_damage,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DebugRendererSettings::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace viz


namespace mojo {


// static
bool StructTraits<::viz::mojom::RendererSettings::DataView, ::viz::mojom::RendererSettingsPtr>::Read(
    ::viz::mojom::RendererSettings::DataView input,
    ::viz::mojom::RendererSettingsPtr* output) {
  bool success = true;
  ::viz::mojom::RendererSettingsPtr result(::viz::mojom::RendererSettings::New());
  
      if (success)
        result->apply_simple_frame_rate_throttling = input.apply_simple_frame_rate_throttling();
      if (success)
        result->allow_antialiasing = input.allow_antialiasing();
      if (success)
        result->force_antialiasing = input.force_antialiasing();
      if (success)
        result->force_blending_with_shaders = input.force_blending_with_shaders();
      if (success)
        result->highp_threshold_min = input.highp_threshold_min();
      if (success)
        result->partial_swap_enabled = input.partial_swap_enabled();
      if (success)
        result->release_overlay_resources_after_gpu_query = input.release_overlay_resources_after_gpu_query();
      if (success)
        result->should_clear_root_render_pass = input.should_clear_root_render_pass();
      if (success)
        result->slow_down_compositing_scale_factor = input.slow_down_compositing_scale_factor();
      if (success)
        result->auto_resize_output_surface = input.auto_resize_output_surface();
      if (success)
        result->requires_alpha_channel = input.requires_alpha_channel();
      if (success && !input.ReadInitialScreenSize(&result->initial_screen_size))
        success = false;
      if (success && !input.ReadColorSpace(&result->color_space))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::viz::mojom::DebugRendererSettings::DataView, ::viz::mojom::DebugRendererSettingsPtr>::Read(
    ::viz::mojom::DebugRendererSettings::DataView input,
    ::viz::mojom::DebugRendererSettingsPtr* output) {
  bool success = true;
  ::viz::mojom::DebugRendererSettingsPtr result(::viz::mojom::DebugRendererSettings::New());
  
      if (success)
        result->tint_composited_content = input.tint_composited_content();
      if (success)
        result->tint_composited_content_modulate = input.tint_composited_content_modulate();
      if (success)
        result->show_overdraw_feedback = input.show_overdraw_feedback();
      if (success)
        result->show_dc_layer_debug_borders = input.show_dc_layer_debug_borders();
      if (success)
        result->show_aggregated_damage = input.show_aggregated_damage();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace viz {
namespace mojom {




}  // namespace mojom
}  // namespace viz


#if defined(__clang__)
#pragma clang diagnostic pop
#endif