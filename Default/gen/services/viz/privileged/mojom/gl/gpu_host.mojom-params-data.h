// services/viz/privileged/mojom/gl/gpu_host.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_GL_GPU_HOST_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_GL_GPU_HOST_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace viz {
namespace mojom {
namespace internal {

class ValidationContext;
class  GpuHost_DidInitialize_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gpu::mojom::internal::GpuInfo_Data> gpu_info;
  mojo::internal::Pointer<::gpu::mojom::internal::GpuFeatureInfo_Data> gpu_feature_info;
  mojo::internal::Pointer<::gpu::mojom::internal::GpuInfo_Data> gpu_info_for_hardware_gpu;
  mojo::internal::Pointer<::gpu::mojom::internal::GpuFeatureInfo_Data> gpu_feature_info_for_hardware_gpu;
  mojo::internal::Pointer<::gfx::mojom::internal::GpuExtraInfo_Data> gpu_extra_info;

 private:
  friend class mojo::internal::MessageFragment<GpuHost_DidInitialize_Params_Data>;

  GpuHost_DidInitialize_Params_Data();
  ~GpuHost_DidInitialize_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_DidInitialize_Params_Data) == 48,
              "Bad sizeof(GpuHost_DidInitialize_Params_Data)");
class  GpuHost_DidFailInitialize_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<GpuHost_DidFailInitialize_Params_Data>;

  GpuHost_DidFailInitialize_Params_Data();
  ~GpuHost_DidFailInitialize_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_DidFailInitialize_Params_Data) == 8,
              "Bad sizeof(GpuHost_DidFailInitialize_Params_Data)");
class  GpuHost_DidCreateContextSuccessfully_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<GpuHost_DidCreateContextSuccessfully_Params_Data>;

  GpuHost_DidCreateContextSuccessfully_Params_Data();
  ~GpuHost_DidCreateContextSuccessfully_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_DidCreateContextSuccessfully_Params_Data) == 8,
              "Bad sizeof(GpuHost_DidCreateContextSuccessfully_Params_Data)");
class  GpuHost_DidCreateOffscreenContext_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<GpuHost_DidCreateOffscreenContext_Params_Data>;

  GpuHost_DidCreateOffscreenContext_Params_Data();
  ~GpuHost_DidCreateOffscreenContext_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_DidCreateOffscreenContext_Params_Data) == 16,
              "Bad sizeof(GpuHost_DidCreateOffscreenContext_Params_Data)");
class  GpuHost_DidDestroyOffscreenContext_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<GpuHost_DidDestroyOffscreenContext_Params_Data>;

  GpuHost_DidDestroyOffscreenContext_Params_Data();
  ~GpuHost_DidDestroyOffscreenContext_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_DidDestroyOffscreenContext_Params_Data) == 16,
              "Bad sizeof(GpuHost_DidDestroyOffscreenContext_Params_Data)");
class  GpuHost_DidDestroyChannel_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t client_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<GpuHost_DidDestroyChannel_Params_Data>;

  GpuHost_DidDestroyChannel_Params_Data();
  ~GpuHost_DidDestroyChannel_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_DidDestroyChannel_Params_Data) == 16,
              "Bad sizeof(GpuHost_DidDestroyChannel_Params_Data)");
class  GpuHost_DidDestroyAllChannels_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<GpuHost_DidDestroyAllChannels_Params_Data>;

  GpuHost_DidDestroyAllChannels_Params_Data();
  ~GpuHost_DidDestroyAllChannels_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_DidDestroyAllChannels_Params_Data) == 8,
              "Bad sizeof(GpuHost_DidDestroyAllChannels_Params_Data)");
class  GpuHost_DidLoseContext_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t offscreen : 1;
  uint8_t pad0_[3];
  int32_t reason;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> active_url;

 private:
  friend class mojo::internal::MessageFragment<GpuHost_DidLoseContext_Params_Data>;

  GpuHost_DidLoseContext_Params_Data();
  ~GpuHost_DidLoseContext_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_DidLoseContext_Params_Data) == 24,
              "Bad sizeof(GpuHost_DidLoseContext_Params_Data)");
class  GpuHost_DidUpdateGPUInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gpu::mojom::internal::GpuInfo_Data> gpu_info;

 private:
  friend class mojo::internal::MessageFragment<GpuHost_DidUpdateGPUInfo_Params_Data>;

  GpuHost_DidUpdateGPUInfo_Params_Data();
  ~GpuHost_DidUpdateGPUInfo_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_DidUpdateGPUInfo_Params_Data) == 16,
              "Bad sizeof(GpuHost_DidUpdateGPUInfo_Params_Data)");
class  GpuHost_DisableGpuCompositing_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<GpuHost_DisableGpuCompositing_Params_Data>;

  GpuHost_DisableGpuCompositing_Params_Data();
  ~GpuHost_DisableGpuCompositing_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_DisableGpuCompositing_Params_Data) == 8,
              "Bad sizeof(GpuHost_DisableGpuCompositing_Params_Data)");
class  GpuHost_StoreShaderToDisk_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t client_id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> key;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ByteString_Data> shader;

 private:
  friend class mojo::internal::MessageFragment<GpuHost_StoreShaderToDisk_Params_Data>;

  GpuHost_StoreShaderToDisk_Params_Data();
  ~GpuHost_StoreShaderToDisk_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_StoreShaderToDisk_Params_Data) == 32,
              "Bad sizeof(GpuHost_StoreShaderToDisk_Params_Data)");
class  GpuHost_RecordLogMessage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t severity;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> header;
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<GpuHost_RecordLogMessage_Params_Data>;

  GpuHost_RecordLogMessage_Params_Data();
  ~GpuHost_RecordLogMessage_Params_Data() = delete;
};
static_assert(sizeof(GpuHost_RecordLogMessage_Params_Data) == 32,
              "Bad sizeof(GpuHost_RecordLogMessage_Params_Data)");

}  // namespace internal


class GpuHost_DidInitialize_ParamsDataView {
 public:
  GpuHost_DidInitialize_ParamsDataView() = default;

  GpuHost_DidInitialize_ParamsDataView(
      internal::GpuHost_DidInitialize_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetGpuInfoDataView(
      ::gpu::mojom::GpuInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGpuInfo(UserType* output) {
    
    auto* pointer = data_->gpu_info.Get();
    return mojo::internal::Deserialize<::gpu::mojom::GpuInfoDataView>(
        pointer, output, message_);
  }
  inline void GetGpuFeatureInfoDataView(
      ::gpu::mojom::GpuFeatureInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGpuFeatureInfo(UserType* output) {
    
    auto* pointer = data_->gpu_feature_info.Get();
    return mojo::internal::Deserialize<::gpu::mojom::GpuFeatureInfoDataView>(
        pointer, output, message_);
  }
  inline void GetGpuInfoForHardwareGpuDataView(
      ::gpu::mojom::GpuInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGpuInfoForHardwareGpu(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::gpu::mojom::GpuInfoDataView, UserType>(),
    "Attempting to read the optional `gpu_info_for_hardware_gpu` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadGpuInfoForHardwareGpu` instead "
    "of `ReadGpuInfoForHardwareGpu if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->gpu_info_for_hardware_gpu.Get();
    return mojo::internal::Deserialize<::gpu::mojom::GpuInfoDataView>(
        pointer, output, message_);
  }
  inline void GetGpuFeatureInfoForHardwareGpuDataView(
      ::gpu::mojom::GpuFeatureInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGpuFeatureInfoForHardwareGpu(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::gpu::mojom::GpuFeatureInfoDataView, UserType>(),
    "Attempting to read the optional `gpu_feature_info_for_hardware_gpu` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadGpuFeatureInfoForHardwareGpu` instead "
    "of `ReadGpuFeatureInfoForHardwareGpu if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->gpu_feature_info_for_hardware_gpu.Get();
    return mojo::internal::Deserialize<::gpu::mojom::GpuFeatureInfoDataView>(
        pointer, output, message_);
  }
  inline void GetGpuExtraInfoDataView(
      ::gfx::mojom::GpuExtraInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGpuExtraInfo(UserType* output) {
    
    auto* pointer = data_->gpu_extra_info.Get();
    return mojo::internal::Deserialize<::gfx::mojom::GpuExtraInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::GpuHost_DidInitialize_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuHost_DidFailInitialize_ParamsDataView {
 public:
  GpuHost_DidFailInitialize_ParamsDataView() = default;

  GpuHost_DidFailInitialize_ParamsDataView(
      internal::GpuHost_DidFailInitialize_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::GpuHost_DidFailInitialize_Params_Data* data_ = nullptr;
};



class GpuHost_DidCreateContextSuccessfully_ParamsDataView {
 public:
  GpuHost_DidCreateContextSuccessfully_ParamsDataView() = default;

  GpuHost_DidCreateContextSuccessfully_ParamsDataView(
      internal::GpuHost_DidCreateContextSuccessfully_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::GpuHost_DidCreateContextSuccessfully_Params_Data* data_ = nullptr;
};



class GpuHost_DidCreateOffscreenContext_ParamsDataView {
 public:
  GpuHost_DidCreateOffscreenContext_ParamsDataView() = default;

  GpuHost_DidCreateOffscreenContext_ParamsDataView(
      internal::GpuHost_DidCreateOffscreenContext_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::GpuHost_DidCreateOffscreenContext_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuHost_DidDestroyOffscreenContext_ParamsDataView {
 public:
  GpuHost_DidDestroyOffscreenContext_ParamsDataView() = default;

  GpuHost_DidDestroyOffscreenContext_ParamsDataView(
      internal::GpuHost_DidDestroyOffscreenContext_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::GpuHost_DidDestroyOffscreenContext_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuHost_DidDestroyChannel_ParamsDataView {
 public:
  GpuHost_DidDestroyChannel_ParamsDataView() = default;

  GpuHost_DidDestroyChannel_ParamsDataView(
      internal::GpuHost_DidDestroyChannel_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t client_id() const {
    return data_->client_id;
  }
 private:
  internal::GpuHost_DidDestroyChannel_Params_Data* data_ = nullptr;
};



class GpuHost_DidDestroyAllChannels_ParamsDataView {
 public:
  GpuHost_DidDestroyAllChannels_ParamsDataView() = default;

  GpuHost_DidDestroyAllChannels_ParamsDataView(
      internal::GpuHost_DidDestroyAllChannels_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::GpuHost_DidDestroyAllChannels_Params_Data* data_ = nullptr;
};



class GpuHost_DidLoseContext_ParamsDataView {
 public:
  GpuHost_DidLoseContext_ParamsDataView() = default;

  GpuHost_DidLoseContext_ParamsDataView(
      internal::GpuHost_DidLoseContext_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool offscreen() const {
    return data_->offscreen;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::viz::mojom::ContextLostReason>(
        data_value, output);
  }
  ::viz::mojom::ContextLostReason reason() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::viz::mojom::ContextLostReason>(data_->reason));
  }
  inline void GetActiveUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadActiveUrl(UserType* output) {
    
    auto* pointer = data_->active_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::GpuHost_DidLoseContext_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuHost_DidUpdateGPUInfo_ParamsDataView {
 public:
  GpuHost_DidUpdateGPUInfo_ParamsDataView() = default;

  GpuHost_DidUpdateGPUInfo_ParamsDataView(
      internal::GpuHost_DidUpdateGPUInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetGpuInfoDataView(
      ::gpu::mojom::GpuInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGpuInfo(UserType* output) {
    
    auto* pointer = data_->gpu_info.Get();
    return mojo::internal::Deserialize<::gpu::mojom::GpuInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::GpuHost_DidUpdateGPUInfo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuHost_DisableGpuCompositing_ParamsDataView {
 public:
  GpuHost_DisableGpuCompositing_ParamsDataView() = default;

  GpuHost_DisableGpuCompositing_ParamsDataView(
      internal::GpuHost_DisableGpuCompositing_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::GpuHost_DisableGpuCompositing_Params_Data* data_ = nullptr;
};



class GpuHost_StoreShaderToDisk_ParamsDataView {
 public:
  GpuHost_StoreShaderToDisk_ParamsDataView() = default;

  GpuHost_StoreShaderToDisk_ParamsDataView(
      internal::GpuHost_StoreShaderToDisk_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t client_id() const {
    return data_->client_id;
  }
  inline void GetKeyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = data_->key.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetShaderDataView(
      ::mojo_base::mojom::ByteStringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadShader(UserType* output) {
    
    auto* pointer = data_->shader.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ByteStringDataView>(
        pointer, output, message_);
  }
 private:
  internal::GpuHost_StoreShaderToDisk_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuHost_RecordLogMessage_ParamsDataView {
 public:
  GpuHost_RecordLogMessage_ParamsDataView() = default;

  GpuHost_RecordLogMessage_ParamsDataView(
      internal::GpuHost_RecordLogMessage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t severity() const {
    return data_->severity;
  }
  inline void GetHeaderDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHeader(UserType* output) {
    
    auto* pointer = data_->header.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::GpuHost_RecordLogMessage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void GpuHost_DidInitialize_ParamsDataView::GetGpuInfoDataView(
    ::gpu::mojom::GpuInfoDataView* output) {
  auto pointer = data_->gpu_info.Get();
  *output = ::gpu::mojom::GpuInfoDataView(pointer, message_);
}
inline void GpuHost_DidInitialize_ParamsDataView::GetGpuFeatureInfoDataView(
    ::gpu::mojom::GpuFeatureInfoDataView* output) {
  auto pointer = data_->gpu_feature_info.Get();
  *output = ::gpu::mojom::GpuFeatureInfoDataView(pointer, message_);
}
inline void GpuHost_DidInitialize_ParamsDataView::GetGpuInfoForHardwareGpuDataView(
    ::gpu::mojom::GpuInfoDataView* output) {
  auto pointer = data_->gpu_info_for_hardware_gpu.Get();
  *output = ::gpu::mojom::GpuInfoDataView(pointer, message_);
}
inline void GpuHost_DidInitialize_ParamsDataView::GetGpuFeatureInfoForHardwareGpuDataView(
    ::gpu::mojom::GpuFeatureInfoDataView* output) {
  auto pointer = data_->gpu_feature_info_for_hardware_gpu.Get();
  *output = ::gpu::mojom::GpuFeatureInfoDataView(pointer, message_);
}
inline void GpuHost_DidInitialize_ParamsDataView::GetGpuExtraInfoDataView(
    ::gfx::mojom::GpuExtraInfoDataView* output) {
  auto pointer = data_->gpu_extra_info.Get();
  *output = ::gfx::mojom::GpuExtraInfoDataView(pointer, message_);
}






inline void GpuHost_DidCreateOffscreenContext_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void GpuHost_DidDestroyOffscreenContext_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}






inline void GpuHost_DidLoseContext_ParamsDataView::GetActiveUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->active_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void GpuHost_DidUpdateGPUInfo_ParamsDataView::GetGpuInfoDataView(
    ::gpu::mojom::GpuInfoDataView* output) {
  auto pointer = data_->gpu_info.Get();
  *output = ::gpu::mojom::GpuInfoDataView(pointer, message_);
}




inline void GpuHost_StoreShaderToDisk_ParamsDataView::GetKeyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->key.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void GpuHost_StoreShaderToDisk_ParamsDataView::GetShaderDataView(
    ::mojo_base::mojom::ByteStringDataView* output) {
  auto pointer = data_->shader.Get();
  *output = ::mojo_base::mojom::ByteStringDataView(pointer, message_);
}


inline void GpuHost_RecordLogMessage_ParamsDataView::GetHeaderDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->header.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void GpuHost_RecordLogMessage_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_VIZ_PRIVILEGED_MOJOM_GL_GPU_HOST_MOJOM_PARAMS_DATA_H_