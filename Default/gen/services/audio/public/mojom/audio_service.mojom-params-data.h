// services/audio/public/mojom/audio_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_SERVICE_MOJOM_PARAMS_DATA_H_
#define SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace audio {
namespace mojom {
namespace internal {

class ValidationContext;
class  AudioService_BindSystemInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<AudioService_BindSystemInfo_Params_Data>;

  AudioService_BindSystemInfo_Params_Data();
  ~AudioService_BindSystemInfo_Params_Data() = delete;
};
static_assert(sizeof(AudioService_BindSystemInfo_Params_Data) == 16,
              "Bad sizeof(AudioService_BindSystemInfo_Params_Data)");
class  AudioService_BindDebugRecording_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<AudioService_BindDebugRecording_Params_Data>;

  AudioService_BindDebugRecording_Params_Data();
  ~AudioService_BindDebugRecording_Params_Data() = delete;
};
static_assert(sizeof(AudioService_BindDebugRecording_Params_Data) == 16,
              "Bad sizeof(AudioService_BindDebugRecording_Params_Data)");
class  AudioService_BindStreamFactory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<AudioService_BindStreamFactory_Params_Data>;

  AudioService_BindStreamFactory_Params_Data();
  ~AudioService_BindStreamFactory_Params_Data() = delete;
};
static_assert(sizeof(AudioService_BindStreamFactory_Params_Data) == 16,
              "Bad sizeof(AudioService_BindStreamFactory_Params_Data)");
class  AudioService_BindDeviceNotifier_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<AudioService_BindDeviceNotifier_Params_Data>;

  AudioService_BindDeviceNotifier_Params_Data();
  ~AudioService_BindDeviceNotifier_Params_Data() = delete;
};
static_assert(sizeof(AudioService_BindDeviceNotifier_Params_Data) == 16,
              "Bad sizeof(AudioService_BindDeviceNotifier_Params_Data)");
class  AudioService_BindLogFactoryManager_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<AudioService_BindLogFactoryManager_Params_Data>;

  AudioService_BindLogFactoryManager_Params_Data();
  ~AudioService_BindLogFactoryManager_Params_Data() = delete;
};
static_assert(sizeof(AudioService_BindLogFactoryManager_Params_Data) == 16,
              "Bad sizeof(AudioService_BindLogFactoryManager_Params_Data)");
class  AudioService_BindTestingApi_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<AudioService_BindTestingApi_Params_Data>;

  AudioService_BindTestingApi_Params_Data();
  ~AudioService_BindTestingApi_Params_Data() = delete;
};
static_assert(sizeof(AudioService_BindTestingApi_Params_Data) == 16,
              "Bad sizeof(AudioService_BindTestingApi_Params_Data)");

}  // namespace internal


class AudioService_BindSystemInfo_ParamsDataView {
 public:
  AudioService_BindSystemInfo_ParamsDataView() = default;

  AudioService_BindSystemInfo_ParamsDataView(
      internal::AudioService_BindSystemInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::audio::mojom::SystemInfoInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AudioService_BindSystemInfo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioService_BindDebugRecording_ParamsDataView {
 public:
  AudioService_BindDebugRecording_ParamsDataView() = default;

  AudioService_BindDebugRecording_ParamsDataView(
      internal::AudioService_BindDebugRecording_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::audio::mojom::DebugRecordingInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AudioService_BindDebugRecording_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioService_BindStreamFactory_ParamsDataView {
 public:
  AudioService_BindStreamFactory_ParamsDataView() = default;

  AudioService_BindStreamFactory_ParamsDataView(
      internal::AudioService_BindStreamFactory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::AudioStreamFactoryInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AudioService_BindStreamFactory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioService_BindDeviceNotifier_ParamsDataView {
 public:
  AudioService_BindDeviceNotifier_ParamsDataView() = default;

  AudioService_BindDeviceNotifier_ParamsDataView(
      internal::AudioService_BindDeviceNotifier_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::audio::mojom::DeviceNotifierInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AudioService_BindDeviceNotifier_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioService_BindLogFactoryManager_ParamsDataView {
 public:
  AudioService_BindLogFactoryManager_ParamsDataView() = default;

  AudioService_BindLogFactoryManager_ParamsDataView(
      internal::AudioService_BindLogFactoryManager_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::audio::mojom::LogFactoryManagerInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AudioService_BindLogFactoryManager_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioService_BindTestingApi_ParamsDataView {
 public:
  AudioService_BindTestingApi_ParamsDataView() = default;

  AudioService_BindTestingApi_ParamsDataView(
      internal::AudioService_BindTestingApi_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::audio::mojom::TestingApiInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AudioService_BindTestingApi_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};













}  // namespace mojom
}  // namespace audio

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_SERVICE_MOJOM_PARAMS_DATA_H_