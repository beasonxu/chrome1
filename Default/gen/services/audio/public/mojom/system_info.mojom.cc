// services/audio/public/mojom/system_info.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/audio/public/mojom/system_info.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/audio/public/mojom/system_info.mojom-params-data.h"
#include "services/audio/public/mojom/system_info.mojom-shared-message-ids.h"

#include "services/audio/public/mojom/system_info.mojom-import-headers.h"
#include "services/audio/public/mojom/system_info.mojom-test-utils.h"


#ifndef SERVICES_AUDIO_PUBLIC_MOJOM_SYSTEM_INFO_MOJOM_JUMBO_H_
#define SERVICES_AUDIO_PUBLIC_MOJOM_SYSTEM_INFO_MOJOM_JUMBO_H_
#endif



namespace audio {
namespace mojom {
const char SystemInfo::Name_[] = "audio.mojom.SystemInfo";

SystemInfo::IPCStableHashFunction SystemInfo::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kSystemInfo_GetInputStreamParameters_Name: {
      return &SystemInfo::GetInputStreamParameters_Sym::IPCStableHash;
    }
    case internal::kSystemInfo_GetOutputStreamParameters_Name: {
      return &SystemInfo::GetOutputStreamParameters_Sym::IPCStableHash;
    }
    case internal::kSystemInfo_HasInputDevices_Name: {
      return &SystemInfo::HasInputDevices_Sym::IPCStableHash;
    }
    case internal::kSystemInfo_HasOutputDevices_Name: {
      return &SystemInfo::HasOutputDevices_Sym::IPCStableHash;
    }
    case internal::kSystemInfo_GetInputDeviceDescriptions_Name: {
      return &SystemInfo::GetInputDeviceDescriptions_Sym::IPCStableHash;
    }
    case internal::kSystemInfo_GetOutputDeviceDescriptions_Name: {
      return &SystemInfo::GetOutputDeviceDescriptions_Sym::IPCStableHash;
    }
    case internal::kSystemInfo_GetAssociatedOutputDeviceID_Name: {
      return &SystemInfo::GetAssociatedOutputDeviceID_Sym::IPCStableHash;
    }
    case internal::kSystemInfo_GetInputDeviceInfo_Name: {
      return &SystemInfo::GetInputDeviceInfo_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* SystemInfo::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kSystemInfo_GetInputStreamParameters_Name:
            return "Receive audio::mojom::SystemInfo::GetInputStreamParameters";
      case internal::kSystemInfo_GetOutputStreamParameters_Name:
            return "Receive audio::mojom::SystemInfo::GetOutputStreamParameters";
      case internal::kSystemInfo_HasInputDevices_Name:
            return "Receive audio::mojom::SystemInfo::HasInputDevices";
      case internal::kSystemInfo_HasOutputDevices_Name:
            return "Receive audio::mojom::SystemInfo::HasOutputDevices";
      case internal::kSystemInfo_GetInputDeviceDescriptions_Name:
            return "Receive audio::mojom::SystemInfo::GetInputDeviceDescriptions";
      case internal::kSystemInfo_GetOutputDeviceDescriptions_Name:
            return "Receive audio::mojom::SystemInfo::GetOutputDeviceDescriptions";
      case internal::kSystemInfo_GetAssociatedOutputDeviceID_Name:
            return "Receive audio::mojom::SystemInfo::GetAssociatedOutputDeviceID";
      case internal::kSystemInfo_GetInputDeviceInfo_Name:
            return "Receive audio::mojom::SystemInfo::GetInputDeviceInfo";
    }
  } else {
    switch (message.name()) {
      case internal::kSystemInfo_GetInputStreamParameters_Name:
            return "Receive reply audio::mojom::SystemInfo::GetInputStreamParameters";
      case internal::kSystemInfo_GetOutputStreamParameters_Name:
            return "Receive reply audio::mojom::SystemInfo::GetOutputStreamParameters";
      case internal::kSystemInfo_HasInputDevices_Name:
            return "Receive reply audio::mojom::SystemInfo::HasInputDevices";
      case internal::kSystemInfo_HasOutputDevices_Name:
            return "Receive reply audio::mojom::SystemInfo::HasOutputDevices";
      case internal::kSystemInfo_GetInputDeviceDescriptions_Name:
            return "Receive reply audio::mojom::SystemInfo::GetInputDeviceDescriptions";
      case internal::kSystemInfo_GetOutputDeviceDescriptions_Name:
            return "Receive reply audio::mojom::SystemInfo::GetOutputDeviceDescriptions";
      case internal::kSystemInfo_GetAssociatedOutputDeviceID_Name:
            return "Receive reply audio::mojom::SystemInfo::GetAssociatedOutputDeviceID";
      case internal::kSystemInfo_GetInputDeviceInfo_Name:
            return "Receive reply audio::mojom::SystemInfo::GetInputDeviceInfo";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t SystemInfo::GetInputStreamParameters_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)audio::mojom::SystemInfo::GetInputStreamParameters");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SystemInfo::GetOutputStreamParameters_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)audio::mojom::SystemInfo::GetOutputStreamParameters");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SystemInfo::HasInputDevices_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)audio::mojom::SystemInfo::HasInputDevices");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SystemInfo::HasOutputDevices_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)audio::mojom::SystemInfo::HasOutputDevices");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SystemInfo::GetInputDeviceDescriptions_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)audio::mojom::SystemInfo::GetInputDeviceDescriptions");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SystemInfo::GetOutputDeviceDescriptions_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)audio::mojom::SystemInfo::GetOutputDeviceDescriptions");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SystemInfo::GetAssociatedOutputDeviceID_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)audio::mojom::SystemInfo::GetAssociatedOutputDeviceID");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SystemInfo::GetInputDeviceInfo_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)audio::mojom::SystemInfo::GetInputDeviceInfo");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class SystemInfo_GetInputStreamParameters_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SystemInfo_GetInputStreamParameters_ForwardToCallback(
      SystemInfo::GetInputStreamParametersCallback callback
      ) : callback_(std::move(callback)) {
  }

  SystemInfo_GetInputStreamParameters_ForwardToCallback(const SystemInfo_GetInputStreamParameters_ForwardToCallback&) = delete;
  SystemInfo_GetInputStreamParameters_ForwardToCallback& operator=(const SystemInfo_GetInputStreamParameters_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SystemInfo::GetInputStreamParametersCallback callback_;
};

class SystemInfo_GetOutputStreamParameters_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SystemInfo_GetOutputStreamParameters_ForwardToCallback(
      SystemInfo::GetOutputStreamParametersCallback callback
      ) : callback_(std::move(callback)) {
  }

  SystemInfo_GetOutputStreamParameters_ForwardToCallback(const SystemInfo_GetOutputStreamParameters_ForwardToCallback&) = delete;
  SystemInfo_GetOutputStreamParameters_ForwardToCallback& operator=(const SystemInfo_GetOutputStreamParameters_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SystemInfo::GetOutputStreamParametersCallback callback_;
};

class SystemInfo_HasInputDevices_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SystemInfo_HasInputDevices_ForwardToCallback(
      SystemInfo::HasInputDevicesCallback callback
      ) : callback_(std::move(callback)) {
  }

  SystemInfo_HasInputDevices_ForwardToCallback(const SystemInfo_HasInputDevices_ForwardToCallback&) = delete;
  SystemInfo_HasInputDevices_ForwardToCallback& operator=(const SystemInfo_HasInputDevices_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SystemInfo::HasInputDevicesCallback callback_;
};

class SystemInfo_HasOutputDevices_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SystemInfo_HasOutputDevices_ForwardToCallback(
      SystemInfo::HasOutputDevicesCallback callback
      ) : callback_(std::move(callback)) {
  }

  SystemInfo_HasOutputDevices_ForwardToCallback(const SystemInfo_HasOutputDevices_ForwardToCallback&) = delete;
  SystemInfo_HasOutputDevices_ForwardToCallback& operator=(const SystemInfo_HasOutputDevices_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SystemInfo::HasOutputDevicesCallback callback_;
};

class SystemInfo_GetInputDeviceDescriptions_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SystemInfo_GetInputDeviceDescriptions_ForwardToCallback(
      SystemInfo::GetInputDeviceDescriptionsCallback callback
      ) : callback_(std::move(callback)) {
  }

  SystemInfo_GetInputDeviceDescriptions_ForwardToCallback(const SystemInfo_GetInputDeviceDescriptions_ForwardToCallback&) = delete;
  SystemInfo_GetInputDeviceDescriptions_ForwardToCallback& operator=(const SystemInfo_GetInputDeviceDescriptions_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SystemInfo::GetInputDeviceDescriptionsCallback callback_;
};

class SystemInfo_GetOutputDeviceDescriptions_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SystemInfo_GetOutputDeviceDescriptions_ForwardToCallback(
      SystemInfo::GetOutputDeviceDescriptionsCallback callback
      ) : callback_(std::move(callback)) {
  }

  SystemInfo_GetOutputDeviceDescriptions_ForwardToCallback(const SystemInfo_GetOutputDeviceDescriptions_ForwardToCallback&) = delete;
  SystemInfo_GetOutputDeviceDescriptions_ForwardToCallback& operator=(const SystemInfo_GetOutputDeviceDescriptions_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SystemInfo::GetOutputDeviceDescriptionsCallback callback_;
};

class SystemInfo_GetAssociatedOutputDeviceID_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SystemInfo_GetAssociatedOutputDeviceID_ForwardToCallback(
      SystemInfo::GetAssociatedOutputDeviceIDCallback callback
      ) : callback_(std::move(callback)) {
  }

  SystemInfo_GetAssociatedOutputDeviceID_ForwardToCallback(const SystemInfo_GetAssociatedOutputDeviceID_ForwardToCallback&) = delete;
  SystemInfo_GetAssociatedOutputDeviceID_ForwardToCallback& operator=(const SystemInfo_GetAssociatedOutputDeviceID_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SystemInfo::GetAssociatedOutputDeviceIDCallback callback_;
};

class SystemInfo_GetInputDeviceInfo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SystemInfo_GetInputDeviceInfo_ForwardToCallback(
      SystemInfo::GetInputDeviceInfoCallback callback
      ) : callback_(std::move(callback)) {
  }

  SystemInfo_GetInputDeviceInfo_ForwardToCallback(const SystemInfo_GetInputDeviceInfo_ForwardToCallback&) = delete;
  SystemInfo_GetInputDeviceInfo_ForwardToCallback& operator=(const SystemInfo_GetInputDeviceInfo_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SystemInfo::GetInputDeviceInfoCallback callback_;
};

SystemInfoProxy::SystemInfoProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SystemInfoProxy::GetInputStreamParameters(
    const std::string& in_device_id, GetInputStreamParametersCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send audio::mojom::SystemInfo::GetInputStreamParameters", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_id"), in_device_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetInputStreamParameters_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetInputStreamParameters_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->device_id)::BaseType> device_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_device_id, device_id_fragment);
  params->device_id.Set(
      device_id_fragment.is_null() ? nullptr : device_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_id in SystemInfo.GetInputStreamParameters request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetInputStreamParameters");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SystemInfo_GetInputStreamParameters_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SystemInfoProxy::GetOutputStreamParameters(
    const std::string& in_device_id, GetOutputStreamParametersCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send audio::mojom::SystemInfo::GetOutputStreamParameters", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_id"), in_device_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetOutputStreamParameters_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetOutputStreamParameters_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->device_id)::BaseType> device_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_device_id, device_id_fragment);
  params->device_id.Set(
      device_id_fragment.is_null() ? nullptr : device_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_id in SystemInfo.GetOutputStreamParameters request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetOutputStreamParameters");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SystemInfo_GetOutputStreamParameters_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SystemInfoProxy::HasInputDevices(
    HasInputDevicesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send audio::mojom::SystemInfo::HasInputDevices");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_HasInputDevices_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_HasInputDevices_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("HasInputDevices");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SystemInfo_HasInputDevices_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SystemInfoProxy::HasOutputDevices(
    HasOutputDevicesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send audio::mojom::SystemInfo::HasOutputDevices");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_HasOutputDevices_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_HasOutputDevices_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("HasOutputDevices");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SystemInfo_HasOutputDevices_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SystemInfoProxy::GetInputDeviceDescriptions(
    GetInputDeviceDescriptionsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send audio::mojom::SystemInfo::GetInputDeviceDescriptions");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetInputDeviceDescriptions_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetInputDeviceDescriptions_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetInputDeviceDescriptions");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SystemInfo_GetInputDeviceDescriptions_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SystemInfoProxy::GetOutputDeviceDescriptions(
    GetOutputDeviceDescriptionsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send audio::mojom::SystemInfo::GetOutputDeviceDescriptions");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetOutputDeviceDescriptions_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetOutputDeviceDescriptions_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetOutputDeviceDescriptions");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SystemInfo_GetOutputDeviceDescriptions_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SystemInfoProxy::GetAssociatedOutputDeviceID(
    const std::string& in_input_device_id, GetAssociatedOutputDeviceIDCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send audio::mojom::SystemInfo::GetAssociatedOutputDeviceID", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("input_device_id"), in_input_device_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetAssociatedOutputDeviceID_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetAssociatedOutputDeviceID_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->input_device_id)::BaseType> input_device_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_input_device_id, input_device_id_fragment);
  params->input_device_id.Set(
      input_device_id_fragment.is_null() ? nullptr : input_device_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->input_device_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null input_device_id in SystemInfo.GetAssociatedOutputDeviceID request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetAssociatedOutputDeviceID");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SystemInfo_GetAssociatedOutputDeviceID_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SystemInfoProxy::GetInputDeviceInfo(
    const std::string& in_input_device_id, GetInputDeviceInfoCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send audio::mojom::SystemInfo::GetInputDeviceInfo", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("input_device_id"), in_input_device_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetInputDeviceInfo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetInputDeviceInfo_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->input_device_id)::BaseType> input_device_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_input_device_id, input_device_id_fragment);
  params->input_device_id.Set(
      input_device_id_fragment.is_null() ? nullptr : input_device_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->input_device_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null input_device_id in SystemInfo.GetInputDeviceInfo request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetInputDeviceInfo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SystemInfo_GetInputDeviceInfo_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class SystemInfo_GetInputStreamParameters_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SystemInfo::GetInputStreamParametersCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SystemInfo_GetInputStreamParameters_ProxyToResponder> proxy(
        new SystemInfo_GetInputStreamParameters_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SystemInfo_GetInputStreamParameters_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SystemInfo_GetInputStreamParameters_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SystemInfo_GetInputStreamParameters_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SystemInfo::GetInputStreamParametersCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const absl::optional<::media::AudioParameters>& in_params);
};

bool SystemInfo_GetInputStreamParameters_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SystemInfo_GetInputStreamParameters_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SystemInfo_GetInputStreamParameters_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  absl::optional<::media::AudioParameters> p_params{};
  SystemInfo_GetInputStreamParameters_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadParams(&p_params))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SystemInfo::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_params));
  return true;
}

void SystemInfo_GetInputStreamParameters_ProxyToResponder::Run(
    const absl::optional<::media::AudioParameters>& in_params) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply audio::mojom::SystemInfo::GetInputStreamParameters", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("params"), in_params,
                        "<value of type const absl::optional<::media::AudioParameters>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetInputStreamParameters_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetInputStreamParameters_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->params)::BaseType> params_fragment(
          params.message());
  mojo::internal::Serialize<::media::mojom::AudioParametersDataView>(
      in_params, params_fragment);
  params->params.Set(
      params_fragment.is_null() ? nullptr : params_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetInputStreamParameters");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SystemInfo_GetOutputStreamParameters_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SystemInfo::GetOutputStreamParametersCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SystemInfo_GetOutputStreamParameters_ProxyToResponder> proxy(
        new SystemInfo_GetOutputStreamParameters_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SystemInfo_GetOutputStreamParameters_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SystemInfo_GetOutputStreamParameters_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SystemInfo_GetOutputStreamParameters_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SystemInfo::GetOutputStreamParametersCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const absl::optional<::media::AudioParameters>& in_params);
};

bool SystemInfo_GetOutputStreamParameters_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SystemInfo_GetOutputStreamParameters_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SystemInfo_GetOutputStreamParameters_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  absl::optional<::media::AudioParameters> p_params{};
  SystemInfo_GetOutputStreamParameters_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadParams(&p_params))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SystemInfo::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_params));
  return true;
}

void SystemInfo_GetOutputStreamParameters_ProxyToResponder::Run(
    const absl::optional<::media::AudioParameters>& in_params) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply audio::mojom::SystemInfo::GetOutputStreamParameters", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("params"), in_params,
                        "<value of type const absl::optional<::media::AudioParameters>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetOutputStreamParameters_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetOutputStreamParameters_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->params)::BaseType> params_fragment(
          params.message());
  mojo::internal::Serialize<::media::mojom::AudioParametersDataView>(
      in_params, params_fragment);
  params->params.Set(
      params_fragment.is_null() ? nullptr : params_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetOutputStreamParameters");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SystemInfo_HasInputDevices_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SystemInfo::HasInputDevicesCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SystemInfo_HasInputDevices_ProxyToResponder> proxy(
        new SystemInfo_HasInputDevices_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SystemInfo_HasInputDevices_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SystemInfo_HasInputDevices_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SystemInfo_HasInputDevices_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SystemInfo::HasInputDevicesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_has_input_devices);
};

bool SystemInfo_HasInputDevices_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SystemInfo_HasInputDevices_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SystemInfo_HasInputDevices_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_has_input_devices{};
  SystemInfo_HasInputDevices_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_has_input_devices = input_data_view.has_input_devices();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SystemInfo::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_has_input_devices));
  return true;
}

void SystemInfo_HasInputDevices_ProxyToResponder::Run(
    bool in_has_input_devices) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply audio::mojom::SystemInfo::HasInputDevices", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("has_input_devices"), in_has_input_devices,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_HasInputDevices_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_HasInputDevices_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->has_input_devices = in_has_input_devices;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("HasInputDevices");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SystemInfo_HasOutputDevices_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SystemInfo::HasOutputDevicesCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SystemInfo_HasOutputDevices_ProxyToResponder> proxy(
        new SystemInfo_HasOutputDevices_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SystemInfo_HasOutputDevices_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SystemInfo_HasOutputDevices_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SystemInfo_HasOutputDevices_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SystemInfo::HasOutputDevicesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_has_output_devices);
};

bool SystemInfo_HasOutputDevices_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SystemInfo_HasOutputDevices_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SystemInfo_HasOutputDevices_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_has_output_devices{};
  SystemInfo_HasOutputDevices_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_has_output_devices = input_data_view.has_output_devices();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SystemInfo::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_has_output_devices));
  return true;
}

void SystemInfo_HasOutputDevices_ProxyToResponder::Run(
    bool in_has_output_devices) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply audio::mojom::SystemInfo::HasOutputDevices", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("has_output_devices"), in_has_output_devices,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_HasOutputDevices_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_HasOutputDevices_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->has_output_devices = in_has_output_devices;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("HasOutputDevices");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SystemInfo_GetInputDeviceDescriptions_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SystemInfo::GetInputDeviceDescriptionsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SystemInfo_GetInputDeviceDescriptions_ProxyToResponder> proxy(
        new SystemInfo_GetInputDeviceDescriptions_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SystemInfo_GetInputDeviceDescriptions_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SystemInfo_GetInputDeviceDescriptions_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SystemInfo_GetInputDeviceDescriptions_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SystemInfo::GetInputDeviceDescriptionsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<::media::AudioDeviceDescription> in_device_descriptions);
};

bool SystemInfo_GetInputDeviceDescriptions_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SystemInfo_GetInputDeviceDescriptions_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SystemInfo_GetInputDeviceDescriptions_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<::media::AudioDeviceDescription> p_device_descriptions{};
  SystemInfo_GetInputDeviceDescriptions_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadDeviceDescriptions(&p_device_descriptions))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SystemInfo::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_device_descriptions));
  return true;
}

void SystemInfo_GetInputDeviceDescriptions_ProxyToResponder::Run(
    std::vector<::media::AudioDeviceDescription> in_device_descriptions) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply audio::mojom::SystemInfo::GetInputDeviceDescriptions", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_descriptions"), in_device_descriptions,
                        "<value of type std::vector<::media::AudioDeviceDescription>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetInputDeviceDescriptions_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetInputDeviceDescriptions_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->device_descriptions)::BaseType>
      device_descriptions_fragment(params.message());
  const mojo::internal::ContainerValidateParams device_descriptions_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::audio::mojom::AudioDeviceDescriptionDataView>>(
      in_device_descriptions, device_descriptions_fragment, &device_descriptions_validate_params);
  params->device_descriptions.Set(
      device_descriptions_fragment.is_null() ? nullptr : device_descriptions_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_descriptions.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_descriptions in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetInputDeviceDescriptions");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SystemInfo_GetOutputDeviceDescriptions_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SystemInfo::GetOutputDeviceDescriptionsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SystemInfo_GetOutputDeviceDescriptions_ProxyToResponder> proxy(
        new SystemInfo_GetOutputDeviceDescriptions_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SystemInfo_GetOutputDeviceDescriptions_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SystemInfo_GetOutputDeviceDescriptions_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SystemInfo_GetOutputDeviceDescriptions_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SystemInfo::GetOutputDeviceDescriptionsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<::media::AudioDeviceDescription> in_device_descriptions);
};

bool SystemInfo_GetOutputDeviceDescriptions_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SystemInfo_GetOutputDeviceDescriptions_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SystemInfo_GetOutputDeviceDescriptions_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<::media::AudioDeviceDescription> p_device_descriptions{};
  SystemInfo_GetOutputDeviceDescriptions_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadDeviceDescriptions(&p_device_descriptions))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SystemInfo::Name_, 5, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_device_descriptions));
  return true;
}

void SystemInfo_GetOutputDeviceDescriptions_ProxyToResponder::Run(
    std::vector<::media::AudioDeviceDescription> in_device_descriptions) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply audio::mojom::SystemInfo::GetOutputDeviceDescriptions", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_descriptions"), in_device_descriptions,
                        "<value of type std::vector<::media::AudioDeviceDescription>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetOutputDeviceDescriptions_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetOutputDeviceDescriptions_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->device_descriptions)::BaseType>
      device_descriptions_fragment(params.message());
  const mojo::internal::ContainerValidateParams device_descriptions_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::audio::mojom::AudioDeviceDescriptionDataView>>(
      in_device_descriptions, device_descriptions_fragment, &device_descriptions_validate_params);
  params->device_descriptions.Set(
      device_descriptions_fragment.is_null() ? nullptr : device_descriptions_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_descriptions.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_descriptions in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetOutputDeviceDescriptions");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SystemInfo_GetAssociatedOutputDeviceID_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SystemInfo::GetAssociatedOutputDeviceIDCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SystemInfo_GetAssociatedOutputDeviceID_ProxyToResponder> proxy(
        new SystemInfo_GetAssociatedOutputDeviceID_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SystemInfo_GetAssociatedOutputDeviceID_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SystemInfo_GetAssociatedOutputDeviceID_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SystemInfo_GetAssociatedOutputDeviceID_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SystemInfo::GetAssociatedOutputDeviceIDCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const absl::optional<std::string>& in_associated_output_device_id);
};

bool SystemInfo_GetAssociatedOutputDeviceID_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SystemInfo_GetAssociatedOutputDeviceID_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SystemInfo_GetAssociatedOutputDeviceID_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  absl::optional<std::string> p_associated_output_device_id{};
  SystemInfo_GetAssociatedOutputDeviceID_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadAssociatedOutputDeviceId(&p_associated_output_device_id))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SystemInfo::Name_, 6, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_associated_output_device_id));
  return true;
}

void SystemInfo_GetAssociatedOutputDeviceID_ProxyToResponder::Run(
    const absl::optional<std::string>& in_associated_output_device_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply audio::mojom::SystemInfo::GetAssociatedOutputDeviceID", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("associated_output_device_id"), in_associated_output_device_id,
                        "<value of type const absl::optional<std::string>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetAssociatedOutputDeviceID_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetAssociatedOutputDeviceID_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->associated_output_device_id)::BaseType> associated_output_device_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_associated_output_device_id, associated_output_device_id_fragment);
  params->associated_output_device_id.Set(
      associated_output_device_id_fragment.is_null() ? nullptr : associated_output_device_id_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetAssociatedOutputDeviceID");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SystemInfo_GetInputDeviceInfo_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SystemInfo::GetInputDeviceInfoCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SystemInfo_GetInputDeviceInfo_ProxyToResponder> proxy(
        new SystemInfo_GetInputDeviceInfo_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SystemInfo_GetInputDeviceInfo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SystemInfo_GetInputDeviceInfo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SystemInfo_GetInputDeviceInfo_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SystemInfo::GetInputDeviceInfoCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const absl::optional<::media::AudioParameters>& in_input_params, const absl::optional<std::string>& in_associated_output_device_id);
};

bool SystemInfo_GetInputDeviceInfo_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SystemInfo_GetInputDeviceInfo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SystemInfo_GetInputDeviceInfo_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  absl::optional<::media::AudioParameters> p_input_params{};
  absl::optional<std::string> p_associated_output_device_id{};
  SystemInfo_GetInputDeviceInfo_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadInputParams(&p_input_params))
    success = false;
  if (success && !input_data_view.ReadAssociatedOutputDeviceId(&p_associated_output_device_id))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SystemInfo::Name_, 7, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_input_params), 
std::move(p_associated_output_device_id));
  return true;
}

void SystemInfo_GetInputDeviceInfo_ProxyToResponder::Run(
    const absl::optional<::media::AudioParameters>& in_input_params, const absl::optional<std::string>& in_associated_output_device_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply audio::mojom::SystemInfo::GetInputDeviceInfo", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("input_params"), in_input_params,
                        "<value of type const absl::optional<::media::AudioParameters>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("associated_output_device_id"), in_associated_output_device_id,
                        "<value of type const absl::optional<std::string>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSystemInfo_GetInputDeviceInfo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::audio::mojom::internal::SystemInfo_GetInputDeviceInfo_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->input_params)::BaseType> input_params_fragment(
          params.message());
  mojo::internal::Serialize<::media::mojom::AudioParametersDataView>(
      in_input_params, input_params_fragment);
  params->input_params.Set(
      input_params_fragment.is_null() ? nullptr : input_params_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->associated_output_device_id)::BaseType> associated_output_device_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_associated_output_device_id, associated_output_device_id_fragment);
  params->associated_output_device_id.Set(
      associated_output_device_id_fragment.is_null() ? nullptr : associated_output_device_id_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SystemInfo::Name_);
  message.set_method_name("GetInputDeviceInfo");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool SystemInfoStubDispatch::Accept(
    SystemInfo* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSystemInfo_GetInputStreamParameters_Name: {
      break;
    }
    case internal::kSystemInfo_GetOutputStreamParameters_Name: {
      break;
    }
    case internal::kSystemInfo_HasInputDevices_Name: {
      break;
    }
    case internal::kSystemInfo_HasOutputDevices_Name: {
      break;
    }
    case internal::kSystemInfo_GetInputDeviceDescriptions_Name: {
      break;
    }
    case internal::kSystemInfo_GetOutputDeviceDescriptions_Name: {
      break;
    }
    case internal::kSystemInfo_GetAssociatedOutputDeviceID_Name: {
      break;
    }
    case internal::kSystemInfo_GetInputDeviceInfo_Name: {
      break;
    }
  }
  return false;
}

// static
bool SystemInfoStubDispatch::AcceptWithResponder(
    SystemInfo* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kSystemInfo_GetInputStreamParameters_Name: {

      internal::SystemInfo_GetInputStreamParameters_Params_Data* params =
          reinterpret_cast<
              internal::SystemInfo_GetInputStreamParameters_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_device_id{};
      SystemInfo_GetInputStreamParameters_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDeviceId(&p_device_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SystemInfo::Name_, 0, false);
        return false;
      }
      SystemInfo::GetInputStreamParametersCallback callback =
          SystemInfo_GetInputStreamParameters_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetInputStreamParameters(
std::move(p_device_id), std::move(callback));
      return true;
    }
    case internal::kSystemInfo_GetOutputStreamParameters_Name: {

      internal::SystemInfo_GetOutputStreamParameters_Params_Data* params =
          reinterpret_cast<
              internal::SystemInfo_GetOutputStreamParameters_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_device_id{};
      SystemInfo_GetOutputStreamParameters_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDeviceId(&p_device_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SystemInfo::Name_, 1, false);
        return false;
      }
      SystemInfo::GetOutputStreamParametersCallback callback =
          SystemInfo_GetOutputStreamParameters_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetOutputStreamParameters(
std::move(p_device_id), std::move(callback));
      return true;
    }
    case internal::kSystemInfo_HasInputDevices_Name: {

      internal::SystemInfo_HasInputDevices_Params_Data* params =
          reinterpret_cast<
              internal::SystemInfo_HasInputDevices_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      SystemInfo_HasInputDevices_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SystemInfo::Name_, 2, false);
        return false;
      }
      SystemInfo::HasInputDevicesCallback callback =
          SystemInfo_HasInputDevices_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->HasInputDevices(std::move(callback));
      return true;
    }
    case internal::kSystemInfo_HasOutputDevices_Name: {

      internal::SystemInfo_HasOutputDevices_Params_Data* params =
          reinterpret_cast<
              internal::SystemInfo_HasOutputDevices_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      SystemInfo_HasOutputDevices_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SystemInfo::Name_, 3, false);
        return false;
      }
      SystemInfo::HasOutputDevicesCallback callback =
          SystemInfo_HasOutputDevices_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->HasOutputDevices(std::move(callback));
      return true;
    }
    case internal::kSystemInfo_GetInputDeviceDescriptions_Name: {

      internal::SystemInfo_GetInputDeviceDescriptions_Params_Data* params =
          reinterpret_cast<
              internal::SystemInfo_GetInputDeviceDescriptions_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      SystemInfo_GetInputDeviceDescriptions_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SystemInfo::Name_, 4, false);
        return false;
      }
      SystemInfo::GetInputDeviceDescriptionsCallback callback =
          SystemInfo_GetInputDeviceDescriptions_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetInputDeviceDescriptions(std::move(callback));
      return true;
    }
    case internal::kSystemInfo_GetOutputDeviceDescriptions_Name: {

      internal::SystemInfo_GetOutputDeviceDescriptions_Params_Data* params =
          reinterpret_cast<
              internal::SystemInfo_GetOutputDeviceDescriptions_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      SystemInfo_GetOutputDeviceDescriptions_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SystemInfo::Name_, 5, false);
        return false;
      }
      SystemInfo::GetOutputDeviceDescriptionsCallback callback =
          SystemInfo_GetOutputDeviceDescriptions_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetOutputDeviceDescriptions(std::move(callback));
      return true;
    }
    case internal::kSystemInfo_GetAssociatedOutputDeviceID_Name: {

      internal::SystemInfo_GetAssociatedOutputDeviceID_Params_Data* params =
          reinterpret_cast<
              internal::SystemInfo_GetAssociatedOutputDeviceID_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_input_device_id{};
      SystemInfo_GetAssociatedOutputDeviceID_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadInputDeviceId(&p_input_device_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SystemInfo::Name_, 6, false);
        return false;
      }
      SystemInfo::GetAssociatedOutputDeviceIDCallback callback =
          SystemInfo_GetAssociatedOutputDeviceID_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetAssociatedOutputDeviceID(
std::move(p_input_device_id), std::move(callback));
      return true;
    }
    case internal::kSystemInfo_GetInputDeviceInfo_Name: {

      internal::SystemInfo_GetInputDeviceInfo_Params_Data* params =
          reinterpret_cast<
              internal::SystemInfo_GetInputDeviceInfo_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_input_device_id{};
      SystemInfo_GetInputDeviceInfo_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadInputDeviceId(&p_input_device_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SystemInfo::Name_, 7, false);
        return false;
      }
      SystemInfo::GetInputDeviceInfoCallback callback =
          SystemInfo_GetInputDeviceInfo_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetInputDeviceInfo(
std::move(p_input_device_id), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSystemInfoValidationInfo[] = {
    {&internal::SystemInfo_GetInputStreamParameters_Params_Data::Validate,
     &internal::SystemInfo_GetInputStreamParameters_ResponseParams_Data::Validate},
    {&internal::SystemInfo_GetOutputStreamParameters_Params_Data::Validate,
     &internal::SystemInfo_GetOutputStreamParameters_ResponseParams_Data::Validate},
    {&internal::SystemInfo_HasInputDevices_Params_Data::Validate,
     &internal::SystemInfo_HasInputDevices_ResponseParams_Data::Validate},
    {&internal::SystemInfo_HasOutputDevices_Params_Data::Validate,
     &internal::SystemInfo_HasOutputDevices_ResponseParams_Data::Validate},
    {&internal::SystemInfo_GetInputDeviceDescriptions_Params_Data::Validate,
     &internal::SystemInfo_GetInputDeviceDescriptions_ResponseParams_Data::Validate},
    {&internal::SystemInfo_GetOutputDeviceDescriptions_Params_Data::Validate,
     &internal::SystemInfo_GetOutputDeviceDescriptions_ResponseParams_Data::Validate},
    {&internal::SystemInfo_GetAssociatedOutputDeviceID_Params_Data::Validate,
     &internal::SystemInfo_GetAssociatedOutputDeviceID_ResponseParams_Data::Validate},
    {&internal::SystemInfo_GetInputDeviceInfo_Params_Data::Validate,
     &internal::SystemInfo_GetInputDeviceInfo_ResponseParams_Data::Validate},
};

bool SystemInfoRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::audio::mojom::SystemInfo::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSystemInfoValidationInfo);
}

bool SystemInfoResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::audio::mojom::SystemInfo::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kSystemInfoValidationInfo);
}


}  // namespace mojom
}  // namespace audio


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace audio {
namespace mojom {


void SystemInfoInterceptorForTesting::GetInputStreamParameters(const std::string& device_id, GetInputStreamParametersCallback callback) {
  GetForwardingInterface()->GetInputStreamParameters(std::move(device_id), std::move(callback));
}
void SystemInfoInterceptorForTesting::GetOutputStreamParameters(const std::string& device_id, GetOutputStreamParametersCallback callback) {
  GetForwardingInterface()->GetOutputStreamParameters(std::move(device_id), std::move(callback));
}
void SystemInfoInterceptorForTesting::HasInputDevices(HasInputDevicesCallback callback) {
  GetForwardingInterface()->HasInputDevices(std::move(callback));
}
void SystemInfoInterceptorForTesting::HasOutputDevices(HasOutputDevicesCallback callback) {
  GetForwardingInterface()->HasOutputDevices(std::move(callback));
}
void SystemInfoInterceptorForTesting::GetInputDeviceDescriptions(GetInputDeviceDescriptionsCallback callback) {
  GetForwardingInterface()->GetInputDeviceDescriptions(std::move(callback));
}
void SystemInfoInterceptorForTesting::GetOutputDeviceDescriptions(GetOutputDeviceDescriptionsCallback callback) {
  GetForwardingInterface()->GetOutputDeviceDescriptions(std::move(callback));
}
void SystemInfoInterceptorForTesting::GetAssociatedOutputDeviceID(const std::string& input_device_id, GetAssociatedOutputDeviceIDCallback callback) {
  GetForwardingInterface()->GetAssociatedOutputDeviceID(std::move(input_device_id), std::move(callback));
}
void SystemInfoInterceptorForTesting::GetInputDeviceInfo(const std::string& input_device_id, GetInputDeviceInfoCallback callback) {
  GetForwardingInterface()->GetInputDeviceInfo(std::move(input_device_id), std::move(callback));
}
SystemInfoAsyncWaiter::SystemInfoAsyncWaiter(
    SystemInfo* proxy) : proxy_(proxy) {}

SystemInfoAsyncWaiter::~SystemInfoAsyncWaiter() = default;

void SystemInfoAsyncWaiter::GetInputStreamParameters(
    const std::string& device_id, absl::optional<::media::AudioParameters>* out_params) {
  base::RunLoop loop;
  proxy_->GetInputStreamParameters(std::move(device_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             absl::optional<::media::AudioParameters>* out_params
,
             const absl::optional<::media::AudioParameters>& params) {*out_params = std::move(params);
            loop->Quit();
          },
          &loop,
          out_params));
  loop.Run();
}
void SystemInfoAsyncWaiter::GetOutputStreamParameters(
    const std::string& device_id, absl::optional<::media::AudioParameters>* out_params) {
  base::RunLoop loop;
  proxy_->GetOutputStreamParameters(std::move(device_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             absl::optional<::media::AudioParameters>* out_params
,
             const absl::optional<::media::AudioParameters>& params) {*out_params = std::move(params);
            loop->Quit();
          },
          &loop,
          out_params));
  loop.Run();
}
void SystemInfoAsyncWaiter::HasInputDevices(
    bool* out_has_input_devices) {
  base::RunLoop loop;
  proxy_->HasInputDevices(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_has_input_devices
,
             bool has_input_devices) {*out_has_input_devices = std::move(has_input_devices);
            loop->Quit();
          },
          &loop,
          out_has_input_devices));
  loop.Run();
}
void SystemInfoAsyncWaiter::HasOutputDevices(
    bool* out_has_output_devices) {
  base::RunLoop loop;
  proxy_->HasOutputDevices(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_has_output_devices
,
             bool has_output_devices) {*out_has_output_devices = std::move(has_output_devices);
            loop->Quit();
          },
          &loop,
          out_has_output_devices));
  loop.Run();
}
void SystemInfoAsyncWaiter::GetInputDeviceDescriptions(
    std::vector<::media::AudioDeviceDescription>* out_device_descriptions) {
  base::RunLoop loop;
  proxy_->GetInputDeviceDescriptions(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<::media::AudioDeviceDescription>* out_device_descriptions
,
             std::vector<::media::AudioDeviceDescription> device_descriptions) {*out_device_descriptions = std::move(device_descriptions);
            loop->Quit();
          },
          &loop,
          out_device_descriptions));
  loop.Run();
}
void SystemInfoAsyncWaiter::GetOutputDeviceDescriptions(
    std::vector<::media::AudioDeviceDescription>* out_device_descriptions) {
  base::RunLoop loop;
  proxy_->GetOutputDeviceDescriptions(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<::media::AudioDeviceDescription>* out_device_descriptions
,
             std::vector<::media::AudioDeviceDescription> device_descriptions) {*out_device_descriptions = std::move(device_descriptions);
            loop->Quit();
          },
          &loop,
          out_device_descriptions));
  loop.Run();
}
void SystemInfoAsyncWaiter::GetAssociatedOutputDeviceID(
    const std::string& input_device_id, absl::optional<std::string>* out_associated_output_device_id) {
  base::RunLoop loop;
  proxy_->GetAssociatedOutputDeviceID(std::move(input_device_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             absl::optional<std::string>* out_associated_output_device_id
,
             const absl::optional<std::string>& associated_output_device_id) {*out_associated_output_device_id = std::move(associated_output_device_id);
            loop->Quit();
          },
          &loop,
          out_associated_output_device_id));
  loop.Run();
}
void SystemInfoAsyncWaiter::GetInputDeviceInfo(
    const std::string& input_device_id, absl::optional<::media::AudioParameters>* out_input_params, absl::optional<std::string>* out_associated_output_device_id) {
  base::RunLoop loop;
  proxy_->GetInputDeviceInfo(std::move(input_device_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             absl::optional<::media::AudioParameters>* out_input_params
,
             absl::optional<std::string>* out_associated_output_device_id
,
             const absl::optional<::media::AudioParameters>& input_params,
             const absl::optional<std::string>& associated_output_device_id) {*out_input_params = std::move(input_params);*out_associated_output_device_id = std::move(associated_output_device_id);
            loop->Quit();
          },
          &loop,
          out_input_params,
          out_associated_output_device_id));
  loop.Run();
}





}  // namespace mojom
}  // namespace audio


#if defined(__clang__)
#pragma clang diagnostic pop
#endif