// content/services/auction_worklet/public/mojom/private_aggregation_request.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_PRIVATE_AGGREGATION_REQUEST_MOJOM_H_
#define CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_PRIVATE_AGGREGATION_REQUEST_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/services/auction_worklet/public/mojom/private_aggregation_request.mojom-shared.h"
#include "content/services/auction_worklet/public/mojom/private_aggregation_request.mojom-forward.h"
#include "content/common/aggregatable_report.mojom.h"
#include <string>
#include <vector>




#include "content/common/content_export.h"




namespace auction_worklet {
namespace mojom {








class CONTENT_EXPORT PrivateAggregationRequest {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PrivateAggregationRequest, T>::value>;
  using DataView = PrivateAggregationRequestDataView;
  using Data_ = internal::PrivateAggregationRequest_Data;

  template <typename... Args>
  static PrivateAggregationRequestPtr New(Args&&... args) {
    return PrivateAggregationRequestPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PrivateAggregationRequestPtr From(const U& u) {
    return mojo::TypeConverter<PrivateAggregationRequestPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrivateAggregationRequest>::Convert(*this);
  }


  PrivateAggregationRequest();

  PrivateAggregationRequest(
      ::content::mojom::AggregatableReportHistogramContributionPtr contribution,
      ::content::mojom::AggregationServiceMode aggregation_mode);

PrivateAggregationRequest(const PrivateAggregationRequest&) = delete;
PrivateAggregationRequest& operator=(const PrivateAggregationRequest&) = delete;

  ~PrivateAggregationRequest();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PrivateAggregationRequestPtr>
  PrivateAggregationRequestPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PrivateAggregationRequest::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PrivateAggregationRequest::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PrivateAggregationRequest::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PrivateAggregationRequest::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PrivateAggregationRequest_UnserializedMessageContext<
            UserType, PrivateAggregationRequest::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PrivateAggregationRequest::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return PrivateAggregationRequest::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PrivateAggregationRequest_UnserializedMessageContext<
            UserType, PrivateAggregationRequest::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PrivateAggregationRequest::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::content::mojom::AggregatableReportHistogramContributionPtr contribution;
  
  ::content::mojom::AggregationServiceMode aggregation_mode;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PrivateAggregationRequest::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PrivateAggregationRequest::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PrivateAggregationRequest::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PrivateAggregationRequest::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
PrivateAggregationRequestPtr PrivateAggregationRequest::Clone() const {
  return New(
      mojo::Clone(contribution),
      mojo::Clone(aggregation_mode)
  );
}

template <typename T, PrivateAggregationRequest::EnableIfSame<T>*>
bool PrivateAggregationRequest::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->contribution, other_struct.contribution))
    return false;
  if (!mojo::Equals(this->aggregation_mode, other_struct.aggregation_mode))
    return false;
  return true;
}

template <typename T, PrivateAggregationRequest::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.contribution < rhs.contribution)
    return true;
  if (rhs.contribution < lhs.contribution)
    return false;
  if (lhs.aggregation_mode < rhs.aggregation_mode)
    return true;
  if (rhs.aggregation_mode < lhs.aggregation_mode)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace auction_worklet

namespace mojo {


template <>
struct CONTENT_EXPORT StructTraits<::auction_worklet::mojom::PrivateAggregationRequest::DataView,
                                         ::auction_worklet::mojom::PrivateAggregationRequestPtr> {
  static bool IsNull(const ::auction_worklet::mojom::PrivateAggregationRequestPtr& input) { return !input; }
  static void SetToNull(::auction_worklet::mojom::PrivateAggregationRequestPtr* output) { output->reset(); }

  static const decltype(::auction_worklet::mojom::PrivateAggregationRequest::contribution)& contribution(
      const ::auction_worklet::mojom::PrivateAggregationRequestPtr& input) {
    return input->contribution;
  }

  static decltype(::auction_worklet::mojom::PrivateAggregationRequest::aggregation_mode) aggregation_mode(
      const ::auction_worklet::mojom::PrivateAggregationRequestPtr& input) {
    return input->aggregation_mode;
  }

  static bool Read(::auction_worklet::mojom::PrivateAggregationRequest::DataView input, ::auction_worklet::mojom::PrivateAggregationRequestPtr* output);
};

}  // namespace mojo

#endif  // CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_PRIVATE_AGGREGATION_REQUEST_MOJOM_H_