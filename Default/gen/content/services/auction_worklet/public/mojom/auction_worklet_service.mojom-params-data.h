// content/services/auction_worklet/public/mojom/auction_worklet_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_AUCTION_WORKLET_SERVICE_MOJOM_PARAMS_DATA_H_
#define CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_AUCTION_WORKLET_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace auction_worklet {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) AuctionWorkletService_LoadBidderWorklet_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data bidder_worklet;
  uint8_t pause_for_debugger_on_start : 1;
  uint8_t has_experiment_group_id : 1;
  uint8_t pad2_[1];
  uint16_t experiment_group_id;
  mojo::internal::Interface_Data url_loader_factory;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> script_source_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> wasm_helper_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> trusted_bidding_signals_url;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> top_window_origin;

 private:
  friend class mojo::internal::MessageFragment<AuctionWorkletService_LoadBidderWorklet_Params_Data>;

  AuctionWorkletService_LoadBidderWorklet_Params_Data();
  ~AuctionWorkletService_LoadBidderWorklet_Params_Data() = delete;
};
static_assert(sizeof(AuctionWorkletService_LoadBidderWorklet_Params_Data) == 56,
              "Bad sizeof(AuctionWorkletService_LoadBidderWorklet_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) AuctionWorkletService_LoadSellerWorklet_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data seller_worklet;
  uint8_t pause_for_debugger_on_start : 1;
  uint8_t has_experiment_group_id : 1;
  uint8_t pad2_[1];
  uint16_t experiment_group_id;
  mojo::internal::Interface_Data url_loader_factory;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> script_source_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> trusted_scoring_signals_url;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> top_window_origin;

 private:
  friend class mojo::internal::MessageFragment<AuctionWorkletService_LoadSellerWorklet_Params_Data>;

  AuctionWorkletService_LoadSellerWorklet_Params_Data();
  ~AuctionWorkletService_LoadSellerWorklet_Params_Data() = delete;
};
static_assert(sizeof(AuctionWorkletService_LoadSellerWorklet_Params_Data) == 48,
              "Bad sizeof(AuctionWorkletService_LoadSellerWorklet_Params_Data)");

}  // namespace internal


class AuctionWorkletService_LoadBidderWorklet_ParamsDataView {
 public:
  AuctionWorkletService_LoadBidderWorklet_ParamsDataView() = default;

  AuctionWorkletService_LoadBidderWorklet_ParamsDataView(
      internal::AuctionWorkletService_LoadBidderWorklet_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeBidderWorklet() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::auction_worklet::mojom::BidderWorkletInterfaceBase>>(
            &data_->bidder_worklet, &result, message_);
    DCHECK(ret);
    return result;
  }
  bool pause_for_debugger_on_start() const {
    return data_->pause_for_debugger_on_start;
  }
  template <typename UserType>
  UserType TakeUrlLoaderFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::URLLoaderFactoryInterfaceBase>>(
            &data_->url_loader_factory, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetScriptSourceUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScriptSourceUrl(UserType* output) {
    
    auto* pointer = data_->script_source_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetWasmHelperUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadWasmHelperUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::UrlDataView, UserType>(),
    "Attempting to read the optional `wasm_helper_url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadWasmHelperUrl` instead "
    "of `ReadWasmHelperUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->wasm_helper_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetTrustedBiddingSignalsUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTrustedBiddingSignalsUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::UrlDataView, UserType>(),
    "Attempting to read the optional `trusted_bidding_signals_url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadTrustedBiddingSignalsUrl` instead "
    "of `ReadTrustedBiddingSignalsUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->trusted_bidding_signals_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetTopWindowOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTopWindowOrigin(UserType* output) {
    
    auto* pointer = data_->top_window_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  bool has_experiment_group_id() const {
    return data_->has_experiment_group_id;
  }
  uint16_t experiment_group_id() const {
    return data_->experiment_group_id;
  }
 private:
  internal::AuctionWorkletService_LoadBidderWorklet_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AuctionWorkletService_LoadSellerWorklet_ParamsDataView {
 public:
  AuctionWorkletService_LoadSellerWorklet_ParamsDataView() = default;

  AuctionWorkletService_LoadSellerWorklet_ParamsDataView(
      internal::AuctionWorkletService_LoadSellerWorklet_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeSellerWorklet() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::auction_worklet::mojom::SellerWorkletInterfaceBase>>(
            &data_->seller_worklet, &result, message_);
    DCHECK(ret);
    return result;
  }
  bool pause_for_debugger_on_start() const {
    return data_->pause_for_debugger_on_start;
  }
  template <typename UserType>
  UserType TakeUrlLoaderFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::URLLoaderFactoryInterfaceBase>>(
            &data_->url_loader_factory, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetScriptSourceUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScriptSourceUrl(UserType* output) {
    
    auto* pointer = data_->script_source_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetTrustedScoringSignalsUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTrustedScoringSignalsUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::UrlDataView, UserType>(),
    "Attempting to read the optional `trusted_scoring_signals_url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadTrustedScoringSignalsUrl` instead "
    "of `ReadTrustedScoringSignalsUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->trusted_scoring_signals_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetTopWindowOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTopWindowOrigin(UserType* output) {
    
    auto* pointer = data_->top_window_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  bool has_experiment_group_id() const {
    return data_->has_experiment_group_id;
  }
  uint16_t experiment_group_id() const {
    return data_->experiment_group_id;
  }
 private:
  internal::AuctionWorkletService_LoadSellerWorklet_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void AuctionWorkletService_LoadBidderWorklet_ParamsDataView::GetScriptSourceUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->script_source_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void AuctionWorkletService_LoadBidderWorklet_ParamsDataView::GetWasmHelperUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->wasm_helper_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void AuctionWorkletService_LoadBidderWorklet_ParamsDataView::GetTrustedBiddingSignalsUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->trusted_bidding_signals_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void AuctionWorkletService_LoadBidderWorklet_ParamsDataView::GetTopWindowOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->top_window_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}


inline void AuctionWorkletService_LoadSellerWorklet_ParamsDataView::GetScriptSourceUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->script_source_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void AuctionWorkletService_LoadSellerWorklet_ParamsDataView::GetTrustedScoringSignalsUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->trusted_scoring_signals_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void AuctionWorkletService_LoadSellerWorklet_ParamsDataView::GetTopWindowOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->top_window_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace auction_worklet

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_AUCTION_WORKLET_SERVICE_MOJOM_PARAMS_DATA_H_