// content/services/auction_worklet/public/mojom/seller_worklet.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_SELLER_WORKLET_MOJOM_H_
#define CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_SELLER_WORKLET_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/services/auction_worklet/public/mojom/seller_worklet.mojom-shared.h"
#include "content/services/auction_worklet/public/mojom/seller_worklet.mojom-forward.h"
#include "content/services/auction_worklet/public/mojom/private_aggregation_request.mojom-forward.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "services/network/public/mojom/url_loader_factory.mojom-forward.h"
#include "third_party/blink/public/mojom/devtools/devtools_agent.mojom-forward.h"
#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom.h"
#include "url/mojom/origin.mojom.h"
#include "url/mojom/url.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "content/common/content_export.h"




namespace auction_worklet {
namespace mojom {

class SellerWorkletProxy;

template <typename ImplRefTraits>
class SellerWorkletStub;

class SellerWorkletRequestValidator;
class SellerWorkletResponseValidator;


class CONTENT_EXPORT SellerWorklet
    : public SellerWorkletInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = SellerWorkletInterfaceBase;
  using Proxy_ = SellerWorkletProxy;

  template <typename ImplRefTraits>
  using Stub_ = SellerWorkletStub<ImplRefTraits>;

  using RequestValidator_ = SellerWorkletRequestValidator;
  using ResponseValidator_ = SellerWorkletResponseValidator;
  enum MethodMinVersions : uint32_t {
    kScoreAdMinVersion = 0,
    kSendPendingSignalsRequestsMinVersion = 0,
    kReportResultMinVersion = 0,
    kConnectDevToolsAgentMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct ScoreAd_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SendPendingSignalsRequests_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ReportResult_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ConnectDevToolsAgent_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~SellerWorklet() = default;


  using ScoreAdCallback = base::OnceCallback<void(double, ComponentAuctionModifiedBidParamsPtr, uint32_t, bool, const absl::optional<::GURL>&, const absl::optional<::GURL>&, std::vector<::auction_worklet::mojom::PrivateAggregationRequestPtr>, const std::vector<std::string>&)>;
  
  virtual void ScoreAd(const std::string& ad_metadata_json, double bid, const ::blink::AuctionConfig::NonSharedParams& auction_ad_config_non_shared_params, ComponentAuctionOtherSellerPtr browser_signals_other_seller, const ::url::Origin& browser_signal_interest_group_owner, const ::GURL& browser_signal_render_url, const std::vector<::GURL>& browser_signal_ad_component_render_urls, uint32_t browser_signal_bidding_duration_msecs, absl::optional<::base::TimeDelta> seller_timeout, uint64_t trace_id, ScoreAdCallback callback) = 0;

  
  virtual void SendPendingSignalsRequests() = 0;


  using ReportResultCallback = base::OnceCallback<void(const absl::optional<std::string>&, const absl::optional<::GURL>&, const base::flat_map<std::string, ::GURL>&, std::vector<::auction_worklet::mojom::PrivateAggregationRequestPtr>, const std::vector<std::string>&)>;
  
  virtual void ReportResult(const ::blink::AuctionConfig::NonSharedParams& auction_ad_config_non_shared_params, ComponentAuctionOtherSellerPtr browser_signals_other_seller, const ::url::Origin& browser_signal_interest_group_owner, const ::GURL& browser_signal_render_url, double browser_signal_bid, double browser_signal_desirability, double browser_signal_highest_scoring_other_bid, ComponentAuctionReportResultParamsPtr browser_signals_component_auction_report_result_params, uint32_t scoring_signals_data_version, bool has_scoring_signals_data_version, uint64_t trace_id, ReportResultCallback callback) = 0;

  
  virtual void ConnectDevToolsAgent(::mojo::PendingAssociatedReceiver<::blink::mojom::DevToolsAgent> agent) = 0;
};



class CONTENT_EXPORT SellerWorkletProxy
    : public SellerWorklet {
 public:
  using InterfaceType = SellerWorklet;

  explicit SellerWorkletProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void ScoreAd(const std::string& ad_metadata_json, double bid, const ::blink::AuctionConfig::NonSharedParams& auction_ad_config_non_shared_params, ComponentAuctionOtherSellerPtr browser_signals_other_seller, const ::url::Origin& browser_signal_interest_group_owner, const ::GURL& browser_signal_render_url, const std::vector<::GURL>& browser_signal_ad_component_render_urls, uint32_t browser_signal_bidding_duration_msecs, absl::optional<::base::TimeDelta> seller_timeout, uint64_t trace_id, ScoreAdCallback callback) final;
  
  void SendPendingSignalsRequests() final;
  
  void ReportResult(const ::blink::AuctionConfig::NonSharedParams& auction_ad_config_non_shared_params, ComponentAuctionOtherSellerPtr browser_signals_other_seller, const ::url::Origin& browser_signal_interest_group_owner, const ::GURL& browser_signal_render_url, double browser_signal_bid, double browser_signal_desirability, double browser_signal_highest_scoring_other_bid, ComponentAuctionReportResultParamsPtr browser_signals_component_auction_report_result_params, uint32_t scoring_signals_data_version, bool has_scoring_signals_data_version, uint64_t trace_id, ReportResultCallback callback) final;
  
  void ConnectDevToolsAgent(::mojo::PendingAssociatedReceiver<::blink::mojom::DevToolsAgent> agent) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class CONTENT_EXPORT SellerWorkletStubDispatch {
 public:
  static bool Accept(SellerWorklet* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      SellerWorklet* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<SellerWorklet>>
class SellerWorkletStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SellerWorkletStub() = default;
  ~SellerWorkletStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SellerWorkletStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SellerWorkletStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class CONTENT_EXPORT SellerWorkletRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class CONTENT_EXPORT SellerWorkletResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





class CONTENT_EXPORT ComponentAuctionModifiedBidParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ComponentAuctionModifiedBidParams, T>::value>;
  using DataView = ComponentAuctionModifiedBidParamsDataView;
  using Data_ = internal::ComponentAuctionModifiedBidParams_Data;

  template <typename... Args>
  static ComponentAuctionModifiedBidParamsPtr New(Args&&... args) {
    return ComponentAuctionModifiedBidParamsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ComponentAuctionModifiedBidParamsPtr From(const U& u) {
    return mojo::TypeConverter<ComponentAuctionModifiedBidParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ComponentAuctionModifiedBidParams>::Convert(*this);
  }


  ComponentAuctionModifiedBidParams();

  ComponentAuctionModifiedBidParams(
      const std::string& ad,
      double bid,
      bool has_bid);


  ~ComponentAuctionModifiedBidParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ComponentAuctionModifiedBidParamsPtr>
  ComponentAuctionModifiedBidParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ComponentAuctionModifiedBidParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ComponentAuctionModifiedBidParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ComponentAuctionModifiedBidParams::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ComponentAuctionModifiedBidParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ComponentAuctionModifiedBidParams_UnserializedMessageContext<
            UserType, ComponentAuctionModifiedBidParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ComponentAuctionModifiedBidParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ComponentAuctionModifiedBidParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ComponentAuctionModifiedBidParams_UnserializedMessageContext<
            UserType, ComponentAuctionModifiedBidParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ComponentAuctionModifiedBidParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string ad;
  
  double bid;
  
  bool has_bid;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ComponentAuctionModifiedBidParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ComponentAuctionModifiedBidParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ComponentAuctionModifiedBidParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ComponentAuctionModifiedBidParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class CONTENT_EXPORT ComponentAuctionReportResultParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ComponentAuctionReportResultParams, T>::value>;
  using DataView = ComponentAuctionReportResultParamsDataView;
  using Data_ = internal::ComponentAuctionReportResultParams_Data;

  template <typename... Args>
  static ComponentAuctionReportResultParamsPtr New(Args&&... args) {
    return ComponentAuctionReportResultParamsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ComponentAuctionReportResultParamsPtr From(const U& u) {
    return mojo::TypeConverter<ComponentAuctionReportResultParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ComponentAuctionReportResultParams>::Convert(*this);
  }


  ComponentAuctionReportResultParams();

  ComponentAuctionReportResultParams(
      const std::string& top_level_seller_signals,
      double modified_bid,
      bool has_modified_bid);


  ~ComponentAuctionReportResultParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ComponentAuctionReportResultParamsPtr>
  ComponentAuctionReportResultParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ComponentAuctionReportResultParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ComponentAuctionReportResultParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ComponentAuctionReportResultParams::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ComponentAuctionReportResultParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ComponentAuctionReportResultParams_UnserializedMessageContext<
            UserType, ComponentAuctionReportResultParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ComponentAuctionReportResultParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ComponentAuctionReportResultParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ComponentAuctionReportResultParams_UnserializedMessageContext<
            UserType, ComponentAuctionReportResultParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ComponentAuctionReportResultParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string top_level_seller_signals;
  
  double modified_bid;
  
  bool has_modified_bid;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ComponentAuctionReportResultParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ComponentAuctionReportResultParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ComponentAuctionReportResultParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ComponentAuctionReportResultParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class CONTENT_EXPORT ComponentAuctionOtherSeller {
 public:
  using DataView = ComponentAuctionOtherSellerDataView;
  using Data_ = internal::ComponentAuctionOtherSeller_Data;
  using Tag = Data_::ComponentAuctionOtherSeller_Tag;

  template <typename... Args>
  static ComponentAuctionOtherSellerPtr New(Args&&... args) {
    static_assert(
        sizeof...(args) < 0,
        "Do not use Union::New(); to create a union of a given subtype, use "
        "New<SubType>(), not New() followed by set_<sub_type>(). To represent "
        "an empty union, mark the field or parameter as nullable in the mojom "
        "definition.");
  }
  // Construct an instance holding |top_level_seller|.
  static ComponentAuctionOtherSellerPtr
  NewTopLevelSeller(
      const ::url::Origin& top_level_seller) {
    auto result = ComponentAuctionOtherSellerPtr(absl::in_place);
    result->set_top_level_seller(std::move(top_level_seller));
    return result;
  }
  // Construct an instance holding |component_seller|.
  static ComponentAuctionOtherSellerPtr
  NewComponentSeller(
      const ::url::Origin& component_seller) {
    auto result = ComponentAuctionOtherSellerPtr(absl::in_place);
    result->set_component_seller(std::move(component_seller));
    return result;
  }

  template <typename U>
  static ComponentAuctionOtherSellerPtr From(const U& u) {
    return mojo::TypeConverter<ComponentAuctionOtherSellerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ComponentAuctionOtherSeller>::Convert(*this);
  }

  ComponentAuctionOtherSeller();
  ~ComponentAuctionOtherSeller();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = ComponentAuctionOtherSellerPtr>
  ComponentAuctionOtherSellerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, ComponentAuctionOtherSeller>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, ComponentAuctionOtherSeller>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
  bool is_top_level_seller() const { return tag_ == Tag::kTopLevelSeller; }

  
  ::url::Origin& get_top_level_seller() const {
    CHECK(tag_ == Tag::kTopLevelSeller);
    return *(data_.top_level_seller);
  }

  
  void set_top_level_seller(
      const ::url::Origin& top_level_seller);
  
  bool is_component_seller() const { return tag_ == Tag::kComponentSeller; }

  
  ::url::Origin& get_component_seller() const {
    CHECK(tag_ == Tag::kComponentSeller);
    return *(data_.component_seller);
  }

  
  void set_component_seller(
      const ::url::Origin& component_seller);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ComponentAuctionOtherSeller::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<ComponentAuctionOtherSeller::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() = default;
    ~Union_() = default;
    ::url::Origin* top_level_seller;
    ::url::Origin* component_seller;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};



template <typename UnionPtrType>
ComponentAuctionOtherSellerPtr ComponentAuctionOtherSeller::Clone() const {
  switch (tag_) {
    case Tag::kTopLevelSeller:
      return NewTopLevelSeller(
          mojo::Clone(*data_.top_level_seller));
    case Tag::kComponentSeller:
      return NewComponentSeller(
          mojo::Clone(*data_.component_seller));
  }
  return nullptr;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, ComponentAuctionOtherSeller>::value>::type*>
bool ComponentAuctionOtherSeller::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::kTopLevelSeller:
      return mojo::Equals(*(data_.top_level_seller), *(other.data_.top_level_seller));
    case Tag::kComponentSeller:
      return mojo::Equals(*(data_.component_seller), *(other.data_.component_seller));
  }

  return false;
}
template <typename StructPtrType>
ComponentAuctionModifiedBidParamsPtr ComponentAuctionModifiedBidParams::Clone() const {
  return New(
      mojo::Clone(ad),
      mojo::Clone(bid),
      mojo::Clone(has_bid)
  );
}

template <typename T, ComponentAuctionModifiedBidParams::EnableIfSame<T>*>
bool ComponentAuctionModifiedBidParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->ad, other_struct.ad))
    return false;
  if (!mojo::Equals(this->bid, other_struct.bid))
    return false;
  if (!mojo::Equals(this->has_bid, other_struct.has_bid))
    return false;
  return true;
}

template <typename T, ComponentAuctionModifiedBidParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.ad < rhs.ad)
    return true;
  if (rhs.ad < lhs.ad)
    return false;
  if (lhs.bid < rhs.bid)
    return true;
  if (rhs.bid < lhs.bid)
    return false;
  if (lhs.has_bid < rhs.has_bid)
    return true;
  if (rhs.has_bid < lhs.has_bid)
    return false;
  return false;
}
template <typename StructPtrType>
ComponentAuctionReportResultParamsPtr ComponentAuctionReportResultParams::Clone() const {
  return New(
      mojo::Clone(top_level_seller_signals),
      mojo::Clone(modified_bid),
      mojo::Clone(has_modified_bid)
  );
}

template <typename T, ComponentAuctionReportResultParams::EnableIfSame<T>*>
bool ComponentAuctionReportResultParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->top_level_seller_signals, other_struct.top_level_seller_signals))
    return false;
  if (!mojo::Equals(this->modified_bid, other_struct.modified_bid))
    return false;
  if (!mojo::Equals(this->has_modified_bid, other_struct.has_modified_bid))
    return false;
  return true;
}

template <typename T, ComponentAuctionReportResultParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.top_level_seller_signals < rhs.top_level_seller_signals)
    return true;
  if (rhs.top_level_seller_signals < lhs.top_level_seller_signals)
    return false;
  if (lhs.modified_bid < rhs.modified_bid)
    return true;
  if (rhs.modified_bid < lhs.modified_bid)
    return false;
  if (lhs.has_modified_bid < rhs.has_modified_bid)
    return true;
  if (rhs.has_modified_bid < lhs.has_modified_bid)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace auction_worklet

namespace mojo {


template <>
struct CONTENT_EXPORT StructTraits<::auction_worklet::mojom::ComponentAuctionModifiedBidParams::DataView,
                                         ::auction_worklet::mojom::ComponentAuctionModifiedBidParamsPtr> {
  static bool IsNull(const ::auction_worklet::mojom::ComponentAuctionModifiedBidParamsPtr& input) { return !input; }
  static void SetToNull(::auction_worklet::mojom::ComponentAuctionModifiedBidParamsPtr* output) { output->reset(); }

  static const decltype(::auction_worklet::mojom::ComponentAuctionModifiedBidParams::ad)& ad(
      const ::auction_worklet::mojom::ComponentAuctionModifiedBidParamsPtr& input) {
    return input->ad;
  }

  static decltype(::auction_worklet::mojom::ComponentAuctionModifiedBidParams::bid) bid(
      const ::auction_worklet::mojom::ComponentAuctionModifiedBidParamsPtr& input) {
    return input->bid;
  }

  static decltype(::auction_worklet::mojom::ComponentAuctionModifiedBidParams::has_bid) has_bid(
      const ::auction_worklet::mojom::ComponentAuctionModifiedBidParamsPtr& input) {
    return input->has_bid;
  }

  static bool Read(::auction_worklet::mojom::ComponentAuctionModifiedBidParams::DataView input, ::auction_worklet::mojom::ComponentAuctionModifiedBidParamsPtr* output);
};


template <>
struct CONTENT_EXPORT StructTraits<::auction_worklet::mojom::ComponentAuctionReportResultParams::DataView,
                                         ::auction_worklet::mojom::ComponentAuctionReportResultParamsPtr> {
  static bool IsNull(const ::auction_worklet::mojom::ComponentAuctionReportResultParamsPtr& input) { return !input; }
  static void SetToNull(::auction_worklet::mojom::ComponentAuctionReportResultParamsPtr* output) { output->reset(); }

  static const decltype(::auction_worklet::mojom::ComponentAuctionReportResultParams::top_level_seller_signals)& top_level_seller_signals(
      const ::auction_worklet::mojom::ComponentAuctionReportResultParamsPtr& input) {
    return input->top_level_seller_signals;
  }

  static decltype(::auction_worklet::mojom::ComponentAuctionReportResultParams::modified_bid) modified_bid(
      const ::auction_worklet::mojom::ComponentAuctionReportResultParamsPtr& input) {
    return input->modified_bid;
  }

  static decltype(::auction_worklet::mojom::ComponentAuctionReportResultParams::has_modified_bid) has_modified_bid(
      const ::auction_worklet::mojom::ComponentAuctionReportResultParamsPtr& input) {
    return input->has_modified_bid;
  }

  static bool Read(::auction_worklet::mojom::ComponentAuctionReportResultParams::DataView input, ::auction_worklet::mojom::ComponentAuctionReportResultParamsPtr* output);
};


template <>
struct CONTENT_EXPORT UnionTraits<::auction_worklet::mojom::ComponentAuctionOtherSeller::DataView,
                                        ::auction_worklet::mojom::ComponentAuctionOtherSellerPtr> {
  static bool IsNull(const ::auction_worklet::mojom::ComponentAuctionOtherSellerPtr& input) { return !input; }
  static void SetToNull(::auction_worklet::mojom::ComponentAuctionOtherSellerPtr* output) { output->reset(); }

  static ::auction_worklet::mojom::ComponentAuctionOtherSeller::Tag GetTag(const ::auction_worklet::mojom::ComponentAuctionOtherSellerPtr& input) {
    return input->which();
  }

  static const ::url::Origin& top_level_seller(const ::auction_worklet::mojom::ComponentAuctionOtherSellerPtr& input) {
    return input->get_top_level_seller();
  }

  static const ::url::Origin& component_seller(const ::auction_worklet::mojom::ComponentAuctionOtherSellerPtr& input) {
    return input->get_component_seller();
  }

  static bool Read(::auction_worklet::mojom::ComponentAuctionOtherSeller::DataView input, ::auction_worklet::mojom::ComponentAuctionOtherSellerPtr* output);
};

}  // namespace mojo

#endif  // CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_SELLER_WORKLET_MOJOM_H_