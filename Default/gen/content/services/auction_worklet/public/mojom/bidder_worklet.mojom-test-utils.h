// content/services/auction_worklet/public/mojom/bidder_worklet.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_TEST_UTILS_H_
#define CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_TEST_UTILS_H_

#include "content/services/auction_worklet/public/mojom/bidder_worklet.mojom.h"
#include "content/common/content_export.h"


namespace auction_worklet {
namespace mojom {


class CONTENT_EXPORT BidderWorkletInterceptorForTesting : public BidderWorklet {
  virtual BidderWorklet* GetForwardingInterface() = 0;
  void GenerateBid(BidderWorkletNonSharedParamsPtr bidder_worklet_non_shared_params, const ::url::Origin& interest_group_join_origin, const absl::optional<std::string>& auction_signals_json, const absl::optional<std::string>& per_buyer_signals_json, absl::optional<::base::TimeDelta> per_buyer_timeout, const ::url::Origin& browser_signal_seller_origin, const absl::optional<::url::Origin>& browser_signal_top_level_seller_origin, BiddingBrowserSignalsPtr bidding_browser_signals, ::base::Time auction_start_time, uint64_t trace_id, GenerateBidCallback callback) override;
  void SendPendingSignalsRequests() override;
  void ReportWin(const std::string& interest_group_name, const absl::optional<std::string>& auction_signals_json, const absl::optional<std::string>& per_buyer_signals_json, const std::string& seller_signals_json, const ::GURL& browser_signal_render_url, double browser_signal_bid, double browser_signal_highest_scoring_other_bid, bool browser_signal_made_highest_scoring_other_bid, const ::url::Origin& browser_signal_seller_origin, const absl::optional<::url::Origin>& browser_signal_top_level_seller_origin, uint32_t bidding_signals_data_version, bool has_bidding_signals_data_version, uint64_t trace_id, ReportWinCallback callback) override;
  void ConnectDevToolsAgent(::mojo::PendingAssociatedReceiver<::blink::mojom::DevToolsAgent> agent) override;
};
class CONTENT_EXPORT BidderWorkletAsyncWaiter {
 public:
  explicit BidderWorkletAsyncWaiter(BidderWorklet* proxy);

  BidderWorkletAsyncWaiter(const BidderWorkletAsyncWaiter&) = delete;
  BidderWorkletAsyncWaiter& operator=(const BidderWorkletAsyncWaiter&) = delete;

  ~BidderWorkletAsyncWaiter();
  void GenerateBid(
      BidderWorkletNonSharedParamsPtr bidder_worklet_non_shared_params, const ::url::Origin& interest_group_join_origin, const absl::optional<std::string>& auction_signals_json, const absl::optional<std::string>& per_buyer_signals_json, absl::optional<::base::TimeDelta> per_buyer_timeout, const ::url::Origin& browser_signal_seller_origin, const absl::optional<::url::Origin>& browser_signal_top_level_seller_origin, BiddingBrowserSignalsPtr bidding_browser_signals, ::base::Time auction_start_time, uint64_t trace_id, BidderWorkletBidPtr* out_bid, uint32_t* out_bidding_signals_data_version, bool* out_has_bidding_signals_data_version, absl::optional<::GURL>* out_debug_loss_report_url, absl::optional<::GURL>* out_debug_win_report_url, double* out_set_priority, bool* out_has_set_priority, std::vector<::auction_worklet::mojom::PrivateAggregationRequestPtr>* out_pa_requests, std::vector<std::string>* out_errors);
  void ReportWin(
      const std::string& interest_group_name, const absl::optional<std::string>& auction_signals_json, const absl::optional<std::string>& per_buyer_signals_json, const std::string& seller_signals_json, const ::GURL& browser_signal_render_url, double browser_signal_bid, double browser_signal_highest_scoring_other_bid, bool browser_signal_made_highest_scoring_other_bid, const ::url::Origin& browser_signal_seller_origin, const absl::optional<::url::Origin>& browser_signal_top_level_seller_origin, uint32_t bidding_signals_data_version, bool has_bidding_signals_data_version, uint64_t trace_id, absl::optional<::GURL>* out_report_url, base::flat_map<std::string, ::GURL>* out_ad_beacon_map, std::vector<::auction_worklet::mojom::PrivateAggregationRequestPtr>* out_pa_requests, std::vector<std::string>* out_errors);

 private:
  BidderWorklet* const proxy_;
};




}  // namespace mojom
}  // namespace auction_worklet

#endif  // CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_TEST_UTILS_H_