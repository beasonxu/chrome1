// content/services/auction_worklet/public/mojom/bidder_worklet.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_PARAMS_DATA_H_
#define CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace auction_worklet {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) BidderWorklet_GenerateBid_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::BidderWorkletNonSharedParams_Data> bidder_worklet_non_shared_params;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> interest_group_join_origin;
  mojo::internal::Pointer<mojo::internal::String_Data> auction_signals_json;
  mojo::internal::Pointer<mojo::internal::String_Data> per_buyer_signals_json;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> per_buyer_timeout;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> browser_signal_seller_origin;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> browser_signal_top_level_seller_origin;
  mojo::internal::Pointer<internal::BiddingBrowserSignals_Data> bidding_browser_signals;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> auction_start_time;
  uint64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<BidderWorklet_GenerateBid_Params_Data>;

  BidderWorklet_GenerateBid_Params_Data();
  ~BidderWorklet_GenerateBid_Params_Data() = delete;
};
static_assert(sizeof(BidderWorklet_GenerateBid_Params_Data) == 88,
              "Bad sizeof(BidderWorklet_GenerateBid_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) BidderWorklet_GenerateBid_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::BidderWorkletBid_Data> bid;
  uint32_t bidding_signals_data_version;
  uint8_t has_bidding_signals_data_version : 1;
  uint8_t has_set_priority : 1;
  uint8_t pad3_[3];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> debug_loss_report_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> debug_win_report_url;
  double set_priority;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::auction_worklet::mojom::internal::PrivateAggregationRequest_Data>>> pa_requests;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> errors;

 private:
  friend class mojo::internal::MessageFragment<BidderWorklet_GenerateBid_ResponseParams_Data>;

  BidderWorklet_GenerateBid_ResponseParams_Data();
  ~BidderWorklet_GenerateBid_ResponseParams_Data() = delete;
};
static_assert(sizeof(BidderWorklet_GenerateBid_ResponseParams_Data) == 64,
              "Bad sizeof(BidderWorklet_GenerateBid_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) BidderWorklet_SendPendingSignalsRequests_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BidderWorklet_SendPendingSignalsRequests_Params_Data>;

  BidderWorklet_SendPendingSignalsRequests_Params_Data();
  ~BidderWorklet_SendPendingSignalsRequests_Params_Data() = delete;
};
static_assert(sizeof(BidderWorklet_SendPendingSignalsRequests_Params_Data) == 8,
              "Bad sizeof(BidderWorklet_SendPendingSignalsRequests_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) BidderWorklet_ReportWin_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> interest_group_name;
  mojo::internal::Pointer<mojo::internal::String_Data> auction_signals_json;
  mojo::internal::Pointer<mojo::internal::String_Data> per_buyer_signals_json;
  mojo::internal::Pointer<mojo::internal::String_Data> seller_signals_json;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> browser_signal_render_url;
  double browser_signal_bid;
  double browser_signal_highest_scoring_other_bid;
  uint8_t browser_signal_made_highest_scoring_other_bid : 1;
  uint8_t has_bidding_signals_data_version : 1;
  uint8_t pad8_[3];
  uint32_t bidding_signals_data_version;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> browser_signal_seller_origin;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> browser_signal_top_level_seller_origin;
  uint64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<BidderWorklet_ReportWin_Params_Data>;

  BidderWorklet_ReportWin_Params_Data();
  ~BidderWorklet_ReportWin_Params_Data() = delete;
};
static_assert(sizeof(BidderWorklet_ReportWin_Params_Data) == 96,
              "Bad sizeof(BidderWorklet_ReportWin_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) BidderWorklet_ReportWin_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> report_url;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, mojo::internal::Pointer<::url::mojom::internal::Url_Data>>> ad_beacon_map;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::auction_worklet::mojom::internal::PrivateAggregationRequest_Data>>> pa_requests;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> errors;

 private:
  friend class mojo::internal::MessageFragment<BidderWorklet_ReportWin_ResponseParams_Data>;

  BidderWorklet_ReportWin_ResponseParams_Data();
  ~BidderWorklet_ReportWin_ResponseParams_Data() = delete;
};
static_assert(sizeof(BidderWorklet_ReportWin_ResponseParams_Data) == 40,
              "Bad sizeof(BidderWorklet_ReportWin_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) BidderWorklet_ConnectDevToolsAgent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedEndpointHandle_Data agent;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<BidderWorklet_ConnectDevToolsAgent_Params_Data>;

  BidderWorklet_ConnectDevToolsAgent_Params_Data();
  ~BidderWorklet_ConnectDevToolsAgent_Params_Data() = delete;
};
static_assert(sizeof(BidderWorklet_ConnectDevToolsAgent_Params_Data) == 16,
              "Bad sizeof(BidderWorklet_ConnectDevToolsAgent_Params_Data)");

}  // namespace internal


class BidderWorklet_GenerateBid_ParamsDataView {
 public:
  BidderWorklet_GenerateBid_ParamsDataView() = default;

  BidderWorklet_GenerateBid_ParamsDataView(
      internal::BidderWorklet_GenerateBid_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBidderWorkletNonSharedParamsDataView(
      BidderWorkletNonSharedParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBidderWorkletNonSharedParams(UserType* output) {
    
    auto* pointer = data_->bidder_worklet_non_shared_params.Get();
    return mojo::internal::Deserialize<::auction_worklet::mojom::BidderWorkletNonSharedParamsDataView>(
        pointer, output, message_);
  }
  inline void GetInterestGroupJoinOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInterestGroupJoinOrigin(UserType* output) {
    
    auto* pointer = data_->interest_group_join_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetAuctionSignalsJsonDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAuctionSignalsJson(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `auction_signals_json` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadAuctionSignalsJson` instead "
    "of `ReadAuctionSignalsJson if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->auction_signals_json.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPerBuyerSignalsJsonDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPerBuyerSignalsJson(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `per_buyer_signals_json` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPerBuyerSignalsJson` instead "
    "of `ReadPerBuyerSignalsJson if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->per_buyer_signals_json.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPerBuyerTimeoutDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPerBuyerTimeout(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::TimeDeltaDataView, UserType>(),
    "Attempting to read the optional `per_buyer_timeout` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPerBuyerTimeout` instead "
    "of `ReadPerBuyerTimeout if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->per_buyer_timeout.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
  inline void GetBrowserSignalSellerOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBrowserSignalSellerOrigin(UserType* output) {
    
    auto* pointer = data_->browser_signal_seller_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetBrowserSignalTopLevelSellerOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBrowserSignalTopLevelSellerOrigin(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::OriginDataView, UserType>(),
    "Attempting to read the optional `browser_signal_top_level_seller_origin` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadBrowserSignalTopLevelSellerOrigin` instead "
    "of `ReadBrowserSignalTopLevelSellerOrigin if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->browser_signal_top_level_seller_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetBiddingBrowserSignalsDataView(
      BiddingBrowserSignalsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBiddingBrowserSignals(UserType* output) {
    
    auto* pointer = data_->bidding_browser_signals.Get();
    return mojo::internal::Deserialize<::auction_worklet::mojom::BiddingBrowserSignalsDataView>(
        pointer, output, message_);
  }
  inline void GetAuctionStartTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAuctionStartTime(UserType* output) {
    
    auto* pointer = data_->auction_start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  uint64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::BidderWorklet_GenerateBid_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BidderWorklet_GenerateBid_ResponseParamsDataView {
 public:
  BidderWorklet_GenerateBid_ResponseParamsDataView() = default;

  BidderWorklet_GenerateBid_ResponseParamsDataView(
      internal::BidderWorklet_GenerateBid_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBidDataView(
      BidderWorkletBidDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBid(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::auction_worklet::mojom::BidderWorkletBidDataView, UserType>(),
    "Attempting to read the optional `bid` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadBid` instead "
    "of `ReadBid if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->bid.Get();
    return mojo::internal::Deserialize<::auction_worklet::mojom::BidderWorkletBidDataView>(
        pointer, output, message_);
  }
  uint32_t bidding_signals_data_version() const {
    return data_->bidding_signals_data_version;
  }
  bool has_bidding_signals_data_version() const {
    return data_->has_bidding_signals_data_version;
  }
  inline void GetDebugLossReportUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDebugLossReportUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::UrlDataView, UserType>(),
    "Attempting to read the optional `debug_loss_report_url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadDebugLossReportUrl` instead "
    "of `ReadDebugLossReportUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->debug_loss_report_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetDebugWinReportUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDebugWinReportUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::UrlDataView, UserType>(),
    "Attempting to read the optional `debug_win_report_url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadDebugWinReportUrl` instead "
    "of `ReadDebugWinReportUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->debug_win_report_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  double set_priority() const {
    return data_->set_priority;
  }
  bool has_set_priority() const {
    return data_->has_set_priority;
  }
  inline void GetPaRequestsDataView(
      mojo::ArrayDataView<::auction_worklet::mojom::PrivateAggregationRequestDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPaRequests(UserType* output) {
    
    auto* pointer = data_->pa_requests.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::auction_worklet::mojom::PrivateAggregationRequestDataView>>(
        pointer, output, message_);
  }
  inline void GetErrorsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrors(UserType* output) {
    
    auto* pointer = data_->errors.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::BidderWorklet_GenerateBid_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BidderWorklet_SendPendingSignalsRequests_ParamsDataView {
 public:
  BidderWorklet_SendPendingSignalsRequests_ParamsDataView() = default;

  BidderWorklet_SendPendingSignalsRequests_ParamsDataView(
      internal::BidderWorklet_SendPendingSignalsRequests_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BidderWorklet_SendPendingSignalsRequests_Params_Data* data_ = nullptr;
};



class BidderWorklet_ReportWin_ParamsDataView {
 public:
  BidderWorklet_ReportWin_ParamsDataView() = default;

  BidderWorklet_ReportWin_ParamsDataView(
      internal::BidderWorklet_ReportWin_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInterestGroupNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInterestGroupName(UserType* output) {
    
    auto* pointer = data_->interest_group_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetAuctionSignalsJsonDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAuctionSignalsJson(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `auction_signals_json` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadAuctionSignalsJson` instead "
    "of `ReadAuctionSignalsJson if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->auction_signals_json.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPerBuyerSignalsJsonDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPerBuyerSignalsJson(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `per_buyer_signals_json` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPerBuyerSignalsJson` instead "
    "of `ReadPerBuyerSignalsJson if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->per_buyer_signals_json.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSellerSignalsJsonDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSellerSignalsJson(UserType* output) {
    
    auto* pointer = data_->seller_signals_json.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetBrowserSignalRenderUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBrowserSignalRenderUrl(UserType* output) {
    
    auto* pointer = data_->browser_signal_render_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  double browser_signal_bid() const {
    return data_->browser_signal_bid;
  }
  double browser_signal_highest_scoring_other_bid() const {
    return data_->browser_signal_highest_scoring_other_bid;
  }
  bool browser_signal_made_highest_scoring_other_bid() const {
    return data_->browser_signal_made_highest_scoring_other_bid;
  }
  inline void GetBrowserSignalSellerOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBrowserSignalSellerOrigin(UserType* output) {
    
    auto* pointer = data_->browser_signal_seller_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetBrowserSignalTopLevelSellerOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBrowserSignalTopLevelSellerOrigin(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::OriginDataView, UserType>(),
    "Attempting to read the optional `browser_signal_top_level_seller_origin` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadBrowserSignalTopLevelSellerOrigin` instead "
    "of `ReadBrowserSignalTopLevelSellerOrigin if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->browser_signal_top_level_seller_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  uint32_t bidding_signals_data_version() const {
    return data_->bidding_signals_data_version;
  }
  bool has_bidding_signals_data_version() const {
    return data_->has_bidding_signals_data_version;
  }
  uint64_t trace_id() const {
    return data_->trace_id;
  }
 private:
  internal::BidderWorklet_ReportWin_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BidderWorklet_ReportWin_ResponseParamsDataView {
 public:
  BidderWorklet_ReportWin_ResponseParamsDataView() = default;

  BidderWorklet_ReportWin_ResponseParamsDataView(
      internal::BidderWorklet_ReportWin_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReportUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReportUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::UrlDataView, UserType>(),
    "Attempting to read the optional `report_url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadReportUrl` instead "
    "of `ReadReportUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->report_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetAdBeaconMapDataView(
      mojo::MapDataView<mojo::StringDataView, ::url::mojom::UrlDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAdBeaconMap(UserType* output) {
    
    auto* pointer = data_->ad_beacon_map.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, ::url::mojom::UrlDataView>>(
        pointer, output, message_);
  }
  inline void GetPaRequestsDataView(
      mojo::ArrayDataView<::auction_worklet::mojom::PrivateAggregationRequestDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPaRequests(UserType* output) {
    
    auto* pointer = data_->pa_requests.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::auction_worklet::mojom::PrivateAggregationRequestDataView>>(
        pointer, output, message_);
  }
  inline void GetErrorsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrors(UserType* output) {
    
    auto* pointer = data_->errors.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::BidderWorklet_ReportWin_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BidderWorklet_ConnectDevToolsAgent_ParamsDataView {
 public:
  BidderWorklet_ConnectDevToolsAgent_ParamsDataView() = default;

  BidderWorklet_ConnectDevToolsAgent_ParamsDataView(
      internal::BidderWorklet_ConnectDevToolsAgent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeAgent() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::DevToolsAgentAssociatedRequestDataView>(
            &data_->agent, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::BidderWorklet_ConnectDevToolsAgent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void BidderWorklet_GenerateBid_ParamsDataView::GetBidderWorkletNonSharedParamsDataView(
    BidderWorkletNonSharedParamsDataView* output) {
  auto pointer = data_->bidder_worklet_non_shared_params.Get();
  *output = BidderWorkletNonSharedParamsDataView(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ParamsDataView::GetInterestGroupJoinOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->interest_group_join_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ParamsDataView::GetAuctionSignalsJsonDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->auction_signals_json.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ParamsDataView::GetPerBuyerSignalsJsonDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->per_buyer_signals_json.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ParamsDataView::GetPerBuyerTimeoutDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->per_buyer_timeout.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ParamsDataView::GetBrowserSignalSellerOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->browser_signal_seller_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ParamsDataView::GetBrowserSignalTopLevelSellerOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->browser_signal_top_level_seller_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ParamsDataView::GetBiddingBrowserSignalsDataView(
    BiddingBrowserSignalsDataView* output) {
  auto pointer = data_->bidding_browser_signals.Get();
  *output = BiddingBrowserSignalsDataView(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ParamsDataView::GetAuctionStartTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->auction_start_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}


inline void BidderWorklet_GenerateBid_ResponseParamsDataView::GetBidDataView(
    BidderWorkletBidDataView* output) {
  auto pointer = data_->bid.Get();
  *output = BidderWorkletBidDataView(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ResponseParamsDataView::GetDebugLossReportUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->debug_loss_report_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ResponseParamsDataView::GetDebugWinReportUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->debug_win_report_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ResponseParamsDataView::GetPaRequestsDataView(
    mojo::ArrayDataView<::auction_worklet::mojom::PrivateAggregationRequestDataView>* output) {
  auto pointer = data_->pa_requests.Get();
  *output = mojo::ArrayDataView<::auction_worklet::mojom::PrivateAggregationRequestDataView>(pointer, message_);
}
inline void BidderWorklet_GenerateBid_ResponseParamsDataView::GetErrorsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->errors.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}




inline void BidderWorklet_ReportWin_ParamsDataView::GetInterestGroupNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->interest_group_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void BidderWorklet_ReportWin_ParamsDataView::GetAuctionSignalsJsonDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->auction_signals_json.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void BidderWorklet_ReportWin_ParamsDataView::GetPerBuyerSignalsJsonDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->per_buyer_signals_json.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void BidderWorklet_ReportWin_ParamsDataView::GetSellerSignalsJsonDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->seller_signals_json.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void BidderWorklet_ReportWin_ParamsDataView::GetBrowserSignalRenderUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->browser_signal_render_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void BidderWorklet_ReportWin_ParamsDataView::GetBrowserSignalSellerOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->browser_signal_seller_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void BidderWorklet_ReportWin_ParamsDataView::GetBrowserSignalTopLevelSellerOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->browser_signal_top_level_seller_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}


inline void BidderWorklet_ReportWin_ResponseParamsDataView::GetReportUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->report_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void BidderWorklet_ReportWin_ResponseParamsDataView::GetAdBeaconMapDataView(
    mojo::MapDataView<mojo::StringDataView, ::url::mojom::UrlDataView>* output) {
  auto pointer = data_->ad_beacon_map.Get();
  *output = mojo::MapDataView<mojo::StringDataView, ::url::mojom::UrlDataView>(pointer, message_);
}
inline void BidderWorklet_ReportWin_ResponseParamsDataView::GetPaRequestsDataView(
    mojo::ArrayDataView<::auction_worklet::mojom::PrivateAggregationRequestDataView>* output) {
  auto pointer = data_->pa_requests.Get();
  *output = mojo::ArrayDataView<::auction_worklet::mojom::PrivateAggregationRequestDataView>(pointer, message_);
}
inline void BidderWorklet_ReportWin_ResponseParamsDataView::GetErrorsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->errors.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace auction_worklet

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_PARAMS_DATA_H_