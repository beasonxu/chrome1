// content/services/auction_worklet/public/mojom/bidder_worklet.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_SHARED_INTERNAL_H_
#define CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "content/services/auction_worklet/public/mojom/private_aggregation_request.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "services/network/public/mojom/url_loader_factory.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/devtools/devtools_agent.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace auction_worklet {
namespace mojom {
namespace internal {
class PreviousWin_Data;
class BidderWorkletNonSharedParams_Data;
class BiddingBrowserSignals_Data;
class BidderWorkletBid_Data;

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) PreviousWin_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> time;
  mojo::internal::Pointer<mojo::internal::String_Data> ad_json;

 private:
  friend class mojo::internal::MessageFragment<PreviousWin_Data>;

  PreviousWin_Data();
  ~PreviousWin_Data() = delete;
};
static_assert(sizeof(PreviousWin_Data) == 24,
              "Bad sizeof(PreviousWin_Data)");
// Used by PreviousWin::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PreviousWin_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PreviousWin_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PreviousWin_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PreviousWin_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PreviousWin_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) BidderWorkletNonSharedParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  int32_t execution_mode;
  uint8_t pad1_[4];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> daily_update_url;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> trusted_bidding_signals_keys;
  mojo::internal::Pointer<mojo::internal::String_Data> user_bidding_signals;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::blink::mojom::internal::InterestGroupAd_Data>>> ads;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::blink::mojom::internal::InterestGroupAd_Data>>> ad_components;

 private:
  friend class mojo::internal::MessageFragment<BidderWorkletNonSharedParams_Data>;

  BidderWorkletNonSharedParams_Data();
  ~BidderWorkletNonSharedParams_Data() = delete;
};
static_assert(sizeof(BidderWorkletNonSharedParams_Data) == 64,
              "Bad sizeof(BidderWorkletNonSharedParams_Data)");
// Used by BidderWorkletNonSharedParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BidderWorkletNonSharedParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BidderWorkletNonSharedParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BidderWorkletNonSharedParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<BidderWorkletNonSharedParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BidderWorkletNonSharedParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) BiddingBrowserSignals_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t join_count;
  int32_t bid_count;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::PreviousWin_Data>>> prev_wins;

 private:
  friend class mojo::internal::MessageFragment<BiddingBrowserSignals_Data>;

  BiddingBrowserSignals_Data();
  ~BiddingBrowserSignals_Data() = delete;
};
static_assert(sizeof(BiddingBrowserSignals_Data) == 24,
              "Bad sizeof(BiddingBrowserSignals_Data)");
// Used by BiddingBrowserSignals::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BiddingBrowserSignals_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BiddingBrowserSignals_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BiddingBrowserSignals_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<BiddingBrowserSignals_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BiddingBrowserSignals_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) BidderWorkletBid_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> ad;
  double bid;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> render_url;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::url::mojom::internal::Url_Data>>> ad_components;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> bid_duration;

 private:
  friend class mojo::internal::MessageFragment<BidderWorkletBid_Data>;

  BidderWorkletBid_Data();
  ~BidderWorkletBid_Data() = delete;
};
static_assert(sizeof(BidderWorkletBid_Data) == 48,
              "Bad sizeof(BidderWorkletBid_Data)");
// Used by BidderWorkletBid::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BidderWorkletBid_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BidderWorkletBid_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BidderWorkletBid_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<BidderWorkletBid_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BidderWorkletBid_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace auction_worklet

#endif  // CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_SHARED_INTERNAL_H_