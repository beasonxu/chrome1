// content/services/auction_worklet/public/mojom/bidder_worklet.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_H_
#define CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/services/auction_worklet/public/mojom/bidder_worklet.mojom-shared.h"
#include "content/services/auction_worklet/public/mojom/bidder_worklet.mojom-forward.h"
#include "content/services/auction_worklet/public/mojom/private_aggregation_request.mojom-forward.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "services/network/public/mojom/url_loader_factory.mojom-forward.h"
#include "third_party/blink/public/mojom/devtools/devtools_agent.mojom-forward.h"
#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom.h"
#include "url/mojom/origin.mojom.h"
#include "url/mojom/url.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "content/common/content_export.h"




namespace auction_worklet {
namespace mojom {

class BidderWorkletProxy;

template <typename ImplRefTraits>
class BidderWorkletStub;

class BidderWorkletRequestValidator;
class BidderWorkletResponseValidator;


class CONTENT_EXPORT BidderWorklet
    : public BidderWorkletInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = BidderWorkletInterfaceBase;
  using Proxy_ = BidderWorkletProxy;

  template <typename ImplRefTraits>
  using Stub_ = BidderWorkletStub<ImplRefTraits>;

  using RequestValidator_ = BidderWorkletRequestValidator;
  using ResponseValidator_ = BidderWorkletResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGenerateBidMinVersion = 0,
    kSendPendingSignalsRequestsMinVersion = 0,
    kReportWinMinVersion = 0,
    kConnectDevToolsAgentMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GenerateBid_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SendPendingSignalsRequests_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ReportWin_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ConnectDevToolsAgent_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~BidderWorklet() = default;


  using GenerateBidCallback = base::OnceCallback<void(BidderWorkletBidPtr, uint32_t, bool, const absl::optional<::GURL>&, const absl::optional<::GURL>&, double, bool, std::vector<::auction_worklet::mojom::PrivateAggregationRequestPtr>, const std::vector<std::string>&)>;
  
  virtual void GenerateBid(BidderWorkletNonSharedParamsPtr bidder_worklet_non_shared_params, const ::url::Origin& interest_group_join_origin, const absl::optional<std::string>& auction_signals_json, const absl::optional<std::string>& per_buyer_signals_json, absl::optional<::base::TimeDelta> per_buyer_timeout, const ::url::Origin& browser_signal_seller_origin, const absl::optional<::url::Origin>& browser_signal_top_level_seller_origin, BiddingBrowserSignalsPtr bidding_browser_signals, ::base::Time auction_start_time, uint64_t trace_id, GenerateBidCallback callback) = 0;

  
  virtual void SendPendingSignalsRequests() = 0;


  using ReportWinCallback = base::OnceCallback<void(const absl::optional<::GURL>&, const base::flat_map<std::string, ::GURL>&, std::vector<::auction_worklet::mojom::PrivateAggregationRequestPtr>, const std::vector<std::string>&)>;
  
  virtual void ReportWin(const std::string& interest_group_name, const absl::optional<std::string>& auction_signals_json, const absl::optional<std::string>& per_buyer_signals_json, const std::string& seller_signals_json, const ::GURL& browser_signal_render_url, double browser_signal_bid, double browser_signal_highest_scoring_other_bid, bool browser_signal_made_highest_scoring_other_bid, const ::url::Origin& browser_signal_seller_origin, const absl::optional<::url::Origin>& browser_signal_top_level_seller_origin, uint32_t bidding_signals_data_version, bool has_bidding_signals_data_version, uint64_t trace_id, ReportWinCallback callback) = 0;

  
  virtual void ConnectDevToolsAgent(::mojo::PendingAssociatedReceiver<::blink::mojom::DevToolsAgent> agent) = 0;
};



class CONTENT_EXPORT BidderWorkletProxy
    : public BidderWorklet {
 public:
  using InterfaceType = BidderWorklet;

  explicit BidderWorkletProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GenerateBid(BidderWorkletNonSharedParamsPtr bidder_worklet_non_shared_params, const ::url::Origin& interest_group_join_origin, const absl::optional<std::string>& auction_signals_json, const absl::optional<std::string>& per_buyer_signals_json, absl::optional<::base::TimeDelta> per_buyer_timeout, const ::url::Origin& browser_signal_seller_origin, const absl::optional<::url::Origin>& browser_signal_top_level_seller_origin, BiddingBrowserSignalsPtr bidding_browser_signals, ::base::Time auction_start_time, uint64_t trace_id, GenerateBidCallback callback) final;
  
  void SendPendingSignalsRequests() final;
  
  void ReportWin(const std::string& interest_group_name, const absl::optional<std::string>& auction_signals_json, const absl::optional<std::string>& per_buyer_signals_json, const std::string& seller_signals_json, const ::GURL& browser_signal_render_url, double browser_signal_bid, double browser_signal_highest_scoring_other_bid, bool browser_signal_made_highest_scoring_other_bid, const ::url::Origin& browser_signal_seller_origin, const absl::optional<::url::Origin>& browser_signal_top_level_seller_origin, uint32_t bidding_signals_data_version, bool has_bidding_signals_data_version, uint64_t trace_id, ReportWinCallback callback) final;
  
  void ConnectDevToolsAgent(::mojo::PendingAssociatedReceiver<::blink::mojom::DevToolsAgent> agent) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class CONTENT_EXPORT BidderWorkletStubDispatch {
 public:
  static bool Accept(BidderWorklet* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      BidderWorklet* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<BidderWorklet>>
class BidderWorkletStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  BidderWorkletStub() = default;
  ~BidderWorkletStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return BidderWorkletStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return BidderWorkletStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class CONTENT_EXPORT BidderWorkletRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class CONTENT_EXPORT BidderWorkletResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};











class CONTENT_EXPORT PreviousWin {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PreviousWin, T>::value>;
  using DataView = PreviousWinDataView;
  using Data_ = internal::PreviousWin_Data;

  template <typename... Args>
  static PreviousWinPtr New(Args&&... args) {
    return PreviousWinPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PreviousWinPtr From(const U& u) {
    return mojo::TypeConverter<PreviousWinPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PreviousWin>::Convert(*this);
  }


  PreviousWin();

  PreviousWin(
      ::base::Time time,
      const std::string& ad_json);


  ~PreviousWin();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PreviousWinPtr>
  PreviousWinPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PreviousWin::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PreviousWin::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PreviousWin::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PreviousWin::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PreviousWin_UnserializedMessageContext<
            UserType, PreviousWin::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PreviousWin::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return PreviousWin::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PreviousWin_UnserializedMessageContext<
            UserType, PreviousWin::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PreviousWin::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::base::Time time;
  
  std::string ad_json;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PreviousWin::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PreviousWin::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PreviousWin::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PreviousWin::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class CONTENT_EXPORT BidderWorkletNonSharedParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<BidderWorkletNonSharedParams, T>::value>;
  using DataView = BidderWorkletNonSharedParamsDataView;
  using Data_ = internal::BidderWorkletNonSharedParams_Data;

  template <typename... Args>
  static BidderWorkletNonSharedParamsPtr New(Args&&... args) {
    return BidderWorkletNonSharedParamsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static BidderWorkletNonSharedParamsPtr From(const U& u) {
    return mojo::TypeConverter<BidderWorkletNonSharedParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, BidderWorkletNonSharedParams>::Convert(*this);
  }


  BidderWorkletNonSharedParams();

  BidderWorkletNonSharedParams(
      const std::string& name,
      ::blink::mojom::InterestGroup::ExecutionMode execution_mode,
      const absl::optional<::GURL>& daily_update_url,
      absl::optional<std::vector<std::string>> trusted_bidding_signals_keys,
      const absl::optional<std::string>& user_bidding_signals,
      absl::optional<std::vector<::blink::InterestGroup::Ad>> ads,
      absl::optional<std::vector<::blink::InterestGroup::Ad>> ad_components);


  ~BidderWorkletNonSharedParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = BidderWorkletNonSharedParamsPtr>
  BidderWorkletNonSharedParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, BidderWorkletNonSharedParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, BidderWorkletNonSharedParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        BidderWorkletNonSharedParams::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        BidderWorkletNonSharedParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::BidderWorkletNonSharedParams_UnserializedMessageContext<
            UserType, BidderWorkletNonSharedParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<BidderWorkletNonSharedParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return BidderWorkletNonSharedParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::BidderWorkletNonSharedParams_UnserializedMessageContext<
            UserType, BidderWorkletNonSharedParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<BidderWorkletNonSharedParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string name;
  
  ::blink::mojom::InterestGroup::ExecutionMode execution_mode;
  
  absl::optional<::GURL> daily_update_url;
  
  absl::optional<std::vector<std::string>> trusted_bidding_signals_keys;
  
  absl::optional<std::string> user_bidding_signals;
  
  absl::optional<std::vector<::blink::InterestGroup::Ad>> ads;
  
  absl::optional<std::vector<::blink::InterestGroup::Ad>> ad_components;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, BidderWorkletNonSharedParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, BidderWorkletNonSharedParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, BidderWorkletNonSharedParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, BidderWorkletNonSharedParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class CONTENT_EXPORT BiddingBrowserSignals {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<BiddingBrowserSignals, T>::value>;
  using DataView = BiddingBrowserSignalsDataView;
  using Data_ = internal::BiddingBrowserSignals_Data;

  template <typename... Args>
  static BiddingBrowserSignalsPtr New(Args&&... args) {
    return BiddingBrowserSignalsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static BiddingBrowserSignalsPtr From(const U& u) {
    return mojo::TypeConverter<BiddingBrowserSignalsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, BiddingBrowserSignals>::Convert(*this);
  }


  BiddingBrowserSignals();

  BiddingBrowserSignals(
      int32_t join_count,
      int32_t bid_count,
      std::vector<PreviousWinPtr> prev_wins);

BiddingBrowserSignals(const BiddingBrowserSignals&) = delete;
BiddingBrowserSignals& operator=(const BiddingBrowserSignals&) = delete;

  ~BiddingBrowserSignals();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = BiddingBrowserSignalsPtr>
  BiddingBrowserSignalsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, BiddingBrowserSignals::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, BiddingBrowserSignals::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        BiddingBrowserSignals::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        BiddingBrowserSignals::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::BiddingBrowserSignals_UnserializedMessageContext<
            UserType, BiddingBrowserSignals::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<BiddingBrowserSignals::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return BiddingBrowserSignals::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::BiddingBrowserSignals_UnserializedMessageContext<
            UserType, BiddingBrowserSignals::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<BiddingBrowserSignals::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t join_count;
  
  int32_t bid_count;
  
  std::vector<PreviousWinPtr> prev_wins;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, BiddingBrowserSignals::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, BiddingBrowserSignals::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, BiddingBrowserSignals::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, BiddingBrowserSignals::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class CONTENT_EXPORT BidderWorkletBid {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<BidderWorkletBid, T>::value>;
  using DataView = BidderWorkletBidDataView;
  using Data_ = internal::BidderWorkletBid_Data;

  template <typename... Args>
  static BidderWorkletBidPtr New(Args&&... args) {
    return BidderWorkletBidPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static BidderWorkletBidPtr From(const U& u) {
    return mojo::TypeConverter<BidderWorkletBidPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, BidderWorkletBid>::Convert(*this);
  }


  BidderWorkletBid();

  BidderWorkletBid(
      const std::string& ad,
      double bid,
      const ::GURL& render_url,
      absl::optional<std::vector<::GURL>> ad_components,
      ::base::TimeDelta bid_duration);


  ~BidderWorkletBid();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = BidderWorkletBidPtr>
  BidderWorkletBidPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, BidderWorkletBid::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, BidderWorkletBid::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        BidderWorkletBid::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        BidderWorkletBid::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::BidderWorkletBid_UnserializedMessageContext<
            UserType, BidderWorkletBid::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<BidderWorkletBid::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return BidderWorkletBid::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::BidderWorkletBid_UnserializedMessageContext<
            UserType, BidderWorkletBid::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<BidderWorkletBid::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string ad;
  
  double bid;
  
  ::GURL render_url;
  
  absl::optional<std::vector<::GURL>> ad_components;
  
  ::base::TimeDelta bid_duration;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, BidderWorkletBid::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, BidderWorkletBid::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, BidderWorkletBid::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, BidderWorkletBid::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
PreviousWinPtr PreviousWin::Clone() const {
  return New(
      mojo::Clone(time),
      mojo::Clone(ad_json)
  );
}

template <typename T, PreviousWin::EnableIfSame<T>*>
bool PreviousWin::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->time, other_struct.time))
    return false;
  if (!mojo::Equals(this->ad_json, other_struct.ad_json))
    return false;
  return true;
}

template <typename T, PreviousWin::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.time < rhs.time)
    return true;
  if (rhs.time < lhs.time)
    return false;
  if (lhs.ad_json < rhs.ad_json)
    return true;
  if (rhs.ad_json < lhs.ad_json)
    return false;
  return false;
}
template <typename StructPtrType>
BidderWorkletNonSharedParamsPtr BidderWorkletNonSharedParams::Clone() const {
  return New(
      mojo::Clone(name),
      mojo::Clone(execution_mode),
      mojo::Clone(daily_update_url),
      mojo::Clone(trusted_bidding_signals_keys),
      mojo::Clone(user_bidding_signals),
      mojo::Clone(ads),
      mojo::Clone(ad_components)
  );
}

template <typename T, BidderWorkletNonSharedParams::EnableIfSame<T>*>
bool BidderWorkletNonSharedParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->name, other_struct.name))
    return false;
  if (!mojo::Equals(this->execution_mode, other_struct.execution_mode))
    return false;
  if (!mojo::Equals(this->daily_update_url, other_struct.daily_update_url))
    return false;
  if (!mojo::Equals(this->trusted_bidding_signals_keys, other_struct.trusted_bidding_signals_keys))
    return false;
  if (!mojo::Equals(this->user_bidding_signals, other_struct.user_bidding_signals))
    return false;
  if (!mojo::Equals(this->ads, other_struct.ads))
    return false;
  if (!mojo::Equals(this->ad_components, other_struct.ad_components))
    return false;
  return true;
}

template <typename T, BidderWorkletNonSharedParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.name < rhs.name)
    return true;
  if (rhs.name < lhs.name)
    return false;
  if (lhs.execution_mode < rhs.execution_mode)
    return true;
  if (rhs.execution_mode < lhs.execution_mode)
    return false;
  if (lhs.daily_update_url < rhs.daily_update_url)
    return true;
  if (rhs.daily_update_url < lhs.daily_update_url)
    return false;
  if (lhs.trusted_bidding_signals_keys < rhs.trusted_bidding_signals_keys)
    return true;
  if (rhs.trusted_bidding_signals_keys < lhs.trusted_bidding_signals_keys)
    return false;
  if (lhs.user_bidding_signals < rhs.user_bidding_signals)
    return true;
  if (rhs.user_bidding_signals < lhs.user_bidding_signals)
    return false;
  if (lhs.ads < rhs.ads)
    return true;
  if (rhs.ads < lhs.ads)
    return false;
  if (lhs.ad_components < rhs.ad_components)
    return true;
  if (rhs.ad_components < lhs.ad_components)
    return false;
  return false;
}
template <typename StructPtrType>
BiddingBrowserSignalsPtr BiddingBrowserSignals::Clone() const {
  return New(
      mojo::Clone(join_count),
      mojo::Clone(bid_count),
      mojo::Clone(prev_wins)
  );
}

template <typename T, BiddingBrowserSignals::EnableIfSame<T>*>
bool BiddingBrowserSignals::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->join_count, other_struct.join_count))
    return false;
  if (!mojo::Equals(this->bid_count, other_struct.bid_count))
    return false;
  if (!mojo::Equals(this->prev_wins, other_struct.prev_wins))
    return false;
  return true;
}

template <typename T, BiddingBrowserSignals::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.join_count < rhs.join_count)
    return true;
  if (rhs.join_count < lhs.join_count)
    return false;
  if (lhs.bid_count < rhs.bid_count)
    return true;
  if (rhs.bid_count < lhs.bid_count)
    return false;
  if (lhs.prev_wins < rhs.prev_wins)
    return true;
  if (rhs.prev_wins < lhs.prev_wins)
    return false;
  return false;
}
template <typename StructPtrType>
BidderWorkletBidPtr BidderWorkletBid::Clone() const {
  return New(
      mojo::Clone(ad),
      mojo::Clone(bid),
      mojo::Clone(render_url),
      mojo::Clone(ad_components),
      mojo::Clone(bid_duration)
  );
}

template <typename T, BidderWorkletBid::EnableIfSame<T>*>
bool BidderWorkletBid::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->ad, other_struct.ad))
    return false;
  if (!mojo::Equals(this->bid, other_struct.bid))
    return false;
  if (!mojo::Equals(this->render_url, other_struct.render_url))
    return false;
  if (!mojo::Equals(this->ad_components, other_struct.ad_components))
    return false;
  if (!mojo::Equals(this->bid_duration, other_struct.bid_duration))
    return false;
  return true;
}

template <typename T, BidderWorkletBid::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.ad < rhs.ad)
    return true;
  if (rhs.ad < lhs.ad)
    return false;
  if (lhs.bid < rhs.bid)
    return true;
  if (rhs.bid < lhs.bid)
    return false;
  if (lhs.render_url < rhs.render_url)
    return true;
  if (rhs.render_url < lhs.render_url)
    return false;
  if (lhs.ad_components < rhs.ad_components)
    return true;
  if (rhs.ad_components < lhs.ad_components)
    return false;
  if (lhs.bid_duration < rhs.bid_duration)
    return true;
  if (rhs.bid_duration < lhs.bid_duration)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace auction_worklet

namespace mojo {


template <>
struct CONTENT_EXPORT StructTraits<::auction_worklet::mojom::PreviousWin::DataView,
                                         ::auction_worklet::mojom::PreviousWinPtr> {
  static bool IsNull(const ::auction_worklet::mojom::PreviousWinPtr& input) { return !input; }
  static void SetToNull(::auction_worklet::mojom::PreviousWinPtr* output) { output->reset(); }

  static const decltype(::auction_worklet::mojom::PreviousWin::time)& time(
      const ::auction_worklet::mojom::PreviousWinPtr& input) {
    return input->time;
  }

  static const decltype(::auction_worklet::mojom::PreviousWin::ad_json)& ad_json(
      const ::auction_worklet::mojom::PreviousWinPtr& input) {
    return input->ad_json;
  }

  static bool Read(::auction_worklet::mojom::PreviousWin::DataView input, ::auction_worklet::mojom::PreviousWinPtr* output);
};


template <>
struct CONTENT_EXPORT StructTraits<::auction_worklet::mojom::BidderWorkletNonSharedParams::DataView,
                                         ::auction_worklet::mojom::BidderWorkletNonSharedParamsPtr> {
  static bool IsNull(const ::auction_worklet::mojom::BidderWorkletNonSharedParamsPtr& input) { return !input; }
  static void SetToNull(::auction_worklet::mojom::BidderWorkletNonSharedParamsPtr* output) { output->reset(); }

  static const decltype(::auction_worklet::mojom::BidderWorkletNonSharedParams::name)& name(
      const ::auction_worklet::mojom::BidderWorkletNonSharedParamsPtr& input) {
    return input->name;
  }

  static decltype(::auction_worklet::mojom::BidderWorkletNonSharedParams::execution_mode) execution_mode(
      const ::auction_worklet::mojom::BidderWorkletNonSharedParamsPtr& input) {
    return input->execution_mode;
  }

  static const decltype(::auction_worklet::mojom::BidderWorkletNonSharedParams::daily_update_url)& daily_update_url(
      const ::auction_worklet::mojom::BidderWorkletNonSharedParamsPtr& input) {
    return input->daily_update_url;
  }

  static const decltype(::auction_worklet::mojom::BidderWorkletNonSharedParams::trusted_bidding_signals_keys)& trusted_bidding_signals_keys(
      const ::auction_worklet::mojom::BidderWorkletNonSharedParamsPtr& input) {
    return input->trusted_bidding_signals_keys;
  }

  static const decltype(::auction_worklet::mojom::BidderWorkletNonSharedParams::user_bidding_signals)& user_bidding_signals(
      const ::auction_worklet::mojom::BidderWorkletNonSharedParamsPtr& input) {
    return input->user_bidding_signals;
  }

  static const decltype(::auction_worklet::mojom::BidderWorkletNonSharedParams::ads)& ads(
      const ::auction_worklet::mojom::BidderWorkletNonSharedParamsPtr& input) {
    return input->ads;
  }

  static const decltype(::auction_worklet::mojom::BidderWorkletNonSharedParams::ad_components)& ad_components(
      const ::auction_worklet::mojom::BidderWorkletNonSharedParamsPtr& input) {
    return input->ad_components;
  }

  static bool Read(::auction_worklet::mojom::BidderWorkletNonSharedParams::DataView input, ::auction_worklet::mojom::BidderWorkletNonSharedParamsPtr* output);
};


template <>
struct CONTENT_EXPORT StructTraits<::auction_worklet::mojom::BiddingBrowserSignals::DataView,
                                         ::auction_worklet::mojom::BiddingBrowserSignalsPtr> {
  static bool IsNull(const ::auction_worklet::mojom::BiddingBrowserSignalsPtr& input) { return !input; }
  static void SetToNull(::auction_worklet::mojom::BiddingBrowserSignalsPtr* output) { output->reset(); }

  static decltype(::auction_worklet::mojom::BiddingBrowserSignals::join_count) join_count(
      const ::auction_worklet::mojom::BiddingBrowserSignalsPtr& input) {
    return input->join_count;
  }

  static decltype(::auction_worklet::mojom::BiddingBrowserSignals::bid_count) bid_count(
      const ::auction_worklet::mojom::BiddingBrowserSignalsPtr& input) {
    return input->bid_count;
  }

  static const decltype(::auction_worklet::mojom::BiddingBrowserSignals::prev_wins)& prev_wins(
      const ::auction_worklet::mojom::BiddingBrowserSignalsPtr& input) {
    return input->prev_wins;
  }

  static bool Read(::auction_worklet::mojom::BiddingBrowserSignals::DataView input, ::auction_worklet::mojom::BiddingBrowserSignalsPtr* output);
};


template <>
struct CONTENT_EXPORT StructTraits<::auction_worklet::mojom::BidderWorkletBid::DataView,
                                         ::auction_worklet::mojom::BidderWorkletBidPtr> {
  static bool IsNull(const ::auction_worklet::mojom::BidderWorkletBidPtr& input) { return !input; }
  static void SetToNull(::auction_worklet::mojom::BidderWorkletBidPtr* output) { output->reset(); }

  static const decltype(::auction_worklet::mojom::BidderWorkletBid::ad)& ad(
      const ::auction_worklet::mojom::BidderWorkletBidPtr& input) {
    return input->ad;
  }

  static decltype(::auction_worklet::mojom::BidderWorkletBid::bid) bid(
      const ::auction_worklet::mojom::BidderWorkletBidPtr& input) {
    return input->bid;
  }

  static const decltype(::auction_worklet::mojom::BidderWorkletBid::render_url)& render_url(
      const ::auction_worklet::mojom::BidderWorkletBidPtr& input) {
    return input->render_url;
  }

  static const decltype(::auction_worklet::mojom::BidderWorkletBid::ad_components)& ad_components(
      const ::auction_worklet::mojom::BidderWorkletBidPtr& input) {
    return input->ad_components;
  }

  static const decltype(::auction_worklet::mojom::BidderWorkletBid::bid_duration)& bid_duration(
      const ::auction_worklet::mojom::BidderWorkletBidPtr& input) {
    return input->bid_duration;
  }

  static bool Read(::auction_worklet::mojom::BidderWorkletBid::DataView input, ::auction_worklet::mojom::BidderWorkletBidPtr* output);
};

}  // namespace mojo

#endif  // CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_H_