// content/common/agent_scheduling_group.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "content/common/agent_scheduling_group.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "content/common/agent_scheduling_group.mojom-params-data.h"
#include "content/common/agent_scheduling_group.mojom-shared-message-ids.h"

#include "content/common/agent_scheduling_group.mojom-import-headers.h"
#include "content/common/agent_scheduling_group.mojom-test-utils.h"


#ifndef CONTENT_COMMON_AGENT_SCHEDULING_GROUP_MOJOM_JUMBO_H_
#define CONTENT_COMMON_AGENT_SCHEDULING_GROUP_MOJOM_JUMBO_H_
#include "third_party/blink/common/permissions_policy/permissions_policy_mojom_traits.h"
#endif



namespace content {
namespace mojom {
const char AgentSchedulingGroupHost::Name_[] = "content.mojom.AgentSchedulingGroupHost";

AgentSchedulingGroupHost::IPCStableHashFunction AgentSchedulingGroupHost::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAgentSchedulingGroupHost_DidUnloadRenderFrame_Name: {
      return &AgentSchedulingGroupHost::DidUnloadRenderFrame_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AgentSchedulingGroupHost::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAgentSchedulingGroupHost_DidUnloadRenderFrame_Name:
            return "Receive content::mojom::AgentSchedulingGroupHost::DidUnloadRenderFrame";
    }
  } else {
    switch (message.name()) {
      case internal::kAgentSchedulingGroupHost_DidUnloadRenderFrame_Name:
            return "Receive reply content::mojom::AgentSchedulingGroupHost::DidUnloadRenderFrame";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AgentSchedulingGroupHost::DidUnloadRenderFrame_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)content::mojom::AgentSchedulingGroupHost::DidUnloadRenderFrame");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

AgentSchedulingGroupHostProxy::AgentSchedulingGroupHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AgentSchedulingGroupHostProxy::DidUnloadRenderFrame(
    const ::blink::LocalFrameToken& in_frame_token) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send content::mojom::AgentSchedulingGroupHost::DidUnloadRenderFrame", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("frame_token"), in_frame_token,
                        "<value of type const ::blink::LocalFrameToken&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAgentSchedulingGroupHost_DidUnloadRenderFrame_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::content::mojom::internal::AgentSchedulingGroupHost_DidUnloadRenderFrame_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->frame_token)::BaseType> frame_token_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::LocalFrameTokenDataView>(
      in_frame_token, frame_token_fragment);
  params->frame_token.Set(
      frame_token_fragment.is_null() ? nullptr : frame_token_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->frame_token.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null frame_token in AgentSchedulingGroupHost.DidUnloadRenderFrame request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AgentSchedulingGroupHost::Name_);
  message.set_method_name("DidUnloadRenderFrame");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool AgentSchedulingGroupHostStubDispatch::Accept(
    AgentSchedulingGroupHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAgentSchedulingGroupHost_DidUnloadRenderFrame_Name: {

      DCHECK(message->is_serialized());
      internal::AgentSchedulingGroupHost_DidUnloadRenderFrame_Params_Data* params =
          reinterpret_cast<internal::AgentSchedulingGroupHost_DidUnloadRenderFrame_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::LocalFrameToken p_frame_token{};
      AgentSchedulingGroupHost_DidUnloadRenderFrame_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadFrameToken(&p_frame_token))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AgentSchedulingGroupHost::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DidUnloadRenderFrame(
std::move(p_frame_token));
      return true;
    }
  }
  return false;
}

// static
bool AgentSchedulingGroupHostStubDispatch::AcceptWithResponder(
    AgentSchedulingGroupHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAgentSchedulingGroupHost_DidUnloadRenderFrame_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAgentSchedulingGroupHostValidationInfo[] = {
    {&internal::AgentSchedulingGroupHost_DidUnloadRenderFrame_Params_Data::Validate,
     nullptr /* no response */},
};

bool AgentSchedulingGroupHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::content::mojom::AgentSchedulingGroupHost::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAgentSchedulingGroupHostValidationInfo);
}

const char AgentSchedulingGroup::Name_[] = "content.mojom.AgentSchedulingGroup";

AgentSchedulingGroup::IPCStableHashFunction AgentSchedulingGroup::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAgentSchedulingGroup_BindAssociatedInterfaces_Name: {
      return &AgentSchedulingGroup::BindAssociatedInterfaces_Sym::IPCStableHash;
    }
    case internal::kAgentSchedulingGroup_CreateView_Name: {
      return &AgentSchedulingGroup::CreateView_Sym::IPCStableHash;
    }
    case internal::kAgentSchedulingGroup_CreateFrame_Name: {
      return &AgentSchedulingGroup::CreateFrame_Sym::IPCStableHash;
    }
    case internal::kAgentSchedulingGroup_CreateSharedStorageWorkletService_Name: {
      return &AgentSchedulingGroup::CreateSharedStorageWorkletService_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AgentSchedulingGroup::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAgentSchedulingGroup_BindAssociatedInterfaces_Name:
            return "Receive content::mojom::AgentSchedulingGroup::BindAssociatedInterfaces";
      case internal::kAgentSchedulingGroup_CreateView_Name:
            return "Receive content::mojom::AgentSchedulingGroup::CreateView";
      case internal::kAgentSchedulingGroup_CreateFrame_Name:
            return "Receive content::mojom::AgentSchedulingGroup::CreateFrame";
      case internal::kAgentSchedulingGroup_CreateSharedStorageWorkletService_Name:
            return "Receive content::mojom::AgentSchedulingGroup::CreateSharedStorageWorkletService";
    }
  } else {
    switch (message.name()) {
      case internal::kAgentSchedulingGroup_BindAssociatedInterfaces_Name:
            return "Receive reply content::mojom::AgentSchedulingGroup::BindAssociatedInterfaces";
      case internal::kAgentSchedulingGroup_CreateView_Name:
            return "Receive reply content::mojom::AgentSchedulingGroup::CreateView";
      case internal::kAgentSchedulingGroup_CreateFrame_Name:
            return "Receive reply content::mojom::AgentSchedulingGroup::CreateFrame";
      case internal::kAgentSchedulingGroup_CreateSharedStorageWorkletService_Name:
            return "Receive reply content::mojom::AgentSchedulingGroup::CreateSharedStorageWorkletService";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AgentSchedulingGroup::BindAssociatedInterfaces_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)content::mojom::AgentSchedulingGroup::BindAssociatedInterfaces");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AgentSchedulingGroup::CreateView_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)content::mojom::AgentSchedulingGroup::CreateView");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AgentSchedulingGroup::CreateFrame_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)content::mojom::AgentSchedulingGroup::CreateFrame");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AgentSchedulingGroup::CreateSharedStorageWorkletService_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)content::mojom::AgentSchedulingGroup::CreateSharedStorageWorkletService");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

AgentSchedulingGroupProxy::AgentSchedulingGroupProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AgentSchedulingGroupProxy::BindAssociatedInterfaces(
    ::mojo::PendingAssociatedRemote<AgentSchedulingGroupHost> in_remote_host, ::mojo::PendingAssociatedReceiver<::content::mojom::RouteProvider> in_route_provider_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send content::mojom::AgentSchedulingGroup::BindAssociatedInterfaces", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("remote_host"), in_remote_host,
                        "<value of type ::mojo::PendingAssociatedRemote<AgentSchedulingGroupHost>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("route_provider_receiver"), in_route_provider_receiver,
                        "<value of type ::mojo::PendingAssociatedReceiver<::content::mojom::RouteProvider>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAgentSchedulingGroup_BindAssociatedInterfaces_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::content::mojom::internal::AgentSchedulingGroup_BindAssociatedInterfaces_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::content::mojom::AgentSchedulingGroupHostAssociatedPtrInfoDataView>(
      in_remote_host, &params->remote_host, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->remote_host),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid remote_host in AgentSchedulingGroup.BindAssociatedInterfaces request");
  mojo::internal::Serialize<::content::mojom::RouteProviderAssociatedRequestDataView>(
      in_route_provider_receiver, &params->route_provider_receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->route_provider_receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid route_provider_receiver in AgentSchedulingGroup.BindAssociatedInterfaces request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AgentSchedulingGroup::Name_);
  message.set_method_name("BindAssociatedInterfaces");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AgentSchedulingGroupProxy::CreateView(
    ::content::mojom::CreateViewParamsPtr in_params) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send content::mojom::AgentSchedulingGroup::CreateView", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("params"), in_params,
                        "<value of type ::content::mojom::CreateViewParamsPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAgentSchedulingGroup_CreateView_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::content::mojom::internal::AgentSchedulingGroup_CreateView_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->params)::BaseType> params_fragment(
          params.message());
  mojo::internal::Serialize<::content::mojom::CreateViewParamsDataView>(
      in_params, params_fragment);
  params->params.Set(
      params_fragment.is_null() ? nullptr : params_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->params.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null params in AgentSchedulingGroup.CreateView request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AgentSchedulingGroup::Name_);
  message.set_method_name("CreateView");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AgentSchedulingGroupProxy::CreateFrame(
    ::content::mojom::CreateFrameParamsPtr in_params) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send content::mojom::AgentSchedulingGroup::CreateFrame", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("params"), in_params,
                        "<value of type ::content::mojom::CreateFrameParamsPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAgentSchedulingGroup_CreateFrame_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::content::mojom::internal::AgentSchedulingGroup_CreateFrame_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->params)::BaseType> params_fragment(
          params.message());
  mojo::internal::Serialize<::content::mojom::CreateFrameParamsDataView>(
      in_params, params_fragment);
  params->params.Set(
      params_fragment.is_null() ? nullptr : params_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->params.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null params in AgentSchedulingGroup.CreateFrame request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AgentSchedulingGroup::Name_);
  message.set_method_name("CreateFrame");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AgentSchedulingGroupProxy::CreateSharedStorageWorkletService(
    ::mojo::PendingReceiver<::shared_storage_worklet::mojom::SharedStorageWorkletService> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send content::mojom::AgentSchedulingGroup::CreateSharedStorageWorkletService", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::shared_storage_worklet::mojom::SharedStorageWorkletService>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAgentSchedulingGroup_CreateSharedStorageWorkletService_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::content::mojom::internal::AgentSchedulingGroup_CreateSharedStorageWorkletService_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::shared_storage_worklet::mojom::SharedStorageWorkletServiceInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in AgentSchedulingGroup.CreateSharedStorageWorkletService request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AgentSchedulingGroup::Name_);
  message.set_method_name("CreateSharedStorageWorkletService");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool AgentSchedulingGroupStubDispatch::Accept(
    AgentSchedulingGroup* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAgentSchedulingGroup_BindAssociatedInterfaces_Name: {

      DCHECK(message->is_serialized());
      internal::AgentSchedulingGroup_BindAssociatedInterfaces_Params_Data* params =
          reinterpret_cast<internal::AgentSchedulingGroup_BindAssociatedInterfaces_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedRemote<AgentSchedulingGroupHost> p_remote_host{};
      ::mojo::PendingAssociatedReceiver<::content::mojom::RouteProvider> p_route_provider_receiver{};
      AgentSchedulingGroup_BindAssociatedInterfaces_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_remote_host =
            input_data_view.TakeRemoteHost<decltype(p_remote_host)>();
      }
      if (success) {
        p_route_provider_receiver =
            input_data_view.TakeRouteProviderReceiver<decltype(p_route_provider_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AgentSchedulingGroup::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindAssociatedInterfaces(
std::move(p_remote_host), 
std::move(p_route_provider_receiver));
      return true;
    }
    case internal::kAgentSchedulingGroup_CreateView_Name: {

      DCHECK(message->is_serialized());
      internal::AgentSchedulingGroup_CreateView_Params_Data* params =
          reinterpret_cast<internal::AgentSchedulingGroup_CreateView_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::content::mojom::CreateViewParamsPtr p_params{};
      AgentSchedulingGroup_CreateView_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadParams(&p_params))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AgentSchedulingGroup::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateView(
std::move(p_params));
      return true;
    }
    case internal::kAgentSchedulingGroup_CreateFrame_Name: {

      DCHECK(message->is_serialized());
      internal::AgentSchedulingGroup_CreateFrame_Params_Data* params =
          reinterpret_cast<internal::AgentSchedulingGroup_CreateFrame_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::content::mojom::CreateFrameParamsPtr p_params{};
      AgentSchedulingGroup_CreateFrame_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadParams(&p_params))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AgentSchedulingGroup::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateFrame(
std::move(p_params));
      return true;
    }
    case internal::kAgentSchedulingGroup_CreateSharedStorageWorkletService_Name: {

      DCHECK(message->is_serialized());
      internal::AgentSchedulingGroup_CreateSharedStorageWorkletService_Params_Data* params =
          reinterpret_cast<internal::AgentSchedulingGroup_CreateSharedStorageWorkletService_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::shared_storage_worklet::mojom::SharedStorageWorkletService> p_receiver{};
      AgentSchedulingGroup_CreateSharedStorageWorkletService_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AgentSchedulingGroup::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateSharedStorageWorkletService(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool AgentSchedulingGroupStubDispatch::AcceptWithResponder(
    AgentSchedulingGroup* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAgentSchedulingGroup_BindAssociatedInterfaces_Name: {
      break;
    }
    case internal::kAgentSchedulingGroup_CreateView_Name: {
      break;
    }
    case internal::kAgentSchedulingGroup_CreateFrame_Name: {
      break;
    }
    case internal::kAgentSchedulingGroup_CreateSharedStorageWorkletService_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAgentSchedulingGroupValidationInfo[] = {
    {&internal::AgentSchedulingGroup_BindAssociatedInterfaces_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AgentSchedulingGroup_CreateView_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AgentSchedulingGroup_CreateFrame_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AgentSchedulingGroup_CreateSharedStorageWorkletService_Params_Data::Validate,
     nullptr /* no response */},
};

bool AgentSchedulingGroupRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::content::mojom::AgentSchedulingGroup::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAgentSchedulingGroupValidationInfo);
}



}  // namespace mojom
}  // namespace content


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace content {
namespace mojom {


void AgentSchedulingGroupHostInterceptorForTesting::DidUnloadRenderFrame(const ::blink::LocalFrameToken& frame_token) {
  GetForwardingInterface()->DidUnloadRenderFrame(std::move(frame_token));
}
AgentSchedulingGroupHostAsyncWaiter::AgentSchedulingGroupHostAsyncWaiter(
    AgentSchedulingGroupHost* proxy) : proxy_(proxy) {}

AgentSchedulingGroupHostAsyncWaiter::~AgentSchedulingGroupHostAsyncWaiter() = default;




void AgentSchedulingGroupInterceptorForTesting::BindAssociatedInterfaces(::mojo::PendingAssociatedRemote<AgentSchedulingGroupHost> remote_host, ::mojo::PendingAssociatedReceiver<::content::mojom::RouteProvider> route_provider_receiver) {
  GetForwardingInterface()->BindAssociatedInterfaces(std::move(remote_host), std::move(route_provider_receiver));
}
void AgentSchedulingGroupInterceptorForTesting::CreateView(::content::mojom::CreateViewParamsPtr params) {
  GetForwardingInterface()->CreateView(std::move(params));
}
void AgentSchedulingGroupInterceptorForTesting::CreateFrame(::content::mojom::CreateFrameParamsPtr params) {
  GetForwardingInterface()->CreateFrame(std::move(params));
}
void AgentSchedulingGroupInterceptorForTesting::CreateSharedStorageWorkletService(::mojo::PendingReceiver<::shared_storage_worklet::mojom::SharedStorageWorkletService> receiver) {
  GetForwardingInterface()->CreateSharedStorageWorkletService(std::move(receiver));
}
AgentSchedulingGroupAsyncWaiter::AgentSchedulingGroupAsyncWaiter(
    AgentSchedulingGroup* proxy) : proxy_(proxy) {}

AgentSchedulingGroupAsyncWaiter::~AgentSchedulingGroupAsyncWaiter() = default;






}  // namespace mojom
}  // namespace content


#if defined(__clang__)
#pragma clang diagnostic pop
#endif