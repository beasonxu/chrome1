// content/common/frame.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_FRAME_MOJOM_SHARED_INTERNAL_H_
#define CONTENT_COMMON_FRAME_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "cc/mojom/browser_controls_state.mojom-shared-internal.h"
#include "content/common/frame_messages.mojom-shared-internal.h"
#include "content/common/native_types.mojom-shared-internal.h"
#include "content/common/navigation_client.mojom-shared-internal.h"
#include "content/common/web_ui.mojom-shared-internal.h"
#include "content/public/common/extra_mojo_js_features.mojom-shared-internal.h"
#include "content/public/common/window_container_type.mojom-shared-internal.h"
#include "ipc/constants.mojom-shared-internal.h"
#include "mojo/public/mojom/base/file_path.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared-internal.h"
#include "mojo/public/mojom/base/values.mojom-shared-internal.h"
#include "skia/public/mojom/skcolor.mojom-shared-internal.h"
#include "services/network/public/mojom/content_security_policy.mojom-shared-internal.h"
#include "services/network/public/mojom/url_loader.mojom-shared-internal.h"
#include "services/network/public/mojom/url_loader_factory.mojom-shared-internal.h"
#include "services/network/public/mojom/url_request.mojom-shared-internal.h"
#include "services/network/public/mojom/url_response_head.mojom-shared-internal.h"
#include "services/service_manager/public/mojom/interface_provider.mojom-shared-internal.h"
#include "services/viz/public/mojom/compositing/surface_id.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/associated_interfaces/associated_interfaces.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/blob/blob_url_store.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/browser_interface_broker.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/commit_result/commit_result.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/conversions/conversions.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/devtools/console_message.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/fenced_frame/fenced_frame.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/frame_owner_properties.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/frame_policy.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/frame_replication_state.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/lifecycle.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/policy_container.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/remote_frame.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/tree_scope_type.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/loader/referrer.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/navigation/navigation_policy.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/loader/resource_load_info.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/messaging/transferable_message.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/navigation/navigation_params.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/page/page.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/picture_in_picture_window_options/picture_in_picture_window_options.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/widget/platform_widget.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/page/widget.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/portal/portal.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/renderer_preferences.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_container.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/webpreferences/web_preferences.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/widget/visual_properties.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/window_features/window_features.mojom-shared-internal.h"
#include "ui/accessibility/mojom/ax_tree_update.mojom-shared-internal.h"
#include "ui/base/mojom/window_open_disposition.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "url/mojom/scheme_host_port.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace content {
namespace mojom {
namespace internal {
class CreateViewParams_Data;
class CreateLocalMainFrameParams_Data;
class CreateRemoteMainFrameParams_Data;
class CreateFrameWidgetParams_Data;
class CreateFrameParams_Data;
class SnapshotAccessibilityTreeParams_Data;
class CreateNewWindowParams_Data;
class CreateNewWindowReply_Data;
class CreateMainFrameUnion_Data;

struct ViewWidgetType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct ChildFrameOwnerElementType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct FrameDeleteIntention_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct CreateNewWindowStatus_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)


class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) CreateMainFrameUnion_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  CreateMainFrameUnion_Data() = default;
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~CreateMainFrameUnion_Data() = default;

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<CreateMainFrameUnion_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class CreateMainFrameUnion_Tag : uint32_t {

    
    kLocalParams,
    
    kRemoteParams,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Pointer<internal::CreateLocalMainFrameParams_Data> f_local_params;
    mojo::internal::Pointer<internal::CreateRemoteMainFrameParams_Data> f_remote_params;
    uint64_t unknown;
  };

  uint32_t size;
  CreateMainFrameUnion_Tag tag;
  Union_ data;
};
static_assert(sizeof(CreateMainFrameUnion_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(CreateMainFrameUnion_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) CreateViewParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::RendererPreferences_Data> renderer_preferences;
  mojo::internal::Pointer<::blink::mojom::internal::WebPreferences_Data> web_preferences;
  mojo::internal::Pointer<mojo::internal::String_Data> session_storage_namespace_id;
  ::blink::mojom::internal::FrameToken_Data opener_frame_token;
  mojo::internal::Pointer<::blink::mojom::internal::FrameReplicationState_Data> replication_state;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_main_frame_token;
  internal::CreateMainFrameUnion_Data main_frame;
  uint8_t hidden : 1;
  uint8_t is_prerendering : 1;
  uint8_t never_composited : 1;
  uint8_t window_was_opened_by_another_window : 1;
  uint8_t pad10_[3];
  int32_t type;
  int32_t fenced_frame_mode;
  mojo::internal::AssociatedEndpointHandle_Data blink_page_broadcast;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> base_background_color;

 private:
  friend class mojo::internal::MessageFragment<CreateViewParams_Data>;

  CreateViewParams_Data();
  ~CreateViewParams_Data() = delete;
};
static_assert(sizeof(CreateViewParams_Data) == 104,
              "Bad sizeof(CreateViewParams_Data)");
// Used by CreateViewParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CreateViewParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CreateViewParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CreateViewParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CreateViewParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CreateViewParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) CreateLocalMainFrameParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::LocalFrameToken_Data> token;
  int32_t routing_id;
  mojo::internal::AssociatedEndpointHandle_Data frame;
  mojo::internal::Interface_Data interface_broker;
  mojo::internal::AssociatedInterface_Data associated_interface_provider_remote;
  uint8_t is_on_initial_empty_document : 1;
  uint8_t pad5_[7];
  mojo::internal::Pointer<::blink::mojom::internal::PolicyContainer_Data> policy_container;
  mojo::internal::Pointer<internal::CreateFrameWidgetParams_Data> widget_params;
  mojo::internal::Pointer<::blink::mojom::internal::URLLoaderFactoryBundle_Data> subresource_loader_factories;

 private:
  friend class mojo::internal::MessageFragment<CreateLocalMainFrameParams_Data>;

  CreateLocalMainFrameParams_Data();
  ~CreateLocalMainFrameParams_Data() = delete;
};
static_assert(sizeof(CreateLocalMainFrameParams_Data) == 72,
              "Bad sizeof(CreateLocalMainFrameParams_Data)");
// Used by CreateLocalMainFrameParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CreateLocalMainFrameParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CreateLocalMainFrameParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CreateLocalMainFrameParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CreateLocalMainFrameParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CreateLocalMainFrameParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) CreateRemoteMainFrameParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameToken_Data> token;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameInterfacesFromBrowser_Data> frame_interfaces;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteMainFrameInterfaces_Data> main_frame_interfaces;

 private:
  friend class mojo::internal::MessageFragment<CreateRemoteMainFrameParams_Data>;

  CreateRemoteMainFrameParams_Data();
  ~CreateRemoteMainFrameParams_Data() = delete;
};
static_assert(sizeof(CreateRemoteMainFrameParams_Data) == 32,
              "Bad sizeof(CreateRemoteMainFrameParams_Data)");
// Used by CreateRemoteMainFrameParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CreateRemoteMainFrameParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CreateRemoteMainFrameParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CreateRemoteMainFrameParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CreateRemoteMainFrameParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CreateRemoteMainFrameParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) CreateFrameWidgetParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t routing_id;
  mojo::internal::AssociatedInterface_Data frame_widget_host;
  mojo::internal::AssociatedEndpointHandle_Data frame_widget;
  mojo::internal::AssociatedInterface_Data widget_host;
  mojo::internal::AssociatedEndpointHandle_Data widget;
  uint8_t pad4_[4];
  mojo::internal::Pointer<::blink::mojom::internal::VisualProperties_Data> visual_properties;

 private:
  friend class mojo::internal::MessageFragment<CreateFrameWidgetParams_Data>;

  CreateFrameWidgetParams_Data();
  ~CreateFrameWidgetParams_Data() = delete;
};
static_assert(sizeof(CreateFrameWidgetParams_Data) == 48,
              "Bad sizeof(CreateFrameWidgetParams_Data)");
// Used by CreateFrameWidgetParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CreateFrameWidgetParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CreateFrameWidgetParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CreateFrameWidgetParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CreateFrameWidgetParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CreateFrameWidgetParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) CreateFrameParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::LocalFrameToken_Data> token;
  int32_t routing_id;
  int32_t tree_scope_type;
  ::blink::mojom::internal::FrameToken_Data previous_frame_token;
  ::blink::mojom::internal::FrameToken_Data opener_frame_token;
  ::blink::mojom::internal::FrameToken_Data parent_frame_token;
  ::blink::mojom::internal::FrameToken_Data previous_sibling_frame_token;
  mojo::internal::Interface_Data interface_broker;
  mojo::internal::Pointer<::blink::mojom::internal::FrameReplicationState_Data> replication_state;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_frame_token;
  mojo::internal::Pointer<::blink::mojom::internal::FrameOwnerProperties_Data> frame_owner_properties;
  mojo::internal::Pointer<internal::CreateFrameWidgetParams_Data> widget_params;
  uint8_t is_on_initial_empty_document : 1;
  uint8_t pad12_[3];
  mojo::internal::AssociatedEndpointHandle_Data frame;
  mojo::internal::Pointer<::blink::mojom::internal::PolicyContainer_Data> policy_container;
  mojo::internal::AssociatedInterface_Data associated_interface_provider_remote;

 private:
  friend class mojo::internal::MessageFragment<CreateFrameParams_Data>;

  CreateFrameParams_Data();
  ~CreateFrameParams_Data() = delete;
};
static_assert(sizeof(CreateFrameParams_Data) == 152,
              "Bad sizeof(CreateFrameParams_Data)");
// Used by CreateFrameParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CreateFrameParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CreateFrameParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CreateFrameParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CreateFrameParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CreateFrameParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) SnapshotAccessibilityTreeParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t ax_mode;
  uint8_t exclude_offscreen : 1;
  uint8_t pad1_[3];
  uint64_t max_nodes;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> timeout;

 private:
  friend class mojo::internal::MessageFragment<SnapshotAccessibilityTreeParams_Data>;

  SnapshotAccessibilityTreeParams_Data();
  ~SnapshotAccessibilityTreeParams_Data() = delete;
};
static_assert(sizeof(SnapshotAccessibilityTreeParams_Data) == 32,
              "Bad sizeof(SnapshotAccessibilityTreeParams_Data)");
// Used by SnapshotAccessibilityTreeParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SnapshotAccessibilityTreeParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SnapshotAccessibilityTreeParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SnapshotAccessibilityTreeParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SnapshotAccessibilityTreeParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SnapshotAccessibilityTreeParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) CreateNewWindowParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t allow_popup : 1;
  uint8_t opener_suppressed : 1;
  uint8_t is_form_submission : 1;
  uint8_t pad2_[3];
  int32_t window_container_type;
  mojo::internal::Pointer<mojo::internal::String_Data> session_storage_namespace_id;
  mojo::internal::Pointer<mojo::internal::String_Data> clone_from_session_storage_namespace_id;
  mojo::internal::Pointer<mojo::internal::String_Data> frame_name;
  mojo::internal::Pointer<::network::mojom::internal::URLRequestBody_Data> form_submission_post_data;
  mojo::internal::Pointer<mojo::internal::String_Data> form_submission_post_content_type;
  int32_t disposition;
  uint8_t pad9_[4];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> target_url;
  mojo::internal::Pointer<::blink::mojom::internal::Referrer_Data> referrer;
  mojo::internal::Pointer<::blink::mojom::internal::WindowFeatures_Data> features;
  mojo::internal::Pointer<::blink::mojom::internal::Impression_Data> impression;
  mojo::internal::Pointer<::blink::mojom::internal::NavigationDownloadPolicy_Data> download_policy;
  mojo::internal::Pointer<::blink::mojom::internal::PictureInPictureWindowOptions_Data> pip_options;

 private:
  friend class mojo::internal::MessageFragment<CreateNewWindowParams_Data>;

  CreateNewWindowParams_Data();
  ~CreateNewWindowParams_Data() = delete;
};
static_assert(sizeof(CreateNewWindowParams_Data) == 112,
              "Bad sizeof(CreateNewWindowParams_Data)");
// Used by CreateNewWindowParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CreateNewWindowParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CreateNewWindowParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CreateNewWindowParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CreateNewWindowParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CreateNewWindowParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) CreateNewWindowReply_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::LocalFrameToken_Data> main_frame_token;
  int32_t main_frame_route_id;
  mojo::internal::AssociatedEndpointHandle_Data frame;
  mojo::internal::Pointer<internal::CreateFrameWidgetParams_Data> widget_params;
  mojo::internal::AssociatedEndpointHandle_Data page_broadcast;
  mojo::internal::Interface_Data main_frame_interface_broker;
  mojo::internal::AssociatedInterface_Data associated_interface_provider;
  uint8_t wait_for_debugger : 1;
  uint8_t pad7_[3];
  mojo::internal::Pointer<mojo::internal::String_Data> cloned_session_storage_namespace_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_main_frame_token;
  mojo::internal::Pointer<::blink::mojom::internal::PolicyContainer_Data> policy_container;

 private:
  friend class mojo::internal::MessageFragment<CreateNewWindowReply_Data>;

  CreateNewWindowReply_Data();
  ~CreateNewWindowReply_Data() = delete;
};
static_assert(sizeof(CreateNewWindowReply_Data) == 80,
              "Bad sizeof(CreateNewWindowReply_Data)");
// Used by CreateNewWindowReply::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CreateNewWindowReply_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CreateNewWindowReply_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CreateNewWindowReply_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CreateNewWindowReply_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CreateNewWindowReply_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace content

#endif  // CONTENT_COMMON_FRAME_MOJOM_SHARED_INTERNAL_H_