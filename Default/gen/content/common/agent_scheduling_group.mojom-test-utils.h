// content/common/agent_scheduling_group.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_AGENT_SCHEDULING_GROUP_MOJOM_TEST_UTILS_H_
#define CONTENT_COMMON_AGENT_SCHEDULING_GROUP_MOJOM_TEST_UTILS_H_

#include "content/common/agent_scheduling_group.mojom.h"
#include "content/common/content_export.h"


namespace content {
namespace mojom {


class CONTENT_EXPORT AgentSchedulingGroupHostInterceptorForTesting : public AgentSchedulingGroupHost {
  virtual AgentSchedulingGroupHost* GetForwardingInterface() = 0;
  void DidUnloadRenderFrame(const ::blink::LocalFrameToken& frame_token) override;
};
class CONTENT_EXPORT AgentSchedulingGroupHostAsyncWaiter {
 public:
  explicit AgentSchedulingGroupHostAsyncWaiter(AgentSchedulingGroupHost* proxy);

  AgentSchedulingGroupHostAsyncWaiter(const AgentSchedulingGroupHostAsyncWaiter&) = delete;
  AgentSchedulingGroupHostAsyncWaiter& operator=(const AgentSchedulingGroupHostAsyncWaiter&) = delete;

  ~AgentSchedulingGroupHostAsyncWaiter();

 private:
  AgentSchedulingGroupHost* const proxy_;
};


class CONTENT_EXPORT AgentSchedulingGroupInterceptorForTesting : public AgentSchedulingGroup {
  virtual AgentSchedulingGroup* GetForwardingInterface() = 0;
  void BindAssociatedInterfaces(::mojo::PendingAssociatedRemote<AgentSchedulingGroupHost> remote_host, ::mojo::PendingAssociatedReceiver<::content::mojom::RouteProvider> route_provider_receiver) override;
  void CreateView(::content::mojom::CreateViewParamsPtr params) override;
  void CreateFrame(::content::mojom::CreateFrameParamsPtr params) override;
  void CreateSharedStorageWorkletService(::mojo::PendingReceiver<::shared_storage_worklet::mojom::SharedStorageWorkletService> receiver) override;
};
class CONTENT_EXPORT AgentSchedulingGroupAsyncWaiter {
 public:
  explicit AgentSchedulingGroupAsyncWaiter(AgentSchedulingGroup* proxy);

  AgentSchedulingGroupAsyncWaiter(const AgentSchedulingGroupAsyncWaiter&) = delete;
  AgentSchedulingGroupAsyncWaiter& operator=(const AgentSchedulingGroupAsyncWaiter&) = delete;

  ~AgentSchedulingGroupAsyncWaiter();

 private:
  AgentSchedulingGroup* const proxy_;
};




}  // namespace mojom
}  // namespace content

#endif  // CONTENT_COMMON_AGENT_SCHEDULING_GROUP_MOJOM_TEST_UTILS_H_