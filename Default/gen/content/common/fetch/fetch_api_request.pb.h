// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fetch_api_request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fetch_5fapi_5frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fetch_5fapi_5frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fetch_5fapi_5frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fetch_5fapi_5frequest_2eproto {
  static const uint32_t offsets[];
};
namespace content {
namespace proto {
namespace internal {
class FetchAPIRequest;
struct FetchAPIRequestDefaultTypeInternal;
extern FetchAPIRequestDefaultTypeInternal _FetchAPIRequest_default_instance_;
class FetchAPIRequest_HeadersEntry_DoNotUse;
struct FetchAPIRequest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern FetchAPIRequest_HeadersEntry_DoNotUseDefaultTypeInternal _FetchAPIRequest_HeadersEntry_DoNotUse_default_instance_;
class FetchAPIRequest_Referrer;
struct FetchAPIRequest_ReferrerDefaultTypeInternal;
extern FetchAPIRequest_ReferrerDefaultTypeInternal _FetchAPIRequest_Referrer_default_instance_;
}  // namespace internal
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::proto::internal::FetchAPIRequest* Arena::CreateMaybeMessage<::content::proto::internal::FetchAPIRequest>(Arena*);
template<> ::content::proto::internal::FetchAPIRequest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::content::proto::internal::FetchAPIRequest_HeadersEntry_DoNotUse>(Arena*);
template<> ::content::proto::internal::FetchAPIRequest_Referrer* Arena::CreateMaybeMessage<::content::proto::internal::FetchAPIRequest_Referrer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {
namespace proto {
namespace internal {

// ===================================================================

class FetchAPIRequest_Referrer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.internal.FetchAPIRequest.Referrer) */ {
 public:
  inline FetchAPIRequest_Referrer() : FetchAPIRequest_Referrer(nullptr) {}
  ~FetchAPIRequest_Referrer() override;
  explicit PROTOBUF_CONSTEXPR FetchAPIRequest_Referrer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchAPIRequest_Referrer(const FetchAPIRequest_Referrer& from);
  FetchAPIRequest_Referrer(FetchAPIRequest_Referrer&& from) noexcept
    : FetchAPIRequest_Referrer() {
    *this = ::std::move(from);
  }

  inline FetchAPIRequest_Referrer& operator=(const FetchAPIRequest_Referrer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchAPIRequest_Referrer& operator=(FetchAPIRequest_Referrer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FetchAPIRequest_Referrer& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchAPIRequest_Referrer* internal_default_instance() {
    return reinterpret_cast<const FetchAPIRequest_Referrer*>(
               &_FetchAPIRequest_Referrer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FetchAPIRequest_Referrer& a, FetchAPIRequest_Referrer& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FetchAPIRequest_Referrer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchAPIRequest_Referrer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchAPIRequest_Referrer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchAPIRequest_Referrer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FetchAPIRequest_Referrer& from);
  void MergeFrom(const FetchAPIRequest_Referrer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FetchAPIRequest_Referrer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.internal.FetchAPIRequest.Referrer";
  }
  protected:
  explicit FetchAPIRequest_Referrer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kPolicyFieldNumber = 2,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional int32 policy = 2;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  int32_t policy() const;
  void set_policy(int32_t value);
  private:
  int32_t _internal_policy() const;
  void _internal_set_policy(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.proto.internal.FetchAPIRequest.Referrer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int32_t policy_;
  friend struct ::TableStruct_fetch_5fapi_5frequest_2eproto;
};
// -------------------------------------------------------------------

class FetchAPIRequest_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<FetchAPIRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<FetchAPIRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  FetchAPIRequest_HeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FetchAPIRequest_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FetchAPIRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FetchAPIRequest_HeadersEntry_DoNotUse& other);
  static const FetchAPIRequest_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FetchAPIRequest_HeadersEntry_DoNotUse*>(&_FetchAPIRequest_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_fetch_5fapi_5frequest_2eproto;
};

// -------------------------------------------------------------------

class FetchAPIRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.internal.FetchAPIRequest) */ {
 public:
  inline FetchAPIRequest() : FetchAPIRequest(nullptr) {}
  ~FetchAPIRequest() override;
  explicit PROTOBUF_CONSTEXPR FetchAPIRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchAPIRequest(const FetchAPIRequest& from);
  FetchAPIRequest(FetchAPIRequest&& from) noexcept
    : FetchAPIRequest() {
    *this = ::std::move(from);
  }

  inline FetchAPIRequest& operator=(const FetchAPIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchAPIRequest& operator=(FetchAPIRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FetchAPIRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchAPIRequest* internal_default_instance() {
    return reinterpret_cast<const FetchAPIRequest*>(
               &_FetchAPIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FetchAPIRequest& a, FetchAPIRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FetchAPIRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchAPIRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchAPIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchAPIRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FetchAPIRequest& from);
  void MergeFrom(const FetchAPIRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FetchAPIRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.internal.FetchAPIRequest";
  }
  protected:
  explicit FetchAPIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FetchAPIRequest_Referrer Referrer;

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kUrlFieldNumber = 1,
    kMethodFieldNumber = 2,
    kIntegrityFieldNumber = 12,
    kReferrerFieldNumber = 4,
    kModeFieldNumber = 6,
    kCredentialsModeFieldNumber = 9,
    kCacheModeFieldNumber = 10,
    kIsReloadFieldNumber = 5,
    kIsMainResourceLoadFieldNumber = 7,
    kKeepaliveFieldNumber = 13,
    kIsHistoryNavigationFieldNumber = 16,
    kRedirectModeFieldNumber = 11,
    kTargetAddressSpaceFieldNumber = 17,
  };
  // map<string, string> headers = 3;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string method = 2;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // optional string integrity = 12;
  bool has_integrity() const;
  private:
  bool _internal_has_integrity() const;
  public:
  void clear_integrity();
  const std::string& integrity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integrity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integrity();
  PROTOBUF_NODISCARD std::string* release_integrity();
  void set_allocated_integrity(std::string* integrity);
  private:
  const std::string& _internal_integrity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integrity(const std::string& value);
  std::string* _internal_mutable_integrity();
  public:

  // optional .content.proto.internal.FetchAPIRequest.Referrer referrer = 4;
  bool has_referrer() const;
  private:
  bool _internal_has_referrer() const;
  public:
  void clear_referrer();
  const ::content::proto::internal::FetchAPIRequest_Referrer& referrer() const;
  PROTOBUF_NODISCARD ::content::proto::internal::FetchAPIRequest_Referrer* release_referrer();
  ::content::proto::internal::FetchAPIRequest_Referrer* mutable_referrer();
  void set_allocated_referrer(::content::proto::internal::FetchAPIRequest_Referrer* referrer);
  private:
  const ::content::proto::internal::FetchAPIRequest_Referrer& _internal_referrer() const;
  ::content::proto::internal::FetchAPIRequest_Referrer* _internal_mutable_referrer();
  public:
  void unsafe_arena_set_allocated_referrer(
      ::content::proto::internal::FetchAPIRequest_Referrer* referrer);
  ::content::proto::internal::FetchAPIRequest_Referrer* unsafe_arena_release_referrer();

  // optional int32 mode = 6;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  int32_t mode() const;
  void set_mode(int32_t value);
  private:
  int32_t _internal_mode() const;
  void _internal_set_mode(int32_t value);
  public:

  // optional int32 credentials_mode = 9;
  bool has_credentials_mode() const;
  private:
  bool _internal_has_credentials_mode() const;
  public:
  void clear_credentials_mode();
  int32_t credentials_mode() const;
  void set_credentials_mode(int32_t value);
  private:
  int32_t _internal_credentials_mode() const;
  void _internal_set_credentials_mode(int32_t value);
  public:

  // optional int32 cache_mode = 10;
  bool has_cache_mode() const;
  private:
  bool _internal_has_cache_mode() const;
  public:
  void clear_cache_mode();
  int32_t cache_mode() const;
  void set_cache_mode(int32_t value);
  private:
  int32_t _internal_cache_mode() const;
  void _internal_set_cache_mode(int32_t value);
  public:

  // optional bool is_reload = 5;
  bool has_is_reload() const;
  private:
  bool _internal_has_is_reload() const;
  public:
  void clear_is_reload();
  bool is_reload() const;
  void set_is_reload(bool value);
  private:
  bool _internal_is_reload() const;
  void _internal_set_is_reload(bool value);
  public:

  // optional bool is_main_resource_load = 7;
  bool has_is_main_resource_load() const;
  private:
  bool _internal_has_is_main_resource_load() const;
  public:
  void clear_is_main_resource_load();
  bool is_main_resource_load() const;
  void set_is_main_resource_load(bool value);
  private:
  bool _internal_is_main_resource_load() const;
  void _internal_set_is_main_resource_load(bool value);
  public:

  // optional bool keepalive = 13;
  bool has_keepalive() const;
  private:
  bool _internal_has_keepalive() const;
  public:
  void clear_keepalive();
  bool keepalive() const;
  void set_keepalive(bool value);
  private:
  bool _internal_keepalive() const;
  void _internal_set_keepalive(bool value);
  public:

  // optional bool is_history_navigation = 16;
  bool has_is_history_navigation() const;
  private:
  bool _internal_has_is_history_navigation() const;
  public:
  void clear_is_history_navigation();
  bool is_history_navigation() const;
  void set_is_history_navigation(bool value);
  private:
  bool _internal_is_history_navigation() const;
  void _internal_set_is_history_navigation(bool value);
  public:

  // optional int32 redirect_mode = 11;
  bool has_redirect_mode() const;
  private:
  bool _internal_has_redirect_mode() const;
  public:
  void clear_redirect_mode();
  int32_t redirect_mode() const;
  void set_redirect_mode(int32_t value);
  private:
  int32_t _internal_redirect_mode() const;
  void _internal_set_redirect_mode(int32_t value);
  public:

  // optional int32 target_address_space = 17;
  bool has_target_address_space() const;
  private:
  bool _internal_has_target_address_space() const;
  public:
  void clear_target_address_space();
  int32_t target_address_space() const;
  void set_target_address_space(int32_t value);
  private:
  int32_t _internal_target_address_space() const;
  void _internal_set_target_address_space(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.proto.internal.FetchAPIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      FetchAPIRequest_HeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integrity_;
  ::content::proto::internal::FetchAPIRequest_Referrer* referrer_;
  int32_t mode_;
  int32_t credentials_mode_;
  int32_t cache_mode_;
  bool is_reload_;
  bool is_main_resource_load_;
  bool keepalive_;
  bool is_history_navigation_;
  int32_t redirect_mode_;
  int32_t target_address_space_;
  friend struct ::TableStruct_fetch_5fapi_5frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FetchAPIRequest_Referrer

// optional string url = 1;
inline bool FetchAPIRequest_Referrer::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FetchAPIRequest_Referrer::has_url() const {
  return _internal_has_url();
}
inline void FetchAPIRequest_Referrer::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FetchAPIRequest_Referrer::url() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.Referrer.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FetchAPIRequest_Referrer::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.Referrer.url)
}
inline std::string* FetchAPIRequest_Referrer::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.FetchAPIRequest.Referrer.url)
  return _s;
}
inline const std::string& FetchAPIRequest_Referrer::_internal_url() const {
  return url_.Get();
}
inline void FetchAPIRequest_Referrer::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* FetchAPIRequest_Referrer::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* FetchAPIRequest_Referrer::release_url() {
  // @@protoc_insertion_point(field_release:content.proto.internal.FetchAPIRequest.Referrer.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FetchAPIRequest_Referrer::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.FetchAPIRequest.Referrer.url)
}

// optional int32 policy = 2;
inline bool FetchAPIRequest_Referrer::_internal_has_policy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FetchAPIRequest_Referrer::has_policy() const {
  return _internal_has_policy();
}
inline void FetchAPIRequest_Referrer::clear_policy() {
  policy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t FetchAPIRequest_Referrer::_internal_policy() const {
  return policy_;
}
inline int32_t FetchAPIRequest_Referrer::policy() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.Referrer.policy)
  return _internal_policy();
}
inline void FetchAPIRequest_Referrer::_internal_set_policy(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  policy_ = value;
}
inline void FetchAPIRequest_Referrer::set_policy(int32_t value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.Referrer.policy)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FetchAPIRequest

// optional string url = 1;
inline bool FetchAPIRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_url() const {
  return _internal_has_url();
}
inline void FetchAPIRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FetchAPIRequest::url() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FetchAPIRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.url)
}
inline std::string* FetchAPIRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.FetchAPIRequest.url)
  return _s;
}
inline const std::string& FetchAPIRequest::_internal_url() const {
  return url_.Get();
}
inline void FetchAPIRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* FetchAPIRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* FetchAPIRequest::release_url() {
  // @@protoc_insertion_point(field_release:content.proto.internal.FetchAPIRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FetchAPIRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.FetchAPIRequest.url)
}

// optional string method = 2;
inline bool FetchAPIRequest::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_method() const {
  return _internal_has_method();
}
inline void FetchAPIRequest::clear_method() {
  method_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FetchAPIRequest::method() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FetchAPIRequest::set_method(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.method)
}
inline std::string* FetchAPIRequest::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.FetchAPIRequest.method)
  return _s;
}
inline const std::string& FetchAPIRequest::_internal_method() const {
  return method_.Get();
}
inline void FetchAPIRequest::_internal_set_method(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  method_.Set(value, GetArenaForAllocation());
}
inline std::string* FetchAPIRequest::_internal_mutable_method() {
  _has_bits_[0] |= 0x00000002u;
  return method_.Mutable(GetArenaForAllocation());
}
inline std::string* FetchAPIRequest::release_method() {
  // @@protoc_insertion_point(field_release:content.proto.internal.FetchAPIRequest.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FetchAPIRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.FetchAPIRequest.method)
}

// map<string, string> headers = 3;
inline int FetchAPIRequest::_internal_headers_size() const {
  return headers_.size();
}
inline int FetchAPIRequest::headers_size() const {
  return _internal_headers_size();
}
inline void FetchAPIRequest::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FetchAPIRequest::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FetchAPIRequest::headers() const {
  // @@protoc_insertion_point(field_map:content.proto.internal.FetchAPIRequest.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FetchAPIRequest::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FetchAPIRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:content.proto.internal.FetchAPIRequest.headers)
  return _internal_mutable_headers();
}

// optional .content.proto.internal.FetchAPIRequest.Referrer referrer = 4;
inline bool FetchAPIRequest::_internal_has_referrer() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || referrer_ != nullptr);
  return value;
}
inline bool FetchAPIRequest::has_referrer() const {
  return _internal_has_referrer();
}
inline void FetchAPIRequest::clear_referrer() {
  if (referrer_ != nullptr) referrer_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::content::proto::internal::FetchAPIRequest_Referrer& FetchAPIRequest::_internal_referrer() const {
  const ::content::proto::internal::FetchAPIRequest_Referrer* p = referrer_;
  return p != nullptr ? *p : reinterpret_cast<const ::content::proto::internal::FetchAPIRequest_Referrer&>(
      ::content::proto::internal::_FetchAPIRequest_Referrer_default_instance_);
}
inline const ::content::proto::internal::FetchAPIRequest_Referrer& FetchAPIRequest::referrer() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.referrer)
  return _internal_referrer();
}
inline void FetchAPIRequest::unsafe_arena_set_allocated_referrer(
    ::content::proto::internal::FetchAPIRequest_Referrer* referrer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referrer_);
  }
  referrer_ = referrer;
  if (referrer) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.proto.internal.FetchAPIRequest.referrer)
}
inline ::content::proto::internal::FetchAPIRequest_Referrer* FetchAPIRequest::release_referrer() {
  _has_bits_[0] &= ~0x00000008u;
  ::content::proto::internal::FetchAPIRequest_Referrer* temp = referrer_;
  referrer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content::proto::internal::FetchAPIRequest_Referrer* FetchAPIRequest::unsafe_arena_release_referrer() {
  // @@protoc_insertion_point(field_release:content.proto.internal.FetchAPIRequest.referrer)
  _has_bits_[0] &= ~0x00000008u;
  ::content::proto::internal::FetchAPIRequest_Referrer* temp = referrer_;
  referrer_ = nullptr;
  return temp;
}
inline ::content::proto::internal::FetchAPIRequest_Referrer* FetchAPIRequest::_internal_mutable_referrer() {
  _has_bits_[0] |= 0x00000008u;
  if (referrer_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::proto::internal::FetchAPIRequest_Referrer>(GetArenaForAllocation());
    referrer_ = p;
  }
  return referrer_;
}
inline ::content::proto::internal::FetchAPIRequest_Referrer* FetchAPIRequest::mutable_referrer() {
  ::content::proto::internal::FetchAPIRequest_Referrer* _msg = _internal_mutable_referrer();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.FetchAPIRequest.referrer)
  return _msg;
}
inline void FetchAPIRequest::set_allocated_referrer(::content::proto::internal::FetchAPIRequest_Referrer* referrer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete referrer_;
  }
  if (referrer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(referrer);
    if (message_arena != submessage_arena) {
      referrer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referrer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  referrer_ = referrer;
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.FetchAPIRequest.referrer)
}

// optional bool is_reload = 5;
inline bool FetchAPIRequest::_internal_has_is_reload() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_is_reload() const {
  return _internal_has_is_reload();
}
inline void FetchAPIRequest::clear_is_reload() {
  is_reload_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool FetchAPIRequest::_internal_is_reload() const {
  return is_reload_;
}
inline bool FetchAPIRequest::is_reload() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.is_reload)
  return _internal_is_reload();
}
inline void FetchAPIRequest::_internal_set_is_reload(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_reload_ = value;
}
inline void FetchAPIRequest::set_is_reload(bool value) {
  _internal_set_is_reload(value);
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.is_reload)
}

// optional int32 mode = 6;
inline bool FetchAPIRequest::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_mode() const {
  return _internal_has_mode();
}
inline void FetchAPIRequest::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t FetchAPIRequest::_internal_mode() const {
  return mode_;
}
inline int32_t FetchAPIRequest::mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.mode)
  return _internal_mode();
}
inline void FetchAPIRequest::_internal_set_mode(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
}
inline void FetchAPIRequest::set_mode(int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.mode)
}

// optional bool is_main_resource_load = 7;
inline bool FetchAPIRequest::_internal_has_is_main_resource_load() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_is_main_resource_load() const {
  return _internal_has_is_main_resource_load();
}
inline void FetchAPIRequest::clear_is_main_resource_load() {
  is_main_resource_load_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool FetchAPIRequest::_internal_is_main_resource_load() const {
  return is_main_resource_load_;
}
inline bool FetchAPIRequest::is_main_resource_load() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.is_main_resource_load)
  return _internal_is_main_resource_load();
}
inline void FetchAPIRequest::_internal_set_is_main_resource_load(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_main_resource_load_ = value;
}
inline void FetchAPIRequest::set_is_main_resource_load(bool value) {
  _internal_set_is_main_resource_load(value);
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.is_main_resource_load)
}

// optional int32 credentials_mode = 9;
inline bool FetchAPIRequest::_internal_has_credentials_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_credentials_mode() const {
  return _internal_has_credentials_mode();
}
inline void FetchAPIRequest::clear_credentials_mode() {
  credentials_mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t FetchAPIRequest::_internal_credentials_mode() const {
  return credentials_mode_;
}
inline int32_t FetchAPIRequest::credentials_mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.credentials_mode)
  return _internal_credentials_mode();
}
inline void FetchAPIRequest::_internal_set_credentials_mode(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  credentials_mode_ = value;
}
inline void FetchAPIRequest::set_credentials_mode(int32_t value) {
  _internal_set_credentials_mode(value);
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.credentials_mode)
}

// optional int32 cache_mode = 10;
inline bool FetchAPIRequest::_internal_has_cache_mode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_cache_mode() const {
  return _internal_has_cache_mode();
}
inline void FetchAPIRequest::clear_cache_mode() {
  cache_mode_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t FetchAPIRequest::_internal_cache_mode() const {
  return cache_mode_;
}
inline int32_t FetchAPIRequest::cache_mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.cache_mode)
  return _internal_cache_mode();
}
inline void FetchAPIRequest::_internal_set_cache_mode(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  cache_mode_ = value;
}
inline void FetchAPIRequest::set_cache_mode(int32_t value) {
  _internal_set_cache_mode(value);
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.cache_mode)
}

// optional int32 redirect_mode = 11;
inline bool FetchAPIRequest::_internal_has_redirect_mode() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_redirect_mode() const {
  return _internal_has_redirect_mode();
}
inline void FetchAPIRequest::clear_redirect_mode() {
  redirect_mode_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t FetchAPIRequest::_internal_redirect_mode() const {
  return redirect_mode_;
}
inline int32_t FetchAPIRequest::redirect_mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.redirect_mode)
  return _internal_redirect_mode();
}
inline void FetchAPIRequest::_internal_set_redirect_mode(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  redirect_mode_ = value;
}
inline void FetchAPIRequest::set_redirect_mode(int32_t value) {
  _internal_set_redirect_mode(value);
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.redirect_mode)
}

// optional string integrity = 12;
inline bool FetchAPIRequest::_internal_has_integrity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_integrity() const {
  return _internal_has_integrity();
}
inline void FetchAPIRequest::clear_integrity() {
  integrity_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FetchAPIRequest::integrity() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.integrity)
  return _internal_integrity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FetchAPIRequest::set_integrity(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 integrity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.integrity)
}
inline std::string* FetchAPIRequest::mutable_integrity() {
  std::string* _s = _internal_mutable_integrity();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.FetchAPIRequest.integrity)
  return _s;
}
inline const std::string& FetchAPIRequest::_internal_integrity() const {
  return integrity_.Get();
}
inline void FetchAPIRequest::_internal_set_integrity(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  integrity_.Set(value, GetArenaForAllocation());
}
inline std::string* FetchAPIRequest::_internal_mutable_integrity() {
  _has_bits_[0] |= 0x00000004u;
  return integrity_.Mutable(GetArenaForAllocation());
}
inline std::string* FetchAPIRequest::release_integrity() {
  // @@protoc_insertion_point(field_release:content.proto.internal.FetchAPIRequest.integrity)
  if (!_internal_has_integrity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = integrity_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (integrity_.IsDefault()) {
    integrity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FetchAPIRequest::set_allocated_integrity(std::string* integrity) {
  if (integrity != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  integrity_.SetAllocated(integrity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (integrity_.IsDefault()) {
    integrity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.FetchAPIRequest.integrity)
}

// optional bool keepalive = 13;
inline bool FetchAPIRequest::_internal_has_keepalive() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_keepalive() const {
  return _internal_has_keepalive();
}
inline void FetchAPIRequest::clear_keepalive() {
  keepalive_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool FetchAPIRequest::_internal_keepalive() const {
  return keepalive_;
}
inline bool FetchAPIRequest::keepalive() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.keepalive)
  return _internal_keepalive();
}
inline void FetchAPIRequest::_internal_set_keepalive(bool value) {
  _has_bits_[0] |= 0x00000200u;
  keepalive_ = value;
}
inline void FetchAPIRequest::set_keepalive(bool value) {
  _internal_set_keepalive(value);
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.keepalive)
}

// optional bool is_history_navigation = 16;
inline bool FetchAPIRequest::_internal_has_is_history_navigation() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_is_history_navigation() const {
  return _internal_has_is_history_navigation();
}
inline void FetchAPIRequest::clear_is_history_navigation() {
  is_history_navigation_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool FetchAPIRequest::_internal_is_history_navigation() const {
  return is_history_navigation_;
}
inline bool FetchAPIRequest::is_history_navigation() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.is_history_navigation)
  return _internal_is_history_navigation();
}
inline void FetchAPIRequest::_internal_set_is_history_navigation(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_history_navigation_ = value;
}
inline void FetchAPIRequest::set_is_history_navigation(bool value) {
  _internal_set_is_history_navigation(value);
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.is_history_navigation)
}

// optional int32 target_address_space = 17;
inline bool FetchAPIRequest::_internal_has_target_address_space() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FetchAPIRequest::has_target_address_space() const {
  return _internal_has_target_address_space();
}
inline void FetchAPIRequest::clear_target_address_space() {
  target_address_space_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t FetchAPIRequest::_internal_target_address_space() const {
  return target_address_space_;
}
inline int32_t FetchAPIRequest::target_address_space() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.FetchAPIRequest.target_address_space)
  return _internal_target_address_space();
}
inline void FetchAPIRequest::_internal_set_target_address_space(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  target_address_space_ = value;
}
inline void FetchAPIRequest::set_target_address_space(int32_t value) {
  _internal_set_target_address_space(value);
  // @@protoc_insertion_point(field_set:content.proto.internal.FetchAPIRequest.target_address_space)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace proto
}  // namespace content

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fetch_5fapi_5frequest_2eproto
