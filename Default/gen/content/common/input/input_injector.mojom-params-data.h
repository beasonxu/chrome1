// content/common/input/input_injector.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_PARAMS_DATA_H_
#define CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace content {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticSmoothDrag_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SyntheticSmoothDrag_Data> drag;

 private:
  friend class mojo::internal::MessageFragment<InputInjector_QueueSyntheticSmoothDrag_Params_Data>;

  InputInjector_QueueSyntheticSmoothDrag_Params_Data();
  ~InputInjector_QueueSyntheticSmoothDrag_Params_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticSmoothDrag_Params_Data) == 16,
              "Bad sizeof(InputInjector_QueueSyntheticSmoothDrag_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data>;

  InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data();
  ~InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data) == 8,
              "Bad sizeof(InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticSmoothScroll_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SyntheticSmoothScroll_Data> scroll;

 private:
  friend class mojo::internal::MessageFragment<InputInjector_QueueSyntheticSmoothScroll_Params_Data>;

  InputInjector_QueueSyntheticSmoothScroll_Params_Data();
  ~InputInjector_QueueSyntheticSmoothScroll_Params_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticSmoothScroll_Params_Data) == 16,
              "Bad sizeof(InputInjector_QueueSyntheticSmoothScroll_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data>;

  InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data();
  ~InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data) == 8,
              "Bad sizeof(InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticPinch_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SyntheticPinch_Data> pinch;

 private:
  friend class mojo::internal::MessageFragment<InputInjector_QueueSyntheticPinch_Params_Data>;

  InputInjector_QueueSyntheticPinch_Params_Data();
  ~InputInjector_QueueSyntheticPinch_Params_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticPinch_Params_Data) == 16,
              "Bad sizeof(InputInjector_QueueSyntheticPinch_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticPinch_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<InputInjector_QueueSyntheticPinch_ResponseParams_Data>;

  InputInjector_QueueSyntheticPinch_ResponseParams_Data();
  ~InputInjector_QueueSyntheticPinch_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticPinch_ResponseParams_Data) == 8,
              "Bad sizeof(InputInjector_QueueSyntheticPinch_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticTap_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SyntheticTap_Data> tap;

 private:
  friend class mojo::internal::MessageFragment<InputInjector_QueueSyntheticTap_Params_Data>;

  InputInjector_QueueSyntheticTap_Params_Data();
  ~InputInjector_QueueSyntheticTap_Params_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticTap_Params_Data) == 16,
              "Bad sizeof(InputInjector_QueueSyntheticTap_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticTap_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<InputInjector_QueueSyntheticTap_ResponseParams_Data>;

  InputInjector_QueueSyntheticTap_ResponseParams_Data();
  ~InputInjector_QueueSyntheticTap_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticTap_ResponseParams_Data) == 8,
              "Bad sizeof(InputInjector_QueueSyntheticTap_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticPointerAction_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SyntheticPointerAction_Data> pointer_action;

 private:
  friend class mojo::internal::MessageFragment<InputInjector_QueueSyntheticPointerAction_Params_Data>;

  InputInjector_QueueSyntheticPointerAction_Params_Data();
  ~InputInjector_QueueSyntheticPointerAction_Params_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticPointerAction_Params_Data) == 16,
              "Bad sizeof(InputInjector_QueueSyntheticPointerAction_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticPointerAction_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<InputInjector_QueueSyntheticPointerAction_ResponseParams_Data>;

  InputInjector_QueueSyntheticPointerAction_ResponseParams_Data();
  ~InputInjector_QueueSyntheticPointerAction_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticPointerAction_ResponseParams_Data) == 8,
              "Bad sizeof(InputInjector_QueueSyntheticPointerAction_ResponseParams_Data)");

}  // namespace internal


class InputInjector_QueueSyntheticSmoothDrag_ParamsDataView {
 public:
  InputInjector_QueueSyntheticSmoothDrag_ParamsDataView() = default;

  InputInjector_QueueSyntheticSmoothDrag_ParamsDataView(
      internal::InputInjector_QueueSyntheticSmoothDrag_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDragDataView(
      SyntheticSmoothDragDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDrag(UserType* output) {
    
    auto* pointer = data_->drag.Get();
    return mojo::internal::Deserialize<::content::mojom::SyntheticSmoothDragDataView>(
        pointer, output, message_);
  }
 private:
  internal::InputInjector_QueueSyntheticSmoothDrag_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InputInjector_QueueSyntheticSmoothDrag_ResponseParamsDataView {
 public:
  InputInjector_QueueSyntheticSmoothDrag_ResponseParamsDataView() = default;

  InputInjector_QueueSyntheticSmoothDrag_ResponseParamsDataView(
      internal::InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data* data_ = nullptr;
};



class InputInjector_QueueSyntheticSmoothScroll_ParamsDataView {
 public:
  InputInjector_QueueSyntheticSmoothScroll_ParamsDataView() = default;

  InputInjector_QueueSyntheticSmoothScroll_ParamsDataView(
      internal::InputInjector_QueueSyntheticSmoothScroll_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetScrollDataView(
      SyntheticSmoothScrollDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScroll(UserType* output) {
    
    auto* pointer = data_->scroll.Get();
    return mojo::internal::Deserialize<::content::mojom::SyntheticSmoothScrollDataView>(
        pointer, output, message_);
  }
 private:
  internal::InputInjector_QueueSyntheticSmoothScroll_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InputInjector_QueueSyntheticSmoothScroll_ResponseParamsDataView {
 public:
  InputInjector_QueueSyntheticSmoothScroll_ResponseParamsDataView() = default;

  InputInjector_QueueSyntheticSmoothScroll_ResponseParamsDataView(
      internal::InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data* data_ = nullptr;
};



class InputInjector_QueueSyntheticPinch_ParamsDataView {
 public:
  InputInjector_QueueSyntheticPinch_ParamsDataView() = default;

  InputInjector_QueueSyntheticPinch_ParamsDataView(
      internal::InputInjector_QueueSyntheticPinch_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPinchDataView(
      SyntheticPinchDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPinch(UserType* output) {
    
    auto* pointer = data_->pinch.Get();
    return mojo::internal::Deserialize<::content::mojom::SyntheticPinchDataView>(
        pointer, output, message_);
  }
 private:
  internal::InputInjector_QueueSyntheticPinch_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InputInjector_QueueSyntheticPinch_ResponseParamsDataView {
 public:
  InputInjector_QueueSyntheticPinch_ResponseParamsDataView() = default;

  InputInjector_QueueSyntheticPinch_ResponseParamsDataView(
      internal::InputInjector_QueueSyntheticPinch_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InputInjector_QueueSyntheticPinch_ResponseParams_Data* data_ = nullptr;
};



class InputInjector_QueueSyntheticTap_ParamsDataView {
 public:
  InputInjector_QueueSyntheticTap_ParamsDataView() = default;

  InputInjector_QueueSyntheticTap_ParamsDataView(
      internal::InputInjector_QueueSyntheticTap_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTapDataView(
      SyntheticTapDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTap(UserType* output) {
    
    auto* pointer = data_->tap.Get();
    return mojo::internal::Deserialize<::content::mojom::SyntheticTapDataView>(
        pointer, output, message_);
  }
 private:
  internal::InputInjector_QueueSyntheticTap_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InputInjector_QueueSyntheticTap_ResponseParamsDataView {
 public:
  InputInjector_QueueSyntheticTap_ResponseParamsDataView() = default;

  InputInjector_QueueSyntheticTap_ResponseParamsDataView(
      internal::InputInjector_QueueSyntheticTap_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InputInjector_QueueSyntheticTap_ResponseParams_Data* data_ = nullptr;
};



class InputInjector_QueueSyntheticPointerAction_ParamsDataView {
 public:
  InputInjector_QueueSyntheticPointerAction_ParamsDataView() = default;

  InputInjector_QueueSyntheticPointerAction_ParamsDataView(
      internal::InputInjector_QueueSyntheticPointerAction_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPointerActionDataView(
      SyntheticPointerActionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPointerAction(UserType* output) {
    
    auto* pointer = data_->pointer_action.Get();
    return mojo::internal::Deserialize<::content::mojom::SyntheticPointerActionDataView>(
        pointer, output, message_);
  }
 private:
  internal::InputInjector_QueueSyntheticPointerAction_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InputInjector_QueueSyntheticPointerAction_ResponseParamsDataView {
 public:
  InputInjector_QueueSyntheticPointerAction_ResponseParamsDataView() = default;

  InputInjector_QueueSyntheticPointerAction_ResponseParamsDataView(
      internal::InputInjector_QueueSyntheticPointerAction_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InputInjector_QueueSyntheticPointerAction_ResponseParams_Data* data_ = nullptr;
};


inline void InputInjector_QueueSyntheticSmoothDrag_ParamsDataView::GetDragDataView(
    SyntheticSmoothDragDataView* output) {
  auto pointer = data_->drag.Get();
  *output = SyntheticSmoothDragDataView(pointer, message_);
}




inline void InputInjector_QueueSyntheticSmoothScroll_ParamsDataView::GetScrollDataView(
    SyntheticSmoothScrollDataView* output) {
  auto pointer = data_->scroll.Get();
  *output = SyntheticSmoothScrollDataView(pointer, message_);
}




inline void InputInjector_QueueSyntheticPinch_ParamsDataView::GetPinchDataView(
    SyntheticPinchDataView* output) {
  auto pointer = data_->pinch.Get();
  *output = SyntheticPinchDataView(pointer, message_);
}




inline void InputInjector_QueueSyntheticTap_ParamsDataView::GetTapDataView(
    SyntheticTapDataView* output) {
  auto pointer = data_->tap.Get();
  *output = SyntheticTapDataView(pointer, message_);
}




inline void InputInjector_QueueSyntheticPointerAction_ParamsDataView::GetPointerActionDataView(
    SyntheticPointerActionDataView* output) {
  auto pointer = data_->pointer_action.Get();
  *output = SyntheticPointerActionDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_PARAMS_DATA_H_