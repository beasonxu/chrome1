// content/common/navigation_client.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_NAVIGATION_CLIENT_MOJOM_SHARED_H_
#define CONTENT_COMMON_NAVIGATION_CLIENT_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/common/navigation_client.mojom-shared-internal.h"
#include "content/common/frame_messages.mojom-shared.h"
#include "content/public/common/alternative_error_page_override_info.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "services/network/public/mojom/network_param.mojom-shared.h"
#include "services/network/public/mojom/restricted_cookie_manager.mojom-shared.h"
#include "services/network/public/mojom/url_loader.mojom-shared.h"
#include "services/network/public/mojom/url_loader_factory.mojom-shared.h"
#include "services/network/public/mojom/url_response_head.mojom-shared.h"
#include "third_party/blink/public/mojom/commit_result/commit_result.mojom-shared.h"
#include "third_party/blink/public/mojom/dom_storage/storage_area.mojom-shared.h"
#include "third_party/blink/public/mojom/frame/policy_container.mojom-shared.h"
#include "third_party/blink/public/mojom/loader/code_cache.mojom-shared.h"
#include "third_party/blink/public/mojom/loader/referrer.mojom-shared.h"
#include "third_party/blink/public/mojom/loader/same_document_navigation_type.mojom-shared.h"
#include "third_party/blink/public/mojom/loader/transferrable_url_loader.mojom-shared.h"
#include "third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom-shared.h"
#include "third_party/blink/public/mojom/navigation/navigation_params.mojom-shared.h"
#include "third_party/blink/public/mojom/permissions_policy/document_policy_feature.mojom-shared.h"
#include "third_party/blink/public/mojom/permissions_policy/permissions_policy.mojom-shared.h"
#include "third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom-shared.h"
#include "third_party/blink/public/mojom/permissions_policy/policy_value.mojom-shared.h"
#include "third_party/blink/public/mojom/security_context/insecure_request_policy.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_container.mojom-shared.h"
#include "url/mojom/origin.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "mojo/public/cpp/bindings/native_enum.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"
#include "base/component_export.h"




namespace content {
namespace mojom {
using PageStateDataView = mojo::native::NativeStructDataView;

class DidCommitProvisionalLoadParamsDataView;

class DidCommitSameDocumentNavigationParamsDataView;

class CookieManagerInfoDataView;

class StorageInfoDataView;



}  // namespace mojom
}  // namespace content

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::content::mojom::DidCommitProvisionalLoadParamsDataView> {
  using Data = ::content::mojom::internal::DidCommitProvisionalLoadParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::DidCommitSameDocumentNavigationParamsDataView> {
  using Data = ::content::mojom::internal::DidCommitSameDocumentNavigationParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::CookieManagerInfoDataView> {
  using Data = ::content::mojom::internal::CookieManagerInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::StorageInfoDataView> {
  using Data = ::content::mojom::internal::StorageInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace content {
namespace mojom {
using NavigationGesture = mojo::NativeEnum;
using PageTransition = mojo::NativeEnum;
// Interface base classes. They are used for type safety check.
class NavigationClientInterfaceBase {};

using NavigationClientPtrDataView =
    mojo::InterfacePtrDataView<NavigationClientInterfaceBase>;
using NavigationClientRequestDataView =
    mojo::InterfaceRequestDataView<NavigationClientInterfaceBase>;
using NavigationClientAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<NavigationClientInterfaceBase>;
using NavigationClientAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<NavigationClientInterfaceBase>;


class DidCommitProvisionalLoadParamsDataView {
 public:
  DidCommitProvisionalLoadParamsDataView() = default;

  DidCommitProvisionalLoadParamsDataView(
      internal::DidCommitProvisionalLoadParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t item_sequence_number() const {
    return data_->item_sequence_number;
  }
  int64_t document_sequence_number() const {
    return data_->document_sequence_number;
  }
  inline void GetNavigationApiKeyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNavigationApiKey(UserType* output) {
    
    auto* pointer = data_->navigation_api_key.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetReferrerDataView(
      ::blink::mojom::ReferrerDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReferrer(UserType* output) {
    
    auto* pointer = data_->referrer.Get();
    return mojo::internal::Deserialize<::blink::mojom::ReferrerDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadTransition(UserType* output) const {
    auto data_value = data_->transition;
    return mojo::internal::Deserialize<::content::mojom::PageTransition>(
        data_value, output);
  }
  PageTransition transition() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::content::mojom::PageTransition>(data_->transition));
  }
  bool should_update_history() const {
    return data_->should_update_history;
  }
  inline void GetContentsMimeTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContentsMimeType(UserType* output) {
    
    auto* pointer = data_->contents_mime_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool did_create_new_entry() const {
    return data_->did_create_new_entry;
  }
  bool should_replace_current_entry() const {
    return data_->should_replace_current_entry;
  }
  inline void GetMethodDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMethod(UserType* output) {
    
    auto* pointer = data_->method.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  int64_t post_id() const {
    return data_->post_id;
  }
  int32_t http_status_code() const {
    return data_->http_status_code;
  }
  bool url_is_unreachable() const {
    return data_->url_is_unreachable;
  }
  inline void GetPageStateDataView(
      PageStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPageState(UserType* output) {
    
    auto* pointer = data_->page_state.Get();
    return mojo::internal::Deserialize<::content::mojom::PageStateDataView>(
        pointer, output, message_);
  }
  bool is_overriding_user_agent() const {
    return data_->is_overriding_user_agent;
  }
  bool history_list_was_cleared() const {
    return data_->history_list_was_cleared;
  }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetOriginCalculationDebugInfoDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOriginCalculationDebugInfo(UserType* output) {
    
    auto* pointer = data_->origin_calculation_debug_info.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPermissionsPolicyHeaderDataView(
      mojo::ArrayDataView<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPermissionsPolicyHeader(UserType* output) {
    
    auto* pointer = data_->permissions_policy_header.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView>>(
        pointer, output, message_);
  }
  inline void GetDocumentPolicyHeaderDataView(
      mojo::MapDataView<::blink::mojom::DocumentPolicyFeature, ::blink::mojom::PolicyValueDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDocumentPolicyHeader(UserType* output) {
    
    auto* pointer = data_->document_policy_header.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::blink::mojom::DocumentPolicyFeature, ::blink::mojom::PolicyValueDataView>>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadInsecureRequestPolicy(UserType* output) const {
    auto data_value = data_->insecure_request_policy;
    return mojo::internal::Deserialize<::blink::mojom::InsecureRequestPolicy>(
        data_value, output);
  }
  ::blink::mojom::InsecureRequestPolicy insecure_request_policy() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::InsecureRequestPolicy>(data_->insecure_request_policy));
  }
  inline void GetInsecureNavigationsSetDataView(
      mojo::ArrayDataView<uint32_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInsecureNavigationsSet(UserType* output) {
    
    auto* pointer = data_->insecure_navigations_set.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint32_t>>(
        pointer, output, message_);
  }
  bool has_potentially_trustworthy_unique_origin() const {
    return data_->has_potentially_trustworthy_unique_origin;
  }
  int32_t request_id() const {
    return data_->request_id;
  }
  inline void GetNavigationTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNavigationToken(UserType* output) {
    
    auto* pointer = data_->navigation_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetEmbeddingTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEmbeddingToken(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::UnguessableTokenDataView, UserType>(),
    "Attempting to read the optional `embedding_token` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadEmbeddingToken` instead "
    "of `ReadEmbeddingToken if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->embedding_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetUnloadStartDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUnloadStart(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::TimeTicksDataView, UserType>(),
    "Attempting to read the optional `unload_start` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUnloadStart` instead "
    "of `ReadUnloadStart if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->unload_start.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  inline void GetUnloadEndDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUnloadEnd(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::TimeTicksDataView, UserType>(),
    "Attempting to read the optional `unload_end` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUnloadEnd` instead "
    "of `ReadUnloadEnd if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->unload_end.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  inline void GetCommitNavigationEndDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCommitNavigationEnd(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::TimeTicksDataView, UserType>(),
    "Attempting to read the optional `commit_navigation_end` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadCommitNavigationEnd` instead "
    "of `ReadCommitNavigationEnd if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->commit_navigation_end.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
 private:
  internal::DidCommitProvisionalLoadParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DidCommitSameDocumentNavigationParamsDataView {
 public:
  DidCommitSameDocumentNavigationParamsDataView() = default;

  DidCommitSameDocumentNavigationParamsDataView(
      internal::DidCommitSameDocumentNavigationParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadSameDocumentNavigationType(UserType* output) const {
    auto data_value = data_->same_document_navigation_type;
    return mojo::internal::Deserialize<::blink::mojom::SameDocumentNavigationType>(
        data_value, output);
  }
  ::blink::mojom::SameDocumentNavigationType same_document_navigation_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::SameDocumentNavigationType>(data_->same_document_navigation_type));
  }
  bool is_client_redirect() const {
    return data_->is_client_redirect;
  }
  bool started_with_transient_activation() const {
    return data_->started_with_transient_activation;
  }
 private:
  internal::DidCommitSameDocumentNavigationParams_Data* data_ = nullptr;
};



class CookieManagerInfoDataView {
 public:
  CookieManagerInfoDataView() = default;

  CookieManagerInfoDataView(
      internal::CookieManagerInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeCookieManager() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::RestrictedCookieManagerInterfaceBase>>(
            &data_->cookie_manager, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CookieManagerInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class StorageInfoDataView {
 public:
  StorageInfoDataView() = default;

  StorageInfoDataView(
      internal::StorageInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeLocalStorageArea() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::StorageAreaInterfaceBase>>(
            &data_->local_storage_area, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeSessionStorageArea() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::StorageAreaInterfaceBase>>(
            &data_->session_storage_area, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::StorageInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace content

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::DidCommitProvisionalLoadParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::DidCommitProvisionalLoadParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::DidCommitProvisionalLoadParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->item_sequence_number = Traits::item_sequence_number(input);
    fragment->document_sequence_number = Traits::document_sequence_number(input);
    decltype(Traits::navigation_api_key(input)) in_navigation_api_key = Traits::navigation_api_key(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->navigation_api_key)::BaseType> navigation_api_key_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_navigation_api_key, navigation_api_key_fragment);
    fragment->navigation_api_key.Set(
        navigation_api_key_fragment.is_null() ? nullptr : navigation_api_key_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->navigation_api_key.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null navigation_api_key in DidCommitProvisionalLoadParams struct");
    decltype(Traits::url(input)) in_url = Traits::url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url)::BaseType> url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, url_fragment);
    fragment->url.Set(
        url_fragment.is_null() ? nullptr : url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in DidCommitProvisionalLoadParams struct");
    decltype(Traits::referrer(input)) in_referrer = Traits::referrer(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->referrer)::BaseType> referrer_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::ReferrerDataView>(
        in_referrer, referrer_fragment);
    fragment->referrer.Set(
        referrer_fragment.is_null() ? nullptr : referrer_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->referrer.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null referrer in DidCommitProvisionalLoadParams struct");
    mojo::internal::Serialize<::content::mojom::PageTransition>(
        Traits::transition(input), &fragment->transition);
    fragment->should_update_history = Traits::should_update_history(input);
    decltype(Traits::contents_mime_type(input)) in_contents_mime_type = Traits::contents_mime_type(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->contents_mime_type)::BaseType> contents_mime_type_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_contents_mime_type, contents_mime_type_fragment);
    fragment->contents_mime_type.Set(
        contents_mime_type_fragment.is_null() ? nullptr : contents_mime_type_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->contents_mime_type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null contents_mime_type in DidCommitProvisionalLoadParams struct");
    fragment->did_create_new_entry = Traits::did_create_new_entry(input);
    fragment->should_replace_current_entry = Traits::should_replace_current_entry(input);
    decltype(Traits::method(input)) in_method = Traits::method(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->method)::BaseType> method_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_method, method_fragment);
    fragment->method.Set(
        method_fragment.is_null() ? nullptr : method_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->method.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null method in DidCommitProvisionalLoadParams struct");
    fragment->post_id = Traits::post_id(input);
    fragment->http_status_code = Traits::http_status_code(input);
    fragment->url_is_unreachable = Traits::url_is_unreachable(input);
    decltype(Traits::page_state(input)) in_page_state = Traits::page_state(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->page_state)::BaseType> page_state_fragment(
            fragment.message());
    mojo::internal::Serialize<::content::mojom::PageStateDataView>(
        in_page_state, page_state_fragment);
    fragment->page_state.Set(
        page_state_fragment.is_null() ? nullptr : page_state_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->page_state.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null page_state in DidCommitProvisionalLoadParams struct");
    fragment->is_overriding_user_agent = Traits::is_overriding_user_agent(input);
    fragment->history_list_was_cleared = Traits::history_list_was_cleared(input);
    decltype(Traits::origin(input)) in_origin = Traits::origin(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->origin)::BaseType> origin_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::OriginDataView>(
        in_origin, origin_fragment);
    fragment->origin.Set(
        origin_fragment.is_null() ? nullptr : origin_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->origin.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null origin in DidCommitProvisionalLoadParams struct");
    decltype(Traits::origin_calculation_debug_info(input)) in_origin_calculation_debug_info = Traits::origin_calculation_debug_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->origin_calculation_debug_info)::BaseType> origin_calculation_debug_info_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_origin_calculation_debug_info, origin_calculation_debug_info_fragment);
    fragment->origin_calculation_debug_info.Set(
        origin_calculation_debug_info_fragment.is_null() ? nullptr : origin_calculation_debug_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->origin_calculation_debug_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null origin_calculation_debug_info in DidCommitProvisionalLoadParams struct");
    decltype(Traits::permissions_policy_header(input)) in_permissions_policy_header = Traits::permissions_policy_header(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->permissions_policy_header)::BaseType>
        permissions_policy_header_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams permissions_policy_header_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView>>(
        in_permissions_policy_header, permissions_policy_header_fragment, &permissions_policy_header_validate_params);
    fragment->permissions_policy_header.Set(
        permissions_policy_header_fragment.is_null() ? nullptr : permissions_policy_header_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->permissions_policy_header.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null permissions_policy_header in DidCommitProvisionalLoadParams struct");
    decltype(Traits::document_policy_header(input)) in_document_policy_header = Traits::document_policy_header(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->document_policy_header)::BaseType>
        document_policy_header_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams document_policy_header_validate_params(
        new mojo::internal::ContainerValidateParams(0, ::blink::mojom::internal::DocumentPolicyFeature_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<::blink::mojom::DocumentPolicyFeature, ::blink::mojom::PolicyValueDataView>>(
        in_document_policy_header, document_policy_header_fragment, &document_policy_header_validate_params);
    fragment->document_policy_header.Set(
        document_policy_header_fragment.is_null() ? nullptr : document_policy_header_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->document_policy_header.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null document_policy_header in DidCommitProvisionalLoadParams struct");
    mojo::internal::Serialize<::blink::mojom::InsecureRequestPolicy>(
        Traits::insecure_request_policy(input), &fragment->insecure_request_policy);
    decltype(Traits::insecure_navigations_set(input)) in_insecure_navigations_set = Traits::insecure_navigations_set(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->insecure_navigations_set)::BaseType>
        insecure_navigations_set_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams insecure_navigations_set_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint32_t>>(
        in_insecure_navigations_set, insecure_navigations_set_fragment, &insecure_navigations_set_validate_params);
    fragment->insecure_navigations_set.Set(
        insecure_navigations_set_fragment.is_null() ? nullptr : insecure_navigations_set_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->insecure_navigations_set.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null insecure_navigations_set in DidCommitProvisionalLoadParams struct");
    fragment->has_potentially_trustworthy_unique_origin = Traits::has_potentially_trustworthy_unique_origin(input);
    fragment->request_id = Traits::request_id(input);
    decltype(Traits::navigation_token(input)) in_navigation_token = Traits::navigation_token(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->navigation_token)::BaseType> navigation_token_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_navigation_token, navigation_token_fragment);
    fragment->navigation_token.Set(
        navigation_token_fragment.is_null() ? nullptr : navigation_token_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->navigation_token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null navigation_token in DidCommitProvisionalLoadParams struct");
    decltype(Traits::embedding_token(input)) in_embedding_token = Traits::embedding_token(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->embedding_token)::BaseType> embedding_token_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_embedding_token, embedding_token_fragment);
    fragment->embedding_token.Set(
        embedding_token_fragment.is_null() ? nullptr : embedding_token_fragment.data());
    decltype(Traits::unload_start(input)) in_unload_start = Traits::unload_start(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->unload_start)::BaseType> unload_start_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_unload_start, unload_start_fragment);
    fragment->unload_start.Set(
        unload_start_fragment.is_null() ? nullptr : unload_start_fragment.data());
    decltype(Traits::unload_end(input)) in_unload_end = Traits::unload_end(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->unload_end)::BaseType> unload_end_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_unload_end, unload_end_fragment);
    fragment->unload_end.Set(
        unload_end_fragment.is_null() ? nullptr : unload_end_fragment.data());
    decltype(Traits::commit_navigation_end(input)) in_commit_navigation_end = Traits::commit_navigation_end(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->commit_navigation_end)::BaseType> commit_navigation_end_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_commit_navigation_end, commit_navigation_end_fragment);
    fragment->commit_navigation_end.Set(
        commit_navigation_end_fragment.is_null() ? nullptr : commit_navigation_end_fragment.data());
  }

  static bool Deserialize(::content::mojom::internal::DidCommitProvisionalLoadParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::DidCommitProvisionalLoadParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::DidCommitSameDocumentNavigationParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::DidCommitSameDocumentNavigationParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::DidCommitSameDocumentNavigationParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::blink::mojom::SameDocumentNavigationType>(
        Traits::same_document_navigation_type(input), &fragment->same_document_navigation_type);
    fragment->is_client_redirect = Traits::is_client_redirect(input);
    fragment->started_with_transient_activation = Traits::started_with_transient_activation(input);
  }

  static bool Deserialize(::content::mojom::internal::DidCommitSameDocumentNavigationParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::DidCommitSameDocumentNavigationParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::CookieManagerInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::CookieManagerInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::CookieManagerInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::origin(input)) in_origin = Traits::origin(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->origin)::BaseType> origin_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::OriginDataView>(
        in_origin, origin_fragment);
    fragment->origin.Set(
        origin_fragment.is_null() ? nullptr : origin_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->origin.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null origin in CookieManagerInfo struct");
    decltype(Traits::cookie_manager(input)) in_cookie_manager = Traits::cookie_manager(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::network::mojom::RestrictedCookieManagerInterfaceBase>>(
        in_cookie_manager, &fragment->cookie_manager, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->cookie_manager),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid cookie_manager in CookieManagerInfo struct");
  }

  static bool Deserialize(::content::mojom::internal::CookieManagerInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::CookieManagerInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::StorageInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::StorageInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::StorageInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::local_storage_area(input)) in_local_storage_area = Traits::local_storage_area(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::StorageAreaInterfaceBase>>(
        in_local_storage_area, &fragment->local_storage_area, &fragment.message());
    decltype(Traits::session_storage_area(input)) in_session_storage_area = Traits::session_storage_area(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::StorageAreaInterfaceBase>>(
        in_session_storage_area, &fragment->session_storage_area, &fragment.message());
  }

  static bool Deserialize(::content::mojom::internal::StorageInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::StorageInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace content {
namespace mojom {

inline void DidCommitProvisionalLoadParamsDataView::GetNavigationApiKeyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->navigation_api_key.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetReferrerDataView(
    ::blink::mojom::ReferrerDataView* output) {
  auto pointer = data_->referrer.Get();
  *output = ::blink::mojom::ReferrerDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetContentsMimeTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->contents_mime_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetMethodDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->method.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetPageStateDataView(
    PageStateDataView* output) {
  auto pointer = data_->page_state.Get();
  *output = PageStateDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetOriginCalculationDebugInfoDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->origin_calculation_debug_info.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetPermissionsPolicyHeaderDataView(
    mojo::ArrayDataView<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView>* output) {
  auto pointer = data_->permissions_policy_header.Get();
  *output = mojo::ArrayDataView<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView>(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetDocumentPolicyHeaderDataView(
    mojo::MapDataView<::blink::mojom::DocumentPolicyFeature, ::blink::mojom::PolicyValueDataView>* output) {
  auto pointer = data_->document_policy_header.Get();
  *output = mojo::MapDataView<::blink::mojom::DocumentPolicyFeature, ::blink::mojom::PolicyValueDataView>(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetInsecureNavigationsSetDataView(
    mojo::ArrayDataView<uint32_t>* output) {
  auto pointer = data_->insecure_navigations_set.Get();
  *output = mojo::ArrayDataView<uint32_t>(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetNavigationTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->navigation_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetEmbeddingTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->embedding_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetUnloadStartDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->unload_start.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetUnloadEndDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->unload_end.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void DidCommitProvisionalLoadParamsDataView::GetCommitNavigationEndDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->commit_navigation_end.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}




inline void CookieManagerInfoDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace content

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // CONTENT_COMMON_NAVIGATION_CLIENT_MOJOM_SHARED_H_