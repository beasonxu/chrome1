// content/common/navigation_client.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_NAVIGATION_CLIENT_MOJOM_SHARED_INTERNAL_H_
#define CONTENT_COMMON_NAVIGATION_CLIENT_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "content/common/frame_messages.mojom-shared-internal.h"
#include "content/public/common/alternative_error_page_override_info.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared-internal.h"
#include "services/network/public/mojom/network_param.mojom-shared-internal.h"
#include "services/network/public/mojom/restricted_cookie_manager.mojom-shared-internal.h"
#include "services/network/public/mojom/url_loader.mojom-shared-internal.h"
#include "services/network/public/mojom/url_loader_factory.mojom-shared-internal.h"
#include "services/network/public/mojom/url_response_head.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/commit_result/commit_result.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/dom_storage/storage_area.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/policy_container.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/loader/code_cache.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/loader/referrer.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/loader/same_document_navigation_type.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/loader/transferrable_url_loader.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/navigation/navigation_params.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/permissions_policy/document_policy_feature.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/permissions_policy/permissions_policy.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/permissions_policy/policy_value.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/security_context/insecure_request_policy.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_container.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace content {
namespace mojom {
namespace internal {
using PageState_Data = mojo::native::internal::NativeStruct_Data;
class DidCommitProvisionalLoadParams_Data;
class DidCommitSameDocumentNavigationParams_Data;
class CookieManagerInfo_Data;
class StorageInfo_Data;
using NavigationGesture_Data =
    mojo::internal::NativeEnum_Data;
using PageTransition_Data =
    mojo::internal::NativeEnum_Data;

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) DidCommitProvisionalLoadParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t item_sequence_number;
  int64_t document_sequence_number;
  mojo::internal::Pointer<mojo::internal::String_Data> navigation_api_key;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::blink::mojom::internal::Referrer_Data> referrer;
  int32_t transition;
  uint8_t should_update_history : 1;
  uint8_t did_create_new_entry : 1;
  uint8_t should_replace_current_entry : 1;
  uint8_t url_is_unreachable : 1;
  uint8_t is_overriding_user_agent : 1;
  uint8_t history_list_was_cleared : 1;
  uint8_t has_potentially_trustworthy_unique_origin : 1;
  uint8_t pad12_[3];
  mojo::internal::Pointer<mojo::internal::String_Data> contents_mime_type;
  mojo::internal::Pointer<mojo::internal::String_Data> method;
  int64_t post_id;
  int32_t http_status_code;
  int32_t insecure_request_policy;
  mojo::internal::Pointer<internal::PageState_Data> page_state;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Pointer<mojo::internal::String_Data> origin_calculation_debug_info;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::blink::mojom::internal::ParsedPermissionsPolicyDeclaration_Data>>> permissions_policy_header;
  mojo::internal::Pointer<mojo::internal::Map_Data<int32_t, ::blink::mojom::internal::PolicyValue_Data>> document_policy_header;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint32_t>> insecure_navigations_set;
  int32_t request_id;
  uint8_t pad24_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> navigation_token;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> embedding_token;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> unload_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> unload_end;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> commit_navigation_end;

 private:
  friend class mojo::internal::MessageFragment<DidCommitProvisionalLoadParams_Data>;

  DidCommitProvisionalLoadParams_Data();
  ~DidCommitProvisionalLoadParams_Data() = delete;
};
static_assert(sizeof(DidCommitProvisionalLoadParams_Data) == 184,
              "Bad sizeof(DidCommitProvisionalLoadParams_Data)");
// Used by DidCommitProvisionalLoadParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct DidCommitProvisionalLoadParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  DidCommitProvisionalLoadParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~DidCommitProvisionalLoadParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<DidCommitProvisionalLoadParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    DidCommitProvisionalLoadParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) DidCommitSameDocumentNavigationParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t same_document_navigation_type;
  uint8_t is_client_redirect : 1;
  uint8_t started_with_transient_activation : 1;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<DidCommitSameDocumentNavigationParams_Data>;

  DidCommitSameDocumentNavigationParams_Data();
  ~DidCommitSameDocumentNavigationParams_Data() = delete;
};
static_assert(sizeof(DidCommitSameDocumentNavigationParams_Data) == 16,
              "Bad sizeof(DidCommitSameDocumentNavigationParams_Data)");
// Used by DidCommitSameDocumentNavigationParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct DidCommitSameDocumentNavigationParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  DidCommitSameDocumentNavigationParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~DidCommitSameDocumentNavigationParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<DidCommitSameDocumentNavigationParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    DidCommitSameDocumentNavigationParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) CookieManagerInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Interface_Data cookie_manager;

 private:
  friend class mojo::internal::MessageFragment<CookieManagerInfo_Data>;

  CookieManagerInfo_Data();
  ~CookieManagerInfo_Data() = delete;
};
static_assert(sizeof(CookieManagerInfo_Data) == 24,
              "Bad sizeof(CookieManagerInfo_Data)");
// Used by CookieManagerInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CookieManagerInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CookieManagerInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CookieManagerInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CookieManagerInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CookieManagerInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) StorageInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data local_storage_area;
  mojo::internal::Interface_Data session_storage_area;

 private:
  friend class mojo::internal::MessageFragment<StorageInfo_Data>;

  StorageInfo_Data();
  ~StorageInfo_Data() = delete;
};
static_assert(sizeof(StorageInfo_Data) == 24,
              "Bad sizeof(StorageInfo_Data)");
// Used by StorageInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct StorageInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  StorageInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~StorageInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<StorageInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    StorageInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace content

#endif  // CONTENT_COMMON_NAVIGATION_CLIENT_MOJOM_SHARED_INTERNAL_H_