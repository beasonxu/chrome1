// content/common/aggregatable_report.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_AGGREGATABLE_REPORT_MOJOM_SHARED_H_
#define CONTENT_COMMON_AGGREGATABLE_REPORT_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/common/aggregatable_report.mojom-shared-internal.h"
#include "mojo/public/mojom/base/int128.mojom-shared.h"



#include "base/component_export.h"




namespace content {
namespace mojom {
class AggregatableReportHistogramContributionDataView;



}  // namespace mojom
}  // namespace content

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::content::mojom::AggregatableReportHistogramContributionDataView> {
  using Data = ::content::mojom::internal::AggregatableReportHistogramContribution_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace content {
namespace mojom {


enum class AggregationServiceMode : int32_t {
  
  kTeeBased = 0,
  
  kExperimentalPoplar = 1,
  
  kDefault = 0,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) std::ostream& operator<<(std::ostream& os, AggregationServiceMode value);
inline bool IsKnownEnumValue(AggregationServiceMode value) {
  return internal::AggregationServiceMode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class AggregatableReportHistogramContributionDataView {
 public:
  AggregatableReportHistogramContributionDataView() = default;

  AggregatableReportHistogramContributionDataView(
      internal::AggregatableReportHistogramContribution_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketDataView(
      ::mojo_base::mojom::Uint128DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucket(UserType* output) {
    
    auto* pointer = data_->bucket.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::Uint128DataView>(
        pointer, output, message_);
  }
  int32_t value() const {
    return data_->value;
  }
 private:
  internal::AggregatableReportHistogramContribution_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace content

namespace std {

template <>
struct hash<::content::mojom::AggregationServiceMode>
    : public mojo::internal::EnumHashImpl<::content::mojom::AggregationServiceMode> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::AggregationServiceMode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::content::mojom::AggregationServiceMode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::content::mojom::AggregationServiceMode>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::AggregatableReportHistogramContributionDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::AggregatableReportHistogramContributionDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::AggregatableReportHistogramContribution_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::bucket(input)) in_bucket = Traits::bucket(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->bucket)::BaseType> bucket_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::Uint128DataView>(
        in_bucket, bucket_fragment);
    fragment->bucket.Set(
        bucket_fragment.is_null() ? nullptr : bucket_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->bucket.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bucket in AggregatableReportHistogramContribution struct");
    fragment->value = Traits::value(input);
  }

  static bool Deserialize(::content::mojom::internal::AggregatableReportHistogramContribution_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::AggregatableReportHistogramContributionDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace content {
namespace mojom {

inline void AggregatableReportHistogramContributionDataView::GetBucketDataView(
    ::mojo_base::mojom::Uint128DataView* output) {
  auto pointer = data_->bucket.Get();
  *output = ::mojo_base::mojom::Uint128DataView(pointer, message_);
}



}  // namespace mojom
}  // namespace content

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) TraceFormatTraits<::content::mojom::AggregationServiceMode> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::content::mojom::AggregationServiceMode value);
};

} // namespace perfetto

#endif  // CONTENT_COMMON_AGGREGATABLE_REPORT_MOJOM_SHARED_H_