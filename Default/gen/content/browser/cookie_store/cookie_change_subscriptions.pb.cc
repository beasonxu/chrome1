// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cookie_change_subscriptions.proto

#include "cookie_change_subscriptions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
namespace proto {
PROTOBUF_CONSTEXPR CookieChangeSubscriptionProto::CookieChangeSubscriptionProto(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , match_type_(0)
{}
struct CookieChangeSubscriptionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CookieChangeSubscriptionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CookieChangeSubscriptionProtoDefaultTypeInternal() {}
  union {
    CookieChangeSubscriptionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CookieChangeSubscriptionProtoDefaultTypeInternal _CookieChangeSubscriptionProto_default_instance_;
PROTOBUF_CONSTEXPR CookieChangeSubscriptionsProto::CookieChangeSubscriptionsProto(
    ::_pbi::ConstantInitialized)
  : subscriptions_(){}
struct CookieChangeSubscriptionsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CookieChangeSubscriptionsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CookieChangeSubscriptionsProtoDefaultTypeInternal() {}
  union {
    CookieChangeSubscriptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CookieChangeSubscriptionsProtoDefaultTypeInternal _CookieChangeSubscriptionsProto_default_instance_;
}  // namespace proto
}  // namespace content
namespace content {
namespace proto {
bool CookieMatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CookieMatchType_strings[2] = {};

static const char CookieMatchType_names[] =
  "EQUALS"
  "STARTS_WITH";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CookieMatchType_entries[] = {
  { {CookieMatchType_names + 0, 6}, 0 },
  { {CookieMatchType_names + 6, 11}, 1 },
};

static const int CookieMatchType_entries_by_number[] = {
  0, // 0 -> EQUALS
  1, // 1 -> STARTS_WITH
};

const std::string& CookieMatchType_Name(
    CookieMatchType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CookieMatchType_entries,
          CookieMatchType_entries_by_number,
          2, CookieMatchType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CookieMatchType_entries,
      CookieMatchType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CookieMatchType_strings[idx].get();
}
bool CookieMatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CookieMatchType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CookieMatchType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CookieMatchType>(int_value);
  }
  return success;
}

// ===================================================================

class CookieChangeSubscriptionProto::_Internal {
 public:
};

CookieChangeSubscriptionProto::CookieChangeSubscriptionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.CookieChangeSubscriptionProto)
}
CookieChangeSubscriptionProto::CookieChangeSubscriptionProto(const CookieChangeSubscriptionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  match_type_ = from.match_type_;
  // @@protoc_insertion_point(copy_constructor:content.proto.CookieChangeSubscriptionProto)
}

inline void CookieChangeSubscriptionProto::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
match_type_ = 0;
}

CookieChangeSubscriptionProto::~CookieChangeSubscriptionProto() {
  // @@protoc_insertion_point(destructor:content.proto.CookieChangeSubscriptionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CookieChangeSubscriptionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  name_.Destroy();
}

void CookieChangeSubscriptionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CookieChangeSubscriptionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CookieChangeSubscriptionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  name_.ClearToEmpty();
  match_type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* CookieChangeSubscriptionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .content.proto.CookieMatchType match_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_type(static_cast<::content::proto::CookieMatchType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CookieChangeSubscriptionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.CookieChangeSubscriptionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "content.proto.CookieChangeSubscriptionProto.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "content.proto.CookieChangeSubscriptionProto.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .content.proto.CookieMatchType match_type = 3;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_match_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.CookieChangeSubscriptionProto)
  return target;
}

size_t CookieChangeSubscriptionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CookieChangeSubscriptionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .content.proto.CookieMatchType match_type = 3;
  if (this->_internal_match_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CookieChangeSubscriptionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CookieChangeSubscriptionProto*>(
      &from));
}

void CookieChangeSubscriptionProto::MergeFrom(const CookieChangeSubscriptionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CookieChangeSubscriptionProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_match_type() != 0) {
    _internal_set_match_type(from._internal_match_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CookieChangeSubscriptionProto::CopyFrom(const CookieChangeSubscriptionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CookieChangeSubscriptionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CookieChangeSubscriptionProto::IsInitialized() const {
  return true;
}

void CookieChangeSubscriptionProto::InternalSwap(CookieChangeSubscriptionProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(match_type_, other->match_type_);
}

std::string CookieChangeSubscriptionProto::GetTypeName() const {
  return "content.proto.CookieChangeSubscriptionProto";
}


// ===================================================================

class CookieChangeSubscriptionsProto::_Internal {
 public:
};

CookieChangeSubscriptionsProto::CookieChangeSubscriptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  subscriptions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.CookieChangeSubscriptionsProto)
}
CookieChangeSubscriptionsProto::CookieChangeSubscriptionsProto(const CookieChangeSubscriptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      subscriptions_(from.subscriptions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:content.proto.CookieChangeSubscriptionsProto)
}

inline void CookieChangeSubscriptionsProto::SharedCtor() {
}

CookieChangeSubscriptionsProto::~CookieChangeSubscriptionsProto() {
  // @@protoc_insertion_point(destructor:content.proto.CookieChangeSubscriptionsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CookieChangeSubscriptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CookieChangeSubscriptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CookieChangeSubscriptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CookieChangeSubscriptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CookieChangeSubscriptionsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CookieChangeSubscriptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.CookieChangeSubscriptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_subscriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.CookieChangeSubscriptionsProto)
  return target;
}

size_t CookieChangeSubscriptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CookieChangeSubscriptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
  total_size += 1UL * this->_internal_subscriptions_size();
  for (const auto& msg : this->subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CookieChangeSubscriptionsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CookieChangeSubscriptionsProto*>(
      &from));
}

void CookieChangeSubscriptionsProto::MergeFrom(const CookieChangeSubscriptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CookieChangeSubscriptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CookieChangeSubscriptionsProto::CopyFrom(const CookieChangeSubscriptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CookieChangeSubscriptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CookieChangeSubscriptionsProto::IsInitialized() const {
  return true;
}

void CookieChangeSubscriptionsProto::InternalSwap(CookieChangeSubscriptionsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  subscriptions_.InternalSwap(&other->subscriptions_);
}

std::string CookieChangeSubscriptionsProto::GetTypeName() const {
  return "content.proto.CookieChangeSubscriptionsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::proto::CookieChangeSubscriptionProto*
Arena::CreateMaybeMessage< ::content::proto::CookieChangeSubscriptionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::CookieChangeSubscriptionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::CookieChangeSubscriptionsProto*
Arena::CreateMaybeMessage< ::content::proto::CookieChangeSubscriptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::CookieChangeSubscriptionsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
