// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aggregatable_report.proto

#include "aggregatable_report.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
namespace proto {
PROTOBUF_CONSTEXPR AggregatableReportHistogramContribution::AggregatableReportHistogramContribution(
    ::_pbi::ConstantInitialized)
  : bucket_high_(uint64_t{0u})
  , bucket_low_(uint64_t{0u})
  , value_(0){}
struct AggregatableReportHistogramContributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregatableReportHistogramContributionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregatableReportHistogramContributionDefaultTypeInternal() {}
  union {
    AggregatableReportHistogramContribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregatableReportHistogramContributionDefaultTypeInternal _AggregatableReportHistogramContribution_default_instance_;
PROTOBUF_CONSTEXPR AggregationServicePayloadContents::AggregationServicePayloadContents(
    ::_pbi::ConstantInitialized)
  : contributions_()
  , operation_(0)

  , aggregation_mode_(0)
{}
struct AggregationServicePayloadContentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregationServicePayloadContentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregationServicePayloadContentsDefaultTypeInternal() {}
  union {
    AggregationServicePayloadContents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregationServicePayloadContentsDefaultTypeInternal _AggregationServicePayloadContents_default_instance_;
PROTOBUF_CONSTEXPR AggregatableReportSharedInfo::AggregatableReportSharedInfo(
    ::_pbi::ConstantInitialized)
  : report_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reporting_origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , api_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , api_identifier_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , scheduled_report_time_(int64_t{0})
  , debug_mode_(0)
{}
struct AggregatableReportSharedInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregatableReportSharedInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregatableReportSharedInfoDefaultTypeInternal() {}
  union {
    AggregatableReportSharedInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregatableReportSharedInfoDefaultTypeInternal _AggregatableReportSharedInfo_default_instance_;
PROTOBUF_CONSTEXPR AggregatableReportRequest::AggregatableReportRequest(
    ::_pbi::ConstantInitialized)
  : reporting_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , payload_contents_(nullptr)
  , shared_info_(nullptr){}
struct AggregatableReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregatableReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregatableReportRequestDefaultTypeInternal() {}
  union {
    AggregatableReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregatableReportRequestDefaultTypeInternal _AggregatableReportRequest_default_instance_;
}  // namespace proto
}  // namespace content
namespace content {
namespace proto {
bool AggregationServicePayloadContents_Operation_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AggregationServicePayloadContents_Operation_strings[1] = {};

static const char AggregationServicePayloadContents_Operation_names[] =
  "HISTOGRAM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AggregationServicePayloadContents_Operation_entries[] = {
  { {AggregationServicePayloadContents_Operation_names + 0, 9}, 0 },
};

static const int AggregationServicePayloadContents_Operation_entries_by_number[] = {
  0, // 0 -> HISTOGRAM
};

const std::string& AggregationServicePayloadContents_Operation_Name(
    AggregationServicePayloadContents_Operation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AggregationServicePayloadContents_Operation_entries,
          AggregationServicePayloadContents_Operation_entries_by_number,
          1, AggregationServicePayloadContents_Operation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AggregationServicePayloadContents_Operation_entries,
      AggregationServicePayloadContents_Operation_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AggregationServicePayloadContents_Operation_strings[idx].get();
}
bool AggregationServicePayloadContents_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AggregationServicePayloadContents_Operation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AggregationServicePayloadContents_Operation_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<AggregationServicePayloadContents_Operation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AggregationServicePayloadContents_Operation AggregationServicePayloadContents::HISTOGRAM;
constexpr AggregationServicePayloadContents_Operation AggregationServicePayloadContents::Operation_MIN;
constexpr AggregationServicePayloadContents_Operation AggregationServicePayloadContents::Operation_MAX;
constexpr int AggregationServicePayloadContents::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool AggregatableReportSharedInfo_DebugMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AggregatableReportSharedInfo_DebugMode_strings[2] = {};

static const char AggregatableReportSharedInfo_DebugMode_names[] =
  "DISABLED"
  "ENABLED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AggregatableReportSharedInfo_DebugMode_entries[] = {
  { {AggregatableReportSharedInfo_DebugMode_names + 0, 8}, 0 },
  { {AggregatableReportSharedInfo_DebugMode_names + 8, 7}, 1 },
};

static const int AggregatableReportSharedInfo_DebugMode_entries_by_number[] = {
  0, // 0 -> DISABLED
  1, // 1 -> ENABLED
};

const std::string& AggregatableReportSharedInfo_DebugMode_Name(
    AggregatableReportSharedInfo_DebugMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AggregatableReportSharedInfo_DebugMode_entries,
          AggregatableReportSharedInfo_DebugMode_entries_by_number,
          2, AggregatableReportSharedInfo_DebugMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AggregatableReportSharedInfo_DebugMode_entries,
      AggregatableReportSharedInfo_DebugMode_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AggregatableReportSharedInfo_DebugMode_strings[idx].get();
}
bool AggregatableReportSharedInfo_DebugMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AggregatableReportSharedInfo_DebugMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AggregatableReportSharedInfo_DebugMode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<AggregatableReportSharedInfo_DebugMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AggregatableReportSharedInfo_DebugMode AggregatableReportSharedInfo::DISABLED;
constexpr AggregatableReportSharedInfo_DebugMode AggregatableReportSharedInfo::ENABLED;
constexpr AggregatableReportSharedInfo_DebugMode AggregatableReportSharedInfo::DebugMode_MIN;
constexpr AggregatableReportSharedInfo_DebugMode AggregatableReportSharedInfo::DebugMode_MAX;
constexpr int AggregatableReportSharedInfo::DebugMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool AggregationServiceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AggregationServiceMode_strings[2] = {};

static const char AggregationServiceMode_names[] =
  "EXPERIMENTAL_POPLAR"
  "TEE_BASED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AggregationServiceMode_entries[] = {
  { {AggregationServiceMode_names + 0, 19}, 1 },
  { {AggregationServiceMode_names + 19, 9}, 0 },
};

static const int AggregationServiceMode_entries_by_number[] = {
  1, // 0 -> TEE_BASED
  0, // 1 -> EXPERIMENTAL_POPLAR
};

const std::string& AggregationServiceMode_Name(
    AggregationServiceMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AggregationServiceMode_entries,
          AggregationServiceMode_entries_by_number,
          2, AggregationServiceMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AggregationServiceMode_entries,
      AggregationServiceMode_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AggregationServiceMode_strings[idx].get();
}
bool AggregationServiceMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AggregationServiceMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AggregationServiceMode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<AggregationServiceMode>(int_value);
  }
  return success;
}

// ===================================================================

class AggregatableReportHistogramContribution::_Internal {
 public:
};

AggregatableReportHistogramContribution::AggregatableReportHistogramContribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.AggregatableReportHistogramContribution)
}
AggregatableReportHistogramContribution::AggregatableReportHistogramContribution(const AggregatableReportHistogramContribution& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&bucket_high_, &from.bucket_high_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&bucket_high_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:content.proto.AggregatableReportHistogramContribution)
}

inline void AggregatableReportHistogramContribution::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bucket_high_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&bucket_high_)) + sizeof(value_));
}

AggregatableReportHistogramContribution::~AggregatableReportHistogramContribution() {
  // @@protoc_insertion_point(destructor:content.proto.AggregatableReportHistogramContribution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregatableReportHistogramContribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggregatableReportHistogramContribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregatableReportHistogramContribution::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.AggregatableReportHistogramContribution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bucket_high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&bucket_high_)) + sizeof(value_));
  _internal_metadata_.Clear<std::string>();
}

const char* AggregatableReportHistogramContribution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 bucket_high = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bucket_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bucket_low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bucket_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregatableReportHistogramContribution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.AggregatableReportHistogramContribution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 bucket_high = 1;
  if (this->_internal_bucket_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bucket_high(), target);
  }

  // uint64 bucket_low = 2;
  if (this->_internal_bucket_low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bucket_low(), target);
  }

  // int32 value = 3;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.AggregatableReportHistogramContribution)
  return target;
}

size_t AggregatableReportHistogramContribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.AggregatableReportHistogramContribution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 bucket_high = 1;
  if (this->_internal_bucket_high() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bucket_high());
  }

  // uint64 bucket_low = 2;
  if (this->_internal_bucket_low() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bucket_low());
  }

  // int32 value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatableReportHistogramContribution::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AggregatableReportHistogramContribution*>(
      &from));
}

void AggregatableReportHistogramContribution::MergeFrom(const AggregatableReportHistogramContribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.AggregatableReportHistogramContribution)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bucket_high() != 0) {
    _internal_set_bucket_high(from._internal_bucket_high());
  }
  if (from._internal_bucket_low() != 0) {
    _internal_set_bucket_low(from._internal_bucket_low());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AggregatableReportHistogramContribution::CopyFrom(const AggregatableReportHistogramContribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.AggregatableReportHistogramContribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatableReportHistogramContribution::IsInitialized() const {
  return true;
}

void AggregatableReportHistogramContribution::InternalSwap(AggregatableReportHistogramContribution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregatableReportHistogramContribution, value_)
      + sizeof(AggregatableReportHistogramContribution::value_)
      - PROTOBUF_FIELD_OFFSET(AggregatableReportHistogramContribution, bucket_high_)>(
          reinterpret_cast<char*>(&bucket_high_),
          reinterpret_cast<char*>(&other->bucket_high_));
}

std::string AggregatableReportHistogramContribution::GetTypeName() const {
  return "content.proto.AggregatableReportHistogramContribution";
}


// ===================================================================

class AggregationServicePayloadContents::_Internal {
 public:
};

AggregationServicePayloadContents::AggregationServicePayloadContents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  contributions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.AggregationServicePayloadContents)
}
AggregationServicePayloadContents::AggregationServicePayloadContents(const AggregationServicePayloadContents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      contributions_(from.contributions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&aggregation_mode_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(aggregation_mode_));
  // @@protoc_insertion_point(copy_constructor:content.proto.AggregationServicePayloadContents)
}

inline void AggregationServicePayloadContents::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&operation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aggregation_mode_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(aggregation_mode_));
}

AggregationServicePayloadContents::~AggregationServicePayloadContents() {
  // @@protoc_insertion_point(destructor:content.proto.AggregationServicePayloadContents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregationServicePayloadContents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggregationServicePayloadContents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregationServicePayloadContents::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.AggregationServicePayloadContents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contributions_.Clear();
  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregation_mode_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(aggregation_mode_));
  _internal_metadata_.Clear<std::string>();
}

const char* AggregationServicePayloadContents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .content.proto.AggregationServicePayloadContents.Operation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::content::proto::AggregationServicePayloadContents_Operation>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .content.proto.AggregatableReportHistogramContribution contributions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .content.proto.AggregationServiceMode aggregation_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_mode(static_cast<::content::proto::AggregationServiceMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregationServicePayloadContents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.AggregationServicePayloadContents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .content.proto.AggregationServicePayloadContents.Operation operation = 1;
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // repeated .content.proto.AggregatableReportHistogramContribution contributions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contributions_size()); i < n; i++) {
    const auto& repfield = this->_internal_contributions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .content.proto.AggregationServiceMode aggregation_mode = 3;
  if (this->_internal_aggregation_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_aggregation_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.AggregationServicePayloadContents)
  return target;
}

size_t AggregationServicePayloadContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.AggregationServicePayloadContents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.AggregatableReportHistogramContribution contributions = 2;
  total_size += 1UL * this->_internal_contributions_size();
  for (const auto& msg : this->contributions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .content.proto.AggregationServicePayloadContents.Operation operation = 1;
  if (this->_internal_operation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
  }

  // .content.proto.AggregationServiceMode aggregation_mode = 3;
  if (this->_internal_aggregation_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_aggregation_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregationServicePayloadContents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AggregationServicePayloadContents*>(
      &from));
}

void AggregationServicePayloadContents::MergeFrom(const AggregationServicePayloadContents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.AggregationServicePayloadContents)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  contributions_.MergeFrom(from.contributions_);
  if (from._internal_operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from._internal_aggregation_mode() != 0) {
    _internal_set_aggregation_mode(from._internal_aggregation_mode());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AggregationServicePayloadContents::CopyFrom(const AggregationServicePayloadContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.AggregationServicePayloadContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregationServicePayloadContents::IsInitialized() const {
  return true;
}

void AggregationServicePayloadContents::InternalSwap(AggregationServicePayloadContents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  contributions_.InternalSwap(&other->contributions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregationServicePayloadContents, aggregation_mode_)
      + sizeof(AggregationServicePayloadContents::aggregation_mode_)
      - PROTOBUF_FIELD_OFFSET(AggregationServicePayloadContents, operation_)>(
          reinterpret_cast<char*>(&operation_),
          reinterpret_cast<char*>(&other->operation_));
}

std::string AggregationServicePayloadContents::GetTypeName() const {
  return "content.proto.AggregationServicePayloadContents";
}


// ===================================================================

class AggregatableReportSharedInfo::_Internal {
 public:
};

AggregatableReportSharedInfo::AggregatableReportSharedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.AggregatableReportSharedInfo)
}
AggregatableReportSharedInfo::AggregatableReportSharedInfo(const AggregatableReportSharedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  report_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    report_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_report_id().empty()) {
    report_id_.Set(from._internal_report_id(), 
      GetArenaForAllocation());
  }
  reporting_origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reporting_origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reporting_origin().empty()) {
    reporting_origin_.Set(from._internal_reporting_origin(), 
      GetArenaForAllocation());
  }
  api_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    api_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_api_version().empty()) {
    api_version_.Set(from._internal_api_version(), 
      GetArenaForAllocation());
  }
  api_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    api_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_api_identifier().empty()) {
    api_identifier_.Set(from._internal_api_identifier(), 
      GetArenaForAllocation());
  }
  ::memcpy(&scheduled_report_time_, &from.scheduled_report_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&debug_mode_) -
    reinterpret_cast<char*>(&scheduled_report_time_)) + sizeof(debug_mode_));
  // @@protoc_insertion_point(copy_constructor:content.proto.AggregatableReportSharedInfo)
}

inline void AggregatableReportSharedInfo::SharedCtor() {
report_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  report_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reporting_origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reporting_origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
api_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  api_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
api_identifier_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  api_identifier_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scheduled_report_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&debug_mode_) -
    reinterpret_cast<char*>(&scheduled_report_time_)) + sizeof(debug_mode_));
}

AggregatableReportSharedInfo::~AggregatableReportSharedInfo() {
  // @@protoc_insertion_point(destructor:content.proto.AggregatableReportSharedInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregatableReportSharedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  report_id_.Destroy();
  reporting_origin_.Destroy();
  api_version_.Destroy();
  api_identifier_.Destroy();
}

void AggregatableReportSharedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregatableReportSharedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.AggregatableReportSharedInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_id_.ClearToEmpty();
  reporting_origin_.ClearToEmpty();
  api_version_.ClearToEmpty();
  api_identifier_.ClearToEmpty();
  ::memset(&scheduled_report_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_mode_) -
      reinterpret_cast<char*>(&scheduled_report_time_)) + sizeof(debug_mode_));
  _internal_metadata_.Clear<std::string>();
}

const char* AggregatableReportSharedInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 scheduled_report_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          scheduled_report_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string report_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_report_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string reporting_origin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reporting_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .content.proto.AggregatableReportSharedInfo.DebugMode debug_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_debug_mode(static_cast<::content::proto::AggregatableReportSharedInfo_DebugMode>(val));
        } else
          goto handle_unusual;
        continue;
      // string api_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_api_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string api_identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_api_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregatableReportSharedInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.AggregatableReportSharedInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 scheduled_report_time = 1;
  if (this->_internal_scheduled_report_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_scheduled_report_time(), target);
  }

  // string report_id = 2;
  if (!this->_internal_report_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_report_id().data(), static_cast<int>(this->_internal_report_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "content.proto.AggregatableReportSharedInfo.report_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_report_id(), target);
  }

  // string reporting_origin = 3;
  if (!this->_internal_reporting_origin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reporting_origin().data(), static_cast<int>(this->_internal_reporting_origin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "content.proto.AggregatableReportSharedInfo.reporting_origin");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reporting_origin(), target);
  }

  // .content.proto.AggregatableReportSharedInfo.DebugMode debug_mode = 4;
  if (this->_internal_debug_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_debug_mode(), target);
  }

  // string api_version = 5;
  if (!this->_internal_api_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_version().data(), static_cast<int>(this->_internal_api_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "content.proto.AggregatableReportSharedInfo.api_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_api_version(), target);
  }

  // string api_identifier = 6;
  if (!this->_internal_api_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_identifier().data(), static_cast<int>(this->_internal_api_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "content.proto.AggregatableReportSharedInfo.api_identifier");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_api_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.AggregatableReportSharedInfo)
  return target;
}

size_t AggregatableReportSharedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.AggregatableReportSharedInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string report_id = 2;
  if (!this->_internal_report_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_report_id());
  }

  // string reporting_origin = 3;
  if (!this->_internal_reporting_origin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reporting_origin());
  }

  // string api_version = 5;
  if (!this->_internal_api_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_version());
  }

  // string api_identifier = 6;
  if (!this->_internal_api_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_identifier());
  }

  // int64 scheduled_report_time = 1;
  if (this->_internal_scheduled_report_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_scheduled_report_time());
  }

  // .content.proto.AggregatableReportSharedInfo.DebugMode debug_mode = 4;
  if (this->_internal_debug_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_debug_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatableReportSharedInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AggregatableReportSharedInfo*>(
      &from));
}

void AggregatableReportSharedInfo::MergeFrom(const AggregatableReportSharedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.AggregatableReportSharedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_report_id().empty()) {
    _internal_set_report_id(from._internal_report_id());
  }
  if (!from._internal_reporting_origin().empty()) {
    _internal_set_reporting_origin(from._internal_reporting_origin());
  }
  if (!from._internal_api_version().empty()) {
    _internal_set_api_version(from._internal_api_version());
  }
  if (!from._internal_api_identifier().empty()) {
    _internal_set_api_identifier(from._internal_api_identifier());
  }
  if (from._internal_scheduled_report_time() != 0) {
    _internal_set_scheduled_report_time(from._internal_scheduled_report_time());
  }
  if (from._internal_debug_mode() != 0) {
    _internal_set_debug_mode(from._internal_debug_mode());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AggregatableReportSharedInfo::CopyFrom(const AggregatableReportSharedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.AggregatableReportSharedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatableReportSharedInfo::IsInitialized() const {
  return true;
}

void AggregatableReportSharedInfo::InternalSwap(AggregatableReportSharedInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &report_id_, lhs_arena,
      &other->report_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reporting_origin_, lhs_arena,
      &other->reporting_origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &api_version_, lhs_arena,
      &other->api_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &api_identifier_, lhs_arena,
      &other->api_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregatableReportSharedInfo, debug_mode_)
      + sizeof(AggregatableReportSharedInfo::debug_mode_)
      - PROTOBUF_FIELD_OFFSET(AggregatableReportSharedInfo, scheduled_report_time_)>(
          reinterpret_cast<char*>(&scheduled_report_time_),
          reinterpret_cast<char*>(&other->scheduled_report_time_));
}

std::string AggregatableReportSharedInfo::GetTypeName() const {
  return "content.proto.AggregatableReportSharedInfo";
}


// ===================================================================

class AggregatableReportRequest::_Internal {
 public:
  static const ::content::proto::AggregationServicePayloadContents& payload_contents(const AggregatableReportRequest* msg);
  static const ::content::proto::AggregatableReportSharedInfo& shared_info(const AggregatableReportRequest* msg);
};

const ::content::proto::AggregationServicePayloadContents&
AggregatableReportRequest::_Internal::payload_contents(const AggregatableReportRequest* msg) {
  return *msg->payload_contents_;
}
const ::content::proto::AggregatableReportSharedInfo&
AggregatableReportRequest::_Internal::shared_info(const AggregatableReportRequest* msg) {
  return *msg->shared_info_;
}
AggregatableReportRequest::AggregatableReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.AggregatableReportRequest)
}
AggregatableReportRequest::AggregatableReportRequest(const AggregatableReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  reporting_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reporting_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reporting_path().empty()) {
    reporting_path_.Set(from._internal_reporting_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_payload_contents()) {
    payload_contents_ = new ::content::proto::AggregationServicePayloadContents(*from.payload_contents_);
  } else {
    payload_contents_ = nullptr;
  }
  if (from._internal_has_shared_info()) {
    shared_info_ = new ::content::proto::AggregatableReportSharedInfo(*from.shared_info_);
  } else {
    shared_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:content.proto.AggregatableReportRequest)
}

inline void AggregatableReportRequest::SharedCtor() {
reporting_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reporting_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payload_contents_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shared_info_) -
    reinterpret_cast<char*>(&payload_contents_)) + sizeof(shared_info_));
}

AggregatableReportRequest::~AggregatableReportRequest() {
  // @@protoc_insertion_point(destructor:content.proto.AggregatableReportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregatableReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reporting_path_.Destroy();
  if (this != internal_default_instance()) delete payload_contents_;
  if (this != internal_default_instance()) delete shared_info_;
}

void AggregatableReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregatableReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.AggregatableReportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reporting_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && payload_contents_ != nullptr) {
    delete payload_contents_;
  }
  payload_contents_ = nullptr;
  if (GetArenaForAllocation() == nullptr && shared_info_ != nullptr) {
    delete shared_info_;
  }
  shared_info_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* AggregatableReportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .content.proto.AggregationServicePayloadContents payload_contents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload_contents(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content.proto.AggregatableReportSharedInfo shared_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shared_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reporting_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reporting_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregatableReportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.AggregatableReportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .content.proto.AggregationServicePayloadContents payload_contents = 1;
  if (this->_internal_has_payload_contents()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::payload_contents(this),
        _Internal::payload_contents(this).GetCachedSize(), target, stream);
  }

  // .content.proto.AggregatableReportSharedInfo shared_info = 2;
  if (this->_internal_has_shared_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shared_info(this),
        _Internal::shared_info(this).GetCachedSize(), target, stream);
  }

  // string reporting_path = 3;
  if (!this->_internal_reporting_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reporting_path().data(), static_cast<int>(this->_internal_reporting_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "content.proto.AggregatableReportRequest.reporting_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reporting_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.AggregatableReportRequest)
  return target;
}

size_t AggregatableReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.AggregatableReportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reporting_path = 3;
  if (!this->_internal_reporting_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reporting_path());
  }

  // .content.proto.AggregationServicePayloadContents payload_contents = 1;
  if (this->_internal_has_payload_contents()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_contents_);
  }

  // .content.proto.AggregatableReportSharedInfo shared_info = 2;
  if (this->_internal_has_shared_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shared_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatableReportRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AggregatableReportRequest*>(
      &from));
}

void AggregatableReportRequest::MergeFrom(const AggregatableReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.AggregatableReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reporting_path().empty()) {
    _internal_set_reporting_path(from._internal_reporting_path());
  }
  if (from._internal_has_payload_contents()) {
    _internal_mutable_payload_contents()->::content::proto::AggregationServicePayloadContents::MergeFrom(from._internal_payload_contents());
  }
  if (from._internal_has_shared_info()) {
    _internal_mutable_shared_info()->::content::proto::AggregatableReportSharedInfo::MergeFrom(from._internal_shared_info());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AggregatableReportRequest::CopyFrom(const AggregatableReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.AggregatableReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatableReportRequest::IsInitialized() const {
  return true;
}

void AggregatableReportRequest::InternalSwap(AggregatableReportRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reporting_path_, lhs_arena,
      &other->reporting_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregatableReportRequest, shared_info_)
      + sizeof(AggregatableReportRequest::shared_info_)
      - PROTOBUF_FIELD_OFFSET(AggregatableReportRequest, payload_contents_)>(
          reinterpret_cast<char*>(&payload_contents_),
          reinterpret_cast<char*>(&other->payload_contents_));
}

std::string AggregatableReportRequest::GetTypeName() const {
  return "content.proto.AggregatableReportRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::proto::AggregatableReportHistogramContribution*
Arena::CreateMaybeMessage< ::content::proto::AggregatableReportHistogramContribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::AggregatableReportHistogramContribution >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::AggregationServicePayloadContents*
Arena::CreateMaybeMessage< ::content::proto::AggregationServicePayloadContents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::AggregationServicePayloadContents >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::AggregatableReportSharedInfo*
Arena::CreateMaybeMessage< ::content::proto::AggregatableReportSharedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::AggregatableReportSharedInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::AggregatableReportRequest*
Arena::CreateMaybeMessage< ::content::proto::AggregatableReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::AggregatableReportRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
