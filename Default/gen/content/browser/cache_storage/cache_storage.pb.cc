// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache_storage.proto

#include "cache_storage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
namespace proto {
PROTOBUF_CONSTEXPR CacheStorageIndex_Cache::CacheStorageIndex_Cache(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cache_dir_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , padding_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , size_(int64_t{0})
  , padding_(int64_t{0})
  , padding_version_(0){}
struct CacheStorageIndex_CacheDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CacheStorageIndex_CacheDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CacheStorageIndex_CacheDefaultTypeInternal() {}
  union {
    CacheStorageIndex_Cache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CacheStorageIndex_CacheDefaultTypeInternal _CacheStorageIndex_Cache_default_instance_;
PROTOBUF_CONSTEXPR CacheStorageIndex::CacheStorageIndex(
    ::_pbi::ConstantInitialized)
  : cache_()
  , origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , storage_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CacheStorageIndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CacheStorageIndexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CacheStorageIndexDefaultTypeInternal() {}
  union {
    CacheStorageIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CacheStorageIndexDefaultTypeInternal _CacheStorageIndex_default_instance_;
PROTOBUF_CONSTEXPR CacheHeaderMap::CacheHeaderMap(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CacheHeaderMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CacheHeaderMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CacheHeaderMapDefaultTypeInternal() {}
  union {
    CacheHeaderMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CacheHeaderMapDefaultTypeInternal _CacheHeaderMap_default_instance_;
PROTOBUF_CONSTEXPR CacheRequest::CacheRequest(
    ::_pbi::ConstantInitialized)
  : headers_()
  , method_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CacheRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CacheRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CacheRequestDefaultTypeInternal() {}
  union {
    CacheRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CacheRequestDefaultTypeInternal _CacheRequest_default_instance_;
PROTOBUF_CONSTEXPR CacheResponse::CacheResponse(
    ::_pbi::ConstantInitialized)
  : headers_()
  , cors_exposed_header_names_()
  , url_list_()
  , status_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , alpn_negotiated_protocol_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_method_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_code_(0)
  , response_type_(0)

  , response_time_(int64_t{0})
  , connection_info_(0)
  , loaded_with_credentials_(false)
  , was_fetched_via_spdy_(false)
  , request_include_credentials_(false)
  , padding_(int64_t{0})
  , side_data_padding_(int64_t{0}){}
struct CacheResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CacheResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CacheResponseDefaultTypeInternal() {}
  union {
    CacheResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CacheResponseDefaultTypeInternal _CacheResponse_default_instance_;
PROTOBUF_CONSTEXPR CacheMetadata::CacheMetadata(
    ::_pbi::ConstantInitialized)
  : request_(nullptr)
  , response_(nullptr)
  , entry_time_(int64_t{0}){}
struct CacheMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CacheMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CacheMetadataDefaultTypeInternal() {}
  union {
    CacheMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CacheMetadataDefaultTypeInternal _CacheMetadata_default_instance_;
}  // namespace proto
}  // namespace content
namespace content {
namespace proto {
bool CacheResponse_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CacheResponse_ResponseType_strings[6] = {};

static const char CacheResponse_ResponseType_names[] =
  "BASIC_TYPE"
  "CORS_TYPE"
  "DEFAULT_TYPE"
  "ERROR_TYPE"
  "OPAQUE_REDIRECT_TYPE"
  "OPAQUE_TYPE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CacheResponse_ResponseType_entries[] = {
  { {CacheResponse_ResponseType_names + 0, 10}, 0 },
  { {CacheResponse_ResponseType_names + 10, 9}, 1 },
  { {CacheResponse_ResponseType_names + 19, 12}, 2 },
  { {CacheResponse_ResponseType_names + 31, 10}, 3 },
  { {CacheResponse_ResponseType_names + 41, 20}, 5 },
  { {CacheResponse_ResponseType_names + 61, 11}, 4 },
};

static const int CacheResponse_ResponseType_entries_by_number[] = {
  0, // 0 -> BASIC_TYPE
  1, // 1 -> CORS_TYPE
  2, // 2 -> DEFAULT_TYPE
  3, // 3 -> ERROR_TYPE
  5, // 4 -> OPAQUE_TYPE
  4, // 5 -> OPAQUE_REDIRECT_TYPE
};

const std::string& CacheResponse_ResponseType_Name(
    CacheResponse_ResponseType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CacheResponse_ResponseType_entries,
          CacheResponse_ResponseType_entries_by_number,
          6, CacheResponse_ResponseType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CacheResponse_ResponseType_entries,
      CacheResponse_ResponseType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CacheResponse_ResponseType_strings[idx].get();
}
bool CacheResponse_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CacheResponse_ResponseType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CacheResponse_ResponseType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<CacheResponse_ResponseType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CacheResponse_ResponseType CacheResponse::BASIC_TYPE;
constexpr CacheResponse_ResponseType CacheResponse::CORS_TYPE;
constexpr CacheResponse_ResponseType CacheResponse::DEFAULT_TYPE;
constexpr CacheResponse_ResponseType CacheResponse::ERROR_TYPE;
constexpr CacheResponse_ResponseType CacheResponse::OPAQUE_TYPE;
constexpr CacheResponse_ResponseType CacheResponse::OPAQUE_REDIRECT_TYPE;
constexpr CacheResponse_ResponseType CacheResponse::ResponseType_MIN;
constexpr CacheResponse_ResponseType CacheResponse::ResponseType_MAX;
constexpr int CacheResponse::ResponseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CacheStorageIndex_Cache::_Internal {
 public:
  using HasBits = decltype(std::declval<CacheStorageIndex_Cache>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cache_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_padding_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_padding_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CacheStorageIndex_Cache::CacheStorageIndex_Cache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.CacheStorageIndex.Cache)
}
CacheStorageIndex_Cache::CacheStorageIndex_Cache(const CacheStorageIndex_Cache& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  cache_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cache_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cache_dir()) {
    cache_dir_.Set(from._internal_cache_dir(), 
      GetArenaForAllocation());
  }
  padding_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    padding_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_padding_key()) {
    padding_key_.Set(from._internal_padding_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&padding_version_) -
    reinterpret_cast<char*>(&size_)) + sizeof(padding_version_));
  // @@protoc_insertion_point(copy_constructor:content.proto.CacheStorageIndex.Cache)
}

inline void CacheStorageIndex_Cache::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cache_dir_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cache_dir_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
padding_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  padding_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&padding_version_) -
    reinterpret_cast<char*>(&size_)) + sizeof(padding_version_));
}

CacheStorageIndex_Cache::~CacheStorageIndex_Cache() {
  // @@protoc_insertion_point(destructor:content.proto.CacheStorageIndex.Cache)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CacheStorageIndex_Cache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  cache_dir_.Destroy();
  padding_key_.Destroy();
}

void CacheStorageIndex_Cache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CacheStorageIndex_Cache::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CacheStorageIndex.Cache)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cache_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      padding_key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&padding_version_) -
        reinterpret_cast<char*>(&size_)) + sizeof(padding_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CacheStorageIndex_Cache::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cache_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cache_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string padding_key = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_padding_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 padding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_padding(&has_bits);
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 padding_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_padding_version(&has_bits);
          padding_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheStorageIndex_Cache::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.CacheStorageIndex.Cache)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string cache_dir = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cache_dir(), target);
  }

  // optional int64 size = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // optional string padding_key = 4 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_padding_key(), target);
  }

  // optional int64 padding = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_padding(), target);
  }

  // optional int32 padding_version = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_padding_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.CacheStorageIndex.Cache)
  return target;
}

size_t CacheStorageIndex_Cache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CacheStorageIndex.Cache)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string cache_dir = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cache_dir());
    }

    // optional string padding_key = 4 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_padding_key());
    }

    // optional int64 size = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
    }

    // optional int64 padding = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_padding());
    }

    // optional int32 padding_version = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_padding_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheStorageIndex_Cache::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CacheStorageIndex_Cache*>(
      &from));
}

void CacheStorageIndex_Cache::MergeFrom(const CacheStorageIndex_Cache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CacheStorageIndex.Cache)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cache_dir(from._internal_cache_dir());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_padding_key(from._internal_padding_key());
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      padding_ = from.padding_;
    }
    if (cached_has_bits & 0x00000020u) {
      padding_version_ = from.padding_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CacheStorageIndex_Cache::CopyFrom(const CacheStorageIndex_Cache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CacheStorageIndex.Cache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheStorageIndex_Cache::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CacheStorageIndex_Cache::InternalSwap(CacheStorageIndex_Cache* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cache_dir_, lhs_arena,
      &other->cache_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &padding_key_, lhs_arena,
      &other->padding_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacheStorageIndex_Cache, padding_version_)
      + sizeof(CacheStorageIndex_Cache::padding_version_)
      - PROTOBUF_FIELD_OFFSET(CacheStorageIndex_Cache, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

std::string CacheStorageIndex_Cache::GetTypeName() const {
  return "content.proto.CacheStorageIndex.Cache";
}


// ===================================================================

class CacheStorageIndex::_Internal {
 public:
  using HasBits = decltype(std::declval<CacheStorageIndex>()._has_bits_);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_storage_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CacheStorageIndex::CacheStorageIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  cache_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.CacheStorageIndex)
}
CacheStorageIndex::CacheStorageIndex(const CacheStorageIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      cache_(from.cache_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_origin()) {
    origin_.Set(from._internal_origin(), 
      GetArenaForAllocation());
  }
  storage_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    storage_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_storage_key()) {
    storage_key_.Set(from._internal_storage_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.proto.CacheStorageIndex)
}

inline void CacheStorageIndex::SharedCtor() {
origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
storage_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  storage_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CacheStorageIndex::~CacheStorageIndex() {
  // @@protoc_insertion_point(destructor:content.proto.CacheStorageIndex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CacheStorageIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  origin_.Destroy();
  storage_key_.Destroy();
}

void CacheStorageIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CacheStorageIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CacheStorageIndex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cache_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      origin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      storage_key_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CacheStorageIndex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .content.proto.CacheStorageIndex.Cache cache = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cache(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string origin = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string storage_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_storage_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheStorageIndex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.CacheStorageIndex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content.proto.CacheStorageIndex.Cache cache = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cache_size()); i < n; i++) {
    const auto& repfield = this->_internal_cache(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string origin = 2 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_origin(), target);
  }

  // optional string storage_key = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_storage_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.CacheStorageIndex)
  return target;
}

size_t CacheStorageIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CacheStorageIndex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.CacheStorageIndex.Cache cache = 1;
  total_size += 1UL * this->_internal_cache_size();
  for (const auto& msg : this->cache_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string origin = 2 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_origin());
    }

    // optional string storage_key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_storage_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheStorageIndex::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CacheStorageIndex*>(
      &from));
}

void CacheStorageIndex::MergeFrom(const CacheStorageIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CacheStorageIndex)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cache_.MergeFrom(from.cache_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_origin(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_storage_key(from._internal_storage_key());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CacheStorageIndex::CopyFrom(const CacheStorageIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CacheStorageIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheStorageIndex::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cache_))
    return false;
  return true;
}

void CacheStorageIndex::InternalSwap(CacheStorageIndex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cache_.InternalSwap(&other->cache_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &origin_, lhs_arena,
      &other->origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &storage_key_, lhs_arena,
      &other->storage_key_, rhs_arena
  );
}

std::string CacheStorageIndex::GetTypeName() const {
  return "content.proto.CacheStorageIndex";
}


// ===================================================================

class CacheHeaderMap::_Internal {
 public:
  using HasBits = decltype(std::declval<CacheHeaderMap>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CacheHeaderMap::CacheHeaderMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.CacheHeaderMap)
}
CacheHeaderMap::CacheHeaderMap(const CacheHeaderMap& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.proto.CacheHeaderMap)
}

inline void CacheHeaderMap::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CacheHeaderMap::~CacheHeaderMap() {
  // @@protoc_insertion_point(destructor:content.proto.CacheHeaderMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CacheHeaderMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  value_.Destroy();
}

void CacheHeaderMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CacheHeaderMap::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CacheHeaderMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CacheHeaderMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheHeaderMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.CacheHeaderMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.CacheHeaderMap)
  return target;
}

size_t CacheHeaderMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.proto.CacheHeaderMap)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return total_size;
}
size_t CacheHeaderMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CacheHeaderMap)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheHeaderMap::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CacheHeaderMap*>(
      &from));
}

void CacheHeaderMap::MergeFrom(const CacheHeaderMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CacheHeaderMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CacheHeaderMap::CopyFrom(const CacheHeaderMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CacheHeaderMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheHeaderMap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CacheHeaderMap::InternalSwap(CacheHeaderMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

std::string CacheHeaderMap::GetTypeName() const {
  return "content.proto.CacheHeaderMap";
}


// ===================================================================

class CacheRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CacheRequest>()._has_bits_);
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CacheRequest::CacheRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.CacheRequest)
}
CacheRequest::CacheRequest(const CacheRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    method_.Set(from._internal_method(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.proto.CacheRequest)
}

inline void CacheRequest::SharedCtor() {
method_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CacheRequest::~CacheRequest() {
  // @@protoc_insertion_point(destructor:content.proto.CacheRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CacheRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  method_.Destroy();
}

void CacheRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CacheRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CacheRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    method_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CacheRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .content.proto.CacheHeaderMap headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.CacheRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string method = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // repeated .content.proto.CacheHeaderMap headers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.CacheRequest)
  return target;
}

size_t CacheRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CacheRequest)
  size_t total_size = 0;

  // required string method = 1;
  if (_internal_has_method()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.CacheHeaderMap headers = 2;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CacheRequest*>(
      &from));
}

void CacheRequest::MergeFrom(const CacheRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CacheRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from._internal_has_method()) {
    _internal_set_method(from._internal_method());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CacheRequest::CopyFrom(const CacheRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CacheRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(headers_))
    return false;
  return true;
}

void CacheRequest::InternalSwap(CacheRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.InternalSwap(&other->headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &method_, lhs_arena,
      &other->method_, rhs_arena
  );
}

std::string CacheRequest::GetTypeName() const {
  return "content.proto.CacheRequest";
}


// ===================================================================

class CacheResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CacheResponse>()._has_bits_);
  static void set_has_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_status_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_response_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_loaded_with_credentials(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_connection_info(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_alpn_negotiated_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_was_fetched_via_spdy(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_request_method(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_side_data_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_request_include_credentials(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000061) ^ 0x00000061) != 0;
  }
};

CacheResponse::CacheResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  headers_(arena),
  cors_exposed_header_names_(arena),
  url_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.CacheResponse)
}
CacheResponse::CacheResponse(const CacheResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      headers_(from.headers_),
      cors_exposed_header_names_(from.cors_exposed_header_names_),
      url_list_(from.url_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  status_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status_text()) {
    status_text_.Set(from._internal_status_text(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  alpn_negotiated_protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alpn_negotiated_protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alpn_negotiated_protocol()) {
    alpn_negotiated_protocol_.Set(from._internal_alpn_negotiated_protocol(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mime_type()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  request_method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request_method()) {
    request_method_.Set(from._internal_request_method(), 
      GetArenaForAllocation());
  }
  ::memcpy(&status_code_, &from.status_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_data_padding_) -
    reinterpret_cast<char*>(&status_code_)) + sizeof(side_data_padding_));
  // @@protoc_insertion_point(copy_constructor:content.proto.CacheResponse)
}

inline void CacheResponse::SharedCtor() {
status_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
alpn_negotiated_protocol_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alpn_negotiated_protocol_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
request_method_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_method_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&side_data_padding_) -
    reinterpret_cast<char*>(&status_code_)) + sizeof(side_data_padding_));
}

CacheResponse::~CacheResponse() {
  // @@protoc_insertion_point(destructor:content.proto.CacheResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CacheResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_text_.Destroy();
  url_.Destroy();
  alpn_negotiated_protocol_.Destroy();
  mime_type_.Destroy();
  request_method_.Destroy();
}

void CacheResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CacheResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CacheResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cors_exposed_header_names_.Clear();
  url_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      status_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      alpn_negotiated_protocol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      mime_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      request_method_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&status_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_time_) -
        reinterpret_cast<char*>(&status_code_)) + sizeof(response_time_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&connection_info_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&side_data_padding_) -
        reinterpret_cast<char*>(&connection_info_)) + sizeof(side_data_padding_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CacheResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status_code(&has_bits);
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string status_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .content.proto.CacheResponse.ResponseType response_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::proto::CacheResponse_ResponseType_IsValid(val))) {
            _internal_set_response_type(static_cast<::content::proto::CacheResponse_ResponseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .content.proto.CacheHeaderMap headers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string url = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 response_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_response_time(&has_bits);
          response_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string cors_exposed_header_names = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cors_exposed_header_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string url_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_url_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool loaded_with_credentials = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_loaded_with_credentials(&has_bits);
          loaded_with_credentials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 connection_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_connection_info(&has_bits);
          connection_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string alpn_negotiated_protocol = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_alpn_negotiated_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool was_fetched_via_spdy = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_was_fetched_via_spdy(&has_bits);
          was_fetched_via_spdy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mime_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string request_method = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_request_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 padding = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_padding(&has_bits);
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 side_data_padding = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_side_data_padding(&has_bits);
          side_data_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool request_include_credentials = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_request_include_credentials(&has_bits);
          request_include_credentials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.CacheResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 status_code = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status_code(), target);
  }

  // required string status_text = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status_text(), target);
  }

  // required .content.proto.CacheResponse.ResponseType response_type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_response_type(), target);
  }

  // repeated .content.proto.CacheHeaderMap headers = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string url = 5 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // optional int64 response_time = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_response_time(), target);
  }

  // repeated string cors_exposed_header_names = 7;
  for (int i = 0, n = this->_internal_cors_exposed_header_names_size(); i < n; i++) {
    const auto& s = this->_internal_cors_exposed_header_names(i);
    target = stream->WriteString(7, s, target);
  }

  // repeated string url_list = 8;
  for (int i = 0, n = this->_internal_url_list_size(); i < n; i++) {
    const auto& s = this->_internal_url_list(i);
    target = stream->WriteString(8, s, target);
  }

  // optional bool loaded_with_credentials = 9 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_loaded_with_credentials(), target);
  }

  // optional int32 connection_info = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_connection_info(), target);
  }

  // optional string alpn_negotiated_protocol = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_alpn_negotiated_protocol(), target);
  }

  // optional bool was_fetched_via_spdy = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_was_fetched_via_spdy(), target);
  }

  // optional string mime_type = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_mime_type(), target);
  }

  // optional string request_method = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_request_method(), target);
  }

  // optional int64 padding = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_padding(), target);
  }

  // optional int64 side_data_padding = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_side_data_padding(), target);
  }

  // optional bool request_include_credentials = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_request_include_credentials(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.CacheResponse)
  return target;
}

size_t CacheResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.proto.CacheResponse)
  size_t total_size = 0;

  if (_internal_has_status_text()) {
    // required string status_text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_text());
  }

  if (_internal_has_status_code()) {
    // required int32 status_code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status_code());
  }

  if (_internal_has_response_type()) {
    // required .content.proto.CacheResponse.ResponseType response_type = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response_type());
  }

  return total_size;
}
size_t CacheResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CacheResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000061) ^ 0x00000061) == 0) {  // All required fields are present.
    // required string status_text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_text());

    // required int32 status_code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status_code());

    // required .content.proto.CacheResponse.ResponseType response_type = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.CacheHeaderMap headers = 4;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string cors_exposed_header_names = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cors_exposed_header_names_.size());
  for (int i = 0, n = cors_exposed_header_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cors_exposed_header_names_.Get(i));
  }

  // repeated string url_list = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(url_list_.size());
  for (int i = 0, n = url_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      url_list_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional string url = 5 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string alpn_negotiated_protocol = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_alpn_negotiated_protocol());
    }

    // optional string mime_type = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mime_type());
    }

    // optional string request_method = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_request_method());
    }

  }
  // optional int64 response_time = 6;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_response_time());
  }

  if (cached_has_bits & 0x00003f00u) {
    // optional int32 connection_info = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_connection_info());
    }

    // optional bool loaded_with_credentials = 9 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool was_fetched_via_spdy = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool request_include_credentials = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional int64 padding = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_padding());
    }

    // optional int64 side_data_padding = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_side_data_padding());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CacheResponse*>(
      &from));
}

void CacheResponse::MergeFrom(const CacheResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cors_exposed_header_names_.MergeFrom(from.cors_exposed_header_names_);
  url_list_.MergeFrom(from.url_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_status_text(from._internal_status_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_alpn_negotiated_protocol(from._internal_alpn_negotiated_protocol());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_mime_type(from._internal_mime_type());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_request_method(from._internal_request_method());
    }
    if (cached_has_bits & 0x00000020u) {
      status_code_ = from.status_code_;
    }
    if (cached_has_bits & 0x00000040u) {
      response_type_ = from.response_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      response_time_ = from.response_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      connection_info_ = from.connection_info_;
    }
    if (cached_has_bits & 0x00000200u) {
      loaded_with_credentials_ = from.loaded_with_credentials_;
    }
    if (cached_has_bits & 0x00000400u) {
      was_fetched_via_spdy_ = from.was_fetched_via_spdy_;
    }
    if (cached_has_bits & 0x00000800u) {
      request_include_credentials_ = from.request_include_credentials_;
    }
    if (cached_has_bits & 0x00001000u) {
      padding_ = from.padding_;
    }
    if (cached_has_bits & 0x00002000u) {
      side_data_padding_ = from.side_data_padding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CacheResponse::CopyFrom(const CacheResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(headers_))
    return false;
  return true;
}

void CacheResponse::InternalSwap(CacheResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.InternalSwap(&other->headers_);
  cors_exposed_header_names_.InternalSwap(&other->cors_exposed_header_names_);
  url_list_.InternalSwap(&other->url_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_text_, lhs_arena,
      &other->status_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &alpn_negotiated_protocol_, lhs_arena,
      &other->alpn_negotiated_protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_method_, lhs_arena,
      &other->request_method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacheResponse, side_data_padding_)
      + sizeof(CacheResponse::side_data_padding_)
      - PROTOBUF_FIELD_OFFSET(CacheResponse, status_code_)>(
          reinterpret_cast<char*>(&status_code_),
          reinterpret_cast<char*>(&other->status_code_));
}

std::string CacheResponse::GetTypeName() const {
  return "content.proto.CacheResponse";
}


// ===================================================================

class CacheMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CacheMetadata>()._has_bits_);
  static const ::content::proto::CacheRequest& request(const CacheMetadata* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::content::proto::CacheResponse& response(const CacheMetadata* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entry_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::content::proto::CacheRequest&
CacheMetadata::_Internal::request(const CacheMetadata* msg) {
  return *msg->request_;
}
const ::content::proto::CacheResponse&
CacheMetadata::_Internal::response(const CacheMetadata* msg) {
  return *msg->response_;
}
CacheMetadata::CacheMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.CacheMetadata)
}
CacheMetadata::CacheMetadata(const CacheMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::content::proto::CacheRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_response()) {
    response_ = new ::content::proto::CacheResponse(*from.response_);
  } else {
    response_ = nullptr;
  }
  entry_time_ = from.entry_time_;
  // @@protoc_insertion_point(copy_constructor:content.proto.CacheMetadata)
}

inline void CacheMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entry_time_) -
    reinterpret_cast<char*>(&request_)) + sizeof(entry_time_));
}

CacheMetadata::~CacheMetadata() {
  // @@protoc_insertion_point(destructor:content.proto.CacheMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CacheMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
}

void CacheMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CacheMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CacheMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(request_ != nullptr);
      request_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(response_ != nullptr);
      response_->Clear();
    }
  }
  entry_time_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CacheMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .content.proto.CacheRequest request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .content.proto.CacheResponse response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 entry_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_entry_time(&has_bits);
          entry_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.CacheMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .content.proto.CacheRequest request = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // required .content.proto.CacheResponse response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // optional int64 entry_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_entry_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.CacheMetadata)
  return target;
}

size_t CacheMetadata::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.proto.CacheMetadata)
  size_t total_size = 0;

  if (_internal_has_request()) {
    // required .content.proto.CacheRequest request = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (_internal_has_response()) {
    // required .content.proto.CacheResponse response = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  return total_size;
}
size_t CacheMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CacheMetadata)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .content.proto.CacheRequest request = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);

    // required .content.proto.CacheResponse response = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 entry_time = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_entry_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CacheMetadata*>(
      &from));
}

void CacheMetadata::MergeFrom(const CacheMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CacheMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_request()->::content::proto::CacheRequest::MergeFrom(from._internal_request());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_response()->::content::proto::CacheResponse::MergeFrom(from._internal_response());
    }
    if (cached_has_bits & 0x00000004u) {
      entry_time_ = from.entry_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CacheMetadata::CopyFrom(const CacheMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CacheMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_request()) {
    if (!request_->IsInitialized()) return false;
  }
  if (_internal_has_response()) {
    if (!response_->IsInitialized()) return false;
  }
  return true;
}

void CacheMetadata::InternalSwap(CacheMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacheMetadata, entry_time_)
      + sizeof(CacheMetadata::entry_time_)
      - PROTOBUF_FIELD_OFFSET(CacheMetadata, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

std::string CacheMetadata::GetTypeName() const {
  return "content.proto.CacheMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::proto::CacheStorageIndex_Cache*
Arena::CreateMaybeMessage< ::content::proto::CacheStorageIndex_Cache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::CacheStorageIndex_Cache >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::CacheStorageIndex*
Arena::CreateMaybeMessage< ::content::proto::CacheStorageIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::CacheStorageIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::CacheHeaderMap*
Arena::CreateMaybeMessage< ::content::proto::CacheHeaderMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::CacheHeaderMap >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::CacheRequest*
Arena::CreateMaybeMessage< ::content::proto::CacheRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::CacheRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::CacheResponse*
Arena::CreateMaybeMessage< ::content::proto::CacheResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::CacheResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::CacheMetadata*
Arena::CreateMaybeMessage< ::content::proto::CacheMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::CacheMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
