// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attribution_reporting.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_attribution_5freporting_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_attribution_5freporting_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_attribution_5freporting_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_attribution_5freporting_2eproto {
  static const uint32_t offsets[];
};
namespace content {
namespace proto {
class AttributionAggregatableSource;
struct AttributionAggregatableSourceDefaultTypeInternal;
extern AttributionAggregatableSourceDefaultTypeInternal _AttributionAggregatableSource_default_instance_;
class AttributionAggregatableSource_KeysEntry_DoNotUse;
struct AttributionAggregatableSource_KeysEntry_DoNotUseDefaultTypeInternal;
extern AttributionAggregatableSource_KeysEntry_DoNotUseDefaultTypeInternal _AttributionAggregatableSource_KeysEntry_DoNotUse_default_instance_;
class AttributionAggregationKey;
struct AttributionAggregationKeyDefaultTypeInternal;
extern AttributionAggregationKeyDefaultTypeInternal _AttributionAggregationKey_default_instance_;
class AttributionFilterData;
struct AttributionFilterDataDefaultTypeInternal;
extern AttributionFilterDataDefaultTypeInternal _AttributionFilterData_default_instance_;
class AttributionFilterData_FilterValuesEntry_DoNotUse;
struct AttributionFilterData_FilterValuesEntry_DoNotUseDefaultTypeInternal;
extern AttributionFilterData_FilterValuesEntry_DoNotUseDefaultTypeInternal _AttributionFilterData_FilterValuesEntry_DoNotUse_default_instance_;
class AttributionFilterValues;
struct AttributionFilterValuesDefaultTypeInternal;
extern AttributionFilterValuesDefaultTypeInternal _AttributionFilterValues_default_instance_;
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::proto::AttributionAggregatableSource* Arena::CreateMaybeMessage<::content::proto::AttributionAggregatableSource>(Arena*);
template<> ::content::proto::AttributionAggregatableSource_KeysEntry_DoNotUse* Arena::CreateMaybeMessage<::content::proto::AttributionAggregatableSource_KeysEntry_DoNotUse>(Arena*);
template<> ::content::proto::AttributionAggregationKey* Arena::CreateMaybeMessage<::content::proto::AttributionAggregationKey>(Arena*);
template<> ::content::proto::AttributionFilterData* Arena::CreateMaybeMessage<::content::proto::AttributionFilterData>(Arena*);
template<> ::content::proto::AttributionFilterData_FilterValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::content::proto::AttributionFilterData_FilterValuesEntry_DoNotUse>(Arena*);
template<> ::content::proto::AttributionFilterValues* Arena::CreateMaybeMessage<::content::proto::AttributionFilterValues>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {
namespace proto {

// ===================================================================

class AttributionAggregationKey final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.AttributionAggregationKey) */ {
 public:
  inline AttributionAggregationKey() : AttributionAggregationKey(nullptr) {}
  ~AttributionAggregationKey() override;
  explicit PROTOBUF_CONSTEXPR AttributionAggregationKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributionAggregationKey(const AttributionAggregationKey& from);
  AttributionAggregationKey(AttributionAggregationKey&& from) noexcept
    : AttributionAggregationKey() {
    *this = ::std::move(from);
  }

  inline AttributionAggregationKey& operator=(const AttributionAggregationKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributionAggregationKey& operator=(AttributionAggregationKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AttributionAggregationKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributionAggregationKey* internal_default_instance() {
    return reinterpret_cast<const AttributionAggregationKey*>(
               &_AttributionAggregationKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AttributionAggregationKey& a, AttributionAggregationKey& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AttributionAggregationKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributionAggregationKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributionAggregationKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributionAggregationKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AttributionAggregationKey& from);
  void MergeFrom(const AttributionAggregationKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AttributionAggregationKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.AttributionAggregationKey";
  }
  protected:
  explicit AttributionAggregationKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighBitsFieldNumber = 1,
    kLowBitsFieldNumber = 2,
  };
  // optional uint64 high_bits = 1;
  bool has_high_bits() const;
  private:
  bool _internal_has_high_bits() const;
  public:
  void clear_high_bits();
  uint64_t high_bits() const;
  void set_high_bits(uint64_t value);
  private:
  uint64_t _internal_high_bits() const;
  void _internal_set_high_bits(uint64_t value);
  public:

  // optional uint64 low_bits = 2;
  bool has_low_bits() const;
  private:
  bool _internal_has_low_bits() const;
  public:
  void clear_low_bits();
  uint64_t low_bits() const;
  void set_low_bits(uint64_t value);
  private:
  uint64_t _internal_low_bits() const;
  void _internal_set_low_bits(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.proto.AttributionAggregationKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t high_bits_;
  uint64_t low_bits_;
  friend struct ::TableStruct_attribution_5freporting_2eproto;
};
// -------------------------------------------------------------------

class AttributionAggregatableSource_KeysEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<AttributionAggregatableSource_KeysEntry_DoNotUse, 
    std::string, ::content::proto::AttributionAggregationKey,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<AttributionAggregatableSource_KeysEntry_DoNotUse, 
    std::string, ::content::proto::AttributionAggregationKey,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  AttributionAggregatableSource_KeysEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AttributionAggregatableSource_KeysEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AttributionAggregatableSource_KeysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AttributionAggregatableSource_KeysEntry_DoNotUse& other);
  static const AttributionAggregatableSource_KeysEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributionAggregatableSource_KeysEntry_DoNotUse*>(&_AttributionAggregatableSource_KeysEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_attribution_5freporting_2eproto;
};

// -------------------------------------------------------------------

class AttributionAggregatableSource final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.AttributionAggregatableSource) */ {
 public:
  inline AttributionAggregatableSource() : AttributionAggregatableSource(nullptr) {}
  ~AttributionAggregatableSource() override;
  explicit PROTOBUF_CONSTEXPR AttributionAggregatableSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributionAggregatableSource(const AttributionAggregatableSource& from);
  AttributionAggregatableSource(AttributionAggregatableSource&& from) noexcept
    : AttributionAggregatableSource() {
    *this = ::std::move(from);
  }

  inline AttributionAggregatableSource& operator=(const AttributionAggregatableSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributionAggregatableSource& operator=(AttributionAggregatableSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AttributionAggregatableSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributionAggregatableSource* internal_default_instance() {
    return reinterpret_cast<const AttributionAggregatableSource*>(
               &_AttributionAggregatableSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AttributionAggregatableSource& a, AttributionAggregatableSource& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AttributionAggregatableSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributionAggregatableSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributionAggregatableSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributionAggregatableSource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AttributionAggregatableSource& from);
  void MergeFrom(const AttributionAggregatableSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AttributionAggregatableSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.AttributionAggregatableSource";
  }
  protected:
  explicit AttributionAggregatableSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // map<string, .content.proto.AttributionAggregationKey> keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionAggregationKey >&
      _internal_keys() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionAggregationKey >*
      _internal_mutable_keys();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionAggregationKey >&
      keys() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionAggregationKey >*
      mutable_keys();

  // @@protoc_insertion_point(class_scope:content.proto.AttributionAggregatableSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      AttributionAggregatableSource_KeysEntry_DoNotUse,
      std::string, ::content::proto::AttributionAggregationKey,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribution_5freporting_2eproto;
};
// -------------------------------------------------------------------

class AttributionFilterValues final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.AttributionFilterValues) */ {
 public:
  inline AttributionFilterValues() : AttributionFilterValues(nullptr) {}
  ~AttributionFilterValues() override;
  explicit PROTOBUF_CONSTEXPR AttributionFilterValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributionFilterValues(const AttributionFilterValues& from);
  AttributionFilterValues(AttributionFilterValues&& from) noexcept
    : AttributionFilterValues() {
    *this = ::std::move(from);
  }

  inline AttributionFilterValues& operator=(const AttributionFilterValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributionFilterValues& operator=(AttributionFilterValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AttributionFilterValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributionFilterValues* internal_default_instance() {
    return reinterpret_cast<const AttributionFilterValues*>(
               &_AttributionFilterValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AttributionFilterValues& a, AttributionFilterValues& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AttributionFilterValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributionFilterValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributionFilterValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributionFilterValues>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AttributionFilterValues& from);
  void MergeFrom(const AttributionFilterValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AttributionFilterValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.AttributionFilterValues";
  }
  protected:
  explicit AttributionFilterValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // @@protoc_insertion_point(class_scope:content.proto.AttributionFilterValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribution_5freporting_2eproto;
};
// -------------------------------------------------------------------

class AttributionFilterData_FilterValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<AttributionFilterData_FilterValuesEntry_DoNotUse, 
    std::string, ::content::proto::AttributionFilterValues,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<AttributionFilterData_FilterValuesEntry_DoNotUse, 
    std::string, ::content::proto::AttributionFilterValues,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  AttributionFilterData_FilterValuesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AttributionFilterData_FilterValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AttributionFilterData_FilterValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AttributionFilterData_FilterValuesEntry_DoNotUse& other);
  static const AttributionFilterData_FilterValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributionFilterData_FilterValuesEntry_DoNotUse*>(&_AttributionFilterData_FilterValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_attribution_5freporting_2eproto;
};

// -------------------------------------------------------------------

class AttributionFilterData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.AttributionFilterData) */ {
 public:
  inline AttributionFilterData() : AttributionFilterData(nullptr) {}
  ~AttributionFilterData() override;
  explicit PROTOBUF_CONSTEXPR AttributionFilterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributionFilterData(const AttributionFilterData& from);
  AttributionFilterData(AttributionFilterData&& from) noexcept
    : AttributionFilterData() {
    *this = ::std::move(from);
  }

  inline AttributionFilterData& operator=(const AttributionFilterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributionFilterData& operator=(AttributionFilterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AttributionFilterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributionFilterData* internal_default_instance() {
    return reinterpret_cast<const AttributionFilterData*>(
               &_AttributionFilterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AttributionFilterData& a, AttributionFilterData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AttributionFilterData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributionFilterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributionFilterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributionFilterData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AttributionFilterData& from);
  void MergeFrom(const AttributionFilterData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AttributionFilterData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.AttributionFilterData";
  }
  protected:
  explicit AttributionFilterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFilterValuesFieldNumber = 1,
  };
  // map<string, .content.proto.AttributionFilterValues> filter_values = 1;
  int filter_values_size() const;
  private:
  int _internal_filter_values_size() const;
  public:
  void clear_filter_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionFilterValues >&
      _internal_filter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionFilterValues >*
      _internal_mutable_filter_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionFilterValues >&
      filter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionFilterValues >*
      mutable_filter_values();

  // @@protoc_insertion_point(class_scope:content.proto.AttributionFilterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      AttributionFilterData_FilterValuesEntry_DoNotUse,
      std::string, ::content::proto::AttributionFilterValues,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> filter_values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribution_5freporting_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AttributionAggregationKey

// optional uint64 high_bits = 1;
inline bool AttributionAggregationKey::_internal_has_high_bits() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AttributionAggregationKey::has_high_bits() const {
  return _internal_has_high_bits();
}
inline void AttributionAggregationKey::clear_high_bits() {
  high_bits_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t AttributionAggregationKey::_internal_high_bits() const {
  return high_bits_;
}
inline uint64_t AttributionAggregationKey::high_bits() const {
  // @@protoc_insertion_point(field_get:content.proto.AttributionAggregationKey.high_bits)
  return _internal_high_bits();
}
inline void AttributionAggregationKey::_internal_set_high_bits(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  high_bits_ = value;
}
inline void AttributionAggregationKey::set_high_bits(uint64_t value) {
  _internal_set_high_bits(value);
  // @@protoc_insertion_point(field_set:content.proto.AttributionAggregationKey.high_bits)
}

// optional uint64 low_bits = 2;
inline bool AttributionAggregationKey::_internal_has_low_bits() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AttributionAggregationKey::has_low_bits() const {
  return _internal_has_low_bits();
}
inline void AttributionAggregationKey::clear_low_bits() {
  low_bits_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t AttributionAggregationKey::_internal_low_bits() const {
  return low_bits_;
}
inline uint64_t AttributionAggregationKey::low_bits() const {
  // @@protoc_insertion_point(field_get:content.proto.AttributionAggregationKey.low_bits)
  return _internal_low_bits();
}
inline void AttributionAggregationKey::_internal_set_low_bits(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  low_bits_ = value;
}
inline void AttributionAggregationKey::set_low_bits(uint64_t value) {
  _internal_set_low_bits(value);
  // @@protoc_insertion_point(field_set:content.proto.AttributionAggregationKey.low_bits)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AttributionAggregatableSource

// map<string, .content.proto.AttributionAggregationKey> keys = 1;
inline int AttributionAggregatableSource::_internal_keys_size() const {
  return keys_.size();
}
inline int AttributionAggregatableSource::keys_size() const {
  return _internal_keys_size();
}
inline void AttributionAggregatableSource::clear_keys() {
  keys_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionAggregationKey >&
AttributionAggregatableSource::_internal_keys() const {
  return keys_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionAggregationKey >&
AttributionAggregatableSource::keys() const {
  // @@protoc_insertion_point(field_map:content.proto.AttributionAggregatableSource.keys)
  return _internal_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionAggregationKey >*
AttributionAggregatableSource::_internal_mutable_keys() {
  return keys_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionAggregationKey >*
AttributionAggregatableSource::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_map:content.proto.AttributionAggregatableSource.keys)
  return _internal_mutable_keys();
}

// -------------------------------------------------------------------

// AttributionFilterValues

// repeated string values = 1;
inline int AttributionFilterValues::_internal_values_size() const {
  return values_.size();
}
inline int AttributionFilterValues::values_size() const {
  return _internal_values_size();
}
inline void AttributionFilterValues::clear_values() {
  values_.Clear();
}
inline std::string* AttributionFilterValues::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:content.proto.AttributionFilterValues.values)
  return _s;
}
inline const std::string& AttributionFilterValues::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& AttributionFilterValues::values(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.AttributionFilterValues.values)
  return _internal_values(index);
}
inline std::string* AttributionFilterValues::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.AttributionFilterValues.values)
  return values_.Mutable(index);
}
inline void AttributionFilterValues::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:content.proto.AttributionFilterValues.values)
}
inline void AttributionFilterValues::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:content.proto.AttributionFilterValues.values)
}
inline void AttributionFilterValues::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:content.proto.AttributionFilterValues.values)
}
inline void AttributionFilterValues::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:content.proto.AttributionFilterValues.values)
}
inline std::string* AttributionFilterValues::_internal_add_values() {
  return values_.Add();
}
inline void AttributionFilterValues::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:content.proto.AttributionFilterValues.values)
}
inline void AttributionFilterValues::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:content.proto.AttributionFilterValues.values)
}
inline void AttributionFilterValues::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:content.proto.AttributionFilterValues.values)
}
inline void AttributionFilterValues::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:content.proto.AttributionFilterValues.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AttributionFilterValues::values() const {
  // @@protoc_insertion_point(field_list:content.proto.AttributionFilterValues.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AttributionFilterValues::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.AttributionFilterValues.values)
  return &values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AttributionFilterData

// map<string, .content.proto.AttributionFilterValues> filter_values = 1;
inline int AttributionFilterData::_internal_filter_values_size() const {
  return filter_values_.size();
}
inline int AttributionFilterData::filter_values_size() const {
  return _internal_filter_values_size();
}
inline void AttributionFilterData::clear_filter_values() {
  filter_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionFilterValues >&
AttributionFilterData::_internal_filter_values() const {
  return filter_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionFilterValues >&
AttributionFilterData::filter_values() const {
  // @@protoc_insertion_point(field_map:content.proto.AttributionFilterData.filter_values)
  return _internal_filter_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionFilterValues >*
AttributionFilterData::_internal_mutable_filter_values() {
  return filter_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionFilterValues >*
AttributionFilterData::mutable_filter_values() {
  // @@protoc_insertion_point(field_mutable_map:content.proto.AttributionFilterData.filter_values)
  return _internal_mutable_filter_values();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace content

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_attribution_5freporting_2eproto
