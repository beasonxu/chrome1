// content/browser/attribution_reporting/attribution_internals.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "content/browser/attribution_reporting/attribution_internals.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "content/browser/attribution_reporting/attribution_internals.mojom-params-data.h"
namespace attribution_internals {
namespace mojom {

static NOINLINE const char* SourceTypeToStringHelper(SourceType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case SourceType::kNavigation:
      return "kNavigation";
    case SourceType::kEvent:
      return "kEvent";
    default:
      return nullptr;
  }
}

std::string SourceTypeToString(SourceType value) {
  const char *str = SourceTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown SourceType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, SourceType value) {
  return os << SourceTypeToString(value);
}

static NOINLINE const char* ReportTypeToStringHelper(ReportType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case ReportType::kEventLevel:
      return "kEventLevel";
    case ReportType::kAggregatableAttribution:
      return "kAggregatableAttribution";
    default:
      return nullptr;
  }
}

std::string ReportTypeToString(ReportType value) {
  const char *str = ReportTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown ReportType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, ReportType value) {
  return os << ReportTypeToString(value);
}

static NOINLINE const char* WebUISource_AttributabilityToStringHelper(WebUISource_Attributability value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case WebUISource_Attributability::kAttributable:
      return "kAttributable";
    case WebUISource_Attributability::kNoised:
      return "kNoised";
    case WebUISource_Attributability::kReplacedByNewerSource:
      return "kReplacedByNewerSource";
    case WebUISource_Attributability::kReachedEventLevelAttributionLimit:
      return "kReachedEventLevelAttributionLimit";
    case WebUISource_Attributability::kInternalError:
      return "kInternalError";
    case WebUISource_Attributability::kInsufficientSourceCapacity:
      return "kInsufficientSourceCapacity";
    case WebUISource_Attributability::kInsufficientUniqueDestinationCapacity:
      return "kInsufficientUniqueDestinationCapacity";
    case WebUISource_Attributability::kExcessiveReportingOrigins:
      return "kExcessiveReportingOrigins";
    case WebUISource_Attributability::kProhibitedByBrowserPolicy:
      return "kProhibitedByBrowserPolicy";
    default:
      return nullptr;
  }
}

std::string WebUISource_AttributabilityToString(WebUISource_Attributability value) {
  const char *str = WebUISource_AttributabilityToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown WebUISource_Attributability value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, WebUISource_Attributability value) {
  return os << WebUISource_AttributabilityToString(value);
}

static NOINLINE const char* WebUITrigger_StatusToStringHelper(WebUITrigger_Status value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case WebUITrigger_Status::kSuccess:
      return "kSuccess";
    case WebUITrigger_Status::kInternalError:
      return "kInternalError";
    case WebUITrigger_Status::kNoMatchingSources:
      return "kNoMatchingSources";
    case WebUITrigger_Status::kNoMatchingSourceFilterData:
      return "kNoMatchingSourceFilterData";
    case WebUITrigger_Status::kNoReportCapacityForDestinationSite:
      return "kNoReportCapacityForDestinationSite";
    case WebUITrigger_Status::kExcessiveAttributions:
      return "kExcessiveAttributions";
    case WebUITrigger_Status::kExcessiveReportingOrigins:
      return "kExcessiveReportingOrigins";
    case WebUITrigger_Status::kProhibitedByBrowserPolicy:
      return "kProhibitedByBrowserPolicy";
    case WebUITrigger_Status::kDeduplicated:
      return "kDeduplicated";
    case WebUITrigger_Status::kLowPriority:
      return "kLowPriority";
    case WebUITrigger_Status::kNoised:
      return "kNoised";
    case WebUITrigger_Status::kNoMatchingConfigurations:
      return "kNoMatchingConfigurations";
    case WebUITrigger_Status::kNoHistograms:
      return "kNoHistograms";
    case WebUITrigger_Status::kInsufficientBudget:
      return "kInsufficientBudget";
    case WebUITrigger_Status::kNotRegistered:
      return "kNotRegistered";
    default:
      return nullptr;
  }
}

std::string WebUITrigger_StatusToString(WebUITrigger_Status value) {
  const char *str = WebUITrigger_StatusToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown WebUITrigger_Status value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, WebUITrigger_Status value) {
  return os << WebUITrigger_StatusToString(value);
}

namespace internal {
// static
bool ReportID_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context,
    bool inlined) {
  if (!data) {
    DCHECK(!inlined);
    return true;
  }

  // If it is inlined, the alignment is already enforced by its enclosing
  // object. We don't have to validate that.
  DCHECK(!inlined || mojo::internal::IsAligned(data));

  if (!inlined &&
      !mojo::internal::ValidateNonInlinedUnionHeaderAndClaimMemory(
          data, validation_context)) {
    return false;
  }

  const ReportID_Data* object = static_cast<const ReportID_Data*>(data);

  if (inlined && object->is_null())
    return true;

  switch (object->tag) {

    case ReportID_Tag::kEventLevelId: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_event_level_id, 1, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_event_level_id, validation_context))
        return false;
      return true;
    }
    case ReportID_Tag::kAggregatableAttributionId: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_aggregatable_attribution_id, 2, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_aggregatable_attribution_id, validation_context))
        return false;
      return true;
    }
    default: {

      ReportValidationError(
          validation_context,
          mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
          "unknown tag in ReportID");
      return false;
    }
  }
}
// static
bool WebUIReportData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context,
    bool inlined) {
  if (!data) {
    DCHECK(!inlined);
    return true;
  }

  // If it is inlined, the alignment is already enforced by its enclosing
  // object. We don't have to validate that.
  DCHECK(!inlined || mojo::internal::IsAligned(data));

  if (!inlined &&
      !mojo::internal::ValidateNonInlinedUnionHeaderAndClaimMemory(
          data, validation_context)) {
    return false;
  }

  const WebUIReportData_Data* object = static_cast<const WebUIReportData_Data*>(data);

  if (inlined && object->is_null())
    return true;

  switch (object->tag) {

    case WebUIReportData_Tag::kEventLevelData: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_event_level_data, 1, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_event_level_data, validation_context))
        return false;
      return true;
    }
    case WebUIReportData_Tag::kAggregatableAttributionData: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_aggregatable_attribution_data, 2, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_aggregatable_attribution_data, validation_context))
        return false;
      return true;
    }
    default: {

      ReportValidationError(
          validation_context,
          mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
          "unknown tag in WebUIReportData");
      return false;
    }
  }
}
// static
bool ReportStatus_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context,
    bool inlined) {
  if (!data) {
    DCHECK(!inlined);
    return true;
  }

  // If it is inlined, the alignment is already enforced by its enclosing
  // object. We don't have to validate that.
  DCHECK(!inlined || mojo::internal::IsAligned(data));

  if (!inlined &&
      !mojo::internal::ValidateNonInlinedUnionHeaderAndClaimMemory(
          data, validation_context)) {
    return false;
  }

  const ReportStatus_Data* object = static_cast<const ReportStatus_Data*>(data);

  if (inlined && object->is_null())
    return true;

  switch (object->tag) {

    case ReportStatus_Tag::kPending: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_pending, 1, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_pending, validation_context))
        return false;
      return true;
    }
    case ReportStatus_Tag::kReplacedByHigherPriorityReport: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_replaced_by_higher_priority_report, 2, validation_context)) {
        return false;
      }
      const mojo::internal::ContainerValidateParams replaced_by_higher_priority_report_validate_params(
          0, false, nullptr);
      if (!mojo::internal::ValidateContainer(object->data.f_replaced_by_higher_priority_report, validation_context,
                                             &replaced_by_higher_priority_report_validate_params)) {
        return false;
      }
      return true;
    }
    case ReportStatus_Tag::kProhibitedByBrowserPolicy: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_prohibited_by_browser_policy, 3, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_prohibited_by_browser_policy, validation_context))
        return false;
      return true;
    }
    case ReportStatus_Tag::kSent: {

      return true;
    }
    case ReportStatus_Tag::kNetworkError: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_network_error, 5, validation_context)) {
        return false;
      }
      const mojo::internal::ContainerValidateParams network_error_validate_params(
          0, false, nullptr);
      if (!mojo::internal::ValidateContainer(object->data.f_network_error, validation_context,
                                             &network_error_validate_params)) {
        return false;
      }
      return true;
    }
    case ReportStatus_Tag::kFailedToAssemble: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_failed_to_assemble, 6, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_failed_to_assemble, validation_context))
        return false;
      return true;
    }
    default: {

      ReportValidationError(
          validation_context,
          mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
          "unknown tag in ReportStatus");
      return false;
    }
  }
}


// static
bool EventLevelReportID_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const EventLevelReportID_Data* object =
      static_cast<const EventLevelReportID_Data*>(data);

  return true;
}

EventLevelReportID_Data::EventLevelReportID_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AggregatableAttributionReportID_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AggregatableAttributionReportID_Data* object =
      static_cast<const AggregatableAttributionReportID_Data*>(data);

  return true;
}

AggregatableAttributionReportID_Data::AggregatableAttributionReportID_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool WebUIReportEventLevelData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const WebUIReportEventLevelData_Data* object =
      static_cast<const WebUIReportEventLevelData_Data*>(data);

  return true;
}

WebUIReportEventLevelData_Data::WebUIReportEventLevelData_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AggregatableHistogramContribution_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AggregatableHistogramContribution_Data* object =
      static_cast<const AggregatableHistogramContribution_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->key, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams key_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->key, validation_context,
                                         &key_validate_params)) {
    return false;
  }

  return true;
}

AggregatableHistogramContribution_Data::AggregatableHistogramContribution_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool WebUIReportAggregatableAttributionData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const WebUIReportAggregatableAttributionData_Data* object =
      static_cast<const WebUIReportAggregatableAttributionData_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->contributions, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams contributions_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->contributions, validation_context,
                                         &contributions_validate_params)) {
    return false;
  }

  return true;
}

WebUIReportAggregatableAttributionData_Data::WebUIReportAggregatableAttributionData_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Empty_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Empty_Data* object =
      static_cast<const Empty_Data*>(data);

  return true;
}

Empty_Data::Empty_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool WebUIReport_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 88, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const WebUIReport_Data* object =
      static_cast<const WebUIReport_Data*>(data);

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->id, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->report_url, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->report_url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->report_body, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams report_body_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->report_body, validation_context,
                                         &report_body_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->status, 6, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->status, validation_context))
    return false;

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->data, 7, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->data, validation_context))
    return false;

  return true;
}

WebUIReport_Data::WebUIReport_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool DebugKey_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const DebugKey_Data* object =
      static_cast<const DebugKey_Data*>(data);

  return true;
}

DebugKey_Data::DebugKey_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool WebUISource_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 104, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const WebUISource_Data* object =
      static_cast<const WebUISource_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->source_origin, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->source_origin, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->attribution_destination, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams attribution_destination_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->attribution_destination, validation_context,
                                         &attribution_destination_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->reporting_origin, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->reporting_origin, validation_context))
    return false;


  if (!::attribution_internals::mojom::internal::SourceType_Data
        ::Validate(object->source_type, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->debug_key, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->dedup_keys, 10, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams dedup_keys_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->dedup_keys, validation_context,
                                         &dedup_keys_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->filter_data, 11, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams filter_data_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr))));
  if (!mojo::internal::ValidateContainer(object->filter_data, validation_context,
                                         &filter_data_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->aggregation_keys, 12, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams aggregation_keys_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  if (!mojo::internal::ValidateContainer(object->aggregation_keys, validation_context,
                                         &aggregation_keys_validate_params)) {
    return false;
  }


  if (!::attribution_internals::mojom::internal::WebUISource_Attributability_Data
        ::Validate(object->attributability, validation_context))
    return false;

  return true;
}

WebUISource_Data::WebUISource_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool DedupKey_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const DedupKey_Data* object =
      static_cast<const DedupKey_Data*>(data);

  return true;
}

DedupKey_Data::DedupKey_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool WebUIEventTriggerData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 48, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const WebUIEventTriggerData_Data* object =
      static_cast<const WebUIEventTriggerData_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->dedup_key, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->filters, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams filters_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr))));
  if (!mojo::internal::ValidateContainer(object->filters, validation_context,
                                         &filters_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->not_filters, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams not_filters_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr))));
  if (!mojo::internal::ValidateContainer(object->not_filters, validation_context,
                                         &not_filters_validate_params)) {
    return false;
  }

  return true;
}

WebUIEventTriggerData_Data::WebUIEventTriggerData_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool WebUIAggregatableTriggerData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const WebUIAggregatableTriggerData_Data* object =
      static_cast<const WebUIAggregatableTriggerData_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->key_piece, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams key_piece_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->key_piece, validation_context,
                                         &key_piece_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->source_keys, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams source_keys_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->source_keys, validation_context,
                                         &source_keys_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->filters, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams filters_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr))));
  if (!mojo::internal::ValidateContainer(object->filters, validation_context,
                                         &filters_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->not_filters, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams not_filters_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr))));
  if (!mojo::internal::ValidateContainer(object->not_filters, validation_context,
                                         &not_filters_validate_params)) {
    return false;
  }

  return true;
}

WebUIAggregatableTriggerData_Data::WebUIAggregatableTriggerData_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool WebUITrigger_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 88, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const WebUITrigger_Data* object =
      static_cast<const WebUITrigger_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->destination_origin, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->destination_origin, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->reporting_origin, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->reporting_origin, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->filters, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams filters_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr))));
  if (!mojo::internal::ValidateContainer(object->filters, validation_context,
                                         &filters_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->not_filters, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams not_filters_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr))));
  if (!mojo::internal::ValidateContainer(object->not_filters, validation_context,
                                         &not_filters_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->debug_key, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->event_triggers, 7, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams event_triggers_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->event_triggers, validation_context,
                                         &event_triggers_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->aggregatable_triggers, 8, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams aggregatable_triggers_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->aggregatable_triggers, validation_context,
                                         &aggregatable_triggers_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->aggregatable_values, 9, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams aggregatable_values_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->aggregatable_values, validation_context,
                                         &aggregatable_values_validate_params)) {
    return false;
  }


  if (!::attribution_internals::mojom::internal::WebUITrigger_Status_Data
        ::Validate(object->event_level_status, validation_context))
    return false;


  if (!::attribution_internals::mojom::internal::WebUITrigger_Status_Data
        ::Validate(object->aggregatable_status, validation_context))
    return false;

  return true;
}

WebUITrigger_Data::WebUITrigger_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Observer_OnSourcesChanged_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Observer_OnSourcesChanged_Params_Data* object =
      static_cast<const Observer_OnSourcesChanged_Params_Data*>(data);

  return true;
}

Observer_OnSourcesChanged_Params_Data::Observer_OnSourcesChanged_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Observer_OnReportsChanged_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Observer_OnReportsChanged_Params_Data* object =
      static_cast<const Observer_OnReportsChanged_Params_Data*>(data);


  if (!::attribution_internals::mojom::internal::ReportType_Data
        ::Validate(object->report_type, validation_context))
    return false;

  return true;
}

Observer_OnReportsChanged_Params_Data::Observer_OnReportsChanged_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Observer_OnSourceRejectedOrDeactivated_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Observer_OnSourceRejectedOrDeactivated_Params_Data* object =
      static_cast<const Observer_OnSourceRejectedOrDeactivated_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->source, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->source, validation_context))
    return false;

  return true;
}

Observer_OnSourceRejectedOrDeactivated_Params_Data::Observer_OnSourceRejectedOrDeactivated_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Observer_OnReportSent_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Observer_OnReportSent_Params_Data* object =
      static_cast<const Observer_OnReportSent_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->report, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->report, validation_context))
    return false;

  return true;
}

Observer_OnReportSent_Params_Data::Observer_OnReportSent_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Observer_OnReportDropped_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Observer_OnReportDropped_Params_Data* object =
      static_cast<const Observer_OnReportDropped_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->report, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->report, validation_context))
    return false;

  return true;
}

Observer_OnReportDropped_Params_Data::Observer_OnReportDropped_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Observer_OnTriggerHandled_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Observer_OnTriggerHandled_Params_Data* object =
      static_cast<const Observer_OnTriggerHandled_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->trigger, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->trigger, validation_context))
    return false;

  return true;
}

Observer_OnTriggerHandled_Params_Data::Observer_OnTriggerHandled_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_IsAttributionReportingEnabled_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_IsAttributionReportingEnabled_Params_Data* object =
      static_cast<const Handler_IsAttributionReportingEnabled_Params_Data*>(data);

  return true;
}

Handler_IsAttributionReportingEnabled_Params_Data::Handler_IsAttributionReportingEnabled_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_IsAttributionReportingEnabled_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_IsAttributionReportingEnabled_ResponseParams_Data* object =
      static_cast<const Handler_IsAttributionReportingEnabled_ResponseParams_Data*>(data);

  return true;
}

Handler_IsAttributionReportingEnabled_ResponseParams_Data::Handler_IsAttributionReportingEnabled_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_GetActiveSources_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_GetActiveSources_Params_Data* object =
      static_cast<const Handler_GetActiveSources_Params_Data*>(data);

  return true;
}

Handler_GetActiveSources_Params_Data::Handler_GetActiveSources_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_GetActiveSources_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_GetActiveSources_ResponseParams_Data* object =
      static_cast<const Handler_GetActiveSources_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->sources, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams sources_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->sources, validation_context,
                                         &sources_validate_params)) {
    return false;
  }

  return true;
}

Handler_GetActiveSources_ResponseParams_Data::Handler_GetActiveSources_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_GetReports_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_GetReports_Params_Data* object =
      static_cast<const Handler_GetReports_Params_Data*>(data);


  if (!::attribution_internals::mojom::internal::ReportType_Data
        ::Validate(object->report_type, validation_context))
    return false;

  return true;
}

Handler_GetReports_Params_Data::Handler_GetReports_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_GetReports_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_GetReports_ResponseParams_Data* object =
      static_cast<const Handler_GetReports_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->reports, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams reports_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->reports, validation_context,
                                         &reports_validate_params)) {
    return false;
  }

  return true;
}

Handler_GetReports_ResponseParams_Data::Handler_GetReports_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_SendReports_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_SendReports_Params_Data* object =
      static_cast<const Handler_SendReports_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->ids, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams ids_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->ids, validation_context,
                                         &ids_validate_params)) {
    return false;
  }

  return true;
}

Handler_SendReports_Params_Data::Handler_SendReports_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_SendReports_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_SendReports_ResponseParams_Data* object =
      static_cast<const Handler_SendReports_ResponseParams_Data*>(data);

  return true;
}

Handler_SendReports_ResponseParams_Data::Handler_SendReports_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_ClearStorage_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_ClearStorage_Params_Data* object =
      static_cast<const Handler_ClearStorage_Params_Data*>(data);

  return true;
}

Handler_ClearStorage_Params_Data::Handler_ClearStorage_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_ClearStorage_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_ClearStorage_ResponseParams_Data* object =
      static_cast<const Handler_ClearStorage_ResponseParams_Data*>(data);

  return true;
}

Handler_ClearStorage_ResponseParams_Data::Handler_ClearStorage_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_AddObserver_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_AddObserver_Params_Data* object =
      static_cast<const Handler_AddObserver_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->observer, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->observer,
                                                 validation_context)) {
    return false;
  }

  return true;
}

Handler_AddObserver_Params_Data::Handler_AddObserver_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Handler_AddObserver_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Handler_AddObserver_ResponseParams_Data* object =
      static_cast<const Handler_AddObserver_ResponseParams_Data*>(data);

  return true;
}

Handler_AddObserver_ResponseParams_Data::Handler_AddObserver_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace attribution_internals

namespace perfetto {

// static
void TraceFormatTraits<::attribution_internals::mojom::SourceType>::WriteIntoTrace(
   perfetto::TracedValue context, ::attribution_internals::mojom::SourceType value) {
  return std::move(context).WriteString(::attribution_internals::mojom::SourceTypeToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::attribution_internals::mojom::ReportType>::WriteIntoTrace(
   perfetto::TracedValue context, ::attribution_internals::mojom::ReportType value) {
  return std::move(context).WriteString(::attribution_internals::mojom::ReportTypeToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::attribution_internals::mojom::WebUISource_Attributability>::WriteIntoTrace(
   perfetto::TracedValue context, ::attribution_internals::mojom::WebUISource_Attributability value) {
  return std::move(context).WriteString(::attribution_internals::mojom::WebUISource_AttributabilityToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::attribution_internals::mojom::WebUITrigger_Status>::WriteIntoTrace(
   perfetto::TracedValue context, ::attribution_internals::mojom::WebUITrigger_Status value) {
  return std::move(context).WriteString(::attribution_internals::mojom::WebUITrigger_StatusToString(value));
}

} // namespace perfetto