// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_system_access.proto

#include "file_system_access.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
PROTOBUF_CONSTEXPR LocalFileData::LocalFileData(
    ::_pbi::ConstantInitialized)
  : root_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , relative_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct LocalFileDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalFileDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalFileDataDefaultTypeInternal() {}
  union {
    LocalFileData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalFileDataDefaultTypeInternal _LocalFileData_default_instance_;
PROTOBUF_CONSTEXPR SandboxedFileData::SandboxedFileData(
    ::_pbi::ConstantInitialized)
  : virtual_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bucket_id_(int64_t{0}){}
struct SandboxedFileDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SandboxedFileDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SandboxedFileDataDefaultTypeInternal() {}
  union {
    SandboxedFileData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SandboxedFileDataDefaultTypeInternal _SandboxedFileData_default_instance_;
PROTOBUF_CONSTEXPR FileSystemAccessHandleData::FileSystemAccessHandleData(
    ::_pbi::ConstantInitialized)
  : handle_type_(0)

  , _oneof_case_{}{}
struct FileSystemAccessHandleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileSystemAccessHandleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileSystemAccessHandleDataDefaultTypeInternal() {}
  union {
    FileSystemAccessHandleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileSystemAccessHandleDataDefaultTypeInternal _FileSystemAccessHandleData_default_instance_;
}  // namespace content
namespace content {
bool FileSystemAccessHandleData_HandleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FileSystemAccessHandleData_HandleType_strings[2] = {};

static const char FileSystemAccessHandleData_HandleType_names[] =
  "kDirectory"
  "kFile";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FileSystemAccessHandleData_HandleType_entries[] = {
  { {FileSystemAccessHandleData_HandleType_names + 0, 10}, 1 },
  { {FileSystemAccessHandleData_HandleType_names + 10, 5}, 0 },
};

static const int FileSystemAccessHandleData_HandleType_entries_by_number[] = {
  1, // 0 -> kFile
  0, // 1 -> kDirectory
};

const std::string& FileSystemAccessHandleData_HandleType_Name(
    FileSystemAccessHandleData_HandleType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FileSystemAccessHandleData_HandleType_entries,
          FileSystemAccessHandleData_HandleType_entries_by_number,
          2, FileSystemAccessHandleData_HandleType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FileSystemAccessHandleData_HandleType_entries,
      FileSystemAccessHandleData_HandleType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FileSystemAccessHandleData_HandleType_strings[idx].get();
}
bool FileSystemAccessHandleData_HandleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileSystemAccessHandleData_HandleType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FileSystemAccessHandleData_HandleType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<FileSystemAccessHandleData_HandleType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FileSystemAccessHandleData_HandleType FileSystemAccessHandleData::kFile;
constexpr FileSystemAccessHandleData_HandleType FileSystemAccessHandleData::kDirectory;
constexpr FileSystemAccessHandleData_HandleType FileSystemAccessHandleData::HandleType_MIN;
constexpr FileSystemAccessHandleData_HandleType FileSystemAccessHandleData::HandleType_MAX;
constexpr int FileSystemAccessHandleData::HandleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LocalFileData::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalFileData>()._has_bits_);
  static void set_has_root_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relative_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

LocalFileData::LocalFileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.LocalFileData)
}
LocalFileData::LocalFileData(const LocalFileData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  root_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    root_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_root_path()) {
    root_path_.Set(from._internal_root_path(), 
      GetArenaForAllocation());
  }
  relative_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    relative_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_relative_path()) {
    relative_path_.Set(from._internal_relative_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.LocalFileData)
}

inline void LocalFileData::SharedCtor() {
root_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  root_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
relative_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  relative_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalFileData::~LocalFileData() {
  // @@protoc_insertion_point(destructor:content.LocalFileData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalFileData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  root_path_.Destroy();
  relative_path_.Destroy();
}

void LocalFileData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalFileData::Clear() {
// @@protoc_insertion_point(message_clear_start:content.LocalFileData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      root_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      relative_path_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalFileData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes root_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_root_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes relative_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_relative_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalFileData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.LocalFileData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes root_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_root_path(), target);
  }

  // required bytes relative_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_relative_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.LocalFileData)
  return target;
}

size_t LocalFileData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.LocalFileData)
  size_t total_size = 0;

  if (_internal_has_root_path()) {
    // required bytes root_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_root_path());
  }

  if (_internal_has_relative_path()) {
    // required bytes relative_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_relative_path());
  }

  return total_size;
}
size_t LocalFileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.LocalFileData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes root_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_root_path());

    // required bytes relative_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_relative_path());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalFileData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalFileData*>(
      &from));
}

void LocalFileData::MergeFrom(const LocalFileData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.LocalFileData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_root_path(from._internal_root_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_relative_path(from._internal_relative_path());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalFileData::CopyFrom(const LocalFileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.LocalFileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalFileData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LocalFileData::InternalSwap(LocalFileData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &root_path_, lhs_arena,
      &other->root_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &relative_path_, lhs_arena,
      &other->relative_path_, rhs_arena
  );
}

std::string LocalFileData::GetTypeName() const {
  return "content.LocalFileData";
}


// ===================================================================

class SandboxedFileData::_Internal {
 public:
  using HasBits = decltype(std::declval<SandboxedFileData>()._has_bits_);
  static void set_has_virtual_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bucket_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SandboxedFileData::SandboxedFileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.SandboxedFileData)
}
SandboxedFileData::SandboxedFileData(const SandboxedFileData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  virtual_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    virtual_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_virtual_path()) {
    virtual_path_.Set(from._internal_virtual_path(), 
      GetArenaForAllocation());
  }
  bucket_id_ = from.bucket_id_;
  // @@protoc_insertion_point(copy_constructor:content.SandboxedFileData)
}

inline void SandboxedFileData::SharedCtor() {
virtual_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  virtual_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bucket_id_ = int64_t{0};
}

SandboxedFileData::~SandboxedFileData() {
  // @@protoc_insertion_point(destructor:content.SandboxedFileData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SandboxedFileData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  virtual_path_.Destroy();
}

void SandboxedFileData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SandboxedFileData::Clear() {
// @@protoc_insertion_point(message_clear_start:content.SandboxedFileData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    virtual_path_.ClearNonDefaultToEmpty();
  }
  bucket_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SandboxedFileData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes virtual_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_virtual_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 bucket_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bucket_id(&has_bits);
          bucket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SandboxedFileData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.SandboxedFileData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes virtual_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_virtual_path(), target);
  }

  // optional int64 bucket_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_bucket_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.SandboxedFileData)
  return target;
}

size_t SandboxedFileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.SandboxedFileData)
  size_t total_size = 0;

  // required bytes virtual_path = 1;
  if (_internal_has_virtual_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_virtual_path());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 bucket_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bucket_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SandboxedFileData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SandboxedFileData*>(
      &from));
}

void SandboxedFileData::MergeFrom(const SandboxedFileData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.SandboxedFileData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_virtual_path(from._internal_virtual_path());
    }
    if (cached_has_bits & 0x00000002u) {
      bucket_id_ = from.bucket_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SandboxedFileData::CopyFrom(const SandboxedFileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.SandboxedFileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SandboxedFileData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SandboxedFileData::InternalSwap(SandboxedFileData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &virtual_path_, lhs_arena,
      &other->virtual_path_, rhs_arena
  );
  swap(bucket_id_, other->bucket_id_);
}

std::string SandboxedFileData::GetTypeName() const {
  return "content.SandboxedFileData";
}


// ===================================================================

class FileSystemAccessHandleData::_Internal {
 public:
  using HasBits = decltype(std::declval<FileSystemAccessHandleData>()._has_bits_);
  static void set_has_handle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::content::SandboxedFileData& sandboxed(const FileSystemAccessHandleData* msg);
  static const ::content::LocalFileData& local(const FileSystemAccessHandleData* msg);
  static const ::content::LocalFileData& external(const FileSystemAccessHandleData* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::content::SandboxedFileData&
FileSystemAccessHandleData::_Internal::sandboxed(const FileSystemAccessHandleData* msg) {
  return *msg->data_.sandboxed_;
}
const ::content::LocalFileData&
FileSystemAccessHandleData::_Internal::local(const FileSystemAccessHandleData* msg) {
  return *msg->data_.local_;
}
const ::content::LocalFileData&
FileSystemAccessHandleData::_Internal::external(const FileSystemAccessHandleData* msg) {
  return *msg->data_.external_;
}
void FileSystemAccessHandleData::set_allocated_sandboxed(::content::SandboxedFileData* sandboxed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (sandboxed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sandboxed);
    if (message_arena != submessage_arena) {
      sandboxed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sandboxed, submessage_arena);
    }
    set_has_sandboxed();
    data_.sandboxed_ = sandboxed;
  }
  // @@protoc_insertion_point(field_set_allocated:content.FileSystemAccessHandleData.sandboxed)
}
void FileSystemAccessHandleData::set_allocated_local(::content::LocalFileData* local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local);
    if (message_arena != submessage_arena) {
      local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local, submessage_arena);
    }
    set_has_local();
    data_.local_ = local;
  }
  // @@protoc_insertion_point(field_set_allocated:content.FileSystemAccessHandleData.local)
}
void FileSystemAccessHandleData::set_allocated_external(::content::LocalFileData* external) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (external) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(external);
    if (message_arena != submessage_arena) {
      external = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external, submessage_arena);
    }
    set_has_external();
    data_.external_ = external;
  }
  // @@protoc_insertion_point(field_set_allocated:content.FileSystemAccessHandleData.external)
}
FileSystemAccessHandleData::FileSystemAccessHandleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.FileSystemAccessHandleData)
}
FileSystemAccessHandleData::FileSystemAccessHandleData(const FileSystemAccessHandleData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  handle_type_ = from.handle_type_;
  clear_has_data();
  switch (from.data_case()) {
    case kSandboxed: {
      _internal_mutable_sandboxed()->::content::SandboxedFileData::MergeFrom(from._internal_sandboxed());
      break;
    }
    case kLocal: {
      _internal_mutable_local()->::content::LocalFileData::MergeFrom(from._internal_local());
      break;
    }
    case kExternal: {
      _internal_mutable_external()->::content::LocalFileData::MergeFrom(from._internal_external());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:content.FileSystemAccessHandleData)
}

inline void FileSystemAccessHandleData::SharedCtor() {
handle_type_ = 0;
clear_has_data();
}

FileSystemAccessHandleData::~FileSystemAccessHandleData() {
  // @@protoc_insertion_point(destructor:content.FileSystemAccessHandleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileSystemAccessHandleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void FileSystemAccessHandleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileSystemAccessHandleData::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:content.FileSystemAccessHandleData)
  switch (data_case()) {
    case kSandboxed: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.sandboxed_;
      }
      break;
    }
    case kLocal: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.local_;
      }
      break;
    }
    case kExternal: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.external_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void FileSystemAccessHandleData::Clear() {
// @@protoc_insertion_point(message_clear_start:content.FileSystemAccessHandleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handle_type_ = 0;
  clear_data();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FileSystemAccessHandleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .content.FileSystemAccessHandleData.HandleType handle_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::FileSystemAccessHandleData_HandleType_IsValid(val))) {
            _internal_set_handle_type(static_cast<::content::FileSystemAccessHandleData_HandleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .content.SandboxedFileData sandboxed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sandboxed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content.LocalFileData local = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content.LocalFileData external = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_external(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileSystemAccessHandleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.FileSystemAccessHandleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .content.FileSystemAccessHandleData.HandleType handle_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_handle_type(), target);
  }

  switch (data_case()) {
    case kSandboxed: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::sandboxed(this),
          _Internal::sandboxed(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::local(this),
          _Internal::local(this).GetCachedSize(), target, stream);
      break;
    }
    case kExternal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::external(this),
          _Internal::external(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.FileSystemAccessHandleData)
  return target;
}

size_t FileSystemAccessHandleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.FileSystemAccessHandleData)
  size_t total_size = 0;

  // required .content.FileSystemAccessHandleData.HandleType handle_type = 1;
  if (_internal_has_handle_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_handle_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .content.SandboxedFileData sandboxed = 2;
    case kSandboxed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.sandboxed_);
      break;
    }
    // .content.LocalFileData local = 3;
    case kLocal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.local_);
      break;
    }
    // .content.LocalFileData external = 4;
    case kExternal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.external_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileSystemAccessHandleData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FileSystemAccessHandleData*>(
      &from));
}

void FileSystemAccessHandleData::MergeFrom(const FileSystemAccessHandleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.FileSystemAccessHandleData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_handle_type()) {
    _internal_set_handle_type(from._internal_handle_type());
  }
  switch (from.data_case()) {
    case kSandboxed: {
      _internal_mutable_sandboxed()->::content::SandboxedFileData::MergeFrom(from._internal_sandboxed());
      break;
    }
    case kLocal: {
      _internal_mutable_local()->::content::LocalFileData::MergeFrom(from._internal_local());
      break;
    }
    case kExternal: {
      _internal_mutable_external()->::content::LocalFileData::MergeFrom(from._internal_external());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FileSystemAccessHandleData::CopyFrom(const FileSystemAccessHandleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.FileSystemAccessHandleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemAccessHandleData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  switch (data_case()) {
    case kSandboxed: {
      if (_internal_has_sandboxed()) {
        if (!data_.sandboxed_->IsInitialized()) return false;
      }
      break;
    }
    case kLocal: {
      if (_internal_has_local()) {
        if (!data_.local_->IsInitialized()) return false;
      }
      break;
    }
    case kExternal: {
      if (_internal_has_external()) {
        if (!data_.external_->IsInitialized()) return false;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return true;
}

void FileSystemAccessHandleData::InternalSwap(FileSystemAccessHandleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(handle_type_, other->handle_type_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string FileSystemAccessHandleData::GetTypeName() const {
  return "content.FileSystemAccessHandleData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::LocalFileData*
Arena::CreateMaybeMessage< ::content::LocalFileData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::LocalFileData >(arena);
}
template<> PROTOBUF_NOINLINE ::content::SandboxedFileData*
Arena::CreateMaybeMessage< ::content::SandboxedFileData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::SandboxedFileData >(arena);
}
template<> PROTOBUF_NOINLINE ::content::FileSystemAccessHandleData*
Arena::CreateMaybeMessage< ::content::FileSystemAccessHandleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::FileSystemAccessHandleData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
