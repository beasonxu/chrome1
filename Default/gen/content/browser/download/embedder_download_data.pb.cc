// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: embedder_download_data.proto

#include "embedder_download_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
namespace proto {
PROTOBUF_CONSTEXPR EmbedderDownloadData::EmbedderDownloadData(
    ::_pbi::ConstantInitialized)
  : storage_partition_config_(nullptr){}
struct EmbedderDownloadDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmbedderDownloadDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmbedderDownloadDataDefaultTypeInternal() {}
  union {
    EmbedderDownloadData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmbedderDownloadDataDefaultTypeInternal _EmbedderDownloadData_default_instance_;
PROTOBUF_CONSTEXPR StoragePartitionConfig::StoragePartitionConfig(
    ::_pbi::ConstantInitialized)
  : partition_domain_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , partition_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , in_memory_(false)
  , fallback_mode_(0)
{}
struct StoragePartitionConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoragePartitionConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoragePartitionConfigDefaultTypeInternal() {}
  union {
    StoragePartitionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoragePartitionConfigDefaultTypeInternal _StoragePartitionConfig_default_instance_;
}  // namespace proto
}  // namespace content
namespace content {
namespace proto {
bool StoragePartitionConfig_FallbackMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StoragePartitionConfig_FallbackMode_strings[3] = {};

static const char StoragePartitionConfig_FallbackMode_names[] =
  "kNone"
  "kPartitionInMemory"
  "kPartitionOnDisk";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StoragePartitionConfig_FallbackMode_entries[] = {
  { {StoragePartitionConfig_FallbackMode_names + 0, 5}, 0 },
  { {StoragePartitionConfig_FallbackMode_names + 5, 18}, 2 },
  { {StoragePartitionConfig_FallbackMode_names + 23, 16}, 1 },
};

static const int StoragePartitionConfig_FallbackMode_entries_by_number[] = {
  0, // 0 -> kNone
  2, // 1 -> kPartitionOnDisk
  1, // 2 -> kPartitionInMemory
};

const std::string& StoragePartitionConfig_FallbackMode_Name(
    StoragePartitionConfig_FallbackMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StoragePartitionConfig_FallbackMode_entries,
          StoragePartitionConfig_FallbackMode_entries_by_number,
          3, StoragePartitionConfig_FallbackMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StoragePartitionConfig_FallbackMode_entries,
      StoragePartitionConfig_FallbackMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StoragePartitionConfig_FallbackMode_strings[idx].get();
}
bool StoragePartitionConfig_FallbackMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StoragePartitionConfig_FallbackMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StoragePartitionConfig_FallbackMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<StoragePartitionConfig_FallbackMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StoragePartitionConfig_FallbackMode StoragePartitionConfig::kNone;
constexpr StoragePartitionConfig_FallbackMode StoragePartitionConfig::kPartitionOnDisk;
constexpr StoragePartitionConfig_FallbackMode StoragePartitionConfig::kPartitionInMemory;
constexpr StoragePartitionConfig_FallbackMode StoragePartitionConfig::FallbackMode_MIN;
constexpr StoragePartitionConfig_FallbackMode StoragePartitionConfig::FallbackMode_MAX;
constexpr int StoragePartitionConfig::FallbackMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class EmbedderDownloadData::_Internal {
 public:
  using HasBits = decltype(std::declval<EmbedderDownloadData>()._has_bits_);
  static const ::content::proto::StoragePartitionConfig& storage_partition_config(const EmbedderDownloadData* msg);
  static void set_has_storage_partition_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::content::proto::StoragePartitionConfig&
EmbedderDownloadData::_Internal::storage_partition_config(const EmbedderDownloadData* msg) {
  return *msg->storage_partition_config_;
}
EmbedderDownloadData::EmbedderDownloadData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.EmbedderDownloadData)
}
EmbedderDownloadData::EmbedderDownloadData(const EmbedderDownloadData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_storage_partition_config()) {
    storage_partition_config_ = new ::content::proto::StoragePartitionConfig(*from.storage_partition_config_);
  } else {
    storage_partition_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:content.proto.EmbedderDownloadData)
}

inline void EmbedderDownloadData::SharedCtor() {
storage_partition_config_ = nullptr;
}

EmbedderDownloadData::~EmbedderDownloadData() {
  // @@protoc_insertion_point(destructor:content.proto.EmbedderDownloadData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmbedderDownloadData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete storage_partition_config_;
}

void EmbedderDownloadData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmbedderDownloadData::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.EmbedderDownloadData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(storage_partition_config_ != nullptr);
    storage_partition_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EmbedderDownloadData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .content.proto.StoragePartitionConfig storage_partition_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_partition_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmbedderDownloadData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.EmbedderDownloadData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .content.proto.StoragePartitionConfig storage_partition_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::storage_partition_config(this),
        _Internal::storage_partition_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.EmbedderDownloadData)
  return target;
}

size_t EmbedderDownloadData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.EmbedderDownloadData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .content.proto.StoragePartitionConfig storage_partition_config = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_partition_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmbedderDownloadData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EmbedderDownloadData*>(
      &from));
}

void EmbedderDownloadData::MergeFrom(const EmbedderDownloadData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.EmbedderDownloadData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_storage_partition_config()) {
    _internal_mutable_storage_partition_config()->::content::proto::StoragePartitionConfig::MergeFrom(from._internal_storage_partition_config());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EmbedderDownloadData::CopyFrom(const EmbedderDownloadData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.EmbedderDownloadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbedderDownloadData::IsInitialized() const {
  if (_internal_has_storage_partition_config()) {
    if (!storage_partition_config_->IsInitialized()) return false;
  }
  return true;
}

void EmbedderDownloadData::InternalSwap(EmbedderDownloadData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(storage_partition_config_, other->storage_partition_config_);
}

std::string EmbedderDownloadData::GetTypeName() const {
  return "content.proto.EmbedderDownloadData";
}


// ===================================================================

class StoragePartitionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StoragePartitionConfig>()._has_bits_);
  static void set_has_partition_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_partition_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_in_memory(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fallback_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

StoragePartitionConfig::StoragePartitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.StoragePartitionConfig)
}
StoragePartitionConfig::StoragePartitionConfig(const StoragePartitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  partition_domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partition_domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_partition_domain()) {
    partition_domain_.Set(from._internal_partition_domain(), 
      GetArenaForAllocation());
  }
  partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_partition_name()) {
    partition_name_.Set(from._internal_partition_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&in_memory_, &from.in_memory_,
    static_cast<size_t>(reinterpret_cast<char*>(&fallback_mode_) -
    reinterpret_cast<char*>(&in_memory_)) + sizeof(fallback_mode_));
  // @@protoc_insertion_point(copy_constructor:content.proto.StoragePartitionConfig)
}

inline void StoragePartitionConfig::SharedCtor() {
partition_domain_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partition_domain_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
partition_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partition_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&in_memory_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fallback_mode_) -
    reinterpret_cast<char*>(&in_memory_)) + sizeof(fallback_mode_));
}

StoragePartitionConfig::~StoragePartitionConfig() {
  // @@protoc_insertion_point(destructor:content.proto.StoragePartitionConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoragePartitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  partition_domain_.Destroy();
  partition_name_.Destroy();
}

void StoragePartitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoragePartitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.StoragePartitionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      partition_domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      partition_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&in_memory_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fallback_mode_) -
        reinterpret_cast<char*>(&in_memory_)) + sizeof(fallback_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StoragePartitionConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string partition_domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_partition_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string partition_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool in_memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_in_memory(&has_bits);
          in_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .content.proto.StoragePartitionConfig.FallbackMode fallback_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::proto::StoragePartitionConfig_FallbackMode_IsValid(val))) {
            _internal_set_fallback_mode(static_cast<::content::proto::StoragePartitionConfig_FallbackMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoragePartitionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.StoragePartitionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string partition_domain = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partition_domain(), target);
  }

  // required string partition_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partition_name(), target);
  }

  // required bool in_memory = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_in_memory(), target);
  }

  // required .content.proto.StoragePartitionConfig.FallbackMode fallback_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_fallback_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.StoragePartitionConfig)
  return target;
}

size_t StoragePartitionConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.proto.StoragePartitionConfig)
  size_t total_size = 0;

  if (_internal_has_partition_domain()) {
    // required string partition_domain = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_domain());
  }

  if (_internal_has_partition_name()) {
    // required string partition_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  if (_internal_has_in_memory()) {
    // required bool in_memory = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_fallback_mode()) {
    // required .content.proto.StoragePartitionConfig.FallbackMode fallback_mode = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fallback_mode());
  }

  return total_size;
}
size_t StoragePartitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.StoragePartitionConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string partition_domain = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_domain());

    // required string partition_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());

    // required bool in_memory = 3;
    total_size += 1 + 1;

    // required .content.proto.StoragePartitionConfig.FallbackMode fallback_mode = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fallback_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoragePartitionConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StoragePartitionConfig*>(
      &from));
}

void StoragePartitionConfig::MergeFrom(const StoragePartitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.StoragePartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_partition_domain(from._internal_partition_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_partition_name(from._internal_partition_name());
    }
    if (cached_has_bits & 0x00000004u) {
      in_memory_ = from.in_memory_;
    }
    if (cached_has_bits & 0x00000008u) {
      fallback_mode_ = from.fallback_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StoragePartitionConfig::CopyFrom(const StoragePartitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.StoragePartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoragePartitionConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StoragePartitionConfig::InternalSwap(StoragePartitionConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &partition_domain_, lhs_arena,
      &other->partition_domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &partition_name_, lhs_arena,
      &other->partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoragePartitionConfig, fallback_mode_)
      + sizeof(StoragePartitionConfig::fallback_mode_)
      - PROTOBUF_FIELD_OFFSET(StoragePartitionConfig, in_memory_)>(
          reinterpret_cast<char*>(&in_memory_),
          reinterpret_cast<char*>(&other->in_memory_));
}

std::string StoragePartitionConfig::GetTypeName() const {
  return "content.proto.StoragePartitionConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::proto::EmbedderDownloadData*
Arena::CreateMaybeMessage< ::content::proto::EmbedderDownloadData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::EmbedderDownloadData >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::StoragePartitionConfig*
Arena::CreateMaybeMessage< ::content::proto::StoragePartitionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::StoragePartitionConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
