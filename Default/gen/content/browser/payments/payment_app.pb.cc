// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payment_app.proto

#include "payment_app.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
PROTOBUF_CONSTEXPR StoredPaymentInstrumentKeyInfoProto::StoredPaymentInstrumentKeyInfoProto(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , insertion_order_(uint64_t{0u}){}
struct StoredPaymentInstrumentKeyInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoredPaymentInstrumentKeyInfoProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoredPaymentInstrumentKeyInfoProtoDefaultTypeInternal() {}
  union {
    StoredPaymentInstrumentKeyInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoredPaymentInstrumentKeyInfoProtoDefaultTypeInternal _StoredPaymentInstrumentKeyInfoProto_default_instance_;
PROTOBUF_CONSTEXPR ImageSizeProto::ImageSizeProto(
    ::_pbi::ConstantInitialized)
  : width_(uint64_t{0u})
  , height_(uint64_t{0u}){}
struct ImageSizeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageSizeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageSizeProtoDefaultTypeInternal() {}
  union {
    ImageSizeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageSizeProtoDefaultTypeInternal _ImageSizeProto_default_instance_;
PROTOBUF_CONSTEXPR StoredPaymentInstrumentImageObject::StoredPaymentInstrumentImageObject(
    ::_pbi::ConstantInitialized)
  : sizes_()
  , src_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct StoredPaymentInstrumentImageObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoredPaymentInstrumentImageObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoredPaymentInstrumentImageObjectDefaultTypeInternal() {}
  union {
    StoredPaymentInstrumentImageObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoredPaymentInstrumentImageObjectDefaultTypeInternal _StoredPaymentInstrumentImageObject_default_instance_;
PROTOBUF_CONSTEXPR StoredPaymentInstrumentProto::StoredPaymentInstrumentProto(
    ::_pbi::ConstantInitialized)
  : icons_()
  , supported_card_networks_()
  , instrument_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , method_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stringified_capabilities_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , decoded_instrument_icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , registration_id_(int64_t{0}){}
struct StoredPaymentInstrumentProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoredPaymentInstrumentProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoredPaymentInstrumentProtoDefaultTypeInternal() {}
  union {
    StoredPaymentInstrumentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoredPaymentInstrumentProtoDefaultTypeInternal _StoredPaymentInstrumentProto_default_instance_;
PROTOBUF_CONSTEXPR StoredRelatedApplicationProto::StoredRelatedApplicationProto(
    ::_pbi::ConstantInitialized)
  : platform_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct StoredRelatedApplicationProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoredRelatedApplicationProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoredRelatedApplicationProtoDefaultTypeInternal() {}
  union {
    StoredRelatedApplicationProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoredRelatedApplicationProtoDefaultTypeInternal _StoredRelatedApplicationProto_default_instance_;
PROTOBUF_CONSTEXPR SupportedDelegationsProto::SupportedDelegationsProto(
    ::_pbi::ConstantInitialized)
  : shipping_address_(false)
  , payer_name_(false)
  , payer_phone_(false)
  , payer_email_(false){}
struct SupportedDelegationsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SupportedDelegationsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SupportedDelegationsProtoDefaultTypeInternal() {}
  union {
    SupportedDelegationsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SupportedDelegationsProtoDefaultTypeInternal _SupportedDelegationsProto_default_instance_;
PROTOBUF_CONSTEXPR StoredPaymentAppProto::StoredPaymentAppProto(
    ::_pbi::ConstantInitialized)
  : related_applications_()
  , scope_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_hint_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , supported_delegations_(nullptr)
  , registration_id_(int64_t{0})
  , prefer_related_applications_(false){}
struct StoredPaymentAppProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoredPaymentAppProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoredPaymentAppProtoDefaultTypeInternal() {}
  union {
    StoredPaymentAppProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoredPaymentAppProtoDefaultTypeInternal _StoredPaymentAppProto_default_instance_;
}  // namespace content
namespace content {

// ===================================================================

class StoredPaymentInstrumentKeyInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StoredPaymentInstrumentKeyInfoProto>()._has_bits_);
  static void set_has_insertion_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StoredPaymentInstrumentKeyInfoProto::StoredPaymentInstrumentKeyInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.StoredPaymentInstrumentKeyInfoProto)
}
StoredPaymentInstrumentKeyInfoProto::StoredPaymentInstrumentKeyInfoProto(const StoredPaymentInstrumentKeyInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  insertion_order_ = from.insertion_order_;
  // @@protoc_insertion_point(copy_constructor:content.StoredPaymentInstrumentKeyInfoProto)
}

inline void StoredPaymentInstrumentKeyInfoProto::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
insertion_order_ = uint64_t{0u};
}

StoredPaymentInstrumentKeyInfoProto::~StoredPaymentInstrumentKeyInfoProto() {
  // @@protoc_insertion_point(destructor:content.StoredPaymentInstrumentKeyInfoProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoredPaymentInstrumentKeyInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
}

void StoredPaymentInstrumentKeyInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoredPaymentInstrumentKeyInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.StoredPaymentInstrumentKeyInfoProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  insertion_order_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StoredPaymentInstrumentKeyInfoProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 insertion_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_insertion_order(&has_bits);
          insertion_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoredPaymentInstrumentKeyInfoProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.StoredPaymentInstrumentKeyInfoProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 insertion_order = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_insertion_order(), target);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.StoredPaymentInstrumentKeyInfoProto)
  return target;
}

size_t StoredPaymentInstrumentKeyInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.StoredPaymentInstrumentKeyInfoProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional uint64 insertion_order = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_insertion_order());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredPaymentInstrumentKeyInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StoredPaymentInstrumentKeyInfoProto*>(
      &from));
}

void StoredPaymentInstrumentKeyInfoProto::MergeFrom(const StoredPaymentInstrumentKeyInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.StoredPaymentInstrumentKeyInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      insertion_order_ = from.insertion_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StoredPaymentInstrumentKeyInfoProto::CopyFrom(const StoredPaymentInstrumentKeyInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.StoredPaymentInstrumentKeyInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredPaymentInstrumentKeyInfoProto::IsInitialized() const {
  return true;
}

void StoredPaymentInstrumentKeyInfoProto::InternalSwap(StoredPaymentInstrumentKeyInfoProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(insertion_order_, other->insertion_order_);
}

std::string StoredPaymentInstrumentKeyInfoProto::GetTypeName() const {
  return "content.StoredPaymentInstrumentKeyInfoProto";
}


// ===================================================================

class ImageSizeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageSizeProto>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ImageSizeProto::ImageSizeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.ImageSizeProto)
}
ImageSizeProto::ImageSizeProto(const ImageSizeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:content.ImageSizeProto)
}

inline void ImageSizeProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

ImageSizeProto::~ImageSizeProto() {
  // @@protoc_insertion_point(destructor:content.ImageSizeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageSizeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImageSizeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageSizeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.ImageSizeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ImageSizeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageSizeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.ImageSizeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_width(), target);
  }

  // optional uint64 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.ImageSizeProto)
  return target;
}

size_t ImageSizeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.ImageSizeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_width());
    }

    // optional uint64 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageSizeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ImageSizeProto*>(
      &from));
}

void ImageSizeProto::MergeFrom(const ImageSizeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.ImageSizeProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ImageSizeProto::CopyFrom(const ImageSizeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.ImageSizeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSizeProto::IsInitialized() const {
  return true;
}

void ImageSizeProto::InternalSwap(ImageSizeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageSizeProto, height_)
      + sizeof(ImageSizeProto::height_)
      - PROTOBUF_FIELD_OFFSET(ImageSizeProto, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

std::string ImageSizeProto::GetTypeName() const {
  return "content.ImageSizeProto";
}


// ===================================================================

class StoredPaymentInstrumentImageObject::_Internal {
 public:
  using HasBits = decltype(std::declval<StoredPaymentInstrumentImageObject>()._has_bits_);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StoredPaymentInstrumentImageObject::StoredPaymentInstrumentImageObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  sizes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.StoredPaymentInstrumentImageObject)
}
StoredPaymentInstrumentImageObject::StoredPaymentInstrumentImageObject(const StoredPaymentInstrumentImageObject& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      sizes_(from.sizes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_src()) {
    src_.Set(from._internal_src(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.StoredPaymentInstrumentImageObject)
}

inline void StoredPaymentInstrumentImageObject::SharedCtor() {
src_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  src_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StoredPaymentInstrumentImageObject::~StoredPaymentInstrumentImageObject() {
  // @@protoc_insertion_point(destructor:content.StoredPaymentInstrumentImageObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoredPaymentInstrumentImageObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  src_.Destroy();
  type_.Destroy();
}

void StoredPaymentInstrumentImageObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoredPaymentInstrumentImageObject::Clear() {
// @@protoc_insertion_point(message_clear_start:content.StoredPaymentInstrumentImageObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sizes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StoredPaymentInstrumentImageObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .content.ImageSizeProto sizes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sizes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoredPaymentInstrumentImageObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.StoredPaymentInstrumentImageObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string src = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // repeated .content.ImageSizeProto sizes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sizes_size()); i < n; i++) {
    const auto& repfield = this->_internal_sizes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.StoredPaymentInstrumentImageObject)
  return target;
}

size_t StoredPaymentInstrumentImageObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.StoredPaymentInstrumentImageObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.ImageSizeProto sizes = 3;
  total_size += 1UL * this->_internal_sizes_size();
  for (const auto& msg : this->sizes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string src = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src());
    }

    // optional string type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredPaymentInstrumentImageObject::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StoredPaymentInstrumentImageObject*>(
      &from));
}

void StoredPaymentInstrumentImageObject::MergeFrom(const StoredPaymentInstrumentImageObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.StoredPaymentInstrumentImageObject)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sizes_.MergeFrom(from.sizes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_src(from._internal_src());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StoredPaymentInstrumentImageObject::CopyFrom(const StoredPaymentInstrumentImageObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.StoredPaymentInstrumentImageObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredPaymentInstrumentImageObject::IsInitialized() const {
  return true;
}

void StoredPaymentInstrumentImageObject::InternalSwap(StoredPaymentInstrumentImageObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sizes_.InternalSwap(&other->sizes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &src_, lhs_arena,
      &other->src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
}

std::string StoredPaymentInstrumentImageObject::GetTypeName() const {
  return "content.StoredPaymentInstrumentImageObject";
}


// ===================================================================

class StoredPaymentInstrumentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StoredPaymentInstrumentProto>()._has_bits_);
  static void set_has_registration_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_instrument_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stringified_capabilities(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_decoded_instrument_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

StoredPaymentInstrumentProto::StoredPaymentInstrumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  icons_(arena),
  supported_card_networks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.StoredPaymentInstrumentProto)
}
StoredPaymentInstrumentProto::StoredPaymentInstrumentProto(const StoredPaymentInstrumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      icons_(from.icons_),
      supported_card_networks_(from.supported_card_networks_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  instrument_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instrument_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instrument_key()) {
    instrument_key_.Set(from._internal_instrument_key(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    method_.Set(from._internal_method(), 
      GetArenaForAllocation());
  }
  stringified_capabilities_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stringified_capabilities_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stringified_capabilities()) {
    stringified_capabilities_.Set(from._internal_stringified_capabilities(), 
      GetArenaForAllocation());
  }
  decoded_instrument_icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    decoded_instrument_icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_decoded_instrument_icon()) {
    decoded_instrument_icon_.Set(from._internal_decoded_instrument_icon(), 
      GetArenaForAllocation());
  }
  registration_id_ = from.registration_id_;
  // @@protoc_insertion_point(copy_constructor:content.StoredPaymentInstrumentProto)
}

inline void StoredPaymentInstrumentProto::SharedCtor() {
instrument_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instrument_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
method_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stringified_capabilities_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stringified_capabilities_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
decoded_instrument_icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  decoded_instrument_icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
registration_id_ = int64_t{0};
}

StoredPaymentInstrumentProto::~StoredPaymentInstrumentProto() {
  // @@protoc_insertion_point(destructor:content.StoredPaymentInstrumentProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoredPaymentInstrumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  instrument_key_.Destroy();
  name_.Destroy();
  method_.Destroy();
  stringified_capabilities_.Destroy();
  decoded_instrument_icon_.Destroy();
}

void StoredPaymentInstrumentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoredPaymentInstrumentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.StoredPaymentInstrumentProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icons_.Clear();
  supported_card_networks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      instrument_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      stringified_capabilities_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      decoded_instrument_icon_.ClearNonDefaultToEmpty();
    }
  }
  registration_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StoredPaymentInstrumentProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 registration_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_registration_id(&has_bits);
          registration_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string instrument_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string stringified_capabilities = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stringified_capabilities();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .content.StoredPaymentInstrumentImageObject icons = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_icons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string decoded_instrument_icon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_decoded_instrument_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 supported_card_networks = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_supported_card_networks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_supported_card_networks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoredPaymentInstrumentProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.StoredPaymentInstrumentProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 registration_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_registration_id(), target);
  }

  // optional string instrument_key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_key(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string method = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_method(), target);
  }

  // optional string stringified_capabilities = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stringified_capabilities(), target);
  }

  // repeated .content.StoredPaymentInstrumentImageObject icons = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_icons_size()); i < n; i++) {
    const auto& repfield = this->_internal_icons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string decoded_instrument_icon = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_decoded_instrument_icon(), target);
  }

  // repeated int32 supported_card_networks = 8;
  for (int i = 0, n = this->_internal_supported_card_networks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_supported_card_networks(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.StoredPaymentInstrumentProto)
  return target;
}

size_t StoredPaymentInstrumentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.StoredPaymentInstrumentProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.StoredPaymentInstrumentImageObject icons = 6;
  total_size += 1UL * this->_internal_icons_size();
  for (const auto& msg : this->icons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 supported_card_networks = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->supported_card_networks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_supported_card_networks_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string instrument_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instrument_key());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string method = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method());
    }

    // optional string stringified_capabilities = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringified_capabilities());
    }

    // optional string decoded_instrument_icon = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decoded_instrument_icon());
    }

    // optional int64 registration_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_registration_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredPaymentInstrumentProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StoredPaymentInstrumentProto*>(
      &from));
}

void StoredPaymentInstrumentProto::MergeFrom(const StoredPaymentInstrumentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.StoredPaymentInstrumentProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  icons_.MergeFrom(from.icons_);
  supported_card_networks_.MergeFrom(from.supported_card_networks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_instrument_key(from._internal_instrument_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_method(from._internal_method());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_stringified_capabilities(from._internal_stringified_capabilities());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_decoded_instrument_icon(from._internal_decoded_instrument_icon());
    }
    if (cached_has_bits & 0x00000020u) {
      registration_id_ = from.registration_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StoredPaymentInstrumentProto::CopyFrom(const StoredPaymentInstrumentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.StoredPaymentInstrumentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredPaymentInstrumentProto::IsInitialized() const {
  return true;
}

void StoredPaymentInstrumentProto::InternalSwap(StoredPaymentInstrumentProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  icons_.InternalSwap(&other->icons_);
  supported_card_networks_.InternalSwap(&other->supported_card_networks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instrument_key_, lhs_arena,
      &other->instrument_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &method_, lhs_arena,
      &other->method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stringified_capabilities_, lhs_arena,
      &other->stringified_capabilities_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &decoded_instrument_icon_, lhs_arena,
      &other->decoded_instrument_icon_, rhs_arena
  );
  swap(registration_id_, other->registration_id_);
}

std::string StoredPaymentInstrumentProto::GetTypeName() const {
  return "content.StoredPaymentInstrumentProto";
}


// ===================================================================

class StoredRelatedApplicationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StoredRelatedApplicationProto>()._has_bits_);
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StoredRelatedApplicationProto::StoredRelatedApplicationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.StoredRelatedApplicationProto)
}
StoredRelatedApplicationProto::StoredRelatedApplicationProto(const StoredRelatedApplicationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_platform()) {
    platform_.Set(from._internal_platform(), 
      GetArenaForAllocation());
  }
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.StoredRelatedApplicationProto)
}

inline void StoredRelatedApplicationProto::SharedCtor() {
platform_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  platform_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StoredRelatedApplicationProto::~StoredRelatedApplicationProto() {
  // @@protoc_insertion_point(destructor:content.StoredRelatedApplicationProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoredRelatedApplicationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  platform_.Destroy();
  id_.Destroy();
}

void StoredRelatedApplicationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoredRelatedApplicationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.StoredRelatedApplicationProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StoredRelatedApplicationProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string platform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_platform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoredRelatedApplicationProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.StoredRelatedApplicationProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string platform = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_platform(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.StoredRelatedApplicationProto)
  return target;
}

size_t StoredRelatedApplicationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.StoredRelatedApplicationProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string platform = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform());
    }

    // optional string id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredRelatedApplicationProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StoredRelatedApplicationProto*>(
      &from));
}

void StoredRelatedApplicationProto::MergeFrom(const StoredRelatedApplicationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.StoredRelatedApplicationProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_id(from._internal_id());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StoredRelatedApplicationProto::CopyFrom(const StoredRelatedApplicationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.StoredRelatedApplicationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredRelatedApplicationProto::IsInitialized() const {
  return true;
}

void StoredRelatedApplicationProto::InternalSwap(StoredRelatedApplicationProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &platform_, lhs_arena,
      &other->platform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

std::string StoredRelatedApplicationProto::GetTypeName() const {
  return "content.StoredRelatedApplicationProto";
}


// ===================================================================

class SupportedDelegationsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SupportedDelegationsProto>()._has_bits_);
  static void set_has_shipping_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_payer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payer_phone(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payer_email(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SupportedDelegationsProto::SupportedDelegationsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.SupportedDelegationsProto)
}
SupportedDelegationsProto::SupportedDelegationsProto(const SupportedDelegationsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&shipping_address_, &from.shipping_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&payer_email_) -
    reinterpret_cast<char*>(&shipping_address_)) + sizeof(payer_email_));
  // @@protoc_insertion_point(copy_constructor:content.SupportedDelegationsProto)
}

inline void SupportedDelegationsProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shipping_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&payer_email_) -
    reinterpret_cast<char*>(&shipping_address_)) + sizeof(payer_email_));
}

SupportedDelegationsProto::~SupportedDelegationsProto() {
  // @@protoc_insertion_point(destructor:content.SupportedDelegationsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SupportedDelegationsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SupportedDelegationsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SupportedDelegationsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.SupportedDelegationsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shipping_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payer_email_) -
      reinterpret_cast<char*>(&shipping_address_)) + sizeof(payer_email_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SupportedDelegationsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool shipping_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shipping_address(&has_bits);
          shipping_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool payer_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_payer_name(&has_bits);
          payer_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool payer_phone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_payer_phone(&has_bits);
          payer_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool payer_email = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_payer_email(&has_bits);
          payer_email_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SupportedDelegationsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.SupportedDelegationsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool shipping_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_shipping_address(), target);
  }

  // optional bool payer_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_payer_name(), target);
  }

  // optional bool payer_phone = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_payer_phone(), target);
  }

  // optional bool payer_email = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_payer_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.SupportedDelegationsProto)
  return target;
}

size_t SupportedDelegationsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.SupportedDelegationsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool shipping_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool payer_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool payer_phone = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool payer_email = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupportedDelegationsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SupportedDelegationsProto*>(
      &from));
}

void SupportedDelegationsProto::MergeFrom(const SupportedDelegationsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.SupportedDelegationsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      shipping_address_ = from.shipping_address_;
    }
    if (cached_has_bits & 0x00000002u) {
      payer_name_ = from.payer_name_;
    }
    if (cached_has_bits & 0x00000004u) {
      payer_phone_ = from.payer_phone_;
    }
    if (cached_has_bits & 0x00000008u) {
      payer_email_ = from.payer_email_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SupportedDelegationsProto::CopyFrom(const SupportedDelegationsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.SupportedDelegationsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportedDelegationsProto::IsInitialized() const {
  return true;
}

void SupportedDelegationsProto::InternalSwap(SupportedDelegationsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SupportedDelegationsProto, payer_email_)
      + sizeof(SupportedDelegationsProto::payer_email_)
      - PROTOBUF_FIELD_OFFSET(SupportedDelegationsProto, shipping_address_)>(
          reinterpret_cast<char*>(&shipping_address_),
          reinterpret_cast<char*>(&other->shipping_address_));
}

std::string SupportedDelegationsProto::GetTypeName() const {
  return "content.SupportedDelegationsProto";
}


// ===================================================================

class StoredPaymentAppProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StoredPaymentAppProto>()._has_bits_);
  static void set_has_registration_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prefer_related_applications(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_user_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::content::SupportedDelegationsProto& supported_delegations(const StoredPaymentAppProto* msg);
  static void set_has_supported_delegations(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::content::SupportedDelegationsProto&
StoredPaymentAppProto::_Internal::supported_delegations(const StoredPaymentAppProto* msg) {
  return *msg->supported_delegations_;
}
StoredPaymentAppProto::StoredPaymentAppProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  related_applications_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.StoredPaymentAppProto)
}
StoredPaymentAppProto::StoredPaymentAppProto(const StoredPaymentAppProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      related_applications_(from.related_applications_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  scope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    scope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scope()) {
    scope_.Set(from._internal_scope(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(from._internal_icon(), 
      GetArenaForAllocation());
  }
  user_hint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_hint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_hint()) {
    user_hint_.Set(from._internal_user_hint(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_supported_delegations()) {
    supported_delegations_ = new ::content::SupportedDelegationsProto(*from.supported_delegations_);
  } else {
    supported_delegations_ = nullptr;
  }
  ::memcpy(&registration_id_, &from.registration_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefer_related_applications_) -
    reinterpret_cast<char*>(&registration_id_)) + sizeof(prefer_related_applications_));
  // @@protoc_insertion_point(copy_constructor:content.StoredPaymentAppProto)
}

inline void StoredPaymentAppProto::SharedCtor() {
scope_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  scope_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_hint_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_hint_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&supported_delegations_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prefer_related_applications_) -
    reinterpret_cast<char*>(&supported_delegations_)) + sizeof(prefer_related_applications_));
}

StoredPaymentAppProto::~StoredPaymentAppProto() {
  // @@protoc_insertion_point(destructor:content.StoredPaymentAppProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoredPaymentAppProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  scope_.Destroy();
  name_.Destroy();
  icon_.Destroy();
  user_hint_.Destroy();
  if (this != internal_default_instance()) delete supported_delegations_;
}

void StoredPaymentAppProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoredPaymentAppProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.StoredPaymentAppProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  related_applications_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      scope_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      user_hint_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(supported_delegations_ != nullptr);
      supported_delegations_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&registration_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prefer_related_applications_) -
        reinterpret_cast<char*>(&registration_id_)) + sizeof(prefer_related_applications_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StoredPaymentAppProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 registration_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_registration_id(&has_bits);
          registration_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string scope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_scope();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool prefer_related_applications = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_prefer_related_applications(&has_bits);
          prefer_related_applications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .content.StoredRelatedApplicationProto related_applications = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_related_applications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string user_hint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_user_hint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .content.SupportedDelegationsProto supported_delegations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_supported_delegations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoredPaymentAppProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.StoredPaymentAppProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 registration_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_registration_id(), target);
  }

  // optional string scope = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_scope(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string icon = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_icon(), target);
  }

  // optional bool prefer_related_applications = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_prefer_related_applications(), target);
  }

  // repeated .content.StoredRelatedApplicationProto related_applications = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_related_applications_size()); i < n; i++) {
    const auto& repfield = this->_internal_related_applications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string user_hint = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_hint(), target);
  }

  // optional .content.SupportedDelegationsProto supported_delegations = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::supported_delegations(this),
        _Internal::supported_delegations(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.StoredPaymentAppProto)
  return target;
}

size_t StoredPaymentAppProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.StoredPaymentAppProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.StoredRelatedApplicationProto related_applications = 6;
  total_size += 1UL * this->_internal_related_applications_size();
  for (const auto& msg : this->related_applications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string scope = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scope());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string icon = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string user_hint = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_hint());
    }

    // optional .content.SupportedDelegationsProto supported_delegations = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *supported_delegations_);
    }

    // optional int64 registration_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_registration_id());
    }

    // optional bool prefer_related_applications = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredPaymentAppProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StoredPaymentAppProto*>(
      &from));
}

void StoredPaymentAppProto::MergeFrom(const StoredPaymentAppProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.StoredPaymentAppProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  related_applications_.MergeFrom(from.related_applications_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_scope(from._internal_scope());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_user_hint(from._internal_user_hint());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_supported_delegations()->::content::SupportedDelegationsProto::MergeFrom(from._internal_supported_delegations());
    }
    if (cached_has_bits & 0x00000020u) {
      registration_id_ = from.registration_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      prefer_related_applications_ = from.prefer_related_applications_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StoredPaymentAppProto::CopyFrom(const StoredPaymentAppProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.StoredPaymentAppProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredPaymentAppProto::IsInitialized() const {
  return true;
}

void StoredPaymentAppProto::InternalSwap(StoredPaymentAppProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  related_applications_.InternalSwap(&other->related_applications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &scope_, lhs_arena,
      &other->scope_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_hint_, lhs_arena,
      &other->user_hint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoredPaymentAppProto, prefer_related_applications_)
      + sizeof(StoredPaymentAppProto::prefer_related_applications_)
      - PROTOBUF_FIELD_OFFSET(StoredPaymentAppProto, supported_delegations_)>(
          reinterpret_cast<char*>(&supported_delegations_),
          reinterpret_cast<char*>(&other->supported_delegations_));
}

std::string StoredPaymentAppProto::GetTypeName() const {
  return "content.StoredPaymentAppProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::StoredPaymentInstrumentKeyInfoProto*
Arena::CreateMaybeMessage< ::content::StoredPaymentInstrumentKeyInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::StoredPaymentInstrumentKeyInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::content::ImageSizeProto*
Arena::CreateMaybeMessage< ::content::ImageSizeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::ImageSizeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::content::StoredPaymentInstrumentImageObject*
Arena::CreateMaybeMessage< ::content::StoredPaymentInstrumentImageObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::StoredPaymentInstrumentImageObject >(arena);
}
template<> PROTOBUF_NOINLINE ::content::StoredPaymentInstrumentProto*
Arena::CreateMaybeMessage< ::content::StoredPaymentInstrumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::StoredPaymentInstrumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::content::StoredRelatedApplicationProto*
Arena::CreateMaybeMessage< ::content::StoredRelatedApplicationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::StoredRelatedApplicationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::content::SupportedDelegationsProto*
Arena::CreateMaybeMessage< ::content::SupportedDelegationsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::SupportedDelegationsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::content::StoredPaymentAppProto*
Arena::CreateMaybeMessage< ::content::StoredPaymentAppProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::StoredPaymentAppProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
