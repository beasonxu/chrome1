// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "content/browser/devtools/protocol/audits.h"

#include "content/browser/devtools/protocol/protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace content {
namespace protocol {
namespace Audits {

using crdtp::DeserializerState;
using crdtp::ProtocolTypeTraits;

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Audits";
const char Metainfo::commandPrefix[] = "Audits.";
const char Metainfo::version[] = "1.3";

CRDTP_BEGIN_DESERIALIZER(AffectedCookie)
    CRDTP_DESERIALIZE_FIELD("domain", m_domain),
    CRDTP_DESERIALIZE_FIELD("name", m_name),
    CRDTP_DESERIALIZE_FIELD("path", m_path),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(AffectedCookie)
    CRDTP_SERIALIZE_FIELD("name", m_name);
    CRDTP_SERIALIZE_FIELD("path", m_path);
    CRDTP_SERIALIZE_FIELD("domain", m_domain);
CRDTP_END_SERIALIZER();


CRDTP_BEGIN_DESERIALIZER(AffectedRequest)
    CRDTP_DESERIALIZE_FIELD("requestId", m_requestId),
    CRDTP_DESERIALIZE_FIELD_OPT("url", m_url),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(AffectedRequest)
    CRDTP_SERIALIZE_FIELD("requestId", m_requestId);
    CRDTP_SERIALIZE_FIELD("url", m_url);
CRDTP_END_SERIALIZER();


CRDTP_BEGIN_DESERIALIZER(AffectedFrame)
    CRDTP_DESERIALIZE_FIELD("frameId", m_frameId),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(AffectedFrame)
    CRDTP_SERIALIZE_FIELD("frameId", m_frameId);
CRDTP_END_SERIALIZER();


namespace CookieExclusionReasonEnum {
const char ExcludeSameSiteUnspecifiedTreatedAsLax[] = "ExcludeSameSiteUnspecifiedTreatedAsLax";
const char ExcludeSameSiteNoneInsecure[] = "ExcludeSameSiteNoneInsecure";
const char ExcludeSameSiteLax[] = "ExcludeSameSiteLax";
const char ExcludeSameSiteStrict[] = "ExcludeSameSiteStrict";
const char ExcludeInvalidSameParty[] = "ExcludeInvalidSameParty";
const char ExcludeSamePartyCrossPartyContext[] = "ExcludeSamePartyCrossPartyContext";
const char ExcludeDomainNonASCII[] = "ExcludeDomainNonASCII";
} // namespace CookieExclusionReasonEnum


namespace CookieWarningReasonEnum {
const char WarnSameSiteUnspecifiedCrossSiteContext[] = "WarnSameSiteUnspecifiedCrossSiteContext";
const char WarnSameSiteNoneInsecure[] = "WarnSameSiteNoneInsecure";
const char WarnSameSiteUnspecifiedLaxAllowUnsafe[] = "WarnSameSiteUnspecifiedLaxAllowUnsafe";
const char WarnSameSiteStrictLaxDowngradeStrict[] = "WarnSameSiteStrictLaxDowngradeStrict";
const char WarnSameSiteStrictCrossDowngradeStrict[] = "WarnSameSiteStrictCrossDowngradeStrict";
const char WarnSameSiteStrictCrossDowngradeLax[] = "WarnSameSiteStrictCrossDowngradeLax";
const char WarnSameSiteLaxCrossDowngradeStrict[] = "WarnSameSiteLaxCrossDowngradeStrict";
const char WarnSameSiteLaxCrossDowngradeLax[] = "WarnSameSiteLaxCrossDowngradeLax";
const char WarnAttributeValueExceedsMaxSize[] = "WarnAttributeValueExceedsMaxSize";
const char WarnDomainNonASCII[] = "WarnDomainNonASCII";
} // namespace CookieWarningReasonEnum


namespace CookieOperationEnum {
const char SetCookie[] = "SetCookie";
const char ReadCookie[] = "ReadCookie";
} // namespace CookieOperationEnum


CRDTP_BEGIN_DESERIALIZER(CookieIssueDetails)
    CRDTP_DESERIALIZE_FIELD_OPT("cookie", m_cookie),
    CRDTP_DESERIALIZE_FIELD("cookieExclusionReasons", m_cookieExclusionReasons),
    CRDTP_DESERIALIZE_FIELD_OPT("cookieUrl", m_cookieUrl),
    CRDTP_DESERIALIZE_FIELD("cookieWarningReasons", m_cookieWarningReasons),
    CRDTP_DESERIALIZE_FIELD("operation", m_operation),
    CRDTP_DESERIALIZE_FIELD_OPT("rawCookieLine", m_rawCookieLine),
    CRDTP_DESERIALIZE_FIELD_OPT("request", m_request),
    CRDTP_DESERIALIZE_FIELD_OPT("siteForCookies", m_siteForCookies),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(CookieIssueDetails)
    CRDTP_SERIALIZE_FIELD("cookie", m_cookie);
    CRDTP_SERIALIZE_FIELD("rawCookieLine", m_rawCookieLine);
    CRDTP_SERIALIZE_FIELD("cookieWarningReasons", m_cookieWarningReasons);
    CRDTP_SERIALIZE_FIELD("cookieExclusionReasons", m_cookieExclusionReasons);
    CRDTP_SERIALIZE_FIELD("operation", m_operation);
    CRDTP_SERIALIZE_FIELD("siteForCookies", m_siteForCookies);
    CRDTP_SERIALIZE_FIELD("cookieUrl", m_cookieUrl);
    CRDTP_SERIALIZE_FIELD("request", m_request);
CRDTP_END_SERIALIZER();


namespace MixedContentResolutionStatusEnum {
const char MixedContentBlocked[] = "MixedContentBlocked";
const char MixedContentAutomaticallyUpgraded[] = "MixedContentAutomaticallyUpgraded";
const char MixedContentWarning[] = "MixedContentWarning";
} // namespace MixedContentResolutionStatusEnum


namespace MixedContentResourceTypeEnum {
const char AttributionSrc[] = "AttributionSrc";
const char Audio[] = "Audio";
const char Beacon[] = "Beacon";
const char CSPReport[] = "CSPReport";
const char Download[] = "Download";
const char EventSource[] = "EventSource";
const char Favicon[] = "Favicon";
const char Font[] = "Font";
const char Form[] = "Form";
const char Frame[] = "Frame";
const char Image[] = "Image";
const char Import[] = "Import";
const char Manifest[] = "Manifest";
const char Ping[] = "Ping";
const char PluginData[] = "PluginData";
const char PluginResource[] = "PluginResource";
const char Prefetch[] = "Prefetch";
const char Resource[] = "Resource";
const char Script[] = "Script";
const char ServiceWorker[] = "ServiceWorker";
const char SharedWorker[] = "SharedWorker";
const char Stylesheet[] = "Stylesheet";
const char Track[] = "Track";
const char Video[] = "Video";
const char Worker[] = "Worker";
const char XMLHttpRequest[] = "XMLHttpRequest";
const char XSLT[] = "XSLT";
} // namespace MixedContentResourceTypeEnum


CRDTP_BEGIN_DESERIALIZER(MixedContentIssueDetails)
    CRDTP_DESERIALIZE_FIELD_OPT("frame", m_frame),
    CRDTP_DESERIALIZE_FIELD("insecureURL", m_insecureURL),
    CRDTP_DESERIALIZE_FIELD("mainResourceURL", m_mainResourceURL),
    CRDTP_DESERIALIZE_FIELD_OPT("request", m_request),
    CRDTP_DESERIALIZE_FIELD("resolutionStatus", m_resolutionStatus),
    CRDTP_DESERIALIZE_FIELD_OPT("resourceType", m_resourceType),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(MixedContentIssueDetails)
    CRDTP_SERIALIZE_FIELD("resourceType", m_resourceType);
    CRDTP_SERIALIZE_FIELD("resolutionStatus", m_resolutionStatus);
    CRDTP_SERIALIZE_FIELD("insecureURL", m_insecureURL);
    CRDTP_SERIALIZE_FIELD("mainResourceURL", m_mainResourceURL);
    CRDTP_SERIALIZE_FIELD("request", m_request);
    CRDTP_SERIALIZE_FIELD("frame", m_frame);
CRDTP_END_SERIALIZER();


namespace BlockedByResponseReasonEnum {
const char CoepFrameResourceNeedsCoepHeader[] = "CoepFrameResourceNeedsCoepHeader";
const char CoopSandboxedIFrameCannotNavigateToCoopPage[] = "CoopSandboxedIFrameCannotNavigateToCoopPage";
const char CorpNotSameOrigin[] = "CorpNotSameOrigin";
const char CorpNotSameOriginAfterDefaultedToSameOriginByCoep[] = "CorpNotSameOriginAfterDefaultedToSameOriginByCoep";
const char CorpNotSameSite[] = "CorpNotSameSite";
} // namespace BlockedByResponseReasonEnum


CRDTP_BEGIN_DESERIALIZER(BlockedByResponseIssueDetails)
    CRDTP_DESERIALIZE_FIELD_OPT("blockedFrame", m_blockedFrame),
    CRDTP_DESERIALIZE_FIELD_OPT("parentFrame", m_parentFrame),
    CRDTP_DESERIALIZE_FIELD("reason", m_reason),
    CRDTP_DESERIALIZE_FIELD("request", m_request),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(BlockedByResponseIssueDetails)
    CRDTP_SERIALIZE_FIELD("request", m_request);
    CRDTP_SERIALIZE_FIELD("parentFrame", m_parentFrame);
    CRDTP_SERIALIZE_FIELD("blockedFrame", m_blockedFrame);
    CRDTP_SERIALIZE_FIELD("reason", m_reason);
CRDTP_END_SERIALIZER();


namespace HeavyAdResolutionStatusEnum {
const char HeavyAdBlocked[] = "HeavyAdBlocked";
const char HeavyAdWarning[] = "HeavyAdWarning";
} // namespace HeavyAdResolutionStatusEnum


namespace HeavyAdReasonEnum {
const char NetworkTotalLimit[] = "NetworkTotalLimit";
const char CpuTotalLimit[] = "CpuTotalLimit";
const char CpuPeakLimit[] = "CpuPeakLimit";
} // namespace HeavyAdReasonEnum


CRDTP_BEGIN_DESERIALIZER(HeavyAdIssueDetails)
    CRDTP_DESERIALIZE_FIELD("frame", m_frame),
    CRDTP_DESERIALIZE_FIELD("reason", m_reason),
    CRDTP_DESERIALIZE_FIELD("resolution", m_resolution),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(HeavyAdIssueDetails)
    CRDTP_SERIALIZE_FIELD("resolution", m_resolution);
    CRDTP_SERIALIZE_FIELD("reason", m_reason);
    CRDTP_SERIALIZE_FIELD("frame", m_frame);
CRDTP_END_SERIALIZER();


namespace ContentSecurityPolicyViolationTypeEnum {
const char KInlineViolation[] = "kInlineViolation";
const char KEvalViolation[] = "kEvalViolation";
const char KURLViolation[] = "kURLViolation";
const char KTrustedTypesSinkViolation[] = "kTrustedTypesSinkViolation";
const char KTrustedTypesPolicyViolation[] = "kTrustedTypesPolicyViolation";
const char KWasmEvalViolation[] = "kWasmEvalViolation";
} // namespace ContentSecurityPolicyViolationTypeEnum


CRDTP_BEGIN_DESERIALIZER(SourceCodeLocation)
    CRDTP_DESERIALIZE_FIELD("columnNumber", m_columnNumber),
    CRDTP_DESERIALIZE_FIELD("lineNumber", m_lineNumber),
    CRDTP_DESERIALIZE_FIELD_OPT("scriptId", m_scriptId),
    CRDTP_DESERIALIZE_FIELD("url", m_url),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(SourceCodeLocation)
    CRDTP_SERIALIZE_FIELD("scriptId", m_scriptId);
    CRDTP_SERIALIZE_FIELD("url", m_url);
    CRDTP_SERIALIZE_FIELD("lineNumber", m_lineNumber);
    CRDTP_SERIALIZE_FIELD("columnNumber", m_columnNumber);
CRDTP_END_SERIALIZER();


CRDTP_BEGIN_DESERIALIZER(ContentSecurityPolicyIssueDetails)
    CRDTP_DESERIALIZE_FIELD_OPT("blockedURL", m_blockedURL),
    CRDTP_DESERIALIZE_FIELD("contentSecurityPolicyViolationType", m_contentSecurityPolicyViolationType),
    CRDTP_DESERIALIZE_FIELD_OPT("frameAncestor", m_frameAncestor),
    CRDTP_DESERIALIZE_FIELD("isReportOnly", m_isReportOnly),
    CRDTP_DESERIALIZE_FIELD_OPT("sourceCodeLocation", m_sourceCodeLocation),
    CRDTP_DESERIALIZE_FIELD("violatedDirective", m_violatedDirective),
    CRDTP_DESERIALIZE_FIELD_OPT("violatingNodeId", m_violatingNodeId),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(ContentSecurityPolicyIssueDetails)
    CRDTP_SERIALIZE_FIELD("blockedURL", m_blockedURL);
    CRDTP_SERIALIZE_FIELD("violatedDirective", m_violatedDirective);
    CRDTP_SERIALIZE_FIELD("isReportOnly", m_isReportOnly);
    CRDTP_SERIALIZE_FIELD("contentSecurityPolicyViolationType", m_contentSecurityPolicyViolationType);
    CRDTP_SERIALIZE_FIELD("frameAncestor", m_frameAncestor);
    CRDTP_SERIALIZE_FIELD("sourceCodeLocation", m_sourceCodeLocation);
    CRDTP_SERIALIZE_FIELD("violatingNodeId", m_violatingNodeId);
CRDTP_END_SERIALIZER();


namespace SharedArrayBufferIssueTypeEnum {
const char TransferIssue[] = "TransferIssue";
const char CreationIssue[] = "CreationIssue";
} // namespace SharedArrayBufferIssueTypeEnum


CRDTP_BEGIN_DESERIALIZER(SharedArrayBufferIssueDetails)
    CRDTP_DESERIALIZE_FIELD("isWarning", m_isWarning),
    CRDTP_DESERIALIZE_FIELD("sourceCodeLocation", m_sourceCodeLocation),
    CRDTP_DESERIALIZE_FIELD("type", m_type),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(SharedArrayBufferIssueDetails)
    CRDTP_SERIALIZE_FIELD("sourceCodeLocation", m_sourceCodeLocation);
    CRDTP_SERIALIZE_FIELD("isWarning", m_isWarning);
    CRDTP_SERIALIZE_FIELD("type", m_type);
CRDTP_END_SERIALIZER();


namespace TwaQualityEnforcementViolationTypeEnum {
const char KHttpError[] = "kHttpError";
const char KUnavailableOffline[] = "kUnavailableOffline";
const char KDigitalAssetLinks[] = "kDigitalAssetLinks";
} // namespace TwaQualityEnforcementViolationTypeEnum


CRDTP_BEGIN_DESERIALIZER(TrustedWebActivityIssueDetails)
    CRDTP_DESERIALIZE_FIELD_OPT("httpStatusCode", m_httpStatusCode),
    CRDTP_DESERIALIZE_FIELD_OPT("packageName", m_packageName),
    CRDTP_DESERIALIZE_FIELD_OPT("signature", m_signature),
    CRDTP_DESERIALIZE_FIELD("url", m_url),
    CRDTP_DESERIALIZE_FIELD("violationType", m_violationType),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(TrustedWebActivityIssueDetails)
    CRDTP_SERIALIZE_FIELD("url", m_url);
    CRDTP_SERIALIZE_FIELD("violationType", m_violationType);
    CRDTP_SERIALIZE_FIELD("httpStatusCode", m_httpStatusCode);
    CRDTP_SERIALIZE_FIELD("packageName", m_packageName);
    CRDTP_SERIALIZE_FIELD("signature", m_signature);
CRDTP_END_SERIALIZER();


CRDTP_BEGIN_DESERIALIZER(LowTextContrastIssueDetails)
    CRDTP_DESERIALIZE_FIELD("contrastRatio", m_contrastRatio),
    CRDTP_DESERIALIZE_FIELD("fontSize", m_fontSize),
    CRDTP_DESERIALIZE_FIELD("fontWeight", m_fontWeight),
    CRDTP_DESERIALIZE_FIELD("thresholdAA", m_thresholdAA),
    CRDTP_DESERIALIZE_FIELD("thresholdAAA", m_thresholdAAA),
    CRDTP_DESERIALIZE_FIELD("violatingNodeId", m_violatingNodeId),
    CRDTP_DESERIALIZE_FIELD("violatingNodeSelector", m_violatingNodeSelector),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(LowTextContrastIssueDetails)
    CRDTP_SERIALIZE_FIELD("violatingNodeId", m_violatingNodeId);
    CRDTP_SERIALIZE_FIELD("violatingNodeSelector", m_violatingNodeSelector);
    CRDTP_SERIALIZE_FIELD("contrastRatio", m_contrastRatio);
    CRDTP_SERIALIZE_FIELD("thresholdAA", m_thresholdAA);
    CRDTP_SERIALIZE_FIELD("thresholdAAA", m_thresholdAAA);
    CRDTP_SERIALIZE_FIELD("fontSize", m_fontSize);
    CRDTP_SERIALIZE_FIELD("fontWeight", m_fontWeight);
CRDTP_END_SERIALIZER();


CRDTP_BEGIN_DESERIALIZER(CorsIssueDetails)
    CRDTP_DESERIALIZE_FIELD_OPT("clientSecurityState", m_clientSecurityState),
    CRDTP_DESERIALIZE_FIELD("corsErrorStatus", m_corsErrorStatus),
    CRDTP_DESERIALIZE_FIELD_OPT("initiatorOrigin", m_initiatorOrigin),
    CRDTP_DESERIALIZE_FIELD("isWarning", m_isWarning),
    CRDTP_DESERIALIZE_FIELD_OPT("location", m_location),
    CRDTP_DESERIALIZE_FIELD("request", m_request),
    CRDTP_DESERIALIZE_FIELD_OPT("resourceIPAddressSpace", m_resourceIPAddressSpace),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(CorsIssueDetails)
    CRDTP_SERIALIZE_FIELD("corsErrorStatus", m_corsErrorStatus);
    CRDTP_SERIALIZE_FIELD("isWarning", m_isWarning);
    CRDTP_SERIALIZE_FIELD("request", m_request);
    CRDTP_SERIALIZE_FIELD("location", m_location);
    CRDTP_SERIALIZE_FIELD("initiatorOrigin", m_initiatorOrigin);
    CRDTP_SERIALIZE_FIELD("resourceIPAddressSpace", m_resourceIPAddressSpace);
    CRDTP_SERIALIZE_FIELD("clientSecurityState", m_clientSecurityState);
CRDTP_END_SERIALIZER();


namespace AttributionReportingIssueTypeEnum {
const char PermissionPolicyDisabled[] = "PermissionPolicyDisabled";
const char UntrustworthyReportingOrigin[] = "UntrustworthyReportingOrigin";
const char InsecureContext[] = "InsecureContext";
const char InvalidHeader[] = "InvalidHeader";
const char InvalidRegisterTriggerHeader[] = "InvalidRegisterTriggerHeader";
const char InvalidEligibleHeader[] = "InvalidEligibleHeader";
const char TooManyConcurrentRequests[] = "TooManyConcurrentRequests";
const char SourceAndTriggerHeaders[] = "SourceAndTriggerHeaders";
const char SourceIgnored[] = "SourceIgnored";
const char TriggerIgnored[] = "TriggerIgnored";
} // namespace AttributionReportingIssueTypeEnum


CRDTP_BEGIN_DESERIALIZER(AttributionReportingIssueDetails)
    CRDTP_DESERIALIZE_FIELD_OPT("invalidParameter", m_invalidParameter),
    CRDTP_DESERIALIZE_FIELD_OPT("request", m_request),
    CRDTP_DESERIALIZE_FIELD_OPT("violatingNodeId", m_violatingNodeId),
    CRDTP_DESERIALIZE_FIELD("violationType", m_violationType),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(AttributionReportingIssueDetails)
    CRDTP_SERIALIZE_FIELD("violationType", m_violationType);
    CRDTP_SERIALIZE_FIELD("request", m_request);
    CRDTP_SERIALIZE_FIELD("violatingNodeId", m_violatingNodeId);
    CRDTP_SERIALIZE_FIELD("invalidParameter", m_invalidParameter);
CRDTP_END_SERIALIZER();


CRDTP_BEGIN_DESERIALIZER(QuirksModeIssueDetails)
    CRDTP_DESERIALIZE_FIELD("documentNodeId", m_documentNodeId),
    CRDTP_DESERIALIZE_FIELD("frameId", m_frameId),
    CRDTP_DESERIALIZE_FIELD("isLimitedQuirksMode", m_isLimitedQuirksMode),
    CRDTP_DESERIALIZE_FIELD("loaderId", m_loaderId),
    CRDTP_DESERIALIZE_FIELD("url", m_url),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(QuirksModeIssueDetails)
    CRDTP_SERIALIZE_FIELD("isLimitedQuirksMode", m_isLimitedQuirksMode);
    CRDTP_SERIALIZE_FIELD("documentNodeId", m_documentNodeId);
    CRDTP_SERIALIZE_FIELD("url", m_url);
    CRDTP_SERIALIZE_FIELD("frameId", m_frameId);
    CRDTP_SERIALIZE_FIELD("loaderId", m_loaderId);
CRDTP_END_SERIALIZER();


CRDTP_BEGIN_DESERIALIZER(NavigatorUserAgentIssueDetails)
    CRDTP_DESERIALIZE_FIELD_OPT("location", m_location),
    CRDTP_DESERIALIZE_FIELD("url", m_url),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(NavigatorUserAgentIssueDetails)
    CRDTP_SERIALIZE_FIELD("url", m_url);
    CRDTP_SERIALIZE_FIELD("location", m_location);
CRDTP_END_SERIALIZER();


namespace GenericIssueErrorTypeEnum {
const char CrossOriginPortalPostMessageError[] = "CrossOriginPortalPostMessageError";
} // namespace GenericIssueErrorTypeEnum


CRDTP_BEGIN_DESERIALIZER(GenericIssueDetails)
    CRDTP_DESERIALIZE_FIELD("errorType", m_errorType),
    CRDTP_DESERIALIZE_FIELD_OPT("frameId", m_frameId),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(GenericIssueDetails)
    CRDTP_SERIALIZE_FIELD("errorType", m_errorType);
    CRDTP_SERIALIZE_FIELD("frameId", m_frameId);
CRDTP_END_SERIALIZER();


namespace DeprecationIssueTypeEnum {
const char AuthorizationCoveredByWildcard[] = "AuthorizationCoveredByWildcard";
const char CanRequestURLHTTPContainingNewline[] = "CanRequestURLHTTPContainingNewline";
const char ChromeLoadTimesConnectionInfo[] = "ChromeLoadTimesConnectionInfo";
const char ChromeLoadTimesFirstPaintAfterLoadTime[] = "ChromeLoadTimesFirstPaintAfterLoadTime";
const char ChromeLoadTimesWasAlternateProtocolAvailable[] = "ChromeLoadTimesWasAlternateProtocolAvailable";
const char CookieWithTruncatingChar[] = "CookieWithTruncatingChar";
const char CrossOriginAccessBasedOnDocumentDomain[] = "CrossOriginAccessBasedOnDocumentDomain";
const char CrossOriginWindowAlert[] = "CrossOriginWindowAlert";
const char CrossOriginWindowConfirm[] = "CrossOriginWindowConfirm";
const char CSSSelectorInternalMediaControlsOverlayCastButton[] = "CSSSelectorInternalMediaControlsOverlayCastButton";
const char DeprecationExample[] = "DeprecationExample";
const char DocumentDomainSettingWithoutOriginAgentClusterHeader[] = "DocumentDomainSettingWithoutOriginAgentClusterHeader";
const char EventPath[] = "EventPath";
const char ExpectCTHeader[] = "ExpectCTHeader";
const char GeolocationInsecureOrigin[] = "GeolocationInsecureOrigin";
const char GeolocationInsecureOriginDeprecatedNotRemoved[] = "GeolocationInsecureOriginDeprecatedNotRemoved";
const char GetUserMediaInsecureOrigin[] = "GetUserMediaInsecureOrigin";
const char HostCandidateAttributeGetter[] = "HostCandidateAttributeGetter";
const char IdentityInCanMakePaymentEvent[] = "IdentityInCanMakePaymentEvent";
const char InsecurePrivateNetworkSubresourceRequest[] = "InsecurePrivateNetworkSubresourceRequest";
const char LegacyConstraintGoogIPv6[] = "LegacyConstraintGoogIPv6";
const char LocalCSSFileExtensionRejected[] = "LocalCSSFileExtensionRejected";
const char MediaSourceAbortRemove[] = "MediaSourceAbortRemove";
const char MediaSourceDurationTruncatingBuffered[] = "MediaSourceDurationTruncatingBuffered";
const char NavigateEventRestoreScroll[] = "NavigateEventRestoreScroll";
const char NavigateEventTransitionWhile[] = "NavigateEventTransitionWhile";
const char NoSysexWebMIDIWithoutPermission[] = "NoSysexWebMIDIWithoutPermission";
const char NotificationInsecureOrigin[] = "NotificationInsecureOrigin";
const char NotificationPermissionRequestedIframe[] = "NotificationPermissionRequestedIframe";
const char ObsoleteWebRtcCipherSuite[] = "ObsoleteWebRtcCipherSuite";
const char OpenWebDatabaseInsecureContext[] = "OpenWebDatabaseInsecureContext";
const char OverflowVisibleOnReplacedElement[] = "OverflowVisibleOnReplacedElement";
const char PersistentQuotaType[] = "PersistentQuotaType";
const char PictureSourceSrc[] = "PictureSourceSrc";
const char PrefixedCancelAnimationFrame[] = "PrefixedCancelAnimationFrame";
const char PrefixedRequestAnimationFrame[] = "PrefixedRequestAnimationFrame";
const char PrefixedStorageInfo[] = "PrefixedStorageInfo";
const char PrefixedVideoDisplayingFullscreen[] = "PrefixedVideoDisplayingFullscreen";
const char PrefixedVideoEnterFullscreen[] = "PrefixedVideoEnterFullscreen";
const char PrefixedVideoEnterFullScreen[] = "PrefixedVideoEnterFullScreen";
const char PrefixedVideoExitFullscreen[] = "PrefixedVideoExitFullscreen";
const char PrefixedVideoExitFullScreen[] = "PrefixedVideoExitFullScreen";
const char PrefixedVideoSupportsFullscreen[] = "PrefixedVideoSupportsFullscreen";
const char RangeExpand[] = "RangeExpand";
const char RequestedSubresourceWithEmbeddedCredentials[] = "RequestedSubresourceWithEmbeddedCredentials";
const char RTCConstraintEnableDtlsSrtpFalse[] = "RTCConstraintEnableDtlsSrtpFalse";
const char RTCConstraintEnableDtlsSrtpTrue[] = "RTCConstraintEnableDtlsSrtpTrue";
const char RTCPeerConnectionComplexPlanBSdpUsingDefaultSdpSemantics[] = "RTCPeerConnectionComplexPlanBSdpUsingDefaultSdpSemantics";
const char RTCPeerConnectionSdpSemanticsPlanB[] = "RTCPeerConnectionSdpSemanticsPlanB";
const char RtcpMuxPolicyNegotiate[] = "RtcpMuxPolicyNegotiate";
const char SharedArrayBufferConstructedWithoutIsolation[] = "SharedArrayBufferConstructedWithoutIsolation";
const char TextToSpeech_DisallowedByAutoplay[] = "TextToSpeech_DisallowedByAutoplay";
const char V8SharedArrayBufferConstructedInExtensionWithoutIsolation[] = "V8SharedArrayBufferConstructedInExtensionWithoutIsolation";
const char XHRJSONEncodingDetection[] = "XHRJSONEncodingDetection";
const char XMLHttpRequestSynchronousInNonWorkerOutsideBeforeUnload[] = "XMLHttpRequestSynchronousInNonWorkerOutsideBeforeUnload";
const char XRSupportsSession[] = "XRSupportsSession";
} // namespace DeprecationIssueTypeEnum


CRDTP_BEGIN_DESERIALIZER(DeprecationIssueDetails)
    CRDTP_DESERIALIZE_FIELD_OPT("affectedFrame", m_affectedFrame),
    CRDTP_DESERIALIZE_FIELD("sourceCodeLocation", m_sourceCodeLocation),
    CRDTP_DESERIALIZE_FIELD("type", m_type),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(DeprecationIssueDetails)
    CRDTP_SERIALIZE_FIELD("affectedFrame", m_affectedFrame);
    CRDTP_SERIALIZE_FIELD("sourceCodeLocation", m_sourceCodeLocation);
    CRDTP_SERIALIZE_FIELD("type", m_type);
CRDTP_END_SERIALIZER();


namespace ClientHintIssueReasonEnum {
const char MetaTagAllowListInvalidOrigin[] = "MetaTagAllowListInvalidOrigin";
const char MetaTagModifiedHTML[] = "MetaTagModifiedHTML";
} // namespace ClientHintIssueReasonEnum


CRDTP_BEGIN_DESERIALIZER(FederatedAuthRequestIssueDetails)
    CRDTP_DESERIALIZE_FIELD("federatedAuthRequestIssueReason", m_federatedAuthRequestIssueReason),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(FederatedAuthRequestIssueDetails)
    CRDTP_SERIALIZE_FIELD("federatedAuthRequestIssueReason", m_federatedAuthRequestIssueReason);
CRDTP_END_SERIALIZER();


namespace FederatedAuthRequestIssueReasonEnum {
const char ApprovalDeclined[] = "ApprovalDeclined";
const char TooManyRequests[] = "TooManyRequests";
const char ManifestListHttpNotFound[] = "ManifestListHttpNotFound";
const char ManifestListNoResponse[] = "ManifestListNoResponse";
const char ManifestListInvalidResponse[] = "ManifestListInvalidResponse";
const char ManifestNotInManifestList[] = "ManifestNotInManifestList";
const char ManifestListTooBig[] = "ManifestListTooBig";
const char ManifestHttpNotFound[] = "ManifestHttpNotFound";
const char ManifestNoResponse[] = "ManifestNoResponse";
const char ManifestInvalidResponse[] = "ManifestInvalidResponse";
const char ClientMetadataHttpNotFound[] = "ClientMetadataHttpNotFound";
const char ClientMetadataNoResponse[] = "ClientMetadataNoResponse";
const char ClientMetadataInvalidResponse[] = "ClientMetadataInvalidResponse";
const char DisabledInSettings[] = "DisabledInSettings";
const char ErrorFetchingSignin[] = "ErrorFetchingSignin";
const char InvalidSigninResponse[] = "InvalidSigninResponse";
const char AccountsHttpNotFound[] = "AccountsHttpNotFound";
const char AccountsNoResponse[] = "AccountsNoResponse";
const char AccountsInvalidResponse[] = "AccountsInvalidResponse";
const char IdTokenHttpNotFound[] = "IdTokenHttpNotFound";
const char IdTokenNoResponse[] = "IdTokenNoResponse";
const char IdTokenInvalidResponse[] = "IdTokenInvalidResponse";
const char IdTokenInvalidRequest[] = "IdTokenInvalidRequest";
const char ErrorIdToken[] = "ErrorIdToken";
const char Canceled[] = "Canceled";
} // namespace FederatedAuthRequestIssueReasonEnum


CRDTP_BEGIN_DESERIALIZER(ClientHintIssueDetails)
    CRDTP_DESERIALIZE_FIELD("clientHintIssueReason", m_clientHintIssueReason),
    CRDTP_DESERIALIZE_FIELD("sourceCodeLocation", m_sourceCodeLocation),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(ClientHintIssueDetails)
    CRDTP_SERIALIZE_FIELD("sourceCodeLocation", m_sourceCodeLocation);
    CRDTP_SERIALIZE_FIELD("clientHintIssueReason", m_clientHintIssueReason);
CRDTP_END_SERIALIZER();


namespace InspectorIssueCodeEnum {
const char CookieIssue[] = "CookieIssue";
const char MixedContentIssue[] = "MixedContentIssue";
const char BlockedByResponseIssue[] = "BlockedByResponseIssue";
const char HeavyAdIssue[] = "HeavyAdIssue";
const char ContentSecurityPolicyIssue[] = "ContentSecurityPolicyIssue";
const char SharedArrayBufferIssue[] = "SharedArrayBufferIssue";
const char TrustedWebActivityIssue[] = "TrustedWebActivityIssue";
const char LowTextContrastIssue[] = "LowTextContrastIssue";
const char CorsIssue[] = "CorsIssue";
const char AttributionReportingIssue[] = "AttributionReportingIssue";
const char QuirksModeIssue[] = "QuirksModeIssue";
const char NavigatorUserAgentIssue[] = "NavigatorUserAgentIssue";
const char GenericIssue[] = "GenericIssue";
const char DeprecationIssue[] = "DeprecationIssue";
const char ClientHintIssue[] = "ClientHintIssue";
const char FederatedAuthRequestIssue[] = "FederatedAuthRequestIssue";
} // namespace InspectorIssueCodeEnum


CRDTP_BEGIN_DESERIALIZER(InspectorIssueDetails)
    CRDTP_DESERIALIZE_FIELD_OPT("attributionReportingIssueDetails", m_attributionReportingIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("blockedByResponseIssueDetails", m_blockedByResponseIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("clientHintIssueDetails", m_clientHintIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("contentSecurityPolicyIssueDetails", m_contentSecurityPolicyIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("cookieIssueDetails", m_cookieIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("corsIssueDetails", m_corsIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("deprecationIssueDetails", m_deprecationIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("federatedAuthRequestIssueDetails", m_federatedAuthRequestIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("genericIssueDetails", m_genericIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("heavyAdIssueDetails", m_heavyAdIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("lowTextContrastIssueDetails", m_lowTextContrastIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("mixedContentIssueDetails", m_mixedContentIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("navigatorUserAgentIssueDetails", m_navigatorUserAgentIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("quirksModeIssueDetails", m_quirksModeIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("sharedArrayBufferIssueDetails", m_sharedArrayBufferIssueDetails),
    CRDTP_DESERIALIZE_FIELD_OPT("twaQualityEnforcementDetails", m_twaQualityEnforcementDetails),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(InspectorIssueDetails)
    CRDTP_SERIALIZE_FIELD("cookieIssueDetails", m_cookieIssueDetails);
    CRDTP_SERIALIZE_FIELD("mixedContentIssueDetails", m_mixedContentIssueDetails);
    CRDTP_SERIALIZE_FIELD("blockedByResponseIssueDetails", m_blockedByResponseIssueDetails);
    CRDTP_SERIALIZE_FIELD("heavyAdIssueDetails", m_heavyAdIssueDetails);
    CRDTP_SERIALIZE_FIELD("contentSecurityPolicyIssueDetails", m_contentSecurityPolicyIssueDetails);
    CRDTP_SERIALIZE_FIELD("sharedArrayBufferIssueDetails", m_sharedArrayBufferIssueDetails);
    CRDTP_SERIALIZE_FIELD("twaQualityEnforcementDetails", m_twaQualityEnforcementDetails);
    CRDTP_SERIALIZE_FIELD("lowTextContrastIssueDetails", m_lowTextContrastIssueDetails);
    CRDTP_SERIALIZE_FIELD("corsIssueDetails", m_corsIssueDetails);
    CRDTP_SERIALIZE_FIELD("attributionReportingIssueDetails", m_attributionReportingIssueDetails);
    CRDTP_SERIALIZE_FIELD("quirksModeIssueDetails", m_quirksModeIssueDetails);
    CRDTP_SERIALIZE_FIELD("navigatorUserAgentIssueDetails", m_navigatorUserAgentIssueDetails);
    CRDTP_SERIALIZE_FIELD("genericIssueDetails", m_genericIssueDetails);
    CRDTP_SERIALIZE_FIELD("deprecationIssueDetails", m_deprecationIssueDetails);
    CRDTP_SERIALIZE_FIELD("clientHintIssueDetails", m_clientHintIssueDetails);
    CRDTP_SERIALIZE_FIELD("federatedAuthRequestIssueDetails", m_federatedAuthRequestIssueDetails);
CRDTP_END_SERIALIZER();



CRDTP_BEGIN_DESERIALIZER(InspectorIssue)
    CRDTP_DESERIALIZE_FIELD("code", m_code),
    CRDTP_DESERIALIZE_FIELD("details", m_details),
    CRDTP_DESERIALIZE_FIELD_OPT("issueId", m_issueId),
CRDTP_END_DESERIALIZER()

CRDTP_BEGIN_SERIALIZER(InspectorIssue)
    CRDTP_SERIALIZE_FIELD("code", m_code);
    CRDTP_SERIALIZE_FIELD("details", m_details);
    CRDTP_SERIALIZE_FIELD("issueId", m_issueId);
CRDTP_END_SERIALIZER();


// ------------- Enum values from params.


namespace GetEncodedResponse {
namespace EncodingEnum {
const char* Webp = "webp";
const char* Jpeg = "jpeg";
const char* Png = "png";
} // namespace EncodingEnum
} // namespace GetEncodedResponse

// ------------- Frontend notifications.

void Frontend::IssueAdded(std::unique_ptr<protocol::Audits::InspectorIssue> issue)
{
    if (!frontend_channel_)
        return;
    crdtp::ObjectSerializer serializer;
    serializer.AddField(crdtp::MakeSpan("issue"), issue);
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Audits.issueAdded", serializer.Finish()));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void disable(const crdtp::Dispatchable& dispatchable);
    void enable(const crdtp::Dispatchable& dispatchable);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("disable"),
          &DomainDispatcherImpl::disable
    },
    {
          crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;

  return [this, handler](const crdtp::Dispatchable& dispatchable) {
    (this->*handler)(dispatchable);
  };
}


namespace {


}  // namespace

void DomainDispatcherImpl::disable(const crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->Disable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Audits.disable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {


}  // namespace

void DomainDispatcherImpl::enable(const crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->Enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Audits.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("Audits"), SortedRedirects(), std::move(dispatcher));
}

} // Audits
} // namespace content
} // namespace protocol
