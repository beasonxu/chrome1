// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devtools_background_services.proto

#include "devtools_background_services.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
namespace devtools {
namespace proto {
PROTOBUF_CONSTEXPR BackgroundServiceEvent_EventMetadataEntry_DoNotUse::BackgroundServiceEvent_EventMetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct BackgroundServiceEvent_EventMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundServiceEvent_EventMetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundServiceEvent_EventMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BackgroundServiceEvent_EventMetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundServiceEvent_EventMetadataEntry_DoNotUseDefaultTypeInternal _BackgroundServiceEvent_EventMetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR BackgroundServiceEvent::BackgroundServiceEvent(
    ::_pbi::ConstantInitialized)
  : event_metadata_()
  , origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , event_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instance_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , timestamp_(int64_t{0})
  , service_worker_registration_id_(int64_t{0})
  , background_service_(0)
{}
struct BackgroundServiceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundServiceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundServiceEventDefaultTypeInternal() {}
  union {
    BackgroundServiceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundServiceEventDefaultTypeInternal _BackgroundServiceEvent_default_instance_;
}  // namespace proto
}  // namespace devtools
}  // namespace content
namespace content {
namespace devtools {
namespace proto {
bool BackgroundService_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundService_strings[9] = {};

static const char BackgroundService_names[] =
  "BACKGROUND_FETCH"
  "BACKGROUND_SYNC"
  "COUNT"
  "NOTIFICATIONS"
  "PAYMENT_HANDLER"
  "PERIODIC_BACKGROUND_SYNC"
  "PUSH_MESSAGING"
  "TEST_BACKGROUND_SERVICE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundService_entries[] = {
  { {BackgroundService_names + 0, 16}, 2 },
  { {BackgroundService_names + 16, 15}, 3 },
  { {BackgroundService_names + 31, 5}, 8 },
  { {BackgroundService_names + 36, 13}, 5 },
  { {BackgroundService_names + 49, 15}, 6 },
  { {BackgroundService_names + 64, 24}, 7 },
  { {BackgroundService_names + 88, 14}, 4 },
  { {BackgroundService_names + 102, 23}, 1 },
  { {BackgroundService_names + 125, 7}, 0 },
};

static const int BackgroundService_entries_by_number[] = {
  8, // 0 -> UNKNOWN
  7, // 1 -> TEST_BACKGROUND_SERVICE
  0, // 2 -> BACKGROUND_FETCH
  1, // 3 -> BACKGROUND_SYNC
  6, // 4 -> PUSH_MESSAGING
  3, // 5 -> NOTIFICATIONS
  4, // 6 -> PAYMENT_HANDLER
  5, // 7 -> PERIODIC_BACKGROUND_SYNC
  2, // 8 -> COUNT
};

const std::string& BackgroundService_Name(
    BackgroundService value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundService_entries,
          BackgroundService_entries_by_number,
          9, BackgroundService_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundService_entries,
      BackgroundService_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundService_strings[idx].get();
}
bool BackgroundService_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundService* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundService_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundService>(int_value);
  }
  return success;
}

// ===================================================================

BackgroundServiceEvent_EventMetadataEntry_DoNotUse::BackgroundServiceEvent_EventMetadataEntry_DoNotUse() {}
BackgroundServiceEvent_EventMetadataEntry_DoNotUse::BackgroundServiceEvent_EventMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BackgroundServiceEvent_EventMetadataEntry_DoNotUse::MergeFrom(const BackgroundServiceEvent_EventMetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class BackgroundServiceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundServiceEvent>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_worker_registration_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_background_service(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BackgroundServiceEvent::BackgroundServiceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  event_metadata_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.devtools.proto.BackgroundServiceEvent)
}
BackgroundServiceEvent::BackgroundServiceEvent(const BackgroundServiceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  event_metadata_.MergeFrom(from.event_metadata_);
  origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_origin()) {
    origin_.Set(from._internal_origin(), 
      GetArenaForAllocation());
  }
  event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    event_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_name()) {
    event_name_.Set(from._internal_event_name(), 
      GetArenaForAllocation());
  }
  instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instance_id()) {
    instance_id_.Set(from._internal_instance_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&background_service_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(background_service_));
  // @@protoc_insertion_point(copy_constructor:content.devtools.proto.BackgroundServiceEvent)
}

inline void BackgroundServiceEvent::SharedCtor() {
origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
event_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  event_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instance_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instance_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&background_service_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(background_service_));
}

BackgroundServiceEvent::~BackgroundServiceEvent() {
  // @@protoc_insertion_point(destructor:content.devtools.proto.BackgroundServiceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundServiceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  event_metadata_.Destruct();
  origin_.Destroy();
  event_name_.Destroy();
  instance_id_.Destroy();
}

void BackgroundServiceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundServiceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:content.devtools.proto.BackgroundServiceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      origin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      event_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      instance_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&background_service_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(background_service_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundServiceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 service_worker_registration_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_service_worker_registration_id(&has_bits);
          service_worker_registration_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .content.devtools.proto.BackgroundService background_service = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::devtools::proto::BackgroundService_IsValid(val))) {
            _internal_set_background_service(static_cast<::content::devtools::proto::BackgroundService>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string event_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_event_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string instance_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_instance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> event_metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&event_metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundServiceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.devtools.proto.BackgroundServiceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // optional string origin = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_origin(), target);
  }

  // optional int64 service_worker_registration_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_service_worker_registration_id(), target);
  }

  // optional .content.devtools.proto.BackgroundService background_service = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_background_service(), target);
  }

  // optional string event_name = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_event_name(), target);
  }

  // optional string instance_id = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_instance_id(), target);
  }

  // map<string, string> event_metadata = 7;
  if (!this->_internal_event_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = BackgroundServiceEvent_EventMetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_event_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.devtools.proto.BackgroundServiceEvent)
  return target;
}

size_t BackgroundServiceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.devtools.proto.BackgroundServiceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> event_metadata = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_event_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_event_metadata().begin();
      it != this->_internal_event_metadata().end(); ++it) {
    total_size += BackgroundServiceEvent_EventMetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string origin = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_origin());
    }

    // optional string event_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_name());
    }

    // optional string instance_id = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instance_id());
    }

    // optional int64 timestamp = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

    // optional int64 service_worker_registration_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_service_worker_registration_id());
    }

    // optional .content.devtools.proto.BackgroundService background_service = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_background_service());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundServiceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundServiceEvent*>(
      &from));
}

void BackgroundServiceEvent::MergeFrom(const BackgroundServiceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.devtools.proto.BackgroundServiceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  event_metadata_.MergeFrom(from.event_metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_origin(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_instance_id(from._internal_instance_id());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      service_worker_registration_id_ = from.service_worker_registration_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      background_service_ = from.background_service_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundServiceEvent::CopyFrom(const BackgroundServiceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.devtools.proto.BackgroundServiceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundServiceEvent::IsInitialized() const {
  return true;
}

void BackgroundServiceEvent::InternalSwap(BackgroundServiceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_metadata_.InternalSwap(&other->event_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &origin_, lhs_arena,
      &other->origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &event_name_, lhs_arena,
      &other->event_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instance_id_, lhs_arena,
      &other->instance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundServiceEvent, background_service_)
      + sizeof(BackgroundServiceEvent::background_service_)
      - PROTOBUF_FIELD_OFFSET(BackgroundServiceEvent, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

std::string BackgroundServiceEvent::GetTypeName() const {
  return "content.devtools.proto.BackgroundServiceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace devtools
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::devtools::proto::BackgroundServiceEvent_EventMetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::content::devtools::proto::BackgroundServiceEvent_EventMetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::devtools::proto::BackgroundServiceEvent_EventMetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::content::devtools::proto::BackgroundServiceEvent*
Arena::CreateMaybeMessage< ::content::devtools::proto::BackgroundServiceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::devtools::proto::BackgroundServiceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
