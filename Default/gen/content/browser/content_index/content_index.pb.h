// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_index.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_content_5findex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_content_5findex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_content_5findex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_content_5findex_2eproto {
  static const uint32_t offsets[];
};
namespace content {
namespace proto {
class ContentDescription;
struct ContentDescriptionDefaultTypeInternal;
extern ContentDescriptionDefaultTypeInternal _ContentDescription_default_instance_;
class ContentEntry;
struct ContentEntryDefaultTypeInternal;
extern ContentEntryDefaultTypeInternal _ContentEntry_default_instance_;
class ContentIconDefinition;
struct ContentIconDefinitionDefaultTypeInternal;
extern ContentIconDefinitionDefaultTypeInternal _ContentIconDefinition_default_instance_;
class SerializedIcons;
struct SerializedIconsDefaultTypeInternal;
extern SerializedIconsDefaultTypeInternal _SerializedIcons_default_instance_;
class SerializedIcons_SerializedIcon;
struct SerializedIcons_SerializedIconDefaultTypeInternal;
extern SerializedIcons_SerializedIconDefaultTypeInternal _SerializedIcons_SerializedIcon_default_instance_;
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::proto::ContentDescription* Arena::CreateMaybeMessage<::content::proto::ContentDescription>(Arena*);
template<> ::content::proto::ContentEntry* Arena::CreateMaybeMessage<::content::proto::ContentEntry>(Arena*);
template<> ::content::proto::ContentIconDefinition* Arena::CreateMaybeMessage<::content::proto::ContentIconDefinition>(Arena*);
template<> ::content::proto::SerializedIcons* Arena::CreateMaybeMessage<::content::proto::SerializedIcons>(Arena*);
template<> ::content::proto::SerializedIcons_SerializedIcon* Arena::CreateMaybeMessage<::content::proto::SerializedIcons_SerializedIcon>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {
namespace proto {

// ===================================================================

class ContentIconDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.ContentIconDefinition) */ {
 public:
  inline ContentIconDefinition() : ContentIconDefinition(nullptr) {}
  ~ContentIconDefinition() override;
  explicit PROTOBUF_CONSTEXPR ContentIconDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentIconDefinition(const ContentIconDefinition& from);
  ContentIconDefinition(ContentIconDefinition&& from) noexcept
    : ContentIconDefinition() {
    *this = ::std::move(from);
  }

  inline ContentIconDefinition& operator=(const ContentIconDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentIconDefinition& operator=(ContentIconDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentIconDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentIconDefinition* internal_default_instance() {
    return reinterpret_cast<const ContentIconDefinition*>(
               &_ContentIconDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContentIconDefinition& a, ContentIconDefinition& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentIconDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentIconDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentIconDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentIconDefinition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentIconDefinition& from);
  void MergeFrom(const ContentIconDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentIconDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.ContentIconDefinition";
  }
  protected:
  explicit ContentIconDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kSizesFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // optional string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src();
  PROTOBUF_NODISCARD std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // optional string sizes = 2;
  bool has_sizes() const;
  private:
  bool _internal_has_sizes() const;
  public:
  void clear_sizes();
  const std::string& sizes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sizes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sizes();
  PROTOBUF_NODISCARD std::string* release_sizes();
  void set_allocated_sizes(std::string* sizes);
  private:
  const std::string& _internal_sizes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sizes(const std::string& value);
  std::string* _internal_mutable_sizes();
  public:

  // optional string type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:content.proto.ContentIconDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sizes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  friend struct ::TableStruct_content_5findex_2eproto;
};
// -------------------------------------------------------------------

class ContentDescription final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.ContentDescription) */ {
 public:
  inline ContentDescription() : ContentDescription(nullptr) {}
  ~ContentDescription() override;
  explicit PROTOBUF_CONSTEXPR ContentDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentDescription(const ContentDescription& from);
  ContentDescription(ContentDescription&& from) noexcept
    : ContentDescription() {
    *this = ::std::move(from);
  }

  inline ContentDescription& operator=(const ContentDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentDescription& operator=(ContentDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentDescription* internal_default_instance() {
    return reinterpret_cast<const ContentDescription*>(
               &_ContentDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContentDescription& a, ContentDescription& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentDescription>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentDescription& from);
  void MergeFrom(const ContentDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.ContentDescription";
  }
  protected:
  explicit ContentDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconsFieldNumber = 5,
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kLaunchUrlFieldNumber = 6,
    kCategoryFieldNumber = 4,
  };
  // repeated .content.proto.ContentIconDefinition icons = 5;
  int icons_size() const;
  private:
  int _internal_icons_size() const;
  public:
  void clear_icons();
  ::content::proto::ContentIconDefinition* mutable_icons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::ContentIconDefinition >*
      mutable_icons();
  private:
  const ::content::proto::ContentIconDefinition& _internal_icons(int index) const;
  ::content::proto::ContentIconDefinition* _internal_add_icons();
  public:
  const ::content::proto::ContentIconDefinition& icons(int index) const;
  ::content::proto::ContentIconDefinition* add_icons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::ContentIconDefinition >&
      icons() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string launch_url = 6;
  bool has_launch_url() const;
  private:
  bool _internal_has_launch_url() const;
  public:
  void clear_launch_url();
  const std::string& launch_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_launch_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_launch_url();
  PROTOBUF_NODISCARD std::string* release_launch_url();
  void set_allocated_launch_url(std::string* launch_url);
  private:
  const std::string& _internal_launch_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_launch_url(const std::string& value);
  std::string* _internal_mutable_launch_url();
  public:

  // optional int32 category = 4;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  int32_t category() const;
  void set_category(int32_t value);
  private:
  int32_t _internal_category() const;
  void _internal_set_category(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.proto.ContentDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::ContentIconDefinition > icons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_url_;
  int32_t category_;
  friend struct ::TableStruct_content_5findex_2eproto;
};
// -------------------------------------------------------------------

class ContentEntry final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.ContentEntry) */ {
 public:
  inline ContentEntry() : ContentEntry(nullptr) {}
  ~ContentEntry() override;
  explicit PROTOBUF_CONSTEXPR ContentEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentEntry(const ContentEntry& from);
  ContentEntry(ContentEntry&& from) noexcept
    : ContentEntry() {
    *this = ::std::move(from);
  }

  inline ContentEntry& operator=(const ContentEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentEntry& operator=(ContentEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentEntry* internal_default_instance() {
    return reinterpret_cast<const ContentEntry*>(
               &_ContentEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContentEntry& a, ContentEntry& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentEntry& from);
  void MergeFrom(const ContentEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.ContentEntry";
  }
  protected:
  explicit ContentEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaunchUrlFieldNumber = 3,
    kDescriptionFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kIsTopLevelContextFieldNumber = 4,
  };
  // optional string launch_url = 3;
  bool has_launch_url() const;
  private:
  bool _internal_has_launch_url() const;
  public:
  void clear_launch_url();
  const std::string& launch_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_launch_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_launch_url();
  PROTOBUF_NODISCARD std::string* release_launch_url();
  void set_allocated_launch_url(std::string* launch_url);
  private:
  const std::string& _internal_launch_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_launch_url(const std::string& value);
  std::string* _internal_mutable_launch_url();
  public:

  // optional .content.proto.ContentDescription description = 1;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const ::content::proto::ContentDescription& description() const;
  PROTOBUF_NODISCARD ::content::proto::ContentDescription* release_description();
  ::content::proto::ContentDescription* mutable_description();
  void set_allocated_description(::content::proto::ContentDescription* description);
  private:
  const ::content::proto::ContentDescription& _internal_description() const;
  ::content::proto::ContentDescription* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      ::content::proto::ContentDescription* description);
  ::content::proto::ContentDescription* unsafe_arena_release_description();

  // optional int64 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // optional bool is_top_level_context = 4 [default = true];
  bool has_is_top_level_context() const;
  private:
  bool _internal_has_is_top_level_context() const;
  public:
  void clear_is_top_level_context();
  bool is_top_level_context() const;
  void set_is_top_level_context(bool value);
  private:
  bool _internal_is_top_level_context() const;
  void _internal_set_is_top_level_context(bool value);
  public:

  // @@protoc_insertion_point(class_scope:content.proto.ContentEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_url_;
  ::content::proto::ContentDescription* description_;
  int64_t timestamp_;
  bool is_top_level_context_;
  friend struct ::TableStruct_content_5findex_2eproto;
};
// -------------------------------------------------------------------

class SerializedIcons_SerializedIcon final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.SerializedIcons.SerializedIcon) */ {
 public:
  inline SerializedIcons_SerializedIcon() : SerializedIcons_SerializedIcon(nullptr) {}
  ~SerializedIcons_SerializedIcon() override;
  explicit PROTOBUF_CONSTEXPR SerializedIcons_SerializedIcon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedIcons_SerializedIcon(const SerializedIcons_SerializedIcon& from);
  SerializedIcons_SerializedIcon(SerializedIcons_SerializedIcon&& from) noexcept
    : SerializedIcons_SerializedIcon() {
    *this = ::std::move(from);
  }

  inline SerializedIcons_SerializedIcon& operator=(const SerializedIcons_SerializedIcon& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedIcons_SerializedIcon& operator=(SerializedIcons_SerializedIcon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SerializedIcons_SerializedIcon& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedIcons_SerializedIcon* internal_default_instance() {
    return reinterpret_cast<const SerializedIcons_SerializedIcon*>(
               &_SerializedIcons_SerializedIcon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SerializedIcons_SerializedIcon& a, SerializedIcons_SerializedIcon& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SerializedIcons_SerializedIcon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedIcons_SerializedIcon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedIcons_SerializedIcon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedIcons_SerializedIcon>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SerializedIcons_SerializedIcon& from);
  void MergeFrom(const SerializedIcons_SerializedIcon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerializedIcons_SerializedIcon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.SerializedIcons.SerializedIcon";
  }
  protected:
  explicit SerializedIcons_SerializedIcon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconFieldNumber = 1,
  };
  // optional string icon = 1;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // @@protoc_insertion_point(class_scope:content.proto.SerializedIcons.SerializedIcon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  friend struct ::TableStruct_content_5findex_2eproto;
};
// -------------------------------------------------------------------

class SerializedIcons final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.SerializedIcons) */ {
 public:
  inline SerializedIcons() : SerializedIcons(nullptr) {}
  ~SerializedIcons() override;
  explicit PROTOBUF_CONSTEXPR SerializedIcons(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedIcons(const SerializedIcons& from);
  SerializedIcons(SerializedIcons&& from) noexcept
    : SerializedIcons() {
    *this = ::std::move(from);
  }

  inline SerializedIcons& operator=(const SerializedIcons& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedIcons& operator=(SerializedIcons&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SerializedIcons& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedIcons* internal_default_instance() {
    return reinterpret_cast<const SerializedIcons*>(
               &_SerializedIcons_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SerializedIcons& a, SerializedIcons& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SerializedIcons* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedIcons* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedIcons* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedIcons>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SerializedIcons& from);
  void MergeFrom(const SerializedIcons& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerializedIcons* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.SerializedIcons";
  }
  protected:
  explicit SerializedIcons(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SerializedIcons_SerializedIcon SerializedIcon;

  // accessors -------------------------------------------------------

  enum : int {
    kIconsFieldNumber = 1,
  };
  // repeated .content.proto.SerializedIcons.SerializedIcon icons = 1;
  int icons_size() const;
  private:
  int _internal_icons_size() const;
  public:
  void clear_icons();
  ::content::proto::SerializedIcons_SerializedIcon* mutable_icons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SerializedIcons_SerializedIcon >*
      mutable_icons();
  private:
  const ::content::proto::SerializedIcons_SerializedIcon& _internal_icons(int index) const;
  ::content::proto::SerializedIcons_SerializedIcon* _internal_add_icons();
  public:
  const ::content::proto::SerializedIcons_SerializedIcon& icons(int index) const;
  ::content::proto::SerializedIcons_SerializedIcon* add_icons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SerializedIcons_SerializedIcon >&
      icons() const;

  // @@protoc_insertion_point(class_scope:content.proto.SerializedIcons)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SerializedIcons_SerializedIcon > icons_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_content_5findex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContentIconDefinition

// optional string src = 1;
inline bool ContentIconDefinition::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentIconDefinition::has_src() const {
  return _internal_has_src();
}
inline void ContentIconDefinition::clear_src() {
  src_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentIconDefinition::src() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentIconDefinition.src)
  return _internal_src();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentIconDefinition::set_src(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 src_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.ContentIconDefinition.src)
}
inline std::string* ContentIconDefinition::mutable_src() {
  std::string* _s = _internal_mutable_src();
  // @@protoc_insertion_point(field_mutable:content.proto.ContentIconDefinition.src)
  return _s;
}
inline const std::string& ContentIconDefinition::_internal_src() const {
  return src_.Get();
}
inline void ContentIconDefinition::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentIconDefinition::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentIconDefinition::release_src() {
  // @@protoc_insertion_point(field_release:content.proto.ContentIconDefinition.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = src_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (src_.IsDefault()) {
    src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentIconDefinition::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocated(src, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (src_.IsDefault()) {
    src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentIconDefinition.src)
}

// optional string sizes = 2;
inline bool ContentIconDefinition::_internal_has_sizes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentIconDefinition::has_sizes() const {
  return _internal_has_sizes();
}
inline void ContentIconDefinition::clear_sizes() {
  sizes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentIconDefinition::sizes() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentIconDefinition.sizes)
  return _internal_sizes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentIconDefinition::set_sizes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sizes_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.ContentIconDefinition.sizes)
}
inline std::string* ContentIconDefinition::mutable_sizes() {
  std::string* _s = _internal_mutable_sizes();
  // @@protoc_insertion_point(field_mutable:content.proto.ContentIconDefinition.sizes)
  return _s;
}
inline const std::string& ContentIconDefinition::_internal_sizes() const {
  return sizes_.Get();
}
inline void ContentIconDefinition::_internal_set_sizes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sizes_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentIconDefinition::_internal_mutable_sizes() {
  _has_bits_[0] |= 0x00000002u;
  return sizes_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentIconDefinition::release_sizes() {
  // @@protoc_insertion_point(field_release:content.proto.ContentIconDefinition.sizes)
  if (!_internal_has_sizes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sizes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sizes_.IsDefault()) {
    sizes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentIconDefinition::set_allocated_sizes(std::string* sizes) {
  if (sizes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sizes_.SetAllocated(sizes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sizes_.IsDefault()) {
    sizes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentIconDefinition.sizes)
}

// optional string type = 3;
inline bool ContentIconDefinition::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentIconDefinition::has_type() const {
  return _internal_has_type();
}
inline void ContentIconDefinition::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContentIconDefinition::type() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentIconDefinition.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentIconDefinition::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.ContentIconDefinition.type)
}
inline std::string* ContentIconDefinition::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:content.proto.ContentIconDefinition.type)
  return _s;
}
inline const std::string& ContentIconDefinition::_internal_type() const {
  return type_.Get();
}
inline void ContentIconDefinition::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentIconDefinition::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentIconDefinition::release_type() {
  // @@protoc_insertion_point(field_release:content.proto.ContentIconDefinition.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentIconDefinition::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentIconDefinition.type)
}

// -------------------------------------------------------------------

// ContentDescription

// optional string id = 1;
inline bool ContentDescription::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentDescription::has_id() const {
  return _internal_has_id();
}
inline void ContentDescription::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentDescription::id() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentDescription::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.ContentDescription.id)
}
inline std::string* ContentDescription::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:content.proto.ContentDescription.id)
  return _s;
}
inline const std::string& ContentDescription::_internal_id() const {
  return id_.Get();
}
inline void ContentDescription::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentDescription::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentDescription::release_id() {
  // @@protoc_insertion_point(field_release:content.proto.ContentDescription.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentDescription::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentDescription.id)
}

// optional string title = 2;
inline bool ContentDescription::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentDescription::has_title() const {
  return _internal_has_title();
}
inline void ContentDescription::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentDescription::title() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentDescription::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.ContentDescription.title)
}
inline std::string* ContentDescription::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:content.proto.ContentDescription.title)
  return _s;
}
inline const std::string& ContentDescription::_internal_title() const {
  return title_.Get();
}
inline void ContentDescription::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentDescription::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentDescription::release_title() {
  // @@protoc_insertion_point(field_release:content.proto.ContentDescription.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentDescription::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentDescription.title)
}

// optional string description = 3;
inline bool ContentDescription::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentDescription::has_description() const {
  return _internal_has_description();
}
inline void ContentDescription::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContentDescription::description() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentDescription::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.ContentDescription.description)
}
inline std::string* ContentDescription::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:content.proto.ContentDescription.description)
  return _s;
}
inline const std::string& ContentDescription::_internal_description() const {
  return description_.Get();
}
inline void ContentDescription::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentDescription::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentDescription::release_description() {
  // @@protoc_insertion_point(field_release:content.proto.ContentDescription.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentDescription::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentDescription.description)
}

// optional int32 category = 4;
inline bool ContentDescription::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ContentDescription::has_category() const {
  return _internal_has_category();
}
inline void ContentDescription::clear_category() {
  category_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t ContentDescription::_internal_category() const {
  return category_;
}
inline int32_t ContentDescription::category() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.category)
  return _internal_category();
}
inline void ContentDescription::_internal_set_category(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  category_ = value;
}
inline void ContentDescription::set_category(int32_t value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:content.proto.ContentDescription.category)
}

// repeated .content.proto.ContentIconDefinition icons = 5;
inline int ContentDescription::_internal_icons_size() const {
  return icons_.size();
}
inline int ContentDescription::icons_size() const {
  return _internal_icons_size();
}
inline void ContentDescription::clear_icons() {
  icons_.Clear();
}
inline ::content::proto::ContentIconDefinition* ContentDescription::mutable_icons(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.ContentDescription.icons)
  return icons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::ContentIconDefinition >*
ContentDescription::mutable_icons() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.ContentDescription.icons)
  return &icons_;
}
inline const ::content::proto::ContentIconDefinition& ContentDescription::_internal_icons(int index) const {
  return icons_.Get(index);
}
inline const ::content::proto::ContentIconDefinition& ContentDescription::icons(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.icons)
  return _internal_icons(index);
}
inline ::content::proto::ContentIconDefinition* ContentDescription::_internal_add_icons() {
  return icons_.Add();
}
inline ::content::proto::ContentIconDefinition* ContentDescription::add_icons() {
  ::content::proto::ContentIconDefinition* _add = _internal_add_icons();
  // @@protoc_insertion_point(field_add:content.proto.ContentDescription.icons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::ContentIconDefinition >&
ContentDescription::icons() const {
  // @@protoc_insertion_point(field_list:content.proto.ContentDescription.icons)
  return icons_;
}

// optional string launch_url = 6;
inline bool ContentDescription::_internal_has_launch_url() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContentDescription::has_launch_url() const {
  return _internal_has_launch_url();
}
inline void ContentDescription::clear_launch_url() {
  launch_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ContentDescription::launch_url() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.launch_url)
  return _internal_launch_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentDescription::set_launch_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 launch_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.ContentDescription.launch_url)
}
inline std::string* ContentDescription::mutable_launch_url() {
  std::string* _s = _internal_mutable_launch_url();
  // @@protoc_insertion_point(field_mutable:content.proto.ContentDescription.launch_url)
  return _s;
}
inline const std::string& ContentDescription::_internal_launch_url() const {
  return launch_url_.Get();
}
inline void ContentDescription::_internal_set_launch_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  launch_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentDescription::_internal_mutable_launch_url() {
  _has_bits_[0] |= 0x00000008u;
  return launch_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentDescription::release_launch_url() {
  // @@protoc_insertion_point(field_release:content.proto.ContentDescription.launch_url)
  if (!_internal_has_launch_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = launch_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (launch_url_.IsDefault()) {
    launch_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentDescription::set_allocated_launch_url(std::string* launch_url) {
  if (launch_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  launch_url_.SetAllocated(launch_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (launch_url_.IsDefault()) {
    launch_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentDescription.launch_url)
}

// -------------------------------------------------------------------

// ContentEntry

// optional .content.proto.ContentDescription description = 1;
inline bool ContentEntry::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || description_ != nullptr);
  return value;
}
inline bool ContentEntry::has_description() const {
  return _internal_has_description();
}
inline void ContentEntry::clear_description() {
  if (description_ != nullptr) description_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::content::proto::ContentDescription& ContentEntry::_internal_description() const {
  const ::content::proto::ContentDescription* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const ::content::proto::ContentDescription&>(
      ::content::proto::_ContentDescription_default_instance_);
}
inline const ::content::proto::ContentDescription& ContentEntry::description() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentEntry.description)
  return _internal_description();
}
inline void ContentEntry::unsafe_arena_set_allocated_description(
    ::content::proto::ContentDescription* description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.proto.ContentEntry.description)
}
inline ::content::proto::ContentDescription* ContentEntry::release_description() {
  _has_bits_[0] &= ~0x00000002u;
  ::content::proto::ContentDescription* temp = description_;
  description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content::proto::ContentDescription* ContentEntry::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:content.proto.ContentEntry.description)
  _has_bits_[0] &= ~0x00000002u;
  ::content::proto::ContentDescription* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::content::proto::ContentDescription* ContentEntry::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::proto::ContentDescription>(GetArenaForAllocation());
    description_ = p;
  }
  return description_;
}
inline ::content::proto::ContentDescription* ContentEntry::mutable_description() {
  ::content::proto::ContentDescription* _msg = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:content.proto.ContentEntry.description)
  return _msg;
}
inline void ContentEntry::set_allocated_description(::content::proto::ContentDescription* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete description_;
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(description);
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentEntry.description)
}

// optional int64 timestamp = 2;
inline bool ContentEntry::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentEntry::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void ContentEntry::clear_timestamp() {
  timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t ContentEntry::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t ContentEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentEntry.timestamp)
  return _internal_timestamp();
}
inline void ContentEntry::_internal_set_timestamp(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void ContentEntry::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:content.proto.ContentEntry.timestamp)
}

// optional string launch_url = 3;
inline bool ContentEntry::_internal_has_launch_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentEntry::has_launch_url() const {
  return _internal_has_launch_url();
}
inline void ContentEntry::clear_launch_url() {
  launch_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentEntry::launch_url() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentEntry.launch_url)
  return _internal_launch_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentEntry::set_launch_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 launch_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.ContentEntry.launch_url)
}
inline std::string* ContentEntry::mutable_launch_url() {
  std::string* _s = _internal_mutable_launch_url();
  // @@protoc_insertion_point(field_mutable:content.proto.ContentEntry.launch_url)
  return _s;
}
inline const std::string& ContentEntry::_internal_launch_url() const {
  return launch_url_.Get();
}
inline void ContentEntry::_internal_set_launch_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  launch_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentEntry::_internal_mutable_launch_url() {
  _has_bits_[0] |= 0x00000001u;
  return launch_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentEntry::release_launch_url() {
  // @@protoc_insertion_point(field_release:content.proto.ContentEntry.launch_url)
  if (!_internal_has_launch_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = launch_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (launch_url_.IsDefault()) {
    launch_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentEntry::set_allocated_launch_url(std::string* launch_url) {
  if (launch_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  launch_url_.SetAllocated(launch_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (launch_url_.IsDefault()) {
    launch_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentEntry.launch_url)
}

// optional bool is_top_level_context = 4 [default = true];
inline bool ContentEntry::_internal_has_is_top_level_context() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContentEntry::has_is_top_level_context() const {
  return _internal_has_is_top_level_context();
}
inline void ContentEntry::clear_is_top_level_context() {
  is_top_level_context_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ContentEntry::_internal_is_top_level_context() const {
  return is_top_level_context_;
}
inline bool ContentEntry::is_top_level_context() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentEntry.is_top_level_context)
  return _internal_is_top_level_context();
}
inline void ContentEntry::_internal_set_is_top_level_context(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_top_level_context_ = value;
}
inline void ContentEntry::set_is_top_level_context(bool value) {
  _internal_set_is_top_level_context(value);
  // @@protoc_insertion_point(field_set:content.proto.ContentEntry.is_top_level_context)
}

// -------------------------------------------------------------------

// SerializedIcons_SerializedIcon

// optional string icon = 1;
inline bool SerializedIcons_SerializedIcon::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SerializedIcons_SerializedIcon::has_icon() const {
  return _internal_has_icon();
}
inline void SerializedIcons_SerializedIcon::clear_icon() {
  icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SerializedIcons_SerializedIcon::icon() const {
  // @@protoc_insertion_point(field_get:content.proto.SerializedIcons.SerializedIcon.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerializedIcons_SerializedIcon::set_icon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 icon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.SerializedIcons.SerializedIcon.icon)
}
inline std::string* SerializedIcons_SerializedIcon::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:content.proto.SerializedIcons.SerializedIcon.icon)
  return _s;
}
inline const std::string& SerializedIcons_SerializedIcon::_internal_icon() const {
  return icon_.Get();
}
inline void SerializedIcons_SerializedIcon::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  icon_.Set(value, GetArenaForAllocation());
}
inline std::string* SerializedIcons_SerializedIcon::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000001u;
  return icon_.Mutable(GetArenaForAllocation());
}
inline std::string* SerializedIcons_SerializedIcon::release_icon() {
  // @@protoc_insertion_point(field_release:content.proto.SerializedIcons.SerializedIcon.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = icon_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault()) {
    icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SerializedIcons_SerializedIcon::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  icon_.SetAllocated(icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault()) {
    icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.SerializedIcons.SerializedIcon.icon)
}

// -------------------------------------------------------------------

// SerializedIcons

// repeated .content.proto.SerializedIcons.SerializedIcon icons = 1;
inline int SerializedIcons::_internal_icons_size() const {
  return icons_.size();
}
inline int SerializedIcons::icons_size() const {
  return _internal_icons_size();
}
inline void SerializedIcons::clear_icons() {
  icons_.Clear();
}
inline ::content::proto::SerializedIcons_SerializedIcon* SerializedIcons::mutable_icons(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.SerializedIcons.icons)
  return icons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SerializedIcons_SerializedIcon >*
SerializedIcons::mutable_icons() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.SerializedIcons.icons)
  return &icons_;
}
inline const ::content::proto::SerializedIcons_SerializedIcon& SerializedIcons::_internal_icons(int index) const {
  return icons_.Get(index);
}
inline const ::content::proto::SerializedIcons_SerializedIcon& SerializedIcons::icons(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.SerializedIcons.icons)
  return _internal_icons(index);
}
inline ::content::proto::SerializedIcons_SerializedIcon* SerializedIcons::_internal_add_icons() {
  return icons_.Add();
}
inline ::content::proto::SerializedIcons_SerializedIcon* SerializedIcons::add_icons() {
  ::content::proto::SerializedIcons_SerializedIcon* _add = _internal_add_icons();
  // @@protoc_insertion_point(field_add:content.proto.SerializedIcons.icons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SerializedIcons_SerializedIcon >&
SerializedIcons::icons() const {
  // @@protoc_insertion_point(field_list:content.proto.SerializedIcons.icons)
  return icons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace content

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_content_5findex_2eproto
