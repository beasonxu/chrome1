// content/browser/preloading/prerender/prerender_internals.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_BROWSER_PRELOADING_PRERENDER_PRERENDER_INTERNALS_MOJOM_H_
#define CONTENT_BROWSER_PRELOADING_PRERENDER_PRERENDER_INTERNALS_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/browser/preloading/prerender/prerender_internals.mojom-shared.h"
#include "content/browser/preloading/prerender/prerender_internals.mojom-forward.h"
#include "url/mojom/url.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace content {
namespace mojom {

class PrerenderInternalsHandlerProxy;

template <typename ImplRefTraits>
class PrerenderInternalsHandlerStub;

class PrerenderInternalsHandlerRequestValidator;
class PrerenderInternalsHandlerResponseValidator;


class  PrerenderInternalsHandler
    : public PrerenderInternalsHandlerInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = PrerenderInternalsHandlerInterfaceBase;
  using Proxy_ = PrerenderInternalsHandlerProxy;

  template <typename ImplRefTraits>
  using Stub_ = PrerenderInternalsHandlerStub<ImplRefTraits>;

  using RequestValidator_ = PrerenderInternalsHandlerRequestValidator;
  using ResponseValidator_ = PrerenderInternalsHandlerResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetPrerenderInfoMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GetPrerenderInfo_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~PrerenderInternalsHandler() = default;


  using GetPrerenderInfoCallback = base::OnceCallback<void(std::vector<PrerenderInfoPtr>)>;
  
  virtual void GetPrerenderInfo(GetPrerenderInfoCallback callback) = 0;
};



class  PrerenderInternalsHandlerProxy
    : public PrerenderInternalsHandler {
 public:
  using InterfaceType = PrerenderInternalsHandler;

  explicit PrerenderInternalsHandlerProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetPrerenderInfo(GetPrerenderInfoCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  PrerenderInternalsHandlerStubDispatch {
 public:
  static bool Accept(PrerenderInternalsHandler* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PrerenderInternalsHandler* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PrerenderInternalsHandler>>
class PrerenderInternalsHandlerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PrerenderInternalsHandlerStub() = default;
  ~PrerenderInternalsHandlerStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PrerenderInternalsHandlerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PrerenderInternalsHandlerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PrerenderInternalsHandlerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PrerenderInternalsHandlerResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};









class  PrerenderedPageInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PrerenderedPageInfo, T>::value>;
  using DataView = PrerenderedPageInfoDataView;
  using Data_ = internal::PrerenderedPageInfo_Data;

  template <typename... Args>
  static PrerenderedPageInfoPtr New(Args&&... args) {
    return PrerenderedPageInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PrerenderedPageInfoPtr From(const U& u) {
    return mojo::TypeConverter<PrerenderedPageInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrerenderedPageInfo>::Convert(*this);
  }


  PrerenderedPageInfo();

  PrerenderedPageInfo(
      const ::GURL& url,
      const ::GURL& trigger_page_url,
      const std::string& final_status);


  ~PrerenderedPageInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PrerenderedPageInfoPtr>
  PrerenderedPageInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PrerenderedPageInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PrerenderedPageInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PrerenderedPageInfo::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PrerenderedPageInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PrerenderedPageInfo_UnserializedMessageContext<
            UserType, PrerenderedPageInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PrerenderedPageInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return PrerenderedPageInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PrerenderedPageInfo_UnserializedMessageContext<
            UserType, PrerenderedPageInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PrerenderedPageInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::GURL url;
  
  ::GURL trigger_page_url;
  
  std::string final_status;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PrerenderedPageInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PrerenderedPageInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PrerenderedPageInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PrerenderedPageInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  PrerenderInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PrerenderInfo, T>::value>;
  using DataView = PrerenderInfoDataView;
  using Data_ = internal::PrerenderInfo_Data;

  template <typename... Args>
  static PrerenderInfoPtr New(Args&&... args) {
    return PrerenderInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PrerenderInfoPtr From(const U& u) {
    return mojo::TypeConverter<PrerenderInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrerenderInfo>::Convert(*this);
  }


  PrerenderInfo();

  explicit PrerenderInfo(
      std::vector<PrerenderedPageInfoPtr> prerendered_page_infos);

PrerenderInfo(const PrerenderInfo&) = delete;
PrerenderInfo& operator=(const PrerenderInfo&) = delete;

  ~PrerenderInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PrerenderInfoPtr>
  PrerenderInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PrerenderInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PrerenderInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PrerenderInfo::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PrerenderInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PrerenderInfo_UnserializedMessageContext<
            UserType, PrerenderInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PrerenderInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return PrerenderInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PrerenderInfo_UnserializedMessageContext<
            UserType, PrerenderInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PrerenderInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::vector<PrerenderedPageInfoPtr> prerendered_page_infos;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PrerenderInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PrerenderInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PrerenderInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PrerenderInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
PrerenderedPageInfoPtr PrerenderedPageInfo::Clone() const {
  return New(
      mojo::Clone(url),
      mojo::Clone(trigger_page_url),
      mojo::Clone(final_status)
  );
}

template <typename T, PrerenderedPageInfo::EnableIfSame<T>*>
bool PrerenderedPageInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->url, other_struct.url))
    return false;
  if (!mojo::Equals(this->trigger_page_url, other_struct.trigger_page_url))
    return false;
  if (!mojo::Equals(this->final_status, other_struct.final_status))
    return false;
  return true;
}

template <typename T, PrerenderedPageInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.url < rhs.url)
    return true;
  if (rhs.url < lhs.url)
    return false;
  if (lhs.trigger_page_url < rhs.trigger_page_url)
    return true;
  if (rhs.trigger_page_url < lhs.trigger_page_url)
    return false;
  if (lhs.final_status < rhs.final_status)
    return true;
  if (rhs.final_status < lhs.final_status)
    return false;
  return false;
}
template <typename StructPtrType>
PrerenderInfoPtr PrerenderInfo::Clone() const {
  return New(
      mojo::Clone(prerendered_page_infos)
  );
}

template <typename T, PrerenderInfo::EnableIfSame<T>*>
bool PrerenderInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->prerendered_page_infos, other_struct.prerendered_page_infos))
    return false;
  return true;
}

template <typename T, PrerenderInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.prerendered_page_infos < rhs.prerendered_page_infos)
    return true;
  if (rhs.prerendered_page_infos < lhs.prerendered_page_infos)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace content

namespace mojo {


template <>
struct  StructTraits<::content::mojom::PrerenderedPageInfo::DataView,
                                         ::content::mojom::PrerenderedPageInfoPtr> {
  static bool IsNull(const ::content::mojom::PrerenderedPageInfoPtr& input) { return !input; }
  static void SetToNull(::content::mojom::PrerenderedPageInfoPtr* output) { output->reset(); }

  static const decltype(::content::mojom::PrerenderedPageInfo::url)& url(
      const ::content::mojom::PrerenderedPageInfoPtr& input) {
    return input->url;
  }

  static const decltype(::content::mojom::PrerenderedPageInfo::trigger_page_url)& trigger_page_url(
      const ::content::mojom::PrerenderedPageInfoPtr& input) {
    return input->trigger_page_url;
  }

  static const decltype(::content::mojom::PrerenderedPageInfo::final_status)& final_status(
      const ::content::mojom::PrerenderedPageInfoPtr& input) {
    return input->final_status;
  }

  static bool Read(::content::mojom::PrerenderedPageInfo::DataView input, ::content::mojom::PrerenderedPageInfoPtr* output);
};


template <>
struct  StructTraits<::content::mojom::PrerenderInfo::DataView,
                                         ::content::mojom::PrerenderInfoPtr> {
  static bool IsNull(const ::content::mojom::PrerenderInfoPtr& input) { return !input; }
  static void SetToNull(::content::mojom::PrerenderInfoPtr* output) { output->reset(); }

  static const decltype(::content::mojom::PrerenderInfo::prerendered_page_infos)& prerendered_page_infos(
      const ::content::mojom::PrerenderInfoPtr& input) {
    return input->prerendered_page_infos;
  }

  static bool Read(::content::mojom::PrerenderInfo::DataView input, ::content::mojom::PrerenderInfoPtr* output);
};

}  // namespace mojo

#endif  // CONTENT_BROWSER_PRELOADING_PRERENDER_PRERENDER_INTERNALS_MOJOM_H_