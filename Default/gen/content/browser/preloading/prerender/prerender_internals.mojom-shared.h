// content/browser/preloading/prerender/prerender_internals.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_BROWSER_PRELOADING_PRERENDER_PRERENDER_INTERNALS_MOJOM_SHARED_H_
#define CONTENT_BROWSER_PRELOADING_PRERENDER_PRERENDER_INTERNALS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/browser/preloading/prerender/prerender_internals.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace content {
namespace mojom {
class PrerenderedPageInfoDataView;

class PrerenderInfoDataView;



}  // namespace mojom
}  // namespace content

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::content::mojom::PrerenderedPageInfoDataView> {
  using Data = ::content::mojom::internal::PrerenderedPageInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::PrerenderInfoDataView> {
  using Data = ::content::mojom::internal::PrerenderInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace content {
namespace mojom {
// Interface base classes. They are used for type safety check.
class PrerenderInternalsHandlerInterfaceBase {};

using PrerenderInternalsHandlerPtrDataView =
    mojo::InterfacePtrDataView<PrerenderInternalsHandlerInterfaceBase>;
using PrerenderInternalsHandlerRequestDataView =
    mojo::InterfaceRequestDataView<PrerenderInternalsHandlerInterfaceBase>;
using PrerenderInternalsHandlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PrerenderInternalsHandlerInterfaceBase>;
using PrerenderInternalsHandlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PrerenderInternalsHandlerInterfaceBase>;


class PrerenderedPageInfoDataView {
 public:
  PrerenderedPageInfoDataView() = default;

  PrerenderedPageInfoDataView(
      internal::PrerenderedPageInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetTriggerPageUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTriggerPageUrl(UserType* output) {
    
    auto* pointer = data_->trigger_page_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetFinalStatusDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFinalStatus(UserType* output) {
    
    auto* pointer = data_->final_status.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PrerenderedPageInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PrerenderInfoDataView {
 public:
  PrerenderInfoDataView() = default;

  PrerenderInfoDataView(
      internal::PrerenderInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPrerenderedPageInfosDataView(
      mojo::ArrayDataView<PrerenderedPageInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrerenderedPageInfos(UserType* output) {
    
    auto* pointer = data_->prerendered_page_infos.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::content::mojom::PrerenderedPageInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::PrerenderInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace content

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::PrerenderedPageInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::PrerenderedPageInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::PrerenderedPageInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::url(input)) in_url = Traits::url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url)::BaseType> url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, url_fragment);
    fragment->url.Set(
        url_fragment.is_null() ? nullptr : url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in PrerenderedPageInfo struct");
    decltype(Traits::trigger_page_url(input)) in_trigger_page_url = Traits::trigger_page_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->trigger_page_url)::BaseType> trigger_page_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_trigger_page_url, trigger_page_url_fragment);
    fragment->trigger_page_url.Set(
        trigger_page_url_fragment.is_null() ? nullptr : trigger_page_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->trigger_page_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null trigger_page_url in PrerenderedPageInfo struct");
    decltype(Traits::final_status(input)) in_final_status = Traits::final_status(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->final_status)::BaseType> final_status_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_final_status, final_status_fragment);
    fragment->final_status.Set(
        final_status_fragment.is_null() ? nullptr : final_status_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->final_status.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null final_status in PrerenderedPageInfo struct");
  }

  static bool Deserialize(::content::mojom::internal::PrerenderedPageInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::PrerenderedPageInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::PrerenderInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::PrerenderInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::PrerenderInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::prerendered_page_infos(input)) in_prerendered_page_infos = Traits::prerendered_page_infos(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->prerendered_page_infos)::BaseType>
        prerendered_page_infos_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams prerendered_page_infos_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::content::mojom::PrerenderedPageInfoDataView>>(
        in_prerendered_page_infos, prerendered_page_infos_fragment, &prerendered_page_infos_validate_params);
    fragment->prerendered_page_infos.Set(
        prerendered_page_infos_fragment.is_null() ? nullptr : prerendered_page_infos_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->prerendered_page_infos.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null prerendered_page_infos in PrerenderInfo struct");
  }

  static bool Deserialize(::content::mojom::internal::PrerenderInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::PrerenderInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace content {
namespace mojom {

inline void PrerenderedPageInfoDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void PrerenderedPageInfoDataView::GetTriggerPageUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->trigger_page_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void PrerenderedPageInfoDataView::GetFinalStatusDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->final_status.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void PrerenderInfoDataView::GetPrerenderedPageInfosDataView(
    mojo::ArrayDataView<PrerenderedPageInfoDataView>* output) {
  auto pointer = data_->prerendered_page_infos.Get();
  *output = mojo::ArrayDataView<PrerenderedPageInfoDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace content

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // CONTENT_BROWSER_PRELOADING_PRERENDER_PRERENDER_INTERNALS_MOJOM_SHARED_H_