// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/HostZoomMapImpl

#ifndef org_chromium_content_browser_HostZoomMapImpl_JNI
#define org_chromium_content_browser_HostZoomMapImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_content_browser_HostZoomMapImpl[];
const char kClassPath_org_chromium_content_browser_HostZoomMapImpl[] =
    "org/chromium/content/browser/HostZoomMapImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_HostZoomMapImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_HostZoomMapImpl_clazz_defined
#define org_chromium_content_browser_HostZoomMapImpl_clazz_defined
inline jclass org_chromium_content_browser_HostZoomMapImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_content_browser_HostZoomMapImpl,
      &g_org_chromium_content_browser_HostZoomMapImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static void JNI_HostZoomMapImpl_SetZoomLevel(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents,
    jdouble newZoomLevel,
    jdouble adjustedZoomLevel);

JNI_GENERATOR_EXPORT void Java_J_N_MItN0bQy(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents,
    jdouble newZoomLevel,
    jdouble adjustedZoomLevel) {
  return JNI_HostZoomMapImpl_SetZoomLevel(env, base::android::JavaParamRef<jobject>(env,
      webContents), newZoomLevel, adjustedZoomLevel);
}

static jdouble JNI_HostZoomMapImpl_GetZoomLevel(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jdouble Java_J_N_M70wUYPG(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents) {
  return JNI_HostZoomMapImpl_GetZoomLevel(env, base::android::JavaParamRef<jobject>(env,
      webContents));
}

static void JNI_HostZoomMapImpl_SetDefaultZoomLevel(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& context,
    jdouble newDefaultZoomLevel);

JNI_GENERATOR_EXPORT void Java_J_N_MNh9C30M(
    JNIEnv* env,
    jclass jcaller,
    jobject context,
    jdouble newDefaultZoomLevel) {
  return JNI_HostZoomMapImpl_SetDefaultZoomLevel(env, base::android::JavaParamRef<jobject>(env,
      context), newDefaultZoomLevel);
}

static jdouble JNI_HostZoomMapImpl_GetDefaultZoomLevel(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& context);

JNI_GENERATOR_EXPORT jdouble Java_J_N_MNitnPWj(
    JNIEnv* env,
    jclass jcaller,
    jobject context) {
  return JNI_HostZoomMapImpl_GetDefaultZoomLevel(env, base::android::JavaParamRef<jobject>(env,
      context));
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_HostZoomMapImpl_getAdjustedZoomLevel(nullptr);
static jdouble Java_HostZoomMapImpl_getAdjustedZoomLevel(JNIEnv* env, jdouble zoomLevel) {
  jclass clazz = org_chromium_content_browser_HostZoomMapImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_HostZoomMapImpl_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getAdjustedZoomLevel",
          "(D)D",
          &g_org_chromium_content_browser_HostZoomMapImpl_getAdjustedZoomLevel);

  jdouble ret =
      env->CallStaticDoubleMethod(clazz,
          call_context.base.method_id, zoomLevel);
  return ret;
}

}  // namespace content

#endif  // org_chromium_content_browser_HostZoomMapImpl_JNI
