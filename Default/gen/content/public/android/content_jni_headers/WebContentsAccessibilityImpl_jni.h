// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/accessibility/WebContentsAccessibilityImpl

#ifndef org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_JNI
#define org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl[];
const char kClassPath_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl[] =
    "org/chromium/content/browser/accessibility/WebContentsAccessibilityImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz_defined
#define org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz_defined
inline jclass org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl,
      &g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static jlong JNI_WebContentsAccessibilityImpl_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong Java_J_N_MjYAnP1s(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject webContents) {
  return JNI_WebContentsAccessibilityImpl_Init(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, webContents));
}

static jlong JNI_WebContentsAccessibilityImpl_InitWithAXTree(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jlong axTreePtr);

JNI_GENERATOR_EXPORT jlong Java_J_N_M_1XV3Nwg(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong axTreePtr) {
  return JNI_WebContentsAccessibilityImpl_InitWithAXTree(env,
      base::android::JavaParamRef<jobject>(env, caller), axTreePtr);
}

JNI_GENERATOR_EXPORT void Java_J_N_MxGfnb_00024m(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteEarly");
  return native->DeleteEarly(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MMiqVowe(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAutofillPopupDisplayed");
  return native->OnAutofillPopupDisplayed(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MdET073e(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAutofillPopupDismissed");
  return native->OnAutofillPopupDismissed(env);
}

JNI_GENERATOR_EXPORT jint Java_J_N_Mk31b3DX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetIdForElementAfterElementHostingAutofillPopup", 0);
  return native->GetIdForElementAfterElementHostingAutofillPopup(env);
}

JNI_GENERATOR_EXPORT jint Java_J_N_MI8pU34f(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetRootId", 0);
  return native->GetRootId(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MTBNGzHX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsNodeValid", false);
  return native->IsNodeValid(env, id);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M5uHFthk(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsAutofillPopupNode", false);
  return native->IsAutofillPopupNode(env, id);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MCMbXu4W(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsEditableText", false);
  return native->IsEditableText(env, id);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M8UuMlLD(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsFocused", false);
  return native->IsFocused(env, id);
}

JNI_GENERATOR_EXPORT jint Java_J_N_MnVi6Frs(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetEditableTextSelectionStart", 0);
  return native->GetEditableTextSelectionStart(env, id);
}

JNI_GENERATOR_EXPORT jint Java_J_N_Mxt_1kc4Q(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetEditableTextSelectionEnd", 0);
  return native->GetEditableTextSelectionEnd(env, id);
}

JNI_GENERATOR_EXPORT jintArray Java_J_N_MihzIy2h(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAbsolutePositionForNode", NULL);
  return native->GetAbsolutePositionForNode(env, id).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MZ7sDynr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jobject info,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateCachedAccessibilityNodeInfo", false);
  return native->UpdateCachedAccessibilityNodeInfo(env, base::android::JavaParamRef<jobject>(env,
      info), id);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MJGtghd9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jobject info,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PopulateAccessibilityNodeInfo", false);
  return native->PopulateAccessibilityNodeInfo(env, base::android::JavaParamRef<jobject>(env, info),
      id);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M2E1dEU9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jobject event,
    jint id,
    jint eventType) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PopulateAccessibilityEvent", false);
  return native->PopulateAccessibilityEvent(env, base::android::JavaParamRef<jobject>(env, event),
      id, eventType);
}

JNI_GENERATOR_EXPORT void Java_J_N_MM4OAOXm(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Click");
  return native->Click(env, id);
}

JNI_GENERATOR_EXPORT void Java_J_N_MG_1OiJKg(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Focus");
  return native->Focus(env, id);
}

JNI_GENERATOR_EXPORT void Java_J_N_MNm00fYN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Blur");
  return native->Blur(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MB302_1MP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollToMakeNodeVisible");
  return native->ScrollToMakeNodeVisible(env, id);
}

JNI_GENERATOR_EXPORT jint Java_J_N_MavOU0SM(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint startId,
    jstring elementType,
    jboolean forwards,
    jboolean canWrapToLastElement,
    jboolean useDefaultPredicate) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "FindElementType", 0);
  return native->FindElementType(env, startId, base::android::JavaParamRef<jstring>(env,
      elementType), forwards, canWrapToLastElement, useDefaultPredicate);
}

JNI_GENERATOR_EXPORT void Java_J_N_MEJD7Boi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jstring newValue) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTextFieldValue");
  return native->SetTextFieldValue(env, id, base::android::JavaParamRef<jstring>(env, newValue));
}

JNI_GENERATOR_EXPORT void Java_J_N_MVuu0R4P(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jint start,
    jint end) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetSelection");
  return native->SetSelection(env, id, start, end);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_McKjfBnu(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint selectionGranularity,
    jboolean extendSelection,
    jint id,
    jint cursorIndex) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NextAtGranularity", false);
  return native->NextAtGranularity(env, selectionGranularity, extendSelection, id, cursorIndex);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M3suD0ji(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint selectionGranularity,
    jboolean extendSelection,
    jint id,
    jint cursorIndex) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PreviousAtGranularity", false);
  return native->PreviousAtGranularity(env, selectionGranularity, extendSelection, id, cursorIndex);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MLjXc4lw(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jboolean increment) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AdjustSlider", false);
  return native->AdjustSlider(env, id, increment);
}

JNI_GENERATOR_EXPORT void Java_J_N_MPQKLw45(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint oldId,
    jint newId) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "MoveAccessibilityFocus");
  return native->MoveAccessibilityFocus(env, oldId, newId);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MkaakTGI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSlider", false);
  return native->IsSlider(env, id);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MNch0m9c(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jint direction,
    jboolean pageScroll) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Scroll", false);
  return native->Scroll(env, id, direction, pageScroll);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MfTAAcu8(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jfloat value) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetRangeValue", false);
  return native->SetRangeValue(env, id, value);
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MPyIoFYC(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSupportedHtmlElementTypes", NULL);
  return native->GetSupportedHtmlElementTypes(env).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MOikWIf9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowContextMenu");
  return native->ShowContextMenu(env, id);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mr9fGid2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsEnabled", false);
  return native->IsEnabled(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mg_00024cuhZc(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jboolean screenReaderMode) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Enable");
  return native->Enable(env, screenReaderMode);
}

JNI_GENERATOR_EXPORT void Java_J_N_ME1Wl4ca(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jboolean screenReaderMode,
    jboolean isAccessibilityEnabled) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAXMode");
  return native->SetAXMode(env, screenReaderMode, isAccessibilityEnabled);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MZcfOSQW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AreInlineTextBoxesLoaded", false);
  return native->AreInlineTextBoxesLoaded(env, id);
}

JNI_GENERATOR_EXPORT void Java_J_N_M2WbOJ7_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "LoadInlineTextBoxes");
  return native->LoadInlineTextBoxes(env, id);
}

JNI_GENERATOR_EXPORT jintArray Java_J_N_MVBiMGvZ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jint start,
    jint len) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCharacterBoundingBoxes", NULL);
  return native->GetCharacterBoundingBoxes(env, id, start, len).Release();
}

JNI_GENERATOR_EXPORT jint Java_J_N_MhMiVz6m(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTextLength", 0);
  return native->GetTextLength(env, id);
}

JNI_GENERATOR_EXPORT void Java_J_N_MzygGmQh_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint id,
    jint startOffset,
    jint endOffset) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddSpellingErrorForTesting");
  return native->AddSpellingErrorForTesting(env, id, startOffset, endOffset);
}

JNI_GENERATOR_EXPORT void Java_J_N_MjtR1x1L_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jint maxEvents) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetMaxContentChangedEventsToFireForTesting");
  return native->SetMaxContentChangedEventsToFireForTesting(env, maxEvents);
}

JNI_GENERATOR_EXPORT jint Java_J_N_MoCCC_00024f_1_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetMaxContentChangedEventsToFireForTesting", 0);
  return native->GetMaxContentChangedEventsToFireForTesting(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MUpC4hCb_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SignalEndOfTestForTesting");
  return native->SignalEndOfTestForTesting(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_McBCyHOt(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jboolean allowImageDescriptions) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAllowImageDescriptions");
  return native->SetAllowImageDescriptions(env, allowImageDescriptions);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mx2ry6ai(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jfloat x,
    jfloat y) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnHoverEventNoRenderer", false);
  return native->OnHoverEventNoRenderer(env, x, y);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mmo4i01Z(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAccessibilityAndroid,
    jobject info,
    jint id,
    jboolean hasSentPreviousRequest) {
  WebContentsAccessibilityAndroid* native =
      reinterpret_cast<WebContentsAccessibilityAndroid*>(nativeWebContentsAccessibilityAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetImageData", false);
  return native->GetImageData(env, base::android::JavaParamRef<jobject>(env, info), id,
      hasSentPreviousRequest);
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_onNativeObjectDestroyed(nullptr);
static void Java_WebContentsAccessibilityImpl_onNativeObjectDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeObjectDestroyed",
          "()V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_onNativeObjectDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleEndOfTestSignal(nullptr);
static void Java_WebContentsAccessibilityImpl_handleEndOfTestSignal(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleEndOfTestSignal",
          "()V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleEndOfTestSignal);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_generateAccessibilityNodeInfoString(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_WebContentsAccessibilityImpl_generateAccessibilityNodeInfoString(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper virtualViewId) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "generateAccessibilityNodeInfoString",
          "(I)Ljava/lang/String;",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_generateAccessibilityNodeInfoString);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, as_jint(virtualViewId)));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_updateMaxNodesInCache(nullptr);
static void Java_WebContentsAccessibilityImpl_updateMaxNodesInCache(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateMaxNodesInCache",
          "()V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_updateMaxNodesInCache);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clearNodeInfoCacheForGivenId(nullptr);
static void Java_WebContentsAccessibilityImpl_clearNodeInfoCacheForGivenId(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper virtualViewId) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "clearNodeInfoCacheForGivenId",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clearNodeInfoCacheForGivenId);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(virtualViewId));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_onHoverEvent(nullptr);
static jboolean Java_WebContentsAccessibilityImpl_onHoverEvent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper action) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onHoverEvent",
          "(I)Z",
          &g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_onHoverEvent);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, as_jint(action));
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_notifyFrameInfoInitialized(nullptr);
static void Java_WebContentsAccessibilityImpl_notifyFrameInfoInitialized(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "notifyFrameInfoInitialized",
          "()V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_notifyFrameInfoInitialized);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_finishGranularityMoveNext(nullptr);
static void Java_WebContentsAccessibilityImpl_finishGranularityMoveNext(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& text,
    jboolean extendSelection,
    JniIntWrapper itemStartIndex,
    JniIntWrapper itemEndIndex) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "finishGranularityMoveNext",
          "(Ljava/lang/String;ZII)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_finishGranularityMoveNext);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, text.obj(), extendSelection, as_jint(itemStartIndex),
              as_jint(itemEndIndex));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_finishGranularityMovePrevious(nullptr);
static void Java_WebContentsAccessibilityImpl_finishGranularityMovePrevious(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& text,
    jboolean extendSelection,
    JniIntWrapper itemStartIndex,
    JniIntWrapper itemEndIndex) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "finishGranularityMovePrevious",
          "(Ljava/lang/String;ZII)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_finishGranularityMovePrevious);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, text.obj(), extendSelection, as_jint(itemStartIndex),
              as_jint(itemEndIndex));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_sendDelayedWindowContentChangedEvent(nullptr);
static void Java_WebContentsAccessibilityImpl_sendDelayedWindowContentChangedEvent(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "sendDelayedWindowContentChangedEvent",
          "()V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_sendDelayedWindowContentChangedEvent);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleFocusChanged(nullptr);
static void Java_WebContentsAccessibilityImpl_handleFocusChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleFocusChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleFocusChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleCheckStateChanged(nullptr);
static void Java_WebContentsAccessibilityImpl_handleCheckStateChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleCheckStateChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleCheckStateChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleStateDescriptionChanged(nullptr);
static void Java_WebContentsAccessibilityImpl_handleStateDescriptionChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleStateDescriptionChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleStateDescriptionChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleClicked(nullptr);
static void Java_WebContentsAccessibilityImpl_handleClicked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleClicked",
          "(I)V",
          &g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleClicked);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleTextSelectionChanged(nullptr);
static void Java_WebContentsAccessibilityImpl_handleTextSelectionChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleTextSelectionChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleTextSelectionChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleTextContentChanged(nullptr);
static void Java_WebContentsAccessibilityImpl_handleTextContentChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleTextContentChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleTextContentChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleEditableTextChanged(nullptr);
static void Java_WebContentsAccessibilityImpl_handleEditableTextChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleEditableTextChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleEditableTextChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleSliderChanged(nullptr);
static void Java_WebContentsAccessibilityImpl_handleSliderChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleSliderChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleSliderChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleContentChanged(nullptr);
static void Java_WebContentsAccessibilityImpl_handleContentChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleContentChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleContentChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleNavigate(nullptr);
static void Java_WebContentsAccessibilityImpl_handleNavigate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleNavigate",
          "()V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleNavigate);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleScrollPositionChanged(nullptr);
static void Java_WebContentsAccessibilityImpl_handleScrollPositionChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleScrollPositionChanged",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleScrollPositionChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleScrolledToAnchor(nullptr);
static void Java_WebContentsAccessibilityImpl_handleScrolledToAnchor(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleScrolledToAnchor",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleScrolledToAnchor);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleHover(nullptr);
static void Java_WebContentsAccessibilityImpl_handleHover(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleHover",
          "(I)V",
          &g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleHover);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleDialogModalOpened(nullptr);
static void Java_WebContentsAccessibilityImpl_handleDialogModalOpened(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper virtualViewId) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleDialogModalOpened",
          "(I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_handleDialogModalOpened);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(virtualViewId));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_announceLiveRegionText(nullptr);
static void Java_WebContentsAccessibilityImpl_announceLiveRegionText(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& text) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "announceLiveRegionText",
          "(Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_announceLiveRegionText);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, text.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoParent(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoParent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper parentId) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoParent",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoParent);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), as_jint(parentId));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_addAccessibilityNodeInfoChildren(nullptr);
static void Java_WebContentsAccessibilityImpl_addAccessibilityNodeInfoChildren(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    const base::android::JavaRef<jintArray>& childIds) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "addAccessibilityNodeInfoChildren",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;[I)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_addAccessibilityNodeInfoChildren);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), childIds.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoBooleanAttributes(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoBooleanAttributes(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper virtualViewId,
    jboolean checkable,
    jboolean checked,
    jboolean clickable,
    jboolean contentInvalid,
    jboolean enabled,
    jboolean focusable,
    jboolean focused,
    jboolean hasImage,
    jboolean password,
    jboolean scrollable,
    jboolean selected,
    jboolean visibleToUser) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoBooleanAttributes",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;IZZZZZZZZZZZZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoBooleanAttributes);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), as_jint(virtualViewId), checkable, checked,
              clickable, contentInvalid, enabled, focusable, focused, hasImage, password,
              scrollable, selected, visibleToUser);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_addAccessibilityNodeInfoActions(nullptr);
static void Java_WebContentsAccessibilityImpl_addAccessibilityNodeInfoActions(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper virtualViewId,
    jboolean canScrollForward,
    jboolean canScrollBackward,
    jboolean canScrollUp,
    jboolean canScrollDown,
    jboolean canScrollLeft,
    jboolean canScrollRight,
    jboolean clickable,
    jboolean editableText,
    jboolean enabled,
    jboolean focusable,
    jboolean focused,
    jboolean isCollapsed,
    jboolean isExpanded,
    jboolean hasNonEmptyValue,
    jboolean hasNonEmptyInnerText,
    jboolean isSeekControl,
    jboolean isForm) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "addAccessibilityNodeInfoActions",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;IZZZZZZZZZZZZZZZZZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_addAccessibilityNodeInfoActions);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), as_jint(virtualViewId), canScrollForward,
              canScrollBackward, canScrollUp, canScrollDown, canScrollLeft, canScrollRight,
              clickable, editableText, enabled, focusable, focused, isCollapsed, isExpanded,
              hasNonEmptyValue, hasNonEmptyInnerText, isSeekControl, isForm);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoBaseAttributes(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoBaseAttributes(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    jboolean isRoot,
    const base::android::JavaRef<jstring>& className,
    const base::android::JavaRef<jstring>& role,
    const base::android::JavaRef<jstring>& roleDescription,
    const base::android::JavaRef<jstring>& hint,
    const base::android::JavaRef<jstring>& targetUrl,
    jboolean canOpenPopup,
    jboolean multiLine,
    JniIntWrapper inputType,
    JniIntWrapper liveRegion,
    const base::android::JavaRef<jstring>& errorMessage,
    JniIntWrapper clickableScore,
    const base::android::JavaRef<jstring>& display) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoBaseAttributes",
"(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZIILjava/lang/String;ILjava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoBaseAttributes);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), isRoot, className.obj(), role.obj(),
              roleDescription.obj(), hint.obj(), targetUrl.obj(), canOpenPopup, multiLine,
              as_jint(inputType), as_jint(liveRegion), errorMessage.obj(), as_jint(clickableScore),
              display.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoText(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoText(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    const base::android::JavaRef<jstring>& text,
    jboolean annotateAsLink,
    jboolean isEditableText,
    const base::android::JavaRef<jstring>& language,
    const base::android::JavaRef<jintArray>& suggestionStarts,
    const base::android::JavaRef<jintArray>& suggestionEnds,
    const base::android::JavaRef<jobjectArray>& suggestions,
    const base::android::JavaRef<jstring>& stateDescription) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoText",
"(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;Ljava/lang/String;ZZLjava/lang/String;[I[I[Ljava/lang/String;Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoText);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), text.obj(), annotateAsLink, isEditableText,
              language.obj(), suggestionStarts.obj(), suggestionEnds.obj(), suggestions.obj(),
              stateDescription.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoLocation(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoLocation(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper virtualViewId,
    JniIntWrapper absoluteLeft,
    JniIntWrapper absoluteTop,
    JniIntWrapper parentRelativeLeft,
    JniIntWrapper parentRelativeTop,
    JniIntWrapper width,
    JniIntWrapper height,
    jboolean isRootNode,
    jboolean isOffscreen) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoLocation",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;IIIIIIIZZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoLocation);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), as_jint(virtualViewId), as_jint(absoluteLeft),
              as_jint(absoluteTop), as_jint(parentRelativeLeft), as_jint(parentRelativeTop),
              as_jint(width), as_jint(height), isRootNode, isOffscreen);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionInfo(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionInfo(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper rowCount,
    JniIntWrapper columnCount,
    jboolean hierarchical) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoCollectionInfo",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;IIZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionInfo);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), as_jint(rowCount), as_jint(columnCount),
              hierarchical);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionItemInfo(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionItemInfo(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper rowIndex,
    JniIntWrapper rowSpan,
    JniIntWrapper columnIndex,
    JniIntWrapper columnSpan,
    jboolean heading) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoCollectionItemInfo",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;IIIIZ)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoCollectionItemInfo);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), as_jint(rowIndex), as_jint(rowSpan),
              as_jint(columnIndex), as_jint(columnSpan), heading);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoRangeInfo(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoRangeInfo(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper rangeType,
    jfloat min,
    jfloat max,
    jfloat current) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoRangeInfo",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;IFFF)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoRangeInfo);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), as_jint(rangeType), min, max, current);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoViewIdResourceName(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoViewIdResourceName(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    const base::android::JavaRef<jstring>& viewIdResourceName) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoViewIdResourceName",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoViewIdResourceName);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), viewIdResourceName.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoOAttributes(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoOAttributes(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    jboolean hasCharacterLocations,
    jboolean hasImage,
    const base::android::JavaRef<jstring>& hint) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoOAttributes",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;ZZLjava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoOAttributes);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), hasCharacterLocations, hasImage, hint.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoPaneTitle(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoPaneTitle(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    const base::android::JavaRef<jstring>& title) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoPaneTitle",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoPaneTitle);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), title.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoSelectionAttrs(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoSelectionAttrs(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper startIndex,
    JniIntWrapper endIndex) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoSelectionAttrs",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;II)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoSelectionAttrs);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), as_jint(startIndex), as_jint(endIndex));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoImageData(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityNodeInfoImageData(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& info,
    const base::android::JavaRef<jbyteArray>& imageData) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityNodeInfoImageData",
          "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;[B)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityNodeInfoImageData);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, info.obj(), imageData.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventBaseAttributes(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventBaseAttributes(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    jboolean checked,
    jboolean enabled,
    jboolean password,
    jboolean scrollable,
    JniIntWrapper currentItemIndex,
    JniIntWrapper itemCount,
    JniIntWrapper scrollX,
    JniIntWrapper scrollY,
    JniIntWrapper maxScrollX,
    JniIntWrapper maxScrollY,
    const base::android::JavaRef<jstring>& className) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityEventBaseAttributes",
          "(Landroid/view/accessibility/AccessibilityEvent;ZZZZIIIIIILjava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventBaseAttributes);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, event.obj(), checked, enabled, password, scrollable,
              as_jint(currentItemIndex), as_jint(itemCount), as_jint(scrollX), as_jint(scrollY),
              as_jint(maxScrollX), as_jint(maxScrollY), className.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventTextChangedAttrs(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventTextChangedAttrs(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    JniIntWrapper fromIndex,
    JniIntWrapper addedCount,
    JniIntWrapper removedCount,
    const base::android::JavaRef<jstring>& beforeText,
    const base::android::JavaRef<jstring>& text) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityEventTextChangedAttrs",
"(Landroid/view/accessibility/AccessibilityEvent;IIILjava/lang/String;Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventTextChangedAttrs);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, event.obj(), as_jint(fromIndex), as_jint(addedCount),
              as_jint(removedCount), beforeText.obj(), text.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventSelectionAttrs(nullptr);
static void Java_WebContentsAccessibilityImpl_setAccessibilityEventSelectionAttrs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event,
    JniIntWrapper fromIndex,
    JniIntWrapper toIndex,
    JniIntWrapper itemCount,
    const base::android::JavaRef<jstring>& text) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessibilityEventSelectionAttrs",
          "(Landroid/view/accessibility/AccessibilityEvent;IIILjava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_setAccessibilityEventSelectionAttrs);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, event.obj(), as_jint(fromIndex), as_jint(toIndex),
              as_jint(itemCount), text.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_shouldRespectDisplayedPasswordText(nullptr);
static jboolean Java_WebContentsAccessibilityImpl_shouldRespectDisplayedPasswordText(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "shouldRespectDisplayedPasswordText",
          "()Z",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_shouldRespectDisplayedPasswordText);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_shouldExposePasswordText(nullptr);
static jboolean Java_WebContentsAccessibilityImpl_shouldExposePasswordText(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "shouldExposePasswordText",
          "()Z",
&g_org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_shouldExposePasswordText);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace content

#endif  // org_chromium_content_browser_accessibility_WebContentsAccessibilityImpl_JNI
