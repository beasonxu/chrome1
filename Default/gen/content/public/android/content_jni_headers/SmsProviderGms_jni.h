// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/sms/SmsProviderGms

#ifndef org_chromium_content_browser_sms_SmsProviderGms_JNI
#define org_chromium_content_browser_sms_SmsProviderGms_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_sms_SmsProviderGms[];
const char kClassPath_org_chromium_content_browser_sms_SmsProviderGms[] =
    "org/chromium/content/browser/sms/SmsProviderGms";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_sms_SmsProviderGms_clazz(nullptr);
#ifndef org_chromium_content_browser_sms_SmsProviderGms_clazz_defined
#define org_chromium_content_browser_sms_SmsProviderGms_clazz_defined
inline jclass org_chromium_content_browser_sms_SmsProviderGms_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_sms_SmsProviderGms,
      &g_org_chromium_content_browser_sms_SmsProviderGms_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT void Java_J_N_MDAxNisW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSmsProviderGms,
    jstring sms,
    jint backend) {
  SmsProviderGms* native = reinterpret_cast<SmsProviderGms*>(nativeSmsProviderGms);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnReceive");
  return native->OnReceive(env, base::android::JavaParamRef<jstring>(env, sms), backend);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mz9c1Rem(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSmsProviderGms) {
  SmsProviderGms* native = reinterpret_cast<SmsProviderGms*>(nativeSmsProviderGms);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnTimeout");
  return native->OnTimeout(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MqHdTL15(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSmsProviderGms) {
  SmsProviderGms* native = reinterpret_cast<SmsProviderGms*>(nativeSmsProviderGms);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnCancel");
  return native->OnCancel(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_M_00024UJTj5O(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSmsProviderGms) {
  SmsProviderGms* native = reinterpret_cast<SmsProviderGms*>(nativeSmsProviderGms);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnNotAvailable");
  return native->OnNotAvailable(env);
}


static std::atomic<jmethodID> g_org_chromium_content_browser_sms_SmsProviderGms_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_SmsProviderGms_create(JNIEnv* env, jlong
    smsProviderGmsAndroid,
    JniIntWrapper backend) {
  jclass clazz = org_chromium_content_browser_sms_SmsProviderGms_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_sms_SmsProviderGms_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(JI)Lorg/chromium/content/browser/sms/SmsProviderGms;",
          &g_org_chromium_content_browser_sms_SmsProviderGms_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, smsProviderGmsAndroid, as_jint(backend));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_content_browser_sms_SmsProviderGms_destroy(nullptr);
static void Java_SmsProviderGms_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_sms_SmsProviderGms_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_sms_SmsProviderGms_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_content_browser_sms_SmsProviderGms_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_content_browser_sms_SmsProviderGms_listen(nullptr);
static void Java_SmsProviderGms_listen(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& window,
    jboolean isLocalRequest) {
  jclass clazz = org_chromium_content_browser_sms_SmsProviderGms_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_sms_SmsProviderGms_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "listen",
          "(Lorg/chromium/ui/base/WindowAndroid;Z)V",
          &g_org_chromium_content_browser_sms_SmsProviderGms_listen);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, window.obj(), isLocalRequest);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_sms_SmsProviderGms_setClientAndWindow(nullptr);
static void Java_SmsProviderGms_setClientAndWindow(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& client,
    const base::android::JavaRef<jobject>& window) {
  jclass clazz = org_chromium_content_browser_sms_SmsProviderGms_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_sms_SmsProviderGms_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setClientAndWindow",
"(Lorg/chromium/content/browser/sms/Wrappers$SmsRetrieverClientWrapper;Lorg/chromium/ui/base/WindowAndroid;)V",
          &g_org_chromium_content_browser_sms_SmsProviderGms_setClientAndWindow);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, client.obj(), window.obj());
}

}  // namespace content

#endif  // org_chromium_content_browser_sms_SmsProviderGms_JNI
