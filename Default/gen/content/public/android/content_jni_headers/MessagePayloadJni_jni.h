// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/MessagePayloadJni

#ifndef org_chromium_content_browser_MessagePayloadJni_JNI
#define org_chromium_content_browser_MessagePayloadJni_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_MessagePayloadJni[];
const char kClassPath_org_chromium_content_browser_MessagePayloadJni[] =
    "org/chromium/content/browser/MessagePayloadJni";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_MessagePayloadJni_clazz(nullptr);
#ifndef org_chromium_content_browser_MessagePayloadJni_clazz_defined
#define org_chromium_content_browser_MessagePayloadJni_clazz_defined
inline jclass org_chromium_content_browser_MessagePayloadJni_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_content_browser_MessagePayloadJni,
      &g_org_chromium_content_browser_MessagePayloadJni_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {


static std::atomic<jmethodID> g_org_chromium_content_browser_MessagePayloadJni_getType(nullptr);
static jint Java_MessagePayloadJni_getType(JNIEnv* env, const base::android::JavaRef<jobject>&
    payload) {
  jclass clazz = org_chromium_content_browser_MessagePayloadJni_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_MessagePayloadJni_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getType",
          "(Lorg/chromium/content_public/browser/MessagePayload;)I",
          &g_org_chromium_content_browser_MessagePayloadJni_getType);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, payload.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_MessagePayloadJni_createFromString(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_MessagePayloadJni_createFromString(JNIEnv*
    env, const base::android::JavaRef<jstring>& string) {
  jclass clazz = org_chromium_content_browser_MessagePayloadJni_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_MessagePayloadJni_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createFromString",
          "(Ljava/lang/String;)Lorg/chromium/content_public/browser/MessagePayload;",
          &g_org_chromium_content_browser_MessagePayloadJni_createFromString);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, string.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_content_browser_MessagePayloadJni_getAsString(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_MessagePayloadJni_getAsString(JNIEnv* env,
    const base::android::JavaRef<jobject>& payload) {
  jclass clazz = org_chromium_content_browser_MessagePayloadJni_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_MessagePayloadJni_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getAsString",
          "(Lorg/chromium/content_public/browser/MessagePayload;)Ljava/lang/String;",
          &g_org_chromium_content_browser_MessagePayloadJni_getAsString);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, payload.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_MessagePayloadJni_createFromArrayBuffer(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_MessagePayloadJni_createFromArrayBuffer(JNIEnv* env, const
    base::android::JavaRef<jbyteArray>& arrayBuffer) {
  jclass clazz = org_chromium_content_browser_MessagePayloadJni_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_MessagePayloadJni_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createFromArrayBuffer",
          "([B)Lorg/chromium/content_public/browser/MessagePayload;",
          &g_org_chromium_content_browser_MessagePayloadJni_createFromArrayBuffer);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, arrayBuffer.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_MessagePayloadJni_getAsArrayBuffer(nullptr);
static base::android::ScopedJavaLocalRef<jbyteArray> Java_MessagePayloadJni_getAsArrayBuffer(JNIEnv*
    env, const base::android::JavaRef<jobject>& payload) {
  jclass clazz = org_chromium_content_browser_MessagePayloadJni_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_MessagePayloadJni_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getAsArrayBuffer",
          "(Lorg/chromium/content_public/browser/MessagePayload;)[B",
          &g_org_chromium_content_browser_MessagePayloadJni_getAsArrayBuffer);

  jbyteArray ret =
      static_cast<jbyteArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, payload.obj()));
  return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

}  // namespace content

#endif  // org_chromium_content_browser_MessagePayloadJni_JNI
