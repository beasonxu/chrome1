// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/AppWebMessagePort

#ifndef org_chromium_content_browser_AppWebMessagePort_JNI
#define org_chromium_content_browser_AppWebMessagePort_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_AppWebMessagePort[];
const char kClassPath_org_chromium_content_browser_AppWebMessagePort[] =
    "org/chromium/content/browser/AppWebMessagePort";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_AppWebMessagePort_clazz(nullptr);
#ifndef org_chromium_content_browser_AppWebMessagePort_clazz_defined
#define org_chromium_content_browser_AppWebMessagePort_clazz_defined
inline jclass org_chromium_content_browser_AppWebMessagePort_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_content_browser_AppWebMessagePort,
      &g_org_chromium_content_browser_AppWebMessagePort_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {
namespace android {

static base::android::ScopedJavaLocalRef<jobjectArray> JNI_AppWebMessagePort_CreatePair(JNIEnv*
    env);

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_M9LtFyNP(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AppWebMessagePort_CreatePair(env).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MnazrhT9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAppWebMessagePort,
    jobject messagePayload,
    jobjectArray sentPorts) {
  AppWebMessagePort* native = reinterpret_cast<AppWebMessagePort*>(nativeAppWebMessagePort);
  CHECK_NATIVE_PTR(env, jcaller, native, "PostMessage");
  return native->PostMessage(env, base::android::JavaParamRef<jobject>(env, messagePayload),
      base::android::JavaParamRef<jobjectArray>(env, sentPorts));
}

JNI_GENERATOR_EXPORT void Java_J_N_MIRFl3_00024f(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAppWebMessagePort,
    jboolean shouldReceiveMessage) {
  AppWebMessagePort* native = reinterpret_cast<AppWebMessagePort*>(nativeAppWebMessagePort);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetShouldReceiveMessages");
  return native->SetShouldReceiveMessages(env, shouldReceiveMessage);
}

JNI_GENERATOR_EXPORT void Java_J_N_MJ_00024gNv5y(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAppWebMessagePort) {
  AppWebMessagePort* native = reinterpret_cast<AppWebMessagePort*>(nativeAppWebMessagePort);
  CHECK_NATIVE_PTR(env, jcaller, native, "CloseAndDestroy");
  return native->CloseAndDestroy(env);
}


static std::atomic<jmethodID> g_org_chromium_content_browser_AppWebMessagePort_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_AppWebMessagePort_Constructor(JNIEnv* env,
    jlong nativeAppWebMessagePort) {
  jclass clazz = org_chromium_content_browser_AppWebMessagePort_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_AppWebMessagePort_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(J)V",
          &g_org_chromium_content_browser_AppWebMessagePort_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, nativeAppWebMessagePort);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_AppWebMessagePort_getNativeObj(nullptr);
static jlong Java_AppWebMessagePort_getNativeObj(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_content_browser_AppWebMessagePort_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_AppWebMessagePort_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativeObj",
          "()J",
          &g_org_chromium_content_browser_AppWebMessagePort_getNativeObj);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_content_browser_AppWebMessagePort_onMessage(nullptr);
static void Java_AppWebMessagePort_onMessage(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& payload,
    const base::android::JavaRef<jobjectArray>& ports) {
  jclass clazz = org_chromium_content_browser_AppWebMessagePort_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_AppWebMessagePort_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onMessage",
"(Lorg/chromium/content_public/browser/MessagePayload;[Lorg/chromium/content_public/browser/MessagePort;)V",
          &g_org_chromium_content_browser_AppWebMessagePort_onMessage);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, payload.obj(), ports.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_AppWebMessagePort_nativeDestroyed(nullptr);
static void Java_AppWebMessagePort_nativeDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_AppWebMessagePort_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_AppWebMessagePort_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "nativeDestroyed",
          "()V",
          &g_org_chromium_content_browser_AppWebMessagePort_nativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_AppWebMessagePort_setTransferred(nullptr);
static void Java_AppWebMessagePort_setTransferred(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_AppWebMessagePort_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_AppWebMessagePort_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setTransferred",
          "()V",
          &g_org_chromium_content_browser_AppWebMessagePort_setTransferred);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace android
}  // namespace content

#endif  // org_chromium_content_browser_AppWebMessagePort_JNI
