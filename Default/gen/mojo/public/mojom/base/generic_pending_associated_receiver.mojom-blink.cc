// mojo/public/mojom/base/generic_pending_associated_receiver.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/mojom/base/generic_pending_associated_receiver.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "mojo/public/mojom/base/generic_pending_associated_receiver.mojom-params-data.h"
#include "mojo/public/mojom/base/generic_pending_associated_receiver.mojom-shared-message-ids.h"

#include "mojo/public/mojom/base/generic_pending_associated_receiver.mojom-blink-import-headers.h"
#include "mojo/public/mojom/base/generic_pending_associated_receiver.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MOJO_PUBLIC_MOJOM_BASE_GENERIC_PENDING_ASSOCIATED_RECEIVER_MOJOM_BLINK_JUMBO_H_
#define MOJO_PUBLIC_MOJOM_BASE_GENERIC_PENDING_ASSOCIATED_RECEIVER_MOJOM_BLINK_JUMBO_H_
#endif



namespace mojo_base {
namespace mojom {
namespace blink {
GenericPendingAssociatedReceiver::GenericPendingAssociatedReceiver()
    : interface_name(),
      receiver() {}

GenericPendingAssociatedReceiver::GenericPendingAssociatedReceiver(
    const WTF::String& interface_name_in,
    ::mojo::PendingAssociatedReceiver<GenericAssociatedInterface> receiver_in)
    : interface_name(std::move(interface_name_in)),
      receiver(std::move(receiver_in)) {}

GenericPendingAssociatedReceiver::~GenericPendingAssociatedReceiver() = default;

void GenericPendingAssociatedReceiver::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "interface_name"), this->interface_name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "receiver"), this->receiver,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingAssociatedReceiver<GenericAssociatedInterface>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool GenericPendingAssociatedReceiver::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char GenericAssociatedInterface::Name_[] = "mojo_base.mojom.GenericAssociatedInterface";

GenericAssociatedInterface::IPCStableHashFunction GenericAssociatedInterface::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* GenericAssociatedInterface::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
# endif // !BUILDFLAG(IS_FUCHSIA)

GenericAssociatedInterfaceProxy::GenericAssociatedInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

// static
bool GenericAssociatedInterfaceStubDispatch::Accept(
    GenericAssociatedInterface* impl,
    mojo::Message* message) {
  return false;
}

// static
bool GenericAssociatedInterfaceStubDispatch::AcceptWithResponder(
    GenericAssociatedInterface* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  return false;
}



bool GenericAssociatedInterfaceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojo_base::mojom::blink::GenericAssociatedInterface::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, {});
}



}  // namespace blink
}  // namespace mojom
}  // namespace mojo_base


namespace mojo {


// static
bool StructTraits<::mojo_base::mojom::blink::GenericPendingAssociatedReceiver::DataView, ::mojo_base::mojom::blink::GenericPendingAssociatedReceiverPtr>::Read(
    ::mojo_base::mojom::blink::GenericPendingAssociatedReceiver::DataView input,
    ::mojo_base::mojom::blink::GenericPendingAssociatedReceiverPtr* output) {
  bool success = true;
  ::mojo_base::mojom::blink::GenericPendingAssociatedReceiverPtr result(::mojo_base::mojom::blink::GenericPendingAssociatedReceiver::New());
  
      if (success && !input.ReadInterfaceName(&result->interface_name))
        success = false;
      if (success) {
        result->receiver =
            input.TakeReceiver<decltype(result->receiver)>();
      }
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace mojo_base {
namespace mojom {
namespace blink {


GenericAssociatedInterfaceAsyncWaiter::GenericAssociatedInterfaceAsyncWaiter(
    GenericAssociatedInterface* proxy) : proxy_(proxy) {}

GenericAssociatedInterfaceAsyncWaiter::~GenericAssociatedInterfaceAsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace mojo_base


#if defined(__clang__)
#pragma clang diagnostic pop
#endif