// components/optimization_guide/core/optimization_guide_common.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_OPTIMIZATION_GUIDE_CORE_OPTIMIZATION_GUIDE_COMMON_MOJOM_SHARED_H_
#define COMPONENTS_OPTIMIZATION_GUIDE_CORE_OPTIMIZATION_GUIDE_COMMON_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/optimization_guide/core/optimization_guide_common.mojom-shared-internal.h"







namespace optimization_guide_common {
namespace mojom {


}  // namespace mojom
}  // namespace optimization_guide_common

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace optimization_guide_common {
namespace mojom {


enum class LogSource : int32_t {
  
  SERVICE_AND_SETTINGS = 0,
  
  HINTS = 1,
  
  MODEL_MANAGEMENT = 2,
  
  PAGE_CONTENT_ANNOTATIONS = 3,
  
  HINTS_NOTIFICATIONS = 4,
  kMinValue = 0,
  kMaxValue = 4,
};

 std::ostream& operator<<(std::ostream& os, LogSource value);
inline bool IsKnownEnumValue(LogSource value) {
  return internal::LogSource_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace optimization_guide_common

namespace std {

template <>
struct hash<::optimization_guide_common::mojom::LogSource>
    : public mojo::internal::EnumHashImpl<::optimization_guide_common::mojom::LogSource> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::optimization_guide_common::mojom::LogSource, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::optimization_guide_common::mojom::LogSource, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::optimization_guide_common::mojom::LogSource>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace optimization_guide_common {
namespace mojom {


}  // namespace mojom
}  // namespace optimization_guide_common

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::optimization_guide_common::mojom::LogSource> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::optimization_guide_common::mojom::LogSource value);
};

} // namespace perfetto

#endif  // COMPONENTS_OPTIMIZATION_GUIDE_CORE_OPTIMIZATION_GUIDE_COMMON_MOJOM_SHARED_H_