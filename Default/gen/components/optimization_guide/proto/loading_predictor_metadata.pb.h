// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/loading_predictor_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2floading_5fpredictor_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2floading_5fpredictor_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2foptimization_5fguide_2fproto_2floading_5fpredictor_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2foptimization_5fguide_2fproto_2floading_5fpredictor_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace optimization_guide {
namespace proto {
class LoadingPredictorMetadata;
struct LoadingPredictorMetadataDefaultTypeInternal;
extern LoadingPredictorMetadataDefaultTypeInternal _LoadingPredictorMetadata_default_instance_;
class Resource;
struct ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> ::optimization_guide::proto::LoadingPredictorMetadata* Arena::CreateMaybeMessage<::optimization_guide::proto::LoadingPredictorMetadata>(Arena*);
template<> ::optimization_guide::proto::Resource* Arena::CreateMaybeMessage<::optimization_guide::proto::Resource>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace optimization_guide {
namespace proto {

enum ResourceType : int {
  RESOURCE_TYPE_UNKNOWN = 0,
  RESOURCE_TYPE_CSS = 1,
  RESOURCE_TYPE_SCRIPT = 2
};
bool ResourceType_IsValid(int value);
constexpr ResourceType ResourceType_MIN = RESOURCE_TYPE_UNKNOWN;
constexpr ResourceType ResourceType_MAX = RESOURCE_TYPE_SCRIPT;
constexpr int ResourceType_ARRAYSIZE = ResourceType_MAX + 1;

const std::string& ResourceType_Name(ResourceType value);
template<typename T>
inline const std::string& ResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceType_Name.");
  return ResourceType_Name(static_cast<ResourceType>(enum_t_value));
}
bool ResourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResourceType* value);
// ===================================================================

class Resource final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.Resource) */ {
 public:
  inline Resource() : Resource(nullptr) {}
  ~Resource() override;
  explicit PROTOBUF_CONSTEXPR Resource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Resource(const Resource& from);
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resource& operator=(Resource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Resource& default_instance() {
    return *internal_default_instance();
  }
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Resource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Resource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Resource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.Resource";
  }
  protected:
  explicit Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kResourceTypeFieldNumber = 2,
    kPreconnectOnlyFieldNumber = 3,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional .optimization_guide.proto.ResourceType resource_type = 2;
  bool has_resource_type() const;
  private:
  bool _internal_has_resource_type() const;
  public:
  void clear_resource_type();
  ::optimization_guide::proto::ResourceType resource_type() const;
  void set_resource_type(::optimization_guide::proto::ResourceType value);
  private:
  ::optimization_guide::proto::ResourceType _internal_resource_type() const;
  void _internal_set_resource_type(::optimization_guide::proto::ResourceType value);
  public:

  // optional bool preconnect_only = 3;
  bool has_preconnect_only() const;
  private:
  bool _internal_has_preconnect_only() const;
  public:
  void clear_preconnect_only();
  bool preconnect_only() const;
  void set_preconnect_only(bool value);
  private:
  bool _internal_preconnect_only() const;
  void _internal_set_preconnect_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.Resource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int resource_type_;
  bool preconnect_only_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2floading_5fpredictor_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class LoadingPredictorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.LoadingPredictorMetadata) */ {
 public:
  inline LoadingPredictorMetadata() : LoadingPredictorMetadata(nullptr) {}
  ~LoadingPredictorMetadata() override;
  explicit PROTOBUF_CONSTEXPR LoadingPredictorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadingPredictorMetadata(const LoadingPredictorMetadata& from);
  LoadingPredictorMetadata(LoadingPredictorMetadata&& from) noexcept
    : LoadingPredictorMetadata() {
    *this = ::std::move(from);
  }

  inline LoadingPredictorMetadata& operator=(const LoadingPredictorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadingPredictorMetadata& operator=(LoadingPredictorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoadingPredictorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadingPredictorMetadata* internal_default_instance() {
    return reinterpret_cast<const LoadingPredictorMetadata*>(
               &_LoadingPredictorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoadingPredictorMetadata& a, LoadingPredictorMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoadingPredictorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadingPredictorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadingPredictorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadingPredictorMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoadingPredictorMetadata& from);
  void MergeFrom(const LoadingPredictorMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoadingPredictorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.LoadingPredictorMetadata";
  }
  protected:
  explicit LoadingPredictorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubresourcesFieldNumber = 1,
  };
  // repeated .optimization_guide.proto.Resource subresources = 1;
  int subresources_size() const;
  private:
  int _internal_subresources_size() const;
  public:
  void clear_subresources();
  ::optimization_guide::proto::Resource* mutable_subresources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Resource >*
      mutable_subresources();
  private:
  const ::optimization_guide::proto::Resource& _internal_subresources(int index) const;
  ::optimization_guide::proto::Resource* _internal_add_subresources();
  public:
  const ::optimization_guide::proto::Resource& subresources(int index) const;
  ::optimization_guide::proto::Resource* add_subresources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Resource >&
      subresources() const;

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.LoadingPredictorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Resource > subresources_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2floading_5fpredictor_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Resource

// optional string url = 1;
inline bool Resource::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Resource::has_url() const {
  return _internal_has_url();
}
inline void Resource::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Resource::url() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Resource.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Resource::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Resource.url)
}
inline std::string* Resource::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Resource.url)
  return _s;
}
inline const std::string& Resource::_internal_url() const {
  return url_.Get();
}
inline void Resource::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* Resource::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* Resource::release_url() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.Resource.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Resource::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.Resource.url)
}

// optional .optimization_guide.proto.ResourceType resource_type = 2;
inline bool Resource::_internal_has_resource_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Resource::has_resource_type() const {
  return _internal_has_resource_type();
}
inline void Resource::clear_resource_type() {
  resource_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::optimization_guide::proto::ResourceType Resource::_internal_resource_type() const {
  return static_cast< ::optimization_guide::proto::ResourceType >(resource_type_);
}
inline ::optimization_guide::proto::ResourceType Resource::resource_type() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Resource.resource_type)
  return _internal_resource_type();
}
inline void Resource::_internal_set_resource_type(::optimization_guide::proto::ResourceType value) {
  assert(::optimization_guide::proto::ResourceType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  resource_type_ = value;
}
inline void Resource::set_resource_type(::optimization_guide::proto::ResourceType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Resource.resource_type)
}

// optional bool preconnect_only = 3;
inline bool Resource::_internal_has_preconnect_only() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Resource::has_preconnect_only() const {
  return _internal_has_preconnect_only();
}
inline void Resource::clear_preconnect_only() {
  preconnect_only_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Resource::_internal_preconnect_only() const {
  return preconnect_only_;
}
inline bool Resource::preconnect_only() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Resource.preconnect_only)
  return _internal_preconnect_only();
}
inline void Resource::_internal_set_preconnect_only(bool value) {
  _has_bits_[0] |= 0x00000004u;
  preconnect_only_ = value;
}
inline void Resource::set_preconnect_only(bool value) {
  _internal_set_preconnect_only(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Resource.preconnect_only)
}

// -------------------------------------------------------------------

// LoadingPredictorMetadata

// repeated .optimization_guide.proto.Resource subresources = 1;
inline int LoadingPredictorMetadata::_internal_subresources_size() const {
  return subresources_.size();
}
inline int LoadingPredictorMetadata::subresources_size() const {
  return _internal_subresources_size();
}
inline void LoadingPredictorMetadata::clear_subresources() {
  subresources_.Clear();
}
inline ::optimization_guide::proto::Resource* LoadingPredictorMetadata::mutable_subresources(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.LoadingPredictorMetadata.subresources)
  return subresources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Resource >*
LoadingPredictorMetadata::mutable_subresources() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.LoadingPredictorMetadata.subresources)
  return &subresources_;
}
inline const ::optimization_guide::proto::Resource& LoadingPredictorMetadata::_internal_subresources(int index) const {
  return subresources_.Get(index);
}
inline const ::optimization_guide::proto::Resource& LoadingPredictorMetadata::subresources(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.LoadingPredictorMetadata.subresources)
  return _internal_subresources(index);
}
inline ::optimization_guide::proto::Resource* LoadingPredictorMetadata::_internal_add_subresources() {
  return subresources_.Add();
}
inline ::optimization_guide::proto::Resource* LoadingPredictorMetadata::add_subresources() {
  ::optimization_guide::proto::Resource* _add = _internal_add_subresources();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.LoadingPredictorMetadata.subresources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Resource >&
LoadingPredictorMetadata::subresources() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.LoadingPredictorMetadata.subresources)
  return subresources_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace optimization_guide

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::optimization_guide::proto::ResourceType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2floading_5fpredictor_5fmetadata_2eproto
