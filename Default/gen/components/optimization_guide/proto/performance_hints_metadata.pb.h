// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/performance_hints_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fperformance_5fhints_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fperformance_5fhints_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2foptimization_5fguide_2fproto_2fperformance_5fhints_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2foptimization_5fguide_2fproto_2fperformance_5fhints_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace optimization_guide {
namespace proto {
class LinkPerformanceMetadata;
struct LinkPerformanceMetadataDefaultTypeInternal;
extern LinkPerformanceMetadataDefaultTypeInternal _LinkPerformanceMetadata_default_instance_;
class PerformanceHint;
struct PerformanceHintDefaultTypeInternal;
extern PerformanceHintDefaultTypeInternal _PerformanceHint_default_instance_;
class PerformanceHintsMetadata;
struct PerformanceHintsMetadataDefaultTypeInternal;
extern PerformanceHintsMetadataDefaultTypeInternal _PerformanceHintsMetadata_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> ::optimization_guide::proto::LinkPerformanceMetadata* Arena::CreateMaybeMessage<::optimization_guide::proto::LinkPerformanceMetadata>(Arena*);
template<> ::optimization_guide::proto::PerformanceHint* Arena::CreateMaybeMessage<::optimization_guide::proto::PerformanceHint>(Arena*);
template<> ::optimization_guide::proto::PerformanceHintsMetadata* Arena::CreateMaybeMessage<::optimization_guide::proto::PerformanceHintsMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace optimization_guide {
namespace proto {

enum PerformanceClass : int {
  PERFORMANCE_UNKNOWN = 0,
  PERFORMANCE_SLOW = 1,
  PERFORMANCE_FAST = 2,
  PERFORMANCE_NORMAL = 3
};
bool PerformanceClass_IsValid(int value);
constexpr PerformanceClass PerformanceClass_MIN = PERFORMANCE_UNKNOWN;
constexpr PerformanceClass PerformanceClass_MAX = PERFORMANCE_NORMAL;
constexpr int PerformanceClass_ARRAYSIZE = PerformanceClass_MAX + 1;

const std::string& PerformanceClass_Name(PerformanceClass value);
template<typename T>
inline const std::string& PerformanceClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerformanceClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerformanceClass_Name.");
  return PerformanceClass_Name(static_cast<PerformanceClass>(enum_t_value));
}
bool PerformanceClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerformanceClass* value);
// ===================================================================

class PerformanceHint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.PerformanceHint) */ {
 public:
  inline PerformanceHint() : PerformanceHint(nullptr) {}
  ~PerformanceHint() override;
  explicit PROTOBUF_CONSTEXPR PerformanceHint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerformanceHint(const PerformanceHint& from);
  PerformanceHint(PerformanceHint&& from) noexcept
    : PerformanceHint() {
    *this = ::std::move(from);
  }

  inline PerformanceHint& operator=(const PerformanceHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformanceHint& operator=(PerformanceHint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerformanceHint& default_instance() {
    return *internal_default_instance();
  }
  enum KeyCase {
    kWildcardPattern = 1,
    KEY_NOT_SET = 0,
  };

  static inline const PerformanceHint* internal_default_instance() {
    return reinterpret_cast<const PerformanceHint*>(
               &_PerformanceHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerformanceHint& a, PerformanceHint& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerformanceHint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerformanceHint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerformanceHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerformanceHint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerformanceHint& from);
  void MergeFrom(const PerformanceHint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerformanceHint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.PerformanceHint";
  }
  protected:
  explicit PerformanceHint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerformanceClassFieldNumber = 2,
    kWildcardPatternFieldNumber = 1,
  };
  // optional .optimization_guide.proto.PerformanceClass performance_class = 2;
  bool has_performance_class() const;
  private:
  bool _internal_has_performance_class() const;
  public:
  void clear_performance_class();
  ::optimization_guide::proto::PerformanceClass performance_class() const;
  void set_performance_class(::optimization_guide::proto::PerformanceClass value);
  private:
  ::optimization_guide::proto::PerformanceClass _internal_performance_class() const;
  void _internal_set_performance_class(::optimization_guide::proto::PerformanceClass value);
  public:

  // string wildcard_pattern = 1;
  bool has_wildcard_pattern() const;
  private:
  bool _internal_has_wildcard_pattern() const;
  public:
  void clear_wildcard_pattern();
  const std::string& wildcard_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wildcard_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wildcard_pattern();
  PROTOBUF_NODISCARD std::string* release_wildcard_pattern();
  void set_allocated_wildcard_pattern(std::string* wildcard_pattern);
  private:
  const std::string& _internal_wildcard_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wildcard_pattern(const std::string& value);
  std::string* _internal_mutable_wildcard_pattern();
  public:

  void clear_key();
  KeyCase key_case() const;
  // @@protoc_insertion_point(class_scope:optimization_guide.proto.PerformanceHint)
 private:
  class _Internal;
  void set_has_wildcard_pattern();

  inline bool has_key() const;
  inline void clear_has_key();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int performance_class_;
  union KeyUnion {
    constexpr KeyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wildcard_pattern_;
  } key_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fperformance_5fhints_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class PerformanceHintsMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.PerformanceHintsMetadata) */ {
 public:
  inline PerformanceHintsMetadata() : PerformanceHintsMetadata(nullptr) {}
  ~PerformanceHintsMetadata() override;
  explicit PROTOBUF_CONSTEXPR PerformanceHintsMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerformanceHintsMetadata(const PerformanceHintsMetadata& from);
  PerformanceHintsMetadata(PerformanceHintsMetadata&& from) noexcept
    : PerformanceHintsMetadata() {
    *this = ::std::move(from);
  }

  inline PerformanceHintsMetadata& operator=(const PerformanceHintsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformanceHintsMetadata& operator=(PerformanceHintsMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PerformanceHintsMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerformanceHintsMetadata* internal_default_instance() {
    return reinterpret_cast<const PerformanceHintsMetadata*>(
               &_PerformanceHintsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerformanceHintsMetadata& a, PerformanceHintsMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PerformanceHintsMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerformanceHintsMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerformanceHintsMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerformanceHintsMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PerformanceHintsMetadata& from);
  void MergeFrom(const PerformanceHintsMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerformanceHintsMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.PerformanceHintsMetadata";
  }
  protected:
  explicit PerformanceHintsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerformanceHintsFieldNumber = 1,
    kPageHintFieldNumber = 2,
  };
  // repeated .optimization_guide.proto.PerformanceHint performance_hints = 1;
  int performance_hints_size() const;
  private:
  int _internal_performance_hints_size() const;
  public:
  void clear_performance_hints();
  ::optimization_guide::proto::PerformanceHint* mutable_performance_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >*
      mutable_performance_hints();
  private:
  const ::optimization_guide::proto::PerformanceHint& _internal_performance_hints(int index) const;
  ::optimization_guide::proto::PerformanceHint* _internal_add_performance_hints();
  public:
  const ::optimization_guide::proto::PerformanceHint& performance_hints(int index) const;
  ::optimization_guide::proto::PerformanceHint* add_performance_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >&
      performance_hints() const;

  // optional .optimization_guide.proto.PerformanceHint page_hint = 2;
  bool has_page_hint() const;
  private:
  bool _internal_has_page_hint() const;
  public:
  void clear_page_hint();
  const ::optimization_guide::proto::PerformanceHint& page_hint() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::PerformanceHint* release_page_hint();
  ::optimization_guide::proto::PerformanceHint* mutable_page_hint();
  void set_allocated_page_hint(::optimization_guide::proto::PerformanceHint* page_hint);
  private:
  const ::optimization_guide::proto::PerformanceHint& _internal_page_hint() const;
  ::optimization_guide::proto::PerformanceHint* _internal_mutable_page_hint();
  public:
  void unsafe_arena_set_allocated_page_hint(
      ::optimization_guide::proto::PerformanceHint* page_hint);
  ::optimization_guide::proto::PerformanceHint* unsafe_arena_release_page_hint();

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.PerformanceHintsMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint > performance_hints_;
  ::optimization_guide::proto::PerformanceHint* page_hint_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fperformance_5fhints_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class LinkPerformanceMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.LinkPerformanceMetadata) */ {
 public:
  inline LinkPerformanceMetadata() : LinkPerformanceMetadata(nullptr) {}
  ~LinkPerformanceMetadata() override;
  explicit PROTOBUF_CONSTEXPR LinkPerformanceMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkPerformanceMetadata(const LinkPerformanceMetadata& from);
  LinkPerformanceMetadata(LinkPerformanceMetadata&& from) noexcept
    : LinkPerformanceMetadata() {
    *this = ::std::move(from);
  }

  inline LinkPerformanceMetadata& operator=(const LinkPerformanceMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkPerformanceMetadata& operator=(LinkPerformanceMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LinkPerformanceMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkPerformanceMetadata* internal_default_instance() {
    return reinterpret_cast<const LinkPerformanceMetadata*>(
               &_LinkPerformanceMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LinkPerformanceMetadata& a, LinkPerformanceMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LinkPerformanceMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkPerformanceMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkPerformanceMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkPerformanceMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LinkPerformanceMetadata& from);
  void MergeFrom(const LinkPerformanceMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinkPerformanceMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.LinkPerformanceMetadata";
  }
  protected:
  explicit LinkPerformanceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkHintsFieldNumber = 1,
  };
  // repeated .optimization_guide.proto.PerformanceHint link_hints = 1;
  int link_hints_size() const;
  private:
  int _internal_link_hints_size() const;
  public:
  void clear_link_hints();
  ::optimization_guide::proto::PerformanceHint* mutable_link_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >*
      mutable_link_hints();
  private:
  const ::optimization_guide::proto::PerformanceHint& _internal_link_hints(int index) const;
  ::optimization_guide::proto::PerformanceHint* _internal_add_link_hints();
  public:
  const ::optimization_guide::proto::PerformanceHint& link_hints(int index) const;
  ::optimization_guide::proto::PerformanceHint* add_link_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >&
      link_hints() const;

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.LinkPerformanceMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint > link_hints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fperformance_5fhints_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerformanceHint

// string wildcard_pattern = 1;
inline bool PerformanceHint::_internal_has_wildcard_pattern() const {
  return key_case() == kWildcardPattern;
}
inline bool PerformanceHint::has_wildcard_pattern() const {
  return _internal_has_wildcard_pattern();
}
inline void PerformanceHint::set_has_wildcard_pattern() {
  _oneof_case_[0] = kWildcardPattern;
}
inline void PerformanceHint::clear_wildcard_pattern() {
  if (_internal_has_wildcard_pattern()) {
    key_.wildcard_pattern_.Destroy();
    clear_has_key();
  }
}
inline const std::string& PerformanceHint::wildcard_pattern() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PerformanceHint.wildcard_pattern)
  return _internal_wildcard_pattern();
}
template <typename ArgT0, typename... ArgT>
inline void PerformanceHint::set_wildcard_pattern(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_wildcard_pattern()) {
    clear_key();
    set_has_wildcard_pattern();
    key_.wildcard_pattern_.InitDefault();
  }
  key_.wildcard_pattern_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PerformanceHint.wildcard_pattern)
}
inline std::string* PerformanceHint::mutable_wildcard_pattern() {
  std::string* _s = _internal_mutable_wildcard_pattern();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PerformanceHint.wildcard_pattern)
  return _s;
}
inline const std::string& PerformanceHint::_internal_wildcard_pattern() const {
  if (_internal_has_wildcard_pattern()) {
    return key_.wildcard_pattern_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PerformanceHint::_internal_set_wildcard_pattern(const std::string& value) {
  if (!_internal_has_wildcard_pattern()) {
    clear_key();
    set_has_wildcard_pattern();
    key_.wildcard_pattern_.InitDefault();
  }
  key_.wildcard_pattern_.Set(value, GetArenaForAllocation());
}
inline std::string* PerformanceHint::_internal_mutable_wildcard_pattern() {
  if (!_internal_has_wildcard_pattern()) {
    clear_key();
    set_has_wildcard_pattern();
    key_.wildcard_pattern_.InitDefault();
  }
  return key_.wildcard_pattern_.Mutable(      GetArenaForAllocation());
}
inline std::string* PerformanceHint::release_wildcard_pattern() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.PerformanceHint.wildcard_pattern)
  if (_internal_has_wildcard_pattern()) {
    clear_has_key();
    return key_.wildcard_pattern_.Release();
  } else {
    return nullptr;
  }
}
inline void PerformanceHint::set_allocated_wildcard_pattern(std::string* wildcard_pattern) {
  if (has_key()) {
    clear_key();
  }
  if (wildcard_pattern != nullptr) {
    set_has_wildcard_pattern();
    key_.wildcard_pattern_.InitAllocated(wildcard_pattern, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.PerformanceHint.wildcard_pattern)
}

// optional .optimization_guide.proto.PerformanceClass performance_class = 2;
inline bool PerformanceHint::_internal_has_performance_class() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerformanceHint::has_performance_class() const {
  return _internal_has_performance_class();
}
inline void PerformanceHint::clear_performance_class() {
  performance_class_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::optimization_guide::proto::PerformanceClass PerformanceHint::_internal_performance_class() const {
  return static_cast< ::optimization_guide::proto::PerformanceClass >(performance_class_);
}
inline ::optimization_guide::proto::PerformanceClass PerformanceHint::performance_class() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PerformanceHint.performance_class)
  return _internal_performance_class();
}
inline void PerformanceHint::_internal_set_performance_class(::optimization_guide::proto::PerformanceClass value) {
  assert(::optimization_guide::proto::PerformanceClass_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  performance_class_ = value;
}
inline void PerformanceHint::set_performance_class(::optimization_guide::proto::PerformanceClass value) {
  _internal_set_performance_class(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PerformanceHint.performance_class)
}

inline bool PerformanceHint::has_key() const {
  return key_case() != KEY_NOT_SET;
}
inline void PerformanceHint::clear_has_key() {
  _oneof_case_[0] = KEY_NOT_SET;
}
inline PerformanceHint::KeyCase PerformanceHint::key_case() const {
  return PerformanceHint::KeyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PerformanceHintsMetadata

// repeated .optimization_guide.proto.PerformanceHint performance_hints = 1;
inline int PerformanceHintsMetadata::_internal_performance_hints_size() const {
  return performance_hints_.size();
}
inline int PerformanceHintsMetadata::performance_hints_size() const {
  return _internal_performance_hints_size();
}
inline void PerformanceHintsMetadata::clear_performance_hints() {
  performance_hints_.Clear();
}
inline ::optimization_guide::proto::PerformanceHint* PerformanceHintsMetadata::mutable_performance_hints(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PerformanceHintsMetadata.performance_hints)
  return performance_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >*
PerformanceHintsMetadata::mutable_performance_hints() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.PerformanceHintsMetadata.performance_hints)
  return &performance_hints_;
}
inline const ::optimization_guide::proto::PerformanceHint& PerformanceHintsMetadata::_internal_performance_hints(int index) const {
  return performance_hints_.Get(index);
}
inline const ::optimization_guide::proto::PerformanceHint& PerformanceHintsMetadata::performance_hints(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PerformanceHintsMetadata.performance_hints)
  return _internal_performance_hints(index);
}
inline ::optimization_guide::proto::PerformanceHint* PerformanceHintsMetadata::_internal_add_performance_hints() {
  return performance_hints_.Add();
}
inline ::optimization_guide::proto::PerformanceHint* PerformanceHintsMetadata::add_performance_hints() {
  ::optimization_guide::proto::PerformanceHint* _add = _internal_add_performance_hints();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.PerformanceHintsMetadata.performance_hints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >&
PerformanceHintsMetadata::performance_hints() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.PerformanceHintsMetadata.performance_hints)
  return performance_hints_;
}

// optional .optimization_guide.proto.PerformanceHint page_hint = 2;
inline bool PerformanceHintsMetadata::_internal_has_page_hint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || page_hint_ != nullptr);
  return value;
}
inline bool PerformanceHintsMetadata::has_page_hint() const {
  return _internal_has_page_hint();
}
inline void PerformanceHintsMetadata::clear_page_hint() {
  if (page_hint_ != nullptr) page_hint_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::optimization_guide::proto::PerformanceHint& PerformanceHintsMetadata::_internal_page_hint() const {
  const ::optimization_guide::proto::PerformanceHint* p = page_hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimization_guide::proto::PerformanceHint&>(
      ::optimization_guide::proto::_PerformanceHint_default_instance_);
}
inline const ::optimization_guide::proto::PerformanceHint& PerformanceHintsMetadata::page_hint() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PerformanceHintsMetadata.page_hint)
  return _internal_page_hint();
}
inline void PerformanceHintsMetadata::unsafe_arena_set_allocated_page_hint(
    ::optimization_guide::proto::PerformanceHint* page_hint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_hint_);
  }
  page_hint_ = page_hint;
  if (page_hint) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.PerformanceHintsMetadata.page_hint)
}
inline ::optimization_guide::proto::PerformanceHint* PerformanceHintsMetadata::release_page_hint() {
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::PerformanceHint* temp = page_hint_;
  page_hint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimization_guide::proto::PerformanceHint* PerformanceHintsMetadata::unsafe_arena_release_page_hint() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.PerformanceHintsMetadata.page_hint)
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::PerformanceHint* temp = page_hint_;
  page_hint_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::PerformanceHint* PerformanceHintsMetadata::_internal_mutable_page_hint() {
  _has_bits_[0] |= 0x00000001u;
  if (page_hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::PerformanceHint>(GetArenaForAllocation());
    page_hint_ = p;
  }
  return page_hint_;
}
inline ::optimization_guide::proto::PerformanceHint* PerformanceHintsMetadata::mutable_page_hint() {
  ::optimization_guide::proto::PerformanceHint* _msg = _internal_mutable_page_hint();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PerformanceHintsMetadata.page_hint)
  return _msg;
}
inline void PerformanceHintsMetadata::set_allocated_page_hint(::optimization_guide::proto::PerformanceHint* page_hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete page_hint_;
  }
  if (page_hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(page_hint);
    if (message_arena != submessage_arena) {
      page_hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page_hint, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  page_hint_ = page_hint;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.PerformanceHintsMetadata.page_hint)
}

// -------------------------------------------------------------------

// LinkPerformanceMetadata

// repeated .optimization_guide.proto.PerformanceHint link_hints = 1;
inline int LinkPerformanceMetadata::_internal_link_hints_size() const {
  return link_hints_.size();
}
inline int LinkPerformanceMetadata::link_hints_size() const {
  return _internal_link_hints_size();
}
inline void LinkPerformanceMetadata::clear_link_hints() {
  link_hints_.Clear();
}
inline ::optimization_guide::proto::PerformanceHint* LinkPerformanceMetadata::mutable_link_hints(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.LinkPerformanceMetadata.link_hints)
  return link_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >*
LinkPerformanceMetadata::mutable_link_hints() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.LinkPerformanceMetadata.link_hints)
  return &link_hints_;
}
inline const ::optimization_guide::proto::PerformanceHint& LinkPerformanceMetadata::_internal_link_hints(int index) const {
  return link_hints_.Get(index);
}
inline const ::optimization_guide::proto::PerformanceHint& LinkPerformanceMetadata::link_hints(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.LinkPerformanceMetadata.link_hints)
  return _internal_link_hints(index);
}
inline ::optimization_guide::proto::PerformanceHint* LinkPerformanceMetadata::_internal_add_link_hints() {
  return link_hints_.Add();
}
inline ::optimization_guide::proto::PerformanceHint* LinkPerformanceMetadata::add_link_hints() {
  ::optimization_guide::proto::PerformanceHint* _add = _internal_add_link_hints();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.LinkPerformanceMetadata.link_hints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >&
LinkPerformanceMetadata::link_hints() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.LinkPerformanceMetadata.link_hints)
  return link_hints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace optimization_guide

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::optimization_guide::proto::PerformanceClass> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fperformance_5fhints_5fmetadata_2eproto
