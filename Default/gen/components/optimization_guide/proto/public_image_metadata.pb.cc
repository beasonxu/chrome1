// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/public_image_metadata.proto

#include "components/optimization_guide/proto/public_image_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace optimization_guide {
namespace proto {
PROTOBUF_CONSTEXPR PublicImageMetadata::PublicImageMetadata(
    ::_pbi::ConstantInitialized)
  : url_(){}
struct PublicImageMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicImageMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicImageMetadataDefaultTypeInternal() {}
  union {
    PublicImageMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicImageMetadataDefaultTypeInternal _PublicImageMetadata_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
namespace optimization_guide {
namespace proto {

// ===================================================================

class PublicImageMetadata::_Internal {
 public:
};

PublicImageMetadata::PublicImageMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  url_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.PublicImageMetadata)
}
PublicImageMetadata::PublicImageMetadata(const PublicImageMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      url_(from.url_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PublicImageMetadata)
}

inline void PublicImageMetadata::SharedCtor() {
}

PublicImageMetadata::~PublicImageMetadata() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PublicImageMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicImageMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublicImageMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublicImageMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PublicImageMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PublicImageMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_url();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicImageMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.PublicImageMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string url = 1;
  for (int i = 0, n = this->_internal_url_size(); i < n; i++) {
    const auto& s = this->_internal_url(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.PublicImageMetadata)
  return target;
}

size_t PublicImageMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PublicImageMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string url = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(url_.size());
  for (int i = 0, n = url_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      url_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicImageMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PublicImageMetadata*>(
      &from));
}

void PublicImageMetadata::MergeFrom(const PublicImageMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PublicImageMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  url_.MergeFrom(from.url_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PublicImageMetadata::CopyFrom(const PublicImageMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PublicImageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicImageMetadata::IsInitialized() const {
  return true;
}

void PublicImageMetadata::InternalSwap(PublicImageMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  url_.InternalSwap(&other->url_);
}

std::string PublicImageMetadata::GetTypeName() const {
  return "optimization_guide.proto.PublicImageMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PublicImageMetadata*
Arena::CreateMaybeMessage< ::optimization_guide::proto::PublicImageMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::PublicImageMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
