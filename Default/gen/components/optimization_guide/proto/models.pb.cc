// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/models.proto

#include "components/optimization_guide/proto/models.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace optimization_guide {
namespace proto {
PROTOBUF_CONSTEXPR Model::Model(
    ::_pbi::ConstantInitialized)
  : threshold_(nullptr)
  , _oneof_case_{}{}
struct ModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelDefaultTypeInternal() {}
  union {
    Model _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelDefaultTypeInternal _Model_default_instance_;
PROTOBUF_CONSTEXPR Ensemble_Member::Ensemble_Member(
    ::_pbi::ConstantInitialized)
  : submodel_(nullptr){}
struct Ensemble_MemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ensemble_MemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ensemble_MemberDefaultTypeInternal() {}
  union {
    Ensemble_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ensemble_MemberDefaultTypeInternal _Ensemble_Member_default_instance_;
PROTOBUF_CONSTEXPR Ensemble::Ensemble(
    ::_pbi::ConstantInitialized)
  : members_(){}
struct EnsembleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnsembleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnsembleDefaultTypeInternal() {}
  union {
    Ensemble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnsembleDefaultTypeInternal _Ensemble_default_instance_;
PROTOBUF_CONSTEXPR DecisionTree::DecisionTree(
    ::_pbi::ConstantInitialized)
  : nodes_()
  , weight_(0){}
struct DecisionTreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecisionTreeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecisionTreeDefaultTypeInternal() {}
  union {
    DecisionTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecisionTreeDefaultTypeInternal _DecisionTree_default_instance_;
PROTOBUF_CONSTEXPR TreeNode::TreeNode(
    ::_pbi::ConstantInitialized)
  : node_id_(nullptr)
  , depth_(nullptr)
  , subtree_size_(nullptr)
  , _oneof_case_{}{}
struct TreeNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TreeNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TreeNodeDefaultTypeInternal() {}
  union {
    TreeNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TreeNodeDefaultTypeInternal _TreeNode_default_instance_;
PROTOBUF_CONSTEXPR BinaryNode::BinaryNode(
    ::_pbi::ConstantInitialized)
  : left_child_id_(nullptr)
  , right_child_id_(nullptr)
  , inequality_left_child_test_(nullptr){}
struct BinaryNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryNodeDefaultTypeInternal() {}
  union {
    BinaryNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryNodeDefaultTypeInternal _BinaryNode_default_instance_;
PROTOBUF_CONSTEXPR Vector::Vector(
    ::_pbi::ConstantInitialized)
  : value_(){}
struct VectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorDefaultTypeInternal() {}
  union {
    Vector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorDefaultTypeInternal _Vector_default_instance_;
PROTOBUF_CONSTEXPR Leaf::Leaf(
    ::_pbi::ConstantInitialized)
  : vector_(nullptr){}
struct LeafDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeafDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeafDefaultTypeInternal() {}
  union {
    Leaf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeafDefaultTypeInternal _Leaf_default_instance_;
PROTOBUF_CONSTEXPR FeatureId::FeatureId(
    ::_pbi::ConstantInitialized)
  : id_(nullptr){}
struct FeatureIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureIdDefaultTypeInternal() {}
  union {
    FeatureId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureIdDefaultTypeInternal _FeatureId_default_instance_;
PROTOBUF_CONSTEXPR InequalityTest::InequalityTest(
    ::_pbi::ConstantInitialized)
  : feature_id_(nullptr)
  , threshold_(nullptr)
  , type_(0)
{}
struct InequalityTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InequalityTestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InequalityTestDefaultTypeInternal() {}
  union {
    InequalityTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InequalityTestDefaultTypeInternal _InequalityTest_default_instance_;
PROTOBUF_CONSTEXPR Value::Value(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;
PROTOBUF_CONSTEXPR Int32Value::Int32Value(
    ::_pbi::ConstantInitialized)
  : value_(0){}
struct Int32ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int32ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int32ValueDefaultTypeInternal() {}
  union {
    Int32Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
PROTOBUF_CONSTEXPR DoubleValue::DoubleValue(
    ::_pbi::ConstantInitialized)
  : value_(0){}
struct DoubleValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleValueDefaultTypeInternal() {}
  union {
    DoubleValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleValueDefaultTypeInternal _DoubleValue_default_instance_;
PROTOBUF_CONSTEXPR GetModelsRequest::GetModelsRequest(
    ::_pbi::ConstantInitialized)
  : requested_models_()
  , locale_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_context_(0)
{}
struct GetModelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelsRequestDefaultTypeInternal() {}
  union {
    GetModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelsRequestDefaultTypeInternal _GetModelsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetModelsResponse::GetModelsResponse(
    ::_pbi::ConstantInitialized)
  : models_()
  , host_model_features_(){}
struct GetModelsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelsResponseDefaultTypeInternal() {}
  union {
    GetModelsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelsResponseDefaultTypeInternal _GetModelsResponse_default_instance_;
PROTOBUF_CONSTEXPR PredictionModel::PredictionModel(
    ::_pbi::ConstantInitialized)
  : model_info_(nullptr)
  , model_(nullptr){}
struct PredictionModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictionModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictionModelDefaultTypeInternal() {}
  union {
    PredictionModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictionModelDefaultTypeInternal _PredictionModel_default_instance_;
PROTOBUF_CONSTEXPR AdditionalModelFile::AdditionalModelFile(
    ::_pbi::ConstantInitialized)
  : file_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AdditionalModelFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdditionalModelFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdditionalModelFileDefaultTypeInternal() {}
  union {
    AdditionalModelFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdditionalModelFileDefaultTypeInternal _AdditionalModelFile_default_instance_;
PROTOBUF_CONSTEXPR ModelInfo::ModelInfo(
    ::_pbi::ConstantInitialized)
  : supported_model_engine_versions_()
  , supported_host_model_features_()
  , additional_files_()
  , model_metadata_(nullptr)
  , valid_duration_(nullptr)
  , version_(int64_t{0})
  , optimization_target_(0)

  , keep_beyond_valid_duration_(false){}
struct ModelInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelInfoDefaultTypeInternal() {}
  union {
    ModelInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelInfoDefaultTypeInternal _ModelInfo_default_instance_;
PROTOBUF_CONSTEXPR HostModelFeatures::HostModelFeatures(
    ::_pbi::ConstantInitialized)
  : model_features_()
  , host_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct HostModelFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostModelFeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostModelFeaturesDefaultTypeInternal() {}
  union {
    HostModelFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostModelFeaturesDefaultTypeInternal _HostModelFeatures_default_instance_;
PROTOBUF_CONSTEXPR ModelFeature::ModelFeature(
    ::_pbi::ConstantInitialized)
  : feature_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , _oneof_case_{}{}
struct ModelFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelFeatureDefaultTypeInternal() {}
  union {
    ModelFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelFeatureDefaultTypeInternal _ModelFeature_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
namespace optimization_guide {
namespace proto {
bool BinaryNode_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BinaryNode_Direction_strings[2] = {};

static const char BinaryNode_Direction_names[] =
  "LEFT"
  "RIGHT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BinaryNode_Direction_entries[] = {
  { {BinaryNode_Direction_names + 0, 4}, 0 },
  { {BinaryNode_Direction_names + 4, 5}, 1 },
};

static const int BinaryNode_Direction_entries_by_number[] = {
  0, // 0 -> LEFT
  1, // 1 -> RIGHT
};

const std::string& BinaryNode_Direction_Name(
    BinaryNode_Direction value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BinaryNode_Direction_entries,
          BinaryNode_Direction_entries_by_number,
          2, BinaryNode_Direction_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BinaryNode_Direction_entries,
      BinaryNode_Direction_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BinaryNode_Direction_strings[idx].get();
}
bool BinaryNode_Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BinaryNode_Direction* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BinaryNode_Direction_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<BinaryNode_Direction>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BinaryNode_Direction BinaryNode::LEFT;
constexpr BinaryNode_Direction BinaryNode::RIGHT;
constexpr BinaryNode_Direction BinaryNode::Direction_MIN;
constexpr BinaryNode_Direction BinaryNode::Direction_MAX;
constexpr int BinaryNode::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool InequalityTest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> InequalityTest_Type_strings[4] = {};

static const char InequalityTest_Type_names[] =
  "GREATER_OR_EQUAL"
  "GREATER_THAN"
  "LESS_OR_EQUAL"
  "LESS_THAN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry InequalityTest_Type_entries[] = {
  { {InequalityTest_Type_names + 0, 16}, 2 },
  { {InequalityTest_Type_names + 16, 12}, 3 },
  { {InequalityTest_Type_names + 28, 13}, 0 },
  { {InequalityTest_Type_names + 41, 9}, 1 },
};

static const int InequalityTest_Type_entries_by_number[] = {
  2, // 0 -> LESS_OR_EQUAL
  3, // 1 -> LESS_THAN
  0, // 2 -> GREATER_OR_EQUAL
  1, // 3 -> GREATER_THAN
};

const std::string& InequalityTest_Type_Name(
    InequalityTest_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          InequalityTest_Type_entries,
          InequalityTest_Type_entries_by_number,
          4, InequalityTest_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      InequalityTest_Type_entries,
      InequalityTest_Type_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     InequalityTest_Type_strings[idx].get();
}
bool InequalityTest_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InequalityTest_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      InequalityTest_Type_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<InequalityTest_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr InequalityTest_Type InequalityTest::LESS_OR_EQUAL;
constexpr InequalityTest_Type InequalityTest::LESS_THAN;
constexpr InequalityTest_Type InequalityTest::GREATER_OR_EQUAL;
constexpr InequalityTest_Type InequalityTest::GREATER_THAN;
constexpr InequalityTest_Type InequalityTest::Type_MIN;
constexpr InequalityTest_Type InequalityTest::Type_MAX;
constexpr int InequalityTest::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool OptimizationTarget_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OptimizationTarget_strings[20] = {};

static const char OptimizationTarget_names[] =
  "OPTIMIZATION_TARGET_AUTOFILL_ASSISTANT"
  "OPTIMIZATION_TARGET_CONTEXTUAL_PAGE_ACTION_PRICE_TRACKING"
  "OPTIMIZATION_TARGET_LANGUAGE_DETECTION"
  "OPTIMIZATION_TARGET_MODEL_VALIDATION"
  "OPTIMIZATION_TARGET_NOTIFICATION_PERMISSION_PREDICTIONS"
  "OPTIMIZATION_TARGET_PAGE_ENTITIES"
  "OPTIMIZATION_TARGET_PAGE_TOPICS"
  "OPTIMIZATION_TARGET_PAGE_TOPICS_V2"
  "OPTIMIZATION_TARGET_PAGE_VISIBILITY"
  "OPTIMIZATION_TARGET_PAINFUL_PAGE_LOAD"
  "OPTIMIZATION_TARGET_SEGMENTATION_CHROME_LOW_USER_ENGAGEMENT"
  "OPTIMIZATION_TARGET_SEGMENTATION_CHROME_START_ANDROID"
  "OPTIMIZATION_TARGET_SEGMENTATION_DUMMY"
  "OPTIMIZATION_TARGET_SEGMENTATION_FEED_USER"
  "OPTIMIZATION_TARGET_SEGMENTATION_NEW_TAB"
  "OPTIMIZATION_TARGET_SEGMENTATION_QUERY_TILES"
  "OPTIMIZATION_TARGET_SEGMENTATION_SHARE"
  "OPTIMIZATION_TARGET_SEGMENTATION_VOICE"
  "OPTIMIZATION_TARGET_TEXT_CLASSIFIER"
  "OPTIMIZATION_TARGET_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OptimizationTarget_entries[] = {
  { {OptimizationTarget_names + 0, 38}, 14 },
  { {OptimizationTarget_names + 38, 57}, 18 },
  { {OptimizationTarget_names + 95, 38}, 2 },
  { {OptimizationTarget_names + 133, 36}, 7 },
  { {OptimizationTarget_names + 169, 55}, 9 },
  { {OptimizationTarget_names + 224, 33}, 8 },
  { {OptimizationTarget_names + 257, 31}, 3 },
  { {OptimizationTarget_names + 288, 34}, 15 },
  { {OptimizationTarget_names + 322, 35}, 13 },
  { {OptimizationTarget_names + 357, 37}, 1 },
  { {OptimizationTarget_names + 394, 59}, 16 },
  { {OptimizationTarget_names + 453, 53}, 11 },
  { {OptimizationTarget_names + 506, 38}, 10 },
  { {OptimizationTarget_names + 544, 42}, 17 },
  { {OptimizationTarget_names + 586, 40}, 4 },
  { {OptimizationTarget_names + 626, 44}, 12 },
  { {OptimizationTarget_names + 670, 38}, 5 },
  { {OptimizationTarget_names + 708, 38}, 6 },
  { {OptimizationTarget_names + 746, 35}, 19 },
  { {OptimizationTarget_names + 781, 27}, 0 },
};

static const int OptimizationTarget_entries_by_number[] = {
  19, // 0 -> OPTIMIZATION_TARGET_UNKNOWN
  9, // 1 -> OPTIMIZATION_TARGET_PAINFUL_PAGE_LOAD
  2, // 2 -> OPTIMIZATION_TARGET_LANGUAGE_DETECTION
  6, // 3 -> OPTIMIZATION_TARGET_PAGE_TOPICS
  14, // 4 -> OPTIMIZATION_TARGET_SEGMENTATION_NEW_TAB
  16, // 5 -> OPTIMIZATION_TARGET_SEGMENTATION_SHARE
  17, // 6 -> OPTIMIZATION_TARGET_SEGMENTATION_VOICE
  3, // 7 -> OPTIMIZATION_TARGET_MODEL_VALIDATION
  5, // 8 -> OPTIMIZATION_TARGET_PAGE_ENTITIES
  4, // 9 -> OPTIMIZATION_TARGET_NOTIFICATION_PERMISSION_PREDICTIONS
  12, // 10 -> OPTIMIZATION_TARGET_SEGMENTATION_DUMMY
  11, // 11 -> OPTIMIZATION_TARGET_SEGMENTATION_CHROME_START_ANDROID
  15, // 12 -> OPTIMIZATION_TARGET_SEGMENTATION_QUERY_TILES
  8, // 13 -> OPTIMIZATION_TARGET_PAGE_VISIBILITY
  0, // 14 -> OPTIMIZATION_TARGET_AUTOFILL_ASSISTANT
  7, // 15 -> OPTIMIZATION_TARGET_PAGE_TOPICS_V2
  10, // 16 -> OPTIMIZATION_TARGET_SEGMENTATION_CHROME_LOW_USER_ENGAGEMENT
  13, // 17 -> OPTIMIZATION_TARGET_SEGMENTATION_FEED_USER
  1, // 18 -> OPTIMIZATION_TARGET_CONTEXTUAL_PAGE_ACTION_PRICE_TRACKING
  18, // 19 -> OPTIMIZATION_TARGET_TEXT_CLASSIFIER
};

const std::string& OptimizationTarget_Name(
    OptimizationTarget value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OptimizationTarget_entries,
          OptimizationTarget_entries_by_number,
          20, OptimizationTarget_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OptimizationTarget_entries,
      OptimizationTarget_entries_by_number,
      20, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OptimizationTarget_strings[idx].get();
}
bool OptimizationTarget_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OptimizationTarget* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OptimizationTarget_entries, 20, name, &int_value);
  if (success) {
    *value = static_cast<OptimizationTarget>(int_value);
  }
  return success;
}
bool ModelEngineVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ModelEngineVersion_strings[11] = {};

static const char ModelEngineVersion_names[] =
  "MODEL_ENGINE_VERSION_DECISION_TREE"
  "MODEL_ENGINE_VERSION_TFLITE_2_10"
  "MODEL_ENGINE_VERSION_TFLITE_2_11"
  "MODEL_ENGINE_VERSION_TFLITE_2_3_0"
  "MODEL_ENGINE_VERSION_TFLITE_2_3_0_1"
  "MODEL_ENGINE_VERSION_TFLITE_2_4"
  "MODEL_ENGINE_VERSION_TFLITE_2_7"
  "MODEL_ENGINE_VERSION_TFLITE_2_8"
  "MODEL_ENGINE_VERSION_TFLITE_2_9"
  "MODEL_ENGINE_VERSION_TFLITE_2_9_0_1"
  "MODEL_ENGINE_VERSION_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ModelEngineVersion_entries[] = {
  { {ModelEngineVersion_names + 0, 34}, 1 },
  { {ModelEngineVersion_names + 34, 32}, 9 },
  { {ModelEngineVersion_names + 66, 32}, 10 },
  { {ModelEngineVersion_names + 98, 33}, 2 },
  { {ModelEngineVersion_names + 131, 35}, 3 },
  { {ModelEngineVersion_names + 166, 31}, 4 },
  { {ModelEngineVersion_names + 197, 31}, 5 },
  { {ModelEngineVersion_names + 228, 31}, 6 },
  { {ModelEngineVersion_names + 259, 31}, 7 },
  { {ModelEngineVersion_names + 290, 35}, 8 },
  { {ModelEngineVersion_names + 325, 28}, 0 },
};

static const int ModelEngineVersion_entries_by_number[] = {
  10, // 0 -> MODEL_ENGINE_VERSION_UNKNOWN
  0, // 1 -> MODEL_ENGINE_VERSION_DECISION_TREE
  3, // 2 -> MODEL_ENGINE_VERSION_TFLITE_2_3_0
  4, // 3 -> MODEL_ENGINE_VERSION_TFLITE_2_3_0_1
  5, // 4 -> MODEL_ENGINE_VERSION_TFLITE_2_4
  6, // 5 -> MODEL_ENGINE_VERSION_TFLITE_2_7
  7, // 6 -> MODEL_ENGINE_VERSION_TFLITE_2_8
  8, // 7 -> MODEL_ENGINE_VERSION_TFLITE_2_9
  9, // 8 -> MODEL_ENGINE_VERSION_TFLITE_2_9_0_1
  1, // 9 -> MODEL_ENGINE_VERSION_TFLITE_2_10
  2, // 10 -> MODEL_ENGINE_VERSION_TFLITE_2_11
};

const std::string& ModelEngineVersion_Name(
    ModelEngineVersion value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ModelEngineVersion_entries,
          ModelEngineVersion_entries_by_number,
          11, ModelEngineVersion_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ModelEngineVersion_entries,
      ModelEngineVersion_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ModelEngineVersion_strings[idx].get();
}
bool ModelEngineVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModelEngineVersion* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ModelEngineVersion_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<ModelEngineVersion>(int_value);
  }
  return success;
}

// ===================================================================

class Model::_Internal {
 public:
  using HasBits = decltype(std::declval<Model>()._has_bits_);
  static const ::optimization_guide::proto::DecisionTree& decision_tree(const Model* msg);
  static const ::optimization_guide::proto::Ensemble& ensemble(const Model* msg);
  static const ::optimization_guide::proto::DoubleValue& threshold(const Model* msg);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::optimization_guide::proto::DecisionTree&
Model::_Internal::decision_tree(const Model* msg) {
  return *msg->model_.decision_tree_;
}
const ::optimization_guide::proto::Ensemble&
Model::_Internal::ensemble(const Model* msg) {
  return *msg->model_.ensemble_;
}
const ::optimization_guide::proto::DoubleValue&
Model::_Internal::threshold(const Model* msg) {
  return *msg->threshold_;
}
void Model::set_allocated_decision_tree(::optimization_guide::proto::DecisionTree* decision_tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_model();
  if (decision_tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(decision_tree);
    if (message_arena != submessage_arena) {
      decision_tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decision_tree, submessage_arena);
    }
    set_has_decision_tree();
    model_.decision_tree_ = decision_tree;
  }
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.Model.decision_tree)
}
void Model::set_allocated_ensemble(::optimization_guide::proto::Ensemble* ensemble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_model();
  if (ensemble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ensemble);
    if (message_arena != submessage_arena) {
      ensemble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ensemble, submessage_arena);
    }
    set_has_ensemble();
    model_.ensemble_ = ensemble;
  }
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.Model.ensemble)
}
Model::Model(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_threshold()) {
    threshold_ = new ::optimization_guide::proto::DoubleValue(*from.threshold_);
  } else {
    threshold_ = nullptr;
  }
  clear_has_model();
  switch (from.model_case()) {
    case kDecisionTree: {
      _internal_mutable_decision_tree()->::optimization_guide::proto::DecisionTree::MergeFrom(from._internal_decision_tree());
      break;
    }
    case kEnsemble: {
      _internal_mutable_ensemble()->::optimization_guide::proto::Ensemble::MergeFrom(from._internal_ensemble());
      break;
    }
    case kDownloadUrl: {
      _internal_set_download_url(from._internal_download_url());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.Model)
}

inline void Model::SharedCtor() {
threshold_ = nullptr;
clear_has_model();
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.Model)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Model::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete threshold_;
  if (has_model()) {
    clear_model();
  }
}

void Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Model::clear_model() {
// @@protoc_insertion_point(one_of_clear_start:optimization_guide.proto.Model)
  switch (model_case()) {
    case kDecisionTree: {
      if (GetArenaForAllocation() == nullptr) {
        delete model_.decision_tree_;
      }
      break;
    }
    case kEnsemble: {
      if (GetArenaForAllocation() == nullptr) {
        delete model_.ensemble_;
      }
      break;
    }
    case kDownloadUrl: {
      model_.download_url_.Destroy();
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODEL_NOT_SET;
}


void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.Model)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(threshold_ != nullptr);
    threshold_->Clear();
  }
  clear_model();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Model::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .optimization_guide.proto.DecisionTree decision_tree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_decision_tree(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .optimization_guide.proto.Ensemble ensemble = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ensemble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string download_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_download_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.DoubleValue threshold = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_threshold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Model::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.Model)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (model_case()) {
    case kDecisionTree: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::decision_tree(this),
          _Internal::decision_tree(this).GetCachedSize(), target, stream);
      break;
    }
    case kEnsemble: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::ensemble(this),
          _Internal::ensemble(this).GetCachedSize(), target, stream);
      break;
    }
    case kDownloadUrl: {
      target = stream->WriteStringMaybeAliased(
          5, this->_internal_download_url(), target);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.DoubleValue threshold = 123;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(123, _Internal::threshold(this),
        _Internal::threshold(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.Model)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .optimization_guide.proto.DoubleValue threshold = 123;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *threshold_);
  }

  switch (model_case()) {
    // .optimization_guide.proto.DecisionTree decision_tree = 1;
    case kDecisionTree: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.decision_tree_);
      break;
    }
    // .optimization_guide.proto.Ensemble ensemble = 2;
    case kEnsemble: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.ensemble_);
      break;
    }
    // string download_url = 5;
    case kDownloadUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_download_url());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Model::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Model*>(
      &from));
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.Model)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_threshold()) {
    _internal_mutable_threshold()->::optimization_guide::proto::DoubleValue::MergeFrom(from._internal_threshold());
  }
  switch (from.model_case()) {
    case kDecisionTree: {
      _internal_mutable_decision_tree()->::optimization_guide::proto::DecisionTree::MergeFrom(from._internal_decision_tree());
      break;
    }
    case kEnsemble: {
      _internal_mutable_ensemble()->::optimization_guide::proto::Ensemble::MergeFrom(from._internal_ensemble());
      break;
    }
    case kDownloadUrl: {
      _internal_set_download_url(from._internal_download_url());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(threshold_, other->threshold_);
  swap(model_, other->model_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Model::GetTypeName() const {
  return "optimization_guide.proto.Model";
}


// ===================================================================

class Ensemble_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<Ensemble_Member>()._has_bits_);
  static const ::optimization_guide::proto::Model& submodel(const Ensemble_Member* msg);
  static void set_has_submodel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::optimization_guide::proto::Model&
Ensemble_Member::_Internal::submodel(const Ensemble_Member* msg) {
  return *msg->submodel_;
}
Ensemble_Member::Ensemble_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.Ensemble.Member)
}
Ensemble_Member::Ensemble_Member(const Ensemble_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_submodel()) {
    submodel_ = new ::optimization_guide::proto::Model(*from.submodel_);
  } else {
    submodel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.Ensemble.Member)
}

inline void Ensemble_Member::SharedCtor() {
submodel_ = nullptr;
}

Ensemble_Member::~Ensemble_Member() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.Ensemble.Member)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ensemble_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete submodel_;
}

void Ensemble_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ensemble_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.Ensemble.Member)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(submodel_ != nullptr);
    submodel_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Ensemble_Member::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .optimization_guide.proto.Model submodel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submodel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ensemble_Member::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.Ensemble.Member)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.Model submodel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::submodel(this),
        _Internal::submodel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.Ensemble.Member)
  return target;
}

size_t Ensemble_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.Ensemble.Member)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .optimization_guide.proto.Model submodel = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submodel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ensemble_Member::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Ensemble_Member*>(
      &from));
}

void Ensemble_Member::MergeFrom(const Ensemble_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.Ensemble.Member)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_submodel()) {
    _internal_mutable_submodel()->::optimization_guide::proto::Model::MergeFrom(from._internal_submodel());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Ensemble_Member::CopyFrom(const Ensemble_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.Ensemble.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ensemble_Member::IsInitialized() const {
  return true;
}

void Ensemble_Member::InternalSwap(Ensemble_Member* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(submodel_, other->submodel_);
}

std::string Ensemble_Member::GetTypeName() const {
  return "optimization_guide.proto.Ensemble.Member";
}


// ===================================================================

class Ensemble::_Internal {
 public:
};

Ensemble::Ensemble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.Ensemble)
}
Ensemble::Ensemble(const Ensemble& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.Ensemble)
}

inline void Ensemble::SharedCtor() {
}

Ensemble::~Ensemble() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.Ensemble)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ensemble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ensemble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ensemble::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.Ensemble)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Ensemble::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .optimization_guide.proto.Ensemble.Member members = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ensemble::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.Ensemble)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.Ensemble.Member members = 100;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(100, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.Ensemble)
  return target;
}

size_t Ensemble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.Ensemble)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.Ensemble.Member members = 100;
  total_size += 2UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ensemble::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Ensemble*>(
      &from));
}

void Ensemble::MergeFrom(const Ensemble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.Ensemble)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Ensemble::CopyFrom(const Ensemble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.Ensemble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ensemble::IsInitialized() const {
  return true;
}

void Ensemble::InternalSwap(Ensemble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
}

std::string Ensemble::GetTypeName() const {
  return "optimization_guide.proto.Ensemble";
}


// ===================================================================

class DecisionTree::_Internal {
 public:
  using HasBits = decltype(std::declval<DecisionTree>()._has_bits_);
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DecisionTree::DecisionTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  nodes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.DecisionTree)
}
DecisionTree::DecisionTree(const DecisionTree& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.DecisionTree)
}

inline void DecisionTree::SharedCtor() {
weight_ = 0;
}

DecisionTree::~DecisionTree() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.DecisionTree)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DecisionTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DecisionTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecisionTree::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.DecisionTree)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DecisionTree::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .optimization_guide.proto.TreeNode nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DecisionTree::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.DecisionTree)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.TreeNode nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional float weight = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.DecisionTree)
  return target;
}

size_t DecisionTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.DecisionTree)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.TreeNode nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional float weight = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionTree::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DecisionTree*>(
      &from));
}

void DecisionTree::MergeFrom(const DecisionTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.DecisionTree)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from._internal_has_weight()) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DecisionTree::CopyFrom(const DecisionTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.DecisionTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTree::IsInitialized() const {
  return true;
}

void DecisionTree::InternalSwap(DecisionTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nodes_.InternalSwap(&other->nodes_);
  swap(weight_, other->weight_);
}

std::string DecisionTree::GetTypeName() const {
  return "optimization_guide.proto.DecisionTree";
}


// ===================================================================

class TreeNode::_Internal {
 public:
  using HasBits = decltype(std::declval<TreeNode>()._has_bits_);
  static const ::optimization_guide::proto::Int32Value& node_id(const TreeNode* msg);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::optimization_guide::proto::Int32Value& depth(const TreeNode* msg);
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::optimization_guide::proto::Int32Value& subtree_size(const TreeNode* msg);
  static void set_has_subtree_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::optimization_guide::proto::BinaryNode& binary_node(const TreeNode* msg);
  static const ::optimization_guide::proto::Leaf& leaf(const TreeNode* msg);
};

const ::optimization_guide::proto::Int32Value&
TreeNode::_Internal::node_id(const TreeNode* msg) {
  return *msg->node_id_;
}
const ::optimization_guide::proto::Int32Value&
TreeNode::_Internal::depth(const TreeNode* msg) {
  return *msg->depth_;
}
const ::optimization_guide::proto::Int32Value&
TreeNode::_Internal::subtree_size(const TreeNode* msg) {
  return *msg->subtree_size_;
}
const ::optimization_guide::proto::BinaryNode&
TreeNode::_Internal::binary_node(const TreeNode* msg) {
  return *msg->node_type_.binary_node_;
}
const ::optimization_guide::proto::Leaf&
TreeNode::_Internal::leaf(const TreeNode* msg) {
  return *msg->node_type_.leaf_;
}
void TreeNode::set_allocated_binary_node(::optimization_guide::proto::BinaryNode* binary_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node_type();
  if (binary_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(binary_node);
    if (message_arena != submessage_arena) {
      binary_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary_node, submessage_arena);
    }
    set_has_binary_node();
    node_type_.binary_node_ = binary_node;
  }
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.TreeNode.binary_node)
}
void TreeNode::set_allocated_leaf(::optimization_guide::proto::Leaf* leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node_type();
  if (leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leaf);
    if (message_arena != submessage_arena) {
      leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    set_has_leaf();
    node_type_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.TreeNode.leaf)
}
TreeNode::TreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.TreeNode)
}
TreeNode::TreeNode(const TreeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_node_id()) {
    node_id_ = new ::optimization_guide::proto::Int32Value(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  if (from._internal_has_depth()) {
    depth_ = new ::optimization_guide::proto::Int32Value(*from.depth_);
  } else {
    depth_ = nullptr;
  }
  if (from._internal_has_subtree_size()) {
    subtree_size_ = new ::optimization_guide::proto::Int32Value(*from.subtree_size_);
  } else {
    subtree_size_ = nullptr;
  }
  clear_has_node_type();
  switch (from.node_type_case()) {
    case kBinaryNode: {
      _internal_mutable_binary_node()->::optimization_guide::proto::BinaryNode::MergeFrom(from._internal_binary_node());
      break;
    }
    case kLeaf: {
      _internal_mutable_leaf()->::optimization_guide::proto::Leaf::MergeFrom(from._internal_leaf());
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.TreeNode)
}

inline void TreeNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subtree_size_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(subtree_size_));
clear_has_node_type();
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.TreeNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TreeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete depth_;
  if (this != internal_default_instance()) delete subtree_size_;
  if (has_node_type()) {
    clear_node_type();
  }
}

void TreeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TreeNode::clear_node_type() {
// @@protoc_insertion_point(one_of_clear_start:optimization_guide.proto.TreeNode)
  switch (node_type_case()) {
    case kBinaryNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_type_.binary_node_;
      }
      break;
    }
    case kLeaf: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_type_.leaf_;
      }
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_TYPE_NOT_SET;
}


void TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.TreeNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(node_id_ != nullptr);
      node_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(depth_ != nullptr);
      depth_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(subtree_size_ != nullptr);
      subtree_size_->Clear();
    }
  }
  clear_node_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TreeNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .optimization_guide.proto.Int32Value node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.Int32Value depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.Int32Value subtree_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_subtree_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .optimization_guide.proto.BinaryNode binary_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .optimization_guide.proto.Leaf leaf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TreeNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.TreeNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.Int32Value node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::node_id(this),
        _Internal::node_id(this).GetCachedSize(), target, stream);
  }

  // optional .optimization_guide.proto.Int32Value depth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::depth(this),
        _Internal::depth(this).GetCachedSize(), target, stream);
  }

  // optional .optimization_guide.proto.Int32Value subtree_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::subtree_size(this),
        _Internal::subtree_size(this).GetCachedSize(), target, stream);
  }

  switch (node_type_case()) {
    case kBinaryNode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::binary_node(this),
          _Internal::binary_node(this).GetCachedSize(), target, stream);
      break;
    }
    case kLeaf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::leaf(this),
          _Internal::leaf(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.TreeNode)
  return target;
}

size_t TreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.TreeNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .optimization_guide.proto.Int32Value node_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_id_);
    }

    // optional .optimization_guide.proto.Int32Value depth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *depth_);
    }

    // optional .optimization_guide.proto.Int32Value subtree_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subtree_size_);
    }

  }
  switch (node_type_case()) {
    // .optimization_guide.proto.BinaryNode binary_node = 4;
    case kBinaryNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_type_.binary_node_);
      break;
    }
    // .optimization_guide.proto.Leaf leaf = 5;
    case kLeaf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_type_.leaf_);
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeNode::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TreeNode*>(
      &from));
}

void TreeNode::MergeFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_node_id()->::optimization_guide::proto::Int32Value::MergeFrom(from._internal_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_depth()->::optimization_guide::proto::Int32Value::MergeFrom(from._internal_depth());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_subtree_size()->::optimization_guide::proto::Int32Value::MergeFrom(from._internal_subtree_size());
    }
  }
  switch (from.node_type_case()) {
    case kBinaryNode: {
      _internal_mutable_binary_node()->::optimization_guide::proto::BinaryNode::MergeFrom(from._internal_binary_node());
      break;
    }
    case kLeaf: {
      _internal_mutable_leaf()->::optimization_guide::proto::Leaf::MergeFrom(from._internal_leaf());
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TreeNode::CopyFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {
  return true;
}

void TreeNode::InternalSwap(TreeNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreeNode, subtree_size_)
      + sizeof(TreeNode::subtree_size_)
      - PROTOBUF_FIELD_OFFSET(TreeNode, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
  swap(node_type_, other->node_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string TreeNode::GetTypeName() const {
  return "optimization_guide.proto.TreeNode";
}


// ===================================================================

class BinaryNode::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryNode>()._has_bits_);
  static const ::optimization_guide::proto::Int32Value& left_child_id(const BinaryNode* msg);
  static void set_has_left_child_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::optimization_guide::proto::Int32Value& right_child_id(const BinaryNode* msg);
  static void set_has_right_child_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::optimization_guide::proto::InequalityTest& inequality_left_child_test(const BinaryNode* msg);
  static void set_has_inequality_left_child_test(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::optimization_guide::proto::Int32Value&
BinaryNode::_Internal::left_child_id(const BinaryNode* msg) {
  return *msg->left_child_id_;
}
const ::optimization_guide::proto::Int32Value&
BinaryNode::_Internal::right_child_id(const BinaryNode* msg) {
  return *msg->right_child_id_;
}
const ::optimization_guide::proto::InequalityTest&
BinaryNode::_Internal::inequality_left_child_test(const BinaryNode* msg) {
  return *msg->inequality_left_child_test_;
}
BinaryNode::BinaryNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.BinaryNode)
}
BinaryNode::BinaryNode(const BinaryNode& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_left_child_id()) {
    left_child_id_ = new ::optimization_guide::proto::Int32Value(*from.left_child_id_);
  } else {
    left_child_id_ = nullptr;
  }
  if (from._internal_has_right_child_id()) {
    right_child_id_ = new ::optimization_guide::proto::Int32Value(*from.right_child_id_);
  } else {
    right_child_id_ = nullptr;
  }
  if (from._internal_has_inequality_left_child_test()) {
    inequality_left_child_test_ = new ::optimization_guide::proto::InequalityTest(*from.inequality_left_child_test_);
  } else {
    inequality_left_child_test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.BinaryNode)
}

inline void BinaryNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_child_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inequality_left_child_test_) -
    reinterpret_cast<char*>(&left_child_id_)) + sizeof(inequality_left_child_test_));
}

BinaryNode::~BinaryNode() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.BinaryNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete left_child_id_;
  if (this != internal_default_instance()) delete right_child_id_;
  if (this != internal_default_instance()) delete inequality_left_child_test_;
}

void BinaryNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryNode::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.BinaryNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(left_child_id_ != nullptr);
      left_child_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_child_id_ != nullptr);
      right_child_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inequality_left_child_test_ != nullptr);
      inequality_left_child_test_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BinaryNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .optimization_guide.proto.Int32Value left_child_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_child_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.Int32Value right_child_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_child_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.InequalityTest inequality_left_child_test = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inequality_left_child_test(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.BinaryNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.Int32Value left_child_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::left_child_id(this),
        _Internal::left_child_id(this).GetCachedSize(), target, stream);
  }

  // optional .optimization_guide.proto.Int32Value right_child_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::right_child_id(this),
        _Internal::right_child_id(this).GetCachedSize(), target, stream);
  }

  // optional .optimization_guide.proto.InequalityTest inequality_left_child_test = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::inequality_left_child_test(this),
        _Internal::inequality_left_child_test(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.BinaryNode)
  return target;
}

size_t BinaryNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.BinaryNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .optimization_guide.proto.Int32Value left_child_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_child_id_);
    }

    // optional .optimization_guide.proto.Int32Value right_child_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_child_id_);
    }

    // optional .optimization_guide.proto.InequalityTest inequality_left_child_test = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inequality_left_child_test_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryNode::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BinaryNode*>(
      &from));
}

void BinaryNode::MergeFrom(const BinaryNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.BinaryNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_left_child_id()->::optimization_guide::proto::Int32Value::MergeFrom(from._internal_left_child_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_right_child_id()->::optimization_guide::proto::Int32Value::MergeFrom(from._internal_right_child_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inequality_left_child_test()->::optimization_guide::proto::InequalityTest::MergeFrom(from._internal_inequality_left_child_test());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BinaryNode::CopyFrom(const BinaryNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.BinaryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryNode::IsInitialized() const {
  return true;
}

void BinaryNode::InternalSwap(BinaryNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryNode, inequality_left_child_test_)
      + sizeof(BinaryNode::inequality_left_child_test_)
      - PROTOBUF_FIELD_OFFSET(BinaryNode, left_child_id_)>(
          reinterpret_cast<char*>(&left_child_id_),
          reinterpret_cast<char*>(&other->left_child_id_));
}

std::string BinaryNode::GetTypeName() const {
  return "optimization_guide.proto.BinaryNode";
}


// ===================================================================

class Vector::_Internal {
 public:
};

Vector::Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.Vector)
}
Vector::Vector(const Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.Vector)
}

inline void Vector::SharedCtor() {
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.Vector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.Vector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Vector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .optimization_guide.proto.Value value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.Vector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.Value value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.Vector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.Value value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Vector*>(
      &from));
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::InternalSwap(Vector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string Vector::GetTypeName() const {
  return "optimization_guide.proto.Vector";
}


// ===================================================================

class Leaf::_Internal {
 public:
  using HasBits = decltype(std::declval<Leaf>()._has_bits_);
  static const ::optimization_guide::proto::Vector& vector(const Leaf* msg);
  static void set_has_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::optimization_guide::proto::Vector&
Leaf::_Internal::vector(const Leaf* msg) {
  return *msg->vector_;
}
Leaf::Leaf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.Leaf)
}
Leaf::Leaf(const Leaf& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_vector()) {
    vector_ = new ::optimization_guide::proto::Vector(*from.vector_);
  } else {
    vector_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.Leaf)
}

inline void Leaf::SharedCtor() {
vector_ = nullptr;
}

Leaf::~Leaf() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.Leaf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Leaf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vector_;
}

void Leaf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Leaf::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.Leaf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(vector_ != nullptr);
    vector_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Leaf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .optimization_guide.proto.Vector vector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Leaf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.Leaf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.Vector vector = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vector(this),
        _Internal::vector(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.Leaf)
  return target;
}

size_t Leaf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.Leaf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .optimization_guide.proto.Vector vector = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vector_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Leaf::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Leaf*>(
      &from));
}

void Leaf::MergeFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.Leaf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vector()) {
    _internal_mutable_vector()->::optimization_guide::proto::Vector::MergeFrom(from._internal_vector());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Leaf::CopyFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.Leaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leaf::IsInitialized() const {
  return true;
}

void Leaf::InternalSwap(Leaf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vector_, other->vector_);
}

std::string Leaf::GetTypeName() const {
  return "optimization_guide.proto.Leaf";
}


// ===================================================================

class FeatureId::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureId>()._has_bits_);
  static const ::optimization_guide::proto::StringValue& id(const FeatureId* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::optimization_guide::proto::StringValue&
FeatureId::_Internal::id(const FeatureId* msg) {
  return *msg->id_;
}
void FeatureId::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FeatureId::FeatureId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.FeatureId)
}
FeatureId::FeatureId(const FeatureId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::optimization_guide::proto::StringValue(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.FeatureId)
}

inline void FeatureId::SharedCtor() {
id_ = nullptr;
}

FeatureId::~FeatureId() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.FeatureId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeatureId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void FeatureId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeatureId::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.FeatureId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != nullptr);
    id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FeatureId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .optimization_guide.proto.StringValue id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeatureId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.FeatureId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.StringValue id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.FeatureId)
  return target;
}

size_t FeatureId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.FeatureId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .optimization_guide.proto.StringValue id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FeatureId*>(
      &from));
}

void FeatureId::MergeFrom(const FeatureId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.FeatureId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::optimization_guide::proto::StringValue::MergeFrom(from._internal_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FeatureId::CopyFrom(const FeatureId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.FeatureId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureId::IsInitialized() const {
  return true;
}

void FeatureId::InternalSwap(FeatureId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

std::string FeatureId::GetTypeName() const {
  return "optimization_guide.proto.FeatureId";
}


// ===================================================================

class InequalityTest::_Internal {
 public:
  using HasBits = decltype(std::declval<InequalityTest>()._has_bits_);
  static const ::optimization_guide::proto::FeatureId& feature_id(const InequalityTest* msg);
  static void set_has_feature_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::optimization_guide::proto::Value& threshold(const InequalityTest* msg);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::optimization_guide::proto::FeatureId&
InequalityTest::_Internal::feature_id(const InequalityTest* msg) {
  return *msg->feature_id_;
}
const ::optimization_guide::proto::Value&
InequalityTest::_Internal::threshold(const InequalityTest* msg) {
  return *msg->threshold_;
}
InequalityTest::InequalityTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.InequalityTest)
}
InequalityTest::InequalityTest(const InequalityTest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_feature_id()) {
    feature_id_ = new ::optimization_guide::proto::FeatureId(*from.feature_id_);
  } else {
    feature_id_ = nullptr;
  }
  if (from._internal_has_threshold()) {
    threshold_ = new ::optimization_guide::proto::Value(*from.threshold_);
  } else {
    threshold_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.InequalityTest)
}

inline void InequalityTest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&feature_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&feature_id_)) + sizeof(type_));
}

InequalityTest::~InequalityTest() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.InequalityTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InequalityTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete feature_id_;
  if (this != internal_default_instance()) delete threshold_;
}

void InequalityTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InequalityTest::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.InequalityTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(feature_id_ != nullptr);
      feature_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(threshold_ != nullptr);
      threshold_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InequalityTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .optimization_guide.proto.FeatureId feature_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.InequalityTest.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::optimization_guide::proto::InequalityTest_Type_IsValid(val))) {
            _internal_set_type(static_cast<::optimization_guide::proto::InequalityTest_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.Value threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_threshold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InequalityTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.InequalityTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.FeatureId feature_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::feature_id(this),
        _Internal::feature_id(this).GetCachedSize(), target, stream);
  }

  // optional .optimization_guide.proto.InequalityTest.Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .optimization_guide.proto.Value threshold = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::threshold(this),
        _Internal::threshold(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.InequalityTest)
  return target;
}

size_t InequalityTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.InequalityTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .optimization_guide.proto.FeatureId feature_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_id_);
    }

    // optional .optimization_guide.proto.Value threshold = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *threshold_);
    }

    // optional .optimization_guide.proto.InequalityTest.Type type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InequalityTest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InequalityTest*>(
      &from));
}

void InequalityTest::MergeFrom(const InequalityTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.InequalityTest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_feature_id()->::optimization_guide::proto::FeatureId::MergeFrom(from._internal_feature_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_threshold()->::optimization_guide::proto::Value::MergeFrom(from._internal_threshold());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InequalityTest::CopyFrom(const InequalityTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.InequalityTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InequalityTest::IsInitialized() const {
  return true;
}

void InequalityTest::InternalSwap(InequalityTest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InequalityTest, type_)
      + sizeof(InequalityTest::type_)
      - PROTOBUF_FIELD_OFFSET(InequalityTest, feature_id_)>(
          reinterpret_cast<char*>(&feature_id_),
          reinterpret_cast<char*>(&other->feature_id_));
}

std::string InequalityTest::GetTypeName() const {
  return "optimization_guide.proto.InequalityTest";
}


// ===================================================================

class Value::_Internal {
 public:
};

Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kInt32Value: {
      _internal_set_int32_value(from._internal_int32_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.Value)
}

inline void Value::SharedCtor() {
clear_has_value();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:optimization_guide.proto.Value)
  switch (value_case()) {
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kInt32Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<std::string>();
}

const char* Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float float_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 int32_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int64_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kFloatValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_float_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
      break;
    }
    case kInt32Value: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32_value(), target);
      break;
    }
    case kInt64Value: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_int64_value(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // float float_value = 1;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double double_value = 2;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // int32 int32_value = 3;
    case kInt32Value: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int32_value());
      break;
    }
    // int64 int64_value = 4;
    case kInt64Value: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int64_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Value*>(
      &from));
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.Value)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kInt32Value: {
      _internal_set_int32_value(from._internal_int32_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Value::GetTypeName() const {
  return "optimization_guide.proto.Value";
}


// ===================================================================

class Int32Value::_Internal {
 public:
  using HasBits = decltype(std::declval<Int32Value>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Int32Value::Int32Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.Int32Value)
}
Int32Value::Int32Value(const Int32Value& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.Int32Value)
}

inline void Int32Value::SharedCtor() {
value_ = 0;
}

Int32Value::~Int32Value() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.Int32Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Int32Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Int32Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Int32Value::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.Int32Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Int32Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Int32Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.Int32Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.Int32Value)
  return target;
}

size_t Int32Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.Int32Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int32Value::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Int32Value*>(
      &from));
}

void Int32Value::MergeFrom(const Int32Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.Int32Value)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Int32Value::CopyFrom(const Int32Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.Int32Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Value::IsInitialized() const {
  return true;
}

void Int32Value::InternalSwap(Int32Value* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

std::string Int32Value::GetTypeName() const {
  return "optimization_guide.proto.Int32Value";
}


// ===================================================================

class DoubleValue::_Internal {
 public:
  using HasBits = decltype(std::declval<DoubleValue>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DoubleValue::DoubleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.DoubleValue)
}
DoubleValue::DoubleValue(const DoubleValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.DoubleValue)
}

inline void DoubleValue::SharedCtor() {
value_ = 0;
}

DoubleValue::~DoubleValue() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.DoubleValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoubleValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DoubleValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoubleValue::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.DoubleValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DoubleValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.DoubleValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.DoubleValue)
  return target;
}

size_t DoubleValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.DoubleValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DoubleValue*>(
      &from));
}

void DoubleValue::MergeFrom(const DoubleValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.DoubleValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DoubleValue::CopyFrom(const DoubleValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.DoubleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleValue::IsInitialized() const {
  return true;
}

void DoubleValue::InternalSwap(DoubleValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

std::string DoubleValue::GetTypeName() const {
  return "optimization_guide.proto.DoubleValue";
}


// ===================================================================

class GetModelsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetModelsRequest>()._has_bits_);
  static void set_has_request_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetModelsRequest::GetModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  requested_models_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.GetModelsRequest)
}
GetModelsRequest::GetModelsRequest(const GetModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      requested_models_(from.requested_models_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale()) {
    locale_.Set(from._internal_locale(), 
      GetArenaForAllocation());
  }
  request_context_ = from.request_context_;
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.GetModelsRequest)
}

inline void GetModelsRequest::SharedCtor() {
locale_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locale_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
request_context_ = 0;
}

GetModelsRequest::~GetModelsRequest() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.GetModelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  locale_.Destroy();
}

void GetModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.GetModelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requested_models_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    locale_.ClearNonDefaultToEmpty();
  }
  request_context_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetModelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .optimization_guide.proto.ModelInfo requested_models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requested_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.RequestContext request_context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::optimization_guide::proto::RequestContext_IsValid(val))) {
            _internal_set_request_context(static_cast<::optimization_guide::proto::RequestContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string locale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.GetModelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.ModelInfo requested_models = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_requested_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_requested_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.RequestContext request_context = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_request_context(), target);
  }

  // optional string locale = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_locale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.GetModelsRequest)
  return target;
}

size_t GetModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.GetModelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.ModelInfo requested_models = 1;
  total_size += 1UL * this->_internal_requested_models_size();
  for (const auto& msg : this->requested_models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string locale = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale());
    }

    // optional .optimization_guide.proto.RequestContext request_context = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_request_context());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelsRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetModelsRequest*>(
      &from));
}

void GetModelsRequest::MergeFrom(const GetModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.GetModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  requested_models_.MergeFrom(from.requested_models_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_locale(from._internal_locale());
    }
    if (cached_has_bits & 0x00000002u) {
      request_context_ = from.request_context_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetModelsRequest::CopyFrom(const GetModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.GetModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelsRequest::IsInitialized() const {
  return true;
}

void GetModelsRequest::InternalSwap(GetModelsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  requested_models_.InternalSwap(&other->requested_models_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &locale_, lhs_arena,
      &other->locale_, rhs_arena
  );
  swap(request_context_, other->request_context_);
}

std::string GetModelsRequest::GetTypeName() const {
  return "optimization_guide.proto.GetModelsRequest";
}


// ===================================================================

class GetModelsResponse::_Internal {
 public:
};

GetModelsResponse::GetModelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  models_(arena),
  host_model_features_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.GetModelsResponse)
}
GetModelsResponse::GetModelsResponse(const GetModelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      models_(from.models_),
      host_model_features_(from.host_model_features_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.GetModelsResponse)
}

inline void GetModelsResponse::SharedCtor() {
}

GetModelsResponse::~GetModelsResponse() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.GetModelsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetModelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.GetModelsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  host_model_features_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetModelsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .optimization_guide.proto.PredictionModel models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .optimization_guide.proto.HostModelFeatures host_model_features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_host_model_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.GetModelsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.PredictionModel models = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .optimization_guide.proto.HostModelFeatures host_model_features = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_host_model_features_size()); i < n; i++) {
    const auto& repfield = this->_internal_host_model_features(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.GetModelsResponse)
  return target;
}

size_t GetModelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.GetModelsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.PredictionModel models = 1;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .optimization_guide.proto.HostModelFeatures host_model_features = 2;
  total_size += 1UL * this->_internal_host_model_features_size();
  for (const auto& msg : this->host_model_features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelsResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetModelsResponse*>(
      &from));
}

void GetModelsResponse::MergeFrom(const GetModelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.GetModelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  host_model_features_.MergeFrom(from.host_model_features_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetModelsResponse::CopyFrom(const GetModelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.GetModelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelsResponse::IsInitialized() const {
  return true;
}

void GetModelsResponse::InternalSwap(GetModelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
  host_model_features_.InternalSwap(&other->host_model_features_);
}

std::string GetModelsResponse::GetTypeName() const {
  return "optimization_guide.proto.GetModelsResponse";
}


// ===================================================================

class PredictionModel::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionModel>()._has_bits_);
  static const ::optimization_guide::proto::ModelInfo& model_info(const PredictionModel* msg);
  static void set_has_model_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::optimization_guide::proto::Model& model(const PredictionModel* msg);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::optimization_guide::proto::ModelInfo&
PredictionModel::_Internal::model_info(const PredictionModel* msg) {
  return *msg->model_info_;
}
const ::optimization_guide::proto::Model&
PredictionModel::_Internal::model(const PredictionModel* msg) {
  return *msg->model_;
}
PredictionModel::PredictionModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.PredictionModel)
}
PredictionModel::PredictionModel(const PredictionModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_model_info()) {
    model_info_ = new ::optimization_guide::proto::ModelInfo(*from.model_info_);
  } else {
    model_info_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::optimization_guide::proto::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PredictionModel)
}

inline void PredictionModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&model_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_) -
    reinterpret_cast<char*>(&model_info_)) + sizeof(model_));
}

PredictionModel::~PredictionModel() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PredictionModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredictionModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete model_info_;
  if (this != internal_default_instance()) delete model_;
}

void PredictionModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PredictionModel::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PredictionModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(model_info_ != nullptr);
      model_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(model_ != nullptr);
      model_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PredictionModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .optimization_guide.proto.ModelInfo model_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.Model model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.PredictionModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.ModelInfo model_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model_info(this),
        _Internal::model_info(this).GetCachedSize(), target, stream);
  }

  // optional .optimization_guide.proto.Model model = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.PredictionModel)
  return target;
}

size_t PredictionModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PredictionModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .optimization_guide.proto.ModelInfo model_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_info_);
    }

    // optional .optimization_guide.proto.Model model = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PredictionModel*>(
      &from));
}

void PredictionModel::MergeFrom(const PredictionModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PredictionModel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_model_info()->::optimization_guide::proto::ModelInfo::MergeFrom(from._internal_model_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_model()->::optimization_guide::proto::Model::MergeFrom(from._internal_model());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PredictionModel::CopyFrom(const PredictionModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PredictionModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionModel::IsInitialized() const {
  return true;
}

void PredictionModel::InternalSwap(PredictionModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionModel, model_)
      + sizeof(PredictionModel::model_)
      - PROTOBUF_FIELD_OFFSET(PredictionModel, model_info_)>(
          reinterpret_cast<char*>(&model_info_),
          reinterpret_cast<char*>(&other->model_info_));
}

std::string PredictionModel::GetTypeName() const {
  return "optimization_guide.proto.PredictionModel";
}


// ===================================================================

class AdditionalModelFile::_Internal {
 public:
  using HasBits = decltype(std::declval<AdditionalModelFile>()._has_bits_);
  static void set_has_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AdditionalModelFile::AdditionalModelFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.AdditionalModelFile)
}
AdditionalModelFile::AdditionalModelFile(const AdditionalModelFile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_path()) {
    file_path_.Set(from._internal_file_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.AdditionalModelFile)
}

inline void AdditionalModelFile::SharedCtor() {
file_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdditionalModelFile::~AdditionalModelFile() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.AdditionalModelFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdditionalModelFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.Destroy();
}

void AdditionalModelFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdditionalModelFile::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.AdditionalModelFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_path_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AdditionalModelFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdditionalModelFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.AdditionalModelFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.AdditionalModelFile)
  return target;
}

size_t AdditionalModelFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.AdditionalModelFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string file_path = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdditionalModelFile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AdditionalModelFile*>(
      &from));
}

void AdditionalModelFile::MergeFrom(const AdditionalModelFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.AdditionalModelFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file_path()) {
    _internal_set_file_path(from._internal_file_path());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AdditionalModelFile::CopyFrom(const AdditionalModelFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.AdditionalModelFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalModelFile::IsInitialized() const {
  return true;
}

void AdditionalModelFile::InternalSwap(AdditionalModelFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
}

std::string AdditionalModelFile::GetTypeName() const {
  return "optimization_guide.proto.AdditionalModelFile";
}


// ===================================================================

class ModelInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelInfo>()._has_bits_);
  static void set_has_optimization_target(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::optimization_guide::proto::Duration& valid_duration(const ModelInfo* msg);
  static void set_has_valid_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_keep_beyond_valid_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::optimization_guide::proto::Any& model_metadata(const ModelInfo* msg);
  static void set_has_model_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::optimization_guide::proto::Duration&
ModelInfo::_Internal::valid_duration(const ModelInfo* msg) {
  return *msg->valid_duration_;
}
const ::optimization_guide::proto::Any&
ModelInfo::_Internal::model_metadata(const ModelInfo* msg) {
  return *msg->model_metadata_;
}
void ModelInfo::clear_valid_duration() {
  if (valid_duration_ != nullptr) valid_duration_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ModelInfo::clear_model_metadata() {
  if (model_metadata_ != nullptr) model_metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ModelInfo::ModelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  supported_model_engine_versions_(arena),
  supported_host_model_features_(arena),
  additional_files_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.ModelInfo)
}
ModelInfo::ModelInfo(const ModelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      supported_model_engine_versions_(from.supported_model_engine_versions_),
      supported_host_model_features_(from.supported_host_model_features_),
      additional_files_(from.additional_files_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_model_metadata()) {
    model_metadata_ = new ::optimization_guide::proto::Any(*from.model_metadata_);
  } else {
    model_metadata_ = nullptr;
  }
  if (from._internal_has_valid_duration()) {
    valid_duration_ = new ::optimization_guide::proto::Duration(*from.valid_duration_);
  } else {
    valid_duration_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_beyond_valid_duration_) -
    reinterpret_cast<char*>(&version_)) + sizeof(keep_beyond_valid_duration_));
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.ModelInfo)
}

inline void ModelInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&model_metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&keep_beyond_valid_duration_) -
    reinterpret_cast<char*>(&model_metadata_)) + sizeof(keep_beyond_valid_duration_));
}

ModelInfo::~ModelInfo() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.ModelInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete model_metadata_;
  if (this != internal_default_instance()) delete valid_duration_;
}

void ModelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.ModelInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_model_engine_versions_.Clear();
  supported_host_model_features_.Clear();
  additional_files_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(model_metadata_ != nullptr);
      model_metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(valid_duration_ != nullptr);
      valid_duration_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keep_beyond_valid_duration_) -
        reinterpret_cast<char*>(&version_)) + sizeof(keep_beyond_valid_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .optimization_guide.proto.OptimizationTarget optimization_target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::optimization_guide::proto::OptimizationTarget_IsValid(val))) {
            _internal_set_optimization_target(static_cast<::optimization_guide::proto::OptimizationTarget>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .optimization_guide.proto.ModelEngineVersion supported_model_engine_versions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::optimization_guide::proto::ModelEngineVersion_IsValid(val))) {
              _internal_add_supported_model_engine_versions(static_cast<::optimization_guide::proto::ModelEngineVersion>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_supported_model_engine_versions(), ptr, ctx, ::optimization_guide::proto::ModelEngineVersion_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string supported_host_model_features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_supported_host_model_features();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.Any model_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .optimization_guide.proto.AdditionalModelFile additional_files = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.Duration valid_duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_valid_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool keep_beyond_valid_duration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_keep_beyond_valid_duration(&has_bits);
          keep_beyond_valid_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.ModelInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.OptimizationTarget optimization_target = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_optimization_target(), target);
  }

  // optional int64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_version(), target);
  }

  // repeated .optimization_guide.proto.ModelEngineVersion supported_model_engine_versions = 4;
  for (int i = 0, n = this->_internal_supported_model_engine_versions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_supported_model_engine_versions(i), target);
  }

  // repeated string supported_host_model_features = 5;
  for (int i = 0, n = this->_internal_supported_host_model_features_size(); i < n; i++) {
    const auto& s = this->_internal_supported_host_model_features(i);
    target = stream->WriteString(5, s, target);
  }

  // optional .optimization_guide.proto.Any model_metadata = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::model_metadata(this),
        _Internal::model_metadata(this).GetCachedSize(), target, stream);
  }

  // repeated .optimization_guide.proto.AdditionalModelFile additional_files = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .optimization_guide.proto.Duration valid_duration = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::valid_duration(this),
        _Internal::valid_duration(this).GetCachedSize(), target, stream);
  }

  // optional bool keep_beyond_valid_duration = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_keep_beyond_valid_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.ModelInfo)
  return target;
}

size_t ModelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.ModelInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.ModelEngineVersion supported_model_engine_versions = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_model_engine_versions_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_supported_model_engine_versions(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string supported_host_model_features = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(supported_host_model_features_.size());
  for (int i = 0, n = supported_host_model_features_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      supported_host_model_features_.Get(i));
  }

  // repeated .optimization_guide.proto.AdditionalModelFile additional_files = 7;
  total_size += 1UL * this->_internal_additional_files_size();
  for (const auto& msg : this->additional_files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .optimization_guide.proto.Any model_metadata = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_metadata_);
    }

    // optional .optimization_guide.proto.Duration valid_duration = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *valid_duration_);
    }

    // optional int64 version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
    }

    // optional .optimization_guide.proto.OptimizationTarget optimization_target = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optimization_target());
    }

    // optional bool keep_beyond_valid_duration = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelInfo*>(
      &from));
}

void ModelInfo::MergeFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.ModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  supported_model_engine_versions_.MergeFrom(from.supported_model_engine_versions_);
  supported_host_model_features_.MergeFrom(from.supported_host_model_features_);
  additional_files_.MergeFrom(from.additional_files_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_model_metadata()->::optimization_guide::proto::Any::MergeFrom(from._internal_model_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_valid_duration()->::optimization_guide::proto::Duration::MergeFrom(from._internal_valid_duration());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      optimization_target_ = from.optimization_target_;
    }
    if (cached_has_bits & 0x00000010u) {
      keep_beyond_valid_duration_ = from.keep_beyond_valid_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelInfo::CopyFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfo::IsInitialized() const {
  return true;
}

void ModelInfo::InternalSwap(ModelInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  supported_model_engine_versions_.InternalSwap(&other->supported_model_engine_versions_);
  supported_host_model_features_.InternalSwap(&other->supported_host_model_features_);
  additional_files_.InternalSwap(&other->additional_files_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelInfo, keep_beyond_valid_duration_)
      + sizeof(ModelInfo::keep_beyond_valid_duration_)
      - PROTOBUF_FIELD_OFFSET(ModelInfo, model_metadata_)>(
          reinterpret_cast<char*>(&model_metadata_),
          reinterpret_cast<char*>(&other->model_metadata_));
}

std::string ModelInfo::GetTypeName() const {
  return "optimization_guide.proto.ModelInfo";
}


// ===================================================================

class HostModelFeatures::_Internal {
 public:
  using HasBits = decltype(std::declval<HostModelFeatures>()._has_bits_);
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HostModelFeatures::HostModelFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  model_features_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.HostModelFeatures)
}
HostModelFeatures::HostModelFeatures(const HostModelFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      model_features_(from.model_features_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host()) {
    host_.Set(from._internal_host(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.HostModelFeatures)
}

inline void HostModelFeatures::SharedCtor() {
host_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HostModelFeatures::~HostModelFeatures() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.HostModelFeatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostModelFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_.Destroy();
}

void HostModelFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostModelFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.HostModelFeatures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    host_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HostModelFeatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .optimization_guide.proto.ModelFeature model_features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostModelFeatures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.HostModelFeatures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // repeated .optimization_guide.proto.ModelFeature model_features = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_features_size()); i < n; i++) {
    const auto& repfield = this->_internal_model_features(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.HostModelFeatures)
  return target;
}

size_t HostModelFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.HostModelFeatures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.ModelFeature model_features = 2;
  total_size += 1UL * this->_internal_model_features_size();
  for (const auto& msg : this->model_features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string host = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostModelFeatures::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HostModelFeatures*>(
      &from));
}

void HostModelFeatures::MergeFrom(const HostModelFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.HostModelFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  model_features_.MergeFrom(from.model_features_);
  if (from._internal_has_host()) {
    _internal_set_host(from._internal_host());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HostModelFeatures::CopyFrom(const HostModelFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.HostModelFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostModelFeatures::IsInitialized() const {
  return true;
}

void HostModelFeatures::InternalSwap(HostModelFeatures* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  model_features_.InternalSwap(&other->model_features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &host_, lhs_arena,
      &other->host_, rhs_arena
  );
}

std::string HostModelFeatures::GetTypeName() const {
  return "optimization_guide.proto.HostModelFeatures";
}


// ===================================================================

class ModelFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelFeature>()._has_bits_);
  static void set_has_feature_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ModelFeature::ModelFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.ModelFeature)
}
ModelFeature::ModelFeature(const ModelFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  feature_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    feature_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_feature_name()) {
    feature_name_.Set(from._internal_feature_name(), 
      GetArenaForAllocation());
  }
  clear_has_feature_value();
  switch (from.feature_value_case()) {
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case FEATURE_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.ModelFeature)
}

inline void ModelFeature::SharedCtor() {
feature_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  feature_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_feature_value();
}

ModelFeature::~ModelFeature() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.ModelFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  feature_name_.Destroy();
  if (has_feature_value()) {
    clear_feature_value();
  }
}

void ModelFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelFeature::clear_feature_value() {
// @@protoc_insertion_point(one_of_clear_start:optimization_guide.proto.ModelFeature)
  switch (feature_value_case()) {
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case FEATURE_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEATURE_VALUE_NOT_SET;
}


void ModelFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.ModelFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    feature_name_.ClearNonDefaultToEmpty();
  }
  clear_feature_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string feature_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feature_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 int64_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.ModelFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string feature_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_feature_name(), target);
  }

  switch (feature_value_case()) {
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
      break;
    }
    case kInt64Value: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_int64_value(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.ModelFeature)
  return target;
}

size_t ModelFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.ModelFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string feature_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_feature_name());
  }

  switch (feature_value_case()) {
    // double double_value = 2;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // int64 int64_value = 3;
    case kInt64Value: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int64_value());
      break;
    }
    case FEATURE_VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelFeature::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelFeature*>(
      &from));
}

void ModelFeature::MergeFrom(const ModelFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.ModelFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_feature_name()) {
    _internal_set_feature_name(from._internal_feature_name());
  }
  switch (from.feature_value_case()) {
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case FEATURE_VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelFeature::CopyFrom(const ModelFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.ModelFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelFeature::IsInitialized() const {
  return true;
}

void ModelFeature::InternalSwap(ModelFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &feature_name_, lhs_arena,
      &other->feature_name_, rhs_arena
  );
  swap(feature_value_, other->feature_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string ModelFeature::GetTypeName() const {
  return "optimization_guide.proto.ModelFeature";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::Model*
Arena::CreateMaybeMessage< ::optimization_guide::proto::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::Ensemble_Member*
Arena::CreateMaybeMessage< ::optimization_guide::proto::Ensemble_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::Ensemble_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::Ensemble*
Arena::CreateMaybeMessage< ::optimization_guide::proto::Ensemble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::Ensemble >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::DecisionTree*
Arena::CreateMaybeMessage< ::optimization_guide::proto::DecisionTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::DecisionTree >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::TreeNode*
Arena::CreateMaybeMessage< ::optimization_guide::proto::TreeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::TreeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::BinaryNode*
Arena::CreateMaybeMessage< ::optimization_guide::proto::BinaryNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::BinaryNode >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::Vector*
Arena::CreateMaybeMessage< ::optimization_guide::proto::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::Leaf*
Arena::CreateMaybeMessage< ::optimization_guide::proto::Leaf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::Leaf >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::FeatureId*
Arena::CreateMaybeMessage< ::optimization_guide::proto::FeatureId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::FeatureId >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::InequalityTest*
Arena::CreateMaybeMessage< ::optimization_guide::proto::InequalityTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::InequalityTest >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::Value*
Arena::CreateMaybeMessage< ::optimization_guide::proto::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::Int32Value*
Arena::CreateMaybeMessage< ::optimization_guide::proto::Int32Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::Int32Value >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::DoubleValue*
Arena::CreateMaybeMessage< ::optimization_guide::proto::DoubleValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::DoubleValue >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::GetModelsRequest*
Arena::CreateMaybeMessage< ::optimization_guide::proto::GetModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::GetModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::GetModelsResponse*
Arena::CreateMaybeMessage< ::optimization_guide::proto::GetModelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::GetModelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PredictionModel*
Arena::CreateMaybeMessage< ::optimization_guide::proto::PredictionModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::PredictionModel >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::AdditionalModelFile*
Arena::CreateMaybeMessage< ::optimization_guide::proto::AdditionalModelFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::AdditionalModelFile >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::ModelInfo*
Arena::CreateMaybeMessage< ::optimization_guide::proto::ModelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::ModelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::HostModelFeatures*
Arena::CreateMaybeMessage< ::optimization_guide::proto::HostModelFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::HostModelFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::ModelFeature*
Arena::CreateMaybeMessage< ::optimization_guide::proto::ModelFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::ModelFeature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
