// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/public_image_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fpublic_5fimage_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fpublic_5fimage_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2foptimization_5fguide_2fproto_2fpublic_5fimage_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2foptimization_5fguide_2fproto_2fpublic_5fimage_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace optimization_guide {
namespace proto {
class PublicImageMetadata;
struct PublicImageMetadataDefaultTypeInternal;
extern PublicImageMetadataDefaultTypeInternal _PublicImageMetadata_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> ::optimization_guide::proto::PublicImageMetadata* Arena::CreateMaybeMessage<::optimization_guide::proto::PublicImageMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace optimization_guide {
namespace proto {

// ===================================================================

class PublicImageMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.PublicImageMetadata) */ {
 public:
  inline PublicImageMetadata() : PublicImageMetadata(nullptr) {}
  ~PublicImageMetadata() override;
  explicit PROTOBUF_CONSTEXPR PublicImageMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicImageMetadata(const PublicImageMetadata& from);
  PublicImageMetadata(PublicImageMetadata&& from) noexcept
    : PublicImageMetadata() {
    *this = ::std::move(from);
  }

  inline PublicImageMetadata& operator=(const PublicImageMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicImageMetadata& operator=(PublicImageMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PublicImageMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicImageMetadata* internal_default_instance() {
    return reinterpret_cast<const PublicImageMetadata*>(
               &_PublicImageMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublicImageMetadata& a, PublicImageMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PublicImageMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicImageMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicImageMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicImageMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PublicImageMetadata& from);
  void MergeFrom(const PublicImageMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PublicImageMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.PublicImageMetadata";
  }
  protected:
  explicit PublicImageMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // repeated string url = 1;
  int url_size() const;
  private:
  int _internal_url_size() const;
  public:
  void clear_url();
  const std::string& url(int index) const;
  std::string* mutable_url(int index);
  void set_url(int index, const std::string& value);
  void set_url(int index, std::string&& value);
  void set_url(int index, const char* value);
  void set_url(int index, const char* value, size_t size);
  std::string* add_url();
  void add_url(const std::string& value);
  void add_url(std::string&& value);
  void add_url(const char* value);
  void add_url(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& url() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_url();
  private:
  const std::string& _internal_url(int index) const;
  std::string* _internal_add_url();
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.PublicImageMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fpublic_5fimage_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicImageMetadata

// repeated string url = 1;
inline int PublicImageMetadata::_internal_url_size() const {
  return url_.size();
}
inline int PublicImageMetadata::url_size() const {
  return _internal_url_size();
}
inline void PublicImageMetadata::clear_url() {
  url_.Clear();
}
inline std::string* PublicImageMetadata::add_url() {
  std::string* _s = _internal_add_url();
  // @@protoc_insertion_point(field_add_mutable:optimization_guide.proto.PublicImageMetadata.url)
  return _s;
}
inline const std::string& PublicImageMetadata::_internal_url(int index) const {
  return url_.Get(index);
}
inline const std::string& PublicImageMetadata::url(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PublicImageMetadata.url)
  return _internal_url(index);
}
inline std::string* PublicImageMetadata::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PublicImageMetadata.url)
  return url_.Mutable(index);
}
inline void PublicImageMetadata::set_url(int index, const std::string& value) {
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PublicImageMetadata.url)
}
inline void PublicImageMetadata::set_url(int index, std::string&& value) {
  url_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PublicImageMetadata.url)
}
inline void PublicImageMetadata::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:optimization_guide.proto.PublicImageMetadata.url)
}
inline void PublicImageMetadata::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:optimization_guide.proto.PublicImageMetadata.url)
}
inline std::string* PublicImageMetadata::_internal_add_url() {
  return url_.Add();
}
inline void PublicImageMetadata::add_url(const std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:optimization_guide.proto.PublicImageMetadata.url)
}
inline void PublicImageMetadata::add_url(std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:optimization_guide.proto.PublicImageMetadata.url)
}
inline void PublicImageMetadata::add_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:optimization_guide.proto.PublicImageMetadata.url)
}
inline void PublicImageMetadata::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:optimization_guide.proto.PublicImageMetadata.url)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PublicImageMetadata::url() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.PublicImageMetadata.url)
  return url_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PublicImageMetadata::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.PublicImageMetadata.url)
  return &url_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace optimization_guide

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fpublic_5fimage_5fmetadata_2eproto
