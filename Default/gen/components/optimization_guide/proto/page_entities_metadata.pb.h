// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/page_entities_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fpage_5fentities_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fpage_5fentities_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2foptimization_5fguide_2fproto_2fpage_5fentities_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2foptimization_5fguide_2fproto_2fpage_5fentities_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace optimization_guide {
namespace proto {
class Entity;
struct EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class EntityMetadataStorage;
struct EntityMetadataStorageDefaultTypeInternal;
extern EntityMetadataStorageDefaultTypeInternal _EntityMetadataStorage_default_instance_;
class PageEntitiesMetadata;
struct PageEntitiesMetadataDefaultTypeInternal;
extern PageEntitiesMetadataDefaultTypeInternal _PageEntitiesMetadata_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> ::optimization_guide::proto::Entity* Arena::CreateMaybeMessage<::optimization_guide::proto::Entity>(Arena*);
template<> ::optimization_guide::proto::EntityMetadataStorage* Arena::CreateMaybeMessage<::optimization_guide::proto::EntityMetadataStorage>(Arena*);
template<> ::optimization_guide::proto::PageEntitiesMetadata* Arena::CreateMaybeMessage<::optimization_guide::proto::PageEntitiesMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace optimization_guide {
namespace proto {

// ===================================================================

class Entity final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.Entity) */ {
 public:
  inline Entity() : Entity(nullptr) {}
  ~Entity() override;
  explicit PROTOBUF_CONSTEXPR Entity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Entity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.Entity";
  }
  protected:
  explicit Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // optional string entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // optional int32 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  int32_t score() const;
  void set_score(int32_t value);
  private:
  int32_t _internal_score() const;
  void _internal_set_score(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.Entity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
  int32_t score_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fpage_5fentities_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class PageEntitiesMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.PageEntitiesMetadata) */ {
 public:
  inline PageEntitiesMetadata() : PageEntitiesMetadata(nullptr) {}
  ~PageEntitiesMetadata() override;
  explicit PROTOBUF_CONSTEXPR PageEntitiesMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageEntitiesMetadata(const PageEntitiesMetadata& from);
  PageEntitiesMetadata(PageEntitiesMetadata&& from) noexcept
    : PageEntitiesMetadata() {
    *this = ::std::move(from);
  }

  inline PageEntitiesMetadata& operator=(const PageEntitiesMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageEntitiesMetadata& operator=(PageEntitiesMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PageEntitiesMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageEntitiesMetadata* internal_default_instance() {
    return reinterpret_cast<const PageEntitiesMetadata*>(
               &_PageEntitiesMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PageEntitiesMetadata& a, PageEntitiesMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PageEntitiesMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageEntitiesMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageEntitiesMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageEntitiesMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PageEntitiesMetadata& from);
  void MergeFrom(const PageEntitiesMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageEntitiesMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.PageEntitiesMetadata";
  }
  protected:
  explicit PageEntitiesMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
    kAlternativeTitleFieldNumber = 2,
  };
  // repeated .optimization_guide.proto.Entity entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::optimization_guide::proto::Entity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Entity >*
      mutable_entities();
  private:
  const ::optimization_guide::proto::Entity& _internal_entities(int index) const;
  ::optimization_guide::proto::Entity* _internal_add_entities();
  public:
  const ::optimization_guide::proto::Entity& entities(int index) const;
  ::optimization_guide::proto::Entity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Entity >&
      entities() const;

  // optional string alternative_title = 2;
  bool has_alternative_title() const;
  private:
  bool _internal_has_alternative_title() const;
  public:
  void clear_alternative_title();
  const std::string& alternative_title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alternative_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alternative_title();
  PROTOBUF_NODISCARD std::string* release_alternative_title();
  void set_allocated_alternative_title(std::string* alternative_title);
  private:
  const std::string& _internal_alternative_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alternative_title(const std::string& value);
  std::string* _internal_mutable_alternative_title();
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.PageEntitiesMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Entity > entities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alternative_title_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fpage_5fentities_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class EntityMetadataStorage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.EntityMetadataStorage) */ {
 public:
  inline EntityMetadataStorage() : EntityMetadataStorage(nullptr) {}
  ~EntityMetadataStorage() override;
  explicit PROTOBUF_CONSTEXPR EntityMetadataStorage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityMetadataStorage(const EntityMetadataStorage& from);
  EntityMetadataStorage(EntityMetadataStorage&& from) noexcept
    : EntityMetadataStorage() {
    *this = ::std::move(from);
  }

  inline EntityMetadataStorage& operator=(const EntityMetadataStorage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityMetadataStorage& operator=(EntityMetadataStorage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EntityMetadataStorage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityMetadataStorage* internal_default_instance() {
    return reinterpret_cast<const EntityMetadataStorage*>(
               &_EntityMetadataStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EntityMetadataStorage& a, EntityMetadataStorage& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EntityMetadataStorage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityMetadataStorage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityMetadataStorage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntityMetadataStorage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EntityMetadataStorage& from);
  void MergeFrom(const EntityMetadataStorage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EntityMetadataStorage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.EntityMetadataStorage";
  }
  protected:
  explicit EntityMetadataStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityNameFieldNumber = 1,
  };
  // optional string entity_name = 1;
  bool has_entity_name() const;
  private:
  bool _internal_has_entity_name() const;
  public:
  void clear_entity_name();
  const std::string& entity_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_name();
  PROTOBUF_NODISCARD std::string* release_entity_name();
  void set_allocated_entity_name(std::string* entity_name);
  private:
  const std::string& _internal_entity_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_name(const std::string& value);
  std::string* _internal_mutable_entity_name();
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.EntityMetadataStorage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_name_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fpage_5fentities_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entity

// optional string entity_id = 1;
inline bool Entity::_internal_has_entity_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Entity::has_entity_id() const {
  return _internal_has_entity_id();
}
inline void Entity::clear_entity_id() {
  entity_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Entity::entity_id() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Entity.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entity::set_entity_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Entity.entity_id)
}
inline std::string* Entity::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Entity.entity_id)
  return _s;
}
inline const std::string& Entity::_internal_entity_id() const {
  return entity_id_.Get();
}
inline void Entity::_internal_set_entity_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Entity::_internal_mutable_entity_id() {
  _has_bits_[0] |= 0x00000001u;
  return entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Entity::release_entity_id() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.Entity.entity_id)
  if (!_internal_has_entity_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = entity_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (entity_id_.IsDefault()) {
    entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Entity::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (entity_id_.IsDefault()) {
    entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.Entity.entity_id)
}

// optional int32 score = 2;
inline bool Entity::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Entity::has_score() const {
  return _internal_has_score();
}
inline void Entity::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Entity::_internal_score() const {
  return score_;
}
inline int32_t Entity::score() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Entity.score)
  return _internal_score();
}
inline void Entity::_internal_set_score(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void Entity::set_score(int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Entity.score)
}

// -------------------------------------------------------------------

// PageEntitiesMetadata

// repeated .optimization_guide.proto.Entity entities = 1;
inline int PageEntitiesMetadata::_internal_entities_size() const {
  return entities_.size();
}
inline int PageEntitiesMetadata::entities_size() const {
  return _internal_entities_size();
}
inline void PageEntitiesMetadata::clear_entities() {
  entities_.Clear();
}
inline ::optimization_guide::proto::Entity* PageEntitiesMetadata::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PageEntitiesMetadata.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Entity >*
PageEntitiesMetadata::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.PageEntitiesMetadata.entities)
  return &entities_;
}
inline const ::optimization_guide::proto::Entity& PageEntitiesMetadata::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::optimization_guide::proto::Entity& PageEntitiesMetadata::entities(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageEntitiesMetadata.entities)
  return _internal_entities(index);
}
inline ::optimization_guide::proto::Entity* PageEntitiesMetadata::_internal_add_entities() {
  return entities_.Add();
}
inline ::optimization_guide::proto::Entity* PageEntitiesMetadata::add_entities() {
  ::optimization_guide::proto::Entity* _add = _internal_add_entities();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.PageEntitiesMetadata.entities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Entity >&
PageEntitiesMetadata::entities() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.PageEntitiesMetadata.entities)
  return entities_;
}

// optional string alternative_title = 2;
inline bool PageEntitiesMetadata::_internal_has_alternative_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PageEntitiesMetadata::has_alternative_title() const {
  return _internal_has_alternative_title();
}
inline void PageEntitiesMetadata::clear_alternative_title() {
  alternative_title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PageEntitiesMetadata::alternative_title() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageEntitiesMetadata.alternative_title)
  return _internal_alternative_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PageEntitiesMetadata::set_alternative_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 alternative_title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PageEntitiesMetadata.alternative_title)
}
inline std::string* PageEntitiesMetadata::mutable_alternative_title() {
  std::string* _s = _internal_mutable_alternative_title();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PageEntitiesMetadata.alternative_title)
  return _s;
}
inline const std::string& PageEntitiesMetadata::_internal_alternative_title() const {
  return alternative_title_.Get();
}
inline void PageEntitiesMetadata::_internal_set_alternative_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  alternative_title_.Set(value, GetArenaForAllocation());
}
inline std::string* PageEntitiesMetadata::_internal_mutable_alternative_title() {
  _has_bits_[0] |= 0x00000001u;
  return alternative_title_.Mutable(GetArenaForAllocation());
}
inline std::string* PageEntitiesMetadata::release_alternative_title() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.PageEntitiesMetadata.alternative_title)
  if (!_internal_has_alternative_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = alternative_title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alternative_title_.IsDefault()) {
    alternative_title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PageEntitiesMetadata::set_allocated_alternative_title(std::string* alternative_title) {
  if (alternative_title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  alternative_title_.SetAllocated(alternative_title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alternative_title_.IsDefault()) {
    alternative_title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.PageEntitiesMetadata.alternative_title)
}

// -------------------------------------------------------------------

// EntityMetadataStorage

// optional string entity_name = 1;
inline bool EntityMetadataStorage::_internal_has_entity_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EntityMetadataStorage::has_entity_name() const {
  return _internal_has_entity_name();
}
inline void EntityMetadataStorage::clear_entity_name() {
  entity_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EntityMetadataStorage::entity_name() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.EntityMetadataStorage.entity_name)
  return _internal_entity_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntityMetadataStorage::set_entity_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 entity_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.EntityMetadataStorage.entity_name)
}
inline std::string* EntityMetadataStorage::mutable_entity_name() {
  std::string* _s = _internal_mutable_entity_name();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.EntityMetadataStorage.entity_name)
  return _s;
}
inline const std::string& EntityMetadataStorage::_internal_entity_name() const {
  return entity_name_.Get();
}
inline void EntityMetadataStorage::_internal_set_entity_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entity_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EntityMetadataStorage::_internal_mutable_entity_name() {
  _has_bits_[0] |= 0x00000001u;
  return entity_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EntityMetadataStorage::release_entity_name() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.EntityMetadataStorage.entity_name)
  if (!_internal_has_entity_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = entity_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (entity_name_.IsDefault()) {
    entity_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EntityMetadataStorage::set_allocated_entity_name(std::string* entity_name) {
  if (entity_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_name_.SetAllocated(entity_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (entity_name_.IsDefault()) {
    entity_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.EntityMetadataStorage.entity_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace optimization_guide

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fpage_5fentities_5fmetadata_2eproto
