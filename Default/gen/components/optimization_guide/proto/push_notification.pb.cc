// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/push_notification.proto

#include "components/optimization_guide/proto/push_notification.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace optimization_guide {
namespace proto {
PROTOBUF_CONSTEXPR HintNotificationPayload::HintNotificationPayload(
    ::_pbi::ConstantInitialized)
  : hint_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , payload_(nullptr)
  , optimization_type_(0)

  , key_representation_(0)
{}
struct HintNotificationPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HintNotificationPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HintNotificationPayloadDefaultTypeInternal() {}
  union {
    HintNotificationPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HintNotificationPayloadDefaultTypeInternal _HintNotificationPayload_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
namespace optimization_guide {
namespace proto {

// ===================================================================

class HintNotificationPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<HintNotificationPayload>()._has_bits_);
  static void set_has_optimization_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key_representation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hint_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::optimization_guide::proto::Any& payload(const HintNotificationPayload* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::optimization_guide::proto::Any&
HintNotificationPayload::_Internal::payload(const HintNotificationPayload* msg) {
  return *msg->payload_;
}
void HintNotificationPayload::clear_payload() {
  if (payload_ != nullptr) payload_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
HintNotificationPayload::HintNotificationPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.HintNotificationPayload)
}
HintNotificationPayload::HintNotificationPayload(const HintNotificationPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hint_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hint_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hint_key()) {
    hint_key_.Set(from._internal_hint_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_payload()) {
    payload_ = new ::optimization_guide::proto::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  ::memcpy(&optimization_type_, &from.optimization_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_representation_) -
    reinterpret_cast<char*>(&optimization_type_)) + sizeof(key_representation_));
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.HintNotificationPayload)
}

inline void HintNotificationPayload::SharedCtor() {
hint_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hint_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payload_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_representation_) -
    reinterpret_cast<char*>(&payload_)) + sizeof(key_representation_));
}

HintNotificationPayload::~HintNotificationPayload() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.HintNotificationPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HintNotificationPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hint_key_.Destroy();
  if (this != internal_default_instance()) delete payload_;
}

void HintNotificationPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HintNotificationPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.HintNotificationPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hint_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(payload_ != nullptr);
      payload_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&optimization_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_representation_) -
        reinterpret_cast<char*>(&optimization_type_)) + sizeof(key_representation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HintNotificationPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .optimization_guide.proto.OptimizationType optimization_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::optimization_guide::proto::OptimizationType_IsValid(val))) {
            _internal_set_optimization_type(static_cast<::optimization_guide::proto::OptimizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.KeyRepresentation key_representation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::optimization_guide::proto::KeyRepresentation_IsValid(val))) {
            _internal_set_key_representation(static_cast<::optimization_guide::proto::KeyRepresentation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string hint_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hint_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.Any payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HintNotificationPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.HintNotificationPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.OptimizationType optimization_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_optimization_type(), target);
  }

  // optional .optimization_guide.proto.KeyRepresentation key_representation = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_key_representation(), target);
  }

  // optional string hint_key = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hint_key(), target);
  }

  // optional .optimization_guide.proto.Any payload = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.HintNotificationPayload)
  return target;
}

size_t HintNotificationPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.HintNotificationPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string hint_key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hint_key());
    }

    // optional .optimization_guide.proto.Any payload = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_);
    }

    // optional .optimization_guide.proto.OptimizationType optimization_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optimization_type());
    }

    // optional .optimization_guide.proto.KeyRepresentation key_representation = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_key_representation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HintNotificationPayload::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HintNotificationPayload*>(
      &from));
}

void HintNotificationPayload::MergeFrom(const HintNotificationPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.HintNotificationPayload)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hint_key(from._internal_hint_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_payload()->::optimization_guide::proto::Any::MergeFrom(from._internal_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      optimization_type_ = from.optimization_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_representation_ = from.key_representation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HintNotificationPayload::CopyFrom(const HintNotificationPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.HintNotificationPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HintNotificationPayload::IsInitialized() const {
  return true;
}

void HintNotificationPayload::InternalSwap(HintNotificationPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hint_key_, lhs_arena,
      &other->hint_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HintNotificationPayload, key_representation_)
      + sizeof(HintNotificationPayload::key_representation_)
      - PROTOBUF_FIELD_OFFSET(HintNotificationPayload, payload_)>(
          reinterpret_cast<char*>(&payload_),
          reinterpret_cast<char*>(&other->payload_));
}

std::string HintNotificationPayload::GetTypeName() const {
  return "optimization_guide.proto.HintNotificationPayload";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::HintNotificationPayload*
Arena::CreateMaybeMessage< ::optimization_guide::proto::HintNotificationPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::HintNotificationPayload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
