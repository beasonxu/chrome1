// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/page_topics_model_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fpage_5ftopics_5fmodel_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fpage_5ftopics_5fmodel_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2foptimization_5fguide_2fproto_2fpage_5ftopics_5fmodel_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2foptimization_5fguide_2fproto_2fpage_5ftopics_5fmodel_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace optimization_guide {
namespace proto {
class PageTopicsCategoryPostprocessingParams;
struct PageTopicsCategoryPostprocessingParamsDefaultTypeInternal;
extern PageTopicsCategoryPostprocessingParamsDefaultTypeInternal _PageTopicsCategoryPostprocessingParams_default_instance_;
class PageTopicsModelMetadata;
struct PageTopicsModelMetadataDefaultTypeInternal;
extern PageTopicsModelMetadataDefaultTypeInternal _PageTopicsModelMetadata_default_instance_;
class PageTopicsOutputPostprocessingParams;
struct PageTopicsOutputPostprocessingParamsDefaultTypeInternal;
extern PageTopicsOutputPostprocessingParamsDefaultTypeInternal _PageTopicsOutputPostprocessingParams_default_instance_;
class PageTopicsVisibilityPostprocessingParams;
struct PageTopicsVisibilityPostprocessingParamsDefaultTypeInternal;
extern PageTopicsVisibilityPostprocessingParamsDefaultTypeInternal _PageTopicsVisibilityPostprocessingParams_default_instance_;
class Topic;
struct TopicDefaultTypeInternal;
extern TopicDefaultTypeInternal _Topic_default_instance_;
class TopicTaxonomy;
struct TopicTaxonomyDefaultTypeInternal;
extern TopicTaxonomyDefaultTypeInternal _TopicTaxonomy_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* Arena::CreateMaybeMessage<::optimization_guide::proto::PageTopicsCategoryPostprocessingParams>(Arena*);
template<> ::optimization_guide::proto::PageTopicsModelMetadata* Arena::CreateMaybeMessage<::optimization_guide::proto::PageTopicsModelMetadata>(Arena*);
template<> ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* Arena::CreateMaybeMessage<::optimization_guide::proto::PageTopicsOutputPostprocessingParams>(Arena*);
template<> ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* Arena::CreateMaybeMessage<::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams>(Arena*);
template<> ::optimization_guide::proto::Topic* Arena::CreateMaybeMessage<::optimization_guide::proto::Topic>(Arena*);
template<> ::optimization_guide::proto::TopicTaxonomy* Arena::CreateMaybeMessage<::optimization_guide::proto::TopicTaxonomy>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace optimization_guide {
namespace proto {

enum PageTopicsSupportedOutput : int {
  PAGE_TOPICS_SUPPORTED_OUTPUT_UNKNOWN = 0,
  PAGE_TOPICS_SUPPORTED_OUTPUT_VISIBILITY = 1,
  PAGE_TOPICS_SUPPORTED_OUTPUT_CATEGORIES = 2
};
bool PageTopicsSupportedOutput_IsValid(int value);
constexpr PageTopicsSupportedOutput PageTopicsSupportedOutput_MIN = PAGE_TOPICS_SUPPORTED_OUTPUT_UNKNOWN;
constexpr PageTopicsSupportedOutput PageTopicsSupportedOutput_MAX = PAGE_TOPICS_SUPPORTED_OUTPUT_CATEGORIES;
constexpr int PageTopicsSupportedOutput_ARRAYSIZE = PageTopicsSupportedOutput_MAX + 1;

const std::string& PageTopicsSupportedOutput_Name(PageTopicsSupportedOutput value);
template<typename T>
inline const std::string& PageTopicsSupportedOutput_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PageTopicsSupportedOutput>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PageTopicsSupportedOutput_Name.");
  return PageTopicsSupportedOutput_Name(static_cast<PageTopicsSupportedOutput>(enum_t_value));
}
bool PageTopicsSupportedOutput_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PageTopicsSupportedOutput* value);
// ===================================================================

class PageTopicsVisibilityPostprocessingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams) */ {
 public:
  inline PageTopicsVisibilityPostprocessingParams() : PageTopicsVisibilityPostprocessingParams(nullptr) {}
  ~PageTopicsVisibilityPostprocessingParams() override;
  explicit PROTOBUF_CONSTEXPR PageTopicsVisibilityPostprocessingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageTopicsVisibilityPostprocessingParams(const PageTopicsVisibilityPostprocessingParams& from);
  PageTopicsVisibilityPostprocessingParams(PageTopicsVisibilityPostprocessingParams&& from) noexcept
    : PageTopicsVisibilityPostprocessingParams() {
    *this = ::std::move(from);
  }

  inline PageTopicsVisibilityPostprocessingParams& operator=(const PageTopicsVisibilityPostprocessingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageTopicsVisibilityPostprocessingParams& operator=(PageTopicsVisibilityPostprocessingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PageTopicsVisibilityPostprocessingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageTopicsVisibilityPostprocessingParams* internal_default_instance() {
    return reinterpret_cast<const PageTopicsVisibilityPostprocessingParams*>(
               &_PageTopicsVisibilityPostprocessingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PageTopicsVisibilityPostprocessingParams& a, PageTopicsVisibilityPostprocessingParams& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PageTopicsVisibilityPostprocessingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageTopicsVisibilityPostprocessingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageTopicsVisibilityPostprocessingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageTopicsVisibilityPostprocessingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PageTopicsVisibilityPostprocessingParams& from);
  void MergeFrom(const PageTopicsVisibilityPostprocessingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageTopicsVisibilityPostprocessingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.PageTopicsVisibilityPostprocessingParams";
  }
  protected:
  explicit PageTopicsVisibilityPostprocessingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryNameFieldNumber = 1,
  };
  // optional string category_name = 1;
  bool has_category_name() const;
  private:
  bool _internal_has_category_name() const;
  public:
  void clear_category_name();
  const std::string& category_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category_name();
  PROTOBUF_NODISCARD std::string* release_category_name();
  void set_allocated_category_name(std::string* category_name);
  private:
  const std::string& _internal_category_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category_name(const std::string& value);
  std::string* _internal_mutable_category_name();
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_name_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fpage_5ftopics_5fmodel_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class PageTopicsCategoryPostprocessingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.PageTopicsCategoryPostprocessingParams) */ {
 public:
  inline PageTopicsCategoryPostprocessingParams() : PageTopicsCategoryPostprocessingParams(nullptr) {}
  ~PageTopicsCategoryPostprocessingParams() override;
  explicit PROTOBUF_CONSTEXPR PageTopicsCategoryPostprocessingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageTopicsCategoryPostprocessingParams(const PageTopicsCategoryPostprocessingParams& from);
  PageTopicsCategoryPostprocessingParams(PageTopicsCategoryPostprocessingParams&& from) noexcept
    : PageTopicsCategoryPostprocessingParams() {
    *this = ::std::move(from);
  }

  inline PageTopicsCategoryPostprocessingParams& operator=(const PageTopicsCategoryPostprocessingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageTopicsCategoryPostprocessingParams& operator=(PageTopicsCategoryPostprocessingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PageTopicsCategoryPostprocessingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageTopicsCategoryPostprocessingParams* internal_default_instance() {
    return reinterpret_cast<const PageTopicsCategoryPostprocessingParams*>(
               &_PageTopicsCategoryPostprocessingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PageTopicsCategoryPostprocessingParams& a, PageTopicsCategoryPostprocessingParams& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PageTopicsCategoryPostprocessingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageTopicsCategoryPostprocessingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageTopicsCategoryPostprocessingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageTopicsCategoryPostprocessingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PageTopicsCategoryPostprocessingParams& from);
  void MergeFrom(const PageTopicsCategoryPostprocessingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageTopicsCategoryPostprocessingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.PageTopicsCategoryPostprocessingParams";
  }
  protected:
  explicit PageTopicsCategoryPostprocessingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxCategoriesFieldNumber = 1,
    kMinCategoryWeightFieldNumber = 2,
    kMinNormalizedWeightWithinTopNFieldNumber = 3,
    kMinNoneWeightFieldNumber = 4,
  };
  // optional int32 max_categories = 1;
  bool has_max_categories() const;
  private:
  bool _internal_has_max_categories() const;
  public:
  void clear_max_categories();
  int32_t max_categories() const;
  void set_max_categories(int32_t value);
  private:
  int32_t _internal_max_categories() const;
  void _internal_set_max_categories(int32_t value);
  public:

  // optional float min_category_weight = 2;
  bool has_min_category_weight() const;
  private:
  bool _internal_has_min_category_weight() const;
  public:
  void clear_min_category_weight();
  float min_category_weight() const;
  void set_min_category_weight(float value);
  private:
  float _internal_min_category_weight() const;
  void _internal_set_min_category_weight(float value);
  public:

  // optional float min_normalized_weight_within_top_n = 3;
  bool has_min_normalized_weight_within_top_n() const;
  private:
  bool _internal_has_min_normalized_weight_within_top_n() const;
  public:
  void clear_min_normalized_weight_within_top_n();
  float min_normalized_weight_within_top_n() const;
  void set_min_normalized_weight_within_top_n(float value);
  private:
  float _internal_min_normalized_weight_within_top_n() const;
  void _internal_set_min_normalized_weight_within_top_n(float value);
  public:

  // optional float min_none_weight = 4;
  bool has_min_none_weight() const;
  private:
  bool _internal_has_min_none_weight() const;
  public:
  void clear_min_none_weight();
  float min_none_weight() const;
  void set_min_none_weight(float value);
  private:
  float _internal_min_none_weight() const;
  void _internal_set_min_none_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.PageTopicsCategoryPostprocessingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t max_categories_;
  float min_category_weight_;
  float min_normalized_weight_within_top_n_;
  float min_none_weight_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fpage_5ftopics_5fmodel_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class PageTopicsOutputPostprocessingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.PageTopicsOutputPostprocessingParams) */ {
 public:
  inline PageTopicsOutputPostprocessingParams() : PageTopicsOutputPostprocessingParams(nullptr) {}
  ~PageTopicsOutputPostprocessingParams() override;
  explicit PROTOBUF_CONSTEXPR PageTopicsOutputPostprocessingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageTopicsOutputPostprocessingParams(const PageTopicsOutputPostprocessingParams& from);
  PageTopicsOutputPostprocessingParams(PageTopicsOutputPostprocessingParams&& from) noexcept
    : PageTopicsOutputPostprocessingParams() {
    *this = ::std::move(from);
  }

  inline PageTopicsOutputPostprocessingParams& operator=(const PageTopicsOutputPostprocessingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageTopicsOutputPostprocessingParams& operator=(PageTopicsOutputPostprocessingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PageTopicsOutputPostprocessingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageTopicsOutputPostprocessingParams* internal_default_instance() {
    return reinterpret_cast<const PageTopicsOutputPostprocessingParams*>(
               &_PageTopicsOutputPostprocessingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PageTopicsOutputPostprocessingParams& a, PageTopicsOutputPostprocessingParams& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PageTopicsOutputPostprocessingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageTopicsOutputPostprocessingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageTopicsOutputPostprocessingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageTopicsOutputPostprocessingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PageTopicsOutputPostprocessingParams& from);
  void MergeFrom(const PageTopicsOutputPostprocessingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageTopicsOutputPostprocessingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.PageTopicsOutputPostprocessingParams";
  }
  protected:
  explicit PageTopicsOutputPostprocessingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisibilityParamsFieldNumber = 1,
    kCategoryParamsFieldNumber = 2,
  };
  // optional .optimization_guide.proto.PageTopicsVisibilityPostprocessingParams visibility_params = 1;
  bool has_visibility_params() const;
  private:
  bool _internal_has_visibility_params() const;
  public:
  void clear_visibility_params();
  const ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams& visibility_params() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* release_visibility_params();
  ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* mutable_visibility_params();
  void set_allocated_visibility_params(::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* visibility_params);
  private:
  const ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams& _internal_visibility_params() const;
  ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* _internal_mutable_visibility_params();
  public:
  void unsafe_arena_set_allocated_visibility_params(
      ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* visibility_params);
  ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* unsafe_arena_release_visibility_params();

  // optional .optimization_guide.proto.PageTopicsCategoryPostprocessingParams category_params = 2;
  bool has_category_params() const;
  private:
  bool _internal_has_category_params() const;
  public:
  void clear_category_params();
  const ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams& category_params() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* release_category_params();
  ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* mutable_category_params();
  void set_allocated_category_params(::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* category_params);
  private:
  const ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams& _internal_category_params() const;
  ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* _internal_mutable_category_params();
  public:
  void unsafe_arena_set_allocated_category_params(
      ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* category_params);
  ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* unsafe_arena_release_category_params();

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.PageTopicsOutputPostprocessingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* visibility_params_;
  ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* category_params_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fpage_5ftopics_5fmodel_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class Topic final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.Topic) */ {
 public:
  inline Topic() : Topic(nullptr) {}
  ~Topic() override;
  explicit PROTOBUF_CONSTEXPR Topic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Topic(const Topic& from);
  Topic(Topic&& from) noexcept
    : Topic() {
    *this = ::std::move(from);
  }

  inline Topic& operator=(const Topic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Topic& operator=(Topic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Topic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Topic* internal_default_instance() {
    return reinterpret_cast<const Topic*>(
               &_Topic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Topic& a, Topic& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Topic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Topic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Topic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Topic>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Topic& from);
  void MergeFrom(const Topic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Topic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.Topic";
  }
  protected:
  explicit Topic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicNameFieldNumber = 1,
    kTopicIdFieldNumber = 2,
  };
  // optional string topic_name = 1;
  bool has_topic_name() const;
  private:
  bool _internal_has_topic_name() const;
  public:
  void clear_topic_name();
  const std::string& topic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* topic_name);
  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(const std::string& value);
  std::string* _internal_mutable_topic_name();
  public:

  // optional int64 topic_id = 2;
  bool has_topic_id() const;
  private:
  bool _internal_has_topic_id() const;
  public:
  void clear_topic_id();
  int64_t topic_id() const;
  void set_topic_id(int64_t value);
  private:
  int64_t _internal_topic_id() const;
  void _internal_set_topic_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.Topic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_name_;
  int64_t topic_id_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fpage_5ftopics_5fmodel_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class TopicTaxonomy final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.TopicTaxonomy) */ {
 public:
  inline TopicTaxonomy() : TopicTaxonomy(nullptr) {}
  ~TopicTaxonomy() override;
  explicit PROTOBUF_CONSTEXPR TopicTaxonomy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicTaxonomy(const TopicTaxonomy& from);
  TopicTaxonomy(TopicTaxonomy&& from) noexcept
    : TopicTaxonomy() {
    *this = ::std::move(from);
  }

  inline TopicTaxonomy& operator=(const TopicTaxonomy& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicTaxonomy& operator=(TopicTaxonomy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TopicTaxonomy& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicTaxonomy* internal_default_instance() {
    return reinterpret_cast<const TopicTaxonomy*>(
               &_TopicTaxonomy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TopicTaxonomy& a, TopicTaxonomy& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TopicTaxonomy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicTaxonomy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicTaxonomy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicTaxonomy>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TopicTaxonomy& from);
  void MergeFrom(const TopicTaxonomy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicTaxonomy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.TopicTaxonomy";
  }
  protected:
  explicit TopicTaxonomy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated .optimization_guide.proto.Topic topics = 2;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  ::optimization_guide::proto::Topic* mutable_topics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Topic >*
      mutable_topics();
  private:
  const ::optimization_guide::proto::Topic& _internal_topics(int index) const;
  ::optimization_guide::proto::Topic* _internal_add_topics();
  public:
  const ::optimization_guide::proto::Topic& topics(int index) const;
  ::optimization_guide::proto::Topic* add_topics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Topic >&
      topics() const;

  // optional int64 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.TopicTaxonomy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Topic > topics_;
  int64_t version_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fpage_5ftopics_5fmodel_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class PageTopicsModelMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.PageTopicsModelMetadata) */ {
 public:
  inline PageTopicsModelMetadata() : PageTopicsModelMetadata(nullptr) {}
  ~PageTopicsModelMetadata() override;
  explicit PROTOBUF_CONSTEXPR PageTopicsModelMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageTopicsModelMetadata(const PageTopicsModelMetadata& from);
  PageTopicsModelMetadata(PageTopicsModelMetadata&& from) noexcept
    : PageTopicsModelMetadata() {
    *this = ::std::move(from);
  }

  inline PageTopicsModelMetadata& operator=(const PageTopicsModelMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageTopicsModelMetadata& operator=(PageTopicsModelMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PageTopicsModelMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageTopicsModelMetadata* internal_default_instance() {
    return reinterpret_cast<const PageTopicsModelMetadata*>(
               &_PageTopicsModelMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PageTopicsModelMetadata& a, PageTopicsModelMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PageTopicsModelMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageTopicsModelMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageTopicsModelMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageTopicsModelMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PageTopicsModelMetadata& from);
  void MergeFrom(const PageTopicsModelMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageTopicsModelMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.PageTopicsModelMetadata";
  }
  protected:
  explicit PageTopicsModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedOutputFieldNumber = 2,
    kOutputPostprocessingParamsFieldNumber = 3,
    kTopicTaxonomyFieldNumber = 5,
    kVersionFieldNumber = 1,
  };
  // repeated .optimization_guide.proto.PageTopicsSupportedOutput supported_output = 2;
  int supported_output_size() const;
  private:
  int _internal_supported_output_size() const;
  public:
  void clear_supported_output();
  private:
  ::optimization_guide::proto::PageTopicsSupportedOutput _internal_supported_output(int index) const;
  void _internal_add_supported_output(::optimization_guide::proto::PageTopicsSupportedOutput value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_supported_output();
  public:
  ::optimization_guide::proto::PageTopicsSupportedOutput supported_output(int index) const;
  void set_supported_output(int index, ::optimization_guide::proto::PageTopicsSupportedOutput value);
  void add_supported_output(::optimization_guide::proto::PageTopicsSupportedOutput value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& supported_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_supported_output();

  // optional .optimization_guide.proto.PageTopicsOutputPostprocessingParams output_postprocessing_params = 3;
  bool has_output_postprocessing_params() const;
  private:
  bool _internal_has_output_postprocessing_params() const;
  public:
  void clear_output_postprocessing_params();
  const ::optimization_guide::proto::PageTopicsOutputPostprocessingParams& output_postprocessing_params() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* release_output_postprocessing_params();
  ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* mutable_output_postprocessing_params();
  void set_allocated_output_postprocessing_params(::optimization_guide::proto::PageTopicsOutputPostprocessingParams* output_postprocessing_params);
  private:
  const ::optimization_guide::proto::PageTopicsOutputPostprocessingParams& _internal_output_postprocessing_params() const;
  ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* _internal_mutable_output_postprocessing_params();
  public:
  void unsafe_arena_set_allocated_output_postprocessing_params(
      ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* output_postprocessing_params);
  ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* unsafe_arena_release_output_postprocessing_params();

  // optional .optimization_guide.proto.TopicTaxonomy topic_taxonomy = 5;
  bool has_topic_taxonomy() const;
  private:
  bool _internal_has_topic_taxonomy() const;
  public:
  void clear_topic_taxonomy();
  const ::optimization_guide::proto::TopicTaxonomy& topic_taxonomy() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::TopicTaxonomy* release_topic_taxonomy();
  ::optimization_guide::proto::TopicTaxonomy* mutable_topic_taxonomy();
  void set_allocated_topic_taxonomy(::optimization_guide::proto::TopicTaxonomy* topic_taxonomy);
  private:
  const ::optimization_guide::proto::TopicTaxonomy& _internal_topic_taxonomy() const;
  ::optimization_guide::proto::TopicTaxonomy* _internal_mutable_topic_taxonomy();
  public:
  void unsafe_arena_set_allocated_topic_taxonomy(
      ::optimization_guide::proto::TopicTaxonomy* topic_taxonomy);
  ::optimization_guide::proto::TopicTaxonomy* unsafe_arena_release_topic_taxonomy();

  // optional int64 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.PageTopicsModelMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> supported_output_;
  ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* output_postprocessing_params_;
  ::optimization_guide::proto::TopicTaxonomy* topic_taxonomy_;
  int64_t version_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fpage_5ftopics_5fmodel_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PageTopicsVisibilityPostprocessingParams

// optional string category_name = 1;
inline bool PageTopicsVisibilityPostprocessingParams::_internal_has_category_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PageTopicsVisibilityPostprocessingParams::has_category_name() const {
  return _internal_has_category_name();
}
inline void PageTopicsVisibilityPostprocessingParams::clear_category_name() {
  category_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PageTopicsVisibilityPostprocessingParams::category_name() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams.category_name)
  return _internal_category_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PageTopicsVisibilityPostprocessingParams::set_category_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 category_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams.category_name)
}
inline std::string* PageTopicsVisibilityPostprocessingParams::mutable_category_name() {
  std::string* _s = _internal_mutable_category_name();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams.category_name)
  return _s;
}
inline const std::string& PageTopicsVisibilityPostprocessingParams::_internal_category_name() const {
  return category_name_.Get();
}
inline void PageTopicsVisibilityPostprocessingParams::_internal_set_category_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  category_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PageTopicsVisibilityPostprocessingParams::_internal_mutable_category_name() {
  _has_bits_[0] |= 0x00000001u;
  return category_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PageTopicsVisibilityPostprocessingParams::release_category_name() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams.category_name)
  if (!_internal_has_category_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = category_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (category_name_.IsDefault()) {
    category_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PageTopicsVisibilityPostprocessingParams::set_allocated_category_name(std::string* category_name) {
  if (category_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  category_name_.SetAllocated(category_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (category_name_.IsDefault()) {
    category_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams.category_name)
}

// -------------------------------------------------------------------

// PageTopicsCategoryPostprocessingParams

// optional int32 max_categories = 1;
inline bool PageTopicsCategoryPostprocessingParams::_internal_has_max_categories() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PageTopicsCategoryPostprocessingParams::has_max_categories() const {
  return _internal_has_max_categories();
}
inline void PageTopicsCategoryPostprocessingParams::clear_max_categories() {
  max_categories_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t PageTopicsCategoryPostprocessingParams::_internal_max_categories() const {
  return max_categories_;
}
inline int32_t PageTopicsCategoryPostprocessingParams::max_categories() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageTopicsCategoryPostprocessingParams.max_categories)
  return _internal_max_categories();
}
inline void PageTopicsCategoryPostprocessingParams::_internal_set_max_categories(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  max_categories_ = value;
}
inline void PageTopicsCategoryPostprocessingParams::set_max_categories(int32_t value) {
  _internal_set_max_categories(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PageTopicsCategoryPostprocessingParams.max_categories)
}

// optional float min_category_weight = 2;
inline bool PageTopicsCategoryPostprocessingParams::_internal_has_min_category_weight() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PageTopicsCategoryPostprocessingParams::has_min_category_weight() const {
  return _internal_has_min_category_weight();
}
inline void PageTopicsCategoryPostprocessingParams::clear_min_category_weight() {
  min_category_weight_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PageTopicsCategoryPostprocessingParams::_internal_min_category_weight() const {
  return min_category_weight_;
}
inline float PageTopicsCategoryPostprocessingParams::min_category_weight() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageTopicsCategoryPostprocessingParams.min_category_weight)
  return _internal_min_category_weight();
}
inline void PageTopicsCategoryPostprocessingParams::_internal_set_min_category_weight(float value) {
  _has_bits_[0] |= 0x00000002u;
  min_category_weight_ = value;
}
inline void PageTopicsCategoryPostprocessingParams::set_min_category_weight(float value) {
  _internal_set_min_category_weight(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PageTopicsCategoryPostprocessingParams.min_category_weight)
}

// optional float min_normalized_weight_within_top_n = 3;
inline bool PageTopicsCategoryPostprocessingParams::_internal_has_min_normalized_weight_within_top_n() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PageTopicsCategoryPostprocessingParams::has_min_normalized_weight_within_top_n() const {
  return _internal_has_min_normalized_weight_within_top_n();
}
inline void PageTopicsCategoryPostprocessingParams::clear_min_normalized_weight_within_top_n() {
  min_normalized_weight_within_top_n_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PageTopicsCategoryPostprocessingParams::_internal_min_normalized_weight_within_top_n() const {
  return min_normalized_weight_within_top_n_;
}
inline float PageTopicsCategoryPostprocessingParams::min_normalized_weight_within_top_n() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageTopicsCategoryPostprocessingParams.min_normalized_weight_within_top_n)
  return _internal_min_normalized_weight_within_top_n();
}
inline void PageTopicsCategoryPostprocessingParams::_internal_set_min_normalized_weight_within_top_n(float value) {
  _has_bits_[0] |= 0x00000004u;
  min_normalized_weight_within_top_n_ = value;
}
inline void PageTopicsCategoryPostprocessingParams::set_min_normalized_weight_within_top_n(float value) {
  _internal_set_min_normalized_weight_within_top_n(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PageTopicsCategoryPostprocessingParams.min_normalized_weight_within_top_n)
}

// optional float min_none_weight = 4;
inline bool PageTopicsCategoryPostprocessingParams::_internal_has_min_none_weight() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PageTopicsCategoryPostprocessingParams::has_min_none_weight() const {
  return _internal_has_min_none_weight();
}
inline void PageTopicsCategoryPostprocessingParams::clear_min_none_weight() {
  min_none_weight_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PageTopicsCategoryPostprocessingParams::_internal_min_none_weight() const {
  return min_none_weight_;
}
inline float PageTopicsCategoryPostprocessingParams::min_none_weight() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageTopicsCategoryPostprocessingParams.min_none_weight)
  return _internal_min_none_weight();
}
inline void PageTopicsCategoryPostprocessingParams::_internal_set_min_none_weight(float value) {
  _has_bits_[0] |= 0x00000008u;
  min_none_weight_ = value;
}
inline void PageTopicsCategoryPostprocessingParams::set_min_none_weight(float value) {
  _internal_set_min_none_weight(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PageTopicsCategoryPostprocessingParams.min_none_weight)
}

// -------------------------------------------------------------------

// PageTopicsOutputPostprocessingParams

// optional .optimization_guide.proto.PageTopicsVisibilityPostprocessingParams visibility_params = 1;
inline bool PageTopicsOutputPostprocessingParams::_internal_has_visibility_params() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || visibility_params_ != nullptr);
  return value;
}
inline bool PageTopicsOutputPostprocessingParams::has_visibility_params() const {
  return _internal_has_visibility_params();
}
inline void PageTopicsOutputPostprocessingParams::clear_visibility_params() {
  if (visibility_params_ != nullptr) visibility_params_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams& PageTopicsOutputPostprocessingParams::_internal_visibility_params() const {
  const ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* p = visibility_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams&>(
      ::optimization_guide::proto::_PageTopicsVisibilityPostprocessingParams_default_instance_);
}
inline const ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams& PageTopicsOutputPostprocessingParams::visibility_params() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageTopicsOutputPostprocessingParams.visibility_params)
  return _internal_visibility_params();
}
inline void PageTopicsOutputPostprocessingParams::unsafe_arena_set_allocated_visibility_params(
    ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* visibility_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visibility_params_);
  }
  visibility_params_ = visibility_params;
  if (visibility_params) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.PageTopicsOutputPostprocessingParams.visibility_params)
}
inline ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* PageTopicsOutputPostprocessingParams::release_visibility_params() {
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* temp = visibility_params_;
  visibility_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* PageTopicsOutputPostprocessingParams::unsafe_arena_release_visibility_params() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.PageTopicsOutputPostprocessingParams.visibility_params)
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* temp = visibility_params_;
  visibility_params_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* PageTopicsOutputPostprocessingParams::_internal_mutable_visibility_params() {
  _has_bits_[0] |= 0x00000001u;
  if (visibility_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams>(GetArenaForAllocation());
    visibility_params_ = p;
  }
  return visibility_params_;
}
inline ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* PageTopicsOutputPostprocessingParams::mutable_visibility_params() {
  ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* _msg = _internal_mutable_visibility_params();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PageTopicsOutputPostprocessingParams.visibility_params)
  return _msg;
}
inline void PageTopicsOutputPostprocessingParams::set_allocated_visibility_params(::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams* visibility_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete visibility_params_;
  }
  if (visibility_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(visibility_params);
    if (message_arena != submessage_arena) {
      visibility_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  visibility_params_ = visibility_params;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.PageTopicsOutputPostprocessingParams.visibility_params)
}

// optional .optimization_guide.proto.PageTopicsCategoryPostprocessingParams category_params = 2;
inline bool PageTopicsOutputPostprocessingParams::_internal_has_category_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || category_params_ != nullptr);
  return value;
}
inline bool PageTopicsOutputPostprocessingParams::has_category_params() const {
  return _internal_has_category_params();
}
inline void PageTopicsOutputPostprocessingParams::clear_category_params() {
  if (category_params_ != nullptr) category_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams& PageTopicsOutputPostprocessingParams::_internal_category_params() const {
  const ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* p = category_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams&>(
      ::optimization_guide::proto::_PageTopicsCategoryPostprocessingParams_default_instance_);
}
inline const ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams& PageTopicsOutputPostprocessingParams::category_params() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageTopicsOutputPostprocessingParams.category_params)
  return _internal_category_params();
}
inline void PageTopicsOutputPostprocessingParams::unsafe_arena_set_allocated_category_params(
    ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* category_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_params_);
  }
  category_params_ = category_params;
  if (category_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.PageTopicsOutputPostprocessingParams.category_params)
}
inline ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* PageTopicsOutputPostprocessingParams::release_category_params() {
  _has_bits_[0] &= ~0x00000002u;
  ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* temp = category_params_;
  category_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* PageTopicsOutputPostprocessingParams::unsafe_arena_release_category_params() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.PageTopicsOutputPostprocessingParams.category_params)
  _has_bits_[0] &= ~0x00000002u;
  ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* temp = category_params_;
  category_params_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* PageTopicsOutputPostprocessingParams::_internal_mutable_category_params() {
  _has_bits_[0] |= 0x00000002u;
  if (category_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::PageTopicsCategoryPostprocessingParams>(GetArenaForAllocation());
    category_params_ = p;
  }
  return category_params_;
}
inline ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* PageTopicsOutputPostprocessingParams::mutable_category_params() {
  ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* _msg = _internal_mutable_category_params();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PageTopicsOutputPostprocessingParams.category_params)
  return _msg;
}
inline void PageTopicsOutputPostprocessingParams::set_allocated_category_params(::optimization_guide::proto::PageTopicsCategoryPostprocessingParams* category_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete category_params_;
  }
  if (category_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(category_params);
    if (message_arena != submessage_arena) {
      category_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  category_params_ = category_params;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.PageTopicsOutputPostprocessingParams.category_params)
}

// -------------------------------------------------------------------

// Topic

// optional string topic_name = 1;
inline bool Topic::_internal_has_topic_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Topic::has_topic_name() const {
  return _internal_has_topic_name();
}
inline void Topic::clear_topic_name() {
  topic_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Topic::topic_name() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Topic.topic_name)
  return _internal_topic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Topic::set_topic_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 topic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Topic.topic_name)
}
inline std::string* Topic::mutable_topic_name() {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Topic.topic_name)
  return _s;
}
inline const std::string& Topic::_internal_topic_name() const {
  return topic_name_.Get();
}
inline void Topic::_internal_set_topic_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  topic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Topic::_internal_mutable_topic_name() {
  _has_bits_[0] |= 0x00000001u;
  return topic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Topic::release_topic_name() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.Topic.topic_name)
  if (!_internal_has_topic_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = topic_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (topic_name_.IsDefault()) {
    topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Topic::set_allocated_topic_name(std::string* topic_name) {
  if (topic_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topic_name_.SetAllocated(topic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (topic_name_.IsDefault()) {
    topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.Topic.topic_name)
}

// optional int64 topic_id = 2;
inline bool Topic::_internal_has_topic_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Topic::has_topic_id() const {
  return _internal_has_topic_id();
}
inline void Topic::clear_topic_id() {
  topic_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Topic::_internal_topic_id() const {
  return topic_id_;
}
inline int64_t Topic::topic_id() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Topic.topic_id)
  return _internal_topic_id();
}
inline void Topic::_internal_set_topic_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  topic_id_ = value;
}
inline void Topic::set_topic_id(int64_t value) {
  _internal_set_topic_id(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Topic.topic_id)
}

// -------------------------------------------------------------------

// TopicTaxonomy

// optional int64 version = 1;
inline bool TopicTaxonomy::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopicTaxonomy::has_version() const {
  return _internal_has_version();
}
inline void TopicTaxonomy::clear_version() {
  version_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t TopicTaxonomy::_internal_version() const {
  return version_;
}
inline int64_t TopicTaxonomy::version() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.TopicTaxonomy.version)
  return _internal_version();
}
inline void TopicTaxonomy::_internal_set_version(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void TopicTaxonomy::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.TopicTaxonomy.version)
}

// repeated .optimization_guide.proto.Topic topics = 2;
inline int TopicTaxonomy::_internal_topics_size() const {
  return topics_.size();
}
inline int TopicTaxonomy::topics_size() const {
  return _internal_topics_size();
}
inline void TopicTaxonomy::clear_topics() {
  topics_.Clear();
}
inline ::optimization_guide::proto::Topic* TopicTaxonomy::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.TopicTaxonomy.topics)
  return topics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Topic >*
TopicTaxonomy::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.TopicTaxonomy.topics)
  return &topics_;
}
inline const ::optimization_guide::proto::Topic& TopicTaxonomy::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const ::optimization_guide::proto::Topic& TopicTaxonomy::topics(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.TopicTaxonomy.topics)
  return _internal_topics(index);
}
inline ::optimization_guide::proto::Topic* TopicTaxonomy::_internal_add_topics() {
  return topics_.Add();
}
inline ::optimization_guide::proto::Topic* TopicTaxonomy::add_topics() {
  ::optimization_guide::proto::Topic* _add = _internal_add_topics();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.TopicTaxonomy.topics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Topic >&
TopicTaxonomy::topics() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.TopicTaxonomy.topics)
  return topics_;
}

// -------------------------------------------------------------------

// PageTopicsModelMetadata

// optional int64 version = 1;
inline bool PageTopicsModelMetadata::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PageTopicsModelMetadata::has_version() const {
  return _internal_has_version();
}
inline void PageTopicsModelMetadata::clear_version() {
  version_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t PageTopicsModelMetadata::_internal_version() const {
  return version_;
}
inline int64_t PageTopicsModelMetadata::version() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageTopicsModelMetadata.version)
  return _internal_version();
}
inline void PageTopicsModelMetadata::_internal_set_version(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void PageTopicsModelMetadata::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PageTopicsModelMetadata.version)
}

// repeated .optimization_guide.proto.PageTopicsSupportedOutput supported_output = 2;
inline int PageTopicsModelMetadata::_internal_supported_output_size() const {
  return supported_output_.size();
}
inline int PageTopicsModelMetadata::supported_output_size() const {
  return _internal_supported_output_size();
}
inline void PageTopicsModelMetadata::clear_supported_output() {
  supported_output_.Clear();
}
inline ::optimization_guide::proto::PageTopicsSupportedOutput PageTopicsModelMetadata::_internal_supported_output(int index) const {
  return static_cast< ::optimization_guide::proto::PageTopicsSupportedOutput >(supported_output_.Get(index));
}
inline ::optimization_guide::proto::PageTopicsSupportedOutput PageTopicsModelMetadata::supported_output(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageTopicsModelMetadata.supported_output)
  return _internal_supported_output(index);
}
inline void PageTopicsModelMetadata::set_supported_output(int index, ::optimization_guide::proto::PageTopicsSupportedOutput value) {
  assert(::optimization_guide::proto::PageTopicsSupportedOutput_IsValid(value));
  supported_output_.Set(index, value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PageTopicsModelMetadata.supported_output)
}
inline void PageTopicsModelMetadata::_internal_add_supported_output(::optimization_guide::proto::PageTopicsSupportedOutput value) {
  assert(::optimization_guide::proto::PageTopicsSupportedOutput_IsValid(value));
  supported_output_.Add(value);
}
inline void PageTopicsModelMetadata::add_supported_output(::optimization_guide::proto::PageTopicsSupportedOutput value) {
  _internal_add_supported_output(value);
  // @@protoc_insertion_point(field_add:optimization_guide.proto.PageTopicsModelMetadata.supported_output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PageTopicsModelMetadata::supported_output() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.PageTopicsModelMetadata.supported_output)
  return supported_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PageTopicsModelMetadata::_internal_mutable_supported_output() {
  return &supported_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PageTopicsModelMetadata::mutable_supported_output() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.PageTopicsModelMetadata.supported_output)
  return _internal_mutable_supported_output();
}

// optional .optimization_guide.proto.PageTopicsOutputPostprocessingParams output_postprocessing_params = 3;
inline bool PageTopicsModelMetadata::_internal_has_output_postprocessing_params() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || output_postprocessing_params_ != nullptr);
  return value;
}
inline bool PageTopicsModelMetadata::has_output_postprocessing_params() const {
  return _internal_has_output_postprocessing_params();
}
inline void PageTopicsModelMetadata::clear_output_postprocessing_params() {
  if (output_postprocessing_params_ != nullptr) output_postprocessing_params_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::optimization_guide::proto::PageTopicsOutputPostprocessingParams& PageTopicsModelMetadata::_internal_output_postprocessing_params() const {
  const ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* p = output_postprocessing_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimization_guide::proto::PageTopicsOutputPostprocessingParams&>(
      ::optimization_guide::proto::_PageTopicsOutputPostprocessingParams_default_instance_);
}
inline const ::optimization_guide::proto::PageTopicsOutputPostprocessingParams& PageTopicsModelMetadata::output_postprocessing_params() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageTopicsModelMetadata.output_postprocessing_params)
  return _internal_output_postprocessing_params();
}
inline void PageTopicsModelMetadata::unsafe_arena_set_allocated_output_postprocessing_params(
    ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* output_postprocessing_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_postprocessing_params_);
  }
  output_postprocessing_params_ = output_postprocessing_params;
  if (output_postprocessing_params) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.PageTopicsModelMetadata.output_postprocessing_params)
}
inline ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* PageTopicsModelMetadata::release_output_postprocessing_params() {
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* temp = output_postprocessing_params_;
  output_postprocessing_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* PageTopicsModelMetadata::unsafe_arena_release_output_postprocessing_params() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.PageTopicsModelMetadata.output_postprocessing_params)
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* temp = output_postprocessing_params_;
  output_postprocessing_params_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* PageTopicsModelMetadata::_internal_mutable_output_postprocessing_params() {
  _has_bits_[0] |= 0x00000001u;
  if (output_postprocessing_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::PageTopicsOutputPostprocessingParams>(GetArenaForAllocation());
    output_postprocessing_params_ = p;
  }
  return output_postprocessing_params_;
}
inline ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* PageTopicsModelMetadata::mutable_output_postprocessing_params() {
  ::optimization_guide::proto::PageTopicsOutputPostprocessingParams* _msg = _internal_mutable_output_postprocessing_params();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PageTopicsModelMetadata.output_postprocessing_params)
  return _msg;
}
inline void PageTopicsModelMetadata::set_allocated_output_postprocessing_params(::optimization_guide::proto::PageTopicsOutputPostprocessingParams* output_postprocessing_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete output_postprocessing_params_;
  }
  if (output_postprocessing_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(output_postprocessing_params);
    if (message_arena != submessage_arena) {
      output_postprocessing_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_postprocessing_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_postprocessing_params_ = output_postprocessing_params;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.PageTopicsModelMetadata.output_postprocessing_params)
}

// optional .optimization_guide.proto.TopicTaxonomy topic_taxonomy = 5;
inline bool PageTopicsModelMetadata::_internal_has_topic_taxonomy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || topic_taxonomy_ != nullptr);
  return value;
}
inline bool PageTopicsModelMetadata::has_topic_taxonomy() const {
  return _internal_has_topic_taxonomy();
}
inline void PageTopicsModelMetadata::clear_topic_taxonomy() {
  if (topic_taxonomy_ != nullptr) topic_taxonomy_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::optimization_guide::proto::TopicTaxonomy& PageTopicsModelMetadata::_internal_topic_taxonomy() const {
  const ::optimization_guide::proto::TopicTaxonomy* p = topic_taxonomy_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimization_guide::proto::TopicTaxonomy&>(
      ::optimization_guide::proto::_TopicTaxonomy_default_instance_);
}
inline const ::optimization_guide::proto::TopicTaxonomy& PageTopicsModelMetadata::topic_taxonomy() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageTopicsModelMetadata.topic_taxonomy)
  return _internal_topic_taxonomy();
}
inline void PageTopicsModelMetadata::unsafe_arena_set_allocated_topic_taxonomy(
    ::optimization_guide::proto::TopicTaxonomy* topic_taxonomy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic_taxonomy_);
  }
  topic_taxonomy_ = topic_taxonomy;
  if (topic_taxonomy) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.PageTopicsModelMetadata.topic_taxonomy)
}
inline ::optimization_guide::proto::TopicTaxonomy* PageTopicsModelMetadata::release_topic_taxonomy() {
  _has_bits_[0] &= ~0x00000002u;
  ::optimization_guide::proto::TopicTaxonomy* temp = topic_taxonomy_;
  topic_taxonomy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimization_guide::proto::TopicTaxonomy* PageTopicsModelMetadata::unsafe_arena_release_topic_taxonomy() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.PageTopicsModelMetadata.topic_taxonomy)
  _has_bits_[0] &= ~0x00000002u;
  ::optimization_guide::proto::TopicTaxonomy* temp = topic_taxonomy_;
  topic_taxonomy_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::TopicTaxonomy* PageTopicsModelMetadata::_internal_mutable_topic_taxonomy() {
  _has_bits_[0] |= 0x00000002u;
  if (topic_taxonomy_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::TopicTaxonomy>(GetArenaForAllocation());
    topic_taxonomy_ = p;
  }
  return topic_taxonomy_;
}
inline ::optimization_guide::proto::TopicTaxonomy* PageTopicsModelMetadata::mutable_topic_taxonomy() {
  ::optimization_guide::proto::TopicTaxonomy* _msg = _internal_mutable_topic_taxonomy();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PageTopicsModelMetadata.topic_taxonomy)
  return _msg;
}
inline void PageTopicsModelMetadata::set_allocated_topic_taxonomy(::optimization_guide::proto::TopicTaxonomy* topic_taxonomy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete topic_taxonomy_;
  }
  if (topic_taxonomy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topic_taxonomy);
    if (message_arena != submessage_arena) {
      topic_taxonomy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_taxonomy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  topic_taxonomy_ = topic_taxonomy;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.PageTopicsModelMetadata.topic_taxonomy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace optimization_guide

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::optimization_guide::proto::PageTopicsSupportedOutput> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fpage_5ftopics_5fmodel_5fmetadata_2eproto
