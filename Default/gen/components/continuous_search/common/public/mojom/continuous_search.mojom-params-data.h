// components/continuous_search/common/public/mojom/continuous_search.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_CONTINUOUS_SEARCH_COMMON_PUBLIC_MOJOM_CONTINUOUS_SEARCH_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_CONTINUOUS_SEARCH_COMMON_PUBLIC_MOJOM_CONTINUOUS_SEARCH_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace continuous_search {
namespace mojom {
namespace internal {

class ValidationContext;
class  SearchResultExtractor_ExtractCurrentSearchResults_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> result_types;

 private:
  friend class mojo::internal::MessageFragment<SearchResultExtractor_ExtractCurrentSearchResults_Params_Data>;

  SearchResultExtractor_ExtractCurrentSearchResults_Params_Data();
  ~SearchResultExtractor_ExtractCurrentSearchResults_Params_Data() = delete;
};
static_assert(sizeof(SearchResultExtractor_ExtractCurrentSearchResults_Params_Data) == 16,
              "Bad sizeof(SearchResultExtractor_ExtractCurrentSearchResults_Params_Data)");
class  SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::CategoryResults_Data> results;

 private:
  friend class mojo::internal::MessageFragment<SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams_Data>;

  SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams_Data();
  ~SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams_Data() = delete;
};
static_assert(sizeof(SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams_Data) == 24,
              "Bad sizeof(SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams_Data)");

}  // namespace internal


class SearchResultExtractor_ExtractCurrentSearchResults_ParamsDataView {
 public:
  SearchResultExtractor_ExtractCurrentSearchResults_ParamsDataView() = default;

  SearchResultExtractor_ExtractCurrentSearchResults_ParamsDataView(
      internal::SearchResultExtractor_ExtractCurrentSearchResults_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultTypesDataView(
      mojo::ArrayDataView<ResultType>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResultTypes(UserType* output) {
    
    auto* pointer = data_->result_types.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::continuous_search::mojom::ResultType>>(
        pointer, output, message_);
  }
 private:
  internal::SearchResultExtractor_ExtractCurrentSearchResults_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SearchResultExtractor_ExtractCurrentSearchResults_ResponseParamsDataView {
 public:
  SearchResultExtractor_ExtractCurrentSearchResults_ResponseParamsDataView() = default;

  SearchResultExtractor_ExtractCurrentSearchResults_ResponseParamsDataView(
      internal::SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::continuous_search::mojom::SearchResultExtractor_Status>(
        data_value, output);
  }
  SearchResultExtractor_Status status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::continuous_search::mojom::SearchResultExtractor_Status>(data_->status));
  }
  inline void GetResultsDataView(
      CategoryResultsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResults(UserType* output) {
    
    auto* pointer = data_->results.Get();
    return mojo::internal::Deserialize<::continuous_search::mojom::CategoryResultsDataView>(
        pointer, output, message_);
  }
 private:
  internal::SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void SearchResultExtractor_ExtractCurrentSearchResults_ParamsDataView::GetResultTypesDataView(
    mojo::ArrayDataView<ResultType>* output) {
  auto pointer = data_->result_types.Get();
  *output = mojo::ArrayDataView<ResultType>(pointer, message_);
}


inline void SearchResultExtractor_ExtractCurrentSearchResults_ResponseParamsDataView::GetResultsDataView(
    CategoryResultsDataView* output) {
  auto pointer = data_->results.Get();
  *output = CategoryResultsDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace continuous_search

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_CONTINUOUS_SEARCH_COMMON_PUBLIC_MOJOM_CONTINUOUS_SEARCH_MOJOM_PARAMS_DATA_H_