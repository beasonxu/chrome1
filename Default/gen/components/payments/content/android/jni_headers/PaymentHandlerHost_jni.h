// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/payments/PaymentHandlerHost

#ifndef org_chromium_components_payments_PaymentHandlerHost_JNI
#define org_chromium_components_payments_PaymentHandlerHost_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_payments_PaymentHandlerHost[];
const char kClassPath_org_chromium_components_payments_PaymentHandlerHost[] =
    "org/chromium/components/payments/PaymentHandlerHost";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_payments_PaymentHandlerHost_clazz(nullptr);
#ifndef org_chromium_components_payments_PaymentHandlerHost_clazz_defined
#define org_chromium_components_payments_PaymentHandlerHost_clazz_defined
inline jclass org_chromium_components_payments_PaymentHandlerHost_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_payments_PaymentHandlerHost,
      &g_org_chromium_components_payments_PaymentHandlerHost_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace payments {
namespace android {

static jlong JNI_PaymentHandlerHost_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    webContents,
    const base::android::JavaParamRef<jobject>& listener);

JNI_GENERATOR_EXPORT jlong Java_J_N_MNMwlyDN(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents,
    jobject listener) {
  return JNI_PaymentHandlerHost_Init(env, base::android::JavaParamRef<jobject>(env, webContents),
      base::android::JavaParamRef<jobject>(env, listener));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MP9HwcPo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePaymentHandlerHost) {
  PaymentHandlerHost* native = reinterpret_cast<PaymentHandlerHost*>(nativePaymentHandlerHost);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsWaitingForPaymentDetailsUpdate", false);
  return native->IsWaitingForPaymentDetailsUpdate(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MctjpILQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePaymentHandlerHost,
    jobject responseBuffer) {
  PaymentHandlerHost* native = reinterpret_cast<PaymentHandlerHost*>(nativePaymentHandlerHost);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateWith");
  return native->UpdateWith(env, base::android::JavaParamRef<jobject>(env, responseBuffer));
}

JNI_GENERATOR_EXPORT void Java_J_N_MMPRXzHl(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePaymentHandlerHost) {
  PaymentHandlerHost* native = reinterpret_cast<PaymentHandlerHost*>(nativePaymentHandlerHost);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPaymentDetailsNotUpdated");
  return native->OnPaymentDetailsNotUpdated(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MDWZVETg(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePaymentHandlerHost) {
  PaymentHandlerHost* native = reinterpret_cast<PaymentHandlerHost*>(nativePaymentHandlerHost);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}


static std::atomic<jmethodID>
    g_org_chromium_components_payments_PaymentHandlerHost_getNativeBridge(nullptr);
static jlong Java_PaymentHandlerHost_getNativeBridge(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_payments_PaymentHandlerHost_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_payments_PaymentHandlerHost_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativeBridge",
          "()J",
          &g_org_chromium_components_payments_PaymentHandlerHost_getNativeBridge);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace android
}  // namespace payments

#endif  // org_chromium_components_payments_PaymentHandlerHost_JNI
