// components/media_router/common/mojom/route_request_result_code.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "components/media_router/common/mojom/route_request_result_code.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/media_router/common/mojom/route_request_result_code.mojom-params-data.h"
namespace media_router {
namespace mojom {

static NOINLINE const char* RouteRequestResultCodeToStringHelper(RouteRequestResultCode value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case RouteRequestResultCode::UNKNOWN_ERROR:
      return "UNKNOWN_ERROR";
    case RouteRequestResultCode::OK:
      return "OK";
    case RouteRequestResultCode::TIMED_OUT:
      return "TIMED_OUT";
    case RouteRequestResultCode::ROUTE_NOT_FOUND:
      return "ROUTE_NOT_FOUND";
    case RouteRequestResultCode::SINK_NOT_FOUND:
      return "SINK_NOT_FOUND";
    case RouteRequestResultCode::INVALID_ORIGIN:
      return "INVALID_ORIGIN";
    case RouteRequestResultCode::DEPRECATED_OFF_THE_RECORD_MISMATCH:
      return "DEPRECATED_OFF_THE_RECORD_MISMATCH";
    case RouteRequestResultCode::NO_SUPPORTED_PROVIDER:
      return "NO_SUPPORTED_PROVIDER";
    case RouteRequestResultCode::CANCELLED:
      return "CANCELLED";
    case RouteRequestResultCode::ROUTE_ALREADY_EXISTS:
      return "ROUTE_ALREADY_EXISTS";
    case RouteRequestResultCode::DESKTOP_PICKER_FAILED:
      return "DESKTOP_PICKER_FAILED";
    case RouteRequestResultCode::ROUTE_ALREADY_TERMINATED:
      return "ROUTE_ALREADY_TERMINATED";
    case RouteRequestResultCode::REDUNDANT_REQUEST:
      return "REDUNDANT_REQUEST";
    default:
      return nullptr;
  }
}

std::string RouteRequestResultCodeToString(RouteRequestResultCode value) {
  const char *str = RouteRequestResultCodeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown RouteRequestResultCode value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, RouteRequestResultCode value) {
  return os << RouteRequestResultCodeToString(value);
}

namespace internal {

}  // namespace internal
}  // namespace mojom
}  // namespace media_router

namespace perfetto {

// static
void TraceFormatTraits<::media_router::mojom::RouteRequestResultCode>::WriteIntoTrace(
   perfetto::TracedValue context, ::media_router::mojom::RouteRequestResultCode value) {
  return std::move(context).WriteString(::media_router::mojom::RouteRequestResultCodeToString(value));
}

} // namespace perfetto