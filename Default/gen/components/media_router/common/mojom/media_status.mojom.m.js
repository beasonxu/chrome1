// components/media_router/common/mojom/media_status.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../mojo/public/js/bindings.js';

import {
  TimeDelta as mojoBase_mojom_TimeDelta,
  TimeDeltaSpec as mojoBase_mojom_TimeDeltaSpec
} from '../../../../mojo/public/mojom/base/time.mojom.m.js';

import {
  Size as gfx_mojom_Size,
  SizeSpec as gfx_mojom_SizeSpec
} from '../../../../ui/gfx/geometry/mojom/geometry.mojom.m.js';

import {
  Url as url_mojom_Url,
  UrlSpec as url_mojom_UrlSpec
} from '../../../../url/mojom/url.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MediaStatusObserverPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media_router.mojom.MediaStatusObserver', scope);
  }
}

/** @interface */
export class MediaStatusObserverInterface {
  
  /**
   * @param { !MediaStatus } status
   */

  onMediaStatusUpdated(status) {}
}

/**
 * @implements { MediaStatusObserverInterface }
 */
export class MediaStatusObserverRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MediaStatusObserverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MediaStatusObserverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MediaStatusObserverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !MediaStatus } status
   */

  onMediaStatusUpdated(
      status) {
    this.proxy.sendMessage(
        0,
        MediaStatusObserver_OnMediaStatusUpdated_ParamsSpec.$,
        null,
        [
          status
        ]);
  }
}

/**
 * An object which receives request messages for the MediaStatusObserver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MediaStatusObserverReceiver {
  /**
   * @param {!MediaStatusObserverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MediaStatusObserverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MediaStatusObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaStatusObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        MediaStatusObserver_OnMediaStatusUpdated_ParamsSpec.$,
        null,
        impl.onMediaStatusUpdated.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MediaStatusObserver {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media_router.mojom.MediaStatusObserver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!MediaStatusObserverRemote}
   */
  static getRemote() {
    let remote = new MediaStatusObserverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the MediaStatusObserver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MediaStatusObserverCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MediaStatusObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaStatusObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMediaStatusUpdated =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        MediaStatusObserver_OnMediaStatusUpdated_ParamsSpec.$,
        null,
        this.onMediaStatusUpdated.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaImageSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaStatusSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaStatusObserver_OnMediaStatusUpdated_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    MediaImageSpec.$,
    'MediaImage',
    [
      mojo.internal.StructField(
        'url', 0,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'size', 8,
        0,
        gfx_mojom_SizeSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class MediaImage {
  constructor() {
    /** @type { !url_mojom_Url } */
    this.url;
    /** @type { (gfx_mojom_Size|undefined) } */
    this.size;
  }
}


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const MediaStatus_PlayStateSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const MediaStatus_PlayState = {
  
  PLAYING: 0,
  PAUSED: 1,
  BUFFERING: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};


mojo.internal.Struct(
    MediaStatusSpec.$,
    'MediaStatus',
    [
      mojo.internal.StructField(
        'title', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'secondaryTitle', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'canPlayPause', 16,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'canMute', 16,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'canSetVolume', 16,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'canSeek', 16,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'canSkipToNextTrack', 16,
        4,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'canSkipToPreviousTrack', 16,
        5,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'playState', 20,
        0,
        MediaStatus_PlayStateSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isMuted', 16,
        6,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'volume', 24,
        0,
        mojo.internal.Float,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'duration', 32,
        0,
        mojoBase_mojom_TimeDeltaSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'currentTime', 40,
        0,
        mojoBase_mojom_TimeDeltaSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'images', 48,
        0,
        mojo.internal.Array(MediaImageSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 64],]);



/**
 * @record
 */
export class MediaStatus {
  constructor() {
    /** @type { !string } */
    this.title;
    /** @type { !string } */
    this.secondaryTitle;
    /** @type { !boolean } */
    this.canPlayPause;
    /** @type { !boolean } */
    this.canMute;
    /** @type { !boolean } */
    this.canSetVolume;
    /** @type { !boolean } */
    this.canSeek;
    /** @type { !boolean } */
    this.canSkipToNextTrack;
    /** @type { !boolean } */
    this.canSkipToPreviousTrack;
    /** @type { !boolean } */
    this.isMuted;
    /** @type { !MediaStatus_PlayState } */
    this.playState;
    /** @type { !number } */
    this.volume;
    /** @type { !mojoBase_mojom_TimeDelta } */
    this.duration;
    /** @type { !mojoBase_mojom_TimeDelta } */
    this.currentTime;
    /** @type { !Array<!MediaImage> } */
    this.images;
  }
}



mojo.internal.Struct(
    MediaStatusObserver_OnMediaStatusUpdated_ParamsSpec.$,
    'MediaStatusObserver_OnMediaStatusUpdated_Params',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        MediaStatusSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaStatusObserver_OnMediaStatusUpdated_Params {
  constructor() {
    /** @type { !MediaStatus } */
    this.status;
  }
}

