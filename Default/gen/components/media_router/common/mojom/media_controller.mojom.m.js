// components/media_router/common/mojom/media_controller.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../mojo/public/js/bindings.js';

import {
  TimeDelta as mojoBase_mojom_TimeDelta,
  TimeDeltaSpec as mojoBase_mojom_TimeDeltaSpec
} from '../../../../mojo/public/mojom/base/time.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MediaControllerPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media_router.mojom.MediaController', scope);
  }
}

/** @interface */
export class MediaControllerInterface {
  
  /**
   */

  play() {}
  
  /**
   */

  pause() {}
  
  /**
   * @param { !boolean } mute
   */

  setMute(mute) {}
  
  /**
   * @param { !number } volume
   */

  setVolume(volume) {}
  
  /**
   * @param { !mojoBase_mojom_TimeDelta } time
   */

  seek(time) {}
  
  /**
   */

  nextTrack() {}
  
  /**
   */

  previousTrack() {}
}

/**
 * @implements { MediaControllerInterface }
 */
export class MediaControllerRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MediaControllerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MediaControllerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MediaControllerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  play() {
    this.proxy.sendMessage(
        0,
        MediaController_Play_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  pause() {
    this.proxy.sendMessage(
        1,
        MediaController_Pause_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !boolean } mute
   */

  setMute(
      mute) {
    this.proxy.sendMessage(
        2,
        MediaController_SetMute_ParamsSpec.$,
        null,
        [
          mute
        ]);
  }

  
  /**
   * @param { !number } volume
   */

  setVolume(
      volume) {
    this.proxy.sendMessage(
        3,
        MediaController_SetVolume_ParamsSpec.$,
        null,
        [
          volume
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_TimeDelta } time
   */

  seek(
      time) {
    this.proxy.sendMessage(
        4,
        MediaController_Seek_ParamsSpec.$,
        null,
        [
          time
        ]);
  }

  
  /**
   */

  nextTrack() {
    this.proxy.sendMessage(
        5,
        MediaController_NextTrack_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  previousTrack() {
    this.proxy.sendMessage(
        6,
        MediaController_PreviousTrack_ParamsSpec.$,
        null,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the MediaController
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MediaControllerReceiver {
  /**
   * @param {!MediaControllerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MediaControllerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MediaControllerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaControllerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        MediaController_Play_ParamsSpec.$,
        null,
        impl.play.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        MediaController_Pause_ParamsSpec.$,
        null,
        impl.pause.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        MediaController_SetMute_ParamsSpec.$,
        null,
        impl.setMute.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        MediaController_SetVolume_ParamsSpec.$,
        null,
        impl.setVolume.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        MediaController_Seek_ParamsSpec.$,
        null,
        impl.seek.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        MediaController_NextTrack_ParamsSpec.$,
        null,
        impl.nextTrack.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        MediaController_PreviousTrack_ParamsSpec.$,
        null,
        impl.previousTrack.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MediaController {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media_router.mojom.MediaController";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!MediaControllerRemote}
   */
  static getRemote() {
    let remote = new MediaControllerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the MediaController
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MediaControllerCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MediaControllerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaControllerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.play =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        MediaController_Play_ParamsSpec.$,
        null,
        this.play.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.pause =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        MediaController_Pause_ParamsSpec.$,
        null,
        this.pause.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setMute =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        MediaController_SetMute_ParamsSpec.$,
        null,
        this.setMute.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setVolume =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        MediaController_SetVolume_ParamsSpec.$,
        null,
        this.setVolume.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.seek =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        MediaController_Seek_ParamsSpec.$,
        null,
        this.seek.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.nextTrack =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        MediaController_NextTrack_ParamsSpec.$,
        null,
        this.nextTrack.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.previousTrack =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        MediaController_PreviousTrack_ParamsSpec.$,
        null,
        this.previousTrack.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaController_Play_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaController_Pause_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaController_SetMute_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaController_SetVolume_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaController_Seek_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaController_NextTrack_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaController_PreviousTrack_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    MediaController_Play_ParamsSpec.$,
    'MediaController_Play_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class MediaController_Play_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    MediaController_Pause_ParamsSpec.$,
    'MediaController_Pause_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class MediaController_Pause_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    MediaController_SetMute_ParamsSpec.$,
    'MediaController_SetMute_Params',
    [
      mojo.internal.StructField(
        'mute', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaController_SetMute_Params {
  constructor() {
    /** @type { !boolean } */
    this.mute;
  }
}



mojo.internal.Struct(
    MediaController_SetVolume_ParamsSpec.$,
    'MediaController_SetVolume_Params',
    [
      mojo.internal.StructField(
        'volume', 0,
        0,
        mojo.internal.Float,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaController_SetVolume_Params {
  constructor() {
    /** @type { !number } */
    this.volume;
  }
}



mojo.internal.Struct(
    MediaController_Seek_ParamsSpec.$,
    'MediaController_Seek_Params',
    [
      mojo.internal.StructField(
        'time', 0,
        0,
        mojoBase_mojom_TimeDeltaSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaController_Seek_Params {
  constructor() {
    /** @type { !mojoBase_mojom_TimeDelta } */
    this.time;
  }
}



mojo.internal.Struct(
    MediaController_NextTrack_ParamsSpec.$,
    'MediaController_NextTrack_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class MediaController_NextTrack_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    MediaController_PreviousTrack_ParamsSpec.$,
    'MediaController_PreviousTrack_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class MediaController_PreviousTrack_Params {
  constructor() {
  }
}

