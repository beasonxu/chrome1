// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/webapps/AppBannerManager

#ifndef org_chromium_components_webapps_AppBannerManager_JNI
#define org_chromium_components_webapps_AppBannerManager_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_webapps_AppBannerManager[];
const char kClassPath_org_chromium_components_webapps_AppBannerManager[] =
    "org/chromium/components/webapps/AppBannerManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_webapps_AppBannerManager_clazz(nullptr);
#ifndef org_chromium_components_webapps_AppBannerManager_clazz_defined
#define org_chromium_components_webapps_AppBannerManager_clazz_defined
inline jclass org_chromium_components_webapps_AppBannerManager_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_webapps_AppBannerManager,
      &g_org_chromium_components_webapps_AppBannerManager_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace webapps {

static base::android::ScopedJavaLocalRef<jobject>
    JNI_AppBannerManager_GetJavaBannerManagerForWebContents(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jobject Java_J_N_MbHcYdCX(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents) {
  return JNI_AppBannerManager_GetJavaBannerManagerForWebContents(env,
      base::android::JavaParamRef<jobject>(env, webContents)).Release();
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_AppBannerManager_GetInstallableWebAppName(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jstring Java_J_N_MvBgz9uo(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents) {
  return JNI_AppBannerManager_GetInstallableWebAppName(env,
      base::android::JavaParamRef<jobject>(env, webContents)).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MpPa5KMX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAppBannerManagerAndroid,
    jobject caller,
    jobject data,
    jstring title,
    jstring packageName,
    jstring imageUrl) {
  AppBannerManagerAndroid* native =
      reinterpret_cast<AppBannerManagerAndroid*>(nativeAppBannerManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAppDetailsRetrieved", false);
  return native->OnAppDetailsRetrieved(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, data), base::android::JavaParamRef<jstring>(env,
      title), base::android::JavaParamRef<jstring>(env, packageName),
      base::android::JavaParamRef<jstring>(env, imageUrl));
}

static void JNI_AppBannerManager_IgnoreChromeChannelForTesting(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MM2ZWACv_1ForTesting(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AppBannerManager_IgnoreChromeChannelForTesting(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MDGrb_00024rI_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAppBannerManagerAndroid,
    jobject caller) {
  AppBannerManagerAndroid* native =
      reinterpret_cast<AppBannerManagerAndroid*>(nativeAppBannerManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsRunningForTesting", false);
  return native->IsRunningForTesting(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jint Java_J_N_M5hgx3lE_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAppBannerManagerAndroid) {
  AppBannerManagerAndroid* native =
      reinterpret_cast<AppBannerManagerAndroid*>(nativeAppBannerManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPipelineStatusForTesting", 0);
  return native->GetPipelineStatusForTesting(env);
}

static void JNI_AppBannerManager_SetDaysAfterDismissAndIgnoreToTrigger(JNIEnv* env, jint
    dismissDays,
    jint ignoreDays);

JNI_GENERATOR_EXPORT void Java_J_N_M69uI4fw(
    JNIEnv* env,
    jclass jcaller,
    jint dismissDays,
    jint ignoreDays) {
  return JNI_AppBannerManager_SetDaysAfterDismissAndIgnoreToTrigger(env, dismissDays, ignoreDays);
}

static void JNI_AppBannerManager_SetTimeDeltaForTesting(JNIEnv* env, jint days);

JNI_GENERATOR_EXPORT void Java_J_N_Mp7oANTj_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jint days) {
  return JNI_AppBannerManager_SetTimeDeltaForTesting(env, days);
}

static void JNI_AppBannerManager_SetTotalEngagementToTrigger(JNIEnv* env, jdouble engagement);

JNI_GENERATOR_EXPORT void Java_J_N_MP4_00024M5HJ(
    JNIEnv* env,
    jclass jcaller,
    jdouble engagement) {
  return JNI_AppBannerManager_SetTotalEngagementToTrigger(env, engagement);
}


static std::atomic<jmethodID>
    g_org_chromium_components_webapps_AppBannerManager_isSupported(nullptr);
static jboolean Java_AppBannerManager_isSupported(JNIEnv* env) {
  jclass clazz = org_chromium_components_webapps_AppBannerManager_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webapps_AppBannerManager_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isSupported",
          "()Z",
          &g_org_chromium_components_webapps_AppBannerManager_isSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_components_webapps_AppBannerManager_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_AppBannerManager_create(JNIEnv* env, jlong
    nativePointer) {
  jclass clazz = org_chromium_components_webapps_AppBannerManager_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webapps_AppBannerManager_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/components/webapps/AppBannerManager;",
          &g_org_chromium_components_webapps_AppBannerManager_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePointer);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_components_webapps_AppBannerManager_destroy(nullptr);
static void Java_AppBannerManager_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_webapps_AppBannerManager_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_webapps_AppBannerManager_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_components_webapps_AppBannerManager_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_webapps_AppBannerManager_fetchAppDetails(nullptr);
static void Java_AppBannerManager_fetchAppDetails(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& packageName,
    const base::android::JavaRef<jstring>& referrer,
    JniIntWrapper iconSizeInDp) {
  jclass clazz = org_chromium_components_webapps_AppBannerManager_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_webapps_AppBannerManager_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "fetchAppDetails",
          "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V",
          &g_org_chromium_components_webapps_AppBannerManager_fetchAppDetails);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), packageName.obj(), referrer.obj(),
              as_jint(iconSizeInDp));
}

}  // namespace webapps

#endif  // org_chromium_components_webapps_AppBannerManager_JNI
