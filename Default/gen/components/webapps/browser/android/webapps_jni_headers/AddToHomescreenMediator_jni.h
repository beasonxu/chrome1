// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/webapps/AddToHomescreenMediator

#ifndef org_chromium_components_webapps_AddToHomescreenMediator_JNI
#define org_chromium_components_webapps_AddToHomescreenMediator_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_webapps_AddToHomescreenMediator[];
const char kClassPath_org_chromium_components_webapps_AddToHomescreenMediator[] =
    "org/chromium/components/webapps/AddToHomescreenMediator";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_webapps_AddToHomescreenMediator_clazz(nullptr);
#ifndef org_chromium_components_webapps_AddToHomescreenMediator_clazz_defined
#define org_chromium_components_webapps_AddToHomescreenMediator_clazz_defined
inline jclass org_chromium_components_webapps_AddToHomescreenMediator_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_webapps_AddToHomescreenMediator,
      &g_org_chromium_components_webapps_AddToHomescreenMediator_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace webapps {

static jlong JNI_AddToHomescreenMediator_Initialize(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& instance);

JNI_GENERATOR_EXPORT jlong Java_J_N_MBJ_1fnwd(
    JNIEnv* env,
    jclass jcaller,
    jobject instance) {
  return JNI_AddToHomescreenMediator_Initialize(env, base::android::JavaParamRef<jobject>(env,
      instance));
}

JNI_GENERATOR_EXPORT void Java_J_N_MH3_1t6hY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAddToHomescreenMediator,
    jobject webContents,
    jint titleId) {
  AddToHomescreenMediator* native =
      reinterpret_cast<AddToHomescreenMediator*>(nativeAddToHomescreenMediator);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartForAppMenu");
  return native->StartForAppMenu(env, base::android::JavaParamRef<jobject>(env, webContents),
      titleId);
}

JNI_GENERATOR_EXPORT void Java_J_N_MQa5VwR6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAddToHomescreenMediator,
    jstring title) {
  AddToHomescreenMediator* native =
      reinterpret_cast<AddToHomescreenMediator*>(nativeAddToHomescreenMediator);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddToHomescreen");
  return native->AddToHomescreen(env, base::android::JavaParamRef<jstring>(env, title));
}

JNI_GENERATOR_EXPORT void Java_J_N_MpeFYmhO(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAddToHomescreenMediator) {
  AddToHomescreenMediator* native =
      reinterpret_cast<AddToHomescreenMediator*>(nativeAddToHomescreenMediator);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnNativeDetailsShown");
  return native->OnNativeDetailsShown(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_M3ujfdbM(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAddToHomescreenMediator) {
  AddToHomescreenMediator* native =
      reinterpret_cast<AddToHomescreenMediator*>(nativeAddToHomescreenMediator);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnUiDismissed");
  return native->OnUiDismissed(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MwQAZYNv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAddToHomescreenMediator) {
  AddToHomescreenMediator* native =
      reinterpret_cast<AddToHomescreenMediator*>(nativeAddToHomescreenMediator);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}


static std::atomic<jmethodID>
    g_org_chromium_components_webapps_AddToHomescreenMediator_setIcon(nullptr);
static void Java_AddToHomescreenMediator_setIcon(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& icon,
    jboolean isAdaptive,
    jboolean needToAddPadding) {
  jclass clazz = org_chromium_components_webapps_AddToHomescreenMediator_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_webapps_AddToHomescreenMediator_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setIcon",
          "(Landroid/graphics/Bitmap;ZZ)V",
          &g_org_chromium_components_webapps_AddToHomescreenMediator_setIcon);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, icon.obj(), isAdaptive, needToAddPadding);
}

static std::atomic<jmethodID>
    g_org_chromium_components_webapps_AddToHomescreenMediator_setWebAppInfo(nullptr);
static void Java_AddToHomescreenMediator_setWebAppInfo(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jstring>& url,
    jboolean isWebApk) {
  jclass clazz = org_chromium_components_webapps_AddToHomescreenMediator_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_webapps_AddToHomescreenMediator_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setWebAppInfo",
          "(Ljava/lang/String;Ljava/lang/String;Z)V",
          &g_org_chromium_components_webapps_AddToHomescreenMediator_setWebAppInfo);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, title.obj(), url.obj(), isWebApk);
}

static std::atomic<jmethodID>
    g_org_chromium_components_webapps_AddToHomescreenMediator_setNativeAppInfo(nullptr);
static void Java_AddToHomescreenMediator_setNativeAppInfo(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& nativeAppData) {
  jclass clazz = org_chromium_components_webapps_AddToHomescreenMediator_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_webapps_AddToHomescreenMediator_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setNativeAppInfo",
          "(Lorg/chromium/components/webapps/AppData;)V",
          &g_org_chromium_components_webapps_AddToHomescreenMediator_setNativeAppInfo);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativeAppData.obj());
}

}  // namespace webapps

#endif  // org_chromium_components_webapps_AddToHomescreenMediator_JNI
