// components/webapps/services/web_app_origin_association/public/mojom/web_app_origin_association_parser.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_WEBAPPS_SERVICES_WEB_APP_ORIGIN_ASSOCIATION_PUBLIC_MOJOM_WEB_APP_ORIGIN_ASSOCIATION_PARSER_MOJOM_SHARED_H_
#define COMPONENTS_WEBAPPS_SERVICES_WEB_APP_ORIGIN_ASSOCIATION_PUBLIC_MOJOM_WEB_APP_ORIGIN_ASSOCIATION_PARSER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/webapps/services/web_app_origin_association/public/mojom/web_app_origin_association_parser.mojom-shared-internal.h"
#include "sandbox/policy/mojom/sandbox.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace webapps {
namespace mojom {
class WebAppOriginAssociationDataView;

class AssociatedWebAppDataView;

class WebAppOriginAssociationErrorDataView;



}  // namespace mojom
}  // namespace webapps

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::webapps::mojom::WebAppOriginAssociationDataView> {
  using Data = ::webapps::mojom::internal::WebAppOriginAssociation_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::webapps::mojom::AssociatedWebAppDataView> {
  using Data = ::webapps::mojom::internal::AssociatedWebApp_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::webapps::mojom::WebAppOriginAssociationErrorDataView> {
  using Data = ::webapps::mojom::internal::WebAppOriginAssociationError_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace webapps {
namespace mojom {
// Interface base classes. They are used for type safety check.
class WebAppOriginAssociationParserInterfaceBase {};

using WebAppOriginAssociationParserPtrDataView =
    mojo::InterfacePtrDataView<WebAppOriginAssociationParserInterfaceBase>;
using WebAppOriginAssociationParserRequestDataView =
    mojo::InterfaceRequestDataView<WebAppOriginAssociationParserInterfaceBase>;
using WebAppOriginAssociationParserAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<WebAppOriginAssociationParserInterfaceBase>;
using WebAppOriginAssociationParserAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<WebAppOriginAssociationParserInterfaceBase>;


class WebAppOriginAssociationDataView {
 public:
  WebAppOriginAssociationDataView() = default;

  WebAppOriginAssociationDataView(
      internal::WebAppOriginAssociation_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAppsDataView(
      mojo::ArrayDataView<AssociatedWebAppDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadApps(UserType* output) {
    
    auto* pointer = data_->apps.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::webapps::mojom::AssociatedWebAppDataView>>(
        pointer, output, message_);
  }
 private:
  internal::WebAppOriginAssociation_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AssociatedWebAppDataView {
 public:
  AssociatedWebAppDataView() = default;

  AssociatedWebAppDataView(
      internal::AssociatedWebApp_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetManifestUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadManifestUrl(UserType* output) {
    
    auto* pointer = data_->manifest_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetPathsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPaths(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<mojo::StringDataView>, UserType>(),
    "Attempting to read the optional `paths` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPaths` instead "
    "of `ReadPaths if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->paths.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
  inline void GetExcludePathsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadExcludePaths(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<mojo::StringDataView>, UserType>(),
    "Attempting to read the optional `exclude_paths` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadExcludePaths` instead "
    "of `ReadExcludePaths if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->exclude_paths.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::AssociatedWebApp_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebAppOriginAssociationErrorDataView {
 public:
  WebAppOriginAssociationErrorDataView() = default;

  WebAppOriginAssociationErrorDataView(
      internal::WebAppOriginAssociationError_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  int32_t line() const {
    return data_->line;
  }
  int32_t column() const {
    return data_->column;
  }
 private:
  internal::WebAppOriginAssociationError_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace webapps

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::webapps::mojom::WebAppOriginAssociationDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::webapps::mojom::WebAppOriginAssociationDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::webapps::mojom::internal::WebAppOriginAssociation_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::apps(input)) in_apps = Traits::apps(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->apps)::BaseType>
        apps_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams apps_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::webapps::mojom::AssociatedWebAppDataView>>(
        in_apps, apps_fragment, &apps_validate_params);
    fragment->apps.Set(
        apps_fragment.is_null() ? nullptr : apps_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->apps.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null apps in WebAppOriginAssociation struct");
  }

  static bool Deserialize(::webapps::mojom::internal::WebAppOriginAssociation_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::webapps::mojom::WebAppOriginAssociationDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::webapps::mojom::AssociatedWebAppDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::webapps::mojom::AssociatedWebAppDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::webapps::mojom::internal::AssociatedWebApp_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::manifest_url(input)) in_manifest_url = Traits::manifest_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->manifest_url)::BaseType> manifest_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_manifest_url, manifest_url_fragment);
    fragment->manifest_url.Set(
        manifest_url_fragment.is_null() ? nullptr : manifest_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->manifest_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null manifest_url in AssociatedWebApp struct");
    decltype(Traits::paths(input)) in_paths = Traits::paths(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->paths)::BaseType>
        paths_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams paths_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_paths, paths_fragment, &paths_validate_params);
    fragment->paths.Set(
        paths_fragment.is_null() ? nullptr : paths_fragment.data());
    decltype(Traits::exclude_paths(input)) in_exclude_paths = Traits::exclude_paths(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->exclude_paths)::BaseType>
        exclude_paths_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams exclude_paths_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_exclude_paths, exclude_paths_fragment, &exclude_paths_validate_params);
    fragment->exclude_paths.Set(
        exclude_paths_fragment.is_null() ? nullptr : exclude_paths_fragment.data());
  }

  static bool Deserialize(::webapps::mojom::internal::AssociatedWebApp_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::webapps::mojom::AssociatedWebAppDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::webapps::mojom::WebAppOriginAssociationErrorDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::webapps::mojom::WebAppOriginAssociationErrorDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::webapps::mojom::internal::WebAppOriginAssociationError_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::message(input)) in_message = Traits::message(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->message)::BaseType> message_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_message, message_fragment);
    fragment->message.Set(
        message_fragment.is_null() ? nullptr : message_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->message.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null message in WebAppOriginAssociationError struct");
    fragment->line = Traits::line(input);
    fragment->column = Traits::column(input);
  }

  static bool Deserialize(::webapps::mojom::internal::WebAppOriginAssociationError_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::webapps::mojom::WebAppOriginAssociationErrorDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace webapps {
namespace mojom {

inline void WebAppOriginAssociationDataView::GetAppsDataView(
    mojo::ArrayDataView<AssociatedWebAppDataView>* output) {
  auto pointer = data_->apps.Get();
  *output = mojo::ArrayDataView<AssociatedWebAppDataView>(pointer, message_);
}


inline void AssociatedWebAppDataView::GetManifestUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->manifest_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void AssociatedWebAppDataView::GetPathsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->paths.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}
inline void AssociatedWebAppDataView::GetExcludePathsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->exclude_paths.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}


inline void WebAppOriginAssociationErrorDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace webapps

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // COMPONENTS_WEBAPPS_SERVICES_WEB_APP_ORIGIN_ASSOCIATION_PUBLIC_MOJOM_WEB_APP_ORIGIN_ASSOCIATION_PARSER_MOJOM_SHARED_H_