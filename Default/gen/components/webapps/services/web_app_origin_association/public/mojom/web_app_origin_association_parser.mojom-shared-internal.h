// components/webapps/services/web_app_origin_association/public/mojom/web_app_origin_association_parser.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_WEBAPPS_SERVICES_WEB_APP_ORIGIN_ASSOCIATION_PUBLIC_MOJOM_WEB_APP_ORIGIN_ASSOCIATION_PARSER_MOJOM_SHARED_INTERNAL_H_
#define COMPONENTS_WEBAPPS_SERVICES_WEB_APP_ORIGIN_ASSOCIATION_PUBLIC_MOJOM_WEB_APP_ORIGIN_ASSOCIATION_PARSER_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "sandbox/policy/mojom/sandbox.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace webapps {
namespace mojom {
namespace internal {
class WebAppOriginAssociation_Data;
class AssociatedWebApp_Data;
class WebAppOriginAssociationError_Data;

#pragma pack(push, 1)
class  WebAppOriginAssociation_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::AssociatedWebApp_Data>>> apps;

 private:
  friend class mojo::internal::MessageFragment<WebAppOriginAssociation_Data>;

  WebAppOriginAssociation_Data();
  ~WebAppOriginAssociation_Data() = delete;
};
static_assert(sizeof(WebAppOriginAssociation_Data) == 16,
              "Bad sizeof(WebAppOriginAssociation_Data)");
// Used by WebAppOriginAssociation::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebAppOriginAssociation_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebAppOriginAssociation_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebAppOriginAssociation_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebAppOriginAssociation_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebAppOriginAssociation_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  AssociatedWebApp_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> manifest_url;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> paths;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> exclude_paths;

 private:
  friend class mojo::internal::MessageFragment<AssociatedWebApp_Data>;

  AssociatedWebApp_Data();
  ~AssociatedWebApp_Data() = delete;
};
static_assert(sizeof(AssociatedWebApp_Data) == 32,
              "Bad sizeof(AssociatedWebApp_Data)");
// Used by AssociatedWebApp::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AssociatedWebApp_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AssociatedWebApp_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AssociatedWebApp_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AssociatedWebApp_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AssociatedWebApp_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  WebAppOriginAssociationError_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> message;
  int32_t line;
  int32_t column;

 private:
  friend class mojo::internal::MessageFragment<WebAppOriginAssociationError_Data>;

  WebAppOriginAssociationError_Data();
  ~WebAppOriginAssociationError_Data() = delete;
};
static_assert(sizeof(WebAppOriginAssociationError_Data) == 24,
              "Bad sizeof(WebAppOriginAssociationError_Data)");
// Used by WebAppOriginAssociationError::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebAppOriginAssociationError_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebAppOriginAssociationError_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebAppOriginAssociationError_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebAppOriginAssociationError_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebAppOriginAssociationError_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace webapps

#endif  // COMPONENTS_WEBAPPS_SERVICES_WEB_APP_ORIGIN_ASSOCIATION_PUBLIC_MOJOM_WEB_APP_ORIGIN_ASSOCIATION_PARSER_MOJOM_SHARED_INTERNAL_H_