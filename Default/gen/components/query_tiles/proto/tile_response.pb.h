// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile_response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tile_5fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tile_5fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tile_5fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tile_5fresponse_2eproto {
  static const uint32_t offsets[];
};
namespace query_tiles {
namespace proto {
class ServerResponse;
struct ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
class TileImage;
struct TileImageDefaultTypeInternal;
extern TileImageDefaultTypeInternal _TileImage_default_instance_;
class TileInfo;
struct TileInfoDefaultTypeInternal;
extern TileInfoDefaultTypeInternal _TileInfo_default_instance_;
class TileInfoGroup;
struct TileInfoGroupDefaultTypeInternal;
extern TileInfoGroupDefaultTypeInternal _TileInfoGroup_default_instance_;
}  // namespace proto
}  // namespace query_tiles
PROTOBUF_NAMESPACE_OPEN
template<> ::query_tiles::proto::ServerResponse* Arena::CreateMaybeMessage<::query_tiles::proto::ServerResponse>(Arena*);
template<> ::query_tiles::proto::TileImage* Arena::CreateMaybeMessage<::query_tiles::proto::TileImage>(Arena*);
template<> ::query_tiles::proto::TileInfo* Arena::CreateMaybeMessage<::query_tiles::proto::TileInfo>(Arena*);
template<> ::query_tiles::proto::TileInfoGroup* Arena::CreateMaybeMessage<::query_tiles::proto::TileInfoGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace query_tiles {
namespace proto {

// ===================================================================

class TileImage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.TileImage) */ {
 public:
  inline TileImage() : TileImage(nullptr) {}
  ~TileImage() override;
  explicit PROTOBUF_CONSTEXPR TileImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TileImage(const TileImage& from);
  TileImage(TileImage&& from) noexcept
    : TileImage() {
    *this = ::std::move(from);
  }

  inline TileImage& operator=(const TileImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileImage& operator=(TileImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TileImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileImage* internal_default_instance() {
    return reinterpret_cast<const TileImage*>(
               &_TileImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TileImage& a, TileImage& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TileImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TileImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TileImage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TileImage& from);
  void MergeFrom(const TileImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TileImage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.TileImage";
  }
  protected:
  explicit TileImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:query_tiles.proto.TileImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class TileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.TileInfo) */ {
 public:
  inline TileInfo() : TileInfo(nullptr) {}
  ~TileInfo() override;
  explicit PROTOBUF_CONSTEXPR TileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TileInfo(const TileInfo& from);
  TileInfo(TileInfo&& from) noexcept
    : TileInfo() {
    *this = ::std::move(from);
  }

  inline TileInfo& operator=(const TileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileInfo& operator=(TileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileInfo* internal_default_instance() {
    return reinterpret_cast<const TileInfo*>(
               &_TileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TileInfo& a, TileInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TileInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TileInfo& from);
  void MergeFrom(const TileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.TileInfo";
  }
  protected:
  explicit TileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileImagesFieldNumber = 3,
    kSubTileIdsFieldNumber = 7,
    kSearchParamsFieldNumber = 8,
    kTileIdFieldNumber = 1,
    kQueryStringFieldNumber = 2,
    kDisplayTextFieldNumber = 4,
    kAccessibilityTextFieldNumber = 5,
    kIsTopLevelFieldNumber = 6,
  };
  // repeated .query_tiles.proto.TileImage tile_images = 3;
  int tile_images_size() const;
  private:
  int _internal_tile_images_size() const;
  public:
  void clear_tile_images();
  ::query_tiles::proto::TileImage* mutable_tile_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileImage >*
      mutable_tile_images();
  private:
  const ::query_tiles::proto::TileImage& _internal_tile_images(int index) const;
  ::query_tiles::proto::TileImage* _internal_add_tile_images();
  public:
  const ::query_tiles::proto::TileImage& tile_images(int index) const;
  ::query_tiles::proto::TileImage* add_tile_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileImage >&
      tile_images() const;

  // repeated string sub_tile_ids = 7;
  int sub_tile_ids_size() const;
  private:
  int _internal_sub_tile_ids_size() const;
  public:
  void clear_sub_tile_ids();
  const std::string& sub_tile_ids(int index) const;
  std::string* mutable_sub_tile_ids(int index);
  void set_sub_tile_ids(int index, const std::string& value);
  void set_sub_tile_ids(int index, std::string&& value);
  void set_sub_tile_ids(int index, const char* value);
  void set_sub_tile_ids(int index, const char* value, size_t size);
  std::string* add_sub_tile_ids();
  void add_sub_tile_ids(const std::string& value);
  void add_sub_tile_ids(std::string&& value);
  void add_sub_tile_ids(const char* value);
  void add_sub_tile_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sub_tile_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sub_tile_ids();
  private:
  const std::string& _internal_sub_tile_ids(int index) const;
  std::string* _internal_add_sub_tile_ids();
  public:

  // repeated string search_params = 8;
  int search_params_size() const;
  private:
  int _internal_search_params_size() const;
  public:
  void clear_search_params();
  const std::string& search_params(int index) const;
  std::string* mutable_search_params(int index);
  void set_search_params(int index, const std::string& value);
  void set_search_params(int index, std::string&& value);
  void set_search_params(int index, const char* value);
  void set_search_params(int index, const char* value, size_t size);
  std::string* add_search_params();
  void add_search_params(const std::string& value);
  void add_search_params(std::string&& value);
  void add_search_params(const char* value);
  void add_search_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& search_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_search_params();
  private:
  const std::string& _internal_search_params(int index) const;
  std::string* _internal_add_search_params();
  public:

  // string tile_id = 1;
  void clear_tile_id();
  const std::string& tile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tile_id();
  PROTOBUF_NODISCARD std::string* release_tile_id();
  void set_allocated_tile_id(std::string* tile_id);
  private:
  const std::string& _internal_tile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tile_id(const std::string& value);
  std::string* _internal_mutable_tile_id();
  public:

  // string query_string = 2;
  void clear_query_string();
  const std::string& query_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query_string();
  PROTOBUF_NODISCARD std::string* release_query_string();
  void set_allocated_query_string(std::string* query_string);
  private:
  const std::string& _internal_query_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_string(const std::string& value);
  std::string* _internal_mutable_query_string();
  public:

  // string display_text = 4;
  void clear_display_text();
  const std::string& display_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_text();
  PROTOBUF_NODISCARD std::string* release_display_text();
  void set_allocated_display_text(std::string* display_text);
  private:
  const std::string& _internal_display_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_text(const std::string& value);
  std::string* _internal_mutable_display_text();
  public:

  // string accessibility_text = 5;
  void clear_accessibility_text();
  const std::string& accessibility_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accessibility_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accessibility_text();
  PROTOBUF_NODISCARD std::string* release_accessibility_text();
  void set_allocated_accessibility_text(std::string* accessibility_text);
  private:
  const std::string& _internal_accessibility_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accessibility_text(const std::string& value);
  std::string* _internal_mutable_accessibility_text();
  public:

  // bool is_top_level = 6;
  void clear_is_top_level();
  bool is_top_level() const;
  void set_is_top_level(bool value);
  private:
  bool _internal_is_top_level() const;
  void _internal_set_is_top_level(bool value);
  public:

  // @@protoc_insertion_point(class_scope:query_tiles.proto.TileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileImage > tile_images_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sub_tile_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> search_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tile_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accessibility_text_;
  bool is_top_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class TileInfoGroup final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.TileInfoGroup) */ {
 public:
  inline TileInfoGroup() : TileInfoGroup(nullptr) {}
  ~TileInfoGroup() override;
  explicit PROTOBUF_CONSTEXPR TileInfoGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TileInfoGroup(const TileInfoGroup& from);
  TileInfoGroup(TileInfoGroup&& from) noexcept
    : TileInfoGroup() {
    *this = ::std::move(from);
  }

  inline TileInfoGroup& operator=(const TileInfoGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileInfoGroup& operator=(TileInfoGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TileInfoGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileInfoGroup* internal_default_instance() {
    return reinterpret_cast<const TileInfoGroup*>(
               &_TileInfoGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TileInfoGroup& a, TileInfoGroup& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TileInfoGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileInfoGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TileInfoGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TileInfoGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TileInfoGroup& from);
  void MergeFrom(const TileInfoGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TileInfoGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.TileInfoGroup";
  }
  protected:
  explicit TileInfoGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 1,
    kLocaleFieldNumber = 2,
  };
  // repeated .query_tiles.proto.TileInfo tiles = 1;
  int tiles_size() const;
  private:
  int _internal_tiles_size() const;
  public:
  void clear_tiles();
  ::query_tiles::proto::TileInfo* mutable_tiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileInfo >*
      mutable_tiles();
  private:
  const ::query_tiles::proto::TileInfo& _internal_tiles(int index) const;
  ::query_tiles::proto::TileInfo* _internal_add_tiles();
  public:
  const ::query_tiles::proto::TileInfo& tiles(int index) const;
  ::query_tiles::proto::TileInfo* add_tiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileInfo >&
      tiles() const;

  // string locale = 2;
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // @@protoc_insertion_point(class_scope:query_tiles.proto.TileInfoGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileInfo > tiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class ServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.ServerResponse) */ {
 public:
  inline ServerResponse() : ServerResponse(nullptr) {}
  ~ServerResponse() override;
  explicit PROTOBUF_CONSTEXPR ServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerResponse(const ServerResponse& from);
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.ServerResponse";
  }
  protected:
  explicit ServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileGroupFieldNumber = 1,
  };
  // .query_tiles.proto.TileInfoGroup tile_group = 1;
  bool has_tile_group() const;
  private:
  bool _internal_has_tile_group() const;
  public:
  void clear_tile_group();
  const ::query_tiles::proto::TileInfoGroup& tile_group() const;
  PROTOBUF_NODISCARD ::query_tiles::proto::TileInfoGroup* release_tile_group();
  ::query_tiles::proto::TileInfoGroup* mutable_tile_group();
  void set_allocated_tile_group(::query_tiles::proto::TileInfoGroup* tile_group);
  private:
  const ::query_tiles::proto::TileInfoGroup& _internal_tile_group() const;
  ::query_tiles::proto::TileInfoGroup* _internal_mutable_tile_group();
  public:
  void unsafe_arena_set_allocated_tile_group(
      ::query_tiles::proto::TileInfoGroup* tile_group);
  ::query_tiles::proto::TileInfoGroup* unsafe_arena_release_tile_group();

  // @@protoc_insertion_point(class_scope:query_tiles.proto.ServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::query_tiles::proto::TileInfoGroup* tile_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_5fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TileImage

// string url = 1;
inline void TileImage::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& TileImage::url() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileImage.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TileImage::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileImage.url)
}
inline std::string* TileImage::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileImage.url)
  return _s;
}
inline const std::string& TileImage::_internal_url() const {
  return url_.Get();
}
inline void TileImage::_internal_set_url(const std::string& value) {
  
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* TileImage::_internal_mutable_url() {
  
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* TileImage::release_url() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileImage.url)
  return url_.Release();
}
inline void TileImage::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileImage.url)
}

// -------------------------------------------------------------------

// TileInfo

// string tile_id = 1;
inline void TileInfo::clear_tile_id() {
  tile_id_.ClearToEmpty();
}
inline const std::string& TileInfo::tile_id() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.tile_id)
  return _internal_tile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TileInfo::set_tile_id(ArgT0&& arg0, ArgT... args) {
 
 tile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.tile_id)
}
inline std::string* TileInfo::mutable_tile_id() {
  std::string* _s = _internal_mutable_tile_id();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.tile_id)
  return _s;
}
inline const std::string& TileInfo::_internal_tile_id() const {
  return tile_id_.Get();
}
inline void TileInfo::_internal_set_tile_id(const std::string& value) {
  
  tile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TileInfo::_internal_mutable_tile_id() {
  
  return tile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TileInfo::release_tile_id() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileInfo.tile_id)
  return tile_id_.Release();
}
inline void TileInfo::set_allocated_tile_id(std::string* tile_id) {
  if (tile_id != nullptr) {
    
  } else {
    
  }
  tile_id_.SetAllocated(tile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tile_id_.IsDefault()) {
    tile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileInfo.tile_id)
}

// string query_string = 2;
inline void TileInfo::clear_query_string() {
  query_string_.ClearToEmpty();
}
inline const std::string& TileInfo::query_string() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.query_string)
  return _internal_query_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TileInfo::set_query_string(ArgT0&& arg0, ArgT... args) {
 
 query_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.query_string)
}
inline std::string* TileInfo::mutable_query_string() {
  std::string* _s = _internal_mutable_query_string();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.query_string)
  return _s;
}
inline const std::string& TileInfo::_internal_query_string() const {
  return query_string_.Get();
}
inline void TileInfo::_internal_set_query_string(const std::string& value) {
  
  query_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TileInfo::_internal_mutable_query_string() {
  
  return query_string_.Mutable(GetArenaForAllocation());
}
inline std::string* TileInfo::release_query_string() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileInfo.query_string)
  return query_string_.Release();
}
inline void TileInfo::set_allocated_query_string(std::string* query_string) {
  if (query_string != nullptr) {
    
  } else {
    
  }
  query_string_.SetAllocated(query_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (query_string_.IsDefault()) {
    query_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileInfo.query_string)
}

// repeated .query_tiles.proto.TileImage tile_images = 3;
inline int TileInfo::_internal_tile_images_size() const {
  return tile_images_.size();
}
inline int TileInfo::tile_images_size() const {
  return _internal_tile_images_size();
}
inline void TileInfo::clear_tile_images() {
  tile_images_.Clear();
}
inline ::query_tiles::proto::TileImage* TileInfo::mutable_tile_images(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.tile_images)
  return tile_images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileImage >*
TileInfo::mutable_tile_images() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.TileInfo.tile_images)
  return &tile_images_;
}
inline const ::query_tiles::proto::TileImage& TileInfo::_internal_tile_images(int index) const {
  return tile_images_.Get(index);
}
inline const ::query_tiles::proto::TileImage& TileInfo::tile_images(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.tile_images)
  return _internal_tile_images(index);
}
inline ::query_tiles::proto::TileImage* TileInfo::_internal_add_tile_images() {
  return tile_images_.Add();
}
inline ::query_tiles::proto::TileImage* TileInfo::add_tile_images() {
  ::query_tiles::proto::TileImage* _add = _internal_add_tile_images();
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfo.tile_images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileImage >&
TileInfo::tile_images() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.TileInfo.tile_images)
  return tile_images_;
}

// string display_text = 4;
inline void TileInfo::clear_display_text() {
  display_text_.ClearToEmpty();
}
inline const std::string& TileInfo::display_text() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.display_text)
  return _internal_display_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TileInfo::set_display_text(ArgT0&& arg0, ArgT... args) {
 
 display_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.display_text)
}
inline std::string* TileInfo::mutable_display_text() {
  std::string* _s = _internal_mutable_display_text();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.display_text)
  return _s;
}
inline const std::string& TileInfo::_internal_display_text() const {
  return display_text_.Get();
}
inline void TileInfo::_internal_set_display_text(const std::string& value) {
  
  display_text_.Set(value, GetArenaForAllocation());
}
inline std::string* TileInfo::_internal_mutable_display_text() {
  
  return display_text_.Mutable(GetArenaForAllocation());
}
inline std::string* TileInfo::release_display_text() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileInfo.display_text)
  return display_text_.Release();
}
inline void TileInfo::set_allocated_display_text(std::string* display_text) {
  if (display_text != nullptr) {
    
  } else {
    
  }
  display_text_.SetAllocated(display_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_text_.IsDefault()) {
    display_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileInfo.display_text)
}

// string accessibility_text = 5;
inline void TileInfo::clear_accessibility_text() {
  accessibility_text_.ClearToEmpty();
}
inline const std::string& TileInfo::accessibility_text() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.accessibility_text)
  return _internal_accessibility_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TileInfo::set_accessibility_text(ArgT0&& arg0, ArgT... args) {
 
 accessibility_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.accessibility_text)
}
inline std::string* TileInfo::mutable_accessibility_text() {
  std::string* _s = _internal_mutable_accessibility_text();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.accessibility_text)
  return _s;
}
inline const std::string& TileInfo::_internal_accessibility_text() const {
  return accessibility_text_.Get();
}
inline void TileInfo::_internal_set_accessibility_text(const std::string& value) {
  
  accessibility_text_.Set(value, GetArenaForAllocation());
}
inline std::string* TileInfo::_internal_mutable_accessibility_text() {
  
  return accessibility_text_.Mutable(GetArenaForAllocation());
}
inline std::string* TileInfo::release_accessibility_text() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileInfo.accessibility_text)
  return accessibility_text_.Release();
}
inline void TileInfo::set_allocated_accessibility_text(std::string* accessibility_text) {
  if (accessibility_text != nullptr) {
    
  } else {
    
  }
  accessibility_text_.SetAllocated(accessibility_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (accessibility_text_.IsDefault()) {
    accessibility_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileInfo.accessibility_text)
}

// bool is_top_level = 6;
inline void TileInfo::clear_is_top_level() {
  is_top_level_ = false;
}
inline bool TileInfo::_internal_is_top_level() const {
  return is_top_level_;
}
inline bool TileInfo::is_top_level() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.is_top_level)
  return _internal_is_top_level();
}
inline void TileInfo::_internal_set_is_top_level(bool value) {
  
  is_top_level_ = value;
}
inline void TileInfo::set_is_top_level(bool value) {
  _internal_set_is_top_level(value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.is_top_level)
}

// repeated string sub_tile_ids = 7;
inline int TileInfo::_internal_sub_tile_ids_size() const {
  return sub_tile_ids_.size();
}
inline int TileInfo::sub_tile_ids_size() const {
  return _internal_sub_tile_ids_size();
}
inline void TileInfo::clear_sub_tile_ids() {
  sub_tile_ids_.Clear();
}
inline std::string* TileInfo::add_sub_tile_ids() {
  std::string* _s = _internal_add_sub_tile_ids();
  // @@protoc_insertion_point(field_add_mutable:query_tiles.proto.TileInfo.sub_tile_ids)
  return _s;
}
inline const std::string& TileInfo::_internal_sub_tile_ids(int index) const {
  return sub_tile_ids_.Get(index);
}
inline const std::string& TileInfo::sub_tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.sub_tile_ids)
  return _internal_sub_tile_ids(index);
}
inline std::string* TileInfo::mutable_sub_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.sub_tile_ids)
  return sub_tile_ids_.Mutable(index);
}
inline void TileInfo::set_sub_tile_ids(int index, const std::string& value) {
  sub_tile_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline void TileInfo::set_sub_tile_ids(int index, std::string&& value) {
  sub_tile_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline void TileInfo::set_sub_tile_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sub_tile_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline void TileInfo::set_sub_tile_ids(int index, const char* value, size_t size) {
  sub_tile_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline std::string* TileInfo::_internal_add_sub_tile_ids() {
  return sub_tile_ids_.Add();
}
inline void TileInfo::add_sub_tile_ids(const std::string& value) {
  sub_tile_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline void TileInfo::add_sub_tile_ids(std::string&& value) {
  sub_tile_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline void TileInfo::add_sub_tile_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sub_tile_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline void TileInfo::add_sub_tile_ids(const char* value, size_t size) {
  sub_tile_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TileInfo::sub_tile_ids() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.TileInfo.sub_tile_ids)
  return sub_tile_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TileInfo::mutable_sub_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.TileInfo.sub_tile_ids)
  return &sub_tile_ids_;
}

// repeated string search_params = 8;
inline int TileInfo::_internal_search_params_size() const {
  return search_params_.size();
}
inline int TileInfo::search_params_size() const {
  return _internal_search_params_size();
}
inline void TileInfo::clear_search_params() {
  search_params_.Clear();
}
inline std::string* TileInfo::add_search_params() {
  std::string* _s = _internal_add_search_params();
  // @@protoc_insertion_point(field_add_mutable:query_tiles.proto.TileInfo.search_params)
  return _s;
}
inline const std::string& TileInfo::_internal_search_params(int index) const {
  return search_params_.Get(index);
}
inline const std::string& TileInfo::search_params(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.search_params)
  return _internal_search_params(index);
}
inline std::string* TileInfo::mutable_search_params(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.search_params)
  return search_params_.Mutable(index);
}
inline void TileInfo::set_search_params(int index, const std::string& value) {
  search_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.search_params)
}
inline void TileInfo::set_search_params(int index, std::string&& value) {
  search_params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.search_params)
}
inline void TileInfo::set_search_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  search_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:query_tiles.proto.TileInfo.search_params)
}
inline void TileInfo::set_search_params(int index, const char* value, size_t size) {
  search_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:query_tiles.proto.TileInfo.search_params)
}
inline std::string* TileInfo::_internal_add_search_params() {
  return search_params_.Add();
}
inline void TileInfo::add_search_params(const std::string& value) {
  search_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfo.search_params)
}
inline void TileInfo::add_search_params(std::string&& value) {
  search_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfo.search_params)
}
inline void TileInfo::add_search_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  search_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:query_tiles.proto.TileInfo.search_params)
}
inline void TileInfo::add_search_params(const char* value, size_t size) {
  search_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:query_tiles.proto.TileInfo.search_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TileInfo::search_params() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.TileInfo.search_params)
  return search_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TileInfo::mutable_search_params() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.TileInfo.search_params)
  return &search_params_;
}

// -------------------------------------------------------------------

// TileInfoGroup

// repeated .query_tiles.proto.TileInfo tiles = 1;
inline int TileInfoGroup::_internal_tiles_size() const {
  return tiles_.size();
}
inline int TileInfoGroup::tiles_size() const {
  return _internal_tiles_size();
}
inline void TileInfoGroup::clear_tiles() {
  tiles_.Clear();
}
inline ::query_tiles::proto::TileInfo* TileInfoGroup::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfoGroup.tiles)
  return tiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileInfo >*
TileInfoGroup::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.TileInfoGroup.tiles)
  return &tiles_;
}
inline const ::query_tiles::proto::TileInfo& TileInfoGroup::_internal_tiles(int index) const {
  return tiles_.Get(index);
}
inline const ::query_tiles::proto::TileInfo& TileInfoGroup::tiles(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfoGroup.tiles)
  return _internal_tiles(index);
}
inline ::query_tiles::proto::TileInfo* TileInfoGroup::_internal_add_tiles() {
  return tiles_.Add();
}
inline ::query_tiles::proto::TileInfo* TileInfoGroup::add_tiles() {
  ::query_tiles::proto::TileInfo* _add = _internal_add_tiles();
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfoGroup.tiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileInfo >&
TileInfoGroup::tiles() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.TileInfoGroup.tiles)
  return tiles_;
}

// string locale = 2;
inline void TileInfoGroup::clear_locale() {
  locale_.ClearToEmpty();
}
inline const std::string& TileInfoGroup::locale() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfoGroup.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TileInfoGroup::set_locale(ArgT0&& arg0, ArgT... args) {
 
 locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfoGroup.locale)
}
inline std::string* TileInfoGroup::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfoGroup.locale)
  return _s;
}
inline const std::string& TileInfoGroup::_internal_locale() const {
  return locale_.Get();
}
inline void TileInfoGroup::_internal_set_locale(const std::string& value) {
  
  locale_.Set(value, GetArenaForAllocation());
}
inline std::string* TileInfoGroup::_internal_mutable_locale() {
  
  return locale_.Mutable(GetArenaForAllocation());
}
inline std::string* TileInfoGroup::release_locale() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileInfoGroup.locale)
  return locale_.Release();
}
inline void TileInfoGroup::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    
  } else {
    
  }
  locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileInfoGroup.locale)
}

// -------------------------------------------------------------------

// ServerResponse

// .query_tiles.proto.TileInfoGroup tile_group = 1;
inline bool ServerResponse::_internal_has_tile_group() const {
  return this != internal_default_instance() && tile_group_ != nullptr;
}
inline bool ServerResponse::has_tile_group() const {
  return _internal_has_tile_group();
}
inline void ServerResponse::clear_tile_group() {
  if (GetArenaForAllocation() == nullptr && tile_group_ != nullptr) {
    delete tile_group_;
  }
  tile_group_ = nullptr;
}
inline const ::query_tiles::proto::TileInfoGroup& ServerResponse::_internal_tile_group() const {
  const ::query_tiles::proto::TileInfoGroup* p = tile_group_;
  return p != nullptr ? *p : reinterpret_cast<const ::query_tiles::proto::TileInfoGroup&>(
      ::query_tiles::proto::_TileInfoGroup_default_instance_);
}
inline const ::query_tiles::proto::TileInfoGroup& ServerResponse::tile_group() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.ServerResponse.tile_group)
  return _internal_tile_group();
}
inline void ServerResponse::unsafe_arena_set_allocated_tile_group(
    ::query_tiles::proto::TileInfoGroup* tile_group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tile_group_);
  }
  tile_group_ = tile_group;
  if (tile_group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:query_tiles.proto.ServerResponse.tile_group)
}
inline ::query_tiles::proto::TileInfoGroup* ServerResponse::release_tile_group() {
  
  ::query_tiles::proto::TileInfoGroup* temp = tile_group_;
  tile_group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::query_tiles::proto::TileInfoGroup* ServerResponse::unsafe_arena_release_tile_group() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.ServerResponse.tile_group)
  
  ::query_tiles::proto::TileInfoGroup* temp = tile_group_;
  tile_group_ = nullptr;
  return temp;
}
inline ::query_tiles::proto::TileInfoGroup* ServerResponse::_internal_mutable_tile_group() {
  
  if (tile_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::query_tiles::proto::TileInfoGroup>(GetArenaForAllocation());
    tile_group_ = p;
  }
  return tile_group_;
}
inline ::query_tiles::proto::TileInfoGroup* ServerResponse::mutable_tile_group() {
  ::query_tiles::proto::TileInfoGroup* _msg = _internal_mutable_tile_group();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.ServerResponse.tile_group)
  return _msg;
}
inline void ServerResponse::set_allocated_tile_group(::query_tiles::proto::TileInfoGroup* tile_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tile_group_;
  }
  if (tile_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tile_group);
    if (message_arena != submessage_arena) {
      tile_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tile_group, submessage_arena);
    }
    
  } else {
    
  }
  tile_group_ = tile_group;
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.ServerResponse.tile_group)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace query_tiles

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tile_5fresponse_2eproto
