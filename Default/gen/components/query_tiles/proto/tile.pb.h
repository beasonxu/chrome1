// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tile_2eproto {
  static const uint32_t offsets[];
};
namespace query_tiles {
namespace proto {
class Tile;
struct TileDefaultTypeInternal;
extern TileDefaultTypeInternal _Tile_default_instance_;
class TileGroup;
struct TileGroupDefaultTypeInternal;
extern TileGroupDefaultTypeInternal _TileGroup_default_instance_;
class TileGroup_TileStatsEntry_DoNotUse;
struct TileGroup_TileStatsEntry_DoNotUseDefaultTypeInternal;
extern TileGroup_TileStatsEntry_DoNotUseDefaultTypeInternal _TileGroup_TileStatsEntry_DoNotUse_default_instance_;
class TileStats;
struct TileStatsDefaultTypeInternal;
extern TileStatsDefaultTypeInternal _TileStats_default_instance_;
class Tile_ImageMetadata;
struct Tile_ImageMetadataDefaultTypeInternal;
extern Tile_ImageMetadataDefaultTypeInternal _Tile_ImageMetadata_default_instance_;
}  // namespace proto
}  // namespace query_tiles
PROTOBUF_NAMESPACE_OPEN
template<> ::query_tiles::proto::Tile* Arena::CreateMaybeMessage<::query_tiles::proto::Tile>(Arena*);
template<> ::query_tiles::proto::TileGroup* Arena::CreateMaybeMessage<::query_tiles::proto::TileGroup>(Arena*);
template<> ::query_tiles::proto::TileGroup_TileStatsEntry_DoNotUse* Arena::CreateMaybeMessage<::query_tiles::proto::TileGroup_TileStatsEntry_DoNotUse>(Arena*);
template<> ::query_tiles::proto::TileStats* Arena::CreateMaybeMessage<::query_tiles::proto::TileStats>(Arena*);
template<> ::query_tiles::proto::Tile_ImageMetadata* Arena::CreateMaybeMessage<::query_tiles::proto::Tile_ImageMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace query_tiles {
namespace proto {

// ===================================================================

class Tile_ImageMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.Tile.ImageMetadata) */ {
 public:
  inline Tile_ImageMetadata() : Tile_ImageMetadata(nullptr) {}
  ~Tile_ImageMetadata() override;
  explicit PROTOBUF_CONSTEXPR Tile_ImageMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tile_ImageMetadata(const Tile_ImageMetadata& from);
  Tile_ImageMetadata(Tile_ImageMetadata&& from) noexcept
    : Tile_ImageMetadata() {
    *this = ::std::move(from);
  }

  inline Tile_ImageMetadata& operator=(const Tile_ImageMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tile_ImageMetadata& operator=(Tile_ImageMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Tile_ImageMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tile_ImageMetadata* internal_default_instance() {
    return reinterpret_cast<const Tile_ImageMetadata*>(
               &_Tile_ImageMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tile_ImageMetadata& a, Tile_ImageMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Tile_ImageMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tile_ImageMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tile_ImageMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tile_ImageMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Tile_ImageMetadata& from);
  void MergeFrom(const Tile_ImageMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tile_ImageMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.Tile.ImageMetadata";
  }
  protected:
  explicit Tile_ImageMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:query_tiles.proto.Tile.ImageMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_2eproto;
};
// -------------------------------------------------------------------

class Tile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.Tile) */ {
 public:
  inline Tile() : Tile(nullptr) {}
  ~Tile() override;
  explicit PROTOBUF_CONSTEXPR Tile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tile(const Tile& from);
  Tile(Tile&& from) noexcept
    : Tile() {
    *this = ::std::move(from);
  }

  inline Tile& operator=(const Tile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tile& operator=(Tile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Tile& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tile* internal_default_instance() {
    return reinterpret_cast<const Tile*>(
               &_Tile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Tile& a, Tile& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Tile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Tile& from);
  void MergeFrom(const Tile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.Tile";
  }
  protected:
  explicit Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Tile_ImageMetadata ImageMetadata;

  // accessors -------------------------------------------------------

  enum : int {
    kImageMetadatasFieldNumber = 5,
    kSubTilesFieldNumber = 6,
    kSearchParamsFieldNumber = 7,
    kIdFieldNumber = 1,
    kQueryTextFieldNumber = 2,
    kDisplayTextFieldNumber = 3,
    kAccessibilityTextFieldNumber = 4,
  };
  // repeated .query_tiles.proto.Tile.ImageMetadata image_metadatas = 5;
  int image_metadatas_size() const;
  private:
  int _internal_image_metadatas_size() const;
  public:
  void clear_image_metadatas();
  ::query_tiles::proto::Tile_ImageMetadata* mutable_image_metadatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile_ImageMetadata >*
      mutable_image_metadatas();
  private:
  const ::query_tiles::proto::Tile_ImageMetadata& _internal_image_metadatas(int index) const;
  ::query_tiles::proto::Tile_ImageMetadata* _internal_add_image_metadatas();
  public:
  const ::query_tiles::proto::Tile_ImageMetadata& image_metadatas(int index) const;
  ::query_tiles::proto::Tile_ImageMetadata* add_image_metadatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile_ImageMetadata >&
      image_metadatas() const;

  // repeated .query_tiles.proto.Tile sub_tiles = 6;
  int sub_tiles_size() const;
  private:
  int _internal_sub_tiles_size() const;
  public:
  void clear_sub_tiles();
  ::query_tiles::proto::Tile* mutable_sub_tiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile >*
      mutable_sub_tiles();
  private:
  const ::query_tiles::proto::Tile& _internal_sub_tiles(int index) const;
  ::query_tiles::proto::Tile* _internal_add_sub_tiles();
  public:
  const ::query_tiles::proto::Tile& sub_tiles(int index) const;
  ::query_tiles::proto::Tile* add_sub_tiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile >&
      sub_tiles() const;

  // repeated string search_params = 7;
  int search_params_size() const;
  private:
  int _internal_search_params_size() const;
  public:
  void clear_search_params();
  const std::string& search_params(int index) const;
  std::string* mutable_search_params(int index);
  void set_search_params(int index, const std::string& value);
  void set_search_params(int index, std::string&& value);
  void set_search_params(int index, const char* value);
  void set_search_params(int index, const char* value, size_t size);
  std::string* add_search_params();
  void add_search_params(const std::string& value);
  void add_search_params(std::string&& value);
  void add_search_params(const char* value);
  void add_search_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& search_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_search_params();
  private:
  const std::string& _internal_search_params(int index) const;
  std::string* _internal_add_search_params();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string query_text = 2;
  void clear_query_text();
  const std::string& query_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query_text();
  PROTOBUF_NODISCARD std::string* release_query_text();
  void set_allocated_query_text(std::string* query_text);
  private:
  const std::string& _internal_query_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_text(const std::string& value);
  std::string* _internal_mutable_query_text();
  public:

  // string display_text = 3;
  void clear_display_text();
  const std::string& display_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_text();
  PROTOBUF_NODISCARD std::string* release_display_text();
  void set_allocated_display_text(std::string* display_text);
  private:
  const std::string& _internal_display_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_text(const std::string& value);
  std::string* _internal_mutable_display_text();
  public:

  // string accessibility_text = 4;
  void clear_accessibility_text();
  const std::string& accessibility_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accessibility_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accessibility_text();
  PROTOBUF_NODISCARD std::string* release_accessibility_text();
  void set_allocated_accessibility_text(std::string* accessibility_text);
  private:
  const std::string& _internal_accessibility_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accessibility_text(const std::string& value);
  std::string* _internal_mutable_accessibility_text();
  public:

  // @@protoc_insertion_point(class_scope:query_tiles.proto.Tile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile_ImageMetadata > image_metadatas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile > sub_tiles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> search_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accessibility_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_2eproto;
};
// -------------------------------------------------------------------

class TileStats final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.TileStats) */ {
 public:
  inline TileStats() : TileStats(nullptr) {}
  ~TileStats() override;
  explicit PROTOBUF_CONSTEXPR TileStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TileStats(const TileStats& from);
  TileStats(TileStats&& from) noexcept
    : TileStats() {
    *this = ::std::move(from);
  }

  inline TileStats& operator=(const TileStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileStats& operator=(TileStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TileStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileStats* internal_default_instance() {
    return reinterpret_cast<const TileStats*>(
               &_TileStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TileStats& a, TileStats& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TileStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TileStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TileStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TileStats& from);
  void MergeFrom(const TileStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TileStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.TileStats";
  }
  protected:
  explicit TileStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastClickedTimeMsFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // int64 last_clicked_time_ms = 1;
  void clear_last_clicked_time_ms();
  int64_t last_clicked_time_ms() const;
  void set_last_clicked_time_ms(int64_t value);
  private:
  int64_t _internal_last_clicked_time_ms() const;
  void _internal_set_last_clicked_time_ms(int64_t value);
  public:

  // double score = 2;
  void clear_score();
  double score() const;
  void set_score(double value);
  private:
  double _internal_score() const;
  void _internal_set_score(double value);
  public:

  // @@protoc_insertion_point(class_scope:query_tiles.proto.TileStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t last_clicked_time_ms_;
  double score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_2eproto;
};
// -------------------------------------------------------------------

class TileGroup_TileStatsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<TileGroup_TileStatsEntry_DoNotUse, 
    std::string, ::query_tiles::proto::TileStats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<TileGroup_TileStatsEntry_DoNotUse, 
    std::string, ::query_tiles::proto::TileStats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TileGroup_TileStatsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TileGroup_TileStatsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TileGroup_TileStatsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TileGroup_TileStatsEntry_DoNotUse& other);
  static const TileGroup_TileStatsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TileGroup_TileStatsEntry_DoNotUse*>(&_TileGroup_TileStatsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "query_tiles.proto.TileGroup.TileStatsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_tile_2eproto;
};

// -------------------------------------------------------------------

class TileGroup final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.TileGroup) */ {
 public:
  inline TileGroup() : TileGroup(nullptr) {}
  ~TileGroup() override;
  explicit PROTOBUF_CONSTEXPR TileGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TileGroup(const TileGroup& from);
  TileGroup(TileGroup&& from) noexcept
    : TileGroup() {
    *this = ::std::move(from);
  }

  inline TileGroup& operator=(const TileGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileGroup& operator=(TileGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TileGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileGroup* internal_default_instance() {
    return reinterpret_cast<const TileGroup*>(
               &_TileGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TileGroup& a, TileGroup& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TileGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TileGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TileGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TileGroup& from);
  void MergeFrom(const TileGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TileGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.TileGroup";
  }
  protected:
  explicit TileGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 4,
    kTileStatsFieldNumber = 5,
    kIdFieldNumber = 1,
    kLocaleFieldNumber = 2,
    kLastUpdatedTimeMsFieldNumber = 3,
  };
  // repeated .query_tiles.proto.Tile tiles = 4;
  int tiles_size() const;
  private:
  int _internal_tiles_size() const;
  public:
  void clear_tiles();
  ::query_tiles::proto::Tile* mutable_tiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile >*
      mutable_tiles();
  private:
  const ::query_tiles::proto::Tile& _internal_tiles(int index) const;
  ::query_tiles::proto::Tile* _internal_add_tiles();
  public:
  const ::query_tiles::proto::Tile& tiles(int index) const;
  ::query_tiles::proto::Tile* add_tiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile >&
      tiles() const;

  // map<string, .query_tiles.proto.TileStats> tile_stats = 5;
  int tile_stats_size() const;
  private:
  int _internal_tile_stats_size() const;
  public:
  void clear_tile_stats();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query_tiles::proto::TileStats >&
      _internal_tile_stats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query_tiles::proto::TileStats >*
      _internal_mutable_tile_stats();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query_tiles::proto::TileStats >&
      tile_stats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query_tiles::proto::TileStats >*
      mutable_tile_stats();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string locale = 2;
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // int64 last_updated_time_ms = 3;
  void clear_last_updated_time_ms();
  int64_t last_updated_time_ms() const;
  void set_last_updated_time_ms(int64_t value);
  private:
  int64_t _internal_last_updated_time_ms() const;
  void _internal_set_last_updated_time_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:query_tiles.proto.TileGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile > tiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      TileGroup_TileStatsEntry_DoNotUse,
      std::string, ::query_tiles::proto::TileStats,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> tile_stats_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  int64_t last_updated_time_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tile_ImageMetadata

// string url = 1;
inline void Tile_ImageMetadata::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& Tile_ImageMetadata::url() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.Tile.ImageMetadata.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tile_ImageMetadata::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.Tile.ImageMetadata.url)
}
inline std::string* Tile_ImageMetadata::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.Tile.ImageMetadata.url)
  return _s;
}
inline const std::string& Tile_ImageMetadata::_internal_url() const {
  return url_.Get();
}
inline void Tile_ImageMetadata::_internal_set_url(const std::string& value) {
  
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* Tile_ImageMetadata::_internal_mutable_url() {
  
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* Tile_ImageMetadata::release_url() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.Tile.ImageMetadata.url)
  return url_.Release();
}
inline void Tile_ImageMetadata::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.Tile.ImageMetadata.url)
}

// -------------------------------------------------------------------

// Tile

// string id = 1;
inline void Tile::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Tile::id() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.Tile.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tile::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.Tile.id)
}
inline std::string* Tile::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.Tile.id)
  return _s;
}
inline const std::string& Tile::_internal_id() const {
  return id_.Get();
}
inline void Tile::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* Tile::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* Tile::release_id() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.Tile.id)
  return id_.Release();
}
inline void Tile::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.Tile.id)
}

// string query_text = 2;
inline void Tile::clear_query_text() {
  query_text_.ClearToEmpty();
}
inline const std::string& Tile::query_text() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.Tile.query_text)
  return _internal_query_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tile::set_query_text(ArgT0&& arg0, ArgT... args) {
 
 query_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.Tile.query_text)
}
inline std::string* Tile::mutable_query_text() {
  std::string* _s = _internal_mutable_query_text();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.Tile.query_text)
  return _s;
}
inline const std::string& Tile::_internal_query_text() const {
  return query_text_.Get();
}
inline void Tile::_internal_set_query_text(const std::string& value) {
  
  query_text_.Set(value, GetArenaForAllocation());
}
inline std::string* Tile::_internal_mutable_query_text() {
  
  return query_text_.Mutable(GetArenaForAllocation());
}
inline std::string* Tile::release_query_text() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.Tile.query_text)
  return query_text_.Release();
}
inline void Tile::set_allocated_query_text(std::string* query_text) {
  if (query_text != nullptr) {
    
  } else {
    
  }
  query_text_.SetAllocated(query_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (query_text_.IsDefault()) {
    query_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.Tile.query_text)
}

// string display_text = 3;
inline void Tile::clear_display_text() {
  display_text_.ClearToEmpty();
}
inline const std::string& Tile::display_text() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.Tile.display_text)
  return _internal_display_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tile::set_display_text(ArgT0&& arg0, ArgT... args) {
 
 display_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.Tile.display_text)
}
inline std::string* Tile::mutable_display_text() {
  std::string* _s = _internal_mutable_display_text();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.Tile.display_text)
  return _s;
}
inline const std::string& Tile::_internal_display_text() const {
  return display_text_.Get();
}
inline void Tile::_internal_set_display_text(const std::string& value) {
  
  display_text_.Set(value, GetArenaForAllocation());
}
inline std::string* Tile::_internal_mutable_display_text() {
  
  return display_text_.Mutable(GetArenaForAllocation());
}
inline std::string* Tile::release_display_text() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.Tile.display_text)
  return display_text_.Release();
}
inline void Tile::set_allocated_display_text(std::string* display_text) {
  if (display_text != nullptr) {
    
  } else {
    
  }
  display_text_.SetAllocated(display_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_text_.IsDefault()) {
    display_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.Tile.display_text)
}

// string accessibility_text = 4;
inline void Tile::clear_accessibility_text() {
  accessibility_text_.ClearToEmpty();
}
inline const std::string& Tile::accessibility_text() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.Tile.accessibility_text)
  return _internal_accessibility_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tile::set_accessibility_text(ArgT0&& arg0, ArgT... args) {
 
 accessibility_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.Tile.accessibility_text)
}
inline std::string* Tile::mutable_accessibility_text() {
  std::string* _s = _internal_mutable_accessibility_text();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.Tile.accessibility_text)
  return _s;
}
inline const std::string& Tile::_internal_accessibility_text() const {
  return accessibility_text_.Get();
}
inline void Tile::_internal_set_accessibility_text(const std::string& value) {
  
  accessibility_text_.Set(value, GetArenaForAllocation());
}
inline std::string* Tile::_internal_mutable_accessibility_text() {
  
  return accessibility_text_.Mutable(GetArenaForAllocation());
}
inline std::string* Tile::release_accessibility_text() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.Tile.accessibility_text)
  return accessibility_text_.Release();
}
inline void Tile::set_allocated_accessibility_text(std::string* accessibility_text) {
  if (accessibility_text != nullptr) {
    
  } else {
    
  }
  accessibility_text_.SetAllocated(accessibility_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (accessibility_text_.IsDefault()) {
    accessibility_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.Tile.accessibility_text)
}

// repeated .query_tiles.proto.Tile.ImageMetadata image_metadatas = 5;
inline int Tile::_internal_image_metadatas_size() const {
  return image_metadatas_.size();
}
inline int Tile::image_metadatas_size() const {
  return _internal_image_metadatas_size();
}
inline void Tile::clear_image_metadatas() {
  image_metadatas_.Clear();
}
inline ::query_tiles::proto::Tile_ImageMetadata* Tile::mutable_image_metadatas(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.Tile.image_metadatas)
  return image_metadatas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile_ImageMetadata >*
Tile::mutable_image_metadatas() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.Tile.image_metadatas)
  return &image_metadatas_;
}
inline const ::query_tiles::proto::Tile_ImageMetadata& Tile::_internal_image_metadatas(int index) const {
  return image_metadatas_.Get(index);
}
inline const ::query_tiles::proto::Tile_ImageMetadata& Tile::image_metadatas(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.Tile.image_metadatas)
  return _internal_image_metadatas(index);
}
inline ::query_tiles::proto::Tile_ImageMetadata* Tile::_internal_add_image_metadatas() {
  return image_metadatas_.Add();
}
inline ::query_tiles::proto::Tile_ImageMetadata* Tile::add_image_metadatas() {
  ::query_tiles::proto::Tile_ImageMetadata* _add = _internal_add_image_metadatas();
  // @@protoc_insertion_point(field_add:query_tiles.proto.Tile.image_metadatas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile_ImageMetadata >&
Tile::image_metadatas() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.Tile.image_metadatas)
  return image_metadatas_;
}

// repeated .query_tiles.proto.Tile sub_tiles = 6;
inline int Tile::_internal_sub_tiles_size() const {
  return sub_tiles_.size();
}
inline int Tile::sub_tiles_size() const {
  return _internal_sub_tiles_size();
}
inline void Tile::clear_sub_tiles() {
  sub_tiles_.Clear();
}
inline ::query_tiles::proto::Tile* Tile::mutable_sub_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.Tile.sub_tiles)
  return sub_tiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile >*
Tile::mutable_sub_tiles() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.Tile.sub_tiles)
  return &sub_tiles_;
}
inline const ::query_tiles::proto::Tile& Tile::_internal_sub_tiles(int index) const {
  return sub_tiles_.Get(index);
}
inline const ::query_tiles::proto::Tile& Tile::sub_tiles(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.Tile.sub_tiles)
  return _internal_sub_tiles(index);
}
inline ::query_tiles::proto::Tile* Tile::_internal_add_sub_tiles() {
  return sub_tiles_.Add();
}
inline ::query_tiles::proto::Tile* Tile::add_sub_tiles() {
  ::query_tiles::proto::Tile* _add = _internal_add_sub_tiles();
  // @@protoc_insertion_point(field_add:query_tiles.proto.Tile.sub_tiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile >&
Tile::sub_tiles() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.Tile.sub_tiles)
  return sub_tiles_;
}

// repeated string search_params = 7;
inline int Tile::_internal_search_params_size() const {
  return search_params_.size();
}
inline int Tile::search_params_size() const {
  return _internal_search_params_size();
}
inline void Tile::clear_search_params() {
  search_params_.Clear();
}
inline std::string* Tile::add_search_params() {
  std::string* _s = _internal_add_search_params();
  // @@protoc_insertion_point(field_add_mutable:query_tiles.proto.Tile.search_params)
  return _s;
}
inline const std::string& Tile::_internal_search_params(int index) const {
  return search_params_.Get(index);
}
inline const std::string& Tile::search_params(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.Tile.search_params)
  return _internal_search_params(index);
}
inline std::string* Tile::mutable_search_params(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.Tile.search_params)
  return search_params_.Mutable(index);
}
inline void Tile::set_search_params(int index, const std::string& value) {
  search_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.Tile.search_params)
}
inline void Tile::set_search_params(int index, std::string&& value) {
  search_params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:query_tiles.proto.Tile.search_params)
}
inline void Tile::set_search_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  search_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:query_tiles.proto.Tile.search_params)
}
inline void Tile::set_search_params(int index, const char* value, size_t size) {
  search_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:query_tiles.proto.Tile.search_params)
}
inline std::string* Tile::_internal_add_search_params() {
  return search_params_.Add();
}
inline void Tile::add_search_params(const std::string& value) {
  search_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:query_tiles.proto.Tile.search_params)
}
inline void Tile::add_search_params(std::string&& value) {
  search_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:query_tiles.proto.Tile.search_params)
}
inline void Tile::add_search_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  search_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:query_tiles.proto.Tile.search_params)
}
inline void Tile::add_search_params(const char* value, size_t size) {
  search_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:query_tiles.proto.Tile.search_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Tile::search_params() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.Tile.search_params)
  return search_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Tile::mutable_search_params() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.Tile.search_params)
  return &search_params_;
}

// -------------------------------------------------------------------

// TileStats

// int64 last_clicked_time_ms = 1;
inline void TileStats::clear_last_clicked_time_ms() {
  last_clicked_time_ms_ = int64_t{0};
}
inline int64_t TileStats::_internal_last_clicked_time_ms() const {
  return last_clicked_time_ms_;
}
inline int64_t TileStats::last_clicked_time_ms() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileStats.last_clicked_time_ms)
  return _internal_last_clicked_time_ms();
}
inline void TileStats::_internal_set_last_clicked_time_ms(int64_t value) {
  
  last_clicked_time_ms_ = value;
}
inline void TileStats::set_last_clicked_time_ms(int64_t value) {
  _internal_set_last_clicked_time_ms(value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileStats.last_clicked_time_ms)
}

// double score = 2;
inline void TileStats::clear_score() {
  score_ = 0;
}
inline double TileStats::_internal_score() const {
  return score_;
}
inline double TileStats::score() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileStats.score)
  return _internal_score();
}
inline void TileStats::_internal_set_score(double value) {
  
  score_ = value;
}
inline void TileStats::set_score(double value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileStats.score)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TileGroup

// string id = 1;
inline void TileGroup::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& TileGroup::id() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileGroup.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TileGroup::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileGroup.id)
}
inline std::string* TileGroup::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileGroup.id)
  return _s;
}
inline const std::string& TileGroup::_internal_id() const {
  return id_.Get();
}
inline void TileGroup::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* TileGroup::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* TileGroup::release_id() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileGroup.id)
  return id_.Release();
}
inline void TileGroup::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileGroup.id)
}

// string locale = 2;
inline void TileGroup::clear_locale() {
  locale_.ClearToEmpty();
}
inline const std::string& TileGroup::locale() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileGroup.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TileGroup::set_locale(ArgT0&& arg0, ArgT... args) {
 
 locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileGroup.locale)
}
inline std::string* TileGroup::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileGroup.locale)
  return _s;
}
inline const std::string& TileGroup::_internal_locale() const {
  return locale_.Get();
}
inline void TileGroup::_internal_set_locale(const std::string& value) {
  
  locale_.Set(value, GetArenaForAllocation());
}
inline std::string* TileGroup::_internal_mutable_locale() {
  
  return locale_.Mutable(GetArenaForAllocation());
}
inline std::string* TileGroup::release_locale() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileGroup.locale)
  return locale_.Release();
}
inline void TileGroup::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    
  } else {
    
  }
  locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileGroup.locale)
}

// int64 last_updated_time_ms = 3;
inline void TileGroup::clear_last_updated_time_ms() {
  last_updated_time_ms_ = int64_t{0};
}
inline int64_t TileGroup::_internal_last_updated_time_ms() const {
  return last_updated_time_ms_;
}
inline int64_t TileGroup::last_updated_time_ms() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileGroup.last_updated_time_ms)
  return _internal_last_updated_time_ms();
}
inline void TileGroup::_internal_set_last_updated_time_ms(int64_t value) {
  
  last_updated_time_ms_ = value;
}
inline void TileGroup::set_last_updated_time_ms(int64_t value) {
  _internal_set_last_updated_time_ms(value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileGroup.last_updated_time_ms)
}

// repeated .query_tiles.proto.Tile tiles = 4;
inline int TileGroup::_internal_tiles_size() const {
  return tiles_.size();
}
inline int TileGroup::tiles_size() const {
  return _internal_tiles_size();
}
inline void TileGroup::clear_tiles() {
  tiles_.Clear();
}
inline ::query_tiles::proto::Tile* TileGroup::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileGroup.tiles)
  return tiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile >*
TileGroup::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.TileGroup.tiles)
  return &tiles_;
}
inline const ::query_tiles::proto::Tile& TileGroup::_internal_tiles(int index) const {
  return tiles_.Get(index);
}
inline const ::query_tiles::proto::Tile& TileGroup::tiles(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileGroup.tiles)
  return _internal_tiles(index);
}
inline ::query_tiles::proto::Tile* TileGroup::_internal_add_tiles() {
  return tiles_.Add();
}
inline ::query_tiles::proto::Tile* TileGroup::add_tiles() {
  ::query_tiles::proto::Tile* _add = _internal_add_tiles();
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileGroup.tiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::Tile >&
TileGroup::tiles() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.TileGroup.tiles)
  return tiles_;
}

// map<string, .query_tiles.proto.TileStats> tile_stats = 5;
inline int TileGroup::_internal_tile_stats_size() const {
  return tile_stats_.size();
}
inline int TileGroup::tile_stats_size() const {
  return _internal_tile_stats_size();
}
inline void TileGroup::clear_tile_stats() {
  tile_stats_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query_tiles::proto::TileStats >&
TileGroup::_internal_tile_stats() const {
  return tile_stats_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query_tiles::proto::TileStats >&
TileGroup::tile_stats() const {
  // @@protoc_insertion_point(field_map:query_tiles.proto.TileGroup.tile_stats)
  return _internal_tile_stats();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query_tiles::proto::TileStats >*
TileGroup::_internal_mutable_tile_stats() {
  return tile_stats_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query_tiles::proto::TileStats >*
TileGroup::mutable_tile_stats() {
  // @@protoc_insertion_point(field_mutable_map:query_tiles.proto.TileGroup.tile_stats)
  return _internal_mutable_tile_stats();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace query_tiles

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tile_2eproto
