// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/browser_ui/client_certificate/SSLClientCertificateRequest

#ifndef org_chromium_components_browser_ui_client_certificate_SSLClientCertificateRequest_JNI
#define org_chromium_components_browser_ui_client_certificate_SSLClientCertificateRequest_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest[];
const char
    kClassPath_org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest[]
    = "org/chromium/components/browser_ui/client_certificate/SSLClientCertificateRequest";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest_clazz(nullptr);
#ifndef org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest_clazz_defined
#define org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest_clazz_defined
inline jclass
    org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest,
      &g_org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace browser_ui {

static void JNI_SSLClientCertificateRequest_NotifyClientCertificatesChangedOnIOThread(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MvoPqjlg(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SSLClientCertificateRequest_NotifyClientCertificatesChangedOnIOThread(env);
}

static void JNI_SSLClientCertificateRequest_OnSystemRequestCompletion(JNIEnv* env, jlong requestPtr,
    const base::android::JavaParamRef<jobjectArray>& certChain,
    const base::android::JavaParamRef<jobject>& privateKey);

JNI_GENERATOR_EXPORT void Java_J_N_M8LmNuWo(
    JNIEnv* env,
    jclass jcaller,
    jlong requestPtr,
    jobjectArray certChain,
    jobject privateKey) {
  return JNI_SSLClientCertificateRequest_OnSystemRequestCompletion(env, requestPtr,
      base::android::JavaParamRef<jobjectArray>(env, certChain),
      base::android::JavaParamRef<jobject>(env, privateKey));
}


static std::atomic<jmethodID>
    g_org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest_selectClientCertificate(nullptr);
static jboolean Java_SSLClientCertificateRequest_selectClientCertificate(JNIEnv* env, jlong
    nativePtr,
    const base::android::JavaRef<jobject>& window,
    const base::android::JavaRef<jobjectArray>& keyTypes,
    const base::android::JavaRef<jobjectArray>& encodedPrincipals,
    const base::android::JavaRef<jstring>& hostName,
    JniIntWrapper port) {
  jclass clazz =
      org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest_clazz(env);
  CHECK_CLAZZ(env, clazz,
org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest_clazz(env),
          false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "selectClientCertificate",
          "(JLorg/chromium/ui/base/WindowAndroid;[Ljava/lang/String;[[BLjava/lang/String;I)Z",
&g_org_chromium_components_browser_1ui_client_1certificate_SSLClientCertificateRequest_selectClientCertificate);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, nativePtr, window.obj(), keyTypes.obj(),
              encodedPrincipals.obj(), hostName.obj(), as_jint(port));
  return ret;
}

}  // namespace browser_ui

#endif  // org_chromium_components_browser_ui_client_certificate_SSLClientCertificateRequest_JNI
