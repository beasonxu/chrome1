// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crx3.proto

#include "crx3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace crx_file {
PROTOBUF_CONSTEXPR CrxFileHeader::CrxFileHeader(
    ::_pbi::ConstantInitialized)
  : sha256_with_rsa_()
  , sha256_with_ecdsa_()
  , verified_contents_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , signed_header_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CrxFileHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrxFileHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrxFileHeaderDefaultTypeInternal() {}
  union {
    CrxFileHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrxFileHeaderDefaultTypeInternal _CrxFileHeader_default_instance_;
PROTOBUF_CONSTEXPR AsymmetricKeyProof::AsymmetricKeyProof(
    ::_pbi::ConstantInitialized)
  : public_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , signature_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AsymmetricKeyProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AsymmetricKeyProofDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AsymmetricKeyProofDefaultTypeInternal() {}
  union {
    AsymmetricKeyProof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AsymmetricKeyProofDefaultTypeInternal _AsymmetricKeyProof_default_instance_;
PROTOBUF_CONSTEXPR SignedData::SignedData(
    ::_pbi::ConstantInitialized)
  : crx_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SignedDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignedDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignedDataDefaultTypeInternal() {}
  union {
    SignedData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignedDataDefaultTypeInternal _SignedData_default_instance_;
}  // namespace crx_file
namespace crx_file {

// ===================================================================

class CrxFileHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CrxFileHeader>()._has_bits_);
  static void set_has_verified_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signed_header_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CrxFileHeader::CrxFileHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  sha256_with_rsa_(arena),
  sha256_with_ecdsa_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:crx_file.CrxFileHeader)
}
CrxFileHeader::CrxFileHeader(const CrxFileHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      sha256_with_rsa_(from.sha256_with_rsa_),
      sha256_with_ecdsa_(from.sha256_with_ecdsa_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  verified_contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    verified_contents_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verified_contents()) {
    verified_contents_.Set(from._internal_verified_contents(), 
      GetArenaForAllocation());
  }
  signed_header_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signed_header_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signed_header_data()) {
    signed_header_data_.Set(from._internal_signed_header_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:crx_file.CrxFileHeader)
}

inline void CrxFileHeader::SharedCtor() {
verified_contents_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  verified_contents_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signed_header_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signed_header_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CrxFileHeader::~CrxFileHeader() {
  // @@protoc_insertion_point(destructor:crx_file.CrxFileHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrxFileHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  verified_contents_.Destroy();
  signed_header_data_.Destroy();
}

void CrxFileHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CrxFileHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:crx_file.CrxFileHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sha256_with_rsa_.Clear();
  sha256_with_ecdsa_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      verified_contents_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signed_header_data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CrxFileHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .crx_file.AsymmetricKeyProof sha256_with_rsa = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sha256_with_rsa(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .crx_file.AsymmetricKeyProof sha256_with_ecdsa = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sha256_with_ecdsa(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes verified_contents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_verified_contents();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signed_header_data = 10000;
      case 10000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_signed_header_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrxFileHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crx_file.CrxFileHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .crx_file.AsymmetricKeyProof sha256_with_rsa = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sha256_with_rsa_size()); i < n; i++) {
    const auto& repfield = this->_internal_sha256_with_rsa(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .crx_file.AsymmetricKeyProof sha256_with_ecdsa = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sha256_with_ecdsa_size()); i < n; i++) {
    const auto& repfield = this->_internal_sha256_with_ecdsa(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes verified_contents = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_verified_contents(), target);
  }

  // optional bytes signed_header_data = 10000;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        10000, this->_internal_signed_header_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crx_file.CrxFileHeader)
  return target;
}

size_t CrxFileHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crx_file.CrxFileHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .crx_file.AsymmetricKeyProof sha256_with_rsa = 2;
  total_size += 1UL * this->_internal_sha256_with_rsa_size();
  for (const auto& msg : this->sha256_with_rsa_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .crx_file.AsymmetricKeyProof sha256_with_ecdsa = 3;
  total_size += 1UL * this->_internal_sha256_with_ecdsa_size();
  for (const auto& msg : this->sha256_with_ecdsa_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes verified_contents = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_verified_contents());
    }

    // optional bytes signed_header_data = 10000;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signed_header_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrxFileHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CrxFileHeader*>(
      &from));
}

void CrxFileHeader::MergeFrom(const CrxFileHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crx_file.CrxFileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sha256_with_rsa_.MergeFrom(from.sha256_with_rsa_);
  sha256_with_ecdsa_.MergeFrom(from.sha256_with_ecdsa_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_verified_contents(from._internal_verified_contents());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signed_header_data(from._internal_signed_header_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CrxFileHeader::CopyFrom(const CrxFileHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crx_file.CrxFileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrxFileHeader::IsInitialized() const {
  return true;
}

void CrxFileHeader::InternalSwap(CrxFileHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha256_with_rsa_.InternalSwap(&other->sha256_with_rsa_);
  sha256_with_ecdsa_.InternalSwap(&other->sha256_with_ecdsa_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &verified_contents_, lhs_arena,
      &other->verified_contents_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &signed_header_data_, lhs_arena,
      &other->signed_header_data_, rhs_arena
  );
}

std::string CrxFileHeader::GetTypeName() const {
  return "crx_file.CrxFileHeader";
}


// ===================================================================

class AsymmetricKeyProof::_Internal {
 public:
  using HasBits = decltype(std::declval<AsymmetricKeyProof>()._has_bits_);
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AsymmetricKeyProof::AsymmetricKeyProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:crx_file.AsymmetricKeyProof)
}
AsymmetricKeyProof::AsymmetricKeyProof(const AsymmetricKeyProof& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_public_key()) {
    public_key_.Set(from._internal_public_key(), 
      GetArenaForAllocation());
  }
  signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    signature_.Set(from._internal_signature(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:crx_file.AsymmetricKeyProof)
}

inline void AsymmetricKeyProof::SharedCtor() {
public_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AsymmetricKeyProof::~AsymmetricKeyProof() {
  // @@protoc_insertion_point(destructor:crx_file.AsymmetricKeyProof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AsymmetricKeyProof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.Destroy();
  signature_.Destroy();
}

void AsymmetricKeyProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AsymmetricKeyProof::Clear() {
// @@protoc_insertion_point(message_clear_start:crx_file.AsymmetricKeyProof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      public_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AsymmetricKeyProof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AsymmetricKeyProof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crx_file.AsymmetricKeyProof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crx_file.AsymmetricKeyProof)
  return target;
}

size_t AsymmetricKeyProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crx_file.AsymmetricKeyProof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes public_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_key());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsymmetricKeyProof::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AsymmetricKeyProof*>(
      &from));
}

void AsymmetricKeyProof::MergeFrom(const AsymmetricKeyProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crx_file.AsymmetricKeyProof)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_public_key(from._internal_public_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signature(from._internal_signature());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AsymmetricKeyProof::CopyFrom(const AsymmetricKeyProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crx_file.AsymmetricKeyProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsymmetricKeyProof::IsInitialized() const {
  return true;
}

void AsymmetricKeyProof::InternalSwap(AsymmetricKeyProof* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
}

std::string AsymmetricKeyProof::GetTypeName() const {
  return "crx_file.AsymmetricKeyProof";
}


// ===================================================================

class SignedData::_Internal {
 public:
  using HasBits = decltype(std::declval<SignedData>()._has_bits_);
  static void set_has_crx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SignedData::SignedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:crx_file.SignedData)
}
SignedData::SignedData(const SignedData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  crx_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    crx_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_crx_id()) {
    crx_id_.Set(from._internal_crx_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:crx_file.SignedData)
}

inline void SignedData::SharedCtor() {
crx_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  crx_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignedData::~SignedData() {
  // @@protoc_insertion_point(destructor:crx_file.SignedData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignedData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  crx_id_.Destroy();
}

void SignedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignedData::Clear() {
// @@protoc_insertion_point(message_clear_start:crx_file.SignedData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    crx_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SignedData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes crx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_crx_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignedData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crx_file.SignedData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes crx_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_crx_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crx_file.SignedData)
  return target;
}

size_t SignedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crx_file.SignedData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes crx_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_crx_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SignedData*>(
      &from));
}

void SignedData::MergeFrom(const SignedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crx_file.SignedData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_crx_id()) {
    _internal_set_crx_id(from._internal_crx_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SignedData::CopyFrom(const SignedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crx_file.SignedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedData::IsInitialized() const {
  return true;
}

void SignedData::InternalSwap(SignedData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &crx_id_, lhs_arena,
      &other->crx_id_, rhs_arena
  );
}

std::string SignedData::GetTypeName() const {
  return "crx_file.SignedData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace crx_file
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::crx_file::CrxFileHeader*
Arena::CreateMaybeMessage< ::crx_file::CrxFileHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crx_file::CrxFileHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::crx_file::AsymmetricKeyProof*
Arena::CreateMaybeMessage< ::crx_file::AsymmetricKeyProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crx_file::AsymmetricKeyProof >(arena);
}
template<> PROTOBUF_NOINLINE ::crx_file::SignedData*
Arena::CreateMaybeMessage< ::crx_file::SignedData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crx_file::SignedData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
