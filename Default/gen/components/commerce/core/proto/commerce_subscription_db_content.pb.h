// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/commerce/core/proto/commerce_subscription_db_content.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fcommerce_2fcore_2fproto_2fcommerce_5fsubscription_5fdb_5fcontent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fcommerce_2fcore_2fproto_2fcommerce_5fsubscription_5fdb_5fcontent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fcommerce_2fcore_2fproto_2fcommerce_5fsubscription_5fdb_5fcontent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fcommerce_2fcore_2fproto_2fcommerce_5fsubscription_5fdb_5fcontent_2eproto {
  static const uint32_t offsets[];
};
namespace commerce_subscription_db {
class CommerceSubscriptionContentProto;
struct CommerceSubscriptionContentProtoDefaultTypeInternal;
extern CommerceSubscriptionContentProtoDefaultTypeInternal _CommerceSubscriptionContentProto_default_instance_;
}  // namespace commerce_subscription_db
PROTOBUF_NAMESPACE_OPEN
template<> ::commerce_subscription_db::CommerceSubscriptionContentProto* Arena::CreateMaybeMessage<::commerce_subscription_db::CommerceSubscriptionContentProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace commerce_subscription_db {

enum CommerceSubscriptionContentProto_SubscriptionType : int {
  CommerceSubscriptionContentProto_SubscriptionType_TYPE_UNSPECIFIED = 0,
  CommerceSubscriptionContentProto_SubscriptionType_PRICE_TRACK = 1,
  CommerceSubscriptionContentProto_SubscriptionType_CommerceSubscriptionContentProto_SubscriptionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CommerceSubscriptionContentProto_SubscriptionType_CommerceSubscriptionContentProto_SubscriptionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CommerceSubscriptionContentProto_SubscriptionType_IsValid(int value);
constexpr CommerceSubscriptionContentProto_SubscriptionType CommerceSubscriptionContentProto_SubscriptionType_SubscriptionType_MIN = CommerceSubscriptionContentProto_SubscriptionType_TYPE_UNSPECIFIED;
constexpr CommerceSubscriptionContentProto_SubscriptionType CommerceSubscriptionContentProto_SubscriptionType_SubscriptionType_MAX = CommerceSubscriptionContentProto_SubscriptionType_PRICE_TRACK;
constexpr int CommerceSubscriptionContentProto_SubscriptionType_SubscriptionType_ARRAYSIZE = CommerceSubscriptionContentProto_SubscriptionType_SubscriptionType_MAX + 1;

const std::string& CommerceSubscriptionContentProto_SubscriptionType_Name(CommerceSubscriptionContentProto_SubscriptionType value);
template<typename T>
inline const std::string& CommerceSubscriptionContentProto_SubscriptionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommerceSubscriptionContentProto_SubscriptionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommerceSubscriptionContentProto_SubscriptionType_Name.");
  return CommerceSubscriptionContentProto_SubscriptionType_Name(static_cast<CommerceSubscriptionContentProto_SubscriptionType>(enum_t_value));
}
bool CommerceSubscriptionContentProto_SubscriptionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommerceSubscriptionContentProto_SubscriptionType* value);
enum CommerceSubscriptionContentProto_TrackingIdType : int {
  CommerceSubscriptionContentProto_TrackingIdType_IDENTIFIER_TYPE_UNSPECIFIED = 0,
  CommerceSubscriptionContentProto_TrackingIdType_OFFER_ID = 1,
  CommerceSubscriptionContentProto_TrackingIdType_PRODUCT_CLUSTER_ID = 2,
  CommerceSubscriptionContentProto_TrackingIdType_CommerceSubscriptionContentProto_TrackingIdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CommerceSubscriptionContentProto_TrackingIdType_CommerceSubscriptionContentProto_TrackingIdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CommerceSubscriptionContentProto_TrackingIdType_IsValid(int value);
constexpr CommerceSubscriptionContentProto_TrackingIdType CommerceSubscriptionContentProto_TrackingIdType_TrackingIdType_MIN = CommerceSubscriptionContentProto_TrackingIdType_IDENTIFIER_TYPE_UNSPECIFIED;
constexpr CommerceSubscriptionContentProto_TrackingIdType CommerceSubscriptionContentProto_TrackingIdType_TrackingIdType_MAX = CommerceSubscriptionContentProto_TrackingIdType_PRODUCT_CLUSTER_ID;
constexpr int CommerceSubscriptionContentProto_TrackingIdType_TrackingIdType_ARRAYSIZE = CommerceSubscriptionContentProto_TrackingIdType_TrackingIdType_MAX + 1;

const std::string& CommerceSubscriptionContentProto_TrackingIdType_Name(CommerceSubscriptionContentProto_TrackingIdType value);
template<typename T>
inline const std::string& CommerceSubscriptionContentProto_TrackingIdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommerceSubscriptionContentProto_TrackingIdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommerceSubscriptionContentProto_TrackingIdType_Name.");
  return CommerceSubscriptionContentProto_TrackingIdType_Name(static_cast<CommerceSubscriptionContentProto_TrackingIdType>(enum_t_value));
}
bool CommerceSubscriptionContentProto_TrackingIdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommerceSubscriptionContentProto_TrackingIdType* value);
enum CommerceSubscriptionContentProto_SubscriptionManagementType : int {
  CommerceSubscriptionContentProto_SubscriptionManagementType_MANAGE_TYPE_UNSPECIFIED = 0,
  CommerceSubscriptionContentProto_SubscriptionManagementType_CHROME_MANAGED = 1,
  CommerceSubscriptionContentProto_SubscriptionManagementType_USER_MANAGED = 2,
  CommerceSubscriptionContentProto_SubscriptionManagementType_CommerceSubscriptionContentProto_SubscriptionManagementType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CommerceSubscriptionContentProto_SubscriptionManagementType_CommerceSubscriptionContentProto_SubscriptionManagementType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CommerceSubscriptionContentProto_SubscriptionManagementType_IsValid(int value);
constexpr CommerceSubscriptionContentProto_SubscriptionManagementType CommerceSubscriptionContentProto_SubscriptionManagementType_SubscriptionManagementType_MIN = CommerceSubscriptionContentProto_SubscriptionManagementType_MANAGE_TYPE_UNSPECIFIED;
constexpr CommerceSubscriptionContentProto_SubscriptionManagementType CommerceSubscriptionContentProto_SubscriptionManagementType_SubscriptionManagementType_MAX = CommerceSubscriptionContentProto_SubscriptionManagementType_USER_MANAGED;
constexpr int CommerceSubscriptionContentProto_SubscriptionManagementType_SubscriptionManagementType_ARRAYSIZE = CommerceSubscriptionContentProto_SubscriptionManagementType_SubscriptionManagementType_MAX + 1;

const std::string& CommerceSubscriptionContentProto_SubscriptionManagementType_Name(CommerceSubscriptionContentProto_SubscriptionManagementType value);
template<typename T>
inline const std::string& CommerceSubscriptionContentProto_SubscriptionManagementType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommerceSubscriptionContentProto_SubscriptionManagementType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommerceSubscriptionContentProto_SubscriptionManagementType_Name.");
  return CommerceSubscriptionContentProto_SubscriptionManagementType_Name(static_cast<CommerceSubscriptionContentProto_SubscriptionManagementType>(enum_t_value));
}
bool CommerceSubscriptionContentProto_SubscriptionManagementType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommerceSubscriptionContentProto_SubscriptionManagementType* value);
// ===================================================================

class CommerceSubscriptionContentProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:commerce_subscription_db.CommerceSubscriptionContentProto) */ {
 public:
  inline CommerceSubscriptionContentProto() : CommerceSubscriptionContentProto(nullptr) {}
  ~CommerceSubscriptionContentProto() override;
  explicit PROTOBUF_CONSTEXPR CommerceSubscriptionContentProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommerceSubscriptionContentProto(const CommerceSubscriptionContentProto& from);
  CommerceSubscriptionContentProto(CommerceSubscriptionContentProto&& from) noexcept
    : CommerceSubscriptionContentProto() {
    *this = ::std::move(from);
  }

  inline CommerceSubscriptionContentProto& operator=(const CommerceSubscriptionContentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommerceSubscriptionContentProto& operator=(CommerceSubscriptionContentProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CommerceSubscriptionContentProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommerceSubscriptionContentProto* internal_default_instance() {
    return reinterpret_cast<const CommerceSubscriptionContentProto*>(
               &_CommerceSubscriptionContentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommerceSubscriptionContentProto& a, CommerceSubscriptionContentProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CommerceSubscriptionContentProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommerceSubscriptionContentProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommerceSubscriptionContentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommerceSubscriptionContentProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CommerceSubscriptionContentProto& from);
  void MergeFrom(const CommerceSubscriptionContentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommerceSubscriptionContentProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commerce_subscription_db.CommerceSubscriptionContentProto";
  }
  protected:
  explicit CommerceSubscriptionContentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CommerceSubscriptionContentProto_SubscriptionType SubscriptionType;
  static constexpr SubscriptionType TYPE_UNSPECIFIED =
    CommerceSubscriptionContentProto_SubscriptionType_TYPE_UNSPECIFIED;
  static constexpr SubscriptionType PRICE_TRACK =
    CommerceSubscriptionContentProto_SubscriptionType_PRICE_TRACK;
  static inline bool SubscriptionType_IsValid(int value) {
    return CommerceSubscriptionContentProto_SubscriptionType_IsValid(value);
  }
  static constexpr SubscriptionType SubscriptionType_MIN =
    CommerceSubscriptionContentProto_SubscriptionType_SubscriptionType_MIN;
  static constexpr SubscriptionType SubscriptionType_MAX =
    CommerceSubscriptionContentProto_SubscriptionType_SubscriptionType_MAX;
  static constexpr int SubscriptionType_ARRAYSIZE =
    CommerceSubscriptionContentProto_SubscriptionType_SubscriptionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SubscriptionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubscriptionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubscriptionType_Name.");
    return CommerceSubscriptionContentProto_SubscriptionType_Name(enum_t_value);
  }
  static inline bool SubscriptionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubscriptionType* value) {
    return CommerceSubscriptionContentProto_SubscriptionType_Parse(name, value);
  }

  typedef CommerceSubscriptionContentProto_TrackingIdType TrackingIdType;
  static constexpr TrackingIdType IDENTIFIER_TYPE_UNSPECIFIED =
    CommerceSubscriptionContentProto_TrackingIdType_IDENTIFIER_TYPE_UNSPECIFIED;
  static constexpr TrackingIdType OFFER_ID =
    CommerceSubscriptionContentProto_TrackingIdType_OFFER_ID;
  static constexpr TrackingIdType PRODUCT_CLUSTER_ID =
    CommerceSubscriptionContentProto_TrackingIdType_PRODUCT_CLUSTER_ID;
  static inline bool TrackingIdType_IsValid(int value) {
    return CommerceSubscriptionContentProto_TrackingIdType_IsValid(value);
  }
  static constexpr TrackingIdType TrackingIdType_MIN =
    CommerceSubscriptionContentProto_TrackingIdType_TrackingIdType_MIN;
  static constexpr TrackingIdType TrackingIdType_MAX =
    CommerceSubscriptionContentProto_TrackingIdType_TrackingIdType_MAX;
  static constexpr int TrackingIdType_ARRAYSIZE =
    CommerceSubscriptionContentProto_TrackingIdType_TrackingIdType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TrackingIdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrackingIdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrackingIdType_Name.");
    return CommerceSubscriptionContentProto_TrackingIdType_Name(enum_t_value);
  }
  static inline bool TrackingIdType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TrackingIdType* value) {
    return CommerceSubscriptionContentProto_TrackingIdType_Parse(name, value);
  }

  typedef CommerceSubscriptionContentProto_SubscriptionManagementType SubscriptionManagementType;
  static constexpr SubscriptionManagementType MANAGE_TYPE_UNSPECIFIED =
    CommerceSubscriptionContentProto_SubscriptionManagementType_MANAGE_TYPE_UNSPECIFIED;
  static constexpr SubscriptionManagementType CHROME_MANAGED =
    CommerceSubscriptionContentProto_SubscriptionManagementType_CHROME_MANAGED;
  static constexpr SubscriptionManagementType USER_MANAGED =
    CommerceSubscriptionContentProto_SubscriptionManagementType_USER_MANAGED;
  static inline bool SubscriptionManagementType_IsValid(int value) {
    return CommerceSubscriptionContentProto_SubscriptionManagementType_IsValid(value);
  }
  static constexpr SubscriptionManagementType SubscriptionManagementType_MIN =
    CommerceSubscriptionContentProto_SubscriptionManagementType_SubscriptionManagementType_MIN;
  static constexpr SubscriptionManagementType SubscriptionManagementType_MAX =
    CommerceSubscriptionContentProto_SubscriptionManagementType_SubscriptionManagementType_MAX;
  static constexpr int SubscriptionManagementType_ARRAYSIZE =
    CommerceSubscriptionContentProto_SubscriptionManagementType_SubscriptionManagementType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SubscriptionManagementType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubscriptionManagementType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubscriptionManagementType_Name.");
    return CommerceSubscriptionContentProto_SubscriptionManagementType_Name(enum_t_value);
  }
  static inline bool SubscriptionManagementType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubscriptionManagementType* value) {
    return CommerceSubscriptionContentProto_SubscriptionManagementType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kTrackingIdFieldNumber = 3,
    kSubscriptionTypeFieldNumber = 2,
    kTrackingIdTypeFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kManagementTypeFieldNumber = 6,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string tracking_id = 3;
  void clear_tracking_id();
  const std::string& tracking_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tracking_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tracking_id();
  PROTOBUF_NODISCARD std::string* release_tracking_id();
  void set_allocated_tracking_id(std::string* tracking_id);
  private:
  const std::string& _internal_tracking_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracking_id(const std::string& value);
  std::string* _internal_mutable_tracking_id();
  public:

  // .commerce_subscription_db.CommerceSubscriptionContentProto.SubscriptionType subscription_type = 2;
  void clear_subscription_type();
  ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionType subscription_type() const;
  void set_subscription_type(::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionType value);
  private:
  ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionType _internal_subscription_type() const;
  void _internal_set_subscription_type(::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionType value);
  public:

  // .commerce_subscription_db.CommerceSubscriptionContentProto.TrackingIdType tracking_id_type = 4;
  void clear_tracking_id_type();
  ::commerce_subscription_db::CommerceSubscriptionContentProto_TrackingIdType tracking_id_type() const;
  void set_tracking_id_type(::commerce_subscription_db::CommerceSubscriptionContentProto_TrackingIdType value);
  private:
  ::commerce_subscription_db::CommerceSubscriptionContentProto_TrackingIdType _internal_tracking_id_type() const;
  void _internal_set_tracking_id_type(::commerce_subscription_db::CommerceSubscriptionContentProto_TrackingIdType value);
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .commerce_subscription_db.CommerceSubscriptionContentProto.SubscriptionManagementType management_type = 6;
  void clear_management_type();
  ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionManagementType management_type() const;
  void set_management_type(::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionManagementType value);
  private:
  ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionManagementType _internal_management_type() const;
  void _internal_set_management_type(::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionManagementType value);
  public:

  // @@protoc_insertion_point(class_scope:commerce_subscription_db.CommerceSubscriptionContentProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracking_id_;
  int subscription_type_;
  int tracking_id_type_;
  int64_t timestamp_;
  int management_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fcommerce_2fcore_2fproto_2fcommerce_5fsubscription_5fdb_5fcontent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommerceSubscriptionContentProto

// string key = 1;
inline void CommerceSubscriptionContentProto::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& CommerceSubscriptionContentProto::key() const {
  // @@protoc_insertion_point(field_get:commerce_subscription_db.CommerceSubscriptionContentProto.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommerceSubscriptionContentProto::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commerce_subscription_db.CommerceSubscriptionContentProto.key)
}
inline std::string* CommerceSubscriptionContentProto::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:commerce_subscription_db.CommerceSubscriptionContentProto.key)
  return _s;
}
inline const std::string& CommerceSubscriptionContentProto::_internal_key() const {
  return key_.Get();
}
inline void CommerceSubscriptionContentProto::_internal_set_key(const std::string& value) {
  
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* CommerceSubscriptionContentProto::_internal_mutable_key() {
  
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* CommerceSubscriptionContentProto::release_key() {
  // @@protoc_insertion_point(field_release:commerce_subscription_db.CommerceSubscriptionContentProto.key)
  return key_.Release();
}
inline void CommerceSubscriptionContentProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:commerce_subscription_db.CommerceSubscriptionContentProto.key)
}

// .commerce_subscription_db.CommerceSubscriptionContentProto.SubscriptionType subscription_type = 2;
inline void CommerceSubscriptionContentProto::clear_subscription_type() {
  subscription_type_ = 0;
}
inline ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionType CommerceSubscriptionContentProto::_internal_subscription_type() const {
  return static_cast< ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionType >(subscription_type_);
}
inline ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionType CommerceSubscriptionContentProto::subscription_type() const {
  // @@protoc_insertion_point(field_get:commerce_subscription_db.CommerceSubscriptionContentProto.subscription_type)
  return _internal_subscription_type();
}
inline void CommerceSubscriptionContentProto::_internal_set_subscription_type(::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionType value) {
  
  subscription_type_ = value;
}
inline void CommerceSubscriptionContentProto::set_subscription_type(::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionType value) {
  _internal_set_subscription_type(value);
  // @@protoc_insertion_point(field_set:commerce_subscription_db.CommerceSubscriptionContentProto.subscription_type)
}

// string tracking_id = 3;
inline void CommerceSubscriptionContentProto::clear_tracking_id() {
  tracking_id_.ClearToEmpty();
}
inline const std::string& CommerceSubscriptionContentProto::tracking_id() const {
  // @@protoc_insertion_point(field_get:commerce_subscription_db.CommerceSubscriptionContentProto.tracking_id)
  return _internal_tracking_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommerceSubscriptionContentProto::set_tracking_id(ArgT0&& arg0, ArgT... args) {
 
 tracking_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commerce_subscription_db.CommerceSubscriptionContentProto.tracking_id)
}
inline std::string* CommerceSubscriptionContentProto::mutable_tracking_id() {
  std::string* _s = _internal_mutable_tracking_id();
  // @@protoc_insertion_point(field_mutable:commerce_subscription_db.CommerceSubscriptionContentProto.tracking_id)
  return _s;
}
inline const std::string& CommerceSubscriptionContentProto::_internal_tracking_id() const {
  return tracking_id_.Get();
}
inline void CommerceSubscriptionContentProto::_internal_set_tracking_id(const std::string& value) {
  
  tracking_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CommerceSubscriptionContentProto::_internal_mutable_tracking_id() {
  
  return tracking_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CommerceSubscriptionContentProto::release_tracking_id() {
  // @@protoc_insertion_point(field_release:commerce_subscription_db.CommerceSubscriptionContentProto.tracking_id)
  return tracking_id_.Release();
}
inline void CommerceSubscriptionContentProto::set_allocated_tracking_id(std::string* tracking_id) {
  if (tracking_id != nullptr) {
    
  } else {
    
  }
  tracking_id_.SetAllocated(tracking_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tracking_id_.IsDefault()) {
    tracking_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:commerce_subscription_db.CommerceSubscriptionContentProto.tracking_id)
}

// .commerce_subscription_db.CommerceSubscriptionContentProto.TrackingIdType tracking_id_type = 4;
inline void CommerceSubscriptionContentProto::clear_tracking_id_type() {
  tracking_id_type_ = 0;
}
inline ::commerce_subscription_db::CommerceSubscriptionContentProto_TrackingIdType CommerceSubscriptionContentProto::_internal_tracking_id_type() const {
  return static_cast< ::commerce_subscription_db::CommerceSubscriptionContentProto_TrackingIdType >(tracking_id_type_);
}
inline ::commerce_subscription_db::CommerceSubscriptionContentProto_TrackingIdType CommerceSubscriptionContentProto::tracking_id_type() const {
  // @@protoc_insertion_point(field_get:commerce_subscription_db.CommerceSubscriptionContentProto.tracking_id_type)
  return _internal_tracking_id_type();
}
inline void CommerceSubscriptionContentProto::_internal_set_tracking_id_type(::commerce_subscription_db::CommerceSubscriptionContentProto_TrackingIdType value) {
  
  tracking_id_type_ = value;
}
inline void CommerceSubscriptionContentProto::set_tracking_id_type(::commerce_subscription_db::CommerceSubscriptionContentProto_TrackingIdType value) {
  _internal_set_tracking_id_type(value);
  // @@protoc_insertion_point(field_set:commerce_subscription_db.CommerceSubscriptionContentProto.tracking_id_type)
}

// int64 timestamp = 5;
inline void CommerceSubscriptionContentProto::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t CommerceSubscriptionContentProto::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t CommerceSubscriptionContentProto::timestamp() const {
  // @@protoc_insertion_point(field_get:commerce_subscription_db.CommerceSubscriptionContentProto.timestamp)
  return _internal_timestamp();
}
inline void CommerceSubscriptionContentProto::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void CommerceSubscriptionContentProto::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:commerce_subscription_db.CommerceSubscriptionContentProto.timestamp)
}

// .commerce_subscription_db.CommerceSubscriptionContentProto.SubscriptionManagementType management_type = 6;
inline void CommerceSubscriptionContentProto::clear_management_type() {
  management_type_ = 0;
}
inline ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionManagementType CommerceSubscriptionContentProto::_internal_management_type() const {
  return static_cast< ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionManagementType >(management_type_);
}
inline ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionManagementType CommerceSubscriptionContentProto::management_type() const {
  // @@protoc_insertion_point(field_get:commerce_subscription_db.CommerceSubscriptionContentProto.management_type)
  return _internal_management_type();
}
inline void CommerceSubscriptionContentProto::_internal_set_management_type(::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionManagementType value) {
  
  management_type_ = value;
}
inline void CommerceSubscriptionContentProto::set_management_type(::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionManagementType value) {
  _internal_set_management_type(value);
  // @@protoc_insertion_point(field_set:commerce_subscription_db.CommerceSubscriptionContentProto.management_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace commerce_subscription_db

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionType> : ::std::true_type {};
template <> struct is_proto_enum< ::commerce_subscription_db::CommerceSubscriptionContentProto_TrackingIdType> : ::std::true_type {};
template <> struct is_proto_enum< ::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionManagementType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fcommerce_2fcore_2fproto_2fcommerce_5fsubscription_5fdb_5fcontent_2eproto
