// components/discardable_memory/public/mojom/discardable_shared_memory_manager.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_DISCARDABLE_MEMORY_PUBLIC_MOJOM_DISCARDABLE_SHARED_MEMORY_MANAGER_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_DISCARDABLE_MEMORY_PUBLIC_MOJOM_DISCARDABLE_SHARED_MEMORY_MANAGER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace discardable_memory {
namespace mojom {
namespace internal {

class ValidationContext;
class  DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t size;
  int32_t id;

 private:
  friend class mojo::internal::MessageFragment<DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_Params_Data>;

  DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_Params_Data();
  ~DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_Params_Data() = delete;
};
static_assert(sizeof(DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_Params_Data) == 16,
              "Bad sizeof(DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_Params_Data)");
class  DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnsafeSharedMemoryRegion_Data> region;

 private:
  friend class mojo::internal::MessageFragment<DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParams_Data>;

  DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParams_Data();
  ~DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParams_Data() = delete;
};
static_assert(sizeof(DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParams_Data) == 16,
              "Bad sizeof(DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParams_Data)");
class  DiscardableSharedMemoryManager_DeletedDiscardableSharedMemory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DiscardableSharedMemoryManager_DeletedDiscardableSharedMemory_Params_Data>;

  DiscardableSharedMemoryManager_DeletedDiscardableSharedMemory_Params_Data();
  ~DiscardableSharedMemoryManager_DeletedDiscardableSharedMemory_Params_Data() = delete;
};
static_assert(sizeof(DiscardableSharedMemoryManager_DeletedDiscardableSharedMemory_Params_Data) == 16,
              "Bad sizeof(DiscardableSharedMemoryManager_DeletedDiscardableSharedMemory_Params_Data)");

}  // namespace internal


class DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ParamsDataView {
 public:
  DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ParamsDataView() = default;

  DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ParamsDataView(
      internal::DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t size() const {
    return data_->size;
  }
  int32_t id() const {
    return data_->id;
  }
 private:
  internal::DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_Params_Data* data_ = nullptr;
};



class DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParamsDataView {
 public:
  DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParamsDataView() = default;

  DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParamsDataView(
      internal::DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRegionDataView(
      ::mojo_base::mojom::UnsafeSharedMemoryRegionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRegion(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::UnsafeSharedMemoryRegionDataView, UserType>(),
    "Attempting to read the optional `region` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadRegion` instead "
    "of `ReadRegion if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnsafeSharedMemoryRegionDataView>(
        pointer, output, message_);
  }
 private:
  internal::DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DiscardableSharedMemoryManager_DeletedDiscardableSharedMemory_ParamsDataView {
 public:
  DiscardableSharedMemoryManager_DeletedDiscardableSharedMemory_ParamsDataView() = default;

  DiscardableSharedMemoryManager_DeletedDiscardableSharedMemory_ParamsDataView(
      internal::DiscardableSharedMemoryManager_DeletedDiscardableSharedMemory_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t id() const {
    return data_->id;
  }
 private:
  internal::DiscardableSharedMemoryManager_DeletedDiscardableSharedMemory_Params_Data* data_ = nullptr;
};




inline void DiscardableSharedMemoryManager_AllocateLockedDiscardableSharedMemory_ResponseParamsDataView::GetRegionDataView(
    ::mojo_base::mojom::UnsafeSharedMemoryRegionDataView* output) {
  auto pointer = data_->region.Get();
  *output = ::mojo_base::mojom::UnsafeSharedMemoryRegionDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace discardable_memory

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_DISCARDABLE_MEMORY_PUBLIC_MOJOM_DISCARDABLE_SHARED_MEMORY_MANAGER_MOJOM_PARAMS_DATA_H_