// components/schema_org/common/improved_metadata.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SCHEMA_ORG_COMMON_IMPROVED_METADATA_MOJOM_SHARED_H_
#define COMPONENTS_SCHEMA_ORG_COMMON_IMPROVED_METADATA_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/schema_org/common/improved_metadata.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"







namespace schema_org {
namespace improved {
namespace mojom {
class ValuesDataView;

class PropertyDataView;

class EntityDataView;



}  // namespace mojom
}  // namespace improved
}  // namespace schema_org

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::schema_org::improved::mojom::ValuesDataView> {
  using Data = ::schema_org::improved::mojom::internal::Values_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::schema_org::improved::mojom::PropertyDataView> {
  using Data = ::schema_org::improved::mojom::internal::Property_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::schema_org::improved::mojom::EntityDataView> {
  using Data = ::schema_org::improved::mojom::internal::Entity_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace schema_org {
namespace improved {
namespace mojom {


class ValuesDataView {
 public:
  ValuesDataView() = default;

  ValuesDataView(
      internal::Values_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBoolValuesDataView(
      mojo::ArrayDataView<bool>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBoolValues(UserType* output) {
    
    auto* pointer = data_->bool_values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<bool>>(
        pointer, output, message_);
  }
  inline void GetLongValuesDataView(
      mojo::ArrayDataView<int64_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLongValues(UserType* output) {
    
    auto* pointer = data_->long_values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int64_t>>(
        pointer, output, message_);
  }
  inline void GetStringValuesDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStringValues(UserType* output) {
    
    auto* pointer = data_->string_values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
  inline void GetDoubleValuesDataView(
      mojo::ArrayDataView<double>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDoubleValues(UserType* output) {
    
    auto* pointer = data_->double_values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<double>>(
        pointer, output, message_);
  }
  inline void GetDateTimeValuesDataView(
      mojo::ArrayDataView<::mojo_base::mojom::TimeDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDateTimeValues(UserType* output) {
    
    auto* pointer = data_->date_time_values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo_base::mojom::TimeDataView>>(
        pointer, output, message_);
  }
  inline void GetTimeValuesDataView(
      mojo::ArrayDataView<::mojo_base::mojom::TimeDeltaDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTimeValues(UserType* output) {
    
    auto* pointer = data_->time_values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo_base::mojom::TimeDeltaDataView>>(
        pointer, output, message_);
  }
  inline void GetUrlValuesDataView(
      mojo::ArrayDataView<::url::mojom::UrlDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrlValues(UserType* output) {
    
    auto* pointer = data_->url_values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        pointer, output, message_);
  }
  inline void GetEntityValuesDataView(
      mojo::ArrayDataView<EntityDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEntityValues(UserType* output) {
    
    auto* pointer = data_->entity_values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::schema_org::improved::mojom::EntityDataView>>(
        pointer, output, message_);
  }
 private:
  internal::Values_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PropertyDataView {
 public:
  PropertyDataView() = default;

  PropertyDataView(
      internal::Property_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetValuesDataView(
      ValuesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValues(UserType* output) {
    
    auto* pointer = data_->values.Get();
    return mojo::internal::Deserialize<::schema_org::improved::mojom::ValuesDataView>(
        pointer, output, message_);
  }
 private:
  internal::Property_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class EntityDataView {
 public:
  EntityDataView() = default;

  EntityDataView(
      internal::Entity_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) {
    
    auto* pointer = data_->type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPropertiesDataView(
      mojo::ArrayDataView<PropertyDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProperties(UserType* output) {
    
    auto* pointer = data_->properties.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::schema_org::improved::mojom::PropertyDataView>>(
        pointer, output, message_);
  }
 private:
  internal::Entity_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace improved
}  // namespace schema_org

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::schema_org::improved::mojom::ValuesDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::schema_org::improved::mojom::ValuesDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::schema_org::improved::mojom::internal::Values_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::bool_values(input)) in_bool_values = Traits::bool_values(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->bool_values)::BaseType>
        bool_values_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams bool_values_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<bool>>(
        in_bool_values, bool_values_fragment, &bool_values_validate_params);
    fragment->bool_values.Set(
        bool_values_fragment.is_null() ? nullptr : bool_values_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->bool_values.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bool_values in Values struct");
    decltype(Traits::long_values(input)) in_long_values = Traits::long_values(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->long_values)::BaseType>
        long_values_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams long_values_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<int64_t>>(
        in_long_values, long_values_fragment, &long_values_validate_params);
    fragment->long_values.Set(
        long_values_fragment.is_null() ? nullptr : long_values_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->long_values.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null long_values in Values struct");
    decltype(Traits::string_values(input)) in_string_values = Traits::string_values(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->string_values)::BaseType>
        string_values_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams string_values_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_string_values, string_values_fragment, &string_values_validate_params);
    fragment->string_values.Set(
        string_values_fragment.is_null() ? nullptr : string_values_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->string_values.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null string_values in Values struct");
    decltype(Traits::double_values(input)) in_double_values = Traits::double_values(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->double_values)::BaseType>
        double_values_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams double_values_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<double>>(
        in_double_values, double_values_fragment, &double_values_validate_params);
    fragment->double_values.Set(
        double_values_fragment.is_null() ? nullptr : double_values_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->double_values.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null double_values in Values struct");
    decltype(Traits::date_time_values(input)) in_date_time_values = Traits::date_time_values(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->date_time_values)::BaseType>
        date_time_values_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams date_time_values_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::mojo_base::mojom::TimeDataView>>(
        in_date_time_values, date_time_values_fragment, &date_time_values_validate_params);
    fragment->date_time_values.Set(
        date_time_values_fragment.is_null() ? nullptr : date_time_values_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->date_time_values.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null date_time_values in Values struct");
    decltype(Traits::time_values(input)) in_time_values = Traits::time_values(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->time_values)::BaseType>
        time_values_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams time_values_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::mojo_base::mojom::TimeDeltaDataView>>(
        in_time_values, time_values_fragment, &time_values_validate_params);
    fragment->time_values.Set(
        time_values_fragment.is_null() ? nullptr : time_values_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->time_values.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null time_values in Values struct");
    decltype(Traits::url_values(input)) in_url_values = Traits::url_values(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url_values)::BaseType>
        url_values_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams url_values_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        in_url_values, url_values_fragment, &url_values_validate_params);
    fragment->url_values.Set(
        url_values_fragment.is_null() ? nullptr : url_values_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->url_values.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url_values in Values struct");
    decltype(Traits::entity_values(input)) in_entity_values = Traits::entity_values(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->entity_values)::BaseType>
        entity_values_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams entity_values_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::schema_org::improved::mojom::EntityDataView>>(
        in_entity_values, entity_values_fragment, &entity_values_validate_params);
    fragment->entity_values.Set(
        entity_values_fragment.is_null() ? nullptr : entity_values_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->entity_values.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null entity_values in Values struct");
  }

  static bool Deserialize(::schema_org::improved::mojom::internal::Values_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::schema_org::improved::mojom::ValuesDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::schema_org::improved::mojom::PropertyDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::schema_org::improved::mojom::PropertyDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::schema_org::improved::mojom::internal::Property_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::name(input)) in_name = Traits::name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name)::BaseType> name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, name_fragment);
    fragment->name.Set(
        name_fragment.is_null() ? nullptr : name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in Property struct");
    decltype(Traits::values(input)) in_values = Traits::values(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->values)::BaseType> values_fragment(
            fragment.message());
    mojo::internal::Serialize<::schema_org::improved::mojom::ValuesDataView>(
        in_values, values_fragment);
    fragment->values.Set(
        values_fragment.is_null() ? nullptr : values_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->values.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null values in Property struct");
  }

  static bool Deserialize(::schema_org::improved::mojom::internal::Property_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::schema_org::improved::mojom::PropertyDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::schema_org::improved::mojom::EntityDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::schema_org::improved::mojom::EntityDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::schema_org::improved::mojom::internal::Entity_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::type(input)) in_type = Traits::type(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->type)::BaseType> type_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_type, type_fragment);
    fragment->type.Set(
        type_fragment.is_null() ? nullptr : type_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null type in Entity struct");
    decltype(Traits::id(input)) in_id = Traits::id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->id)::BaseType> id_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_id, id_fragment);
    fragment->id.Set(
        id_fragment.is_null() ? nullptr : id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null id in Entity struct");
    decltype(Traits::properties(input)) in_properties = Traits::properties(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->properties)::BaseType>
        properties_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams properties_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::schema_org::improved::mojom::PropertyDataView>>(
        in_properties, properties_fragment, &properties_validate_params);
    fragment->properties.Set(
        properties_fragment.is_null() ? nullptr : properties_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->properties.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null properties in Entity struct");
  }

  static bool Deserialize(::schema_org::improved::mojom::internal::Entity_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::schema_org::improved::mojom::EntityDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace schema_org {
namespace improved {
namespace mojom {

inline void ValuesDataView::GetBoolValuesDataView(
    mojo::ArrayDataView<bool>* output) {
  auto pointer = data_->bool_values.Get();
  *output = mojo::ArrayDataView<bool>(pointer, message_);
}
inline void ValuesDataView::GetLongValuesDataView(
    mojo::ArrayDataView<int64_t>* output) {
  auto pointer = data_->long_values.Get();
  *output = mojo::ArrayDataView<int64_t>(pointer, message_);
}
inline void ValuesDataView::GetStringValuesDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->string_values.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}
inline void ValuesDataView::GetDoubleValuesDataView(
    mojo::ArrayDataView<double>* output) {
  auto pointer = data_->double_values.Get();
  *output = mojo::ArrayDataView<double>(pointer, message_);
}
inline void ValuesDataView::GetDateTimeValuesDataView(
    mojo::ArrayDataView<::mojo_base::mojom::TimeDataView>* output) {
  auto pointer = data_->date_time_values.Get();
  *output = mojo::ArrayDataView<::mojo_base::mojom::TimeDataView>(pointer, message_);
}
inline void ValuesDataView::GetTimeValuesDataView(
    mojo::ArrayDataView<::mojo_base::mojom::TimeDeltaDataView>* output) {
  auto pointer = data_->time_values.Get();
  *output = mojo::ArrayDataView<::mojo_base::mojom::TimeDeltaDataView>(pointer, message_);
}
inline void ValuesDataView::GetUrlValuesDataView(
    mojo::ArrayDataView<::url::mojom::UrlDataView>* output) {
  auto pointer = data_->url_values.Get();
  *output = mojo::ArrayDataView<::url::mojom::UrlDataView>(pointer, message_);
}
inline void ValuesDataView::GetEntityValuesDataView(
    mojo::ArrayDataView<EntityDataView>* output) {
  auto pointer = data_->entity_values.Get();
  *output = mojo::ArrayDataView<EntityDataView>(pointer, message_);
}


inline void PropertyDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void PropertyDataView::GetValuesDataView(
    ValuesDataView* output) {
  auto pointer = data_->values.Get();
  *output = ValuesDataView(pointer, message_);
}


inline void EntityDataView::GetTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->type.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void EntityDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void EntityDataView::GetPropertiesDataView(
    mojo::ArrayDataView<PropertyDataView>* output) {
  auto pointer = data_->properties.Get();
  *output = mojo::ArrayDataView<PropertyDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace improved
}  // namespace schema_org

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // COMPONENTS_SCHEMA_ORG_COMMON_IMPROVED_METADATA_MOJOM_SHARED_H_