// components/schema_org/common/improved_metadata.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "components/schema_org/common/improved_metadata.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/schema_org/common/improved_metadata.mojom-params-data.h"
namespace schema_org {
namespace improved {
namespace mojom {

namespace internal {


// static
bool Values_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 72, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Values_Data* object =
      static_cast<const Values_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->bool_values, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams bool_values_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->bool_values, validation_context,
                                         &bool_values_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->long_values, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams long_values_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->long_values, validation_context,
                                         &long_values_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->string_values, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams string_values_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->string_values, validation_context,
                                         &string_values_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->double_values, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams double_values_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->double_values, validation_context,
                                         &double_values_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->date_time_values, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams date_time_values_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->date_time_values, validation_context,
                                         &date_time_values_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->time_values, 6, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams time_values_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->time_values, validation_context,
                                         &time_values_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url_values, 7, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams url_values_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->url_values, validation_context,
                                         &url_values_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->entity_values, 8, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams entity_values_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->entity_values, validation_context,
                                         &entity_values_validate_params)) {
    return false;
  }

  return true;
}

Values_Data::Values_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Property_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Property_Data* object =
      static_cast<const Property_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->name, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->name, validation_context,
                                         &name_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->values, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->values, validation_context))
    return false;

  return true;
}

Property_Data::Property_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Entity_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Entity_Data* object =
      static_cast<const Entity_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->type, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams type_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->type, validation_context,
                                         &type_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->id, validation_context,
                                         &id_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->properties, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams properties_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->properties, validation_context,
                                         &properties_validate_params)) {
    return false;
  }

  return true;
}

Entity_Data::Entity_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace improved
}  // namespace schema_org