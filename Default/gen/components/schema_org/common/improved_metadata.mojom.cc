// components/schema_org/common/improved_metadata.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/schema_org/common/improved_metadata.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/schema_org/common/improved_metadata.mojom-params-data.h"
#include "components/schema_org/common/improved_metadata.mojom-shared-message-ids.h"

#include "components/schema_org/common/improved_metadata.mojom-import-headers.h"
#include "components/schema_org/common/improved_metadata.mojom-test-utils.h"


#ifndef COMPONENTS_SCHEMA_ORG_COMMON_IMPROVED_METADATA_MOJOM_JUMBO_H_
#define COMPONENTS_SCHEMA_ORG_COMMON_IMPROVED_METADATA_MOJOM_JUMBO_H_
#endif



namespace schema_org {
namespace improved {
namespace mojom {
Values::Values()
    : bool_values(),
      long_values(),
      string_values(),
      double_values(),
      date_time_values(),
      time_values(),
      url_values(),
      entity_values() {}

Values::Values(
    std::vector<bool> bool_values_in,
    std::vector<int64_t> long_values_in,
    std::vector<std::string> string_values_in,
    std::vector<double> double_values_in,
    std::vector<::base::Time> date_time_values_in,
    std::vector<::base::TimeDelta> time_values_in,
    std::vector<::GURL> url_values_in,
    std::vector<EntityPtr> entity_values_in)
    : bool_values(std::move(bool_values_in)),
      long_values(std::move(long_values_in)),
      string_values(std::move(string_values_in)),
      double_values(std::move(double_values_in)),
      date_time_values(std::move(date_time_values_in)),
      time_values(std::move(time_values_in)),
      url_values(std::move(url_values_in)),
      entity_values(std::move(entity_values_in)) {}

Values::~Values() = default;

void Values::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bool_values"), this->bool_values,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<bool>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "long_values"), this->long_values,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<int64_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "string_values"), this->string_values,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "double_values"), this->double_values,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<double>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "date_time_values"), this->date_time_values,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::base::Time>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "time_values"), this->time_values,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::base::TimeDelta>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "url_values"), this->url_values,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::GURL>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "entity_values"), this->entity_values,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<EntityPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool Values::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
Property::Property()
    : name(),
      values() {}

Property::Property(
    const std::string& name_in,
    ValuesPtr values_in)
    : name(std::move(name_in)),
      values(std::move(values_in)) {}

Property::~Property() = default;

void Property::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "values"), this->values,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ValuesPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool Property::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
Entity::Entity()
    : type(),
      id(),
      properties() {}

Entity::Entity(
    const std::string& type_in,
    const std::string& id_in,
    std::vector<PropertyPtr> properties_in)
    : type(std::move(type_in)),
      id(std::move(id_in)),
      properties(std::move(properties_in)) {}

Entity::~Entity() = default;

void Entity::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "id"), this->id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "properties"), this->properties,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<PropertyPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool Entity::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace improved
}  // namespace schema_org


namespace mojo {


// static
bool StructTraits<::schema_org::improved::mojom::Values::DataView, ::schema_org::improved::mojom::ValuesPtr>::Read(
    ::schema_org::improved::mojom::Values::DataView input,
    ::schema_org::improved::mojom::ValuesPtr* output) {
  bool success = true;
  ::schema_org::improved::mojom::ValuesPtr result(::schema_org::improved::mojom::Values::New());
  
      if (success && !input.ReadBoolValues(&result->bool_values))
        success = false;
      if (success && !input.ReadLongValues(&result->long_values))
        success = false;
      if (success && !input.ReadStringValues(&result->string_values))
        success = false;
      if (success && !input.ReadDoubleValues(&result->double_values))
        success = false;
      if (success && !input.ReadDateTimeValues(&result->date_time_values))
        success = false;
      if (success && !input.ReadTimeValues(&result->time_values))
        success = false;
      if (success && !input.ReadUrlValues(&result->url_values))
        success = false;
      if (success && !input.ReadEntityValues(&result->entity_values))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::schema_org::improved::mojom::Property::DataView, ::schema_org::improved::mojom::PropertyPtr>::Read(
    ::schema_org::improved::mojom::Property::DataView input,
    ::schema_org::improved::mojom::PropertyPtr* output) {
  bool success = true;
  ::schema_org::improved::mojom::PropertyPtr result(::schema_org::improved::mojom::Property::New());
  
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadValues(&result->values))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::schema_org::improved::mojom::Entity::DataView, ::schema_org::improved::mojom::EntityPtr>::Read(
    ::schema_org::improved::mojom::Entity::DataView input,
    ::schema_org::improved::mojom::EntityPtr* output) {
  bool success = true;
  ::schema_org::improved::mojom::EntityPtr result(::schema_org::improved::mojom::Entity::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadId(&result->id))
        success = false;
      if (success && !input.ReadProperties(&result->properties))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace schema_org {
namespace improved {
namespace mojom {




}  // namespace mojom
}  // namespace improved
}  // namespace schema_org


#if defined(__clang__)
#pragma clang diagnostic pop
#endif