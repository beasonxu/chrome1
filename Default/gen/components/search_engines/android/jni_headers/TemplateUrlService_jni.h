// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/search_engines/TemplateUrlService

#ifndef org_chromium_components_search_engines_TemplateUrlService_JNI
#define org_chromium_components_search_engines_TemplateUrlService_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_search_1engines_TemplateUrlService[];
const char kClassPath_org_chromium_components_search_1engines_TemplateUrlService[] =
    "org/chromium/components/search_engines/TemplateUrlService";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_search_1engines_TemplateUrlService_clazz(nullptr);
#ifndef org_chromium_components_search_1engines_TemplateUrlService_clazz_defined
#define org_chromium_components_search_1engines_TemplateUrlService_clazz_defined
inline jclass org_chromium_components_search_1engines_TemplateUrlService_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_search_1engines_TemplateUrlService,
      &g_org_chromium_components_search_1engines_TemplateUrlService_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_MVKcMDBb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Load");
  return native->Load(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M4Z0aoFH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsLoaded", false);
  return native->IsLoaded(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MxknP4iP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller,
    jstring selectedKeyword) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetUserSelectedDefaultSearchProvider");
  return native->SetUserSelectedDefaultSearchProvider(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jstring>(env, selectedKeyword));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MELaF8Vs(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsDefaultSearchManaged", false);
  return native->IsDefaultSearchManaged(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MF3JCGn0(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller,
    jobject url) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSearchResultsPageFromDefaultSearchProvider", false);
  return native->IsSearchResultsPageFromDefaultSearchProvider(env,
      base::android::JavaParamRef<jobject>(env, caller), base::android::JavaParamRef<jobject>(env,
      url));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MpyUpqFi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSearchByImageAvailable", false);
  return native->IsSearchByImageAvailable(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MsoVJOXN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DoesDefaultSearchEngineHaveLogo", false);
  return native->DoesDefaultSearchEngineHaveLogo(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MWMFuBEz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsDefaultSearchEngineGoogle", false);
  return native->IsDefaultSearchEngineGoogle(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_Mweksmrf(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller,
    jstring query,
    jobjectArray searchParams) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetUrlForSearchQuery", NULL);
  return native->GetUrlForSearchQuery(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, query),
      base::android::JavaParamRef<jobjectArray>(env, searchParams)).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MfK2IDmL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller,
    jobject url) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSearchQueryForUrl", NULL);
  return native->GetSearchQueryForUrl(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, url)).Release();
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MA0BGHUQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller,
    jstring query) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetUrlForVoiceSearchQuery", NULL);
  return native->GetUrlForVoiceSearchQuery(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, query)).Release();
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MBQwEcmT(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller,
    jstring query,
    jstring alternateTerm,
    jboolean shouldPrefetch,
    jstring protocolVersion) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetUrlForContextualSearchQuery", NULL);
  return native->GetUrlForContextualSearchQuery(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jstring>(env, query),
      base::android::JavaParamRef<jstring>(env, alternateTerm), shouldPrefetch,
      base::android::JavaParamRef<jstring>(env, protocolVersion)).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MjOvYRBS(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller,
    jstring keyword) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSearchEngineUrlFromTemplateUrl", NULL);
  return native->GetSearchEngineUrlFromTemplateUrl(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jstring>(env, keyword)).Release();
}

JNI_GENERATOR_EXPORT jint Java_J_N_MJpD6RKI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller,
    jstring keyword) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSearchEngineTypeFromTemplateUrl", 0);
  return native->GetSearchEngineTypeFromTemplateUrl(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jstring>(env, keyword));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_M6WGq1yo_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller,
    jstring keyword,
    jint offset) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddSearchEngineForTesting", NULL);
  return native->AddSearchEngineForTesting(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, keyword), offset).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mtum8rvb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller,
    jstring name,
    jstring keyword,
    jstring searchUrl,
    jstring suggestUrl,
    jstring faviconUrl,
    jboolean setAsDefault) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPlayAPISearchEngine", false);
  return native->SetPlayAPISearchEngine(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, name), base::android::JavaParamRef<jstring>(env,
      keyword), base::android::JavaParamRef<jstring>(env, searchUrl),
      base::android::JavaParamRef<jstring>(env, suggestUrl),
      base::android::JavaParamRef<jstring>(env, faviconUrl), setAsDefault);
}

JNI_GENERATOR_EXPORT void Java_J_N_MfJgqWb9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller,
    jobject templateUrls) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTemplateUrls");
  return native->GetTemplateUrls(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, templateUrls));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MxujzkW4(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTemplateUrlServiceAndroid,
    jobject caller) {
  TemplateUrlServiceAndroid* native =
      reinterpret_cast<TemplateUrlServiceAndroid*>(nativeTemplateUrlServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetDefaultSearchEngine", NULL);
  return native->GetDefaultSearchEngine(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}


static std::atomic<jmethodID>
    g_org_chromium_components_search_1engines_TemplateUrlService_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TemplateUrlService_create(JNIEnv* env, jlong
    nativeTemplateUrlServiceAndroid) {
  jclass clazz = org_chromium_components_search_1engines_TemplateUrlService_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_search_1engines_TemplateUrlService_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/components/search_engines/TemplateUrlService;",
          &g_org_chromium_components_search_1engines_TemplateUrlService_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeTemplateUrlServiceAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_search_1engines_TemplateUrlService_clearNativePtr(nullptr);
static void Java_TemplateUrlService_clearNativePtr(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_search_1engines_TemplateUrlService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_search_1engines_TemplateUrlService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "clearNativePtr",
          "()V",
          &g_org_chromium_components_search_1engines_TemplateUrlService_clearNativePtr);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_search_1engines_TemplateUrlService_addTemplateUrlToList(nullptr);
static void Java_TemplateUrlService_addTemplateUrlToList(JNIEnv* env, const
    base::android::JavaRef<jobject>& templateUrls,
    const base::android::JavaRef<jobject>& templateUrl) {
  jclass clazz = org_chromium_components_search_1engines_TemplateUrlService_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_search_1engines_TemplateUrlService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addTemplateUrlToList",
          "(Ljava/util/List;Lorg/chromium/components/search_engines/TemplateUrl;)V",
          &g_org_chromium_components_search_1engines_TemplateUrlService_addTemplateUrlToList);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, templateUrls.obj(), templateUrl.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_components_search_1engines_TemplateUrlService_templateUrlServiceLoaded(nullptr);
static void Java_TemplateUrlService_templateUrlServiceLoaded(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_search_1engines_TemplateUrlService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_search_1engines_TemplateUrlService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "templateUrlServiceLoaded",
          "()V",
          &g_org_chromium_components_search_1engines_TemplateUrlService_templateUrlServiceLoaded);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_search_1engines_TemplateUrlService_onTemplateURLServiceChanged(nullptr);
static void Java_TemplateUrlService_onTemplateURLServiceChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_search_1engines_TemplateUrlService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_search_1engines_TemplateUrlService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onTemplateURLServiceChanged",
          "()V",
&g_org_chromium_components_search_1engines_TemplateUrlService_onTemplateURLServiceChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_components_search_engines_TemplateUrlService_JNI
