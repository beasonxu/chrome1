// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/thinwebview/internal/CompositorViewImpl

#ifndef org_chromium_components_thinwebview_internal_CompositorViewImpl_JNI
#define org_chromium_components_thinwebview_internal_CompositorViewImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_thinwebview_internal_CompositorViewImpl[];
const char kClassPath_org_chromium_components_thinwebview_internal_CompositorViewImpl[] =
    "org/chromium/components/thinwebview/internal/CompositorViewImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_thinwebview_internal_CompositorViewImpl_clazz(nullptr);
#ifndef org_chromium_components_thinwebview_internal_CompositorViewImpl_clazz_defined
#define org_chromium_components_thinwebview_internal_CompositorViewImpl_clazz_defined
inline jclass org_chromium_components_thinwebview_internal_CompositorViewImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_thinwebview_internal_CompositorViewImpl,
      &g_org_chromium_components_thinwebview_internal_CompositorViewImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace thin_webview {
namespace android {

static jlong JNI_CompositorViewImpl_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    const base::android::JavaParamRef<jobject>& windowAndroid,
    jint backgroundColor);

JNI_GENERATOR_EXPORT jlong Java_J_N_MPS_00024crjv(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject windowAndroid,
    jint backgroundColor) {
  return JNI_CompositorViewImpl_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, windowAndroid), backgroundColor);
}

JNI_GENERATOR_EXPORT void Java_J_N_M_1L66GG1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorViewImpl,
    jobject caller) {
  CompositorViewImpl* native = reinterpret_cast<CompositorViewImpl*>(nativeCompositorViewImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MYFXTzso(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorViewImpl,
    jobject caller) {
  CompositorViewImpl* native = reinterpret_cast<CompositorViewImpl*>(nativeCompositorViewImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceCreated");
  return native->SurfaceCreated(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M3gcibnY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorViewImpl,
    jobject caller) {
  CompositorViewImpl* native = reinterpret_cast<CompositorViewImpl*>(nativeCompositorViewImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceDestroyed");
  return native->SurfaceDestroyed(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M5WiS8XV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorViewImpl,
    jobject caller,
    jint format,
    jint width,
    jint height,
    jboolean canBeUsedWithSurfaceControl,
    jobject surface) {
  CompositorViewImpl* native = reinterpret_cast<CompositorViewImpl*>(nativeCompositorViewImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceChanged");
  return native->SurfaceChanged(env, base::android::JavaParamRef<jobject>(env, caller), format,
      width, height, canBeUsedWithSurfaceControl, base::android::JavaParamRef<jobject>(env,
      surface));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mb5mP2_14(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorViewImpl,
    jobject caller) {
  CompositorViewImpl* native = reinterpret_cast<CompositorViewImpl*>(nativeCompositorViewImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetNeedsComposite");
  return native->SetNeedsComposite(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_components_thinwebview_internal_CompositorViewImpl_getNativePtr(nullptr);
static jlong Java_CompositorViewImpl_getNativePtr(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_thinwebview_internal_CompositorViewImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_thinwebview_internal_CompositorViewImpl_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativePtr",
          "()J",
          &g_org_chromium_components_thinwebview_internal_CompositorViewImpl_getNativePtr);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_thinwebview_internal_CompositorViewImpl_onCompositorLayout(nullptr);
static void Java_CompositorViewImpl_onCompositorLayout(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_thinwebview_internal_CompositorViewImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_thinwebview_internal_CompositorViewImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onCompositorLayout",
          "()V",
          &g_org_chromium_components_thinwebview_internal_CompositorViewImpl_onCompositorLayout);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_thinwebview_internal_CompositorViewImpl_recreateSurface(nullptr);
static void Java_CompositorViewImpl_recreateSurface(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_thinwebview_internal_CompositorViewImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_thinwebview_internal_CompositorViewImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "recreateSurface",
          "()V",
          &g_org_chromium_components_thinwebview_internal_CompositorViewImpl_recreateSurface);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace android
}  // namespace thin_webview

#endif  // org_chromium_components_thinwebview_internal_CompositorViewImpl_JNI
