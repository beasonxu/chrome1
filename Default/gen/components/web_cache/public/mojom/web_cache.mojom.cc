// components/web_cache/public/mojom/web_cache.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/web_cache/public/mojom/web_cache.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/web_cache/public/mojom/web_cache.mojom-params-data.h"
#include "components/web_cache/public/mojom/web_cache.mojom-shared-message-ids.h"

#include "components/web_cache/public/mojom/web_cache.mojom-import-headers.h"
#include "components/web_cache/public/mojom/web_cache.mojom-test-utils.h"


#ifndef COMPONENTS_WEB_CACHE_PUBLIC_MOJOM_WEB_CACHE_MOJOM_JUMBO_H_
#define COMPONENTS_WEB_CACHE_PUBLIC_MOJOM_WEB_CACHE_MOJOM_JUMBO_H_
#endif



namespace web_cache {
namespace mojom {
const char WebCache::Name_[] = "web_cache.mojom.WebCache";

WebCache::IPCStableHashFunction WebCache::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kWebCache_SetCacheCapacity_Name: {
      return &WebCache::SetCacheCapacity_Sym::IPCStableHash;
    }
    case internal::kWebCache_ClearCache_Name: {
      return &WebCache::ClearCache_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* WebCache::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kWebCache_SetCacheCapacity_Name:
            return "Receive web_cache::mojom::WebCache::SetCacheCapacity";
      case internal::kWebCache_ClearCache_Name:
            return "Receive web_cache::mojom::WebCache::ClearCache";
    }
  } else {
    switch (message.name()) {
      case internal::kWebCache_SetCacheCapacity_Name:
            return "Receive reply web_cache::mojom::WebCache::SetCacheCapacity";
      case internal::kWebCache_ClearCache_Name:
            return "Receive reply web_cache::mojom::WebCache::ClearCache";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t WebCache::SetCacheCapacity_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)web_cache::mojom::WebCache::SetCacheCapacity");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebCache::ClearCache_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)web_cache::mojom::WebCache::ClearCache");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

WebCacheProxy::WebCacheProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WebCacheProxy::SetCacheCapacity(
    uint64_t in_capacity) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send web_cache::mojom::WebCache::SetCacheCapacity", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("capacity"), in_capacity,
                        "<value of type uint64_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebCache_SetCacheCapacity_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_cache::mojom::internal::WebCache_SetCacheCapacity_Params_Data> params(
          message);
  params.Allocate();
  params->capacity = in_capacity;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebCache::Name_);
  message.set_method_name("SetCacheCapacity");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void WebCacheProxy::ClearCache(
    bool in_on_navigation) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send web_cache::mojom::WebCache::ClearCache", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("on_navigation"), in_on_navigation,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebCache_ClearCache_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_cache::mojom::internal::WebCache_ClearCache_Params_Data> params(
          message);
  params.Allocate();
  params->on_navigation = in_on_navigation;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebCache::Name_);
  message.set_method_name("ClearCache");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool WebCacheStubDispatch::Accept(
    WebCache* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWebCache_SetCacheCapacity_Name: {

      DCHECK(message->is_serialized());
      internal::WebCache_SetCacheCapacity_Params_Data* params =
          reinterpret_cast<internal::WebCache_SetCacheCapacity_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      uint64_t p_capacity{};
      WebCache_SetCacheCapacity_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_capacity = input_data_view.capacity();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebCache::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetCacheCapacity(
std::move(p_capacity));
      return true;
    }
    case internal::kWebCache_ClearCache_Name: {

      DCHECK(message->is_serialized());
      internal::WebCache_ClearCache_Params_Data* params =
          reinterpret_cast<internal::WebCache_ClearCache_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_on_navigation{};
      WebCache_ClearCache_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_on_navigation = input_data_view.on_navigation();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebCache::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ClearCache(
std::move(p_on_navigation));
      return true;
    }
  }
  return false;
}

// static
bool WebCacheStubDispatch::AcceptWithResponder(
    WebCache* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kWebCache_SetCacheCapacity_Name: {
      break;
    }
    case internal::kWebCache_ClearCache_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kWebCacheValidationInfo[] = {
    {&internal::WebCache_SetCacheCapacity_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::WebCache_ClearCache_Params_Data::Validate,
     nullptr /* no response */},
};

bool WebCacheRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::web_cache::mojom::WebCache::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kWebCacheValidationInfo);
}



}  // namespace mojom
}  // namespace web_cache


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace web_cache {
namespace mojom {


void WebCacheInterceptorForTesting::SetCacheCapacity(uint64_t capacity) {
  GetForwardingInterface()->SetCacheCapacity(std::move(capacity));
}
void WebCacheInterceptorForTesting::ClearCache(bool on_navigation) {
  GetForwardingInterface()->ClearCache(std::move(on_navigation));
}
WebCacheAsyncWaiter::WebCacheAsyncWaiter(
    WebCache* proxy) : proxy_(proxy) {}

WebCacheAsyncWaiter::~WebCacheAsyncWaiter() = default;






}  // namespace mojom
}  // namespace web_cache


#if defined(__clang__)
#pragma clang diagnostic pop
#endif