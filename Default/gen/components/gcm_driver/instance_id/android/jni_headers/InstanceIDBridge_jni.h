// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/gcm_driver/instance_id/InstanceIDBridge

#ifndef org_chromium_components_gcm_driver_instance_id_InstanceIDBridge_JNI
#define org_chromium_components_gcm_driver_instance_id_InstanceIDBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge[];
const char kClassPath_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge[] =
    "org/chromium/components/gcm_driver/instance_id/InstanceIDBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(nullptr);
#ifndef org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz_defined
#define org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz_defined
inline jclass org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge,
      &g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace instance_id {

JNI_GENERATOR_EXPORT void Java_J_N_MdjzqME2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInstanceIDAndroid,
    jobject caller,
    jint requestId,
    jstring id) {
  InstanceIDAndroid* native = reinterpret_cast<InstanceIDAndroid*>(nativeInstanceIDAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidGetID");
  return native->DidGetID(env, base::android::JavaParamRef<jobject>(env, caller), requestId,
      base::android::JavaParamRef<jstring>(env, id));
}

JNI_GENERATOR_EXPORT void Java_J_N_M1_1H2CVT(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInstanceIDAndroid,
    jobject caller,
    jint requestId,
    jlong creationTime) {
  InstanceIDAndroid* native = reinterpret_cast<InstanceIDAndroid*>(nativeInstanceIDAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidGetCreationTime");
  return native->DidGetCreationTime(env, base::android::JavaParamRef<jobject>(env, caller),
      requestId, creationTime);
}

JNI_GENERATOR_EXPORT void Java_J_N_MgpbhGOm(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInstanceIDAndroid,
    jobject caller,
    jint requestId,
    jstring token) {
  InstanceIDAndroid* native = reinterpret_cast<InstanceIDAndroid*>(nativeInstanceIDAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidGetToken");
  return native->DidGetToken(env, base::android::JavaParamRef<jobject>(env, caller), requestId,
      base::android::JavaParamRef<jstring>(env, token));
}

JNI_GENERATOR_EXPORT void Java_J_N_MWbugtkA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInstanceIDAndroid,
    jobject caller,
    jint requestId,
    jboolean success) {
  InstanceIDAndroid* native = reinterpret_cast<InstanceIDAndroid*>(nativeInstanceIDAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidDeleteToken");
  return native->DidDeleteToken(env, base::android::JavaParamRef<jobject>(env, caller), requestId,
      success);
}

JNI_GENERATOR_EXPORT void Java_J_N_MB_000244Dsst(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInstanceIDAndroid,
    jobject caller,
    jint requestId,
    jboolean success) {
  InstanceIDAndroid* native = reinterpret_cast<InstanceIDAndroid*>(nativeInstanceIDAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidDeleteID");
  return native->DidDeleteID(env, base::android::JavaParamRef<jobject>(env, caller), requestId,
      success);
}


static std::atomic<jmethodID>
    g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_InstanceIDBridge_create(JNIEnv* env, jlong
    nativeInstanceIDAndroid,
    const base::android::JavaRef<jstring>& subtype) {
  jclass clazz = org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(JLjava/lang/String;)Lorg/chromium/components/gcm_driver/instance_id/InstanceIDBridge;",
          &g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeInstanceIDAndroid, subtype.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_destroy(nullptr);
static void Java_InstanceIDBridge_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_setBlockOnAsyncTasksForTesting(nullptr);
static jboolean Java_InstanceIDBridge_setBlockOnAsyncTasksForTesting(JNIEnv* env, jboolean block) {
  jclass clazz = org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setBlockOnAsyncTasksForTesting",
          "(Z)Z",
&g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_setBlockOnAsyncTasksForTesting);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, block);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_getId(nullptr);
static void Java_InstanceIDBridge_getId(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    JniIntWrapper requestId) {
  jclass clazz = org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getId",
          "(I)V",
          &g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_getId);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(requestId));
}

static std::atomic<jmethodID>
    g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_getCreationTime(nullptr);
static void Java_InstanceIDBridge_getCreationTime(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper requestId) {
  jclass clazz = org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getCreationTime",
          "(I)V",
          &g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_getCreationTime);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(requestId));
}

static std::atomic<jmethodID>
    g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_getToken(nullptr);
static void Java_InstanceIDBridge_getToken(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    JniIntWrapper requestId,
    const base::android::JavaRef<jstring>& authorizedEntity,
    const base::android::JavaRef<jstring>& scope,
    JniIntWrapper flags) {
  jclass clazz = org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getToken",
          "(ILjava/lang/String;Ljava/lang/String;I)V",
          &g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_getToken);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(requestId), authorizedEntity.obj(), scope.obj(),
              as_jint(flags));
}

static std::atomic<jmethodID>
    g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_deleteToken(nullptr);
static void Java_InstanceIDBridge_deleteToken(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper requestId,
    const base::android::JavaRef<jstring>& authorizedEntity,
    const base::android::JavaRef<jstring>& scope) {
  jclass clazz = org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "deleteToken",
          "(ILjava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_deleteToken);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(requestId), authorizedEntity.obj(), scope.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_deleteInstanceID(nullptr);
static void Java_InstanceIDBridge_deleteInstanceID(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper requestId) {
  jclass clazz = org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "deleteInstanceID",
          "(I)V",
          &g_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_deleteInstanceID);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(requestId));
}

}  // namespace instance_id

#endif  // org_chromium_components_gcm_driver_instance_id_InstanceIDBridge_JNI
