// components/cast_streaming/public/mojom/demuxer_connector.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_DEMUXER_CONNECTOR_MOJOM_TEST_UTILS_H_
#define COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_DEMUXER_CONNECTOR_MOJOM_TEST_UTILS_H_

#include "components/cast_streaming/public/mojom/demuxer_connector.mojom.h"


namespace cast_streaming {
namespace mojom {


class  AudioBufferRequesterInterceptorForTesting : public AudioBufferRequester {
  virtual AudioBufferRequester* GetForwardingInterface() = 0;
  void GetBuffer(GetBufferCallback callback) override;
  void EnableBitstreamConverter(EnableBitstreamConverterCallback callback) override;
};
class  AudioBufferRequesterAsyncWaiter {
 public:
  explicit AudioBufferRequesterAsyncWaiter(AudioBufferRequester* proxy);

  AudioBufferRequesterAsyncWaiter(const AudioBufferRequesterAsyncWaiter&) = delete;
  AudioBufferRequesterAsyncWaiter& operator=(const AudioBufferRequesterAsyncWaiter&) = delete;

  ~AudioBufferRequesterAsyncWaiter();
  void GetBuffer(
      GetAudioBufferResponsePtr* out_buffer_response);
  void EnableBitstreamConverter(
      bool* out_success);

 private:
  AudioBufferRequester* const proxy_;
};


class  VideoBufferRequesterInterceptorForTesting : public VideoBufferRequester {
  virtual VideoBufferRequester* GetForwardingInterface() = 0;
  void GetBuffer(GetBufferCallback callback) override;
  void EnableBitstreamConverter(EnableBitstreamConverterCallback callback) override;
};
class  VideoBufferRequesterAsyncWaiter {
 public:
  explicit VideoBufferRequesterAsyncWaiter(VideoBufferRequester* proxy);

  VideoBufferRequesterAsyncWaiter(const VideoBufferRequesterAsyncWaiter&) = delete;
  VideoBufferRequesterAsyncWaiter& operator=(const VideoBufferRequesterAsyncWaiter&) = delete;

  ~VideoBufferRequesterAsyncWaiter();
  void GetBuffer(
      GetVideoBufferResponsePtr* out_buffer_response);
  void EnableBitstreamConverter(
      bool* out_success);

 private:
  VideoBufferRequester* const proxy_;
};


class  DemuxerConnectorInterceptorForTesting : public DemuxerConnector {
  virtual DemuxerConnector* GetForwardingInterface() = 0;
  void EnableReceiver(EnableReceiverCallback callback) override;
  void OnStreamsInitialized(AudioStreamInitializationInfoPtr audio_buffer_requester, VideoStreamInitializationInfoPtr video_buffer_requester) override;
};
class  DemuxerConnectorAsyncWaiter {
 public:
  explicit DemuxerConnectorAsyncWaiter(DemuxerConnector* proxy);

  DemuxerConnectorAsyncWaiter(const DemuxerConnectorAsyncWaiter&) = delete;
  DemuxerConnectorAsyncWaiter& operator=(const DemuxerConnectorAsyncWaiter&) = delete;

  ~DemuxerConnectorAsyncWaiter();
  void EnableReceiver(
      );

 private:
  DemuxerConnector* const proxy_;
};




}  // namespace mojom
}  // namespace cast_streaming

#endif  // COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_DEMUXER_CONNECTOR_MOJOM_TEST_UTILS_H_